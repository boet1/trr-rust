// MIR for `instructions::user::handle_begin_swap` after PreCodegen

fn instructions::user::handle_begin_swap(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::Swap<'_>>, _2: u16, _3: u16, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug in_market_index => _2;
    debug out_market_index => _3;
    debug amount_in => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _9: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _18: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _26: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _27: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _28: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _32: instructions::optional_accounts::AccountMaps<'_>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _34: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _35: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _36: &std::collections::BTreeSet<u16>;
    let _37: &std::collections::BTreeSet<u16>;
    let _38: std::collections::BTreeSet<u16>;
    let mut _39: &std::collections::BTreeSet<u16>;
    let _40: &std::collections::BTreeSet<u16>;
    let _41: std::collections::BTreeSet<u16>;
    let mut _42: std::vec::Vec<u16>;
    let mut _43: std::boxed::Box<[u16]>;
    let mut _44: std::boxed::Box<[u16; 2]>;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: *mut u8;
    let mut _48: std::boxed::Box<[u16; 2]>;
    let mut _49: u16;
    let mut _50: u16;
    let mut _51: u64;
    let mut _52: std::option::Option<state::state::OracleGuardRails>;
    let mut _53: state::state::OracleGuardRails;
    let mut _54: &state::state::State;
    let mut _55: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>>;
    let mut _63: std::result::Result<std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>, error::ErrorCode>;
    let mut _64: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _72: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _73: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _81: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _82: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _83: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _84: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _85: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: &anchor_lang::prelude::Pubkey;
    let _93: &state::user::User;
    let mut _94: &std::cell::RefMut<'_, state::user::User>;
    let mut _95: &anchor_lang::prelude::Pubkey;
    let _96: anchor_lang::prelude::Pubkey;
    let mut _97: &anchor_lang::prelude::Signer<'_>;
    let _98: ();
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _100: std::result::Result<(), error::ErrorCode>;
    let mut _101: bool;
    let mut _102: &state::user::User;
    let _103: &state::user::User;
    let mut _104: &std::cell::RefMut<'_, state::user::User>;
    let mut _105: ();
    let _107: ();
    let mut _108: &str;
    let _109: &str;
    let mut _110: &std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[&str; 2];
    let _117: &[&str; 2];
    let _118: [&str; 2];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let mut _120: &[core::fmt::rt::Argument<'_>; 1];
    let _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: [core::fmt::rt::Argument<'_>; 1];
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &error::ErrorCode;
    let _125: &error::ErrorCode;
    let mut _126: error::ErrorCode;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _134: std::result::Result<(), error::ErrorCode>;
    let mut _135: &mut state::user::User;
    let mut _136: &mut state::user::User;
    let mut _137: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _138: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _139: &state::perp_market_map::PerpMarketMap<'_>;
    let _140: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _141: &state::spot_market_map::SpotMarketMap<'_>;
    let _142: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _143: &mut state::oracle_map::OracleMap<'_>;
    let mut _144: &mut state::oracle_map::OracleMap<'_>;
    let mut _145: u32;
    let mut _146: &state::state::State;
    let mut _147: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _155: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _156: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _157: &u16;
    let _158: &u16;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _164: ();
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _166: std::result::Result<(), error::ErrorCode>;
    let mut _167: bool;
    let mut _168: &state::spot_market::SpotMarket;
    let _169: &state::spot_market::SpotMarket;
    let mut _170: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _171: ();
    let _173: ();
    let mut _174: &str;
    let _175: &str;
    let mut _176: &std::string::String;
    let _177: &std::string::String;
    let _178: std::string::String;
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[&str; 2];
    let _183: &[&str; 2];
    let _184: [&str; 2];
    let mut _185: &[core::fmt::rt::Argument<'_>];
    let mut _186: &[core::fmt::rt::Argument<'_>; 1];
    let _187: &[core::fmt::rt::Argument<'_>; 1];
    let _188: [core::fmt::rt::Argument<'_>; 1];
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &error::ErrorCode;
    let _191: &error::ErrorCode;
    let _192: ();
    let mut _193: &str;
    let _194: &str;
    let mut _195: &std::string::String;
    let _196: &std::string::String;
    let _197: std::string::String;
    let mut _199: std::fmt::Arguments<'_>;
    let mut _200: &[&str];
    let mut _201: &[&str; 1];
    let _202: &[&str; 1];
    let _203: [&str; 1];
    let mut _204: &[core::fmt::rt::Argument<'_>];
    let mut _205: &[core::fmt::rt::Argument<'_>; 1];
    let _206: &[core::fmt::rt::Argument<'_>; 1];
    let _207: [core::fmt::rt::Argument<'_>; 1];
    let mut _208: core::fmt::rt::Argument<'_>;
    let mut _209: &u16;
    let _210: &u16;
    let mut _211: error::ErrorCode;
    let mut _212: isize;
    let mut _214: !;
    let mut _215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _217: ();
    let mut _218: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _219: std::result::Result<(), error::ErrorCode>;
    let mut _220: bool;
    let mut _221: u64;
    let mut _222: &state::spot_market::SpotMarket;
    let mut _223: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _224: bool;
    let mut _225: u64;
    let mut _226: &state::spot_market::SpotMarket;
    let mut _227: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _228: ();
    let _230: ();
    let mut _231: &str;
    let _232: &str;
    let mut _233: &std::string::String;
    let _234: &std::string::String;
    let _235: std::string::String;
    let mut _237: std::fmt::Arguments<'_>;
    let mut _238: &[&str];
    let mut _239: &[&str; 2];
    let _240: &[&str; 2];
    let _241: [&str; 2];
    let mut _242: &[core::fmt::rt::Argument<'_>];
    let mut _243: &[core::fmt::rt::Argument<'_>; 1];
    let _244: &[core::fmt::rt::Argument<'_>; 1];
    let _245: [core::fmt::rt::Argument<'_>; 1];
    let mut _246: core::fmt::rt::Argument<'_>;
    let mut _247: &error::ErrorCode;
    let _248: &error::ErrorCode;
    let _249: ();
    let mut _250: &str;
    let _251: &str;
    let mut _252: error::ErrorCode;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _260: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _261: &mut state::oracle_map::OracleMap<'_>;
    let mut _262: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _263: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _264: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _265: &state::spot_market::SpotMarket;
    let _266: &state::spot_market::SpotMarket;
    let mut _267: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _273: ();
    let mut _274: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _275: std::result::Result<(), error::ErrorCode>;
    let mut _276: &mut state::spot_market::SpotMarket;
    let mut _277: &mut state::spot_market::SpotMarket;
    let mut _278: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _279: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _280: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _281: &state::oracle::OraclePriceData;
    let mut _282: i64;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _290: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _291: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _292: &u16;
    let _293: &u16;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _300: &state::spot_market::SpotMarket;
    let _301: &state::spot_market::SpotMarket;
    let mut _302: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _304: &state::spot_market::SpotMarket;
    let _305: &state::spot_market::SpotMarket;
    let mut _306: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _307: ();
    let mut _308: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _309: std::result::Result<(), error::ErrorCode>;
    let mut _310: bool;
    let mut _311: bool;
    let mut _312: ();
    let _314: ();
    let mut _315: &str;
    let _316: &str;
    let mut _317: &std::string::String;
    let _318: &std::string::String;
    let _319: std::string::String;
    let mut _321: std::fmt::Arguments<'_>;
    let mut _322: &[&str];
    let mut _323: &[&str; 2];
    let _324: &[&str; 2];
    let _325: [&str; 2];
    let mut _326: &[core::fmt::rt::Argument<'_>];
    let mut _327: &[core::fmt::rt::Argument<'_>; 1];
    let _328: &[core::fmt::rt::Argument<'_>; 1];
    let _329: [core::fmt::rt::Argument<'_>; 1];
    let mut _330: core::fmt::rt::Argument<'_>;
    let mut _331: &error::ErrorCode;
    let _332: &error::ErrorCode;
    let _333: ();
    let mut _334: &str;
    let _335: &str;
    let mut _336: error::ErrorCode;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _343: bool;
    let mut _344: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _345: ();
    let mut _346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _347: std::result::Result<(), error::ErrorCode>;
    let mut _348: bool;
    let mut _349: &state::spot_market::SpotMarket;
    let _350: &state::spot_market::SpotMarket;
    let mut _351: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _352: ();
    let _354: ();
    let mut _355: &str;
    let _356: &str;
    let mut _357: &std::string::String;
    let _358: &std::string::String;
    let _359: std::string::String;
    let mut _361: std::fmt::Arguments<'_>;
    let mut _362: &[&str];
    let mut _363: &[&str; 2];
    let _364: &[&str; 2];
    let _365: [&str; 2];
    let mut _366: &[core::fmt::rt::Argument<'_>];
    let mut _367: &[core::fmt::rt::Argument<'_>; 1];
    let _368: &[core::fmt::rt::Argument<'_>; 1];
    let _369: [core::fmt::rt::Argument<'_>; 1];
    let mut _370: core::fmt::rt::Argument<'_>;
    let mut _371: &error::ErrorCode;
    let _372: &error::ErrorCode;
    let _373: ();
    let mut _374: &str;
    let _375: &str;
    let mut _376: &std::string::String;
    let _377: &std::string::String;
    let _378: std::string::String;
    let mut _380: std::fmt::Arguments<'_>;
    let mut _381: &[&str];
    let mut _382: &[&str; 1];
    let _383: &[&str; 1];
    let _384: [&str; 1];
    let mut _385: &[core::fmt::rt::Argument<'_>];
    let mut _386: &[core::fmt::rt::Argument<'_>; 1];
    let _387: &[core::fmt::rt::Argument<'_>; 1];
    let _388: [core::fmt::rt::Argument<'_>; 1];
    let mut _389: core::fmt::rt::Argument<'_>;
    let mut _390: &u16;
    let _391: &u16;
    let mut _392: error::ErrorCode;
    let mut _393: isize;
    let mut _395: !;
    let mut _396: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _398: ();
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _400: std::result::Result<(), error::ErrorCode>;
    let mut _401: bool;
    let mut _402: u64;
    let mut _403: &state::spot_market::SpotMarket;
    let mut _404: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _405: bool;
    let mut _406: u64;
    let mut _407: &state::spot_market::SpotMarket;
    let mut _408: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _409: ();
    let _411: ();
    let mut _412: &str;
    let _413: &str;
    let mut _414: &std::string::String;
    let _415: &std::string::String;
    let _416: std::string::String;
    let mut _418: std::fmt::Arguments<'_>;
    let mut _419: &[&str];
    let mut _420: &[&str; 2];
    let _421: &[&str; 2];
    let _422: [&str; 2];
    let mut _423: &[core::fmt::rt::Argument<'_>];
    let mut _424: &[core::fmt::rt::Argument<'_>; 1];
    let _425: &[core::fmt::rt::Argument<'_>; 1];
    let _426: [core::fmt::rt::Argument<'_>; 1];
    let mut _427: core::fmt::rt::Argument<'_>;
    let mut _428: &error::ErrorCode;
    let _429: &error::ErrorCode;
    let _430: ();
    let mut _431: &str;
    let _432: &str;
    let mut _433: error::ErrorCode;
    let mut _434: isize;
    let mut _436: !;
    let mut _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _440: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _441: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _442: &mut state::oracle_map::OracleMap<'_>;
    let mut _443: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _444: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _445: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _446: &state::spot_market::SpotMarket;
    let _447: &state::spot_market::SpotMarket;
    let mut _448: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _449: isize;
    let mut _451: !;
    let mut _452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _454: ();
    let mut _455: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _456: std::result::Result<(), error::ErrorCode>;
    let mut _457: &mut state::spot_market::SpotMarket;
    let mut _458: &mut state::spot_market::SpotMarket;
    let mut _459: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _460: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _461: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _462: &state::oracle::OraclePriceData;
    let mut _463: i64;
    let mut _464: isize;
    let mut _466: !;
    let mut _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _469: ();
    let mut _470: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _471: std::result::Result<(), error::ErrorCode>;
    let mut _472: bool;
    let mut _473: u16;
    let mut _474: u16;
    let mut _475: ();
    let _477: ();
    let mut _478: &str;
    let _479: &str;
    let mut _480: &std::string::String;
    let _481: &std::string::String;
    let _482: std::string::String;
    let mut _484: std::fmt::Arguments<'_>;
    let mut _485: &[&str];
    let mut _486: &[&str; 2];
    let _487: &[&str; 2];
    let _488: [&str; 2];
    let mut _489: &[core::fmt::rt::Argument<'_>];
    let mut _490: &[core::fmt::rt::Argument<'_>; 1];
    let _491: &[core::fmt::rt::Argument<'_>; 1];
    let _492: [core::fmt::rt::Argument<'_>; 1];
    let mut _493: core::fmt::rt::Argument<'_>;
    let mut _494: &error::ErrorCode;
    let _495: &error::ErrorCode;
    let _496: ();
    let mut _497: &str;
    let _498: &str;
    let mut _499: error::ErrorCode;
    let mut _500: isize;
    let mut _502: !;
    let mut _503: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _505: ();
    let mut _506: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _507: std::result::Result<(), error::ErrorCode>;
    let mut _508: bool;
    let mut _509: u64;
    let mut _510: ();
    let _512: ();
    let mut _513: &str;
    let _514: &str;
    let mut _515: &std::string::String;
    let _516: &std::string::String;
    let _517: std::string::String;
    let mut _519: std::fmt::Arguments<'_>;
    let mut _520: &[&str];
    let mut _521: &[&str; 2];
    let _522: &[&str; 2];
    let _523: [&str; 2];
    let mut _524: &[core::fmt::rt::Argument<'_>];
    let mut _525: &[core::fmt::rt::Argument<'_>; 1];
    let _526: &[core::fmt::rt::Argument<'_>; 1];
    let _527: [core::fmt::rt::Argument<'_>; 1];
    let mut _528: core::fmt::rt::Argument<'_>;
    let mut _529: &error::ErrorCode;
    let _530: &error::ErrorCode;
    let _531: ();
    let mut _532: &str;
    let _533: &str;
    let mut _534: error::ErrorCode;
    let mut _535: isize;
    let mut _537: !;
    let mut _538: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _542: u64;
    let mut _543: &mut state::spot_market::SpotMarket;
    let mut _544: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _545: u64;
    let mut _546: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _547: &anchor_spl::token_interface::TokenAccount;
    let _548: &anchor_spl::token_interface::TokenAccount;
    let mut _549: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _550: &mut state::spot_market::SpotMarket;
    let mut _551: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _553: u64;
    let mut _554: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _555: &anchor_spl::token_interface::TokenAccount;
    let _556: &anchor_spl::token_interface::TokenAccount;
    let mut _557: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _558: &mut state::spot_market::SpotMarket;
    let mut _559: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _560: ();
    let mut _561: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _562: std::result::Result<(), anchor_lang::error::Error>;
    let mut _563: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _564: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _565: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _566: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _567: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _568: &anchor_lang::prelude::AccountInfo<'_>;
    let _569: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _570: u8;
    let mut _571: &state::state::State;
    let mut _572: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _573: u64;
    let mut _574: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _575: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _576: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _577: isize;
    let mut _579: !;
    let mut _580: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _583: &anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _585: u16;
    let mut _586: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _587: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _588: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _589: isize;
    let mut _591: !;
    let mut _592: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _595: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _596: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _597: usize;
    let mut _598: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _599: isize;
    let mut _601: !;
    let mut _602: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _604: ();
    let mut _605: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _606: std::result::Result<(), error::ErrorCode>;
    let mut _607: bool;
    let mut _608: &anchor_lang::prelude::Pubkey;
    let mut _609: &anchor_lang::prelude::Pubkey;
    let mut _610: ();
    let _612: ();
    let mut _613: &str;
    let _614: &str;
    let mut _615: &std::string::String;
    let _616: &std::string::String;
    let _617: std::string::String;
    let mut _619: std::fmt::Arguments<'_>;
    let mut _620: &[&str];
    let mut _621: &[&str; 2];
    let _622: &[&str; 2];
    let _623: [&str; 2];
    let mut _624: &[core::fmt::rt::Argument<'_>];
    let mut _625: &[core::fmt::rt::Argument<'_>; 1];
    let _626: &[core::fmt::rt::Argument<'_>; 1];
    let _627: [core::fmt::rt::Argument<'_>; 1];
    let mut _628: core::fmt::rt::Argument<'_>;
    let mut _629: &error::ErrorCode;
    let _630: &error::ErrorCode;
    let _631: ();
    let mut _632: &str;
    let _633: &str;
    let mut _634: error::ErrorCode;
    let mut _635: isize;
    let mut _637: !;
    let mut _638: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _641: usize;
    let mut _642: (usize, bool);
    let _644: ();
    let mut _645: ();
    let mut _647: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _648: usize;
    let mut _649: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _650: isize;
    let mut _651: isize;
    let mut _653: !;
    let mut _655: !;
    let mut _656: anchor_lang::error::Error;
    let mut _657: anchor_lang::prelude::ProgramError;
    let _658: ();
    let mut _659: bool;
    let mut _660: &anchor_lang::prelude::Pubkey;
    let mut _661: &anchor_lang::prelude::Pubkey;
    let _662: anchor_lang::prelude::Pubkey;
    let _663: ();
    let mut _664: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _665: std::result::Result<(), error::ErrorCode>;
    let mut _666: bool;
    let mut _667: ();
    let _669: ();
    let mut _670: &str;
    let _671: &str;
    let mut _672: &std::string::String;
    let _673: &std::string::String;
    let _674: std::string::String;
    let mut _676: std::fmt::Arguments<'_>;
    let mut _677: &[&str];
    let mut _678: &[&str; 2];
    let _679: &[&str; 2];
    let _680: [&str; 2];
    let mut _681: &[core::fmt::rt::Argument<'_>];
    let mut _682: &[core::fmt::rt::Argument<'_>; 1];
    let _683: &[core::fmt::rt::Argument<'_>; 1];
    let _684: [core::fmt::rt::Argument<'_>; 1];
    let mut _685: core::fmt::rt::Argument<'_>;
    let mut _686: &error::ErrorCode;
    let _687: &error::ErrorCode;
    let _688: ();
    let mut _689: &str;
    let _690: &str;
    let mut _691: error::ErrorCode;
    let mut _692: isize;
    let mut _694: !;
    let mut _695: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _698: ();
    let mut _699: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _700: std::result::Result<(), error::ErrorCode>;
    let mut _701: bool;
    let mut _702: &[u8];
    let _703: &[u8];
    let mut _704: &std::vec::Vec<u8>;
    let mut _705: std::ops::Range<usize>;
    let mut _706: &[u8; 8];
    let mut _707: ();
    let _709: ();
    let mut _710: &str;
    let _711: &str;
    let mut _712: &std::string::String;
    let _713: &std::string::String;
    let _714: std::string::String;
    let mut _716: std::fmt::Arguments<'_>;
    let mut _717: &[&str];
    let mut _718: &[&str; 2];
    let _719: &[&str; 2];
    let _720: [&str; 2];
    let mut _721: &[core::fmt::rt::Argument<'_>];
    let mut _722: &[core::fmt::rt::Argument<'_>; 1];
    let _723: &[core::fmt::rt::Argument<'_>; 1];
    let _724: [core::fmt::rt::Argument<'_>; 1];
    let mut _725: core::fmt::rt::Argument<'_>;
    let mut _726: &error::ErrorCode;
    let _727: &error::ErrorCode;
    let _728: ();
    let mut _729: &str;
    let _730: &str;
    let mut _731: error::ErrorCode;
    let mut _732: isize;
    let mut _734: !;
    let mut _735: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _737: ();
    let mut _738: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _739: std::result::Result<(), error::ErrorCode>;
    let mut _740: bool;
    let mut _741: &anchor_lang::prelude::Pubkey;
    let _742: anchor_lang::prelude::Pubkey;
    let mut _743: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _744: &anchor_lang::prelude::Pubkey;
    let _745: &anchor_lang::prelude::AccountMeta;
    let mut _746: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _747: ();
    let _749: ();
    let mut _750: &str;
    let _751: &str;
    let mut _752: &std::string::String;
    let _753: &std::string::String;
    let _754: std::string::String;
    let mut _756: std::fmt::Arguments<'_>;
    let mut _757: &[&str];
    let mut _758: &[&str; 2];
    let _759: &[&str; 2];
    let _760: [&str; 2];
    let mut _761: &[core::fmt::rt::Argument<'_>];
    let mut _762: &[core::fmt::rt::Argument<'_>; 1];
    let _763: &[core::fmt::rt::Argument<'_>; 1];
    let _764: [core::fmt::rt::Argument<'_>; 1];
    let mut _765: core::fmt::rt::Argument<'_>;
    let mut _766: &error::ErrorCode;
    let _767: &error::ErrorCode;
    let _768: ();
    let mut _769: &str;
    let _770: &str;
    let mut _771: error::ErrorCode;
    let mut _772: isize;
    let mut _774: !;
    let mut _775: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _777: ();
    let mut _778: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _779: std::result::Result<(), error::ErrorCode>;
    let mut _780: bool;
    let mut _781: &anchor_lang::prelude::Pubkey;
    let _782: anchor_lang::prelude::Pubkey;
    let mut _783: &anchor_lang::prelude::Signer<'_>;
    let mut _784: &anchor_lang::prelude::Pubkey;
    let _785: &anchor_lang::prelude::AccountMeta;
    let mut _786: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _787: ();
    let _789: ();
    let mut _790: &str;
    let _791: &str;
    let mut _792: &std::string::String;
    let _793: &std::string::String;
    let _794: std::string::String;
    let mut _796: std::fmt::Arguments<'_>;
    let mut _797: &[&str];
    let mut _798: &[&str; 2];
    let _799: &[&str; 2];
    let _800: [&str; 2];
    let mut _801: &[core::fmt::rt::Argument<'_>];
    let mut _802: &[core::fmt::rt::Argument<'_>; 1];
    let _803: &[core::fmt::rt::Argument<'_>; 1];
    let _804: [core::fmt::rt::Argument<'_>; 1];
    let mut _805: core::fmt::rt::Argument<'_>;
    let mut _806: &error::ErrorCode;
    let _807: &error::ErrorCode;
    let _808: ();
    let mut _809: &str;
    let _810: &str;
    let mut _811: error::ErrorCode;
    let mut _812: isize;
    let mut _814: !;
    let mut _815: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _817: ();
    let mut _818: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _819: std::result::Result<(), error::ErrorCode>;
    let mut _820: bool;
    let mut _821: &anchor_lang::prelude::Pubkey;
    let _822: anchor_lang::prelude::Pubkey;
    let mut _823: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _824: &anchor_lang::prelude::Pubkey;
    let _825: &anchor_lang::prelude::AccountMeta;
    let mut _826: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _827: ();
    let _829: ();
    let mut _830: &str;
    let _831: &str;
    let mut _832: &std::string::String;
    let _833: &std::string::String;
    let _834: std::string::String;
    let mut _836: std::fmt::Arguments<'_>;
    let mut _837: &[&str];
    let mut _838: &[&str; 2];
    let _839: &[&str; 2];
    let _840: [&str; 2];
    let mut _841: &[core::fmt::rt::Argument<'_>];
    let mut _842: &[core::fmt::rt::Argument<'_>; 1];
    let _843: &[core::fmt::rt::Argument<'_>; 1];
    let _844: [core::fmt::rt::Argument<'_>; 1];
    let mut _845: core::fmt::rt::Argument<'_>;
    let mut _846: &error::ErrorCode;
    let _847: &error::ErrorCode;
    let _848: ();
    let mut _849: &str;
    let _850: &str;
    let mut _851: error::ErrorCode;
    let mut _852: isize;
    let mut _854: !;
    let mut _855: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _857: ();
    let mut _858: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _859: std::result::Result<(), error::ErrorCode>;
    let mut _860: bool;
    let mut _861: &anchor_lang::prelude::Pubkey;
    let _862: anchor_lang::prelude::Pubkey;
    let mut _863: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _864: &anchor_lang::prelude::Pubkey;
    let _865: &anchor_lang::prelude::AccountMeta;
    let mut _866: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _867: ();
    let _869: ();
    let mut _870: &str;
    let _871: &str;
    let mut _872: &std::string::String;
    let _873: &std::string::String;
    let _874: std::string::String;
    let mut _876: std::fmt::Arguments<'_>;
    let mut _877: &[&str];
    let mut _878: &[&str; 2];
    let _879: &[&str; 2];
    let _880: [&str; 2];
    let mut _881: &[core::fmt::rt::Argument<'_>];
    let mut _882: &[core::fmt::rt::Argument<'_>; 1];
    let _883: &[core::fmt::rt::Argument<'_>; 1];
    let _884: [core::fmt::rt::Argument<'_>; 1];
    let mut _885: core::fmt::rt::Argument<'_>;
    let mut _886: &error::ErrorCode;
    let _887: &error::ErrorCode;
    let _888: ();
    let mut _889: &str;
    let _890: &str;
    let mut _891: error::ErrorCode;
    let mut _892: isize;
    let mut _894: !;
    let mut _895: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _897: ();
    let mut _898: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _899: std::result::Result<(), error::ErrorCode>;
    let mut _900: bool;
    let mut _901: &anchor_lang::prelude::Pubkey;
    let _902: anchor_lang::prelude::Pubkey;
    let mut _903: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _904: &anchor_lang::prelude::Pubkey;
    let _905: &anchor_lang::prelude::AccountMeta;
    let mut _906: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _907: ();
    let _909: ();
    let mut _910: &str;
    let _911: &str;
    let mut _912: &std::string::String;
    let _913: &std::string::String;
    let _914: std::string::String;
    let mut _916: std::fmt::Arguments<'_>;
    let mut _917: &[&str];
    let mut _918: &[&str; 2];
    let _919: &[&str; 2];
    let _920: [&str; 2];
    let mut _921: &[core::fmt::rt::Argument<'_>];
    let mut _922: &[core::fmt::rt::Argument<'_>; 1];
    let _923: &[core::fmt::rt::Argument<'_>; 1];
    let _924: [core::fmt::rt::Argument<'_>; 1];
    let mut _925: core::fmt::rt::Argument<'_>;
    let mut _926: &error::ErrorCode;
    let _927: &error::ErrorCode;
    let _928: ();
    let mut _929: &str;
    let _930: &str;
    let mut _931: error::ErrorCode;
    let mut _932: isize;
    let mut _934: !;
    let mut _935: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _937: ();
    let mut _938: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _939: std::result::Result<(), error::ErrorCode>;
    let mut _940: bool;
    let mut _941: &anchor_lang::prelude::Pubkey;
    let _942: anchor_lang::prelude::Pubkey;
    let mut _943: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _944: &anchor_lang::prelude::Pubkey;
    let _945: &anchor_lang::prelude::AccountMeta;
    let mut _946: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _947: ();
    let _949: ();
    let mut _950: &str;
    let _951: &str;
    let mut _952: &std::string::String;
    let _953: &std::string::String;
    let _954: std::string::String;
    let mut _956: std::fmt::Arguments<'_>;
    let mut _957: &[&str];
    let mut _958: &[&str; 2];
    let _959: &[&str; 2];
    let _960: [&str; 2];
    let mut _961: &[core::fmt::rt::Argument<'_>];
    let mut _962: &[core::fmt::rt::Argument<'_>; 1];
    let _963: &[core::fmt::rt::Argument<'_>; 1];
    let _964: [core::fmt::rt::Argument<'_>; 1];
    let mut _965: core::fmt::rt::Argument<'_>;
    let mut _966: &error::ErrorCode;
    let _967: &error::ErrorCode;
    let _968: ();
    let mut _969: &str;
    let _970: &str;
    let mut _971: error::ErrorCode;
    let mut _972: isize;
    let mut _974: !;
    let mut _975: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _977: ();
    let mut _978: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _979: std::result::Result<(), error::ErrorCode>;
    let mut _980: bool;
    let mut _981: usize;
    let mut _982: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _983: usize;
    let mut _984: usize;
    let mut _985: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _986: (usize, bool);
    let mut _987: ();
    let _989: ();
    let mut _990: &str;
    let _991: &str;
    let mut _992: &std::string::String;
    let _993: &std::string::String;
    let _994: std::string::String;
    let mut _996: std::fmt::Arguments<'_>;
    let mut _997: &[&str];
    let mut _998: &[&str; 2];
    let _999: &[&str; 2];
    let _1000: [&str; 2];
    let mut _1001: &[core::fmt::rt::Argument<'_>];
    let mut _1002: &[core::fmt::rt::Argument<'_>; 1];
    let _1003: &[core::fmt::rt::Argument<'_>; 1];
    let _1004: [core::fmt::rt::Argument<'_>; 1];
    let mut _1005: core::fmt::rt::Argument<'_>;
    let mut _1006: &error::ErrorCode;
    let _1007: &error::ErrorCode;
    let _1008: ();
    let mut _1009: &str;
    let _1010: &str;
    let mut _1011: error::ErrorCode;
    let mut _1012: isize;
    let mut _1014: !;
    let mut _1015: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1017: std::ops::Range<usize>;
    let mut _1018: std::ops::Range<usize>;
    let mut _1019: usize;
    let mut _1020: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1022: ();
    let mut _1023: std::option::Option<usize>;
    let mut _1024: &mut std::ops::Range<usize>;
    let mut _1025: &mut std::ops::Range<usize>;
    let mut _1026: isize;
    let mut _1027: !;
    let _1029: ();
    let mut _1030: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1031: std::result::Result<(), error::ErrorCode>;
    let mut _1032: bool;
    let mut _1033: &anchor_lang::prelude::Pubkey;
    let _1034: usize;
    let mut _1035: usize;
    let mut _1036: (usize, bool);
    let mut _1037: usize;
    let mut _1038: bool;
    let mut _1039: &anchor_lang::prelude::Pubkey;
    let _1040: &anchor_lang::prelude::AccountMeta;
    let mut _1041: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _1042: usize;
    let mut _1043: ();
    let _1045: ();
    let mut _1046: &str;
    let _1047: &str;
    let mut _1048: &std::string::String;
    let _1049: &std::string::String;
    let _1050: std::string::String;
    let mut _1052: std::fmt::Arguments<'_>;
    let mut _1053: &[&str];
    let mut _1054: &[&str; 2];
    let _1055: &[&str; 2];
    let _1056: [&str; 2];
    let mut _1057: &[core::fmt::rt::Argument<'_>];
    let mut _1058: &[core::fmt::rt::Argument<'_>; 1];
    let _1059: &[core::fmt::rt::Argument<'_>; 1];
    let _1060: [core::fmt::rt::Argument<'_>; 1];
    let mut _1061: core::fmt::rt::Argument<'_>;
    let mut _1062: &error::ErrorCode;
    let _1063: &error::ErrorCode;
    let _1064: ();
    let mut _1065: &str;
    let _1066: &str;
    let mut _1067: &std::string::String;
    let _1068: &std::string::String;
    let _1069: std::string::String;
    let mut _1071: std::fmt::Arguments<'_>;
    let mut _1072: &[&str];
    let mut _1073: &[&str; 3];
    let _1074: &[&str; 3];
    let _1075: [&str; 3];
    let mut _1076: &[core::fmt::rt::Argument<'_>];
    let mut _1077: &[core::fmt::rt::Argument<'_>; 3];
    let _1078: &[core::fmt::rt::Argument<'_>; 3];
    let _1079: [core::fmt::rt::Argument<'_>; 3];
    let mut _1080: core::fmt::rt::Argument<'_>;
    let mut _1081: &usize;
    let _1082: &usize;
    let mut _1083: core::fmt::rt::Argument<'_>;
    let mut _1084: &&anchor_lang::prelude::Pubkey;
    let _1085: &&anchor_lang::prelude::Pubkey;
    let _1086: usize;
    let mut _1087: usize;
    let mut _1088: (usize, bool);
    let mut _1089: usize;
    let mut _1090: bool;
    let mut _1091: core::fmt::rt::Argument<'_>;
    let mut _1092: &anchor_lang::prelude::Pubkey;
    let _1093: &anchor_lang::prelude::Pubkey;
    let _1094: &anchor_lang::prelude::AccountMeta;
    let mut _1095: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _1096: usize;
    let mut _1097: error::ErrorCode;
    let mut _1098: isize;
    let mut _1100: !;
    let mut _1101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1103: bool;
    let _1104: ();
    let mut _1105: bool;
    let mut _1106: &anchor_lang::prelude::Pubkey;
    let mut _1107: &anchor_lang::prelude::Pubkey;
    let _1108: anchor_lang::prelude::Pubkey;
    let mut _1109: !;
    let mut _1110: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1111: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1112: &[anchor_lang::prelude::AccountMeta];
    let _1113: &[anchor_lang::prelude::AccountMeta];
    let mut _1114: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1116: ();
    let mut _1117: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _1118: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1119: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1120: isize;
    let mut _1121: !;
    let _1123: ();
    let mut _1124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1125: std::result::Result<(), error::ErrorCode>;
    let mut _1126: bool;
    let mut _1127: bool;
    let mut _1128: ();
    let _1130: ();
    let mut _1131: &str;
    let _1132: &str;
    let mut _1133: &std::string::String;
    let _1134: &std::string::String;
    let _1135: std::string::String;
    let mut _1137: std::fmt::Arguments<'_>;
    let mut _1138: &[&str];
    let mut _1139: &[&str; 2];
    let _1140: &[&str; 2];
    let _1141: [&str; 2];
    let mut _1142: &[core::fmt::rt::Argument<'_>];
    let mut _1143: &[core::fmt::rt::Argument<'_>; 1];
    let _1144: &[core::fmt::rt::Argument<'_>; 1];
    let _1145: [core::fmt::rt::Argument<'_>; 1];
    let mut _1146: core::fmt::rt::Argument<'_>;
    let mut _1147: &error::ErrorCode;
    let _1148: &error::ErrorCode;
    let _1149: ();
    let mut _1150: &str;
    let _1151: &str;
    let mut _1152: error::ErrorCode;
    let mut _1153: isize;
    let mut _1155: !;
    let mut _1156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1159: std::boxed::Box<[anchor_lang::prelude::Pubkey]>;
    let mut _1160: std::boxed::Box<[anchor_lang::prelude::Pubkey; 5]>;
    let mut _1161: usize;
    let mut _1162: usize;
    let mut _1163: *mut u8;
    let mut _1164: std::boxed::Box<[anchor_lang::prelude::Pubkey; 5]>;
    let mut _1165: anchor_lang::prelude::Pubkey;
    let mut _1166: anchor_lang::prelude::Pubkey;
    let _1167: ();
    let mut _1168: bool;
    let _1169: ();
    let mut _1170: &mut std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _1171: anchor_lang::prelude::Pubkey;
    let _1172: ();
    let mut _1173: &mut std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _1174: anchor_lang::prelude::Pubkey;
    let _1175: ();
    let mut _1176: &mut std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let _1177: ();
    let mut _1178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1179: std::result::Result<(), error::ErrorCode>;
    let mut _1180: bool;
    let mut _1181: &[anchor_lang::prelude::Pubkey];
    let _1182: &[anchor_lang::prelude::Pubkey];
    let mut _1183: &std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _1184: &anchor_lang::prelude::Pubkey;
    let _1185: &anchor_lang::prelude::Pubkey;
    let mut _1186: ();
    let _1188: ();
    let mut _1189: &str;
    let _1190: &str;
    let mut _1191: &std::string::String;
    let _1192: &std::string::String;
    let _1193: std::string::String;
    let mut _1195: std::fmt::Arguments<'_>;
    let mut _1196: &[&str];
    let mut _1197: &[&str; 2];
    let _1198: &[&str; 2];
    let _1199: [&str; 2];
    let mut _1200: &[core::fmt::rt::Argument<'_>];
    let mut _1201: &[core::fmt::rt::Argument<'_>; 1];
    let _1202: &[core::fmt::rt::Argument<'_>; 1];
    let _1203: [core::fmt::rt::Argument<'_>; 1];
    let mut _1204: core::fmt::rt::Argument<'_>;
    let mut _1205: &error::ErrorCode;
    let _1206: &error::ErrorCode;
    let _1207: ();
    let mut _1208: &str;
    let _1209: &str;
    let mut _1210: error::ErrorCode;
    let mut _1211: isize;
    let mut _1213: !;
    let mut _1214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1216: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1217: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1218: &[anchor_lang::prelude::AccountMeta];
    let _1219: &[anchor_lang::prelude::AccountMeta];
    let mut _1220: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _1222: ();
    let mut _1223: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _1224: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1225: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _1226: isize;
    let mut _1227: !;
    let _1229: ();
    let mut _1230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1231: std::result::Result<(), error::ErrorCode>;
    let mut _1232: bool;
    let mut _1233: &anchor_lang::prelude::Pubkey;
    let mut _1234: &anchor_lang::prelude::Pubkey;
    let _1235: anchor_lang::prelude::Pubkey;
    let mut _1236: ();
    let _1238: ();
    let mut _1239: &str;
    let _1240: &str;
    let mut _1241: &std::string::String;
    let _1242: &std::string::String;
    let _1243: std::string::String;
    let mut _1245: std::fmt::Arguments<'_>;
    let mut _1246: &[&str];
    let mut _1247: &[&str; 2];
    let _1248: &[&str; 2];
    let _1249: [&str; 2];
    let mut _1250: &[core::fmt::rt::Argument<'_>];
    let mut _1251: &[core::fmt::rt::Argument<'_>; 1];
    let _1252: &[core::fmt::rt::Argument<'_>; 1];
    let _1253: [core::fmt::rt::Argument<'_>; 1];
    let mut _1254: core::fmt::rt::Argument<'_>;
    let mut _1255: &error::ErrorCode;
    let _1256: &error::ErrorCode;
    let _1257: ();
    let mut _1258: &str;
    let _1259: &str;
    let mut _1260: error::ErrorCode;
    let mut _1261: isize;
    let mut _1263: !;
    let mut _1264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1266: (usize, bool);
    let _1267: ();
    let mut _1268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1269: std::result::Result<(), error::ErrorCode>;
    let mut _1270: bool;
    let mut _1271: ();
    let _1273: ();
    let mut _1274: &str;
    let _1275: &str;
    let mut _1276: &std::string::String;
    let _1277: &std::string::String;
    let _1278: std::string::String;
    let mut _1280: std::fmt::Arguments<'_>;
    let mut _1281: &[&str];
    let mut _1282: &[&str; 2];
    let _1283: &[&str; 2];
    let _1284: [&str; 2];
    let mut _1285: &[core::fmt::rt::Argument<'_>];
    let mut _1286: &[core::fmt::rt::Argument<'_>; 1];
    let _1287: &[core::fmt::rt::Argument<'_>; 1];
    let _1288: [core::fmt::rt::Argument<'_>; 1];
    let mut _1289: core::fmt::rt::Argument<'_>;
    let mut _1290: &error::ErrorCode;
    let _1291: &error::ErrorCode;
    let _1292: ();
    let mut _1293: &str;
    let _1294: &str;
    let mut _1295: error::ErrorCode;
    let mut _1296: isize;
    let mut _1298: !;
    let mut _1299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1301: ();
    let mut _1329: &mut instructions::user::Swap<'_>;
    let mut _1330: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1331: &mut instructions::user::Swap<'_>;
    let mut _1332: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1333: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1334: &mut instructions::user::Swap<'_>;
    let mut _1335: &mut instructions::user::Swap<'_>;
    let mut _1336: &mut instructions::user::Swap<'_>;
    let mut _1337: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1338: &mut instructions::user::Swap<'_>;
    let mut _1339: &mut instructions::user::Swap<'_>;
    let mut _1340: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1341: &mut instructions::user::Swap<'_>;
    let mut _1342: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1343: &mut instructions::user::Swap<'_>;
    let mut _1344: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1345: &mut instructions::user::Swap<'_>;
    let mut _1346: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1347: &mut instructions::user::Swap<'_>;
    let mut _1348: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1349: &mut instructions::user::Swap<'_>;
    let mut _1350: &anchor_lang::prelude::Pubkey;
    let mut _1351: &mut instructions::user::Swap<'_>;
    let mut _1352: &mut instructions::user::Swap<'_>;
    let mut _1353: &mut instructions::user::Swap<'_>;
    let mut _1354: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1355: &mut instructions::user::Swap<'_>;
    let mut _1356: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1357: &mut instructions::user::Swap<'_>;
    let mut _1358: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1359: &mut instructions::user::Swap<'_>;
    let mut _1360: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1361: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1362: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1363: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1364: &anchor_lang::prelude::Pubkey;
    let mut _1365: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1366: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1367: isize;
    let mut _1368: isize;
    let mut _1369: isize;
    let mut _1370: isize;
    let mut _1371: isize;
    let mut _1372: isize;
    let mut _1373: isize;
    let mut _1374: isize;
    let mut _1375: isize;
    let mut _1376: isize;
    let mut _1377: isize;
    let mut _1378: isize;
    let mut _1379: isize;
    let mut _1380: isize;
    let mut _1381: isize;
    let mut _1382: isize;
    let mut _1383: isize;
    let mut _1384: isize;
    let mut _1385: isize;
    let mut _1386: isize;
    let mut _1387: isize;
    let mut _1388: isize;
    let mut _1389: isize;
    let mut _1390: isize;
    let mut _1391: isize;
    let mut _1392: isize;
    let mut _1393: isize;
    let mut _1394: isize;
    let mut _1395: isize;
    let mut _1396: isize;
    let mut _1397: isize;
    let mut _1398: isize;
    let mut _1399: isize;
    let mut _1400: isize;
    let mut _1401: isize;
    let mut _1402: isize;
    let mut _1403: isize;
    let mut _1404: isize;
    let mut _1405: isize;
    let mut _1406: isize;
    let mut _1407: isize;
    let mut _1408: isize;
    let mut _1409: isize;
    let mut _1410: isize;
    let mut _1411: isize;
    let mut _1412: isize;
    let mut _1413: isize;
    let mut _1414: isize;
    let mut _1415: isize;
    let mut _1416: isize;
    let mut _1417: isize;
    let mut _1418: isize;
    let mut _1419: isize;
    let mut _1420: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1421: *const [u16; 2];
    let mut _1422: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1423: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1424: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1425: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1426: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1427: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1428: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1429: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1430: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1431: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1432: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1433: *const [anchor_lang::prelude::Pubkey; 5];
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _15;
        let _16: anchor_lang::prelude::Clock;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _23: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _16;
            let _24: i64;
            scope 11 {
                debug now => _24;
                let _25: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                scope 12 {
                    debug remaining_accounts_iter => _25;
                    let _29: state::perp_market_map::PerpMarketMap<'_>;
                    let _30: state::spot_market_map::SpotMarketMap<'_>;
                    let mut _31: state::oracle_map::OracleMap<'_>;
                    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _60: instructions::optional_accounts::AccountMaps<'_>;
                    let mut _1440: *const ();
                    let mut _1441: usize;
                    let mut _1442: usize;
                    let mut _1443: usize;
                    let mut _1444: usize;
                    let mut _1445: bool;
                    scope 13 {
                        debug perp_market_map => _29;
                        debug spot_market_map => _30;
                        debug oracle_map => _31;
                        let _61: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                        let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _69: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                        scope 19 {
                            debug _token_interface => _61;
                            let _70: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                            let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _78: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                            scope 24 {
                                debug mint => _70;
                                let mut _79: std::cell::RefMut<'_, state::user::User>;
                                let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _90: std::cell::RefMut<'_, state::user::User>;
                                scope 29 {
                                    debug user => _79;
                                    let _91: bool;
                                    scope 34 {
                                        debug delegate_is_signer => _91;
                                        let _106: error::ErrorCode;
                                        let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _131: ();
                                        let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _152: ();
                                        let mut _153: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _163: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        scope 35 {
                                            debug error_code => _106;
                                            let _113: std::string::String;
                                            let mut _1328: &[&str; 2];
                                            scope 36 {
                                                debug res => _113;
                                            }
                                        }
                                        scope 37 {
                                            debug residual => _128;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug val => _131;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug residual => _149;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug val => _152;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug in_spot_market => _153;
                                            let _172: error::ErrorCode;
                                            let _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _216: ();
                                            let _229: error::ErrorCode;
                                            let _254: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _257: ();
                                            let _258: &state::oracle::OraclePriceData;
                                            let _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _272: &state::oracle::OraclePriceData;
                                            scope 50 {
                                                debug error_code => _172;
                                                let _179: std::string::String;
                                                let _198: std::string::String;
                                                let mut _1326: &[&str; 1];
                                                let mut _1327: &[&str; 2];
                                                scope 51 {
                                                    debug res => _179;
                                                }
                                                scope 52 {
                                                    debug res => _198;
                                                }
                                            }
                                            scope 53 {
                                                debug residual => _213;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug val => _216;
                                                scope 56 {
                                                }
                                            }
                                            scope 57 {
                                                debug error_code => _229;
                                                let _236: std::string::String;
                                                let mut _1325: &[&str; 2];
                                                scope 58 {
                                                    debug res => _236;
                                                }
                                            }
                                            scope 59 {
                                                debug residual => _254;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug val => _257;
                                                scope 62 {
                                                }
                                            }
                                            scope 63 {
                                                debug in_oracle_data => _258;
                                                let _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _287: ();
                                                let mut _288: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                let _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _298: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                scope 68 {
                                                    debug residual => _284;
                                                    scope 69 {
                                                    }
                                                }
                                                scope 70 {
                                                    debug val => _287;
                                                    scope 71 {
                                                    }
                                                }
                                                scope 72 {
                                                    debug out_spot_market => _288;
                                                    let _299: bool;
                                                    scope 77 {
                                                        debug in_spot_has_transfer_hook => _299;
                                                        let _303: bool;
                                                        scope 78 {
                                                            debug out_spot_has_transfer_hook => _303;
                                                            let _313: error::ErrorCode;
                                                            let _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _341: ();
                                                            let _342: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
                                                            scope 79 {
                                                                debug error_code => _313;
                                                                let _320: std::string::String;
                                                                let mut _1324: &[&str; 2];
                                                                scope 80 {
                                                                    debug res => _320;
                                                                }
                                                            }
                                                            scope 81 {
                                                                debug residual => _338;
                                                                scope 82 {
                                                                }
                                                            }
                                                            scope 83 {
                                                                debug val => _341;
                                                                scope 84 {
                                                                }
                                                            }
                                                            scope 85 {
                                                                debug in_remaining_accounts_for_hooks => _342;
                                                                let _353: error::ErrorCode;
                                                                let _394: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _397: ();
                                                                let _410: error::ErrorCode;
                                                                let _435: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _438: ();
                                                                let _439: &state::oracle::OraclePriceData;
                                                                let _450: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _453: &state::oracle::OraclePriceData;
                                                                scope 86 {
                                                                    debug error_code => _353;
                                                                    let _360: std::string::String;
                                                                    let _379: std::string::String;
                                                                    let mut _1322: &[&str; 1];
                                                                    let mut _1323: &[&str; 2];
                                                                    scope 87 {
                                                                        debug res => _360;
                                                                    }
                                                                    scope 88 {
                                                                        debug res => _379;
                                                                    }
                                                                }
                                                                scope 89 {
                                                                    debug residual => _394;
                                                                    scope 90 {
                                                                    }
                                                                }
                                                                scope 91 {
                                                                    debug val => _397;
                                                                    scope 92 {
                                                                    }
                                                                }
                                                                scope 93 {
                                                                    debug error_code => _410;
                                                                    let _417: std::string::String;
                                                                    let mut _1321: &[&str; 2];
                                                                    scope 94 {
                                                                        debug res => _417;
                                                                    }
                                                                }
                                                                scope 95 {
                                                                    debug residual => _435;
                                                                    scope 96 {
                                                                    }
                                                                }
                                                                scope 97 {
                                                                    debug val => _438;
                                                                    scope 98 {
                                                                    }
                                                                }
                                                                scope 99 {
                                                                    debug out_oracle_data => _439;
                                                                    let _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _468: ();
                                                                    let _476: error::ErrorCode;
                                                                    let _501: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _504: ();
                                                                    let _511: error::ErrorCode;
                                                                    let _536: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _539: ();
                                                                    let _540: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                    scope 104 {
                                                                        debug residual => _465;
                                                                        scope 105 {
                                                                        }
                                                                    }
                                                                    scope 106 {
                                                                        debug val => _468;
                                                                        scope 107 {
                                                                        }
                                                                    }
                                                                    scope 108 {
                                                                        debug error_code => _476;
                                                                        let _483: std::string::String;
                                                                        let mut _1320: &[&str; 2];
                                                                        scope 109 {
                                                                            debug res => _483;
                                                                        }
                                                                    }
                                                                    scope 110 {
                                                                        debug residual => _501;
                                                                        scope 111 {
                                                                        }
                                                                    }
                                                                    scope 112 {
                                                                        debug val => _504;
                                                                        scope 113 {
                                                                        }
                                                                    }
                                                                    scope 114 {
                                                                        debug error_code => _511;
                                                                        let _518: std::string::String;
                                                                        let mut _1319: &[&str; 2];
                                                                        scope 115 {
                                                                            debug res => _518;
                                                                        }
                                                                    }
                                                                    scope 116 {
                                                                        debug residual => _536;
                                                                        scope 117 {
                                                                        }
                                                                    }
                                                                    scope 118 {
                                                                        debug val => _539;
                                                                        scope 119 {
                                                                        }
                                                                    }
                                                                    scope 120 {
                                                                        debug in_vault => _540;
                                                                        let _541: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                        scope 121 {
                                                                            debug in_token_account => _541;
                                                                            let _552: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                            scope 122 {
                                                                                debug out_token_account => _552;
                                                                                let _578: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _581: ();
                                                                                let _582: &anchor_lang::prelude::AccountInfo<'_>;
                                                                                scope 123 {
                                                                                    debug residual => _578;
                                                                                    scope 124 {
                                                                                    }
                                                                                }
                                                                                scope 125 {
                                                                                    debug val => _581;
                                                                                    scope 126 {
                                                                                    }
                                                                                }
                                                                                scope 127 {
                                                                                    debug ixs => _582;
                                                                                    let _584: usize;
                                                                                    let _590: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _593: u16;
                                                                                    scope 128 {
                                                                                        debug current_index => _584;
                                                                                        let _594: solana_program::instruction::Instruction;
                                                                                        let _600: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _603: solana_program::instruction::Instruction;
                                                                                        scope 133 {
                                                                                            debug current_ix => _594;
                                                                                            let _611: error::ErrorCode;
                                                                                            let _636: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _639: ();
                                                                                            let mut _640: usize;
                                                                                            scope 138 {
                                                                                                debug error_code => _611;
                                                                                                let _618: std::string::String;
                                                                                                let mut _1318: &[&str; 2];
                                                                                                scope 139 {
                                                                                                    debug res => _618;
                                                                                                }
                                                                                            }
                                                                                            scope 140 {
                                                                                                debug residual => _636;
                                                                                                scope 141 {
                                                                                                }
                                                                                            }
                                                                                            scope 142 {
                                                                                                debug val => _639;
                                                                                                scope 143 {
                                                                                                }
                                                                                            }
                                                                                            scope 144 {
                                                                                                debug index => _640;
                                                                                                let mut _643: bool;
                                                                                                scope 145 {
                                                                                                    debug found_end => _643;
                                                                                                    let _646: solana_program::instruction::Instruction;
                                                                                                    let _652: solana_program::instruction::Instruction;
                                                                                                    let _654: anchor_lang::prelude::ProgramError;
                                                                                                    let _1272: error::ErrorCode;
                                                                                                    let _1297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1300: ();
                                                                                                    scope 146 {
                                                                                                        debug ix => _646;
                                                                                                        let _668: error::ErrorCode;
                                                                                                        let _693: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _696: ();
                                                                                                        let _697: [u8; 8];
                                                                                                        let mut _1115: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
                                                                                                        let mut _1158: std::vec::Vec<anchor_lang::prelude::Pubkey>;
                                                                                                        let mut _1315: &anchor_lang::prelude::Pubkey;
                                                                                                        let mut _1434: *const ();
                                                                                                        let mut _1435: usize;
                                                                                                        let mut _1436: usize;
                                                                                                        let mut _1437: usize;
                                                                                                        let mut _1438: usize;
                                                                                                        let mut _1439: bool;
                                                                                                        scope 149 {
                                                                                                            debug error_code => _668;
                                                                                                            let _675: std::string::String;
                                                                                                            let mut _1313: &[&str; 2];
                                                                                                            scope 150 {
                                                                                                                debug res => _675;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 151 {
                                                                                                            debug residual => _693;
                                                                                                            scope 152 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 153 {
                                                                                                            debug val => _696;
                                                                                                            scope 154 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 155 {
                                                                                                            debug discriminator => _697;
                                                                                                            let _708: error::ErrorCode;
                                                                                                            let _733: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _736: ();
                                                                                                            let _748: error::ErrorCode;
                                                                                                            let _773: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _776: ();
                                                                                                            let _788: error::ErrorCode;
                                                                                                            let _813: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _816: ();
                                                                                                            let _828: error::ErrorCode;
                                                                                                            let _853: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _856: ();
                                                                                                            let _868: error::ErrorCode;
                                                                                                            let _893: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _896: ();
                                                                                                            let _908: error::ErrorCode;
                                                                                                            let _933: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _936: ();
                                                                                                            let _948: error::ErrorCode;
                                                                                                            let _973: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _976: ();
                                                                                                            let _988: error::ErrorCode;
                                                                                                            let _1013: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1016: ();
                                                                                                            let mut _1021: std::ops::Range<usize>;
                                                                                                            scope 156 {
                                                                                                                debug error_code => _708;
                                                                                                                let _715: std::string::String;
                                                                                                                let mut _1312: &[&str; 2];
                                                                                                                scope 157 {
                                                                                                                    debug res => _715;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 158 {
                                                                                                                debug residual => _733;
                                                                                                                scope 159 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 160 {
                                                                                                                debug val => _736;
                                                                                                                scope 161 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 162 {
                                                                                                                debug error_code => _748;
                                                                                                                let _755: std::string::String;
                                                                                                                let mut _1311: &[&str; 2];
                                                                                                                scope 163 {
                                                                                                                    debug res => _755;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 164 {
                                                                                                                debug residual => _773;
                                                                                                                scope 165 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 166 {
                                                                                                                debug val => _776;
                                                                                                                scope 167 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 168 {
                                                                                                                debug error_code => _788;
                                                                                                                let _795: std::string::String;
                                                                                                                let mut _1310: &[&str; 2];
                                                                                                                scope 169 {
                                                                                                                    debug res => _795;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 170 {
                                                                                                                debug residual => _813;
                                                                                                                scope 171 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 172 {
                                                                                                                debug val => _816;
                                                                                                                scope 173 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 174 {
                                                                                                                debug error_code => _828;
                                                                                                                let _835: std::string::String;
                                                                                                                let mut _1309: &[&str; 2];
                                                                                                                scope 175 {
                                                                                                                    debug res => _835;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 176 {
                                                                                                                debug residual => _853;
                                                                                                                scope 177 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 178 {
                                                                                                                debug val => _856;
                                                                                                                scope 179 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 180 {
                                                                                                                debug error_code => _868;
                                                                                                                let _875: std::string::String;
                                                                                                                let mut _1308: &[&str; 2];
                                                                                                                scope 181 {
                                                                                                                    debug res => _875;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 182 {
                                                                                                                debug residual => _893;
                                                                                                                scope 183 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 184 {
                                                                                                                debug val => _896;
                                                                                                                scope 185 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 186 {
                                                                                                                debug error_code => _908;
                                                                                                                let _915: std::string::String;
                                                                                                                let mut _1307: &[&str; 2];
                                                                                                                scope 187 {
                                                                                                                    debug res => _915;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 188 {
                                                                                                                debug residual => _933;
                                                                                                                scope 189 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 190 {
                                                                                                                debug val => _936;
                                                                                                                scope 191 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 192 {
                                                                                                                debug error_code => _948;
                                                                                                                let _955: std::string::String;
                                                                                                                let mut _1306: &[&str; 2];
                                                                                                                scope 193 {
                                                                                                                    debug res => _955;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 194 {
                                                                                                                debug residual => _973;
                                                                                                                scope 195 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 196 {
                                                                                                                debug val => _976;
                                                                                                                scope 197 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 198 {
                                                                                                                debug error_code => _988;
                                                                                                                let _995: std::string::String;
                                                                                                                let mut _1305: &[&str; 2];
                                                                                                                scope 199 {
                                                                                                                    debug res => _995;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 200 {
                                                                                                                debug residual => _1013;
                                                                                                                scope 201 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 202 {
                                                                                                                debug val => _1016;
                                                                                                                scope 203 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 204 {
                                                                                                                debug iter => _1021;
                                                                                                                let _1028: usize;
                                                                                                                scope 205 {
                                                                                                                    debug i => _1028;
                                                                                                                    let _1044: error::ErrorCode;
                                                                                                                    let _1099: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1102: ();
                                                                                                                    scope 206 {
                                                                                                                        debug error_code => _1044;
                                                                                                                        let _1051: std::string::String;
                                                                                                                        let _1070: std::string::String;
                                                                                                                        let mut _1303: &[&str; 3];
                                                                                                                        let mut _1304: &[&str; 2];
                                                                                                                        scope 207 {
                                                                                                                            debug res => _1051;
                                                                                                                        }
                                                                                                                        scope 208 {
                                                                                                                            debug res => _1070;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 209 {
                                                                                                                        debug residual => _1099;
                                                                                                                        scope 210 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 211 {
                                                                                                                        debug val => _1102;
                                                                                                                        scope 212 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 213 {
                                                                                                            debug iter => _1115;
                                                                                                            let _1122: &anchor_lang::prelude::AccountMeta;
                                                                                                            scope 214 {
                                                                                                                debug meta => _1122;
                                                                                                                let _1129: error::ErrorCode;
                                                                                                                let _1154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _1157: ();
                                                                                                                scope 215 {
                                                                                                                    debug error_code => _1129;
                                                                                                                    let _1136: std::string::String;
                                                                                                                    let mut _1314: &[&str; 2];
                                                                                                                    scope 216 {
                                                                                                                        debug res => _1136;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 217 {
                                                                                                                    debug residual => _1154;
                                                                                                                    scope 218 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 219 {
                                                                                                                    debug val => _1157;
                                                                                                                    scope 220 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 221 {
                                                                                                            debug whitelisted_programs => _1158;
                                                                                                            let _1187: error::ErrorCode;
                                                                                                            let _1212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1215: ();
                                                                                                            let mut _1221: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
                                                                                                            scope 223 {
                                                                                                                debug error_code => _1187;
                                                                                                                let _1194: std::string::String;
                                                                                                                let mut _1317: &[&str; 2];
                                                                                                                scope 224 {
                                                                                                                    debug res => _1194;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 225 {
                                                                                                                debug residual => _1212;
                                                                                                                scope 226 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 227 {
                                                                                                                debug val => _1215;
                                                                                                                scope 228 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 229 {
                                                                                                                debug iter => _1221;
                                                                                                                let _1228: &anchor_lang::prelude::AccountMeta;
                                                                                                                scope 230 {
                                                                                                                    debug meta => _1228;
                                                                                                                    let _1237: error::ErrorCode;
                                                                                                                    let _1262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1265: ();
                                                                                                                    scope 231 {
                                                                                                                        debug error_code => _1237;
                                                                                                                        let _1244: std::string::String;
                                                                                                                        let mut _1316: &[&str; 2];
                                                                                                                        scope 232 {
                                                                                                                            debug res => _1244;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 233 {
                                                                                                                        debug residual => _1262;
                                                                                                                        scope 234 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 235 {
                                                                                                                        debug val => _1265;
                                                                                                                        scope 236 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 222 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 147 {
                                                                                                        debug ix => _652;
                                                                                                    }
                                                                                                    scope 148 {
                                                                                                        debug e => _654;
                                                                                                    }
                                                                                                    scope 237 {
                                                                                                        debug error_code => _1272;
                                                                                                        let _1279: std::string::String;
                                                                                                        let mut _1302: &[&str; 2];
                                                                                                        scope 238 {
                                                                                                            debug res => _1279;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 239 {
                                                                                                        debug residual => _1297;
                                                                                                        scope 240 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 241 {
                                                                                                        debug val => _1300;
                                                                                                        scope 242 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 134 {
                                                                                            debug residual => _600;
                                                                                            scope 135 {
                                                                                            }
                                                                                        }
                                                                                        scope 136 {
                                                                                            debug val => _603;
                                                                                            scope 137 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 129 {
                                                                                        debug residual => _590;
                                                                                        scope 130 {
                                                                                        }
                                                                                    }
                                                                                    scope 131 {
                                                                                        debug val => _593;
                                                                                        scope 132 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 100 {
                                                                    debug residual => _450;
                                                                    scope 101 {
                                                                    }
                                                                }
                                                                scope 102 {
                                                                    debug val => _453;
                                                                    scope 103 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 73 {
                                                    debug residual => _295;
                                                    scope 74 {
                                                    }
                                                }
                                                scope 75 {
                                                    debug val => _298;
                                                    scope 76 {
                                                    }
                                                }
                                            }
                                            scope 64 {
                                                debug residual => _269;
                                                scope 65 {
                                                }
                                            }
                                            scope 66 {
                                                debug val => _272;
                                                scope 67 {
                                                }
                                            }
                                        }
                                        scope 46 {
                                            debug residual => _160;
                                            scope 47 {
                                            }
                                        }
                                        scope 48 {
                                            debug val => _163;
                                            scope 49 {
                                            }
                                        }
                                    }
                                }
                                scope 30 {
                                    debug residual => _87;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug val => _90;
                                    scope 33 {
                                    }
                                }
                            }
                            scope 25 {
                                debug residual => _75;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _78;
                                scope 28 {
                                }
                            }
                        }
                        scope 20 {
                            debug residual => _66;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _69;
                            scope 23 {
                            }
                        }
                    }
                    scope 14 {
                    }
                    scope 15 {
                        debug residual => _57;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _60;
                        scope 18 {
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _1329 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _9 = &((*_1329).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1330 = deref_copy (*_9);
        _1420 = (((_1330.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _8 = &(*_1420);
        _7 = constraints::fill_not_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb641];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _1367 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        _1331 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _15 = &((*_1331).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb653];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _1407 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb601;
    }

    bb7: {
        _17 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _18) -> [return: bb8, unwind: bb641];
    }

    bb8: {
        StorageDead(_18);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_17 as Continue).0: anchor_lang::prelude::Clock);
        _16 = move _23;
        StorageDead(_23);
        _1369 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_24);
        _24 = (_16.4: i64);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _1332 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _28 = &(*_1332);
        _27 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _28) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _22) -> [return: bb11, unwind: bb652];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _1405 = discriminant(_17);
        StorageDead(_17);
        goto -> bb600;
    }

    bb12: {
        StorageDead(_28);
        _26 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        _25 = &mut _26;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut (*_25);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = BTreeSet::<u16>::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _37 = &_38;
        _36 = &(*_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _45 = SizeOf([u16; 2]);
        _46 = AlignOf([u16; 2]);
        _47 = alloc::alloc::exchange_malloc(move _45, move _46) -> [return: bb15, unwind: bb640];
    }

    bb15: {
        StorageLive(_48);
        _48 = ShallowInitBox(move _47, [u16; 2]);
        StorageLive(_49);
        _49 = _2;
        StorageLive(_50);
        _50 = _3;
        _1421 = (((_48.0: std::ptr::Unique<[u16; 2]>).0: std::ptr::NonNull<[u16; 2]>).0: *const [u16; 2]);
        _1440 = _1421 as *const () (PtrToPtr);
        _1441 = _1440 as usize (Transmute);
        _1442 = AlignOf([u16; 2]);
        _1443 = Sub(_1442, const 1_usize);
        _1444 = BitAnd(_1441, _1443);
        _1445 = Eq(_1444, const 0_usize);
        assert(_1445, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1442, _1441) -> [success: bb655, unwind unreachable];
    }

    bb16: {
        StorageDead(_43);
        _41 = get_writable_spot_market_set_from_many(move _42) -> [return: bb17, unwind: bb640];
    }

    bb17: {
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        StorageLive(_51);
        _51 = (_16.0: u64);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _1333 = deref_copy (*_15);
        _1422 = (((_1333.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _55 = &(*_1422);
        _54 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _55) -> [return: bb18, unwind: bb639];
    }

    bb18: {
        StorageDead(_55);
        _53 = ((*_54).7: state::state::OracleGuardRails);
        _52 = Option::<state::state::OracleGuardRails>::Some(move _53);
        StorageDead(_53);
        _34 = load_maps(move _35, move _36, move _39, move _51, move _52) -> [return: bb19, unwind: bb639];
    }

    bb19: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _34) -> [return: bb20, unwind: bb639];
    }

    bb20: {
        StorageDead(_34);
        _56 = discriminant(_33);
        switchInt(move _56) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_60);
        _60 = move ((_33 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _32 = move _60;
        StorageDead(_60);
        StorageLive(_29);
        _29 = move (_32.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_30);
        _30 = move (_32.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_31);
        _31 = move (_32.2: state::oracle_map::OracleMap<'_>);
        _1373 = discriminant(_33);
        StorageDead(_54);
        drop(_41) -> [return: bb24, unwind: bb635];
    }

    bb22: {
        StorageLive(_57);
        _57 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb23, unwind: bb651];
    }

    bb23: {
        StorageDead(_59);
        StorageDead(_57);
        _1371 = discriminant(_33);
        StorageDead(_54);
        drop(_41) -> [return: bb597, unwind: bb640];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_38) -> [return: bb25, unwind: bb636];
    }

    bb25: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_25);
        _63 = get_token_interface(move _64) -> [return: bb26, unwind: bb636];
    }

    bb26: {
        StorageDead(_64);
        _62 = <std::result::Result<Option<anchor_lang::prelude::Interface<'_, TokenInterface>>, error::ErrorCode> as Try>::branch(move _63) -> [return: bb27, unwind: bb636];
    }

    bb27: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_69);
        _69 = move ((_62 as Continue).0: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>);
        _61 = move _69;
        StorageDead(_69);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut (*_25);
        _72 = get_token_mint(move _73) -> [return: bb31, unwind: bb636];
    }

    bb29: {
        StorageLive(_66);
        _66 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb30, unwind: bb636];
    }

    bb30: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_62);
        goto -> bb593;
    }

    bb31: {
        StorageDead(_73);
        _71 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _72) -> [return: bb32, unwind: bb636];
    }

    bb32: {
        StorageDead(_72);
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_78);
        _78 = move ((_71 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _70 = move _78;
        StorageDead(_78);
        StorageDead(_71);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _1334 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _84 = &((*_1334).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _83 = &(*_84);
        _82 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _83) -> [return: bb36, unwind: bb636];
    }

    bb34: {
        StorageLive(_75);
        _75 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb35, unwind: bb636];
    }

    bb35: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_71);
        goto -> bb592;
    }

    bb36: {
        StorageDead(_83);
        StorageLive(_85);
        _85 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _81 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _82, move _85) -> [return: bb37, unwind: bb636];
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_82);
        _80 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _81) -> [return: bb38, unwind: bb636];
    }

    bb38: {
        StorageDead(_81);
        _86 = discriminant(_80);
        switchInt(move _86) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_90);
        _90 = move ((_80 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _79 = move _90;
        StorageDead(_90);
        _1377 = discriminant(_80);
        StorageDead(_84);
        StorageDead(_80);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_79;
        _93 = <RefMut<'_, User> as Deref>::deref(move _94) -> [return: bb42, unwind: bb634];
    }

    bb40: {
        StorageLive(_87);
        _87 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb41, unwind: bb650];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_87);
        _1375 = discriminant(_80);
        StorageDead(_84);
        StorageDead(_80);
        goto -> bb591;
    }

    bb42: {
        StorageDead(_94);
        _92 = &((*_93).1: anchor_lang::prelude::Pubkey);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _1335 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _97 = &((*_1335).3: anchor_lang::prelude::Signer<'_>);
        _96 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _97) -> [return: bb43, unwind: bb634];
    }

    bb43: {
        _95 = &_96;
        StorageDead(_97);
        _91 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _92, move _95) -> [return: bb44, unwind: bb634];
    }

    bb44: {
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_96);
        StorageDead(_93);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_79;
        _103 = <RefMut<'_, User> as Deref>::deref(move _104) -> [return: bb45, unwind: bb634];
    }

    bb45: {
        _102 = &(*_103);
        StorageDead(_104);
        _101 = User::is_bankrupt(move _102) -> [return: bb46, unwind: bb634];
    }

    bb46: {
        switchInt(move _101) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_102);
        StorageDead(_103);
        StorageLive(_106);
        _106 = error::ErrorCode::UserBankrupt;
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _1328 = const _;
        _117 = &(*_1328);
        _116 = &(*_117);
        _115 = move _116 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_106;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _124) -> [return: bb49, unwind: bb634];
    }

    bb48: {
        StorageDead(_102);
        StorageDead(_103);
        StorageLive(_105);
        _105 = ();
        _100 = std::result::Result::<(), error::ErrorCode>::Ok(move _105);
        StorageDead(_105);
        goto -> bb55;
    }

    bb49: {
        StorageDead(_124);
        _122 = [move _123];
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = move _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_120);
        _114 = Arguments::<'_>::new_v1(move _115, move _119) -> [return: bb50, unwind: bb634];
    }

    bb50: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = format(move _114) -> [return: bb51, unwind: bb634];
    }

    bb51: {
        StorageDead(_114);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_117);
        _112 = move _113;
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = <String as Deref>::deref(move _110) -> [return: bb52, unwind: bb633];
    }

    bb52: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = solana_program::log::sol_log(move _108) -> [return: bb53, unwind: bb633];
    }

    bb53: {
        StorageDead(_108);
        drop(_112) -> [return: bb54, unwind: bb634];
    }

    bb54: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_126);
        _126 = _106;
        _100 = std::result::Result::<(), error::ErrorCode>::Err(move _126);
        StorageDead(_126);
        StorageDead(_106);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_101);
        _99 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _100) -> [return: bb56, unwind: bb634];
    }

    bb56: {
        StorageDead(_100);
        _127 = discriminant(_99);
        switchInt(move _127) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_131);
        _131 = ((_99 as Continue).0: ());
        _98 = _131;
        StorageDead(_131);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &mut _79;
        _137 = &mut (*_138);
        _136 = <RefMut<'_, User> as DerefMut>::deref_mut(move _137) -> [return: bb60, unwind: bb634];
    }

    bb58: {
        StorageLive(_128);
        _128 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb59, unwind: bb634];
    }

    bb59: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb590;
    }

    bb60: {
        _135 = &mut (*_136);
        StorageDead(_137);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_29;
        _139 = &(*_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &_30;
        _141 = &(*_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &mut _31;
        _143 = &mut (*_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _1336 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _1337 = deref_copy ((*_1336).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1423 = (((_1337.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _147 = &(*_1423);
        _146 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _147) -> [return: bb61, unwind: bb634];
    }

    bb61: {
        StorageDead(_147);
        _145 = ((*_146).11: u32);
        _134 = validate_user_not_being_liquidated(move _135, move _139, move _141, move _143, move _145) -> [return: bb62, unwind: bb634];
    }

    bb62: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_135);
        _133 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _134) -> [return: bb63, unwind: bb634];
    }

    bb63: {
        StorageDead(_134);
        _148 = discriminant(_133);
        switchInt(move _148) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_152);
        _152 = ((_133 as Continue).0: ());
        _132 = _152;
        StorageDead(_152);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_30;
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_2;
        _157 = &(*_158);
        _155 = SpotMarketMap::<'_>::get_ref_mut(move _156, move _157) -> [return: bb67, unwind: bb634];
    }

    bb65: {
        StorageLive(_149);
        _149 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb66, unwind: bb634];
    }

    bb66: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb590;
    }

    bb67: {
        StorageDead(_157);
        StorageDead(_156);
        _154 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _155) -> [return: bb68, unwind: bb634];
    }

    bb68: {
        StorageDead(_155);
        _159 = discriminant(_154);
        switchInt(move _159) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_163);
        _163 = move ((_154 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _153 = move _163;
        StorageDead(_163);
        _1381 = discriminant(_154);
        StorageDead(_158);
        StorageDead(_154);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_153;
        _169 = <RefMut<'_, SpotMarket> as Deref>::deref(move _170) -> [return: bb72, unwind: bb632];
    }

    bb70: {
        StorageLive(_160);
        _160 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb71, unwind: bb649];
    }

    bb71: {
        StorageDead(_162);
        StorageDead(_160);
        _1379 = discriminant(_154);
        StorageDead(_158);
        StorageDead(_154);
        goto -> bb589;
    }

    bb72: {
        _168 = &(*_169);
        StorageDead(_170);
        _167 = SpotMarket::fills_enabled(move _168) -> [return: bb73, unwind: bb632];
    }

    bb73: {
        switchInt(move _167) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_171);
        _171 = ();
        _166 = std::result::Result::<(), error::ErrorCode>::Ok(move _171);
        StorageDead(_171);
        goto -> bb88;
    }

    bb75: {
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_172);
        _172 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _1327 = const _;
        _183 = &(*_1327);
        _182 = &(*_183);
        _181 = move _182 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_172;
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _190) -> [return: bb76, unwind: bb632];
    }

    bb76: {
        StorageDead(_190);
        _188 = [move _189];
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = move _186 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_186);
        _180 = Arguments::<'_>::new_v1(move _181, move _185) -> [return: bb77, unwind: bb632];
    }

    bb77: {
        StorageDead(_185);
        StorageDead(_181);
        _179 = format(move _180) -> [return: bb78, unwind: bb632];
    }

    bb78: {
        StorageDead(_180);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_183);
        _178 = move _179;
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = <String as Deref>::deref(move _176) -> [return: bb79, unwind: bb631];
    }

    bb79: {
        _174 = &(*_175);
        StorageDead(_176);
        _173 = solana_program::log::sol_log(move _174) -> [return: bb80, unwind: bb631];
    }

    bb80: {
        StorageDead(_174);
        drop(_178) -> [return: bb81, unwind: bb632];
    }

    bb81: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _1326 = const _;
        _202 = &(*_1326);
        _201 = &(*_202);
        _200 = move _201 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_201);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_2;
        _209 = &(*_210);
        _208 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _209) -> [return: bb82, unwind: bb632];
    }

    bb82: {
        StorageDead(_209);
        _207 = [move _208];
        StorageDead(_208);
        _206 = &_207;
        _205 = &(*_206);
        _204 = move _205 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_205);
        _199 = Arguments::<'_>::new_v1(move _200, move _204) -> [return: bb83, unwind: bb632];
    }

    bb83: {
        StorageDead(_204);
        StorageDead(_200);
        _198 = format(move _199) -> [return: bb84, unwind: bb632];
    }

    bb84: {
        StorageDead(_199);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_202);
        _197 = move _198;
        StorageDead(_198);
        _196 = &_197;
        _195 = &(*_196);
        _194 = <String as Deref>::deref(move _195) -> [return: bb85, unwind: bb630];
    }

    bb85: {
        _193 = &(*_194);
        StorageDead(_195);
        _192 = solana_program::log::sol_log(move _193) -> [return: bb86, unwind: bb630];
    }

    bb86: {
        StorageDead(_193);
        drop(_197) -> [return: bb87, unwind: bb632];
    }

    bb87: {
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageLive(_211);
        _211 = _172;
        _166 = std::result::Result::<(), error::ErrorCode>::Err(move _211);
        StorageDead(_211);
        StorageDead(_172);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_167);
        _165 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _166) -> [return: bb89, unwind: bb632];
    }

    bb89: {
        StorageDead(_166);
        _212 = discriminant(_165);
        switchInt(move _212) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_216);
        _216 = ((_165 as Continue).0: ());
        _164 = _216;
        StorageDead(_216);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_153;
        _222 = <RefMut<'_, SpotMarket> as Deref>::deref(move _223) -> [return: bb93, unwind: bb632];
    }

    bb91: {
        StorageLive(_213);
        _213 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_215);
        _215 = _213;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _215) -> [return: bb92, unwind: bb632];
    }

    bb92: {
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb588;
    }

    bb93: {
        StorageDead(_223);
        _221 = ((*_222).52: u64);
        _220 = Eq(move _221, const 0_u64);
        switchInt(move _220) -> [0: bb98, otherwise: bb94];
    }

    bb94: {
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_153;
        _226 = <RefMut<'_, SpotMarket> as Deref>::deref(move _227) -> [return: bb95, unwind: bb632];
    }

    bb95: {
        StorageDead(_227);
        _225 = ((*_226).51: u64);
        _224 = Eq(move _225, const 0_u64);
        switchInt(move _224) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_228);
        _228 = ();
        _219 = std::result::Result::<(), error::ErrorCode>::Ok(move _228);
        StorageDead(_228);
        goto -> bb107;
    }

    bb97: {
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb99;
    }

    bb98: {
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb99;
    }

    bb99: {
        StorageLive(_229);
        _229 = error::ErrorCode::InvalidSwap;
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _1325 = const _;
        _240 = &(*_1325);
        _239 = &(*_240);
        _238 = move _239 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_239);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_229;
        _247 = &(*_248);
        _246 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _247) -> [return: bb100, unwind: bb632];
    }

    bb100: {
        StorageDead(_247);
        _245 = [move _246];
        StorageDead(_246);
        _244 = &_245;
        _243 = &(*_244);
        _242 = move _243 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_243);
        _237 = Arguments::<'_>::new_v1(move _238, move _242) -> [return: bb101, unwind: bb632];
    }

    bb101: {
        StorageDead(_242);
        StorageDead(_238);
        _236 = format(move _237) -> [return: bb102, unwind: bb632];
    }

    bb102: {
        StorageDead(_237);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_240);
        _235 = move _236;
        StorageDead(_236);
        _234 = &_235;
        _233 = &(*_234);
        _232 = <String as Deref>::deref(move _233) -> [return: bb103, unwind: bb629];
    }

    bb103: {
        _231 = &(*_232);
        StorageDead(_233);
        _230 = solana_program::log::sol_log(move _231) -> [return: bb104, unwind: bb629];
    }

    bb104: {
        StorageDead(_231);
        drop(_235) -> [return: bb105, unwind: bb632];
    }

    bb105: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = const "begin_swap ended in invalid state";
        _250 = &(*_251);
        _249 = solana_program::log::sol_log(move _250) -> [return: bb106, unwind: bb632];
    }

    bb106: {
        StorageDead(_250);
        StorageDead(_251);
        StorageDead(_249);
        StorageLive(_252);
        _252 = _229;
        _219 = std::result::Result::<(), error::ErrorCode>::Err(move _252);
        StorageDead(_252);
        StorageDead(_229);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_224);
        StorageDead(_220);
        _218 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _219) -> [return: bb108, unwind: bb632];
    }

    bb108: {
        StorageDead(_219);
        _253 = discriminant(_218);
        switchInt(move _253) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_257);
        _257 = ((_218 as Continue).0: ());
        _217 = _257;
        StorageDead(_257);
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &mut _31;
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_153;
        _266 = <RefMut<'_, SpotMarket> as Deref>::deref(move _267) -> [return: bb112, unwind: bb632];
    }

    bb110: {
        StorageLive(_254);
        _254 = ((_218 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_256);
        _256 = _254;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _256) -> [return: bb111, unwind: bb632];
    }

    bb111: {
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb588;
    }

    bb112: {
        _265 = &(*_266);
        StorageDead(_267);
        _264 = SpotMarket::oracle_id(move _265) -> [return: bb113, unwind: bb632];
    }

    bb113: {
        StorageDead(_265);
        _263 = &_264;
        _262 = &(*_263);
        _260 = OracleMap::<'_>::get_price_data(move _261, move _262) -> [return: bb114, unwind: bb632];
    }

    bb114: {
        StorageDead(_262);
        StorageDead(_261);
        _259 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _260) -> [return: bb115, unwind: bb632];
    }

    bb115: {
        StorageDead(_260);
        _268 = discriminant(_259);
        switchInt(move _268) -> [0: bb116, 1: bb117, otherwise: bb4];
    }

    bb116: {
        StorageLive(_272);
        _272 = ((_259 as Continue).0: &state::oracle::OraclePriceData);
        _258 = _272;
        StorageDead(_272);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_259);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _279 = &mut _153;
        _278 = &mut (*_279);
        _277 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _278) -> [return: bb119, unwind: bb632];
    }

    bb117: {
        StorageLive(_269);
        _269 = ((_259 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_271);
        _271 = _269;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _271) -> [return: bb118, unwind: bb632];
    }

    bb118: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_259);
        goto -> bb587;
    }

    bb119: {
        _276 = &mut (*_277);
        StorageDead(_278);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &(*_258);
        _280 = Option::<&OraclePriceData>::Some(move _281);
        StorageDead(_281);
        StorageLive(_282);
        _282 = _24;
        _275 = controller::spot_balance::update_spot_market_cumulative_interest(move _276, move _280, move _282) -> [return: bb120, unwind: bb632];
    }

    bb120: {
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_276);
        _274 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _275) -> [return: bb121, unwind: bb632];
    }

    bb121: {
        StorageDead(_275);
        _283 = discriminant(_274);
        switchInt(move _283) -> [0: bb122, 1: bb123, otherwise: bb4];
    }

    bb122: {
        StorageLive(_287);
        _287 = ((_274 as Continue).0: ());
        _273 = _287;
        StorageDead(_287);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_273);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_30;
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_3;
        _292 = &(*_293);
        _290 = SpotMarketMap::<'_>::get_ref_mut(move _291, move _292) -> [return: bb125, unwind: bb632];
    }

    bb123: {
        StorageLive(_284);
        _284 = ((_274 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_286);
        _286 = _284;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _286) -> [return: bb124, unwind: bb632];
    }

    bb124: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_273);
        goto -> bb587;
    }

    bb125: {
        StorageDead(_292);
        StorageDead(_291);
        _289 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _290) -> [return: bb126, unwind: bb632];
    }

    bb126: {
        StorageDead(_290);
        _294 = discriminant(_289);
        switchInt(move _294) -> [0: bb127, 1: bb128, otherwise: bb4];
    }

    bb127: {
        StorageLive(_298);
        _298 = move ((_289 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _288 = move _298;
        StorageDead(_298);
        _1385 = discriminant(_289);
        StorageDead(_293);
        StorageDead(_289);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_153;
        _301 = <RefMut<'_, SpotMarket> as Deref>::deref(move _302) -> [return: bb130, unwind: bb628];
    }

    bb128: {
        StorageLive(_295);
        _295 = ((_289 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_297);
        _297 = _295;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _297) -> [return: bb129, unwind: bb648];
    }

    bb129: {
        StorageDead(_297);
        StorageDead(_295);
        _1383 = discriminant(_289);
        StorageDead(_293);
        StorageDead(_289);
        goto -> bb586;
    }

    bb130: {
        _300 = &(*_301);
        StorageDead(_302);
        _299 = SpotMarket::has_transfer_hook(move _300) -> [return: bb131, unwind: bb628];
    }

    bb131: {
        StorageDead(_300);
        StorageDead(_301);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_288;
        _305 = <RefMut<'_, SpotMarket> as Deref>::deref(move _306) -> [return: bb132, unwind: bb628];
    }

    bb132: {
        _304 = &(*_305);
        StorageDead(_306);
        _303 = SpotMarket::has_transfer_hook(move _304) -> [return: bb133, unwind: bb628];
    }

    bb133: {
        StorageDead(_304);
        StorageDead(_305);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = _299;
        switchInt(move _310) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        StorageLive(_311);
        _311 = _303;
        switchInt(move _311) -> [0: bb135, otherwise: bb136];
    }

    bb135: {
        StorageLive(_312);
        _312 = ();
        _309 = std::result::Result::<(), error::ErrorCode>::Ok(move _312);
        StorageDead(_312);
        goto -> bb144;
    }

    bb136: {
        StorageLive(_313);
        _313 = error::ErrorCode::InvalidSwap;
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _1324 = const _;
        _324 = &(*_1324);
        _323 = &(*_324);
        _322 = move _323 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_323);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_313;
        _331 = &(*_332);
        _330 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _331) -> [return: bb137, unwind: bb628];
    }

    bb137: {
        StorageDead(_331);
        _329 = [move _330];
        StorageDead(_330);
        _328 = &_329;
        _327 = &(*_328);
        _326 = move _327 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_327);
        _321 = Arguments::<'_>::new_v1(move _322, move _326) -> [return: bb138, unwind: bb628];
    }

    bb138: {
        StorageDead(_326);
        StorageDead(_322);
        _320 = format(move _321) -> [return: bb139, unwind: bb628];
    }

    bb139: {
        StorageDead(_321);
        StorageDead(_332);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_324);
        _319 = move _320;
        StorageDead(_320);
        _318 = &_319;
        _317 = &(*_318);
        _316 = <String as Deref>::deref(move _317) -> [return: bb140, unwind: bb627];
    }

    bb140: {
        _315 = &(*_316);
        StorageDead(_317);
        _314 = solana_program::log::sol_log(move _315) -> [return: bb141, unwind: bb627];
    }

    bb141: {
        StorageDead(_315);
        drop(_319) -> [return: bb142, unwind: bb628];
    }

    bb142: {
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_314);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = const "both in and out spot markets cannot both have transfer hooks";
        _334 = &(*_335);
        _333 = solana_program::log::sol_log(move _334) -> [return: bb143, unwind: bb628];
    }

    bb143: {
        StorageDead(_334);
        StorageDead(_335);
        StorageDead(_333);
        StorageLive(_336);
        _336 = _313;
        _309 = std::result::Result::<(), error::ErrorCode>::Err(move _336);
        StorageDead(_336);
        StorageDead(_313);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_311);
        StorageDead(_310);
        _308 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _309) -> [return: bb145, unwind: bb628];
    }

    bb145: {
        StorageDead(_309);
        _337 = discriminant(_308);
        switchInt(move _337) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb146: {
        StorageLive(_341);
        _341 = ((_308 as Continue).0: ());
        _307 = _341;
        StorageDead(_341);
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_342);
        StorageLive(_343);
        _343 = _299;
        switchInt(move _343) -> [0: bb150, otherwise: bb149];
    }

    bb147: {
        StorageLive(_338);
        _338 = ((_308 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_340);
        _340 = _338;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _340) -> [return: bb148, unwind: bb628];
    }

    bb148: {
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_308);
        StorageDead(_307);
        goto -> bb585;
    }

    bb149: {
        StorageLive(_344);
        _344 = move _25;
        _342 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _344);
        StorageDead(_344);
        goto -> bb151;
    }

    bb150: {
        _342 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb151;
    }

    bb151: {
        StorageDead(_343);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &_288;
        _350 = <RefMut<'_, SpotMarket> as Deref>::deref(move _351) -> [return: bb152, unwind: bb628];
    }

    bb152: {
        _349 = &(*_350);
        StorageDead(_351);
        _348 = SpotMarket::fills_enabled(move _349) -> [return: bb153, unwind: bb628];
    }

    bb153: {
        switchInt(move _348) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        StorageDead(_350);
        StorageDead(_349);
        StorageLive(_352);
        _352 = ();
        _347 = std::result::Result::<(), error::ErrorCode>::Ok(move _352);
        StorageDead(_352);
        goto -> bb168;
    }

    bb155: {
        StorageDead(_350);
        StorageDead(_349);
        StorageLive(_353);
        _353 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _1323 = const _;
        _364 = &(*_1323);
        _363 = &(*_364);
        _362 = move _363 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_363);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &_353;
        _371 = &(*_372);
        _370 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _371) -> [return: bb156, unwind: bb628];
    }

    bb156: {
        StorageDead(_371);
        _369 = [move _370];
        StorageDead(_370);
        _368 = &_369;
        _367 = &(*_368);
        _366 = move _367 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_367);
        _361 = Arguments::<'_>::new_v1(move _362, move _366) -> [return: bb157, unwind: bb628];
    }

    bb157: {
        StorageDead(_366);
        StorageDead(_362);
        _360 = format(move _361) -> [return: bb158, unwind: bb628];
    }

    bb158: {
        StorageDead(_361);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_364);
        _359 = move _360;
        StorageDead(_360);
        _358 = &_359;
        _357 = &(*_358);
        _356 = <String as Deref>::deref(move _357) -> [return: bb159, unwind: bb626];
    }

    bb159: {
        _355 = &(*_356);
        StorageDead(_357);
        _354 = solana_program::log::sol_log(move _355) -> [return: bb160, unwind: bb626];
    }

    bb160: {
        StorageDead(_355);
        drop(_359) -> [return: bb161, unwind: bb628];
    }

    bb161: {
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_354);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _1322 = const _;
        _383 = &(*_1322);
        _382 = &(*_383);
        _381 = move _382 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_382);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_3;
        _390 = &(*_391);
        _389 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _390) -> [return: bb162, unwind: bb628];
    }

    bb162: {
        StorageDead(_390);
        _388 = [move _389];
        StorageDead(_389);
        _387 = &_388;
        _386 = &(*_387);
        _385 = move _386 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_386);
        _380 = Arguments::<'_>::new_v1(move _381, move _385) -> [return: bb163, unwind: bb628];
    }

    bb163: {
        StorageDead(_385);
        StorageDead(_381);
        _379 = format(move _380) -> [return: bb164, unwind: bb628];
    }

    bb164: {
        StorageDead(_380);
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_383);
        _378 = move _379;
        StorageDead(_379);
        _377 = &_378;
        _376 = &(*_377);
        _375 = <String as Deref>::deref(move _376) -> [return: bb165, unwind: bb625];
    }

    bb165: {
        _374 = &(*_375);
        StorageDead(_376);
        _373 = solana_program::log::sol_log(move _374) -> [return: bb166, unwind: bb625];
    }

    bb166: {
        StorageDead(_374);
        drop(_378) -> [return: bb167, unwind: bb628];
    }

    bb167: {
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_373);
        StorageLive(_392);
        _392 = _353;
        _347 = std::result::Result::<(), error::ErrorCode>::Err(move _392);
        StorageDead(_392);
        StorageDead(_353);
        goto -> bb168;
    }

    bb168: {
        StorageDead(_348);
        _346 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _347) -> [return: bb169, unwind: bb628];
    }

    bb169: {
        StorageDead(_347);
        _393 = discriminant(_346);
        switchInt(move _393) -> [0: bb170, 1: bb171, otherwise: bb4];
    }

    bb170: {
        StorageLive(_397);
        _397 = ((_346 as Continue).0: ());
        _345 = _397;
        StorageDead(_397);
        StorageDead(_346);
        StorageDead(_345);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_288;
        _403 = <RefMut<'_, SpotMarket> as Deref>::deref(move _404) -> [return: bb173, unwind: bb628];
    }

    bb171: {
        StorageLive(_394);
        _394 = ((_346 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_396);
        _396 = _394;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _396) -> [return: bb172, unwind: bb628];
    }

    bb172: {
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_346);
        StorageDead(_345);
        goto -> bb584;
    }

    bb173: {
        StorageDead(_404);
        _402 = ((*_403).52: u64);
        _401 = Eq(move _402, const 0_u64);
        switchInt(move _401) -> [0: bb178, otherwise: bb174];
    }

    bb174: {
        StorageDead(_403);
        StorageDead(_402);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &_288;
        _407 = <RefMut<'_, SpotMarket> as Deref>::deref(move _408) -> [return: bb175, unwind: bb628];
    }

    bb175: {
        StorageDead(_408);
        _406 = ((*_407).51: u64);
        _405 = Eq(move _406, const 0_u64);
        switchInt(move _405) -> [0: bb177, otherwise: bb176];
    }

    bb176: {
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_409);
        _409 = ();
        _400 = std::result::Result::<(), error::ErrorCode>::Ok(move _409);
        StorageDead(_409);
        goto -> bb187;
    }

    bb177: {
        StorageDead(_407);
        StorageDead(_406);
        goto -> bb179;
    }

    bb178: {
        StorageDead(_403);
        StorageDead(_402);
        goto -> bb179;
    }

    bb179: {
        StorageLive(_410);
        _410 = error::ErrorCode::InvalidSwap;
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _1321 = const _;
        _421 = &(*_1321);
        _420 = &(*_421);
        _419 = move _420 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_420);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_410;
        _428 = &(*_429);
        _427 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _428) -> [return: bb180, unwind: bb628];
    }

    bb180: {
        StorageDead(_428);
        _426 = [move _427];
        StorageDead(_427);
        _425 = &_426;
        _424 = &(*_425);
        _423 = move _424 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_424);
        _418 = Arguments::<'_>::new_v1(move _419, move _423) -> [return: bb181, unwind: bb628];
    }

    bb181: {
        StorageDead(_423);
        StorageDead(_419);
        _417 = format(move _418) -> [return: bb182, unwind: bb628];
    }

    bb182: {
        StorageDead(_418);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_421);
        _416 = move _417;
        StorageDead(_417);
        _415 = &_416;
        _414 = &(*_415);
        _413 = <String as Deref>::deref(move _414) -> [return: bb183, unwind: bb624];
    }

    bb183: {
        _412 = &(*_413);
        StorageDead(_414);
        _411 = solana_program::log::sol_log(move _412) -> [return: bb184, unwind: bb624];
    }

    bb184: {
        StorageDead(_412);
        drop(_416) -> [return: bb185, unwind: bb628];
    }

    bb185: {
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_411);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = const "begin_swap ended in invalid state";
        _431 = &(*_432);
        _430 = solana_program::log::sol_log(move _431) -> [return: bb186, unwind: bb628];
    }

    bb186: {
        StorageDead(_431);
        StorageDead(_432);
        StorageDead(_430);
        StorageLive(_433);
        _433 = _410;
        _400 = std::result::Result::<(), error::ErrorCode>::Err(move _433);
        StorageDead(_433);
        StorageDead(_410);
        goto -> bb187;
    }

    bb187: {
        StorageDead(_405);
        StorageDead(_401);
        _399 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _400) -> [return: bb188, unwind: bb628];
    }

    bb188: {
        StorageDead(_400);
        _434 = discriminant(_399);
        switchInt(move _434) -> [0: bb189, 1: bb190, otherwise: bb4];
    }

    bb189: {
        StorageLive(_438);
        _438 = ((_399 as Continue).0: ());
        _398 = _438;
        StorageDead(_438);
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &mut _31;
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = &_288;
        _447 = <RefMut<'_, SpotMarket> as Deref>::deref(move _448) -> [return: bb192, unwind: bb628];
    }

    bb190: {
        StorageLive(_435);
        _435 = ((_399 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_437);
        _437 = _435;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _437) -> [return: bb191, unwind: bb628];
    }

    bb191: {
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_399);
        StorageDead(_398);
        goto -> bb584;
    }

    bb192: {
        _446 = &(*_447);
        StorageDead(_448);
        _445 = SpotMarket::oracle_id(move _446) -> [return: bb193, unwind: bb628];
    }

    bb193: {
        StorageDead(_446);
        _444 = &_445;
        _443 = &(*_444);
        _441 = OracleMap::<'_>::get_price_data(move _442, move _443) -> [return: bb194, unwind: bb628];
    }

    bb194: {
        StorageDead(_443);
        StorageDead(_442);
        _440 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _441) -> [return: bb195, unwind: bb628];
    }

    bb195: {
        StorageDead(_441);
        _449 = discriminant(_440);
        switchInt(move _449) -> [0: bb196, 1: bb197, otherwise: bb4];
    }

    bb196: {
        StorageLive(_453);
        _453 = ((_440 as Continue).0: &state::oracle::OraclePriceData);
        _439 = _453;
        StorageDead(_453);
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_440);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &mut _288;
        _459 = &mut (*_460);
        _458 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _459) -> [return: bb199, unwind: bb628];
    }

    bb197: {
        StorageLive(_450);
        _450 = ((_440 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_452);
        _452 = _450;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _452) -> [return: bb198, unwind: bb628];
    }

    bb198: {
        StorageDead(_452);
        StorageDead(_450);
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_440);
        goto -> bb583;
    }

    bb199: {
        _457 = &mut (*_458);
        StorageDead(_459);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &(*_439);
        _461 = Option::<&OraclePriceData>::Some(move _462);
        StorageDead(_462);
        StorageLive(_463);
        _463 = _24;
        _456 = controller::spot_balance::update_spot_market_cumulative_interest(move _457, move _461, move _463) -> [return: bb200, unwind: bb628];
    }

    bb200: {
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_457);
        _455 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _456) -> [return: bb201, unwind: bb628];
    }

    bb201: {
        StorageDead(_456);
        _464 = discriminant(_455);
        switchInt(move _464) -> [0: bb202, 1: bb203, otherwise: bb4];
    }

    bb202: {
        StorageLive(_468);
        _468 = ((_455 as Continue).0: ());
        _454 = _468;
        StorageDead(_468);
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_454);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = _2;
        StorageLive(_474);
        _474 = _3;
        _472 = Ne(move _473, move _474);
        switchInt(move _472) -> [0: bb206, otherwise: bb205];
    }

    bb203: {
        StorageLive(_465);
        _465 = ((_455 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_467);
        _467 = _465;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _467) -> [return: bb204, unwind: bb628];
    }

    bb204: {
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_454);
        goto -> bb583;
    }

    bb205: {
        StorageDead(_474);
        StorageDead(_473);
        StorageLive(_475);
        _475 = ();
        _471 = std::result::Result::<(), error::ErrorCode>::Ok(move _475);
        StorageDead(_475);
        goto -> bb214;
    }

    bb206: {
        StorageDead(_474);
        StorageDead(_473);
        StorageLive(_476);
        _476 = error::ErrorCode::InvalidSwap;
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _1320 = const _;
        _487 = &(*_1320);
        _486 = &(*_487);
        _485 = move _486 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_486);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = &_476;
        _494 = &(*_495);
        _493 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _494) -> [return: bb207, unwind: bb628];
    }

    bb207: {
        StorageDead(_494);
        _492 = [move _493];
        StorageDead(_493);
        _491 = &_492;
        _490 = &(*_491);
        _489 = move _490 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_490);
        _484 = Arguments::<'_>::new_v1(move _485, move _489) -> [return: bb208, unwind: bb628];
    }

    bb208: {
        StorageDead(_489);
        StorageDead(_485);
        _483 = format(move _484) -> [return: bb209, unwind: bb628];
    }

    bb209: {
        StorageDead(_484);
        StorageDead(_495);
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_487);
        _482 = move _483;
        StorageDead(_483);
        _481 = &_482;
        _480 = &(*_481);
        _479 = <String as Deref>::deref(move _480) -> [return: bb210, unwind: bb623];
    }

    bb210: {
        _478 = &(*_479);
        StorageDead(_480);
        _477 = solana_program::log::sol_log(move _478) -> [return: bb211, unwind: bb623];
    }

    bb211: {
        StorageDead(_478);
        drop(_482) -> [return: bb212, unwind: bb628];
    }

    bb212: {
        StorageDead(_482);
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_477);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = const "in and out market the same";
        _497 = &(*_498);
        _496 = solana_program::log::sol_log(move _497) -> [return: bb213, unwind: bb628];
    }

    bb213: {
        StorageDead(_497);
        StorageDead(_498);
        StorageDead(_496);
        StorageLive(_499);
        _499 = _476;
        _471 = std::result::Result::<(), error::ErrorCode>::Err(move _499);
        StorageDead(_499);
        StorageDead(_476);
        goto -> bb214;
    }

    bb214: {
        StorageDead(_472);
        _470 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _471) -> [return: bb215, unwind: bb628];
    }

    bb215: {
        StorageDead(_471);
        _500 = discriminant(_470);
        switchInt(move _500) -> [0: bb216, 1: bb217, otherwise: bb4];
    }

    bb216: {
        StorageLive(_504);
        _504 = ((_470 as Continue).0: ());
        _469 = _504;
        StorageDead(_504);
        StorageDead(_470);
        StorageDead(_469);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _509 = _4;
        _508 = Ne(move _509, const 0_u64);
        switchInt(move _508) -> [0: bb220, otherwise: bb219];
    }

    bb217: {
        StorageLive(_501);
        _501 = ((_470 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_503);
        _503 = _501;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _503) -> [return: bb218, unwind: bb628];
    }

    bb218: {
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_470);
        StorageDead(_469);
        goto -> bb583;
    }

    bb219: {
        StorageDead(_509);
        StorageLive(_510);
        _510 = ();
        _507 = std::result::Result::<(), error::ErrorCode>::Ok(move _510);
        StorageDead(_510);
        goto -> bb228;
    }

    bb220: {
        StorageDead(_509);
        StorageLive(_511);
        _511 = error::ErrorCode::InvalidSwap;
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _1319 = const _;
        _522 = &(*_1319);
        _521 = &(*_522);
        _520 = move _521 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_521);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &_511;
        _529 = &(*_530);
        _528 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _529) -> [return: bb221, unwind: bb628];
    }

    bb221: {
        StorageDead(_529);
        _527 = [move _528];
        StorageDead(_528);
        _526 = &_527;
        _525 = &(*_526);
        _524 = move _525 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_525);
        _519 = Arguments::<'_>::new_v1(move _520, move _524) -> [return: bb222, unwind: bb628];
    }

    bb222: {
        StorageDead(_524);
        StorageDead(_520);
        _518 = format(move _519) -> [return: bb223, unwind: bb628];
    }

    bb223: {
        StorageDead(_519);
        StorageDead(_530);
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_522);
        _517 = move _518;
        StorageDead(_518);
        _516 = &_517;
        _515 = &(*_516);
        _514 = <String as Deref>::deref(move _515) -> [return: bb224, unwind: bb622];
    }

    bb224: {
        _513 = &(*_514);
        StorageDead(_515);
        _512 = solana_program::log::sol_log(move _513) -> [return: bb225, unwind: bb622];
    }

    bb225: {
        StorageDead(_513);
        drop(_517) -> [return: bb226, unwind: bb628];
    }

    bb226: {
        StorageDead(_517);
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_512);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = const "amount_out cannot be zero";
        _532 = &(*_533);
        _531 = solana_program::log::sol_log(move _532) -> [return: bb227, unwind: bb628];
    }

    bb227: {
        StorageDead(_532);
        StorageDead(_533);
        StorageDead(_531);
        StorageLive(_534);
        _534 = _511;
        _507 = std::result::Result::<(), error::ErrorCode>::Err(move _534);
        StorageDead(_534);
        StorageDead(_511);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_508);
        _506 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _507) -> [return: bb229, unwind: bb628];
    }

    bb229: {
        StorageDead(_507);
        _535 = discriminant(_506);
        switchInt(move _535) -> [0: bb230, 1: bb231, otherwise: bb4];
    }

    bb230: {
        StorageLive(_539);
        _539 = ((_506 as Continue).0: ());
        _505 = _539;
        StorageDead(_539);
        StorageDead(_506);
        StorageDead(_505);
        StorageLive(_540);
        _1338 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _540 = &((*_1338).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_541);
        _1339 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _541 = &((*_1339).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_542);
        _542 = _4;
        StorageLive(_543);
        StorageLive(_544);
        _544 = &mut _153;
        _543 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _544) -> [return: bb233, unwind: bb628];
    }

    bb231: {
        StorageLive(_536);
        _536 = ((_506 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_538);
        _538 = _536;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _538) -> [return: bb232, unwind: bb628];
    }

    bb232: {
        StorageDead(_538);
        StorageDead(_536);
        StorageDead(_506);
        StorageDead(_505);
        goto -> bb583;
    }

    bb233: {
        StorageDead(_544);
        ((*_543).51: u64) = move _542;
        StorageDead(_542);
        StorageDead(_543);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _1340 = deref_copy (*_541);
        _1424 = (((_1340.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _549 = &(*_1424);
        _548 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _549) -> [return: bb234, unwind: bb628];
    }

    bb234: {
        _547 = &(*_548);
        _546 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _547) -> [return: bb235, unwind: bb628];
    }

    bb235: {
        StorageDead(_549);
        StorageDead(_547);
        _545 = ((*_546).2: u64);
        StorageLive(_550);
        StorageLive(_551);
        _551 = &mut _153;
        _550 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _551) -> [return: bb236, unwind: bb628];
    }

    bb236: {
        StorageDead(_551);
        ((*_550).52: u64) = move _545;
        StorageDead(_545);
        StorageDead(_550);
        StorageDead(_548);
        StorageDead(_546);
        StorageLive(_552);
        _1341 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _552 = &((*_1341).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        _1342 = deref_copy (*_552);
        _1425 = (((_1342.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _557 = &(*_1425);
        _556 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _557) -> [return: bb237, unwind: bb628];
    }

    bb237: {
        _555 = &(*_556);
        _554 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _555) -> [return: bb238, unwind: bb628];
    }

    bb238: {
        StorageDead(_557);
        StorageDead(_555);
        _553 = ((*_554).2: u64);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &mut _288;
        _558 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _559) -> [return: bb239, unwind: bb628];
    }

    bb239: {
        StorageDead(_559);
        ((*_558).52: u64) = move _553;
        StorageDead(_553);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_554);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _1343 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _564 = &((*_1343).8: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _563 = &(*_564);
        StorageLive(_565);
        _1344 = deref_copy (*_540);
        _1426 = (((_1344.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _565 = &(*_1426);
        StorageLive(_566);
        StorageLive(_567);
        _1345 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _567 = &((*_1345).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1346 = deref_copy (*_567);
        _1427 = (((_1346.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _566 = &(*_1427);
        StorageLive(_568);
        StorageLive(_569);
        _1347 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _569 = &((*_1347).9: anchor_lang::prelude::AccountInfo<'_>);
        _568 = &(*_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _1348 = deref_copy (*_15);
        _1428 = (((_1348.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _572 = &(*_1428);
        _571 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _572) -> [return: bb240, unwind: bb628];
    }

    bb240: {
        StorageDead(_572);
        _570 = ((*_571).15: u8);
        StorageLive(_573);
        _573 = _4;
        StorageLive(_574);
        StorageLive(_575);
        _575 = &_70;
        _574 = &(*_575);
        StorageLive(_576);
        _576 = move _342;
        _562 = send_from_program_vault(move _563, move _565, move _566, move _568, move _570, move _573, move _574, move _576) -> [return: bb241, unwind: bb628];
    }

    bb241: {
        StorageDead(_576);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_570);
        StorageDead(_568);
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_563);
        _561 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _562) -> [return: bb242, unwind: bb628];
    }

    bb242: {
        StorageDead(_562);
        _577 = discriminant(_561);
        switchInt(move _577) -> [0: bb243, 1: bb244, otherwise: bb4];
    }

    bb243: {
        StorageLive(_581);
        _581 = ((_561 as Continue).0: ());
        _560 = _581;
        StorageDead(_581);
        _1387 = discriminant(_561);
        StorageDead(_575);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_561);
        StorageDead(_560);
        StorageLive(_582);
        StorageLive(_583);
        _1349 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _583 = &((*_1349).10: anchor_lang::prelude::UncheckedAccount<'_>);
        _582 = <anchor_lang::prelude::UncheckedAccount<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _583) -> [return: bb246, unwind: bb628];
    }

    bb244: {
        StorageLive(_578);
        _578 = move ((_561 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_580);
        _580 = move _578;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _580) -> [return: bb245, unwind: bb647];
    }

    bb245: {
        StorageDead(_580);
        StorageDead(_578);
        _1403 = discriminant(_561);
        StorageDead(_575);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_561);
        StorageDead(_560);
        goto -> bb582;
    }

    bb246: {
        StorageDead(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        _588 = &(*_582);
        _587 = load_current_index_checked(move _588) -> [return: bb247, unwind: bb628];
    }

    bb247: {
        StorageDead(_588);
        _586 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _587) -> [return: bb248, unwind: bb628];
    }

    bb248: {
        StorageDead(_587);
        _589 = discriminant(_586);
        switchInt(move _589) -> [0: bb249, 1: bb250, otherwise: bb4];
    }

    bb249: {
        StorageLive(_593);
        _593 = ((_586 as Continue).0: u16);
        _585 = _593;
        StorageDead(_593);
        _584 = move _585 as usize (IntToInt);
        StorageDead(_585);
        _1389 = discriminant(_586);
        StorageDead(_586);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _597 = _584;
        StorageLive(_598);
        _598 = &(*_582);
        _596 = load_instruction_at_checked(move _597, move _598) -> [return: bb252, unwind: bb628];
    }

    bb250: {
        StorageLive(_590);
        _590 = move ((_586 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_592);
        _592 = move _590;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _592) -> [return: bb251, unwind: bb646];
    }

    bb251: {
        StorageDead(_592);
        StorageDead(_590);
        StorageDead(_585);
        _1401 = discriminant(_586);
        StorageDead(_586);
        goto -> bb581;
    }

    bb252: {
        StorageDead(_598);
        StorageDead(_597);
        _595 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _596) -> [return: bb253, unwind: bb628];
    }

    bb253: {
        StorageDead(_596);
        _599 = discriminant(_595);
        switchInt(move _599) -> [0: bb254, 1: bb255, otherwise: bb4];
    }

    bb254: {
        StorageLive(_603);
        _603 = move ((_595 as Continue).0: solana_program::instruction::Instruction);
        _594 = move _603;
        StorageDead(_603);
        _1391 = discriminant(_595);
        StorageDead(_595);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _608 = &(_594.0: anchor_lang::prelude::Pubkey);
        StorageLive(_609);
        _1350 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _609 = &(*_1350);
        _607 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _608, move _609) -> [return: bb257, unwind: bb621];
    }

    bb255: {
        StorageLive(_600);
        _600 = move ((_595 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_602);
        _602 = move _600;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _602) -> [return: bb256, unwind: bb645];
    }

    bb256: {
        StorageDead(_602);
        StorageDead(_600);
        _1399 = discriminant(_595);
        StorageDead(_595);
        goto -> bb580;
    }

    bb257: {
        switchInt(move _607) -> [0: bb259, otherwise: bb258];
    }

    bb258: {
        StorageDead(_609);
        StorageDead(_608);
        StorageLive(_610);
        _610 = ();
        _606 = std::result::Result::<(), error::ErrorCode>::Ok(move _610);
        StorageDead(_610);
        goto -> bb267;
    }

    bb259: {
        StorageDead(_609);
        StorageDead(_608);
        StorageLive(_611);
        _611 = error::ErrorCode::InvalidSwap;
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _1318 = const _;
        _622 = &(*_1318);
        _621 = &(*_622);
        _620 = move _621 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_621);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        _630 = &_611;
        _629 = &(*_630);
        _628 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _629) -> [return: bb260, unwind: bb621];
    }

    bb260: {
        StorageDead(_629);
        _627 = [move _628];
        StorageDead(_628);
        _626 = &_627;
        _625 = &(*_626);
        _624 = move _625 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_625);
        _619 = Arguments::<'_>::new_v1(move _620, move _624) -> [return: bb261, unwind: bb621];
    }

    bb261: {
        StorageDead(_624);
        StorageDead(_620);
        _618 = format(move _619) -> [return: bb262, unwind: bb621];
    }

    bb262: {
        StorageDead(_619);
        StorageDead(_630);
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_622);
        _617 = move _618;
        StorageDead(_618);
        _616 = &_617;
        _615 = &(*_616);
        _614 = <String as Deref>::deref(move _615) -> [return: bb263, unwind: bb620];
    }

    bb263: {
        _613 = &(*_614);
        StorageDead(_615);
        _612 = solana_program::log::sol_log(move _613) -> [return: bb264, unwind: bb620];
    }

    bb264: {
        StorageDead(_613);
        drop(_617) -> [return: bb265, unwind: bb621];
    }

    bb265: {
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_614);
        StorageDead(_612);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _633 = const "SwapBegin must be a top-level instruction (cant be cpi)";
        _632 = &(*_633);
        _631 = solana_program::log::sol_log(move _632) -> [return: bb266, unwind: bb621];
    }

    bb266: {
        StorageDead(_632);
        StorageDead(_633);
        StorageDead(_631);
        StorageLive(_634);
        _634 = _611;
        _606 = std::result::Result::<(), error::ErrorCode>::Err(move _634);
        StorageDead(_634);
        StorageDead(_611);
        goto -> bb267;
    }

    bb267: {
        StorageDead(_607);
        _605 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _606) -> [return: bb268, unwind: bb621];
    }

    bb268: {
        StorageDead(_606);
        _635 = discriminant(_605);
        switchInt(move _635) -> [0: bb269, 1: bb270, otherwise: bb4];
    }

    bb269: {
        StorageLive(_639);
        _639 = ((_605 as Continue).0: ());
        _604 = _639;
        StorageDead(_639);
        StorageDead(_605);
        StorageDead(_604);
        StorageLive(_640);
        StorageLive(_641);
        _641 = _584;
        _642 = CheckedAdd(_641, const 1_usize);
        assert(!move (_642.1: bool), "attempt to compute `{} + {}`, which would overflow", move _641, const 1_usize) -> [success: bb272, unwind: bb621];
    }

    bb270: {
        StorageLive(_636);
        _636 = ((_605 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_638);
        _638 = _636;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _638) -> [return: bb271, unwind: bb621];
    }

    bb271: {
        StorageDead(_638);
        StorageDead(_636);
        StorageDead(_605);
        StorageDead(_604);
        goto -> bb579;
    }

    bb272: {
        _640 = move (_642.0: usize);
        StorageDead(_641);
        StorageLive(_643);
        _643 = const false;
        StorageLive(_644);
        goto -> bb273;
    }

    bb273: {
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        _648 = _640;
        StorageLive(_649);
        _649 = &(*_582);
        _647 = load_instruction_at_checked(move _648, move _649) -> [return: bb274, unwind: bb621];
    }

    bb274: {
        StorageDead(_649);
        StorageDead(_648);
        _651 = discriminant(_647);
        switchInt(move _651) -> [0: bb277, 1: bb275, otherwise: bb4];
    }

    bb275: {
        _650 = discriminant(((_647 as Err).0: anchor_lang::prelude::ProgramError));
        switchInt(move _650) -> [1: bb278, otherwise: bb276];
    }

    bb276: {
        StorageLive(_654);
        _654 = move ((_647 as Err).0: anchor_lang::prelude::ProgramError);
        StorageLive(_656);
        StorageLive(_657);
        _657 = move _654;
        _656 = <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into(move _657) -> [return: bb279, unwind: bb644];
    }

    bb277: {
        StorageLive(_652);
        _652 = move ((_647 as Ok).0: solana_program::instruction::Instruction);
        _646 = move _652;
        StorageDead(_652);
        _1393 = discriminant(_647);
        StorageDead(_647);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        _660 = &(_646.0: anchor_lang::prelude::Pubkey);
        StorageLive(_661);
        StorageLive(_662);
        _662 = id() -> [return: bb280, unwind: bb619];
    }

    bb278: {
        _644 = const ();
        _1395 = discriminant(_647);
        switchInt(move _1395) -> [0: bb642, otherwise: bb643];
    }

    bb279: {
        StorageDead(_657);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _656);
        StorageDead(_656);
        StorageDead(_654);
        _1397 = discriminant(_647);
        StorageDead(_647);
        goto -> bb577;
    }

    bb280: {
        _661 = &_662;
        _659 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _660, move _661) -> [return: bb281, unwind: bb619];
    }

    bb281: {
        switchInt(move _659) -> [0: bb467, otherwise: bb282];
    }

    bb282: {
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_660);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = _643;
        switchInt(move _666) -> [0: bb283, otherwise: bb284];
    }

    bb283: {
        StorageLive(_667);
        _667 = ();
        _665 = std::result::Result::<(), error::ErrorCode>::Ok(move _667);
        StorageDead(_667);
        goto -> bb292;
    }

    bb284: {
        StorageLive(_668);
        _668 = error::ErrorCode::InvalidSwap;
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _1313 = const _;
        _679 = &(*_1313);
        _678 = &(*_679);
        _677 = move _678 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_678);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        _687 = &_668;
        _686 = &(*_687);
        _685 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _686) -> [return: bb285, unwind: bb619];
    }

    bb285: {
        StorageDead(_686);
        _684 = [move _685];
        StorageDead(_685);
        _683 = &_684;
        _682 = &(*_683);
        _681 = move _682 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_682);
        _676 = Arguments::<'_>::new_v1(move _677, move _681) -> [return: bb286, unwind: bb619];
    }

    bb286: {
        StorageDead(_681);
        StorageDead(_677);
        _675 = format(move _676) -> [return: bb287, unwind: bb619];
    }

    bb287: {
        StorageDead(_676);
        StorageDead(_687);
        StorageDead(_684);
        StorageDead(_683);
        StorageDead(_679);
        _674 = move _675;
        StorageDead(_675);
        _673 = &_674;
        _672 = &(*_673);
        _671 = <String as Deref>::deref(move _672) -> [return: bb288, unwind: bb618];
    }

    bb288: {
        _670 = &(*_671);
        StorageDead(_672);
        _669 = solana_program::log::sol_log(move _670) -> [return: bb289, unwind: bb618];
    }

    bb289: {
        StorageDead(_670);
        drop(_674) -> [return: bb290, unwind: bb619];
    }

    bb290: {
        StorageDead(_674);
        StorageDead(_673);
        StorageDead(_671);
        StorageDead(_669);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        _690 = const "the transaction must not contain a Drift instruction after FlashLoanEnd";
        _689 = &(*_690);
        _688 = solana_program::log::sol_log(move _689) -> [return: bb291, unwind: bb619];
    }

    bb291: {
        StorageDead(_689);
        StorageDead(_690);
        StorageDead(_688);
        StorageLive(_691);
        _691 = _668;
        _665 = std::result::Result::<(), error::ErrorCode>::Err(move _691);
        StorageDead(_691);
        StorageDead(_668);
        goto -> bb292;
    }

    bb292: {
        StorageDead(_666);
        _664 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _665) -> [return: bb293, unwind: bb619];
    }

    bb293: {
        StorageDead(_665);
        _692 = discriminant(_664);
        switchInt(move _692) -> [0: bb294, 1: bb295, otherwise: bb4];
    }

    bb294: {
        StorageLive(_696);
        _696 = ((_664 as Continue).0: ());
        _663 = _696;
        StorageDead(_696);
        StorageDead(_664);
        StorageDead(_663);
        _643 = const true;
        StorageLive(_697);
        _697 = <EndSwap as anchor_lang::Discriminator>::discriminator() -> [return: bb297, unwind: bb619];
    }

    bb295: {
        StorageLive(_693);
        _693 = ((_664 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_695);
        _695 = _693;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _695) -> [return: bb296, unwind: bb619];
    }

    bb296: {
        StorageDead(_695);
        StorageDead(_693);
        StorageDead(_664);
        StorageDead(_663);
        goto -> bb576;
    }

    bb297: {
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        _704 = &(_646.2: std::vec::Vec<u8>);
        StorageLive(_705);
        _705 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _703 = <Vec<u8> as Index<std::ops::Range<usize>>>::index(move _704, move _705) -> [return: bb298, unwind: bb619];
    }

    bb298: {
        _702 = &(*_703);
        StorageDead(_705);
        StorageDead(_704);
        StorageLive(_706);
        _706 = &_697;
        _701 = <[u8] as PartialEq<[u8; 8]>>::eq(move _702, move _706) -> [return: bb299, unwind: bb619];
    }

    bb299: {
        switchInt(move _701) -> [0: bb301, otherwise: bb300];
    }

    bb300: {
        StorageDead(_706);
        StorageDead(_703);
        StorageDead(_702);
        StorageLive(_707);
        _707 = ();
        _700 = std::result::Result::<(), error::ErrorCode>::Ok(move _707);
        StorageDead(_707);
        goto -> bb309;
    }

    bb301: {
        StorageDead(_706);
        StorageDead(_703);
        StorageDead(_702);
        StorageLive(_708);
        _708 = error::ErrorCode::InvalidSwap;
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        _1312 = const _;
        _719 = &(*_1312);
        _718 = &(*_719);
        _717 = move _718 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_718);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        _727 = &_708;
        _726 = &(*_727);
        _725 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _726) -> [return: bb302, unwind: bb619];
    }

    bb302: {
        StorageDead(_726);
        _724 = [move _725];
        StorageDead(_725);
        _723 = &_724;
        _722 = &(*_723);
        _721 = move _722 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_722);
        _716 = Arguments::<'_>::new_v1(move _717, move _721) -> [return: bb303, unwind: bb619];
    }

    bb303: {
        StorageDead(_721);
        StorageDead(_717);
        _715 = format(move _716) -> [return: bb304, unwind: bb619];
    }

    bb304: {
        StorageDead(_716);
        StorageDead(_727);
        StorageDead(_724);
        StorageDead(_723);
        StorageDead(_719);
        _714 = move _715;
        StorageDead(_715);
        _713 = &_714;
        _712 = &(*_713);
        _711 = <String as Deref>::deref(move _712) -> [return: bb305, unwind: bb617];
    }

    bb305: {
        _710 = &(*_711);
        StorageDead(_712);
        _709 = solana_program::log::sol_log(move _710) -> [return: bb306, unwind: bb617];
    }

    bb306: {
        StorageDead(_710);
        drop(_714) -> [return: bb307, unwind: bb619];
    }

    bb307: {
        StorageDead(_714);
        StorageDead(_713);
        StorageDead(_711);
        StorageDead(_709);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        _730 = const "last drift ix must be end of swap";
        _729 = &(*_730);
        _728 = solana_program::log::sol_log(move _729) -> [return: bb308, unwind: bb619];
    }

    bb308: {
        StorageDead(_729);
        StorageDead(_730);
        StorageDead(_728);
        StorageLive(_731);
        _731 = _708;
        _700 = std::result::Result::<(), error::ErrorCode>::Err(move _731);
        StorageDead(_731);
        StorageDead(_708);
        goto -> bb309;
    }

    bb309: {
        StorageDead(_701);
        _699 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _700) -> [return: bb310, unwind: bb619];
    }

    bb310: {
        StorageDead(_700);
        _732 = discriminant(_699);
        switchInt(move _732) -> [0: bb311, 1: bb312, otherwise: bb4];
    }

    bb311: {
        StorageLive(_736);
        _736 = ((_699 as Continue).0: ());
        _698 = _736;
        StorageDead(_736);
        StorageDead(_699);
        StorageDead(_698);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _1351 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _743 = &((*_1351).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _742 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _743) -> [return: bb314, unwind: bb619];
    }

    bb312: {
        StorageLive(_733);
        _733 = ((_699 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_735);
        _735 = _733;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _735) -> [return: bb313, unwind: bb619];
    }

    bb313: {
        StorageDead(_735);
        StorageDead(_733);
        StorageDead(_699);
        StorageDead(_698);
        goto -> bb575;
    }

    bb314: {
        _741 = &_742;
        StorageDead(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _745 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _746, const 1_usize) -> [return: bb315, unwind: bb619];
    }

    bb315: {
        StorageDead(_746);
        _744 = &((*_745).0: anchor_lang::prelude::Pubkey);
        _740 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _741, move _744) -> [return: bb316, unwind: bb619];
    }

    bb316: {
        switchInt(move _740) -> [0: bb318, otherwise: bb317];
    }

    bb317: {
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_742);
        StorageDead(_741);
        StorageLive(_747);
        _747 = ();
        _739 = std::result::Result::<(), error::ErrorCode>::Ok(move _747);
        StorageDead(_747);
        goto -> bb326;
    }

    bb318: {
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_742);
        StorageDead(_741);
        StorageLive(_748);
        _748 = error::ErrorCode::InvalidSwap;
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        _1311 = const _;
        _759 = &(*_1311);
        _758 = &(*_759);
        _757 = move _758 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_758);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        _767 = &_748;
        _766 = &(*_767);
        _765 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _766) -> [return: bb319, unwind: bb619];
    }

    bb319: {
        StorageDead(_766);
        _764 = [move _765];
        StorageDead(_765);
        _763 = &_764;
        _762 = &(*_763);
        _761 = move _762 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_762);
        _756 = Arguments::<'_>::new_v1(move _757, move _761) -> [return: bb320, unwind: bb619];
    }

    bb320: {
        StorageDead(_761);
        StorageDead(_757);
        _755 = format(move _756) -> [return: bb321, unwind: bb619];
    }

    bb321: {
        StorageDead(_756);
        StorageDead(_767);
        StorageDead(_764);
        StorageDead(_763);
        StorageDead(_759);
        _754 = move _755;
        StorageDead(_755);
        _753 = &_754;
        _752 = &(*_753);
        _751 = <String as Deref>::deref(move _752) -> [return: bb322, unwind: bb616];
    }

    bb322: {
        _750 = &(*_751);
        StorageDead(_752);
        _749 = solana_program::log::sol_log(move _750) -> [return: bb323, unwind: bb616];
    }

    bb323: {
        StorageDead(_750);
        drop(_754) -> [return: bb324, unwind: bb619];
    }

    bb324: {
        StorageDead(_754);
        StorageDead(_753);
        StorageDead(_751);
        StorageDead(_749);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _770 = const "the user passed to SwapBegin and End must match";
        _769 = &(*_770);
        _768 = solana_program::log::sol_log(move _769) -> [return: bb325, unwind: bb619];
    }

    bb325: {
        StorageDead(_769);
        StorageDead(_770);
        StorageDead(_768);
        StorageLive(_771);
        _771 = _748;
        _739 = std::result::Result::<(), error::ErrorCode>::Err(move _771);
        StorageDead(_771);
        StorageDead(_748);
        goto -> bb326;
    }

    bb326: {
        StorageDead(_740);
        _738 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _739) -> [return: bb327, unwind: bb619];
    }

    bb327: {
        StorageDead(_739);
        _772 = discriminant(_738);
        switchInt(move _772) -> [0: bb328, 1: bb329, otherwise: bb4];
    }

    bb328: {
        StorageLive(_776);
        _776 = ((_738 as Continue).0: ());
        _737 = _776;
        StorageDead(_776);
        StorageDead(_738);
        StorageDead(_737);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        _1352 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _783 = &((*_1352).3: anchor_lang::prelude::Signer<'_>);
        _782 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _783) -> [return: bb331, unwind: bb619];
    }

    bb329: {
        StorageLive(_773);
        _773 = ((_738 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_775);
        _775 = _773;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _775) -> [return: bb330, unwind: bb619];
    }

    bb330: {
        StorageDead(_775);
        StorageDead(_773);
        StorageDead(_738);
        StorageDead(_737);
        goto -> bb575;
    }

    bb331: {
        _781 = &_782;
        StorageDead(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        _786 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _785 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _786, const 3_usize) -> [return: bb332, unwind: bb619];
    }

    bb332: {
        StorageDead(_786);
        _784 = &((*_785).0: anchor_lang::prelude::Pubkey);
        _780 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _781, move _784) -> [return: bb333, unwind: bb619];
    }

    bb333: {
        switchInt(move _780) -> [0: bb335, otherwise: bb334];
    }

    bb334: {
        StorageDead(_785);
        StorageDead(_784);
        StorageDead(_782);
        StorageDead(_781);
        StorageLive(_787);
        _787 = ();
        _779 = std::result::Result::<(), error::ErrorCode>::Ok(move _787);
        StorageDead(_787);
        goto -> bb343;
    }

    bb335: {
        StorageDead(_785);
        StorageDead(_784);
        StorageDead(_782);
        StorageDead(_781);
        StorageLive(_788);
        _788 = error::ErrorCode::InvalidSwap;
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _1310 = const _;
        _799 = &(*_1310);
        _798 = &(*_799);
        _797 = move _798 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_798);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        _807 = &_788;
        _806 = &(*_807);
        _805 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _806) -> [return: bb336, unwind: bb619];
    }

    bb336: {
        StorageDead(_806);
        _804 = [move _805];
        StorageDead(_805);
        _803 = &_804;
        _802 = &(*_803);
        _801 = move _802 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_802);
        _796 = Arguments::<'_>::new_v1(move _797, move _801) -> [return: bb337, unwind: bb619];
    }

    bb337: {
        StorageDead(_801);
        StorageDead(_797);
        _795 = format(move _796) -> [return: bb338, unwind: bb619];
    }

    bb338: {
        StorageDead(_796);
        StorageDead(_807);
        StorageDead(_804);
        StorageDead(_803);
        StorageDead(_799);
        _794 = move _795;
        StorageDead(_795);
        _793 = &_794;
        _792 = &(*_793);
        _791 = <String as Deref>::deref(move _792) -> [return: bb339, unwind: bb615];
    }

    bb339: {
        _790 = &(*_791);
        StorageDead(_792);
        _789 = solana_program::log::sol_log(move _790) -> [return: bb340, unwind: bb615];
    }

    bb340: {
        StorageDead(_790);
        drop(_794) -> [return: bb341, unwind: bb619];
    }

    bb341: {
        StorageDead(_794);
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_789);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        _810 = const "the authority passed to SwapBegin and End must match";
        _809 = &(*_810);
        _808 = solana_program::log::sol_log(move _809) -> [return: bb342, unwind: bb619];
    }

    bb342: {
        StorageDead(_809);
        StorageDead(_810);
        StorageDead(_808);
        StorageLive(_811);
        _811 = _788;
        _779 = std::result::Result::<(), error::ErrorCode>::Err(move _811);
        StorageDead(_811);
        StorageDead(_788);
        goto -> bb343;
    }

    bb343: {
        StorageDead(_780);
        _778 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _779) -> [return: bb344, unwind: bb619];
    }

    bb344: {
        StorageDead(_779);
        _812 = discriminant(_778);
        switchInt(move _812) -> [0: bb345, 1: bb346, otherwise: bb4];
    }

    bb345: {
        StorageLive(_816);
        _816 = ((_778 as Continue).0: ());
        _777 = _816;
        StorageDead(_816);
        StorageDead(_778);
        StorageDead(_777);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        _1353 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _1354 = deref_copy ((*_1353).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1429 = (((_1354.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _823 = &(*_1429);
        _822 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _823) -> [return: bb348, unwind: bb619];
    }

    bb346: {
        StorageLive(_813);
        _813 = ((_778 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_815);
        _815 = _813;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _815) -> [return: bb347, unwind: bb619];
    }

    bb347: {
        StorageDead(_815);
        StorageDead(_813);
        StorageDead(_778);
        StorageDead(_777);
        goto -> bb575;
    }

    bb348: {
        _821 = &_822;
        StorageDead(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        _826 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _825 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _826, const 4_usize) -> [return: bb349, unwind: bb619];
    }

    bb349: {
        StorageDead(_826);
        _824 = &((*_825).0: anchor_lang::prelude::Pubkey);
        _820 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _821, move _824) -> [return: bb350, unwind: bb619];
    }

    bb350: {
        switchInt(move _820) -> [0: bb352, otherwise: bb351];
    }

    bb351: {
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_822);
        StorageDead(_821);
        StorageLive(_827);
        _827 = ();
        _819 = std::result::Result::<(), error::ErrorCode>::Ok(move _827);
        StorageDead(_827);
        goto -> bb360;
    }

    bb352: {
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_822);
        StorageDead(_821);
        StorageLive(_828);
        _828 = error::ErrorCode::InvalidSwap;
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        _1309 = const _;
        _839 = &(*_1309);
        _838 = &(*_839);
        _837 = move _838 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_838);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        _847 = &_828;
        _846 = &(*_847);
        _845 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _846) -> [return: bb353, unwind: bb619];
    }

    bb353: {
        StorageDead(_846);
        _844 = [move _845];
        StorageDead(_845);
        _843 = &_844;
        _842 = &(*_843);
        _841 = move _842 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_842);
        _836 = Arguments::<'_>::new_v1(move _837, move _841) -> [return: bb354, unwind: bb619];
    }

    bb354: {
        StorageDead(_841);
        StorageDead(_837);
        _835 = format(move _836) -> [return: bb355, unwind: bb619];
    }

    bb355: {
        StorageDead(_836);
        StorageDead(_847);
        StorageDead(_844);
        StorageDead(_843);
        StorageDead(_839);
        _834 = move _835;
        StorageDead(_835);
        _833 = &_834;
        _832 = &(*_833);
        _831 = <String as Deref>::deref(move _832) -> [return: bb356, unwind: bb614];
    }

    bb356: {
        _830 = &(*_831);
        StorageDead(_832);
        _829 = solana_program::log::sol_log(move _830) -> [return: bb357, unwind: bb614];
    }

    bb357: {
        StorageDead(_830);
        drop(_834) -> [return: bb358, unwind: bb619];
    }

    bb358: {
        StorageDead(_834);
        StorageDead(_833);
        StorageDead(_831);
        StorageDead(_829);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        _850 = const "the out_spot_market_vault passed to SwapBegin and End must match";
        _849 = &(*_850);
        _848 = solana_program::log::sol_log(move _849) -> [return: bb359, unwind: bb619];
    }

    bb359: {
        StorageDead(_849);
        StorageDead(_850);
        StorageDead(_848);
        StorageLive(_851);
        _851 = _828;
        _819 = std::result::Result::<(), error::ErrorCode>::Err(move _851);
        StorageDead(_851);
        StorageDead(_828);
        goto -> bb360;
    }

    bb360: {
        StorageDead(_820);
        _818 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _819) -> [return: bb361, unwind: bb619];
    }

    bb361: {
        StorageDead(_819);
        _852 = discriminant(_818);
        switchInt(move _852) -> [0: bb362, 1: bb363, otherwise: bb4];
    }

    bb362: {
        StorageLive(_856);
        _856 = ((_818 as Continue).0: ());
        _817 = _856;
        StorageDead(_856);
        StorageDead(_818);
        StorageDead(_817);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        _1355 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _1356 = deref_copy ((*_1355).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1430 = (((_1356.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _863 = &(*_1430);
        _862 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _863) -> [return: bb365, unwind: bb619];
    }

    bb363: {
        StorageLive(_853);
        _853 = ((_818 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_855);
        _855 = _853;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _855) -> [return: bb364, unwind: bb619];
    }

    bb364: {
        StorageDead(_855);
        StorageDead(_853);
        StorageDead(_818);
        StorageDead(_817);
        goto -> bb575;
    }

    bb365: {
        _861 = &_862;
        StorageDead(_863);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        _866 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _865 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _866, const 5_usize) -> [return: bb366, unwind: bb619];
    }

    bb366: {
        StorageDead(_866);
        _864 = &((*_865).0: anchor_lang::prelude::Pubkey);
        _860 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _861, move _864) -> [return: bb367, unwind: bb619];
    }

    bb367: {
        switchInt(move _860) -> [0: bb369, otherwise: bb368];
    }

    bb368: {
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_861);
        StorageLive(_867);
        _867 = ();
        _859 = std::result::Result::<(), error::ErrorCode>::Ok(move _867);
        StorageDead(_867);
        goto -> bb377;
    }

    bb369: {
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_861);
        StorageLive(_868);
        _868 = error::ErrorCode::InvalidSwap;
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        _1308 = const _;
        _879 = &(*_1308);
        _878 = &(*_879);
        _877 = move _878 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_878);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        _887 = &_868;
        _886 = &(*_887);
        _885 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _886) -> [return: bb370, unwind: bb619];
    }

    bb370: {
        StorageDead(_886);
        _884 = [move _885];
        StorageDead(_885);
        _883 = &_884;
        _882 = &(*_883);
        _881 = move _882 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_882);
        _876 = Arguments::<'_>::new_v1(move _877, move _881) -> [return: bb371, unwind: bb619];
    }

    bb371: {
        StorageDead(_881);
        StorageDead(_877);
        _875 = format(move _876) -> [return: bb372, unwind: bb619];
    }

    bb372: {
        StorageDead(_876);
        StorageDead(_887);
        StorageDead(_884);
        StorageDead(_883);
        StorageDead(_879);
        _874 = move _875;
        StorageDead(_875);
        _873 = &_874;
        _872 = &(*_873);
        _871 = <String as Deref>::deref(move _872) -> [return: bb373, unwind: bb613];
    }

    bb373: {
        _870 = &(*_871);
        StorageDead(_872);
        _869 = solana_program::log::sol_log(move _870) -> [return: bb374, unwind: bb613];
    }

    bb374: {
        StorageDead(_870);
        drop(_874) -> [return: bb375, unwind: bb619];
    }

    bb375: {
        StorageDead(_874);
        StorageDead(_873);
        StorageDead(_871);
        StorageDead(_869);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        _890 = const "the in_spot_market_vault passed to SwapBegin and End must match";
        _889 = &(*_890);
        _888 = solana_program::log::sol_log(move _889) -> [return: bb376, unwind: bb619];
    }

    bb376: {
        StorageDead(_889);
        StorageDead(_890);
        StorageDead(_888);
        StorageLive(_891);
        _891 = _868;
        _859 = std::result::Result::<(), error::ErrorCode>::Err(move _891);
        StorageDead(_891);
        StorageDead(_868);
        goto -> bb377;
    }

    bb377: {
        StorageDead(_860);
        _858 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _859) -> [return: bb378, unwind: bb619];
    }

    bb378: {
        StorageDead(_859);
        _892 = discriminant(_858);
        switchInt(move _892) -> [0: bb379, 1: bb380, otherwise: bb4];
    }

    bb379: {
        StorageLive(_896);
        _896 = ((_858 as Continue).0: ());
        _857 = _896;
        StorageDead(_896);
        StorageDead(_858);
        StorageDead(_857);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        _1357 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _1358 = deref_copy ((*_1357).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1431 = (((_1358.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _903 = &(*_1431);
        _902 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _903) -> [return: bb382, unwind: bb619];
    }

    bb380: {
        StorageLive(_893);
        _893 = ((_858 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_895);
        _895 = _893;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _895) -> [return: bb381, unwind: bb619];
    }

    bb381: {
        StorageDead(_895);
        StorageDead(_893);
        StorageDead(_858);
        StorageDead(_857);
        goto -> bb575;
    }

    bb382: {
        _901 = &_902;
        StorageDead(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        _906 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _905 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _906, const 6_usize) -> [return: bb383, unwind: bb619];
    }

    bb383: {
        StorageDead(_906);
        _904 = &((*_905).0: anchor_lang::prelude::Pubkey);
        _900 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _901, move _904) -> [return: bb384, unwind: bb619];
    }

    bb384: {
        switchInt(move _900) -> [0: bb386, otherwise: bb385];
    }

    bb385: {
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_902);
        StorageDead(_901);
        StorageLive(_907);
        _907 = ();
        _899 = std::result::Result::<(), error::ErrorCode>::Ok(move _907);
        StorageDead(_907);
        goto -> bb394;
    }

    bb386: {
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_902);
        StorageDead(_901);
        StorageLive(_908);
        _908 = error::ErrorCode::InvalidSwap;
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _1307 = const _;
        _919 = &(*_1307);
        _918 = &(*_919);
        _917 = move _918 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_918);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        _927 = &_908;
        _926 = &(*_927);
        _925 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _926) -> [return: bb387, unwind: bb619];
    }

    bb387: {
        StorageDead(_926);
        _924 = [move _925];
        StorageDead(_925);
        _923 = &_924;
        _922 = &(*_923);
        _921 = move _922 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_922);
        _916 = Arguments::<'_>::new_v1(move _917, move _921) -> [return: bb388, unwind: bb619];
    }

    bb388: {
        StorageDead(_921);
        StorageDead(_917);
        _915 = format(move _916) -> [return: bb389, unwind: bb619];
    }

    bb389: {
        StorageDead(_916);
        StorageDead(_927);
        StorageDead(_924);
        StorageDead(_923);
        StorageDead(_919);
        _914 = move _915;
        StorageDead(_915);
        _913 = &_914;
        _912 = &(*_913);
        _911 = <String as Deref>::deref(move _912) -> [return: bb390, unwind: bb612];
    }

    bb390: {
        _910 = &(*_911);
        StorageDead(_912);
        _909 = solana_program::log::sol_log(move _910) -> [return: bb391, unwind: bb612];
    }

    bb391: {
        StorageDead(_910);
        drop(_914) -> [return: bb392, unwind: bb619];
    }

    bb392: {
        StorageDead(_914);
        StorageDead(_913);
        StorageDead(_911);
        StorageDead(_909);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _930 = const "the out_token_account passed to SwapBegin and End must match";
        _929 = &(*_930);
        _928 = solana_program::log::sol_log(move _929) -> [return: bb393, unwind: bb619];
    }

    bb393: {
        StorageDead(_929);
        StorageDead(_930);
        StorageDead(_928);
        StorageLive(_931);
        _931 = _908;
        _899 = std::result::Result::<(), error::ErrorCode>::Err(move _931);
        StorageDead(_931);
        StorageDead(_908);
        goto -> bb394;
    }

    bb394: {
        StorageDead(_900);
        _898 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _899) -> [return: bb395, unwind: bb619];
    }

    bb395: {
        StorageDead(_899);
        _932 = discriminant(_898);
        switchInt(move _932) -> [0: bb396, 1: bb397, otherwise: bb4];
    }

    bb396: {
        StorageLive(_936);
        _936 = ((_898 as Continue).0: ());
        _897 = _936;
        StorageDead(_936);
        StorageDead(_898);
        StorageDead(_897);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        _1359 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _1360 = deref_copy ((*_1359).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _1432 = (((_1360.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _943 = &(*_1432);
        _942 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _943) -> [return: bb399, unwind: bb619];
    }

    bb397: {
        StorageLive(_933);
        _933 = ((_898 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_935);
        _935 = _933;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _935) -> [return: bb398, unwind: bb619];
    }

    bb398: {
        StorageDead(_935);
        StorageDead(_933);
        StorageDead(_898);
        StorageDead(_897);
        goto -> bb575;
    }

    bb399: {
        _941 = &_942;
        StorageDead(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        _946 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _945 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _946, const 7_usize) -> [return: bb400, unwind: bb619];
    }

    bb400: {
        StorageDead(_946);
        _944 = &((*_945).0: anchor_lang::prelude::Pubkey);
        _940 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _941, move _944) -> [return: bb401, unwind: bb619];
    }

    bb401: {
        switchInt(move _940) -> [0: bb403, otherwise: bb402];
    }

    bb402: {
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_941);
        StorageLive(_947);
        _947 = ();
        _939 = std::result::Result::<(), error::ErrorCode>::Ok(move _947);
        StorageDead(_947);
        goto -> bb411;
    }

    bb403: {
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_941);
        StorageLive(_948);
        _948 = error::ErrorCode::InvalidSwap;
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        StorageLive(_958);
        StorageLive(_959);
        _1306 = const _;
        _959 = &(*_1306);
        _958 = &(*_959);
        _957 = move _958 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_958);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        StorageLive(_966);
        StorageLive(_967);
        _967 = &_948;
        _966 = &(*_967);
        _965 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _966) -> [return: bb404, unwind: bb619];
    }

    bb404: {
        StorageDead(_966);
        _964 = [move _965];
        StorageDead(_965);
        _963 = &_964;
        _962 = &(*_963);
        _961 = move _962 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_962);
        _956 = Arguments::<'_>::new_v1(move _957, move _961) -> [return: bb405, unwind: bb619];
    }

    bb405: {
        StorageDead(_961);
        StorageDead(_957);
        _955 = format(move _956) -> [return: bb406, unwind: bb619];
    }

    bb406: {
        StorageDead(_956);
        StorageDead(_967);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_959);
        _954 = move _955;
        StorageDead(_955);
        _953 = &_954;
        _952 = &(*_953);
        _951 = <String as Deref>::deref(move _952) -> [return: bb407, unwind: bb611];
    }

    bb407: {
        _950 = &(*_951);
        StorageDead(_952);
        _949 = solana_program::log::sol_log(move _950) -> [return: bb408, unwind: bb611];
    }

    bb408: {
        StorageDead(_950);
        drop(_954) -> [return: bb409, unwind: bb619];
    }

    bb409: {
        StorageDead(_954);
        StorageDead(_953);
        StorageDead(_951);
        StorageDead(_949);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        _970 = const "the in_token_account passed to SwapBegin and End must match";
        _969 = &(*_970);
        _968 = solana_program::log::sol_log(move _969) -> [return: bb410, unwind: bb619];
    }

    bb410: {
        StorageDead(_969);
        StorageDead(_970);
        StorageDead(_968);
        StorageLive(_971);
        _971 = _948;
        _939 = std::result::Result::<(), error::ErrorCode>::Err(move _971);
        StorageDead(_971);
        StorageDead(_948);
        goto -> bb411;
    }

    bb411: {
        StorageDead(_940);
        _938 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _939) -> [return: bb412, unwind: bb619];
    }

    bb412: {
        StorageDead(_939);
        _972 = discriminant(_938);
        switchInt(move _972) -> [0: bb413, 1: bb414, otherwise: bb4];
    }

    bb413: {
        StorageLive(_976);
        _976 = ((_938 as Continue).0: ());
        _937 = _976;
        StorageDead(_976);
        StorageDead(_938);
        StorageDead(_937);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        _1361 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _982 = &(*_1361);
        _981 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _982) -> [return: bb416, unwind: bb619];
    }

    bb414: {
        StorageLive(_973);
        _973 = ((_938 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_975);
        _975 = _973;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _975) -> [return: bb415, unwind: bb619];
    }

    bb415: {
        StorageDead(_975);
        StorageDead(_973);
        StorageDead(_938);
        StorageDead(_937);
        goto -> bb575;
    }

    bb416: {
        StorageDead(_982);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        _985 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _984 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _985) -> [return: bb417, unwind: bb619];
    }

    bb417: {
        StorageDead(_985);
        _986 = CheckedSub(_984, const 11_usize);
        assert(!move (_986.1: bool), "attempt to compute `{} - {}`, which would overflow", move _984, const 11_usize) -> [success: bb418, unwind: bb619];
    }

    bb418: {
        _983 = move (_986.0: usize);
        StorageDead(_984);
        _980 = Eq(move _981, move _983);
        switchInt(move _980) -> [0: bb420, otherwise: bb419];
    }

    bb419: {
        StorageDead(_983);
        StorageDead(_981);
        StorageLive(_987);
        _987 = ();
        _979 = std::result::Result::<(), error::ErrorCode>::Ok(move _987);
        StorageDead(_987);
        goto -> bb428;
    }

    bb420: {
        StorageDead(_983);
        StorageDead(_981);
        StorageLive(_988);
        _988 = error::ErrorCode::InvalidSwap;
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        _1305 = const _;
        _999 = &(*_1305);
        _998 = &(*_999);
        _997 = move _998 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_998);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        _1007 = &_988;
        _1006 = &(*_1007);
        _1005 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1006) -> [return: bb421, unwind: bb619];
    }

    bb421: {
        StorageDead(_1006);
        _1004 = [move _1005];
        StorageDead(_1005);
        _1003 = &_1004;
        _1002 = &(*_1003);
        _1001 = move _1002 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1002);
        _996 = Arguments::<'_>::new_v1(move _997, move _1001) -> [return: bb422, unwind: bb619];
    }

    bb422: {
        StorageDead(_1001);
        StorageDead(_997);
        _995 = format(move _996) -> [return: bb423, unwind: bb619];
    }

    bb423: {
        StorageDead(_996);
        StorageDead(_1007);
        StorageDead(_1004);
        StorageDead(_1003);
        StorageDead(_999);
        _994 = move _995;
        StorageDead(_995);
        _993 = &_994;
        _992 = &(*_993);
        _991 = <String as Deref>::deref(move _992) -> [return: bb424, unwind: bb610];
    }

    bb424: {
        _990 = &(*_991);
        StorageDead(_992);
        _989 = solana_program::log::sol_log(move _990) -> [return: bb425, unwind: bb610];
    }

    bb425: {
        StorageDead(_990);
        drop(_994) -> [return: bb426, unwind: bb619];
    }

    bb426: {
        StorageDead(_994);
        StorageDead(_993);
        StorageDead(_991);
        StorageDead(_989);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        _1010 = const "begin and end ix must have the same number of accounts";
        _1009 = &(*_1010);
        _1008 = solana_program::log::sol_log(move _1009) -> [return: bb427, unwind: bb619];
    }

    bb427: {
        StorageDead(_1009);
        StorageDead(_1010);
        StorageDead(_1008);
        StorageLive(_1011);
        _1011 = _988;
        _979 = std::result::Result::<(), error::ErrorCode>::Err(move _1011);
        StorageDead(_1011);
        StorageDead(_988);
        goto -> bb428;
    }

    bb428: {
        StorageDead(_980);
        _978 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _979) -> [return: bb429, unwind: bb619];
    }

    bb429: {
        StorageDead(_979);
        _1012 = discriminant(_978);
        switchInt(move _1012) -> [0: bb430, 1: bb431, otherwise: bb4];
    }

    bb430: {
        StorageLive(_1016);
        _1016 = ((_978 as Continue).0: ());
        _977 = _1016;
        StorageDead(_1016);
        StorageDead(_978);
        StorageDead(_977);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        _1020 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1019 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _1020) -> [return: bb433, unwind: bb619];
    }

    bb431: {
        StorageLive(_1013);
        _1013 = ((_978 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1015);
        _1015 = _1013;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1015) -> [return: bb432, unwind: bb619];
    }

    bb432: {
        StorageDead(_1015);
        StorageDead(_1013);
        StorageDead(_978);
        StorageDead(_977);
        goto -> bb575;
    }

    bb433: {
        StorageDead(_1020);
        _1018 = std::ops::Range::<usize> { start: const 11_usize, end: move _1019 };
        StorageDead(_1019);
        _1017 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _1018) -> [return: bb434, unwind: bb619];
    }

    bb434: {
        StorageDead(_1018);
        StorageLive(_1021);
        _1021 = move _1017;
        goto -> bb435;
    }

    bb435: {
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        _1025 = &mut _1021;
        _1024 = &mut (*_1025);
        _1023 = <std::ops::Range<usize> as Iterator>::next(move _1024) -> [return: bb436, unwind: bb619];
    }

    bb436: {
        StorageDead(_1024);
        _1026 = discriminant(_1023);
        switchInt(move _1026) -> [0: bb438, 1: bb437, otherwise: bb4];
    }

    bb437: {
        StorageLive(_1028);
        _1028 = ((_1023 as Some).0: usize);
        StorageLive(_1029);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        _1035 = _1028;
        _1036 = CheckedSub(_1035, const 11_usize);
        assert(!move (_1036.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1035, const 11_usize) -> [success: bb439, unwind: bb619];
    }

    bb438: {
        _658 = const ();
        StorageDead(_1025);
        StorageDead(_1023);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageDead(_1017);
        StorageDead(_697);
        goto -> bb547;
    }

    bb439: {
        _1034 = move (_1036.0: usize);
        StorageDead(_1035);
        _1362 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1037 = Len((*_1362));
        _1038 = Lt(_1034, _1037);
        assert(move _1038, "index out of bounds: the length is {} but the index is {}", move _1037, _1034) -> [success: bb440, unwind: bb619];
    }

    bb440: {
        _1363 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1364 = deref_copy ((*_1363)[_1034].0: &anchor_lang::prelude::Pubkey);
        _1033 = &(*_1364);
        StorageLive(_1039);
        StorageLive(_1040);
        StorageLive(_1041);
        _1041 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_1042);
        _1042 = _1028;
        _1040 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _1041, move _1042) -> [return: bb441, unwind: bb619];
    }

    bb441: {
        StorageDead(_1042);
        StorageDead(_1041);
        _1039 = &((*_1040).0: anchor_lang::prelude::Pubkey);
        _1032 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1033, move _1039) -> [return: bb442, unwind: bb619];
    }

    bb442: {
        switchInt(move _1032) -> [0: bb444, otherwise: bb443];
    }

    bb443: {
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageLive(_1043);
        _1043 = ();
        _1031 = std::result::Result::<(), error::ErrorCode>::Ok(move _1043);
        StorageDead(_1043);
        goto -> bb462;
    }

    bb444: {
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageLive(_1044);
        _1044 = error::ErrorCode::InvalidSwap;
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        _1304 = const _;
        _1055 = &(*_1304);
        _1054 = &(*_1055);
        _1053 = move _1054 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1054);
        StorageLive(_1057);
        StorageLive(_1058);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        _1063 = &_1044;
        _1062 = &(*_1063);
        _1061 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1062) -> [return: bb445, unwind: bb619];
    }

    bb445: {
        StorageDead(_1062);
        _1060 = [move _1061];
        StorageDead(_1061);
        _1059 = &_1060;
        _1058 = &(*_1059);
        _1057 = move _1058 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1058);
        _1052 = Arguments::<'_>::new_v1(move _1053, move _1057) -> [return: bb446, unwind: bb619];
    }

    bb446: {
        StorageDead(_1057);
        StorageDead(_1053);
        _1051 = format(move _1052) -> [return: bb447, unwind: bb619];
    }

    bb447: {
        StorageDead(_1052);
        StorageDead(_1063);
        StorageDead(_1060);
        StorageDead(_1059);
        StorageDead(_1055);
        _1050 = move _1051;
        StorageDead(_1051);
        _1049 = &_1050;
        _1048 = &(*_1049);
        _1047 = <String as Deref>::deref(move _1048) -> [return: bb448, unwind: bb609];
    }

    bb448: {
        _1046 = &(*_1047);
        StorageDead(_1048);
        _1045 = solana_program::log::sol_log(move _1046) -> [return: bb449, unwind: bb609];
    }

    bb449: {
        StorageDead(_1046);
        drop(_1050) -> [return: bb450, unwind: bb619];
    }

    bb450: {
        StorageDead(_1050);
        StorageDead(_1049);
        StorageDead(_1047);
        StorageDead(_1045);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        _1303 = const _;
        _1074 = &(*_1303);
        _1073 = &(*_1074);
        _1072 = move _1073 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1073);
        StorageLive(_1076);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        _1082 = &_1028;
        _1081 = &(*_1082);
        _1080 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _1081) -> [return: bb451, unwind: bb619];
    }

    bb451: {
        StorageDead(_1081);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        StorageLive(_1087);
        _1087 = _1028;
        _1088 = CheckedSub(_1087, const 11_usize);
        assert(!move (_1088.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1087, const 11_usize) -> [success: bb452, unwind: bb619];
    }

    bb452: {
        _1086 = move (_1088.0: usize);
        StorageDead(_1087);
        _1365 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1089 = Len((*_1365));
        _1090 = Lt(_1086, _1089);
        assert(move _1090, "index out of bounds: the length is {} but the index is {}", move _1089, _1086) -> [success: bb453, unwind: bb619];
    }

    bb453: {
        _1366 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _1085 = &((*_1366)[_1086].0: &anchor_lang::prelude::Pubkey);
        _1084 = &(*_1085);
        _1083 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _1084) -> [return: bb454, unwind: bb619];
    }

    bb454: {
        StorageDead(_1084);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        _1095 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        StorageLive(_1096);
        _1096 = _1028;
        _1094 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _1095, move _1096) -> [return: bb455, unwind: bb619];
    }

    bb455: {
        StorageDead(_1096);
        StorageDead(_1095);
        _1093 = &((*_1094).0: anchor_lang::prelude::Pubkey);
        _1092 = &(*_1093);
        _1091 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _1092) -> [return: bb456, unwind: bb619];
    }

    bb456: {
        StorageDead(_1092);
        _1079 = [move _1080, move _1083, move _1091];
        StorageDead(_1091);
        StorageDead(_1083);
        StorageDead(_1080);
        _1078 = &_1079;
        _1077 = &(*_1078);
        _1076 = move _1077 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1077);
        _1071 = Arguments::<'_>::new_v1(move _1072, move _1076) -> [return: bb457, unwind: bb619];
    }

    bb457: {
        StorageDead(_1076);
        StorageDead(_1072);
        _1070 = format(move _1071) -> [return: bb458, unwind: bb619];
    }

    bb458: {
        StorageDead(_1071);
        StorageDead(_1094);
        StorageDead(_1093);
        StorageDead(_1086);
        StorageDead(_1085);
        StorageDead(_1082);
        StorageDead(_1079);
        StorageDead(_1078);
        StorageDead(_1074);
        _1069 = move _1070;
        StorageDead(_1070);
        _1068 = &_1069;
        _1067 = &(*_1068);
        _1066 = <String as Deref>::deref(move _1067) -> [return: bb459, unwind: bb608];
    }

    bb459: {
        _1065 = &(*_1066);
        StorageDead(_1067);
        _1064 = solana_program::log::sol_log(move _1065) -> [return: bb460, unwind: bb608];
    }

    bb460: {
        StorageDead(_1065);
        drop(_1069) -> [return: bb461, unwind: bb619];
    }

    bb461: {
        StorageDead(_1069);
        StorageDead(_1068);
        StorageDead(_1066);
        StorageDead(_1064);
        StorageLive(_1097);
        _1097 = _1044;
        _1031 = std::result::Result::<(), error::ErrorCode>::Err(move _1097);
        StorageDead(_1097);
        StorageDead(_1044);
        goto -> bb462;
    }

    bb462: {
        StorageDead(_1032);
        _1030 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1031) -> [return: bb463, unwind: bb619];
    }

    bb463: {
        StorageDead(_1031);
        _1098 = discriminant(_1030);
        switchInt(move _1098) -> [0: bb464, 1: bb465, otherwise: bb4];
    }

    bb464: {
        StorageLive(_1102);
        _1102 = ((_1030 as Continue).0: ());
        _1029 = _1102;
        StorageDead(_1102);
        StorageDead(_1030);
        StorageDead(_1029);
        _1022 = const ();
        StorageDead(_1028);
        StorageDead(_1025);
        StorageDead(_1023);
        StorageDead(_1022);
        _645 = const ();
        goto -> bb435;
    }

    bb465: {
        StorageLive(_1099);
        _1099 = ((_1030 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1101);
        _1101 = _1099;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1101) -> [return: bb466, unwind: bb619];
    }

    bb466: {
        StorageDead(_1101);
        StorageDead(_1099);
        StorageDead(_1030);
        StorageDead(_1029);
        StorageDead(_1028);
        StorageDead(_1025);
        StorageDead(_1023);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageDead(_1017);
        goto -> bb575;
    }

    bb467: {
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_660);
        StorageLive(_1103);
        _1103 = _643;
        switchInt(move _1103) -> [0: bb493, otherwise: bb468];
    }

    bb468: {
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        _1106 = &(_646.0: anchor_lang::prelude::Pubkey);
        StorageLive(_1107);
        _1315 = const _;
        _1107 = &(*_1315);
        _1105 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1106, move _1107) -> [return: bb469, unwind: bb619];
    }

    bb469: {
        switchInt(move _1105) -> [0: bb471, otherwise: bb470];
    }

    bb470: {
        StorageDead(_1107);
        StorageDead(_1106);
        StorageDead(_1105);
        StorageDead(_1104);
        StorageDead(_1103);
        StorageDead(_659);
        StorageDead(_658);
        drop(_646) -> [return: bb550, unwind: bb621];
    }

    bb471: {
        StorageDead(_1107);
        StorageDead(_1106);
        _1104 = const ();
        StorageDead(_1105);
        StorageDead(_1104);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        StorageLive(_1114);
        _1114 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1113 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _1114) -> [return: bb472, unwind: bb619];
    }

    bb472: {
        _1112 = &(*_1113);
        StorageDead(_1114);
        _1111 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _1112) -> [return: bb473, unwind: bb619];
    }

    bb473: {
        StorageDead(_1112);
        _1110 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as IntoIterator>::into_iter(move _1111) -> [return: bb474, unwind: bb619];
    }

    bb474: {
        StorageDead(_1111);
        StorageLive(_1115);
        _1115 = move _1110;
        goto -> bb475;
    }

    bb475: {
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        _1119 = &mut _1115;
        _1118 = &mut (*_1119);
        _1117 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::next(move _1118) -> [return: bb476, unwind: bb619];
    }

    bb476: {
        StorageDead(_1118);
        _1120 = discriminant(_1117);
        switchInt(move _1120) -> [0: bb478, 1: bb477, otherwise: bb4];
    }

    bb477: {
        StorageLive(_1122);
        _1122 = ((_1117 as Some).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_1123);
        StorageLive(_1124);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        _1127 = ((*_1122).2: bool);
        _1126 = Eq(move _1127, const false);
        switchInt(move _1126) -> [0: bb480, otherwise: bb479];
    }

    bb478: {
        _658 = const ();
        StorageDead(_1119);
        StorageDead(_1117);
        StorageDead(_1116);
        StorageDead(_1115);
        StorageDead(_1113);
        StorageDead(_1110);
        goto -> bb546;
    }

    bb479: {
        StorageDead(_1127);
        StorageLive(_1128);
        _1128 = ();
        _1125 = std::result::Result::<(), error::ErrorCode>::Ok(move _1128);
        StorageDead(_1128);
        goto -> bb488;
    }

    bb480: {
        StorageDead(_1127);
        StorageLive(_1129);
        _1129 = error::ErrorCode::InvalidSwap;
        StorageLive(_1130);
        StorageLive(_1131);
        StorageLive(_1132);
        StorageLive(_1133);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        _1314 = const _;
        _1140 = &(*_1314);
        _1139 = &(*_1140);
        _1138 = move _1139 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1139);
        StorageLive(_1142);
        StorageLive(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        StorageLive(_1146);
        StorageLive(_1147);
        StorageLive(_1148);
        _1148 = &_1129;
        _1147 = &(*_1148);
        _1146 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1147) -> [return: bb481, unwind: bb619];
    }

    bb481: {
        StorageDead(_1147);
        _1145 = [move _1146];
        StorageDead(_1146);
        _1144 = &_1145;
        _1143 = &(*_1144);
        _1142 = move _1143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1143);
        _1137 = Arguments::<'_>::new_v1(move _1138, move _1142) -> [return: bb482, unwind: bb619];
    }

    bb482: {
        StorageDead(_1142);
        StorageDead(_1138);
        _1136 = format(move _1137) -> [return: bb483, unwind: bb619];
    }

    bb483: {
        StorageDead(_1137);
        StorageDead(_1148);
        StorageDead(_1145);
        StorageDead(_1144);
        StorageDead(_1140);
        _1135 = move _1136;
        StorageDead(_1136);
        _1134 = &_1135;
        _1133 = &(*_1134);
        _1132 = <String as Deref>::deref(move _1133) -> [return: bb484, unwind: bb607];
    }

    bb484: {
        _1131 = &(*_1132);
        StorageDead(_1133);
        _1130 = solana_program::log::sol_log(move _1131) -> [return: bb485, unwind: bb607];
    }

    bb485: {
        StorageDead(_1131);
        drop(_1135) -> [return: bb486, unwind: bb619];
    }

    bb486: {
        StorageDead(_1135);
        StorageDead(_1134);
        StorageDead(_1132);
        StorageDead(_1130);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        _1151 = const "instructions after swap end must not have writable accounts";
        _1150 = &(*_1151);
        _1149 = solana_program::log::sol_log(move _1150) -> [return: bb487, unwind: bb619];
    }

    bb487: {
        StorageDead(_1150);
        StorageDead(_1151);
        StorageDead(_1149);
        StorageLive(_1152);
        _1152 = _1129;
        _1125 = std::result::Result::<(), error::ErrorCode>::Err(move _1152);
        StorageDead(_1152);
        StorageDead(_1129);
        goto -> bb488;
    }

    bb488: {
        StorageDead(_1126);
        _1124 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1125) -> [return: bb489, unwind: bb619];
    }

    bb489: {
        StorageDead(_1125);
        _1153 = discriminant(_1124);
        switchInt(move _1153) -> [0: bb490, 1: bb491, otherwise: bb4];
    }

    bb490: {
        StorageLive(_1157);
        _1157 = ((_1124 as Continue).0: ());
        _1123 = _1157;
        StorageDead(_1157);
        StorageDead(_1124);
        StorageDead(_1123);
        _1116 = const ();
        StorageDead(_1122);
        StorageDead(_1119);
        StorageDead(_1117);
        StorageDead(_1116);
        _645 = const ();
        goto -> bb475;
    }

    bb491: {
        StorageLive(_1154);
        _1154 = ((_1124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1156);
        _1156 = _1154;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1156) -> [return: bb492, unwind: bb619];
    }

    bb492: {
        StorageDead(_1156);
        StorageDead(_1154);
        StorageDead(_1124);
        StorageDead(_1123);
        StorageDead(_1122);
        StorageDead(_1119);
        StorageDead(_1117);
        StorageDead(_1116);
        StorageDead(_1115);
        StorageDead(_1113);
        StorageDead(_1110);
        goto -> bb574;
    }

    bb493: {
        StorageLive(_1158);
        StorageLive(_1159);
        StorageLive(_1160);
        _1161 = SizeOf([anchor_lang::prelude::Pubkey; 5]);
        _1162 = AlignOf([anchor_lang::prelude::Pubkey; 5]);
        _1163 = alloc::alloc::exchange_malloc(move _1161, move _1162) -> [return: bb494, unwind: bb619];
    }

    bb494: {
        StorageLive(_1164);
        _1164 = ShallowInitBox(move _1163, [anchor_lang::prelude::Pubkey; 5]);
        StorageLive(_1165);
        _1165 = serum_program::id() -> [return: bb495, unwind: bb606];
    }

    bb495: {
        StorageLive(_1166);
        _1166 = <AssociatedToken as anchor_lang::Id>::id() -> [return: bb496, unwind: bb606];
    }

    bb496: {
        _1433 = (((_1164.0: std::ptr::Unique<[anchor_lang::prelude::Pubkey; 5]>).0: std::ptr::NonNull<[anchor_lang::prelude::Pubkey; 5]>).0: *const [anchor_lang::prelude::Pubkey; 5]);
        _1434 = _1433 as *const () (PtrToPtr);
        _1435 = _1434 as usize (Transmute);
        _1436 = AlignOf([anchor_lang::prelude::Pubkey; 5]);
        _1437 = Sub(_1436, const 1_usize);
        _1438 = BitAnd(_1435, _1437);
        _1439 = Eq(_1438, const 0_usize);
        assert(_1439, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1436, _1435) -> [success: bb654, unwind unreachable];
    }

    bb497: {
        StorageDead(_1159);
        StorageLive(_1167);
        StorageLive(_1168);
        _1168 = _91;
        switchInt(move _1168) -> [0: bb498, otherwise: bb504];
    }

    bb498: {
        StorageLive(_1169);
        StorageLive(_1170);
        _1170 = &mut _1158;
        StorageLive(_1171);
        _1171 = <Token as anchor_lang::Id>::id() -> [return: bb499, unwind: bb605];
    }

    bb499: {
        _1169 = Vec::<anchor_lang::prelude::Pubkey>::push(move _1170, move _1171) -> [return: bb500, unwind: bb605];
    }

    bb500: {
        StorageDead(_1171);
        StorageDead(_1170);
        StorageDead(_1169);
        StorageLive(_1172);
        StorageLive(_1173);
        _1173 = &mut _1158;
        StorageLive(_1174);
        _1174 = <Token2022 as anchor_lang::Id>::id() -> [return: bb501, unwind: bb605];
    }

    bb501: {
        _1172 = Vec::<anchor_lang::prelude::Pubkey>::push(move _1173, move _1174) -> [return: bb502, unwind: bb605];
    }

    bb502: {
        StorageDead(_1174);
        StorageDead(_1173);
        StorageDead(_1172);
        StorageLive(_1175);
        StorageLive(_1176);
        _1176 = &mut _1158;
        _1175 = Vec::<anchor_lang::prelude::Pubkey>::push(move _1176, const _) -> [return: bb503, unwind: bb605];
    }

    bb503: {
        StorageDead(_1176);
        StorageDead(_1175);
        _1167 = const ();
        goto -> bb505;
    }

    bb504: {
        _1167 = const ();
        goto -> bb505;
    }

    bb505: {
        StorageDead(_1168);
        StorageDead(_1167);
        StorageLive(_1177);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        StorageLive(_1181);
        StorageLive(_1182);
        StorageLive(_1183);
        _1183 = &_1158;
        _1182 = <Vec<anchor_lang::prelude::Pubkey> as Deref>::deref(move _1183) -> [return: bb506, unwind: bb605];
    }

    bb506: {
        _1181 = &(*_1182);
        StorageDead(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        _1185 = &(_646.0: anchor_lang::prelude::Pubkey);
        _1184 = &(*_1185);
        _1180 = core::slice::<impl [anchor_lang::prelude::Pubkey]>::contains(move _1181, move _1184) -> [return: bb507, unwind: bb605];
    }

    bb507: {
        switchInt(move _1180) -> [0: bb509, otherwise: bb508];
    }

    bb508: {
        StorageDead(_1185);
        StorageDead(_1184);
        StorageDead(_1182);
        StorageDead(_1181);
        StorageLive(_1186);
        _1186 = ();
        _1179 = std::result::Result::<(), error::ErrorCode>::Ok(move _1186);
        StorageDead(_1186);
        goto -> bb517;
    }

    bb509: {
        StorageDead(_1185);
        StorageDead(_1184);
        StorageDead(_1182);
        StorageDead(_1181);
        StorageLive(_1187);
        _1187 = error::ErrorCode::InvalidSwap;
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        StorageLive(_1192);
        StorageLive(_1193);
        StorageLive(_1194);
        StorageLive(_1195);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        _1317 = const _;
        _1198 = &(*_1317);
        _1197 = &(*_1198);
        _1196 = move _1197 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1197);
        StorageLive(_1200);
        StorageLive(_1201);
        StorageLive(_1202);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        StorageLive(_1206);
        _1206 = &_1187;
        _1205 = &(*_1206);
        _1204 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1205) -> [return: bb510, unwind: bb605];
    }

    bb510: {
        StorageDead(_1205);
        _1203 = [move _1204];
        StorageDead(_1204);
        _1202 = &_1203;
        _1201 = &(*_1202);
        _1200 = move _1201 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1201);
        _1195 = Arguments::<'_>::new_v1(move _1196, move _1200) -> [return: bb511, unwind: bb605];
    }

    bb511: {
        StorageDead(_1200);
        StorageDead(_1196);
        _1194 = format(move _1195) -> [return: bb512, unwind: bb605];
    }

    bb512: {
        StorageDead(_1195);
        StorageDead(_1206);
        StorageDead(_1203);
        StorageDead(_1202);
        StorageDead(_1198);
        _1193 = move _1194;
        StorageDead(_1194);
        _1192 = &_1193;
        _1191 = &(*_1192);
        _1190 = <String as Deref>::deref(move _1191) -> [return: bb513, unwind: bb604];
    }

    bb513: {
        _1189 = &(*_1190);
        StorageDead(_1191);
        _1188 = solana_program::log::sol_log(move _1189) -> [return: bb514, unwind: bb604];
    }

    bb514: {
        StorageDead(_1189);
        drop(_1193) -> [return: bb515, unwind: bb605];
    }

    bb515: {
        StorageDead(_1193);
        StorageDead(_1192);
        StorageDead(_1190);
        StorageDead(_1188);
        StorageLive(_1207);
        StorageLive(_1208);
        StorageLive(_1209);
        _1209 = const "only allowed to pass in ixs to token, openbook, and Jupiter v3/v4/v6 programs";
        _1208 = &(*_1209);
        _1207 = solana_program::log::sol_log(move _1208) -> [return: bb516, unwind: bb605];
    }

    bb516: {
        StorageDead(_1208);
        StorageDead(_1209);
        StorageDead(_1207);
        StorageLive(_1210);
        _1210 = _1187;
        _1179 = std::result::Result::<(), error::ErrorCode>::Err(move _1210);
        StorageDead(_1210);
        StorageDead(_1187);
        goto -> bb517;
    }

    bb517: {
        StorageDead(_1180);
        _1178 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1179) -> [return: bb518, unwind: bb605];
    }

    bb518: {
        StorageDead(_1179);
        _1211 = discriminant(_1178);
        switchInt(move _1211) -> [0: bb519, 1: bb520, otherwise: bb4];
    }

    bb519: {
        StorageLive(_1215);
        _1215 = ((_1178 as Continue).0: ());
        _1177 = _1215;
        StorageDead(_1215);
        StorageDead(_1178);
        StorageDead(_1177);
        StorageLive(_1216);
        StorageLive(_1217);
        StorageLive(_1218);
        StorageLive(_1219);
        StorageLive(_1220);
        _1220 = &(_646.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _1219 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _1220) -> [return: bb522, unwind: bb605];
    }

    bb520: {
        StorageLive(_1212);
        _1212 = ((_1178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1214);
        _1214 = _1212;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1214) -> [return: bb521, unwind: bb605];
    }

    bb521: {
        StorageDead(_1214);
        StorageDead(_1212);
        StorageDead(_1178);
        StorageDead(_1177);
        goto -> bb572;
    }

    bb522: {
        _1218 = &(*_1219);
        StorageDead(_1220);
        _1217 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _1218) -> [return: bb523, unwind: bb605];
    }

    bb523: {
        StorageDead(_1218);
        _1216 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as IntoIterator>::into_iter(move _1217) -> [return: bb524, unwind: bb605];
    }

    bb524: {
        StorageDead(_1217);
        StorageLive(_1221);
        _1221 = move _1216;
        goto -> bb525;
    }

    bb525: {
        StorageLive(_1222);
        StorageLive(_1223);
        StorageLive(_1224);
        StorageLive(_1225);
        _1225 = &mut _1221;
        _1224 = &mut (*_1225);
        _1223 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::next(move _1224) -> [return: bb526, unwind: bb605];
    }

    bb526: {
        StorageDead(_1224);
        _1226 = discriminant(_1223);
        switchInt(move _1226) -> [0: bb528, 1: bb527, otherwise: bb4];
    }

    bb527: {
        StorageLive(_1228);
        _1228 = ((_1223 as Some).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_1229);
        StorageLive(_1230);
        StorageLive(_1231);
        StorageLive(_1232);
        StorageLive(_1233);
        _1233 = &((*_1228).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1234);
        StorageLive(_1235);
        _1235 = id() -> [return: bb529, unwind: bb605];
    }

    bb528: {
        _658 = const ();
        StorageDead(_1225);
        StorageDead(_1223);
        StorageDead(_1222);
        StorageDead(_1221);
        StorageDead(_1219);
        StorageDead(_1216);
        drop(_1158) -> [return: bb545, unwind: bb619];
    }

    bb529: {
        _1234 = &_1235;
        _1232 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1233, move _1234) -> [return: bb530, unwind: bb605];
    }

    bb530: {
        switchInt(move _1232) -> [0: bb532, otherwise: bb531];
    }

    bb531: {
        StorageDead(_1235);
        StorageDead(_1234);
        StorageDead(_1233);
        StorageLive(_1236);
        _1236 = ();
        _1231 = std::result::Result::<(), error::ErrorCode>::Ok(move _1236);
        StorageDead(_1236);
        goto -> bb540;
    }

    bb532: {
        StorageDead(_1235);
        StorageDead(_1234);
        StorageDead(_1233);
        StorageLive(_1237);
        _1237 = error::ErrorCode::InvalidSwap;
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        _1316 = const _;
        _1248 = &(*_1316);
        _1247 = &(*_1248);
        _1246 = move _1247 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1247);
        StorageLive(_1250);
        StorageLive(_1251);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        _1256 = &_1237;
        _1255 = &(*_1256);
        _1254 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1255) -> [return: bb533, unwind: bb605];
    }

    bb533: {
        StorageDead(_1255);
        _1253 = [move _1254];
        StorageDead(_1254);
        _1252 = &_1253;
        _1251 = &(*_1252);
        _1250 = move _1251 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1251);
        _1245 = Arguments::<'_>::new_v1(move _1246, move _1250) -> [return: bb534, unwind: bb605];
    }

    bb534: {
        StorageDead(_1250);
        StorageDead(_1246);
        _1244 = format(move _1245) -> [return: bb535, unwind: bb605];
    }

    bb535: {
        StorageDead(_1245);
        StorageDead(_1256);
        StorageDead(_1253);
        StorageDead(_1252);
        StorageDead(_1248);
        _1243 = move _1244;
        StorageDead(_1244);
        _1242 = &_1243;
        _1241 = &(*_1242);
        _1240 = <String as Deref>::deref(move _1241) -> [return: bb536, unwind: bb603];
    }

    bb536: {
        _1239 = &(*_1240);
        StorageDead(_1241);
        _1238 = solana_program::log::sol_log(move _1239) -> [return: bb537, unwind: bb603];
    }

    bb537: {
        StorageDead(_1239);
        drop(_1243) -> [return: bb538, unwind: bb605];
    }

    bb538: {
        StorageDead(_1243);
        StorageDead(_1242);
        StorageDead(_1240);
        StorageDead(_1238);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        _1259 = const "instructions between begin and end must not be drift instructions";
        _1258 = &(*_1259);
        _1257 = solana_program::log::sol_log(move _1258) -> [return: bb539, unwind: bb605];
    }

    bb539: {
        StorageDead(_1258);
        StorageDead(_1259);
        StorageDead(_1257);
        StorageLive(_1260);
        _1260 = _1237;
        _1231 = std::result::Result::<(), error::ErrorCode>::Err(move _1260);
        StorageDead(_1260);
        StorageDead(_1237);
        goto -> bb540;
    }

    bb540: {
        StorageDead(_1232);
        _1230 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1231) -> [return: bb541, unwind: bb605];
    }

    bb541: {
        StorageDead(_1231);
        _1261 = discriminant(_1230);
        switchInt(move _1261) -> [0: bb542, 1: bb543, otherwise: bb4];
    }

    bb542: {
        StorageLive(_1265);
        _1265 = ((_1230 as Continue).0: ());
        _1229 = _1265;
        StorageDead(_1265);
        StorageDead(_1230);
        StorageDead(_1229);
        _1222 = const ();
        StorageDead(_1228);
        StorageDead(_1225);
        StorageDead(_1223);
        StorageDead(_1222);
        _645 = const ();
        goto -> bb525;
    }

    bb543: {
        StorageLive(_1262);
        _1262 = ((_1230 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1264);
        _1264 = _1262;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1264) -> [return: bb544, unwind: bb605];
    }

    bb544: {
        StorageDead(_1264);
        StorageDead(_1262);
        StorageDead(_1230);
        StorageDead(_1229);
        StorageDead(_1228);
        StorageDead(_1225);
        StorageDead(_1223);
        StorageDead(_1222);
        StorageDead(_1221);
        StorageDead(_1219);
        StorageDead(_1216);
        goto -> bb572;
    }

    bb545: {
        StorageDead(_1158);
        goto -> bb546;
    }

    bb546: {
        StorageDead(_1103);
        goto -> bb547;
    }

    bb547: {
        StorageDead(_659);
        StorageDead(_658);
        _1266 = CheckedAdd(_640, const 1_usize);
        assert(!move (_1266.1: bool), "attempt to compute `{} + {}`, which would overflow", _640, const 1_usize) -> [success: bb548, unwind: bb619];
    }

    bb548: {
        _640 = move (_1266.0: usize);
        _645 = const ();
        drop(_646) -> [return: bb549, unwind: bb621];
    }

    bb549: {
        StorageDead(_646);
        goto -> bb273;
    }

    bb550: {
        StorageDead(_646);
        goto -> bb273;
    }

    bb551: {
        StorageLive(_1271);
        _1271 = ();
        _1269 = std::result::Result::<(), error::ErrorCode>::Ok(move _1271);
        StorageDead(_1271);
        goto -> bb560;
    }

    bb552: {
        StorageLive(_1272);
        _1272 = error::ErrorCode::InvalidSwap;
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        StorageLive(_1277);
        StorageLive(_1278);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        _1302 = const _;
        _1283 = &(*_1302);
        _1282 = &(*_1283);
        _1281 = move _1282 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1282);
        StorageLive(_1285);
        StorageLive(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        StorageLive(_1289);
        StorageLive(_1290);
        StorageLive(_1291);
        _1291 = &_1272;
        _1290 = &(*_1291);
        _1289 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1290) -> [return: bb553, unwind: bb621];
    }

    bb553: {
        StorageDead(_1290);
        _1288 = [move _1289];
        StorageDead(_1289);
        _1287 = &_1288;
        _1286 = &(*_1287);
        _1285 = move _1286 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1286);
        _1280 = Arguments::<'_>::new_v1(move _1281, move _1285) -> [return: bb554, unwind: bb621];
    }

    bb554: {
        StorageDead(_1285);
        StorageDead(_1281);
        _1279 = format(move _1280) -> [return: bb555, unwind: bb621];
    }

    bb555: {
        StorageDead(_1280);
        StorageDead(_1291);
        StorageDead(_1288);
        StorageDead(_1287);
        StorageDead(_1283);
        _1278 = move _1279;
        StorageDead(_1279);
        _1277 = &_1278;
        _1276 = &(*_1277);
        _1275 = <String as Deref>::deref(move _1276) -> [return: bb556, unwind: bb602];
    }

    bb556: {
        _1274 = &(*_1275);
        StorageDead(_1276);
        _1273 = solana_program::log::sol_log(move _1274) -> [return: bb557, unwind: bb602];
    }

    bb557: {
        StorageDead(_1274);
        drop(_1278) -> [return: bb558, unwind: bb621];
    }

    bb558: {
        StorageDead(_1278);
        StorageDead(_1277);
        StorageDead(_1275);
        StorageDead(_1273);
        StorageLive(_1292);
        StorageLive(_1293);
        StorageLive(_1294);
        _1294 = const "found no SwapEnd instruction in transaction";
        _1293 = &(*_1294);
        _1292 = solana_program::log::sol_log(move _1293) -> [return: bb559, unwind: bb621];
    }

    bb559: {
        StorageDead(_1293);
        StorageDead(_1294);
        StorageDead(_1292);
        StorageLive(_1295);
        _1295 = _1272;
        _1269 = std::result::Result::<(), error::ErrorCode>::Err(move _1295);
        StorageDead(_1295);
        StorageDead(_1272);
        goto -> bb560;
    }

    bb560: {
        StorageDead(_1270);
        _1268 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1269) -> [return: bb561, unwind: bb621];
    }

    bb561: {
        StorageDead(_1269);
        _1296 = discriminant(_1268);
        switchInt(move _1296) -> [0: bb562, 1: bb563, otherwise: bb4];
    }

    bb562: {
        StorageLive(_1300);
        _1300 = ((_1268 as Continue).0: ());
        _1267 = _1300;
        StorageDead(_1300);
        StorageDead(_1268);
        StorageDead(_1267);
        StorageLive(_1301);
        _1301 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1301);
        StorageDead(_1301);
        StorageDead(_643);
        StorageDead(_640);
        drop(_594) -> [return: bb565, unwind: bb628];
    }

    bb563: {
        StorageLive(_1297);
        _1297 = ((_1268 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1299);
        _1299 = _1297;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1299) -> [return: bb564, unwind: bb621];
    }

    bb564: {
        StorageDead(_1299);
        StorageDead(_1297);
        StorageDead(_1268);
        StorageDead(_1267);
        goto -> bb578;
    }

    bb565: {
        StorageDead(_594);
        StorageDead(_584);
        StorageDead(_582);
        StorageDead(_552);
        StorageDead(_541);
        StorageDead(_540);
        StorageDead(_439);
        StorageDead(_342);
        StorageDead(_303);
        StorageDead(_299);
        drop(_288) -> [return: bb566, unwind: bb632];
    }

    bb566: {
        StorageDead(_288);
        StorageDead(_258);
        drop(_153) -> [return: bb567, unwind: bb634];
    }

    bb567: {
        StorageDead(_153);
        StorageDead(_91);
        drop(_79) -> [return: bb568, unwind: bb636];
    }

    bb568: {
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_61);
        drop(_31) -> [return: bb569, unwind: bb637];
    }

    bb569: {
        StorageDead(_31);
        drop(_30) -> [return: bb570, unwind: bb638];
    }

    bb570: {
        StorageDead(_30);
        drop(_29) -> [return: bb571, unwind: bb641];
    }

    bb571: {
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb601;
    }

    bb572: {
        drop(_1158) -> [return: bb573, unwind: bb619];
    }

    bb573: {
        StorageDead(_1158);
        goto -> bb574;
    }

    bb574: {
        StorageDead(_1103);
        goto -> bb576;
    }

    bb575: {
        StorageDead(_697);
        goto -> bb576;
    }

    bb576: {
        StorageDead(_659);
        StorageDead(_658);
        drop(_646) -> [return: bb577, unwind: bb621];
    }

    bb577: {
        StorageDead(_646);
        StorageDead(_644);
        goto -> bb578;
    }

    bb578: {
        StorageDead(_643);
        StorageDead(_640);
        goto -> bb579;
    }

    bb579: {
        drop(_594) -> [return: bb580, unwind: bb628];
    }

    bb580: {
        StorageDead(_594);
        goto -> bb581;
    }

    bb581: {
        StorageDead(_584);
        StorageDead(_582);
        goto -> bb582;
    }

    bb582: {
        StorageDead(_552);
        StorageDead(_541);
        StorageDead(_540);
        goto -> bb583;
    }

    bb583: {
        StorageDead(_439);
        goto -> bb584;
    }

    bb584: {
        StorageDead(_342);
        goto -> bb585;
    }

    bb585: {
        StorageDead(_303);
        StorageDead(_299);
        drop(_288) -> [return: bb586, unwind: bb632];
    }

    bb586: {
        StorageDead(_288);
        goto -> bb587;
    }

    bb587: {
        StorageDead(_258);
        goto -> bb588;
    }

    bb588: {
        drop(_153) -> [return: bb589, unwind: bb634];
    }

    bb589: {
        StorageDead(_153);
        goto -> bb590;
    }

    bb590: {
        StorageDead(_91);
        drop(_79) -> [return: bb591, unwind: bb636];
    }

    bb591: {
        StorageDead(_79);
        goto -> bb592;
    }

    bb592: {
        StorageDead(_70);
        goto -> bb593;
    }

    bb593: {
        StorageDead(_61);
        drop(_31) -> [return: bb594, unwind: bb637];
    }

    bb594: {
        StorageDead(_31);
        drop(_30) -> [return: bb595, unwind: bb638];
    }

    bb595: {
        StorageDead(_30);
        drop(_29) -> [return: bb596, unwind: bb641];
    }

    bb596: {
        StorageDead(_29);
        goto -> bb599;
    }

    bb597: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_38) -> [return: bb598, unwind: bb641];
    }

    bb598: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb599;
    }

    bb599: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb600;
    }

    bb600: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb601;
    }

    bb601: {
        return;
    }

    bb602 (cleanup): {
        drop(_1278) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb603 (cleanup): {
        drop(_1243) -> [return: bb605, unwind terminate(cleanup)];
    }

    bb604 (cleanup): {
        drop(_1193) -> [return: bb605, unwind terminate(cleanup)];
    }

    bb605 (cleanup): {
        drop(_1158) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb606 (cleanup): {
        drop(_1164) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb607 (cleanup): {
        drop(_1135) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb608 (cleanup): {
        drop(_1069) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb609 (cleanup): {
        drop(_1050) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb610 (cleanup): {
        drop(_994) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb611 (cleanup): {
        drop(_954) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb612 (cleanup): {
        drop(_914) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb613 (cleanup): {
        drop(_874) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb614 (cleanup): {
        drop(_834) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb615 (cleanup): {
        drop(_794) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb616 (cleanup): {
        drop(_754) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb617 (cleanup): {
        drop(_714) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb618 (cleanup): {
        drop(_674) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb619 (cleanup): {
        drop(_646) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb620 (cleanup): {
        drop(_617) -> [return: bb621, unwind terminate(cleanup)];
    }

    bb621 (cleanup): {
        drop(_594) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb622 (cleanup): {
        drop(_517) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb623 (cleanup): {
        drop(_482) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb624 (cleanup): {
        drop(_416) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb625 (cleanup): {
        drop(_378) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb626 (cleanup): {
        drop(_359) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb627 (cleanup): {
        drop(_319) -> [return: bb628, unwind terminate(cleanup)];
    }

    bb628 (cleanup): {
        drop(_288) -> [return: bb632, unwind terminate(cleanup)];
    }

    bb629 (cleanup): {
        drop(_235) -> [return: bb632, unwind terminate(cleanup)];
    }

    bb630 (cleanup): {
        drop(_197) -> [return: bb632, unwind terminate(cleanup)];
    }

    bb631 (cleanup): {
        drop(_178) -> [return: bb632, unwind terminate(cleanup)];
    }

    bb632 (cleanup): {
        drop(_153) -> [return: bb634, unwind terminate(cleanup)];
    }

    bb633 (cleanup): {
        drop(_112) -> [return: bb634, unwind terminate(cleanup)];
    }

    bb634 (cleanup): {
        drop(_79) -> [return: bb636, unwind terminate(cleanup)];
    }

    bb635 (cleanup): {
        drop(_38) -> [return: bb636, unwind terminate(cleanup)];
    }

    bb636 (cleanup): {
        drop(_31) -> [return: bb637, unwind terminate(cleanup)];
    }

    bb637 (cleanup): {
        drop(_30) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb638 (cleanup): {
        drop(_29) -> [return: bb641, unwind terminate(cleanup)];
    }

    bb639 (cleanup): {
        drop(_41) -> [return: bb640, unwind terminate(cleanup)];
    }

    bb640 (cleanup): {
        drop(_38) -> [return: bb641, unwind terminate(cleanup)];
    }

    bb641 (cleanup): {
        resume;
    }

    bb642: {
        StorageDead(_647);
        StorageDead(_646);
        StorageDead(_644);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        _1270 = _643;
        switchInt(move _1270) -> [0: bb552, otherwise: bb551];
    }

    bb643: {
        drop(((_647 as Err).0: anchor_lang::prelude::ProgramError)) -> [return: bb642, unwind: bb621];
    }

    bb644 (cleanup): {
        _1409 = discriminant(_647);
        goto -> bb621;
    }

    bb645 (cleanup): {
        _1410 = discriminant(_595);
        goto -> bb628;
    }

    bb646 (cleanup): {
        _1411 = discriminant(_586);
        goto -> bb628;
    }

    bb647 (cleanup): {
        _1412 = discriminant(_561);
        goto -> bb628;
    }

    bb648 (cleanup): {
        _1413 = discriminant(_289);
        goto -> bb632;
    }

    bb649 (cleanup): {
        _1414 = discriminant(_154);
        goto -> bb634;
    }

    bb650 (cleanup): {
        _1415 = discriminant(_80);
        goto -> bb636;
    }

    bb651 (cleanup): {
        _1417 = discriminant(_33);
        goto -> bb639;
    }

    bb652 (cleanup): {
        _1418 = discriminant(_17);
        goto -> bb641;
    }

    bb653 (cleanup): {
        _1419 = discriminant(_6);
        goto -> bb641;
    }

    bb654: {
        (*_1433) = [move _1165, move _1166, const _, const _, const _];
        StorageDead(_1166);
        StorageDead(_1165);
        _1160 = move _1164;
        _1159 = move _1160 as std::boxed::Box<[anchor_lang::prelude::Pubkey]> (PointerCoercion(Unsize));
        StorageDead(_1164);
        StorageDead(_1160);
        _1158 = std::slice::<impl [anchor_lang::prelude::Pubkey]>::into_vec::<std::alloc::Global>(move _1159) -> [return: bb497, unwind: bb619];
    }

    bb655: {
        (*_1421) = [move _49, move _50];
        StorageDead(_50);
        StorageDead(_49);
        _44 = move _48;
        _43 = move _44 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_48);
        StorageDead(_44);
        _42 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _43) -> [return: bb16, unwind: bb640];
    }
}
