// MIR for `calculate_funding_rate_long_short` after PreCodegen

fn calculate_funding_rate_long_short(_1: &mut PerpMarket, _2: i128) -> std::result::Result<(i128, i128, i128), error::ErrorCode> {
    debug market => _1;
    debug funding_rate => _2;
    let mut _0: std::result::Result<(i128, i128, i128), error::ErrorCode>;
    let _3: i128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _6: std::result::Result<i128, error::ErrorCode>;
    let mut _7: i128;
    let mut _8: i128;
    let mut _9: isize;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: i128;
    let mut _16: bool;
    let _17: ();
    let mut _18: bool;
    let mut _19: i128;
    let mut _20: !;
    let mut _21: i128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: i128;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: i64;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _33: std::result::Result<i64, error::ErrorCode>;
    let mut _34: i64;
    let mut _35: i64;
    let mut _36: i128;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: (i128, i128, i128);
    let mut _43: i128;
    let mut _44: i128;
    let mut _45: i128;
    let mut _48: (i128, i128);
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _50: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _51: &state::perp_market::PerpMarket;
    let mut _52: i128;
    let mut _53: i128;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _61: std::result::Result<i128, error::ErrorCode>;
    let mut _62: i128;
    let mut _63: i128;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _69: ();
    let mut _70: bool;
    let mut _71: i128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _74: std::result::Result<i128, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _77: std::result::Result<u128, error::ErrorCode>;
    let mut _78: &state::perp_market::PerpMarket;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: bool;
    let mut _90: i128;
    let mut _91: i128;
    let mut _92: !;
    let _93: ();
    let mut _94: &str;
    let _95: &str;
    let mut _96: &std::string::String;
    let _97: &std::string::String;
    let _98: std::string::String;
    let mut _100: std::fmt::Arguments<'_>;
    let mut _101: &[&str];
    let mut _102: &[&str; 2];
    let _103: &[&str; 2];
    let _104: [&str; 2];
    let mut _105: &[core::fmt::rt::Argument<'_>];
    let mut _106: &[core::fmt::rt::Argument<'_>; 2];
    let _107: &[core::fmt::rt::Argument<'_>; 2];
    let _108: [core::fmt::rt::Argument<'_>; 2];
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &i128;
    let _111: &i128;
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &i128;
    let _114: &i128;
    let mut _115: error::ErrorCode;
    let mut _116: i128;
    let mut _117: i64;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _119: std::result::Result<i64, error::ErrorCode>;
    let mut _120: i64;
    let mut _121: i64;
    let mut _122: u128;
    let mut _123: i128;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: bool;
    let mut _131: i128;
    let mut _133: bool;
    let mut _134: i128;
    let mut _135: (i128, i128, i128);
    let mut _136: i128;
    let mut _137: i128;
    let mut _138: i128;
    scope 1 {
        debug settled_net_market_position => _3;
        let _4: i128;
        let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _13: i128;
        scope 2 {
            debug net_market_position_funding_payment => _4;
            let _14: i128;
            scope 7 {
                debug uncapped_funding_pnl => _14;
                let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _30: i128;
                let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _41: i64;
                let _46: i128;
                let _47: i128;
                let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _58: (i128, i128);
                scope 8 {
                    debug residual => _27;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _30;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug residual => _38;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _41;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug capped_funding_rate => _46;
                    debug capped_funding_pnl => _47;
                    let _59: i128;
                    let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _68: i128;
                    scope 21 {
                        debug new_total_fee_minus_distributions => _59;
                        let _72: i128;
                        let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _83: u128;
                        let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _88: i128;
                        let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _128: i64;
                        let _129: i128;
                        scope 26 {
                            debug total_fee_minus_distributions_lower_bound => _72;
                            let _99: std::string::String;
                            let mut _139: &[&str; 2];
                            scope 35 {
                                debug res => _99;
                            }
                        }
                        scope 27 {
                            debug residual => _80;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _83;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug residual => _85;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _88;
                            scope 34 {
                            }
                        }
                        scope 36 {
                            debug residual => _125;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug val => _128;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug funding_rate_long => _129;
                            let _132: i128;
                            scope 41 {
                                debug funding_rate_short => _132;
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _65;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _68;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _55;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _58;
                    scope 20 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _13;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        StorageLive(_8);
        _8 = _3;
        _6 = calculate_funding_payment_in_quote_precision(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: i128);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _4;
        _16 = Eq(_15, const i128::MIN);
        assert(!move _16, "attempt to negate `{}`, which would overflow", _15) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb69;
    }

    bb7: {
        _14 = Neg(move _15);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _14;
        _18 = Ge(move _19, const 0_i128);
        switchInt(move _18) -> [0: bb19, otherwise: bb8];
    }

    bb8: {
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_25);
        _25 = _14;
        _23 = <i128 as SafeMath>::safe_add(move _24, move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: i128);
        _21 = _30;
        StorageDead(_30);
        (((*_1).1: state::perp_market::AMM).31: i128) = move _21;
        StorageDead(_21);
        StorageDead(_22);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _14;
        _35 = move _36 as i64 (IntToInt);
        StorageDead(_36);
        _33 = <i64 as SafeMath>::safe_add(move _34, move _35) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_22);
        goto -> bb67;
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        _37 = discriminant(_32);
        switchInt(move _37) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_32 as Continue).0: i64);
        _31 = _41;
        StorageDead(_41);
        (((*_1).1: state::perp_market::AMM).49: i64) = move _31;
        StorageDead(_31);
        StorageDead(_32);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _2;
        StorageLive(_44);
        _44 = _2;
        StorageLive(_45);
        _45 = _14;
        _42 = (move _43, move _44, move _45);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        _0 = std::result::Result::<(i128, i128, i128), error::ErrorCode>::Ok(move _42);
        StorageDead(_42);
        goto -> bb67;
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_31);
        StorageDead(_32);
        goto -> bb67;
    }

    bb19: {
        StorageDead(_19);
        _17 = const ();
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_1);
        StorageLive(_52);
        _52 = _14;
        StorageLive(_53);
        _53 = _2;
        _50 = calculate_capped_funding_rate(move _51, move _52, move _53) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _50) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_50);
        _54 = discriminant(_49);
        switchInt(move _54) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_58);
        _58 = ((_49 as Continue).0: (i128, i128));
        _48 = _58;
        StorageDead(_58);
        StorageLive(_46);
        _46 = (_48.0: i128);
        StorageLive(_47);
        _47 = (_48.1: i128);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_63);
        _63 = _47;
        _61 = <i128 as SafeMath>::safe_add(move _62, move _63) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_55);
        _55 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb68;
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _61) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: i128);
        _59 = _68;
        StorageDead(_68);
        StorageDead(_60);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _47;
        _70 = Ne(move _71, const 0_i128);
        switchInt(move _70) -> [0: bb31, otherwise: bb30];
    }

    bb28: {
        StorageLive(_65);
        _65 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        goto -> bb66;
    }

    bb30: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_1);
        _77 = get_total_fee_lower_bound(move _78) -> [return: bb32, unwind continue];
    }

    bb31: {
        StorageDead(_71);
        _69 = const ();
        goto -> bb51;
    }

    bb32: {
        StorageDead(_78);
        _76 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _77) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u128);
        _75 = _83;
        StorageDead(_83);
        _74 = <u128 as Cast>::cast::<i128>(move _75) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_80);
        _80 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb64;
    }

    bb37: {
        StorageDead(_75);
        _73 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_74);
        _84 = discriminant(_73);
        switchInt(move _84) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_88);
        _88 = ((_73 as Continue).0: i128);
        _72 = _88;
        StorageDead(_88);
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _59;
        StorageLive(_91);
        _91 = _72;
        _89 = Lt(move _90, move _91);
        switchInt(move _89) -> [0: bb43, otherwise: bb42];
    }

    bb40: {
        StorageLive(_85);
        _85 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_87);
        StorageDead(_85);
        goto -> bb64;
    }

    bb42: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _139 = const _;
        _103 = &(*_139);
        _102 = &(*_103);
        _101 = move _102 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_59;
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _110) -> [return: bb44, unwind continue];
    }

    bb43: {
        StorageDead(_91);
        StorageDead(_90);
        _69 = const ();
        StorageDead(_89);
        StorageDead(_72);
        goto -> bb51;
    }

    bb44: {
        StorageDead(_110);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_72;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _113) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_113);
        _108 = [move _109, move _112];
        StorageDead(_112);
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = move _106 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_106);
        _100 = Arguments::<'_>::new_v1(move _101, move _105) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_105);
        StorageDead(_101);
        _99 = format(move _100) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_103);
        _98 = move _99;
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = <String as Deref>::deref(move _96) -> [return: bb48, unwind: bb71];
    }

    bb48: {
        _94 = &(*_95);
        StorageDead(_96);
        _93 = solana_program::log::sol_log(move _94) -> [return: bb49, unwind: bb71];
    }

    bb49: {
        StorageDead(_94);
        drop(_98) -> [return: bb50, unwind: bb72];
    }

    bb50: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_115);
        _115 = error::ErrorCode::InvalidFundingProfitability;
        _0 = std::result::Result::<(i128, i128, i128), error::ErrorCode>::Err(move _115);
        StorageDead(_115);
        StorageDead(_89);
        goto -> bb65;
    }

    bb51: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_116);
        _116 = _59;
        (((*_1).1: state::perp_market::AMM).31: i128) = move _116;
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _47;
        _122 = core::num::<impl i128>::unsigned_abs(move _123) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_123);
        _121 = move _122 as i64 (IntToInt);
        StorageDead(_122);
        _119 = <i64 as SafeMath>::safe_sub(move _120, move _121) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _119) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_119);
        _124 = discriminant(_118);
        switchInt(move _124) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_128);
        _128 = ((_118 as Continue).0: i64);
        _117 = _128;
        StorageDead(_128);
        (((*_1).1: state::perp_market::AMM).49: i64) = move _117;
        StorageDead(_117);
        StorageDead(_118);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _2;
        _130 = Lt(move _131, const 0_i128);
        switchInt(move _130) -> [0: bb59, otherwise: bb58];
    }

    bb56: {
        StorageLive(_125);
        _125 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_117);
        StorageDead(_118);
        goto -> bb66;
    }

    bb58: {
        StorageDead(_131);
        _129 = _46;
        goto -> bb60;
    }

    bb59: {
        StorageDead(_131);
        _129 = _2;
        goto -> bb60;
    }

    bb60: {
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _2;
        _133 = Gt(move _134, const 0_i128);
        switchInt(move _133) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_134);
        _132 = _46;
        goto -> bb63;
    }

    bb62: {
        StorageDead(_134);
        _132 = _2;
        goto -> bb63;
    }

    bb63: {
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        _136 = _129;
        StorageLive(_137);
        _137 = _132;
        StorageLive(_138);
        _138 = _14;
        _135 = (move _136, move _137, move _138);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        _0 = std::result::Result::<(i128, i128, i128), error::ErrorCode>::Ok(move _135);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_59);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_14);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb70;
    }

    bb64: {
        StorageDead(_76);
        StorageDead(_73);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_59);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb68;
    }

    bb67: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_14);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb70;
    }

    bb70: {
        return;
    }

    bb71 (cleanup): {
        drop(_98) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        resume;
    }
}
