// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:924:1: 924:33>::decrease_balance` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:924:1: 924:33>::decrease_balance(_1: &mut PoolBalance, _2: u128) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug delta => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: u128;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: u128;
    let mut _13: ();
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: u128);
        StorageLive(_7);
        _7 = _2;
        _5 = <u128 as SafeMath>::safe_sub(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: u128);
        _3 = _12;
        StorageDead(_12);
        ((*_1).0: u128) = move _3;
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_13);
        _13 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_3);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
