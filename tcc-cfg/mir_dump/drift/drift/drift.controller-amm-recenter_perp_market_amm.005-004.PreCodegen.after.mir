// MIR for `controller::amm::recenter_perp_market_amm` after PreCodegen

fn controller::amm::recenter_perp_market_amm(_1: &mut PerpMarket, _2: u128, _3: u128) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    debug peg_multiplier => _2;
    debug sqrt_k => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: controller::amm::SwapDirection;
    let mut _5: bool;
    let mut _6: i128;
    let mut _9: (u128, u128);
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _11: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _12: u128;
    let mut _13: i128;
    let mut _14: u128;
    let mut _15: controller::amm::SwapDirection;
    let mut _16: u128;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U256>;
    let mut _25: std::result::Result<math::bn::U256, error::ErrorCode>;
    let mut _26: math::bn::U256;
    let mut _27: u128;
    let mut _28: math::bn::U256;
    let mut _29: u128;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: math::bn::U256;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U256>;
    let mut _40: std::result::Result<math::bn::U256, error::ErrorCode>;
    let mut _41: math::bn::U256;
    let mut _42: math::bn::U256;
    let mut _43: u128;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _56: std::result::Result<(), error::ErrorCode>;
    let mut _57: bool;
    let mut _58: i128;
    let mut _59: i128;
    let mut _60: i128;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _62: std::result::Result<i128, error::ErrorCode>;
    let mut _63: u128;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: i128;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _71: std::result::Result<i128, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: (i128, bool);
    let mut _79: ();
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &error::ErrorCode;
    let _99: &error::ErrorCode;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: error::ErrorCode;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: u128;
    let mut _110: u128;
    let mut _113: (u64, u128, u128);
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u128, u128)>;
    let mut _115: std::result::Result<(u64, u128, u128), error::ErrorCode>;
    let mut _116: &state::perp_market::AMM;
    let _117: &state::perp_market::AMM;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _123: u128;
    let mut _126: (u128, u128);
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _128: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _129: u128;
    let mut _130: u128;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: u128;
    let mut _137: u128;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _140: std::result::Result<u64, error::ErrorCode>;
    let mut _141: &state::perp_market::AMM;
    let mut _142: isize;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _147: (u32, u32);
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u32, u32)>;
    let mut _149: std::result::Result<(u32, u32), error::ErrorCode>;
    let mut _150: &mut state::perp_market::PerpMarket;
    let mut _151: u64;
    let mut _152: std::option::Option<u64>;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: ();
    scope 1 {
        debug swap_direction => _4;
        let _7: u128;
        let _8: u128;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: (u128, u128);
        scope 2 {
            debug new_quote_asset_amount => _7;
            debug new_base_asset_amount => _8;
            let _23: math::bn::U256;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: math::bn::U256;
            scope 7 {
                debug k => _23;
                let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _48: math::bn::U256;
                let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _53: u128;
                let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _68: i128;
                let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _77: i128;
                let _80: error::ErrorCode;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: ();
                let _111: u128;
                let _112: u128;
                let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _122: (u64, u128, u128);
                scope 12 {
                    debug residual => _45;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _48;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug residual => _50;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _53;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug residual => _65;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _68;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug residual => _74;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _77;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug error_code => _80;
                    let _87: std::string::String;
                    let mut _159: &[&str; 2];
                    scope 29 {
                        debug res => _87;
                    }
                }
                scope 30 {
                    debug residual => _105;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug val => _108;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug terminal_quote_reserves => _111;
                    debug terminal_base_reserves => _112;
                    let _124: u128;
                    let _125: u128;
                    let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _135: (u128, u128);
                    scope 39 {
                        debug min_base_asset_reserve => _124;
                        debug max_base_asset_reserve => _125;
                        let _138: u64;
                        let _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _146: u64;
                        scope 44 {
                            debug reserve_price_after => _138;
                            let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _157: (u32, u32);
                            scope 49 {
                                debug residual => _154;
                                scope 50 {
                                }
                            }
                            scope 51 {
                                debug val => _157;
                                scope 52 {
                                }
                            }
                        }
                        scope 45 {
                            debug residual => _143;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _146;
                            scope 48 {
                            }
                        }
                    }
                    scope 40 {
                        debug residual => _132;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug val => _135;
                        scope 43 {
                        }
                    }
                }
                scope 35 {
                    debug residual => _119;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _122;
                    scope 38 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).1: state::perp_market::AMM).15: i128);
        _5 = Gt(move _6, const 0_i128);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        _4 = SwapDirection::Remove;
        goto -> bb3;
    }

    bb2: {
        StorageDead(_6);
        _4 = SwapDirection::Add;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = (((*_1).1: state::perp_market::AMM).15: i128);
        _12 = core::num::<impl i128>::unsigned_abs(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _4;
        StorageLive(_16);
        _16 = _3;
        _11 = calculate_swap_output(move _12, move _14, move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        _10 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        _17 = discriminant(_10);
        switchInt(move _17) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_21);
        _21 = ((_10 as Continue).0: (u128, u128));
        _9 = _21;
        StorageDead(_21);
        StorageLive(_7);
        _7 = (_9.0: u128);
        StorageLive(_8);
        _8 = (_9.1: u128);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_22);
        _22 = _8;
        (((*_1).1: state::perp_market::AMM).5: u128) = move _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _3;
        _26 = <U256 as From<u128>>::from(move _27) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_18);
        _18 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb81;
    }

    bb11: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _3;
        _28 = <U256 as From<u128>>::from(move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_29);
        _25 = <U256 as SafeMath>::safe_mul(move _26, move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        _24 = <std::result::Result<U256, error::ErrorCode> as Try>::branch(move _25) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_25);
        _30 = discriminant(_24);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb8];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_24 as Continue).0: math::bn::U256);
        _23 = _34;
        StorageDead(_34);
        StorageDead(_24);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _23;
        StorageLive(_42);
        StorageLive(_43);
        _43 = _8;
        _42 = <U256 as From<u128>>::from(move _43) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_24);
        goto -> bb80;
    }

    bb18: {
        StorageDead(_43);
        _40 = <U256 as SafeMath>::safe_div(move _41, move _42) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<U256, error::ErrorCode> as Try>::branch(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        _44 = discriminant(_39);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb8];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_39 as Continue).0: math::bn::U256);
        _38 = _48;
        StorageDead(_48);
        _37 = U256::try_to_u128(move _38) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb79;
    }

    bb24: {
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_37);
        _49 = discriminant(_36);
        switchInt(move _49) -> [0: bb26, 1: bb27, otherwise: bb8];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_36 as Continue).0: u128);
        _35 = _53;
        StorageDead(_53);
        (((*_1).1: state::perp_market::AMM).6: u128) = move _35;
        StorageDead(_35);
        StorageDead(_39);
        StorageDead(_36);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _7;
        _62 = <u128 as Cast>::cast::<i128>(move _63) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_50);
        _50 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb79;
    }

    bb29: {
        StorageDead(_63);
        _61 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_62);
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb31, 1: bb32, otherwise: bb8];
    }

    bb31: {
        StorageLive(_68);
        _68 = ((_61 as Continue).0: i128);
        _60 = _68;
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = (((*_1).1: state::perp_market::AMM).6: u128);
        _71 = <u128 as Cast>::cast::<i128>(move _72) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_65);
        _65 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb77;
    }

    bb34: {
        StorageDead(_72);
        _70 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_71);
        _73 = discriminant(_70);
        switchInt(move _73) -> [0: bb36, 1: bb37, otherwise: bb8];
    }

    bb36: {
        StorageLive(_77);
        _77 = ((_70 as Continue).0: i128);
        _69 = _77;
        StorageDead(_77);
        _78 = CheckedSub(_60, _69);
        assert(!move (_78.1: bool), "attempt to compute `{} - {}`, which would overflow", move _60, move _69) -> [success: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_74);
        _74 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_69);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_70);
        goto -> bb77;
    }

    bb39: {
        _59 = move (_78.0: i128);
        StorageDead(_69);
        StorageDead(_60);
        _58 = core::num::<impl i128>::abs(move _59) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_59);
        _57 = Lt(move _58, const 100_i128);
        switchInt(move _57) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_58);
        StorageLive(_79);
        _79 = ();
        _56 = std::result::Result::<(), error::ErrorCode>::Ok(move _79);
        StorageDead(_79);
        goto -> bb50;
    }

    bb42: {
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_58);
        StorageLive(_80);
        _80 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _159 = const _;
        _91 = &(*_159);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_80;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _98) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb46, unwind: bb83];
    }

    bb46: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb47, unwind: bb83];
    }

    bb47: {
        StorageDead(_82);
        drop(_86) -> [return: bb48, unwind: bb84];
    }

    bb48: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = const "quote_asset_reserve passed doesnt reconcile enough";
        _101 = &(*_102);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_101);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_103);
        _103 = _80;
        _56 = std::result::Result::<(), error::ErrorCode>::Err(move _103);
        StorageDead(_103);
        StorageDead(_80);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_57);
        _55 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _56) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_56);
        _104 = discriminant(_55);
        switchInt(move _104) -> [0: bb52, 1: bb53, otherwise: bb8];
    }

    bb52: {
        StorageLive(_108);
        _108 = ((_55 as Continue).0: ());
        _54 = _108;
        StorageDead(_108);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_109);
        _109 = _3;
        (((*_1).1: state::perp_market::AMM).10: u128) = move _109;
        StorageDead(_109);
        StorageLive(_110);
        _110 = _2;
        (((*_1).1: state::perp_market::AMM).11: u128) = move _110;
        StorageDead(_110);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &((*_1).1: state::perp_market::AMM);
        _116 = &(*_117);
        _115 = calculate_terminal_price_and_reserves(move _116) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_105);
        _105 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_107);
        StorageDead(_105);
        goto -> bb78;
    }

    bb55: {
        StorageDead(_116);
        _114 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as Try>::branch(move _115) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_115);
        _118 = discriminant(_114);
        switchInt(move _118) -> [0: bb57, 1: bb58, otherwise: bb8];
    }

    bb57: {
        StorageLive(_122);
        _122 = ((_114 as Continue).0: (u64, u128, u128));
        _113 = _122;
        StorageDead(_122);
        StorageLive(_111);
        _111 = (_113.1: u128);
        StorageLive(_112);
        _112 = (_113.2: u128);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_123);
        _123 = _111;
        (((*_1).1: state::perp_market::AMM).12: u128) = move _123;
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = (((*_1).1: state::perp_market::AMM).7: u128);
        StorageLive(_130);
        _130 = _112;
        _128 = calculate_bid_ask_bounds(move _129, move _130) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_119);
        _119 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb80;
    }

    bb60: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _128) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_128);
        _131 = discriminant(_127);
        switchInt(move _131) -> [0: bb62, 1: bb63, otherwise: bb8];
    }

    bb62: {
        StorageLive(_135);
        _135 = ((_127 as Continue).0: (u128, u128));
        _126 = _135;
        StorageDead(_135);
        StorageLive(_124);
        _124 = (_126.0: u128);
        StorageLive(_125);
        _125 = (_126.1: u128);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_136);
        _136 = _125;
        (((*_1).1: state::perp_market::AMM).9: u128) = move _136;
        StorageDead(_136);
        StorageLive(_137);
        _137 = _124;
        (((*_1).1: state::perp_market::AMM).8: u128) = move _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &((*_1).1: state::perp_market::AMM);
        _140 = AMM::reserve_price(move _141) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_132);
        _132 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb76;
    }

    bb65: {
        StorageDead(_141);
        _139 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _140) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_140);
        _142 = discriminant(_139);
        switchInt(move _142) -> [0: bb67, 1: bb68, otherwise: bb8];
    }

    bb67: {
        StorageLive(_146);
        _146 = ((_139 as Continue).0: u64);
        _138 = _146;
        StorageDead(_146);
        StorageDead(_139);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &mut (*_1);
        StorageLive(_151);
        _151 = _138;
        StorageLive(_152);
        _152 = Option::<u64>::None;
        _149 = update_spreads(move _150, move _151, move _152) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_143);
        _143 = ((_139 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_145);
        _145 = _143;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _145) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_139);
        goto -> bb75;
    }

    bb70: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_150);
        _148 = <std::result::Result<(u32, u32), error::ErrorCode> as Try>::branch(move _149) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_149);
        _153 = discriminant(_148);
        switchInt(move _153) -> [0: bb72, 1: bb73, otherwise: bb8];
    }

    bb72: {
        StorageLive(_157);
        _157 = ((_148 as Continue).0: (u32, u32));
        _147 = _157;
        StorageDead(_157);
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_158);
        _158 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _158);
        StorageDead(_158);
        StorageDead(_138);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_23);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb82;
    }

    bb73: {
        StorageLive(_154);
        _154 = ((_148 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_148);
        StorageDead(_147);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_138);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb80;
    }

    bb77: {
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_35);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_23);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_4);
        goto -> bb82;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_86) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        resume;
    }
}
