// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_mm_oracle_price_data` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_mm_oracle_price_data(_1: &PerpMarket, _2: OraclePriceData, _3: u64, _4: &ValidityGuardRails) -> std::result::Result<MMOraclePriceData, error::ErrorCode> {
    debug self => _1;
    debug oracle_price_data => _2;
    debug clock_slot => _3;
    debug oracle_guard_rails => _4;
    let mut _0: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let _5: i64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _7: std::result::Result<i64, error::ErrorCode>;
    let mut _8: i64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _10: std::result::Result<i64, error::ErrorCode>;
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: i64;
    let mut _17: i64;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _19: std::result::Result<i64, error::ErrorCode>;
    let mut _20: u64;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: i64;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: i64;
    let mut _32: i64;
    let mut _33: i64;
    let mut _34: std::option::Option<u64>;
    let mut _35: u64;
    let mut _37: bool;
    let mut _38: i64;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::oracle::OracleValidity>;
    let mut _40: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let mut _41: state::user::MarketType;
    let mut _42: u16;
    let mut _43: i64;
    let mut _44: &state::oracle::OraclePriceData;
    let _45: &state::oracle::OraclePriceData;
    let mut _46: &state::state::ValidityGuardRails;
    let _47: &&state::state::ValidityGuardRails;
    let mut _48: u64;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _50: std::result::Result<u64, error::ErrorCode>;
    let mut _51: state::perp_market::PerpMarket;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: &state::oracle::OracleSource;
    let _58: &state::oracle::OracleSource;
    let mut _59: math::oracle::LogMode;
    let mut _60: i8;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: state::oracle::MMOraclePriceData;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::MMOraclePriceData>;
    let mut _68: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: u64;
    let mut _72: math::oracle::OracleValidity;
    let mut _73: state::oracle::OraclePriceData;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: &state::state::ValidityGuardRails;
    scope 1 {
        debug delay => _5;
        let _31: state::oracle::OraclePriceData;
        scope 14 {
            debug oracle_data => _31;
            let _36: math::oracle::OracleValidity;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: u64;
            let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _65: math::oracle::OracleValidity;
            scope 15 {
                debug oracle_validity => _36;
                let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _78: state::oracle::MMOraclePriceData;
                scope 24 {
                    debug residual => _75;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _78;
                    scope 27 {
                    }
                }
            }
            scope 16 {
                debug residual => _53;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _56;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _62;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _65;
                scope 23 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _27;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _30;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        _10 = <u64 as Cast>::cast::<i64>(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: i64);
        _8 = _16;
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = (((*_1).1: state::perp_market::AMM).55: u64);
        _19 = <u64 as Cast>::cast::<i64>(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb37;
    }

    bb7: {
        StorageDead(_20);
        _18 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: i64);
        _17 = _25;
        StorageDead(_25);
        _7 = <i64 as SafeMath>::safe_sub(move _8, move _17) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb36;
    }

    bb12: {
        StorageDead(_17);
        StorageDead(_8);
        _6 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_7);
        _26 = discriminant(_6);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = ((_6 as Continue).0: i64);
        _5 = _30;
        StorageDead(_30);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_31);
        StorageLive(_32);
        _32 = (((*_1).1: state::perp_market::AMM).67: i64);
        StorageLive(_33);
        _33 = _5;
        StorageLive(_34);
        _34 = Option::<u64>::None;
        StorageLive(_35);
        _35 = (_2.1: u64);
        _31 = OraclePriceData { price: move _32, confidence: move _35, delay: move _33, has_sufficient_number_of_data_points: const true, sequence_id: move _34 };
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = (((*_1).1: state::perp_market::AMM).67: i64);
        _37 = Eq(move _38, const 0_i64);
        switchInt(move _37) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        StorageLive(_27);
        _27 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        goto -> bb36;
    }

    bb17: {
        StorageDead(_38);
        _36 = OracleValidity::NonPositive;
        goto -> bb29;
    }

    bb18: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = state::user::MarketType::Perp;
        StorageLive(_42);
        _42 = ((*_1).21: u16);
        StorageLive(_43);
        _43 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_31;
        _44 = &(*_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_4;
        _79 = deref_copy (*_47);
        _46 = &(*_79);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = (*_1);
        _50 = PerpMarket::get_max_confidence_interval_multiplier(move _51) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_51);
        _49 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _50) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_56);
        _56 = ((_49 as Continue).0: u64);
        _48 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _57 = &(*_58);
        StorageLive(_59);
        _59 = LogMode::MMOracle;
        StorageLive(_60);
        _60 = (((*_1).1: state::perp_market::AMM).78: i8);
        _40 = oracle_validity(move _41, move _42, move _43, move _44, move _46, move _48, move _57, move _59, move _60) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_53);
        _53 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<OracleValidity, error::ErrorCode> as Try>::branch(move _40) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_40);
        _61 = discriminant(_39);
        switchInt(move _61) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_65);
        _65 = ((_39 as Continue).0: math::oracle::OracleValidity);
        _36 = _65;
        StorageDead(_65);
        StorageDead(_58);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_39);
        goto -> bb29;
    }

    bb27: {
        StorageLive(_62);
        _62 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_58);
        goto -> bb35;
    }

    bb29: {
        StorageDead(_37);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = (((*_1).1: state::perp_market::AMM).67: i64);
        StorageLive(_70);
        _70 = _5;
        StorageLive(_71);
        _71 = (((*_1).1: state::perp_market::AMM).79: u64);
        StorageLive(_72);
        _72 = _36;
        StorageLive(_73);
        _73 = _2;
        _68 = MMOraclePriceData::new(move _69, move _70, move _71, move _72, move _73) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as Try>::branch(move _68) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_68);
        _74 = discriminant(_67);
        switchInt(move _74) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_78);
        _78 = ((_67 as Continue).0: state::oracle::MMOraclePriceData);
        _66 = _78;
        StorageDead(_78);
        _0 = std::result::Result::<MMOraclePriceData, error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_5);
        StorageDead(_67);
        goto -> bb39;
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_5);
        StorageDead(_67);
        goto -> bb39;
    }

    bb35: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_31);
        goto -> bb38;
    }

    bb36: {
        StorageDead(_18);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_5);
        goto -> bb39;
    }

    bb39: {
        return;
    }
}
