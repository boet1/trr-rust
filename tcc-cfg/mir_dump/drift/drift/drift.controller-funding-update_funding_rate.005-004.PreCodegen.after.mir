// MIR for `controller::funding::update_funding_rate` after PreCodegen

fn controller::funding::update_funding_rate(_1: u16, _2: &mut PerpMarket, _3: &mut OracleMap<'_>, _4: i64, _5: u64, _6: &state::state::OracleGuardRails, _7: bool, _8: Option<u64>) -> std::result::Result<bool, error::ErrorCode> {
    debug market_index => _1;
    debug market => _2;
    debug oracle_map => _3;
    debug now => _4;
    debug slot => _5;
    debug guard_rails => _6;
    debug funding_paused => _7;
    debug precomputed_reserve_price => _8;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _9: u64;
    let mut _10: isize;
    let _11: u64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _13: std::result::Result<u64, error::ErrorCode>;
    let mut _14: &state::perp_market::AMM;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: u64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _22: std::result::Result<bool, error::ErrorCode>;
    let mut _23: &state::perp_market::PerpMarket;
    let mut _24: &state::oracle::OraclePriceData;
    let _25: &state::oracle::OraclePriceData;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _27: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _28: &mut state::oracle_map::OracleMap<'_>;
    let mut _29: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _30: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _31: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _32: &state::perp_market::PerpMarket;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: &state::state::OracleGuardRails;
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _48: std::result::Result<i64, error::ErrorCode>;
    let mut _49: i64;
    let mut _50: i64;
    let mut _51: i64;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i64;
    let _61: ();
    let mut _62: bool;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _65: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _66: &mut state::oracle_map::OracleMap<'_>;
    let mut _67: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _68: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _69: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _70: &state::perp_market::PerpMarket;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _78: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _79: state::perp_market::PerpMarket;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::MMOraclePriceData>;
    let mut _87: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let mut _88: &state::perp_market::PerpMarket;
    let mut _89: state::oracle::OraclePriceData;
    let mut _90: u64;
    let mut _91: &state::state::ValidityGuardRails;
    let _92: &state::state::ValidityGuardRails;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _100: std::result::Result<i64, error::ErrorCode>;
    let mut _101: &mut state::perp_market::AMM;
    let mut _102: &mut state::perp_market::AMM;
    let mut _103: i64;
    let mut _104: &state::oracle::MMOraclePriceData;
    let _105: &state::oracle::MMOraclePriceData;
    let mut _106: std::option::Option<u64>;
    let mut _107: u64;
    let mut _108: std::option::Option<i64>;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: (u64, std::option::Option<controller::position::PositionDirection>);
    let mut _117: bool;
    let mut _118: u32;
    let mut _119: u32;
    let mut _120: u64;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _122: std::result::Result<u64, error::ErrorCode>;
    let mut _123: &state::perp_market::AMM;
    let mut _124: u64;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: std::option::Option<controller::position::PositionDirection>;
    let mut _131: controller::position::PositionDirection;
    let mut _132: bool;
    let mut _133: u32;
    let mut _134: u32;
    let mut _135: u64;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _137: std::result::Result<u64, error::ErrorCode>;
    let mut _138: &state::perp_market::AMM;
    let mut _139: u64;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _145: std::option::Option<controller::position::PositionDirection>;
    let mut _146: controller::position::PositionDirection;
    let mut _147: u64;
    let mut _148: std::option::Option<controller::position::PositionDirection>;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _151: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _152: state::perp_market::PerpMarket;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _160: std::result::Result<u64, error::ErrorCode>;
    let mut _161: &mut state::perp_market::AMM;
    let mut _162: &mut state::perp_market::AMM;
    let mut _163: i64;
    let mut _164: std::option::Option<u64>;
    let mut _165: u64;
    let mut _166: std::option::Option<controller::position::PositionDirection>;
    let mut _167: std::option::Option<i64>;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _175: std::result::Result<i128, error::ErrorCode>;
    let mut _176: i128;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _178: std::result::Result<i128, error::ErrorCode>;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _184: i128;
    let mut _185: i128;
    let mut _186: i64;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _194: std::result::Result<i64, error::ErrorCode>;
    let mut _195: i64;
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _197: std::result::Result<i64, error::ErrorCode>;
    let mut _198: u64;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _204: i64;
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _212: std::result::Result<i64, error::ErrorCode>;
    let mut _213: i64;
    let mut _214: i64;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _216: std::result::Result<i64, error::ErrorCode>;
    let mut _217: i64;
    let mut _218: i64;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _231: std::result::Result<i64, error::ErrorCode>;
    let mut _232: state::perp_market::PerpMarket;
    let mut _233: i64;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _240: i64;
    let mut _241: i64;
    let mut _242: i64;
    let mut _243: bool;
    let mut _244: i64;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _247: std::result::Result<i64, error::ErrorCode>;
    let mut _248: i128;
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _250: std::result::Result<i128, error::ErrorCode>;
    let mut _251: i128;
    let mut _252: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _253: std::result::Result<i128, error::ErrorCode>;
    let mut _254: i128;
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _256: std::result::Result<i128, error::ErrorCode>;
    let mut _257: i64;
    let mut _258: isize;
    let mut _260: !;
    let mut _261: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _263: i128;
    let mut _264: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _265: std::result::Result<i128, error::ErrorCode>;
    let mut _266: isize;
    let mut _268: !;
    let mut _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _276: i128;
    let mut _277: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _278: std::result::Result<i128, error::ErrorCode>;
    let mut _279: i128;
    let mut _280: isize;
    let mut _282: !;
    let mut _283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _285: isize;
    let mut _287: !;
    let mut _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _290: isize;
    let mut _292: !;
    let mut _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _298: (i128, i128, i128);
    let mut _299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128, i128)>;
    let mut _300: std::result::Result<(i128, i128, i128), error::ErrorCode>;
    let mut _301: &mut state::perp_market::PerpMarket;
    let mut _302: i128;
    let mut _303: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _304: std::result::Result<i128, error::ErrorCode>;
    let mut _305: i64;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _316: ();
    let mut _317: bool;
    let mut _318: u8;
    let mut _320: i128;
    let mut _321: bool;
    let _322: ();
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _324: std::result::Result<(), error::ErrorCode>;
    let mut _325: &mut state::perp_market::PerpMarket;
    let mut _326: &state::oracle::OraclePriceData;
    let mut _327: i128;
    let mut _328: i64;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _334: i128;
    let mut _335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _336: std::result::Result<i128, error::ErrorCode>;
    let mut _337: i128;
    let mut _338: i128;
    let mut _339: isize;
    let mut _341: !;
    let mut _342: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _344: i128;
    let mut _345: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _346: std::result::Result<i128, error::ErrorCode>;
    let mut _347: i128;
    let mut _348: i128;
    let mut _349: isize;
    let mut _351: !;
    let mut _352: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _354: i64;
    let mut _355: i64;
    let mut _356: i64;
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _358: std::result::Result<i64, error::ErrorCode>;
    let mut _359: i128;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _365: i64;
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _367: std::result::Result<i64, error::ErrorCode>;
    let mut _368: i128;
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _374: i64;
    let mut _375: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _376: std::result::Result<i64, error::ErrorCode>;
    let mut _377: i64;
    let mut _378: i64;
    let mut _379: i64;
    let mut _380: i64;
    let mut _381: isize;
    let mut _383: !;
    let mut _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _386: i64;
    let mut _387: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _388: std::result::Result<i64, error::ErrorCode>;
    let mut _389: i64;
    let mut _390: i64;
    let mut _391: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _392: std::result::Result<i64, error::ErrorCode>;
    let mut _393: i128;
    let mut _394: isize;
    let mut _396: !;
    let mut _397: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _399: isize;
    let mut _401: !;
    let mut _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _404: i64;
    let _405: ();
    let _406: ();
    let mut _407: &[&[u8]];
    let mut _408: &[&[u8]; 1];
    let _409: &[&[u8]; 1];
    let _410: [&[u8]; 1];
    let mut _411: &[u8];
    let _412: &[u8];
    let mut _413: &std::vec::Vec<u8>;
    let _414: &std::vec::Vec<u8>;
    let _415: std::vec::Vec<u8>;
    let mut _416: &state::events::FundingRateRecord;
    let _417: &state::events::FundingRateRecord;
    let _418: state::events::FundingRateRecord;
    let mut _419: i64;
    let mut _420: u64;
    let mut _422: u64;
    let mut _423: std::option::Option<u64>;
    let mut _424: std::option::Option<u64>;
    let mut _425: u64;
    let mut _426: std::option::Option<u64>;
    let mut _427: u16;
    let mut _428: i64;
    let mut _429: i128;
    let mut _430: i128;
    let mut _431: i128;
    let mut _432: i128;
    let mut _433: u64;
    let mut _434: i64;
    let mut _435: i64;
    let mut _436: i128;
    let mut _437: i128;
    let mut _438: !;
    scope 1 {
        debug reserve_price => _9;
        let _20: bool;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: &state::oracle::OraclePriceData;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: bool;
        scope 7 {
            debug block_funding_rate_update => _20;
            let _46: i64;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: i64;
            scope 16 {
                debug time_until_next_update => _46;
                let _57: bool;
                scope 21 {
                    debug valid_funding_update => _57;
                    let _63: &state::oracle::OraclePriceData;
                    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _75: &state::oracle::OraclePriceData;
                    scope 22 {
                        debug oracle_price_data => _63;
                        let _76: std::option::Option<i64>;
                        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _84: std::option::Option<i64>;
                        scope 27 {
                            debug sanitize_clamp_denominator => _76;
                            let _85: state::oracle::MMOraclePriceData;
                            let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _97: state::oracle::MMOraclePriceData;
                            scope 32 {
                                debug mm_oracle_price_data => _85;
                                let _98: i64;
                                let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _113: i64;
                                scope 37 {
                                    debug oracle_price_twap => _98;
                                    let _114: u64;
                                    let _115: std::option::Option<controller::position::PositionDirection>;
                                    let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _129: u64;
                                    let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _144: u64;
                                    scope 42 {
                                        debug execution_premium_price => _114;
                                        debug execution_premium_direction => _115;
                                        let _149: std::option::Option<i64>;
                                        let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _157: std::option::Option<i64>;
                                        scope 51 {
                                            debug sanitize_clamp_denominator => _149;
                                            let _158: u64;
                                            let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _172: u64;
                                            scope 56 {
                                                debug mid_price_twap => _158;
                                                let _173: i128;
                                                let _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _183: i128;
                                                let _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _191: i128;
                                                scope 61 {
                                                    debug period_adjustment => _173;
                                                    let _192: i64;
                                                    let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _203: i64;
                                                    let _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _209: i64;
                                                    scope 70 {
                                                        debug price_spread => _192;
                                                        let _210: i64;
                                                        let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _223: i64;
                                                        let _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _228: i64;
                                                        scope 79 {
                                                            debug price_spread_with_offset => _210;
                                                            let _229: i64;
                                                            let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _238: i64;
                                                            scope 88 {
                                                                debug max_price_spread => _229;
                                                                let _239: i64;
                                                                scope 93 {
                                                                    debug clamped_price_spread => _239;
                                                                    let _245: i64;
                                                                    let _259: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _262: i128;
                                                                    let _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _270: i128;
                                                                    let _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _275: i128;
                                                                    let _281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _284: i128;
                                                                    let _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _289: i128;
                                                                    let _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _294: i64;
                                                                    scope 94 {
                                                                        debug funding_rate => _245;
                                                                        let _295: i128;
                                                                        let _296: i128;
                                                                        let _297: i128;
                                                                        let _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _310: i128;
                                                                        let _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _315: (i128, i128, i128);
                                                                        scope 119 {
                                                                            debug funding_rate_long => _295;
                                                                            debug funding_rate_short => _296;
                                                                            debug funding_imbalance_revenue => _297;
                                                                            let _319: i128;
                                                                            let _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _343: i128;
                                                                            let _350: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _353: i128;
                                                                            let _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _364: i64;
                                                                            let _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _373: i64;
                                                                            let _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _385: i64;
                                                                            let _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _398: i64;
                                                                            let _400: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _403: i64;
                                                                            let _421: u64;
                                                                            scope 128 {
                                                                                debug funding_imbalance_cost => _319;
                                                                                let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _333: ();
                                                                                scope 129 {
                                                                                    debug residual => _330;
                                                                                    scope 130 {
                                                                                    }
                                                                                }
                                                                                scope 131 {
                                                                                    debug val => _333;
                                                                                    scope 132 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 133 {
                                                                                debug residual => _340;
                                                                                scope 134 {
                                                                                }
                                                                            }
                                                                            scope 135 {
                                                                                debug val => _343;
                                                                                scope 136 {
                                                                                }
                                                                            }
                                                                            scope 137 {
                                                                                debug residual => _350;
                                                                                scope 138 {
                                                                                }
                                                                            }
                                                                            scope 139 {
                                                                                debug val => _353;
                                                                                scope 140 {
                                                                                }
                                                                            }
                                                                            scope 141 {
                                                                                debug residual => _361;
                                                                                scope 142 {
                                                                                }
                                                                            }
                                                                            scope 143 {
                                                                                debug val => _364;
                                                                                scope 144 {
                                                                                }
                                                                            }
                                                                            scope 145 {
                                                                                debug residual => _370;
                                                                                scope 146 {
                                                                                }
                                                                            }
                                                                            scope 147 {
                                                                                debug val => _373;
                                                                                scope 148 {
                                                                                }
                                                                            }
                                                                            scope 149 {
                                                                                debug residual => _382;
                                                                                scope 150 {
                                                                                }
                                                                            }
                                                                            scope 151 {
                                                                                debug val => _385;
                                                                                scope 152 {
                                                                                }
                                                                            }
                                                                            scope 153 {
                                                                                debug residual => _395;
                                                                                scope 154 {
                                                                                }
                                                                            }
                                                                            scope 155 {
                                                                                debug val => _398;
                                                                                scope 156 {
                                                                                }
                                                                            }
                                                                            scope 157 {
                                                                                debug residual => _400;
                                                                                scope 158 {
                                                                                }
                                                                            }
                                                                            scope 159 {
                                                                                debug val => _403;
                                                                                scope 160 {
                                                                                }
                                                                            }
                                                                            scope 161 {
                                                                                debug current_id => _421;
                                                                            }
                                                                        }
                                                                        scope 120 {
                                                                            debug residual => _307;
                                                                            scope 121 {
                                                                            }
                                                                        }
                                                                        scope 122 {
                                                                            debug val => _310;
                                                                            scope 123 {
                                                                            }
                                                                        }
                                                                        scope 124 {
                                                                            debug residual => _312;
                                                                            scope 125 {
                                                                            }
                                                                        }
                                                                        scope 126 {
                                                                            debug val => _315;
                                                                            scope 127 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug residual => _259;
                                                                        scope 96 {
                                                                        }
                                                                    }
                                                                    scope 97 {
                                                                        debug val => _262;
                                                                        scope 98 {
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug residual => _267;
                                                                        scope 100 {
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug val => _270;
                                                                        scope 102 {
                                                                        }
                                                                    }
                                                                    scope 103 {
                                                                        debug residual => _272;
                                                                        scope 104 {
                                                                        }
                                                                    }
                                                                    scope 105 {
                                                                        debug val => _275;
                                                                        scope 106 {
                                                                        }
                                                                    }
                                                                    scope 107 {
                                                                        debug residual => _281;
                                                                        scope 108 {
                                                                        }
                                                                    }
                                                                    scope 109 {
                                                                        debug val => _284;
                                                                        scope 110 {
                                                                        }
                                                                    }
                                                                    scope 111 {
                                                                        debug residual => _286;
                                                                        scope 112 {
                                                                        }
                                                                    }
                                                                    scope 113 {
                                                                        debug val => _289;
                                                                        scope 114 {
                                                                        }
                                                                    }
                                                                    scope 115 {
                                                                        debug residual => _291;
                                                                        scope 116 {
                                                                        }
                                                                    }
                                                                    scope 117 {
                                                                        debug val => _294;
                                                                        scope 118 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 89 {
                                                                debug residual => _235;
                                                                scope 90 {
                                                                }
                                                            }
                                                            scope 91 {
                                                                debug val => _238;
                                                                scope 92 {
                                                                }
                                                            }
                                                        }
                                                        scope 80 {
                                                            debug residual => _220;
                                                            scope 81 {
                                                            }
                                                        }
                                                        scope 82 {
                                                            debug val => _223;
                                                            scope 83 {
                                                            }
                                                        }
                                                        scope 84 {
                                                            debug residual => _225;
                                                            scope 85 {
                                                            }
                                                        }
                                                        scope 86 {
                                                            debug val => _228;
                                                            scope 87 {
                                                            }
                                                        }
                                                    }
                                                    scope 71 {
                                                        debug residual => _200;
                                                        scope 72 {
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug val => _203;
                                                        scope 74 {
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug residual => _206;
                                                        scope 76 {
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug val => _209;
                                                        scope 78 {
                                                        }
                                                    }
                                                }
                                                scope 62 {
                                                    debug residual => _180;
                                                    scope 63 {
                                                    }
                                                }
                                                scope 64 {
                                                    debug val => _183;
                                                    scope 65 {
                                                    }
                                                }
                                                scope 66 {
                                                    debug residual => _188;
                                                    scope 67 {
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _191;
                                                    scope 69 {
                                                    }
                                                }
                                            }
                                            scope 57 {
                                                debug residual => _169;
                                                scope 58 {
                                                }
                                            }
                                            scope 59 {
                                                debug val => _172;
                                                scope 60 {
                                                }
                                            }
                                        }
                                        scope 52 {
                                            debug residual => _154;
                                            scope 53 {
                                            }
                                        }
                                        scope 54 {
                                            debug val => _157;
                                            scope 55 {
                                            }
                                        }
                                    }
                                    scope 43 {
                                        debug residual => _126;
                                        scope 44 {
                                        }
                                    }
                                    scope 45 {
                                        debug val => _129;
                                        scope 46 {
                                        }
                                    }
                                    scope 47 {
                                        debug residual => _141;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug val => _144;
                                        scope 50 {
                                        }
                                    }
                                }
                                scope 38 {
                                    debug residual => _110;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _113;
                                    scope 41 {
                                    }
                                }
                            }
                            scope 33 {
                                debug residual => _94;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _97;
                                scope 36 {
                                }
                            }
                        }
                        scope 28 {
                            debug residual => _81;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _84;
                            scope 31 {
                            }
                        }
                    }
                    scope 23 {
                        debug residual => _72;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _75;
                        scope 26 {
                        }
                    }
                }
            }
            scope 17 {
                debug residual => _53;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _56;
                scope 20 {
                }
            }
        }
        scope 8 {
            debug residual => _34;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _37;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _42;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _45;
            scope 15 {
            }
        }
    }
    scope 2 {
        debug reserve_price => _11;
    }
    scope 3 {
        debug residual => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _19;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_9);
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_2).1: state::perp_market::AMM);
        _13 = AMM::reserve_price(move _14) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_8 as Some).0: u64);
        _9 = _11;
        StorageDead(_11);
        goto -> bb9;
    }

    bb4: {
        StorageDead(_14);
        _12 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: u64);
        _9 = _19;
        StorageDead(_19);
        StorageDead(_12);
        goto -> bb9;
    }

    bb7: {
        StorageLive(_16);
        _16 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb236;
    }

    bb9: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_2);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_3);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_2);
        _31 = PerpMarket::oracle_id(move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _27 = OracleMap::<'_>::get_price_data(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        _33 = discriminant(_26);
        switchInt(move _33) -> [0: bb13, 1: bb14, otherwise: bb2];
    }

    bb13: {
        StorageLive(_37);
        _37 = ((_26 as Continue).0: &state::oracle::OraclePriceData);
        _25 = &(*_37);
        StorageDead(_37);
        _24 = &(*_25);
        StorageLive(_38);
        _38 = &(*_6);
        StorageLive(_39);
        _39 = _9;
        StorageLive(_40);
        _40 = _5;
        _22 = block_operation(move _23, move _24, move _38, move _39, move _40) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb234;
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _22) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_22);
        _41 = discriminant(_21);
        switchInt(move _41) -> [0: bb18, 1: bb19, otherwise: bb2];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_21 as Continue).0: bool);
        _20 = _45;
        StorageDead(_45);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _4;
        StorageLive(_50);
        _50 = (((*_2).1: state::perp_market::AMM).50: i64);
        StorageLive(_51);
        _51 = (((*_2).1: state::perp_market::AMM).51: i64);
        _48 = on_the_hour_update(move _49, move _50, move _51) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb234;
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        _47 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_48);
        _52 = discriminant(_47);
        switchInt(move _52) -> [0: bb23, 1: bb24, otherwise: bb2];
    }

    bb23: {
        StorageLive(_56);
        _56 = ((_47 as Continue).0: i64);
        _46 = _56;
        StorageDead(_56);
        StorageDead(_47);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _7;
        switchInt(move _58) -> [0: bb26, otherwise: bb28];
    }

    bb24: {
        StorageLive(_53);
        _53 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_47);
        goto -> bb233;
    }

    bb26: {
        StorageLive(_59);
        _59 = _20;
        switchInt(move _59) -> [0: bb27, otherwise: bb28];
    }

    bb27: {
        StorageLive(_60);
        _60 = _46;
        _57 = Eq(move _60, const 0_i64);
        StorageDead(_60);
        goto -> bb29;
    }

    bb28: {
        _57 = const false;
        goto -> bb29;
    }

    bb29: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _57;
        switchInt(move _62) -> [0: bb208, otherwise: bb30];
    }

    bb30: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_3);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_2);
        _69 = PerpMarket::oracle_id(move _70) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _65 = OracleMap::<'_>::get_price_data(move _66, move _67) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _65) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_65);
        _71 = discriminant(_64);
        switchInt(move _71) -> [0: bb34, 1: bb35, otherwise: bb2];
    }

    bb34: {
        StorageLive(_75);
        _75 = ((_64 as Continue).0: &state::oracle::OraclePriceData);
        _63 = _75;
        StorageDead(_75);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = (*_2);
        _78 = PerpMarket::get_sanitize_clamp_denominator(move _79) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_72);
        _72 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        goto -> bb231;
    }

    bb37: {
        StorageDead(_79);
        _77 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _78) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb39, 1: bb40, otherwise: bb2];
    }

    bb39: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: std::option::Option<i64>);
        _76 = _84;
        StorageDead(_84);
        StorageDead(_77);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_2);
        StorageLive(_89);
        _89 = (*_63);
        StorageLive(_90);
        _90 = _5;
        StorageLive(_91);
        StorageLive(_92);
        _92 = &((*_6).1: state::state::ValidityGuardRails);
        _91 = &(*_92);
        _87 = PerpMarket::get_mm_oracle_price_data(move _88, move _89, move _90, move _91) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_81);
        _81 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        goto -> bb230;
    }

    bb42: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        _86 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as Try>::branch(move _87) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_87);
        _93 = discriminant(_86);
        switchInt(move _93) -> [0: bb44, 1: bb45, otherwise: bb2];
    }

    bb44: {
        StorageLive(_97);
        _97 = ((_86 as Continue).0: state::oracle::MMOraclePriceData);
        _85 = _97;
        StorageDead(_97);
        StorageDead(_92);
        StorageDead(_86);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &mut ((*_2).1: state::perp_market::AMM);
        _101 = &mut (*_102);
        StorageLive(_103);
        _103 = _4;
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_85;
        _104 = &(*_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _9;
        _106 = Option::<u64>::Some(move _107);
        StorageDead(_107);
        StorageLive(_108);
        _108 = _76;
        _100 = update_oracle_price_twap(move _101, move _103, move _104, move _106, move _108) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_94);
        _94 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_86);
        goto -> bb229;
    }

    bb47: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        _99 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_100);
        _109 = discriminant(_99);
        switchInt(move _109) -> [0: bb49, 1: bb50, otherwise: bb2];
    }

    bb49: {
        StorageLive(_113);
        _113 = ((_99 as Continue).0: i64);
        _98 = _113;
        StorageDead(_113);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_99);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = (((*_2).1: state::perp_market::AMM).65: u32);
        StorageLive(_119);
        _119 = (((*_2).1: state::perp_market::AMM).66: u32);
        _117 = Gt(move _118, move _119);
        switchInt(move _117) -> [0: bb53, otherwise: bb52];
    }

    bb50: {
        StorageLive(_110);
        _110 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_99);
        goto -> bb228;
    }

    bb52: {
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &((*_2).1: state::perp_market::AMM);
        StorageLive(_124);
        _124 = _9;
        _122 = AMM::ask_price(move _123, move _124) -> [return: bb54, unwind continue];
    }

    bb53: {
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_132);
        StorageLive(_133);
        _133 = (((*_2).1: state::perp_market::AMM).65: u32);
        StorageLive(_134);
        _134 = (((*_2).1: state::perp_market::AMM).66: u32);
        _132 = Lt(move _133, move _134);
        switchInt(move _132) -> [0: bb60, otherwise: bb59];
    }

    bb54: {
        StorageDead(_124);
        StorageDead(_123);
        _121 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _122) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_122);
        _125 = discriminant(_121);
        switchInt(move _125) -> [0: bb56, 1: bb57, otherwise: bb2];
    }

    bb56: {
        StorageLive(_129);
        _129 = ((_121 as Continue).0: u64);
        _120 = _129;
        StorageDead(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = controller::position::PositionDirection::Long;
        _130 = Option::<controller::position::PositionDirection>::Some(move _131);
        StorageDead(_131);
        _116 = (move _120, move _130);
        StorageDead(_130);
        StorageDead(_120);
        StorageDead(_121);
        goto -> bb67;
    }

    bb57: {
        StorageLive(_126);
        _126 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_120);
        StorageDead(_121);
        goto -> bb227;
    }

    bb59: {
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &((*_2).1: state::perp_market::AMM);
        StorageLive(_139);
        _139 = _9;
        _137 = AMM::bid_price(move _138, move _139) -> [return: bb61, unwind continue];
    }

    bb60: {
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_147);
        _147 = _9;
        StorageLive(_148);
        _148 = Option::<controller::position::PositionDirection>::None;
        _116 = (move _147, move _148);
        StorageDead(_148);
        StorageDead(_147);
        goto -> bb66;
    }

    bb61: {
        StorageDead(_139);
        StorageDead(_138);
        _136 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _137) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_137);
        _140 = discriminant(_136);
        switchInt(move _140) -> [0: bb63, 1: bb64, otherwise: bb2];
    }

    bb63: {
        StorageLive(_144);
        _144 = ((_136 as Continue).0: u64);
        _135 = _144;
        StorageDead(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = controller::position::PositionDirection::Short;
        _145 = Option::<controller::position::PositionDirection>::Some(move _146);
        StorageDead(_146);
        _116 = (move _135, move _145);
        StorageDead(_145);
        StorageDead(_135);
        StorageDead(_136);
        goto -> bb66;
    }

    bb64: {
        StorageLive(_141);
        _141 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_135);
        StorageDead(_136);
        StorageDead(_132);
        goto -> bb227;
    }

    bb66: {
        StorageDead(_132);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_117);
        StorageLive(_114);
        _114 = (_116.0: u64);
        StorageLive(_115);
        _115 = (_116.1: std::option::Option<controller::position::PositionDirection>);
        StorageDead(_116);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = (*_2);
        _151 = PerpMarket::get_sanitize_clamp_denominator(move _152) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_152);
        _150 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _151) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb70, 1: bb71, otherwise: bb2];
    }

    bb70: {
        StorageLive(_157);
        _157 = ((_150 as Continue).0: std::option::Option<i64>);
        _149 = _157;
        StorageDead(_157);
        StorageDead(_150);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &mut ((*_2).1: state::perp_market::AMM);
        _161 = &mut (*_162);
        StorageLive(_163);
        _163 = _4;
        StorageLive(_164);
        StorageLive(_165);
        _165 = _114;
        _164 = Option::<u64>::Some(move _165);
        StorageDead(_165);
        StorageLive(_166);
        _166 = _115;
        StorageLive(_167);
        _167 = _149;
        _160 = update_mark_twap_from_estimates(move _161, move _163, move _164, move _166, move _167) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_154);
        _154 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_150);
        goto -> bb226;
    }

    bb73: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        _159 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _160) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_160);
        _168 = discriminant(_159);
        switchInt(move _168) -> [0: bb75, 1: bb76, otherwise: bb2];
    }

    bb75: {
        StorageLive(_172);
        _172 = ((_159 as Continue).0: u64);
        _158 = _172;
        StorageDead(_172);
        StorageDead(_162);
        StorageDead(_159);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = <i128 as SafeMath>::safe_mul(const 24_i128, const _) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_169);
        _169 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_162);
        StorageDead(_159);
        goto -> bb225;
    }

    bb78: {
        _177 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _178) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_178);
        _179 = discriminant(_177);
        switchInt(move _179) -> [0: bb80, 1: bb81, otherwise: bb2];
    }

    bb80: {
        StorageLive(_183);
        _183 = ((_177 as Continue).0: i128);
        _176 = _183;
        StorageDead(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = (((*_2).1: state::perp_market::AMM).51: i64);
        _185 = move _186 as i128 (IntToInt);
        StorageDead(_186);
        _184 = std::cmp::max::<i128>(const _, move _185) -> [return: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_180);
        _180 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_182);
        _182 = _180;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _182) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb223;
    }

    bb83: {
        StorageDead(_185);
        _175 = <i128 as SafeMath>::safe_div(move _176, move _184) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_176);
        _174 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _175) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_175);
        _187 = discriminant(_174);
        switchInt(move _187) -> [0: bb86, 1: bb87, otherwise: bb2];
    }

    bb86: {
        StorageLive(_191);
        _191 = ((_174 as Continue).0: i128);
        _173 = _191;
        StorageDead(_191);
        StorageDead(_177);
        StorageDead(_174);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = _158;
        _197 = <u64 as Cast>::cast::<i64>(move _198) -> [return: bb89, unwind continue];
    }

    bb87: {
        StorageLive(_188);
        _188 = ((_174 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_190);
        _190 = _188;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _190) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_190);
        StorageDead(_188);
        goto -> bb223;
    }

    bb89: {
        StorageDead(_198);
        _196 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _197) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_197);
        _199 = discriminant(_196);
        switchInt(move _199) -> [0: bb91, 1: bb92, otherwise: bb2];
    }

    bb91: {
        StorageLive(_203);
        _203 = ((_196 as Continue).0: i64);
        _195 = _203;
        StorageDead(_203);
        StorageLive(_204);
        _204 = _98;
        _194 = <i64 as SafeMath>::safe_sub(move _195, move _204) -> [return: bb94, unwind continue];
    }

    bb92: {
        StorageLive(_200);
        _200 = ((_196 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_195);
        StorageDead(_194);
        goto -> bb221;
    }

    bb94: {
        StorageDead(_204);
        StorageDead(_195);
        _193 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _194) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_194);
        _205 = discriminant(_193);
        switchInt(move _205) -> [0: bb96, 1: bb97, otherwise: bb2];
    }

    bb96: {
        StorageLive(_209);
        _209 = ((_193 as Continue).0: i64);
        _192 = _209;
        StorageDead(_209);
        StorageDead(_196);
        StorageDead(_193);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _192;
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _98;
        _217 = core::num::<impl i64>::abs(move _218) -> [return: bb99, unwind continue];
    }

    bb97: {
        StorageLive(_206);
        _206 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_208);
        _208 = _206;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _208) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_208);
        StorageDead(_206);
        goto -> bb221;
    }

    bb99: {
        StorageDead(_218);
        _216 = <i64 as SafeMath>::safe_div(move _217, const _) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_217);
        _215 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _216) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_216);
        _219 = discriminant(_215);
        switchInt(move _219) -> [0: bb102, 1: bb103, otherwise: bb2];
    }

    bb102: {
        StorageLive(_223);
        _223 = ((_215 as Continue).0: i64);
        _214 = _223;
        StorageDead(_223);
        _212 = <i64 as SafeMath>::safe_add(move _213, move _214) -> [return: bb105, unwind continue];
    }

    bb103: {
        StorageLive(_220);
        _220 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb219;
    }

    bb105: {
        StorageDead(_214);
        StorageDead(_213);
        _211 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _212) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_212);
        _224 = discriminant(_211);
        switchInt(move _224) -> [0: bb107, 1: bb108, otherwise: bb2];
    }

    bb107: {
        StorageLive(_228);
        _228 = ((_211 as Continue).0: i64);
        _210 = _228;
        StorageDead(_228);
        StorageDead(_215);
        StorageDead(_211);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = (*_2);
        StorageLive(_233);
        _233 = _98;
        _231 = PerpMarket::get_max_price_divergence_for_funding_rate(move _232, move _233) -> [return: bb110, unwind continue];
    }

    bb108: {
        StorageLive(_225);
        _225 = ((_211 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_227);
        _227 = _225;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _227) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_227);
        StorageDead(_225);
        goto -> bb219;
    }

    bb110: {
        StorageDead(_233);
        StorageDead(_232);
        _230 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _231) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_231);
        _234 = discriminant(_230);
        switchInt(move _234) -> [0: bb112, 1: bb113, otherwise: bb2];
    }

    bb112: {
        StorageLive(_238);
        _238 = ((_230 as Continue).0: i64);
        _229 = _238;
        StorageDead(_238);
        StorageDead(_230);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _210;
        StorageLive(_241);
        StorageLive(_242);
        _242 = _229;
        _243 = Eq(_242, const i64::MIN);
        assert(!move _243, "attempt to negate `{}`, which would overflow", _242) -> [success: bb115, unwind continue];
    }

    bb113: {
        StorageLive(_235);
        _235 = ((_230 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_230);
        goto -> bb218;
    }

    bb115: {
        _241 = Neg(move _242);
        StorageDead(_242);
        StorageLive(_244);
        _244 = _229;
        _239 = <i64 as Ord>::clamp(move _240, move _241, move _244) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _239;
        _256 = <i64 as Cast>::cast::<i128>(move _257) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_257);
        _255 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _256) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_256);
        _258 = discriminant(_255);
        switchInt(move _258) -> [0: bb119, 1: bb120, otherwise: bb2];
    }

    bb119: {
        StorageLive(_262);
        _262 = ((_255 as Continue).0: i128);
        _254 = _262;
        StorageDead(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_259);
        _259 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_261);
        _261 = _259;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _261) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        goto -> bb216;
    }

    bb122: {
        _264 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _265) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_265);
        _266 = discriminant(_264);
        switchInt(move _266) -> [0: bb124, 1: bb125, otherwise: bb2];
    }

    bb124: {
        StorageLive(_270);
        _270 = ((_264 as Continue).0: i128);
        _263 = _270;
        StorageDead(_270);
        _253 = <i128 as SafeMath>::safe_mul(move _254, move _263) -> [return: bb127, unwind continue];
    }

    bb125: {
        StorageLive(_267);
        _267 = ((_264 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_269);
        _269 = _267;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _269) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_263);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb214;
    }

    bb127: {
        StorageDead(_263);
        StorageDead(_254);
        _252 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _253) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_253);
        _271 = discriminant(_252);
        switchInt(move _271) -> [0: bb129, 1: bb130, otherwise: bb2];
    }

    bb129: {
        StorageLive(_275);
        _275 = ((_252 as Continue).0: i128);
        _251 = _275;
        StorageDead(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _279 = _173;
        _278 = <i128 as Cast>::cast::<i128>(move _279) -> [return: bb132, unwind continue];
    }

    bb130: {
        StorageLive(_272);
        _272 = ((_252 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_274);
        _274 = _272;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _274) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_274);
        StorageDead(_272);
        goto -> bb214;
    }

    bb132: {
        StorageDead(_279);
        _277 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _278) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_278);
        _280 = discriminant(_277);
        switchInt(move _280) -> [0: bb134, 1: bb135, otherwise: bb2];
    }

    bb134: {
        StorageLive(_284);
        _284 = ((_277 as Continue).0: i128);
        _276 = _284;
        StorageDead(_284);
        _250 = <i128 as SafeMath>::safe_div(move _251, move _276) -> [return: bb137, unwind continue];
    }

    bb135: {
        StorageLive(_281);
        _281 = ((_277 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_283);
        _283 = _281;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _283) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_276);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb212;
    }

    bb137: {
        StorageDead(_276);
        StorageDead(_251);
        _249 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _250) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_250);
        _285 = discriminant(_249);
        switchInt(move _285) -> [0: bb139, 1: bb140, otherwise: bb2];
    }

    bb139: {
        StorageLive(_289);
        _289 = ((_249 as Continue).0: i128);
        _248 = _289;
        StorageDead(_289);
        _247 = <i128 as Cast>::cast::<i64>(move _248) -> [return: bb142, unwind continue];
    }

    bb140: {
        StorageLive(_286);
        _286 = ((_249 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_288);
        _288 = _286;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _288) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_288);
        StorageDead(_286);
        goto -> bb212;
    }

    bb142: {
        StorageDead(_248);
        _246 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _247) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_247);
        _290 = discriminant(_246);
        switchInt(move _290) -> [0: bb144, 1: bb145, otherwise: bb2];
    }

    bb144: {
        StorageLive(_294);
        _294 = ((_246 as Continue).0: i64);
        _245 = _294;
        StorageDead(_294);
        StorageDead(_277);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_246);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &mut (*_2);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = _245;
        _304 = <i64 as Cast>::cast::<i128>(move _305) -> [return: bb147, unwind continue];
    }

    bb145: {
        StorageLive(_291);
        _291 = ((_246 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_293);
        _293 = _291;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _293) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_293);
        StorageDead(_291);
        goto -> bb213;
    }

    bb147: {
        StorageDead(_305);
        _303 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _304) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_304);
        _306 = discriminant(_303);
        switchInt(move _306) -> [0: bb149, 1: bb150, otherwise: bb2];
    }

    bb149: {
        StorageLive(_310);
        _310 = ((_303 as Continue).0: i128);
        _302 = _310;
        StorageDead(_310);
        _300 = calculate_funding_rate_long_short(move _301, move _302) -> [return: bb152, unwind continue];
    }

    bb150: {
        StorageLive(_307);
        _307 = ((_303 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_309);
        _309 = _307;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _309) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb211;
    }

    bb152: {
        StorageDead(_302);
        StorageDead(_301);
        _299 = <std::result::Result<(i128, i128, i128), error::ErrorCode> as Try>::branch(move _300) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_300);
        _311 = discriminant(_299);
        switchInt(move _311) -> [0: bb154, 1: bb155, otherwise: bb2];
    }

    bb154: {
        StorageLive(_315);
        _315 = ((_299 as Continue).0: (i128, i128, i128));
        _298 = _315;
        StorageDead(_315);
        StorageLive(_295);
        _295 = (_298.0: i128);
        StorageLive(_296);
        _296 = (_298.1: i128);
        StorageLive(_297);
        _297 = (_298.2: i128);
        StorageDead(_303);
        StorageDead(_299);
        StorageDead(_298);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = (((*_2).1: state::perp_market::AMM).70: u8);
        _317 = Gt(move _318, const 0_u8);
        switchInt(move _317) -> [0: bb158, otherwise: bb157];
    }

    bb155: {
        StorageLive(_312);
        _312 = ((_299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_314);
        _314 = _312;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _314) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_314);
        StorageDead(_312);
        goto -> bb211;
    }

    bb157: {
        StorageDead(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = _297;
        _321 = Eq(_320, const i128::MIN);
        assert(!move _321, "attempt to negate `{}`, which would overflow", _320) -> [success: bb159, unwind continue];
    }

    bb158: {
        StorageDead(_318);
        _316 = const ();
        goto -> bb165;
    }

    bb159: {
        _319 = Neg(move _320);
        StorageDead(_320);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &mut (*_2);
        StorageLive(_326);
        _326 = &(*_63);
        StorageLive(_327);
        _327 = _319;
        StorageLive(_328);
        _328 = _4;
        _324 = formulaic_update_k(move _325, move _326, move _327, move _328) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_325);
        _323 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _324) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_324);
        _329 = discriminant(_323);
        switchInt(move _329) -> [0: bb162, 1: bb163, otherwise: bb2];
    }

    bb162: {
        StorageLive(_333);
        _333 = ((_323 as Continue).0: ());
        _322 = _333;
        StorageDead(_333);
        StorageDead(_323);
        StorageDead(_322);
        _316 = const ();
        StorageDead(_319);
        goto -> bb165;
    }

    bb163: {
        StorageLive(_330);
        _330 = ((_323 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb210;
    }

    bb165: {
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = (((*_2).1: state::perp_market::AMM).34: i128);
        StorageLive(_338);
        _338 = _295;
        _336 = <i128 as SafeMath>::safe_add(move _337, move _338) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_338);
        StorageDead(_337);
        _335 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _336) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_336);
        _339 = discriminant(_335);
        switchInt(move _339) -> [0: bb168, 1: bb169, otherwise: bb2];
    }

    bb168: {
        StorageLive(_343);
        _343 = ((_335 as Continue).0: i128);
        _334 = _343;
        StorageDead(_343);
        (((*_2).1: state::perp_market::AMM).34: i128) = move _334;
        StorageDead(_334);
        StorageDead(_335);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = (((*_2).1: state::perp_market::AMM).35: i128);
        StorageLive(_348);
        _348 = _296;
        _346 = <i128 as SafeMath>::safe_add(move _347, move _348) -> [return: bb171, unwind continue];
    }

    bb169: {
        StorageLive(_340);
        _340 = ((_335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_342);
        _342 = _340;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _342) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_334);
        StorageDead(_335);
        goto -> bb210;
    }

    bb171: {
        StorageDead(_348);
        StorageDead(_347);
        _345 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _346) -> [return: bb172, unwind continue];
    }

    bb172: {
        StorageDead(_346);
        _349 = discriminant(_345);
        switchInt(move _349) -> [0: bb173, 1: bb174, otherwise: bb2];
    }

    bb173: {
        StorageLive(_353);
        _353 = ((_345 as Continue).0: i128);
        _344 = _353;
        StorageDead(_353);
        (((*_2).1: state::perp_market::AMM).35: i128) = move _344;
        StorageDead(_344);
        StorageDead(_345);
        StorageLive(_354);
        _354 = _245;
        (((*_2).1: state::perp_market::AMM).24: i64) = move _354;
        StorageDead(_354);
        StorageLive(_355);
        _355 = _98;
        (((*_2).1: state::perp_market::AMM).85: i64) = move _355;
        StorageDead(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = _295;
        _358 = <i128 as Cast>::cast::<i64>(move _359) -> [return: bb176, unwind continue];
    }

    bb174: {
        StorageLive(_350);
        _350 = ((_345 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_352);
        _352 = _350;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _352) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_352);
        StorageDead(_350);
        StorageDead(_344);
        StorageDead(_345);
        goto -> bb210;
    }

    bb176: {
        StorageDead(_359);
        _357 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _358) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_358);
        _360 = discriminant(_357);
        switchInt(move _360) -> [0: bb178, 1: bb179, otherwise: bb2];
    }

    bb178: {
        StorageLive(_364);
        _364 = ((_357 as Continue).0: i64);
        _356 = _364;
        StorageDead(_364);
        (((*_2).1: state::perp_market::AMM).25: i64) = move _356;
        StorageDead(_356);
        StorageDead(_357);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = _296;
        _367 = <i128 as Cast>::cast::<i64>(move _368) -> [return: bb181, unwind continue];
    }

    bb179: {
        StorageLive(_361);
        _361 = ((_357 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_363);
        _363 = _361;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _363) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_356);
        StorageDead(_357);
        goto -> bb210;
    }

    bb181: {
        StorageDead(_368);
        _366 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _367) -> [return: bb182, unwind continue];
    }

    bb182: {
        StorageDead(_367);
        _369 = discriminant(_366);
        switchInt(move _369) -> [0: bb183, 1: bb184, otherwise: bb2];
    }

    bb183: {
        StorageLive(_373);
        _373 = ((_366 as Continue).0: i64);
        _365 = _373;
        StorageDead(_373);
        (((*_2).1: state::perp_market::AMM).26: i64) = move _365;
        StorageDead(_365);
        StorageDead(_366);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = _245;
        StorageLive(_378);
        _378 = _4;
        StorageLive(_379);
        _379 = (((*_2).1: state::perp_market::AMM).27: i64);
        StorageLive(_380);
        _380 = (((*_2).1: state::perp_market::AMM).50: i64);
        _376 = calculate_new_twap(move _377, move _378, move _379, move _380, const _) -> [return: bb186, unwind continue];
    }

    bb184: {
        StorageLive(_370);
        _370 = ((_366 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_372);
        _372 = _370;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _372) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_365);
        StorageDead(_366);
        goto -> bb210;
    }

    bb186: {
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_377);
        _375 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _376) -> [return: bb187, unwind continue];
    }

    bb187: {
        StorageDead(_376);
        _381 = discriminant(_375);
        switchInt(move _381) -> [0: bb188, 1: bb189, otherwise: bb2];
    }

    bb188: {
        StorageLive(_385);
        _385 = ((_375 as Continue).0: i64);
        _374 = _385;
        StorageDead(_385);
        (((*_2).1: state::perp_market::AMM).27: i64) = move _374;
        StorageDead(_374);
        StorageDead(_375);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = (((*_2).1: state::perp_market::AMM).80: i64);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _297;
        _392 = <i128 as Cast>::cast::<i64>(move _393) -> [return: bb191, unwind continue];
    }

    bb189: {
        StorageLive(_382);
        _382 = ((_375 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_384);
        _384 = _382;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _384) -> [return: bb190, unwind continue];
    }

    bb190: {
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_374);
        StorageDead(_375);
        goto -> bb210;
    }

    bb191: {
        StorageDead(_393);
        _391 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _392) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_392);
        _394 = discriminant(_391);
        switchInt(move _394) -> [0: bb193, 1: bb194, otherwise: bb2];
    }

    bb193: {
        StorageLive(_398);
        _398 = ((_391 as Continue).0: i64);
        _390 = _398;
        StorageDead(_398);
        _388 = <i64 as SafeMath>::safe_sub(move _389, move _390) -> [return: bb196, unwind continue];
    }

    bb194: {
        StorageLive(_395);
        _395 = ((_391 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_397);
        _397 = _395;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _397) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_388);
        goto -> bb209;
    }

    bb196: {
        StorageDead(_390);
        StorageDead(_389);
        _387 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _388) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_388);
        _399 = discriminant(_387);
        switchInt(move _399) -> [0: bb198, 1: bb199, otherwise: bb2];
    }

    bb198: {
        StorageLive(_403);
        _403 = ((_387 as Continue).0: i64);
        _386 = _403;
        StorageDead(_403);
        (((*_2).1: state::perp_market::AMM).80: i64) = move _386;
        StorageDead(_386);
        StorageDead(_391);
        StorageDead(_387);
        StorageLive(_404);
        _404 = _4;
        (((*_2).1: state::perp_market::AMM).50: i64) = move _404;
        StorageDead(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = _4;
        StorageLive(_420);
        StorageLive(_421);
        _421 = ((*_2).9: u64);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = _421;
        _424 = core::num::<impl u64>::checked_add(move _425, const 1_u64) -> [return: bb201, unwind continue];
    }

    bb199: {
        StorageLive(_400);
        _400 = ((_387 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_402);
        _402 = _400;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _402) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_402);
        StorageDead(_400);
        goto -> bb209;
    }

    bb201: {
        StorageDead(_425);
        StorageLive(_426);
        _426 = Option::<u64>::Some(const 1_u64);
        _423 = Option::<u64>::or(move _424, move _426) -> [return: bb202, unwind continue];
    }

    bb202: {
        StorageDead(_426);
        StorageDead(_424);
        _422 = Option::<u64>::unwrap(move _423) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_423);
        ((*_2).9: u64) = move _422;
        StorageDead(_422);
        _420 = _421;
        StorageDead(_421);
        StorageLive(_427);
        _427 = _1;
        StorageLive(_428);
        _428 = _245;
        StorageLive(_429);
        _429 = _295;
        StorageLive(_430);
        _430 = _296;
        StorageLive(_431);
        _431 = (((*_2).1: state::perp_market::AMM).34: i128);
        StorageLive(_432);
        _432 = (((*_2).1: state::perp_market::AMM).35: i128);
        StorageLive(_433);
        _433 = _158;
        StorageLive(_434);
        _434 = _98;
        StorageLive(_435);
        _435 = (((*_2).1: state::perp_market::AMM).49: i64);
        StorageLive(_436);
        _436 = (((*_2).1: state::perp_market::AMM).15: i128);
        StorageLive(_437);
        _437 = (((*_2).1: state::perp_market::AMM).16: i128);
        _418 = FundingRateRecord { ts: move _419, record_id: move _420, market_index: move _427, funding_rate: move _428, funding_rate_long: move _429, funding_rate_short: move _430, cumulative_funding_rate_long: move _431, cumulative_funding_rate_short: move _432, oracle_price_twap: move _434, mark_price_twap: move _433, period_revenue: move _435, base_asset_amount_with_amm: move _436, base_asset_amount_with_unsettled_lp: move _437 };
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        StorageDead(_430);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_420);
        StorageDead(_419);
        _417 = &_418;
        _416 = &(*_417);
        _415 = <FundingRateRecord as anchor_lang::Event>::data(move _416) -> [return: bb204, unwind continue];
    }

    bb204: {
        StorageDead(_416);
        _414 = &_415;
        _413 = &(*_414);
        _412 = <Vec<u8> as Deref>::deref(move _413) -> [return: bb205, unwind: bb238];
    }

    bb205: {
        _411 = &(*_412);
        StorageDead(_413);
        _410 = [move _411];
        StorageDead(_411);
        _409 = &_410;
        _408 = &(*_409);
        _407 = move _408 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_408);
        _406 = solana_program::log::sol_log_data(move _407) -> [return: bb206, unwind: bb238];
    }

    bb206: {
        StorageDead(_407);
        drop(_415) -> [return: bb207, unwind: bb239];
    }

    bb207: {
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_409);
        StorageDead(_406);
        _405 = const ();
        StorageDead(_405);
        (((*_2).1: state::perp_market::AMM).49: i64) = const 0_i64;
        _61 = const ();
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_245);
        StorageDead(_239);
        StorageDead(_229);
        StorageDead(_210);
        StorageDead(_192);
        StorageDead(_173);
        StorageDead(_158);
        StorageDead(_149);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_98);
        StorageDead(_85);
        StorageDead(_76);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_57);
        StorageDead(_46);
        StorageDead(_20);
        StorageDead(_9);
        goto -> bb237;
    }

    bb208: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        goto -> bb232;
    }

    bb209: {
        StorageDead(_386);
        StorageDead(_391);
        StorageDead(_387);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_295);
        goto -> bb217;
    }

    bb211: {
        StorageDead(_303);
        StorageDead(_299);
        StorageDead(_298);
        goto -> bb217;
    }

    bb212: {
        StorageDead(_248);
        StorageDead(_247);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_277);
        goto -> bb215;
    }

    bb214: {
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_264);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_246);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_245);
        StorageDead(_239);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_229);
        goto -> bb220;
    }

    bb219: {
        StorageDead(_215);
        StorageDead(_211);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_210);
        goto -> bb222;
    }

    bb221: {
        StorageDead(_196);
        StorageDead(_193);
        goto -> bb222;
    }

    bb222: {
        StorageDead(_192);
        goto -> bb224;
    }

    bb223: {
        StorageDead(_177);
        StorageDead(_174);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_173);
        goto -> bb225;
    }

    bb225: {
        StorageDead(_158);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_149);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb228;
    }

    bb227: {
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_98);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_85);
        goto -> bb230;
    }

    bb230: {
        StorageDead(_76);
        goto -> bb231;
    }

    bb231: {
        StorageDead(_63);
        goto -> bb232;
    }

    bb232: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        goto -> bb233;
    }

    bb233: {
        StorageDead(_46);
        goto -> bb235;
    }

    bb234: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb235;
    }

    bb235: {
        StorageDead(_20);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_9);
        goto -> bb237;
    }

    bb237: {
        return;
    }

    bb238 (cleanup): {
        drop(_415) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        resume;
    }
}
