// MIR for `get_balance_value` after PreCodegen

fn get_balance_value(_1: &SpotPosition, _2: &SpotMarket, _3: &OraclePriceData) -> std::result::Result<u128, error::ErrorCode> {
    debug spot_position => _1;
    debug spot_market => _2;
    debug oracle_price_data => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: (u128, u128);
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _7: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _8: &state::user::SpotPosition;
    let mut _9: &state::spot_market::SpotMarket;
    let mut _10: &state::oracle::OraclePriceData;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: (u128, u128);
    let mut _16: u128;
    scope 1 {
        debug value => _4;
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        _9 = &(*_2);
        StorageLive(_10);
        _10 = &(*_3);
        _7 = get_balance_value_and_token_amount(move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: (u128, u128));
        _5 = _15;
        StorageDead(_15);
        StorageLive(_4);
        _4 = (_5.0: u128);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_16);
        _16 = _4;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _16);
        StorageDead(_16);
        StorageDead(_4);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
