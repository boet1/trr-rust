// MIR for `state::user::<impl at programs/drift/src/state/user.rs:706:1: 706:34>::increase_balance` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:706:1: 706:34>::increase_balance(_1: &mut SpotPosition, _2: u128) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug delta => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u64;
    let mut _21: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: u64);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        _9 = <u128 as Cast>::cast::<u64>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u64);
        _7 = _15;
        StorageDead(_15);
        _5 = <u64 as SafeMath>::safe_add(move _6, move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_5);
        _16 = discriminant(_4);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_4 as Continue).0: u64);
        _3 = _20;
        StorageDead(_20);
        ((*_1).0: u64) = move _3;
        StorageDead(_3);
        StorageDead(_8);
        StorageDead(_4);
        StorageLive(_21);
        _21 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb13;
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_3);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
