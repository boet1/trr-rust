// MIR for `instructions::user::handle_enable_user_high_leverage_mode` before PreCodegen

fn instructions::user::handle_enable_user_high_leverage_mode(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::EnableUserHighLeverageMode<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _sub_account_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _9: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _10: isize;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: instructions::optional_accounts::AccountMaps<'_>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _20: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _21: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _22: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _23: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _24: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _25: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &std::collections::BTreeSet<u16>;
    let _27: &std::collections::BTreeSet<u16>;
    let _28: std::collections::BTreeSet<u16>;
    let mut _29: &std::collections::BTreeSet<u16>;
    let _30: &std::collections::BTreeSet<u16>;
    let _31: std::collections::BTreeSet<u16>;
    let mut _32: u64;
    let mut _33: anchor_lang::prelude::Clock;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _35: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _41: std::option::Option<state::state::OracleGuardRails>;
    let mut _42: state::state::OracleGuardRails;
    let mut _43: &state::state::State;
    let mut _44: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: bool;
    let mut _54: &state::user::MarginMode;
    let _55: &state::user::User;
    let mut _56: &std::cell::RefMut<'_, state::user::User>;
    let mut _57: &state::user::MarginMode;
    let _58: state::user::MarginMode;
    let mut _59: ();
    let _61: ();
    let mut _62: &str;
    let _63: &str;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[&str; 2];
    let _71: &[&str; 2];
    let _72: [&str; 2];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let mut _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &error::ErrorCode;
    let _79: &error::ErrorCode;
    let _80: ();
    let mut _81: &str;
    let _82: &str;
    let mut _83: error::ErrorCode;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _89: bool;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _91: std::result::Result<bool, error::ErrorCode>;
    let mut _92: &state::user::User;
    let _93: &state::user::User;
    let mut _94: &std::cell::RefMut<'_, state::user::User>;
    let _95: &std::cell::RefMut<'_, state::user::User>;
    let mut _96: &state::perp_market_map::PerpMarketMap<'_>;
    let _97: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _98: &state::spot_market_map::SpotMarketMap<'_>;
    let _99: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _100: &mut state::oracle_map::OracleMap<'_>;
    let mut _101: &mut state::oracle_map::OracleMap<'_>;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _109: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, error::ErrorCode>;
    let mut _110: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _111: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _112: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _118: ();
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _120: std::result::Result<(), error::ErrorCode>;
    let mut _121: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _122: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _123: &mut std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _124: &mut state::user::User;
    let mut _125: &mut state::user::User;
    let mut _126: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _127: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _133: ();
    let mut _136: &mut instructions::user::EnableUserHighLeverageMode<'_>;
    let mut _137: &mut instructions::user::EnableUserHighLeverageMode<'_>;
    let mut _138: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _139: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _140: &mut instructions::user::EnableUserHighLeverageMode<'_>;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug state => _3;
        let mut _4: std::cell::RefMut<'_, state::user::User>;
        let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _14: std::cell::RefMut<'_, state::user::User>;
        scope 2 {
            debug user => _4;
            let _15: state::perp_market_map::PerpMarketMap<'_>;
            let _16: state::spot_market_map::SpotMarketMap<'_>;
            let mut _17: state::oracle_map::OracleMap<'_>;
            let _37: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _40: anchor_lang::prelude::Clock;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: instructions::optional_accounts::AccountMaps<'_>;
            scope 7 {
                debug perp_market_map => _15;
                debug spot_market_map => _16;
                debug oracle_map => _17;
                let _60: error::ErrorCode;
                let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _88: ();
                let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _106: bool;
                let mut _107: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _117: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                let mut _135: &state::user::MarginMode;
                scope 16 {
                    debug error_code => _60;
                    let _67: std::string::String;
                    let mut _134: &[&str; 2];
                    scope 17 {
                        debug res => _67;
                    }
                }
                scope 18 {
                    debug residual => _85;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _88;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug residual => _103;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _106;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug config => _107;
                    let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _132: ();
                    scope 31 {
                        debug residual => _129;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _132;
                        scope 34 {
                        }
                    }
                }
                scope 27 {
                    debug residual => _114;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _117;
                    scope 30 {
                    }
                }
            }
            scope 8 {
                debug residual => _37;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _40;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _46;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _49;
                scope 15 {
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _14;
            scope 6 {
            }
        }
    }

    bb0: {
        _142 = const false;
        _141 = const false;
        StorageLive(_3);
        _136 = deref_copy (_1.1: &mut instructions::user::EnableUserHighLeverageMode<'_>);
        _3 = &((*_136).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _137 = deref_copy (_1.1: &mut instructions::user::EnableUserHighLeverageMode<'_>);
        _8 = &((*_137).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _6 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _7, move _9) -> [return: bb2, unwind: bb84];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind: bb84];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _4 = move _14;
        StorageDead(_14);
        _145 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _138 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _25 = &(*_138);
        _24 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _25) -> [return: bb8, unwind: bb83];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb89];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _143 = discriminant(_5);
        StorageDead(_5);
        goto -> bb73;
    }

    bb8: {
        StorageDead(_25);
        _23 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _24) -> [return: bb9, unwind: bb83];
    }

    bb9: {
        StorageDead(_24);
        _22 = &mut _23;
        _21 = &mut (*_22);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = BTreeSet::<u16>::new() -> [return: bb10, unwind: bb83];
    }

    bb10: {
        _27 = &_28;
        _26 = &(*_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = BTreeSet::<u16>::new() -> [return: bb11, unwind: bb82];
    }

    bb11: {
        _30 = &_31;
        _29 = &(*_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind: bb81];
    }

    bb12: {
        _34 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _35) -> [return: bb13, unwind: bb81];
    }

    bb13: {
        _141 = const true;
        _142 = const true;
        StorageDead(_35);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        StorageLive(_40);
        _40 = move ((_34 as Continue).0: anchor_lang::prelude::Clock);
        _33 = move _40;
        StorageDead(_40);
        _32 = (_33.0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _139 = deref_copy (*_3);
        _165 = (((_139.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _44 = &(*_165);
        _43 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _44) -> [return: bb17, unwind: bb88];
    }

    bb15: {
        StorageLive(_37);
        _37 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _39) -> [return: bb16, unwind: bb88];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb85;
    }

    bb17: {
        StorageDead(_44);
        _42 = ((*_43).7: state::state::OracleGuardRails);
        _41 = Option::<state::state::OracleGuardRails>::Some(move _42);
        StorageDead(_42);
        _20 = load_maps(move _21, move _26, move _29, move _32, move _41) -> [return: bb18, unwind: bb88];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_21);
        _19 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _20) -> [return: bb19, unwind: bb88];
    }

    bb19: {
        StorageDead(_20);
        _45 = discriminant(_19);
        switchInt(move _45) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_49);
        _49 = move ((_19 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _18 = move _49;
        StorageDead(_49);
        StorageLive(_15);
        _15 = move (_18.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_16);
        _16 = move (_18.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_17);
        _17 = move (_18.2: state::oracle_map::OracleMap<'_>);
        _149 = discriminant(_19);
        StorageDead(_43);
        _151 = discriminant(_34);
        _141 = const false;
        _142 = const false;
        StorageDead(_34);
        StorageDead(_33);
        drop(_31) -> [return: bb23, unwind: bb77];
    }

    bb21: {
        StorageLive(_46);
        _46 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb22, unwind: bb87];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_46);
        _147 = discriminant(_19);
        StorageDead(_43);
        goto -> bb85;
    }

    bb23: {
        StorageDead(_31);
        StorageDead(_30);
        drop(_28) -> [return: bb24, unwind: bb78];
    }

    bb24: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_4;
        _55 = <RefMut<'_, User> as Deref>::deref(move _56) -> [return: bb25, unwind: bb78];
    }

    bb25: {
        StorageDead(_56);
        _54 = &((*_55).26: state::user::MarginMode);
        StorageLive(_57);
        _135 = const _;
        _57 = &(*_135);
        _53 = <MarginMode as PartialEq>::ne(move _54, move _57) -> [return: bb26, unwind: bb78];
    }

    bb26: {
        switchInt(move _53) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = ();
        _52 = std::result::Result::<(), error::ErrorCode>::Ok(move _59);
        StorageDead(_59);
        goto -> bb36;
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_60);
        _60 = error::ErrorCode::DefaultError;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _134 = const _;
        _71 = &(*_134);
        _70 = &(*_71);
        _69 = move _70 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_60;
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _78) -> [return: bb29, unwind: bb78];
    }

    bb29: {
        StorageDead(_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_74);
        _68 = Arguments::<'_>::new_v1(move _69, move _73) -> [return: bb30, unwind: bb78];
    }

    bb30: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = format(move _68) -> [return: bb31, unwind: bb78];
    }

    bb31: {
        StorageDead(_68);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        _66 = move _67;
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = <String as Deref>::deref(move _64) -> [return: bb32, unwind: bb76];
    }

    bb32: {
        _62 = &(*_63);
        StorageDead(_64);
        _61 = solana_program::log::sol_log(move _62) -> [return: bb33, unwind: bb76];
    }

    bb33: {
        StorageDead(_62);
        drop(_66) -> [return: bb34, unwind: bb78];
    }

    bb34: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = const "user already in high leverage mode";
        _81 = &(*_82);
        _80 = solana_program::log::sol_log(move _81) -> [return: bb35, unwind: bb78];
    }

    bb35: {
        StorageDead(_81);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_83);
        _83 = _60;
        _52 = std::result::Result::<(), error::ErrorCode>::Err(move _83);
        StorageDead(_83);
        StorageDead(_60);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb37, unwind: bb78];
    }

    bb37: {
        StorageDead(_52);
        _84 = discriminant(_51);
        switchInt(move _84) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        StorageLive(_88);
        _88 = ((_51 as Continue).0: ());
        _50 = _88;
        StorageDead(_88);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_4;
        _94 = &(*_95);
        _93 = <RefMut<'_, User> as Deref>::deref(move _94) -> [return: bb41, unwind: bb78];
    }

    bb39: {
        StorageLive(_85);
        _85 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb40, unwind: bb78];
    }

    bb40: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb66;
    }

    bb41: {
        _92 = &(*_93);
        StorageDead(_94);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_15;
        _96 = &(*_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_16;
        _98 = &(*_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut _17;
        _100 = &mut (*_101);
        _91 = meets_maintenance_margin_requirement(move _92, move _96, move _98, move _100) -> [return: bb42, unwind: bb78];
    }

    bb42: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_92);
        _90 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _91) -> [return: bb43, unwind: bb78];
    }

    bb43: {
        StorageDead(_91);
        _102 = discriminant(_90);
        switchInt(move _102) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_106);
        _106 = ((_90 as Continue).0: bool);
        _89 = _106;
        StorageDead(_106);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _140 = deref_copy (_1.1: &mut instructions::user::EnableUserHighLeverageMode<'_>);
        _111 = &((*_140).3: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _110 = anchor_lang::prelude::AccountLoader::<'_, HighLeverageModeConfig>::load_mut(move _111) -> [return: bb47, unwind: bb78];
    }

    bb45: {
        StorageLive(_103);
        _103 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb46, unwind: bb78];
    }

    bb46: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb66;
    }

    bb47: {
        StorageDead(_111);
        StorageLive(_112);
        _112 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _109 = std::result::Result::<RefMut<'_, HighLeverageModeConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _110, move _112) -> [return: bb48, unwind: bb78];
    }

    bb48: {
        StorageDead(_112);
        StorageDead(_110);
        _108 = <std::result::Result<RefMut<'_, HighLeverageModeConfig>, error::ErrorCode> as Try>::branch(move _109) -> [return: bb49, unwind: bb78];
    }

    bb49: {
        StorageDead(_109);
        _113 = discriminant(_108);
        switchInt(move _113) -> [0: bb50, 1: bb51, otherwise: bb5];
    }

    bb50: {
        StorageLive(_117);
        _117 = move ((_108 as Continue).0: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _107 = move _117;
        StorageDead(_117);
        _155 = discriminant(_108);
        StorageDead(_108);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut _107;
        _122 = <RefMut<'_, HighLeverageModeConfig> as DerefMut>::deref_mut(move _123) -> [return: bb53, unwind: bb75];
    }

    bb51: {
        StorageLive(_114);
        _114 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb52, unwind: bb86];
    }

    bb52: {
        StorageDead(_116);
        StorageDead(_114);
        _153 = discriminant(_108);
        StorageDead(_108);
        goto -> bb65;
    }

    bb53: {
        _121 = &mut (*_122);
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &mut _4;
        _126 = &mut (*_127);
        _125 = <RefMut<'_, User> as DerefMut>::deref_mut(move _126) -> [return: bb54, unwind: bb75];
    }

    bb54: {
        _124 = &mut (*_125);
        StorageDead(_126);
        _120 = HighLeverageModeConfig::enable_high_leverage(move _121, move _124) -> [return: bb55, unwind: bb75];
    }

    bb55: {
        StorageDead(_124);
        StorageDead(_121);
        _119 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _120) -> [return: bb56, unwind: bb75];
    }

    bb56: {
        StorageDead(_120);
        _128 = discriminant(_119);
        switchInt(move _128) -> [0: bb57, 1: bb58, otherwise: bb5];
    }

    bb57: {
        StorageLive(_132);
        _132 = ((_119 as Continue).0: ());
        _118 = _132;
        StorageDead(_132);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_133);
        _133 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _133);
        StorageDead(_133);
        drop(_107) -> [return: bb60, unwind: bb78];
    }

    bb58: {
        StorageLive(_129);
        _129 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb59, unwind: bb75];
    }

    bb59: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_118);
        drop(_107) -> [return: bb65, unwind: bb78];
    }

    bb60: {
        StorageDead(_107);
        drop(_17) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        StorageDead(_17);
        drop(_16) -> [return: bb62, unwind: bb80];
    }

    bb62: {
        StorageDead(_16);
        drop(_15) -> [return: bb63, unwind: bb83];
    }

    bb63: {
        StorageDead(_15);
        drop(_4) -> [return: bb64, unwind: bb84];
    }

    bb64: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb74;
    }

    bb65: {
        StorageDead(_107);
        goto -> bb66;
    }

    bb66: {
        drop(_17) -> [return: bb67, unwind: bb79];
    }

    bb67: {
        StorageDead(_17);
        drop(_16) -> [return: bb68, unwind: bb80];
    }

    bb68: {
        StorageDead(_16);
        drop(_15) -> [return: bb69, unwind: bb83];
    }

    bb69: {
        StorageDead(_15);
        goto -> bb72;
    }

    bb70: {
        StorageDead(_31);
        StorageDead(_30);
        drop(_28) -> [return: bb71, unwind: bb83];
    }

    bb71: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb72;
    }

    bb72: {
        drop(_4) -> [return: bb73, unwind: bb84];
    }

    bb73: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb74;
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_107) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_66) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_28) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_17) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_16) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_15) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_31) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_28) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_4) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        resume;
    }

    bb85: {
        _157 = discriminant(_34);
        _141 = const false;
        _142 = const false;
        StorageDead(_34);
        StorageDead(_33);
        drop(_31) -> [return: bb70, unwind: bb82];
    }

    bb86 (cleanup): {
        _159 = discriminant(_108);
        goto -> bb78;
    }

    bb87 (cleanup): {
        _162 = discriminant(_19);
        goto -> bb88;
    }

    bb88 (cleanup): {
        _163 = discriminant(_34);
        goto -> bb81;
    }

    bb89 (cleanup): {
        _164 = discriminant(_5);
        goto -> bb84;
    }
}
