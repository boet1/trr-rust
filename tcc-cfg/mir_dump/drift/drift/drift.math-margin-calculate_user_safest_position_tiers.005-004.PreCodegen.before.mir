// MIR for `calculate_user_safest_position_tiers` before PreCodegen

fn calculate_user_safest_position_tiers(_1: &User, _2: &PerpMarketMap<'_>, _3: &SpotMarketMap<'_>) -> std::result::Result<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode> {
    debug user => _1;
    debug perp_market_map => _2;
    debug spot_market_map => _3;
    let mut _0: std::result::Result<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode>;
    let mut _4: state::spot_market::AssetTier;
    let _6: ();
    let mut _7: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _8: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _9: &[state::user::SpotPosition];
    let mut _10: &[state::user::SpotPosition; 8];
    let mut _12: ();
    let _13: ();
    let mut _14: std::option::Option<&state::user::SpotPosition>;
    let mut _15: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _16: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _17: isize;
    let mut _18: !;
    let _20: ();
    let mut _21: bool;
    let mut _22: &state::user::SpotPosition;
    let mut _23: bool;
    let mut _24: &state::spot_market::SpotBalanceType;
    let mut _25: &state::spot_market::SpotBalanceType;
    let _26: state::spot_market::SpotBalanceType;
    let mut _27: !;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _30: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _31: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _32: &u16;
    let _33: &u16;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: state::spot_market::AssetTier;
    let mut _40: state::spot_market::AssetTier;
    let mut _41: state::spot_market::AssetTier;
    let mut _42: &state::spot_market::SpotMarket;
    let mut _43: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _44: ();
    let mut _45: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _46: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _47: &[state::user::PerpPosition];
    let mut _48: &[state::user::PerpPosition; 8];
    let _50: ();
    let mut _51: std::option::Option<&state::user::PerpPosition>;
    let mut _52: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _53: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _54: isize;
    let mut _55: !;
    let _57: ();
    let mut _58: bool;
    let mut _59: &state::user::PerpPosition;
    let mut _60: !;
    let _62: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _64: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _65: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _66: &u16;
    let _67: &u16;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: state::perp_market::ContractTier;
    let mut _74: state::perp_market::ContractTier;
    let mut _75: state::perp_market::ContractTier;
    let mut _76: &state::perp_market::PerpMarket;
    let mut _77: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _78: (state::spot_market::AssetTier, state::perp_market::ContractTier);
    let mut _79: state::spot_market::AssetTier;
    let mut _80: state::perp_market::ContractTier;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    scope 1 {
        debug safest_tier_spot_liablity => _4;
        let mut _5: state::perp_market::ContractTier;
        scope 2 {
            debug safest_tier_perp_liablity => _5;
            let mut _11: std::slice::Iter<'_, state::user::SpotPosition>;
            let mut _49: std::slice::Iter<'_, state::user::PerpPosition>;
            scope 3 {
                debug iter => _11;
                let _19: &state::user::SpotPosition;
                scope 4 {
                    debug spot_position => _19;
                    let _28: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _38: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    let mut _81: &state::spot_market::SpotBalanceType;
                    scope 5 {
                        debug spot_market => _28;
                    }
                    scope 6 {
                        debug residual => _35;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _38;
                        scope 9 {
                        }
                    }
                }
            }
            scope 10 {
                debug iter => _49;
                let _56: &state::user::PerpPosition;
                scope 11 {
                    debug market_position => _56;
                    let _61: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
                    let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _72: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                    scope 12 {
                        debug market => _61;
                    }
                    scope 13 {
                        debug residual => _69;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _72;
                        scope 16 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = <state::spot_market::AssetTier as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        _5 = <state::perp_market::ContractTier as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).3: [state::user::SpotPosition; 8]);
        _9 = move _10 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_10);
        _8 = core::slice::<impl [SpotPosition]>::iter(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _7 = <std::slice::Iter<'_, SpotPosition> as IntoIterator>::into_iter(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageLive(_11);
        _11 = move _7;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _11;
        _15 = &mut (*_16);
        _14 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_19);
        _19 = ((_14 as Some).0: &state::user::SpotPosition);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_19);
        _21 = SpotPosition::is_available(move _22) -> [return: bb10, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _6 = const ();
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &((*_1).4: [state::user::PerpPosition; 8]);
        _47 = move _48 as &[state::user::PerpPosition] (PointerCoercion(Unsize));
        StorageDead(_48);
        _46 = core::slice::<impl [PerpPosition]>::iter(move _47) -> [return: bb24, unwind continue];
    }

    bb10: {
        switchInt(move _21) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_22);
        goto -> bb14;
    }

    bb12: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_19).5: state::spot_market::SpotBalanceType);
        StorageLive(_25);
        _81 = const _;
        _25 = &(*_81);
        _23 = <SpotBalanceType as PartialEq>::eq(move _24, move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _23) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb5;
    }

    bb15: {
        StorageDead(_25);
        StorageDead(_24);
        _20 = const ();
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_3);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_19).4: u16);
        _32 = &(*_33);
        _30 = SpotMarketMap::<'_>::get_ref(move _31, move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _30) -> [return: bb17, unwind: bb45];
    }

    bb17: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb18, 1: bb19, otherwise: bb8];
    }

    bb18: {
        StorageLive(_38);
        _38 = move ((_29 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _28 = move _38;
        StorageDead(_38);
        _84 = discriminant(_29);
        StorageDead(_33);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _4;
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_28;
        _42 = <Ref<'_, SpotMarket> as Deref>::deref(move _43) -> [return: bb21, unwind: bb44];
    }

    bb19: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb20, unwind: bb47];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_35);
        _82 = discriminant(_29);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb41;
    }

    bb21: {
        StorageDead(_43);
        _41 = ((*_42).46: state::spot_market::AssetTier);
        _39 = std::cmp::min::<state::spot_market::AssetTier>(move _40, move _41) -> [return: bb22, unwind: bb44];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_40);
        _4 = move _39;
        StorageDead(_39);
        StorageDead(_42);
        _13 = const ();
        drop(_28) -> [return: bb23, unwind: bb45];
    }

    bb23: {
        StorageDead(_28);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        _12 = const ();
        goto -> bb5;
    }

    bb24: {
        StorageDead(_47);
        _45 = <std::slice::Iter<'_, PerpPosition> as IntoIterator>::into_iter(move _46) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_46);
        StorageLive(_49);
        _49 = move _45;
        goto -> bb26;
    }

    bb26: {
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _49;
        _52 = &mut (*_53);
        _51 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _52) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb29, 1: bb28, otherwise: bb8];
    }

    bb28: {
        StorageLive(_56);
        _56 = ((_51 as Some).0: &state::user::PerpPosition);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(*_56);
        _58 = PerpPosition::is_available(move _59) -> [return: bb30, unwind continue];
    }

    bb29: {
        _44 = const ();
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _4;
        StorageLive(_80);
        _80 = _5;
        _78 = (move _79, move _80);
        StorageDead(_80);
        StorageDead(_79);
        _0 = std::result::Result::<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode>::Ok(move _78);
        StorageDead(_78);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb42;
    }

    bb30: {
        switchInt(move _58) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb26;
    }

    bb32: {
        StorageDead(_59);
        _57 = const ();
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_2);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &((*_56).13: u16);
        _66 = &(*_67);
        _64 = PerpMarketMap::<'_>::get_ref(move _65, move _66) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _64) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        StorageDead(_64);
        _68 = discriminant(_63);
        switchInt(move _68) -> [0: bb35, 1: bb36, otherwise: bb8];
    }

    bb35: {
        StorageLive(_72);
        _72 = move ((_63 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _62 = move _72;
        StorageDead(_72);
        _61 = &_62;
        _88 = discriminant(_63);
        StorageDead(_67);
        StorageDead(_63);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _5;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_61);
        _76 = <Ref<'_, PerpMarket> as Deref>::deref(move _77) -> [return: bb38, unwind: bb43];
    }

    bb36: {
        StorageLive(_69);
        _69 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        StorageDead(_71);
        StorageDead(_69);
        _86 = discriminant(_63);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb41;
    }

    bb38: {
        StorageDead(_77);
        _75 = ((*_76).24: state::perp_market::ContractTier);
        _73 = std::cmp::min::<state::perp_market::ContractTier>(move _74, move _75) -> [return: bb39, unwind: bb43];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_74);
        _5 = move _73;
        StorageDead(_73);
        StorageDead(_76);
        _50 = const ();
        drop(_62) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        _12 = const ();
        goto -> bb26;
    }

    bb41: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb42;
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_62) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_28) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }

    bb46 (cleanup): {
        _90 = discriminant(_63);
        goto -> bb45;
    }

    bb47 (cleanup): {
        _91 = discriminant(_29);
        goto -> bb45;
    }
}
