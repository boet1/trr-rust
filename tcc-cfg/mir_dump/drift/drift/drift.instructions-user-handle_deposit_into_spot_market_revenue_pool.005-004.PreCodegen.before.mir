// MIR for `instructions::user::handle_deposit_into_spot_market_revenue_pool` before PreCodegen

fn instructions::user::handle_deposit_into_spot_market_revenue_pool(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::RevenuePoolDeposit<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: bool;
    let mut _15: u64;
    let mut _16: !;
    let mut _17: anchor_lang::error::Error;
    let mut _18: error::ErrorCode;
    let mut _19: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _21: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _22: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _24: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _31: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _32: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _36: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _37: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: ();
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _45: std::result::Result<(), error::ErrorCode>;
    let mut _46: bool;
    let mut _47: &state::spot_market::SpotMarket;
    let _48: &state::spot_market::SpotMarket;
    let mut _49: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _50: i64;
    let mut _51: anchor_lang::prelude::Clock;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _53: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _59: ();
    let _61: ();
    let mut _62: &str;
    let _63: &str;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[&str; 2];
    let _71: &[&str; 2];
    let _72: [&str; 2];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let mut _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &error::ErrorCode;
    let _79: &error::ErrorCode;
    let _80: ();
    let mut _81: &str;
    let _82: &str;
    let mut _83: &std::string::String;
    let _84: &std::string::String;
    let _85: std::string::String;
    let mut _87: std::fmt::Arguments<'_>;
    let mut _88: &[&str];
    let mut _89: &[&str; 2];
    let _90: &[&str; 2];
    let _91: [&str; 2];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let mut _93: &[core::fmt::rt::Argument<'_>; 1];
    let _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: [core::fmt::rt::Argument<'_>; 1];
    let mut _96: core::fmt::rt::Argument<'_>;
    let mut _97: &u16;
    let _98: &u16;
    let _99: &state::spot_market::SpotMarket;
    let mut _100: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _101: error::ErrorCode;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _107: ();
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _109: std::result::Result<(), error::ErrorCode>;
    let mut _110: u128;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _112: std::result::Result<u128, error::ErrorCode>;
    let mut _113: u64;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _119: &state::spot_market::SpotBalanceType;
    let _120: &state::spot_market::SpotBalanceType;
    let _121: state::spot_market::SpotBalanceType;
    let mut _122: &mut state::spot_market::SpotMarket;
    let mut _123: &mut state::spot_market::SpotMarket;
    let mut _124: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _125: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _131: ();
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _133: std::result::Result<(), anchor_lang::error::Error>;
    let mut _134: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _135: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _136: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _137: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _138: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _139: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _140: &anchor_lang::prelude::AccountInfo<'_>;
    let _141: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _142: &anchor_lang::prelude::Signer<'_>;
    let _143: &anchor_lang::prelude::Signer<'_>;
    let mut _144: u64;
    let mut _145: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _146: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _147: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _148: bool;
    let mut _149: &state::spot_market::SpotMarket;
    let _150: &state::spot_market::SpotMarket;
    let mut _151: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _152: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _158: ();
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _160: std::result::Result<(), error::ErrorCode>;
    let mut _161: &state::spot_market::SpotMarket;
    let _162: &state::spot_market::SpotMarket;
    let mut _163: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _169: ();
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _171: std::result::Result<(), anchor_lang::error::Error>;
    let mut _172: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _178: i64;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _180: std::result::Result<i64, error::ErrorCode>;
    let mut _181: &state::spot_market::SpotMarket;
    let _182: &state::spot_market::SpotMarket;
    let mut _183: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _184: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _185: u64;
    let mut _186: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _187: &anchor_spl::token_interface::TokenAccount;
    let _188: &anchor_spl::token_interface::TokenAccount;
    let mut _189: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _195: ();
    let mut _199: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _200: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _201: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _202: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _203: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _204: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _205: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _206: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _207: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _208: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _209: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _210: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _211: &mut instructions::user::RevenuePoolDeposit<'_>;
    let mut _212: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _243: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _244: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _245: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _246: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _19;
        let _30: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
        scope 10 {
            debug remaining_accounts_iter => _30;
            let _34: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _42: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            scope 11 {
                debug mint => _34;
                let _55: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _58: anchor_lang::prelude::Clock;
                let _60: error::ErrorCode;
                let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _106: ();
                let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _118: u128;
                let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _130: ();
                let _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _157: ();
                let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _168: ();
                let _174: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _177: ();
                let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _194: i64;
                let mut _196: &state::spot_market::SpotBalanceType;
                scope 16 {
                    debug residual => _55;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _58;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug error_code => _60;
                    let _67: std::string::String;
                    let _86: std::string::String;
                    let mut _197: &[&str; 2];
                    let mut _198: &[&str; 2];
                    scope 21 {
                        debug res => _67;
                    }
                    scope 22 {
                        debug res => _86;
                    }
                }
                scope 23 {
                    debug residual => _103;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug val => _106;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug residual => _115;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _118;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug residual => _127;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug val => _130;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug residual => _154;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _157;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug residual => _165;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug val => _168;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug residual => _174;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug val => _177;
                    scope 46 {
                    }
                }
                scope 47 {
                    debug residual => _191;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug val => _194;
                    scope 50 {
                    }
                }
            }
            scope 12 {
                debug residual => _39;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _42;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _26;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _29;
        scope 9 {
        }
    }

    bb0: {
        _214 = const false;
        _213 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _199 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _7 = &((*_199).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _200 = deref_copy (*_7);
        _242 = (((_200.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_242);
        _5 = constraints::deposit_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb100];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _215 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _14 = Eq(move _15, const 0_u64);
        switchInt(move _14) -> [0: bb9, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb105];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _235 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb96;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = error::ErrorCode::InsufficientDeposit;
        _17 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _17);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb96;
    }

    bb9: {
        StorageDead(_15);
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _201 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _23 = &((*_201).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _22 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        StorageLive(_24);
        _24 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _21 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _22, move _24) -> [return: bb11, unwind: bb100];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        _20 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _21) -> [return: bb12, unwind: bb100];
    }

    bb12: {
        StorageDead(_21);
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_29);
        _29 = move ((_20 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _19 = move _29;
        StorageDead(_29);
        _219 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _202 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _33 = &(*_202);
        _32 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _33) -> [return: bb16, unwind: bb99];
    }

    bb14: {
        StorageLive(_26);
        _26 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb15, unwind: bb104];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_26);
        _217 = discriminant(_20);
        StorageDead(_20);
        goto -> bb95;
    }

    bb16: {
        StorageDead(_33);
        _31 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _32) -> [return: bb17, unwind: bb99];
    }

    bb17: {
        StorageDead(_32);
        _30 = &mut _31;
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_30);
        _36 = get_token_mint(move _37) -> [return: bb18, unwind: bb99];
    }

    bb18: {
        StorageDead(_37);
        _35 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _36) -> [return: bb19, unwind: bb99];
    }

    bb19: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_42);
        _42 = move ((_35 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _34 = move _42;
        StorageDead(_42);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_19;
        _48 = <RefMut<'_, SpotMarket> as Deref>::deref(move _49) -> [return: bb23, unwind: bb99];
    }

    bb21: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb22, unwind: bb99];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_35);
        goto -> bb94;
    }

    bb23: {
        _47 = &(*_48);
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb24, unwind: bb99];
    }

    bb24: {
        _52 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _53) -> [return: bb25, unwind: bb99];
    }

    bb25: {
        _213 = const true;
        _214 = const true;
        StorageDead(_53);
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_58);
        _58 = move ((_52 as Continue).0: anchor_lang::prelude::Clock);
        _51 = move _58;
        StorageDead(_58);
        _50 = (_51.4: i64);
        _46 = SpotMarket::is_in_settlement(move _47, move _50) -> [return: bb29, unwind: bb103];
    }

    bb27: {
        StorageLive(_55);
        _55 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_57);
        _57 = move _55;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _57) -> [return: bb28, unwind: bb103];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_47);
        _233 = discriminant(_52);
        _213 = const false;
        _214 = const false;
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb93;
    }

    bb29: {
        switchInt(move _46) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_50);
        StorageDead(_47);
        _221 = discriminant(_52);
        _213 = const false;
        _214 = const false;
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_60);
        _60 = error::ErrorCode::DefaultError;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _198 = const _;
        _71 = &(*_198);
        _70 = &(*_71);
        _69 = move _70 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_60;
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _78) -> [return: bb32, unwind: bb99];
    }

    bb31: {
        StorageDead(_50);
        StorageDead(_47);
        _223 = discriminant(_52);
        _213 = const false;
        _214 = const false;
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_59);
        _59 = ();
        _45 = std::result::Result::<(), error::ErrorCode>::Ok(move _59);
        StorageDead(_59);
        goto -> bb45;
    }

    bb32: {
        StorageDead(_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_74);
        _68 = Arguments::<'_>::new_v1(move _69, move _73) -> [return: bb33, unwind: bb99];
    }

    bb33: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = format(move _68) -> [return: bb34, unwind: bb99];
    }

    bb34: {
        StorageDead(_68);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        _66 = move _67;
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = <String as Deref>::deref(move _64) -> [return: bb35, unwind: bb98];
    }

    bb35: {
        _62 = &(*_63);
        StorageDead(_64);
        _61 = solana_program::log::sol_log(move _62) -> [return: bb36, unwind: bb98];
    }

    bb36: {
        StorageDead(_62);
        drop(_66) -> [return: bb37, unwind: bb99];
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _197 = const _;
        _90 = &(*_197);
        _89 = &(*_90);
        _88 = move _89 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_89);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_19;
        _99 = <RefMut<'_, SpotMarket> as Deref>::deref(move _100) -> [return: bb38, unwind: bb99];
    }

    bb38: {
        StorageDead(_100);
        _98 = &((*_99).42: u16);
        _97 = &(*_98);
        _96 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _97) -> [return: bb39, unwind: bb99];
    }

    bb39: {
        StorageDead(_97);
        _95 = [move _96];
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = move _93 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_93);
        _87 = Arguments::<'_>::new_v1(move _88, move _92) -> [return: bb40, unwind: bb99];
    }

    bb40: {
        StorageDead(_92);
        StorageDead(_88);
        _86 = format(move _87) -> [return: bb41, unwind: bb99];
    }

    bb41: {
        StorageDead(_87);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_90);
        _85 = move _86;
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = <String as Deref>::deref(move _83) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        _81 = &(*_82);
        StorageDead(_83);
        _80 = solana_program::log::sol_log(move _81) -> [return: bb43, unwind: bb97];
    }

    bb43: {
        StorageDead(_81);
        drop(_85) -> [return: bb44, unwind: bb99];
    }

    bb44: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_101);
        _101 = _60;
        _45 = std::result::Result::<(), error::ErrorCode>::Err(move _101);
        StorageDead(_101);
        StorageDead(_60);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_46);
        _44 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _45) -> [return: bb46, unwind: bb99];
    }

    bb46: {
        StorageDead(_45);
        _102 = discriminant(_44);
        switchInt(move _102) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_106);
        _106 = ((_44 as Continue).0: ());
        _43 = _106;
        StorageDead(_106);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _2;
        _112 = <u64 as Cast>::cast::<u128>(move _113) -> [return: bb50, unwind: bb99];
    }

    bb48: {
        StorageLive(_103);
        _103 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb49, unwind: bb99];
    }

    bb49: {
        StorageDead(_105);
        StorageDead(_103);
        goto -> bb93;
    }

    bb50: {
        StorageDead(_113);
        _111 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _112) -> [return: bb51, unwind: bb99];
    }

    bb51: {
        StorageDead(_112);
        _114 = discriminant(_111);
        switchInt(move _114) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_118);
        _118 = ((_111 as Continue).0: u128);
        _110 = _118;
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        _196 = const _;
        _120 = &(*_196);
        _119 = &(*_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &mut _19;
        _124 = &mut (*_125);
        _123 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _124) -> [return: bb55, unwind: bb99];
    }

    bb53: {
        StorageLive(_115);
        _115 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb54, unwind: bb99];
    }

    bb54: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb92;
    }

    bb55: {
        _122 = &mut (*_123);
        StorageDead(_124);
        _109 = update_revenue_pool_balances(move _110, move _119, move _122) -> [return: bb56, unwind: bb99];
    }

    bb56: {
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_110);
        _108 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _109) -> [return: bb57, unwind: bb99];
    }

    bb57: {
        StorageDead(_109);
        _126 = discriminant(_108);
        switchInt(move _126) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_130);
        _130 = ((_108 as Continue).0: ());
        _107 = _130;
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _203 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _135 = &((*_203).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _134 = &(*_135);
        StorageLive(_136);
        StorageLive(_137);
        _204 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _137 = &((*_204).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _205 = deref_copy (*_137);
        _243 = (((_205.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _136 = &(*_243);
        StorageLive(_138);
        StorageLive(_139);
        _206 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _139 = &((*_206).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _207 = deref_copy (*_139);
        _244 = (((_207.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _138 = &(*_244);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _208 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _143 = &((*_208).2: anchor_lang::prelude::Signer<'_>);
        _142 = &(*_143);
        _141 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _142) -> [return: bb61, unwind: bb99];
    }

    bb59: {
        StorageLive(_127);
        _127 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb60, unwind: bb99];
    }

    bb60: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_120);
        goto -> bb92;
    }

    bb61: {
        _140 = &(*_141);
        StorageDead(_142);
        StorageLive(_144);
        _144 = _2;
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_34;
        _145 = &(*_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_19;
        _150 = <RefMut<'_, SpotMarket> as Deref>::deref(move _151) -> [return: bb62, unwind: bb99];
    }

    bb62: {
        _149 = &(*_150);
        StorageDead(_151);
        _148 = SpotMarket::has_transfer_hook(move _149) -> [return: bb63, unwind: bb99];
    }

    bb63: {
        switchInt(move _148) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_152);
        _152 = &mut (*_30);
        _147 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _152);
        StorageDead(_152);
        goto -> bb66;
    }

    bb65: {
        StorageDead(_150);
        StorageDead(_149);
        _147 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb66;
    }

    bb66: {
        StorageDead(_148);
        _133 = receive(move _134, move _136, move _138, move _140, move _144, move _145, move _147) -> [return: bb67, unwind: bb99];
    }

    bb67: {
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        _132 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _133) -> [return: bb68, unwind: bb99];
    }

    bb68: {
        StorageDead(_133);
        _153 = discriminant(_132);
        switchInt(move _153) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_157);
        _157 = ((_132 as Continue).0: ());
        _131 = _157;
        StorageDead(_157);
        _225 = discriminant(_132);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_19;
        _162 = <RefMut<'_, SpotMarket> as Deref>::deref(move _163) -> [return: bb72, unwind: bb99];
    }

    bb70: {
        StorageLive(_154);
        _154 = move ((_132 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_156);
        _156 = move _154;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _156) -> [return: bb71, unwind: bb102];
    }

    bb71: {
        StorageDead(_156);
        StorageDead(_154);
        _231 = discriminant(_132);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb94;
    }

    bb72: {
        _161 = &(*_162);
        StorageDead(_163);
        _160 = SpotMarket::validate_max_token_deposits_and_borrows(move _161, const false) -> [return: bb73, unwind: bb99];
    }

    bb73: {
        StorageDead(_161);
        _159 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _160) -> [return: bb74, unwind: bb99];
    }

    bb74: {
        StorageDead(_160);
        _164 = discriminant(_159);
        switchInt(move _164) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_168);
        _168 = ((_159 as Continue).0: ());
        _158 = _168;
        StorageDead(_168);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _209 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _210 = deref_copy ((*_209).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _245 = (((_210.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _172 = &mut (*_245);
        _171 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _172) -> [return: bb78, unwind: bb99];
    }

    bb76: {
        StorageLive(_165);
        _165 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb77, unwind: bb99];
    }

    bb77: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb94;
    }

    bb78: {
        StorageDead(_172);
        _170 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _171) -> [return: bb79, unwind: bb99];
    }

    bb79: {
        StorageDead(_171);
        _173 = discriminant(_170);
        switchInt(move _173) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_177);
        _177 = ((_170 as Continue).0: ());
        _169 = _177;
        StorageDead(_177);
        _227 = discriminant(_170);
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_19;
        _183 = &(*_184);
        _182 = <RefMut<'_, SpotMarket> as Deref>::deref(move _183) -> [return: bb83, unwind: bb99];
    }

    bb81: {
        StorageLive(_174);
        _174 = move ((_170 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_176);
        _176 = move _174;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _176) -> [return: bb82, unwind: bb101];
    }

    bb82: {
        StorageDead(_176);
        StorageDead(_174);
        _229 = discriminant(_170);
        StorageDead(_170);
        StorageDead(_169);
        goto -> bb94;
    }

    bb83: {
        _181 = &(*_182);
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _211 = deref_copy (_1.1: &mut instructions::user::RevenuePoolDeposit<'_>);
        _212 = deref_copy ((*_211).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _246 = (((_212.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _189 = &(*_246);
        _188 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _189) -> [return: bb84, unwind: bb99];
    }

    bb84: {
        _187 = &(*_188);
        _186 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _187) -> [return: bb85, unwind: bb99];
    }

    bb85: {
        StorageDead(_189);
        StorageDead(_187);
        _185 = ((*_186).2: u64);
        _180 = validate_spot_market_vault_amount(move _181, move _185) -> [return: bb86, unwind: bb99];
    }

    bb86: {
        StorageDead(_185);
        StorageDead(_181);
        _179 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _180) -> [return: bb87, unwind: bb99];
    }

    bb87: {
        StorageDead(_180);
        _190 = discriminant(_179);
        switchInt(move _190) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        StorageLive(_194);
        _194 = ((_179 as Continue).0: i64);
        _178 = _194;
        StorageDead(_194);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_195);
        _195 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _195);
        StorageDead(_195);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        drop(_19) -> [return: bb91, unwind: bb100];
    }

    bb89: {
        StorageLive(_191);
        _191 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb90, unwind: bb99];
    }

    bb90: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb94;
    }

    bb91: {
        StorageDead(_19);
        goto -> bb96;
    }

    bb92: {
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb94;
    }

    bb93: {
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        drop(_19) -> [return: bb95, unwind: bb100];
    }

    bb95: {
        StorageDead(_19);
        goto -> bb96;
    }

    bb96: {
        return;
    }

    bb97 (cleanup): {
        drop(_85) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_66) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_19) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        resume;
    }

    bb101 (cleanup): {
        _237 = discriminant(_170);
        goto -> bb99;
    }

    bb102 (cleanup): {
        _238 = discriminant(_132);
        goto -> bb99;
    }

    bb103 (cleanup): {
        _239 = discriminant(_52);
        goto -> bb99;
    }

    bb104 (cleanup): {
        _240 = discriminant(_20);
        goto -> bb100;
    }

    bb105 (cleanup): {
        _241 = discriminant(_4);
        goto -> bb100;
    }
}
