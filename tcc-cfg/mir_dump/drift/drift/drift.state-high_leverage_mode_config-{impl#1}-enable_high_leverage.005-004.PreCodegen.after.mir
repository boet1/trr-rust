// MIR for `high_leverage_mode_config::<impl at programs/drift/src/state/high_leverage_mode_config.rs:28:1: 28:28>::enable_high_leverage` after PreCodegen

fn high_leverage_mode_config::<impl at programs/drift/src/state/high_leverage_mode_config.rs:28:1: 28:28>::enable_high_leverage(_1: &mut HighLeverageModeConfig, _2: &mut User) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug user => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &state::user::MarginMode;
    let mut _6: &state::user::MarginMode;
    let _7: state::user::MarginMode;
    let mut _8: !;
    let mut _9: ();
    let _10: ();
    let mut _11: bool;
    let mut _12: &state::user::MarginMode;
    let mut _13: &state::user::MarginMode;
    let _14: state::user::MarginMode;
    let mut _15: u32;
    let mut _16: u32;
    let mut _17: state::user::MarginMode;
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _20: std::result::Result<(), error::ErrorCode>;
    let mut _21: bool;
    let mut _22: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _23: ();
    let _24: error::ErrorCode;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 2];
    let _35: &[&str; 2];
    let _36: [&str; 2];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &error::ErrorCode;
    let _43: &error::ErrorCode;
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: error::ErrorCode;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: ();
    let mut _53: u32;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _55: std::result::Result<u32, error::ErrorCode>;
    let mut _56: u32;
    let mut _57: isize;
    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _61: u32;
    let _62: ();
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _64: std::result::Result<(), error::ErrorCode>;
    let mut _65: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _66: isize;
    let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: ();
    let mut _71: ();
    let mut _73: &state::user::MarginMode;
    let mut _74: &state::user::MarginMode;
    scope 1 {
        debug error_code => _24;
        let _31: std::string::String;
        let mut _72: &[&str; 2];
        scope 2 {
            debug res => _31;
        }
    }
    scope 3 {
        debug residual => _49;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _52;
        scope 6 {
        }
    }
    scope 7 {
        debug residual => _58;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _61;
        scope 10 {
        }
    }
    scope 11 {
        debug residual => _67;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _70;
        scope 14 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_2).26: state::user::MarginMode);
        StorageLive(_6);
        _74 = const _;
        _6 = &(*_74);
        _4 = <MarginMode as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        _9 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb35;
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_2).26: state::user::MarginMode);
        StorageLive(_13);
        _73 = const _;
        _13 = &(*_73);
        _11 = <MarginMode as PartialEq>::eq(move _12, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _11) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: u32);
        _15 = core::num::<impl u32>::saturating_sub(move _16, const 1_u32) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        ((*_1).4: u32) = move _15;
        StorageDead(_15);
        _10 = const ();
        goto -> bb8;
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = const ();
        goto -> bb8;
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_17);
        _17 = MarginMode::HighLeverage;
        ((*_2).26: state::user::MarginMode) = move _17;
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_1);
        _21 = HighLeverageModeConfig::is_reduce_only(move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _21) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_22);
        StorageLive(_24);
        _24 = error::ErrorCode::DefaultError;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _72 = const _;
        _35 = &(*_72);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_24;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _42) -> [return: bb12, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = ();
        _20 = std::result::Result::<(), error::ErrorCode>::Ok(move _23);
        StorageDead(_23);
        goto -> bb19;
    }

    bb12: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        StorageDead(_26);
        drop(_30) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = const "high leverage mode config reduce only";
        _45 = &(*_46);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_47);
        _47 = _24;
        _20 = std::result::Result::<(), error::ErrorCode>::Err(move _47);
        StorageDead(_47);
        StorageDead(_24);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_21);
        _19 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _20) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_20);
        _48 = discriminant(_19);
        switchInt(move _48) -> [0: bb21, 1: bb23, otherwise: bb22];
    }

    bb21: {
        StorageLive(_52);
        _52 = ((_19 as Continue).0: ());
        _18 = _52;
        StorageDead(_52);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = ((*_1).1: u32);
        _55 = <u32 as SafeMath>::safe_add(move _56, const 1_u32) -> [return: bb25, unwind continue];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        StorageLive(_49);
        _49 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb35;
    }

    bb25: {
        StorageDead(_56);
        _54 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb22];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: u32);
        _53 = _61;
        StorageDead(_61);
        ((*_1).1: u32) = move _53;
        StorageDead(_53);
        StorageDead(_54);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_1);
        _64 = HighLeverageModeConfig::validate(move _65) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_54);
        goto -> bb35;
    }

    bb30: {
        StorageDead(_65);
        _63 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _64) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb32, 1: bb33, otherwise: bb22];
    }

    bb32: {
        StorageLive(_70);
        _70 = ((_63 as Continue).0: ());
        _62 = _70;
        StorageDead(_70);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_71);
        _71 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb35;
    }

    bb33: {
        StorageLive(_67);
        _67 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_30) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }
}
