// MIR for `state::oracle::<impl at programs/drift/src/state/oracle.rs:680:1: 680:21>::validate` after PreCodegen

fn state::oracle::<impl at programs/drift/src/state/oracle.rs:680:1: 680:21>::validate(_1: &PrelaunchOracle) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: ();
    let _8: error::ErrorCode;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &error::ErrorCode;
    let _27: &error::ErrorCode;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 1];
    let _38: &[&str; 1];
    let _39: [&str; 1];
    let mut _40: error::ErrorCode;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: ();
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: i64;
    let mut _51: ();
    let _52: error::ErrorCode;
    let _53: ();
    let mut _54: &str;
    let _55: &str;
    let mut _56: &std::string::String;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[&str; 2];
    let _63: &[&str; 2];
    let _64: [&str; 2];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let mut _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &error::ErrorCode;
    let _71: &error::ErrorCode;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 1];
    let _82: &[&str; 1];
    let _83: [&str; 1];
    let mut _84: error::ErrorCode;
    let mut _85: isize;
    let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _89: ();
    let _90: ();
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _92: std::result::Result<(), error::ErrorCode>;
    let mut _93: bool;
    let mut _94: i64;
    let mut _95: i64;
    let mut _96: ();
    let _97: error::ErrorCode;
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: &std::string::String;
    let _102: &std::string::String;
    let _103: std::string::String;
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[&str; 2];
    let _108: &[&str; 2];
    let _109: [&str; 2];
    let mut _110: &[core::fmt::rt::Argument<'_>];
    let mut _111: &[core::fmt::rt::Argument<'_>; 1];
    let _112: &[core::fmt::rt::Argument<'_>; 1];
    let _113: [core::fmt::rt::Argument<'_>; 1];
    let mut _114: core::fmt::rt::Argument<'_>;
    let mut _115: &error::ErrorCode;
    let _116: &error::ErrorCode;
    let _117: ();
    let mut _118: &str;
    let _119: &str;
    let mut _120: &std::string::String;
    let _121: &std::string::String;
    let _122: std::string::String;
    let mut _124: std::fmt::Arguments<'_>;
    let mut _125: &[&str];
    let mut _126: &[&str; 2];
    let _127: &[&str; 2];
    let _128: [&str; 2];
    let mut _129: &[core::fmt::rt::Argument<'_>];
    let mut _130: &[core::fmt::rt::Argument<'_>; 2];
    let _131: &[core::fmt::rt::Argument<'_>; 2];
    let _132: [core::fmt::rt::Argument<'_>; 2];
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: &i64;
    let _135: &i64;
    let mut _136: core::fmt::rt::Argument<'_>;
    let mut _137: &i64;
    let _138: &i64;
    let mut _139: error::ErrorCode;
    let mut _140: isize;
    let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _144: ();
    let mut _145: ();
    scope 1 {
        debug error_code => _8;
        let _15: std::string::String;
        let _34: std::string::String;
        let mut _150: &[&str; 1];
        let mut _151: &[&str; 2];
        scope 2 {
            debug res => _15;
        }
        scope 3 {
            debug res => _34;
        }
    }
    scope 4 {
        debug residual => _42;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _45;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _52;
        let _59: std::string::String;
        let _78: std::string::String;
        let mut _148: &[&str; 1];
        let mut _149: &[&str; 2];
        scope 9 {
            debug res => _59;
        }
        scope 10 {
            debug res => _78;
        }
    }
    scope 11 {
        debug residual => _86;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _89;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _97;
        let _104: std::string::String;
        let _123: std::string::String;
        let mut _146: &[&str; 2];
        let mut _147: &[&str; 2];
        scope 16 {
            debug res => _104;
        }
        scope 17 {
            debug res => _123;
        }
    }
    scope 18 {
        debug residual => _141;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _144;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: i64);
        _5 = Ne(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb14;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = error::ErrorCode::InvalidOracle;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _151 = const _;
        _19 = &(*_151);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_8;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb64];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb65];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _150 = const _;
        _38 = &(*_150);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        _35 = Arguments::<'_>::new_const(move _36) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb11, unwind: bb63];
    }

    bb11: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb12, unwind: bb63];
    }

    bb12: {
        StorageDead(_29);
        drop(_33) -> [return: bb13, unwind: bb65];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_40);
        _40 = _8;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _40);
        StorageDead(_40);
        StorageDead(_8);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_4);
        _41 = discriminant(_3);
        switchInt(move _41) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_45);
        _45 = ((_3 as Continue).0: ());
        _2 = _45;
        StorageDead(_45);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_1).1: i64);
        _49 = Ne(move _50, const 0_i64);
        switchInt(move _49) -> [0: bb21, otherwise: bb20];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_42);
        _42 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb58;
    }

    bb20: {
        StorageDead(_50);
        StorageLive(_51);
        _51 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        goto -> bb33;
    }

    bb21: {
        StorageDead(_50);
        StorageLive(_52);
        _52 = error::ErrorCode::InvalidOracle;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _149 = const _;
        _63 = &(*_149);
        _62 = &(*_63);
        _61 = move _62 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_52;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _70) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_70);
        _68 = [move _69];
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = move _66 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_66);
        _60 = Arguments::<'_>::new_v1(move _61, move _65) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_61);
        _59 = format(move _60) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_60);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_63);
        _58 = move _59;
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <String as Deref>::deref(move _56) -> [return: bb25, unwind: bb62];
    }

    bb25: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = solana_program::log::sol_log(move _54) -> [return: bb26, unwind: bb62];
    }

    bb26: {
        StorageDead(_54);
        drop(_58) -> [return: bb27, unwind: bb65];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _148 = const _;
        _82 = &(*_148);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        _79 = Arguments::<'_>::new_const(move _80) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_79);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb30, unwind: bb61];
    }

    bb30: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        StorageDead(_73);
        drop(_77) -> [return: bb32, unwind: bb65];
    }

    bb32: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_84);
        _84 = _52;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_52);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_48);
        _85 = discriminant(_47);
        switchInt(move _85) -> [0: bb35, 1: bb36, otherwise: bb17];
    }

    bb35: {
        StorageLive(_89);
        _89 = ((_47 as Continue).0: ());
        _46 = _89;
        StorageDead(_89);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ((*_1).0: i64);
        StorageLive(_95);
        _95 = ((*_1).1: i64);
        _93 = Le(move _94, move _95);
        switchInt(move _93) -> [0: bb39, otherwise: bb38];
    }

    bb36: {
        StorageLive(_86);
        _86 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb58;
    }

    bb38: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_96);
        _96 = ();
        _92 = std::result::Result::<(), error::ErrorCode>::Ok(move _96);
        StorageDead(_96);
        goto -> bb53;
    }

    bb39: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_97);
        _97 = error::ErrorCode::InvalidOracle;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _147 = const _;
        _108 = &(*_147);
        _107 = &(*_108);
        _106 = move _107 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_97;
        _115 = &(*_116);
        _114 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _115) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_115);
        _113 = [move _114];
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = move _111 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_111);
        _105 = Arguments::<'_>::new_v1(move _106, move _110) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_110);
        StorageDead(_106);
        _104 = format(move _105) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_105);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_108);
        _103 = move _104;
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = <String as Deref>::deref(move _101) -> [return: bb43, unwind: bb60];
    }

    bb43: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb44, unwind: bb60];
    }

    bb44: {
        StorageDead(_99);
        drop(_103) -> [return: bb45, unwind: bb65];
    }

    bb45: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _146 = const _;
        _127 = &(*_146);
        _126 = &(*_127);
        _125 = move _126 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_126);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &((*_1).0: i64);
        _134 = &(*_135);
        _133 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _134) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_134);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &((*_1).1: i64);
        _137 = &(*_138);
        _136 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _137) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_137);
        _132 = [move _133, move _136];
        StorageDead(_136);
        StorageDead(_133);
        _131 = &_132;
        _130 = &(*_131);
        _129 = move _130 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_130);
        _124 = Arguments::<'_>::new_v1(move _125, move _129) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_129);
        StorageDead(_125);
        _123 = format(move _124) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_127);
        _122 = move _123;
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = <String as Deref>::deref(move _120) -> [return: bb50, unwind: bb59];
    }

    bb50: {
        _118 = &(*_119);
        StorageDead(_120);
        _117 = solana_program::log::sol_log(move _118) -> [return: bb51, unwind: bb59];
    }

    bb51: {
        StorageDead(_118);
        drop(_122) -> [return: bb52, unwind: bb65];
    }

    bb52: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageLive(_139);
        _139 = _97;
        _92 = std::result::Result::<(), error::ErrorCode>::Err(move _139);
        StorageDead(_139);
        StorageDead(_97);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_93);
        _91 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _92) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_92);
        _140 = discriminant(_91);
        switchInt(move _140) -> [0: bb55, 1: bb56, otherwise: bb17];
    }

    bb55: {
        StorageLive(_144);
        _144 = ((_91 as Continue).0: ());
        _90 = _144;
        StorageDead(_144);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_145);
        _145 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _145);
        StorageDead(_145);
        goto -> bb58;
    }

    bb56: {
        StorageLive(_141);
        _141 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_122) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_103) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_77) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_58) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_33) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_14) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        resume;
    }
}
