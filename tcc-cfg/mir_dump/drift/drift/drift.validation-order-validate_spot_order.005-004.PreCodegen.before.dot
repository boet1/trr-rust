digraph Mir_0_4567 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_spot_order(_1: &amp;ReErased state::user::Order, _2: u64, _3: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: isize;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _7: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _8: &amp;ReErased state::user::Order;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: ();<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _17: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _18: &amp;ReErased state::user::Order;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: u64;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: ();<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _27: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _28: &amp;ReErased state::user::Order;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: ();<br align="left"/>let mut _36: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _37: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _38: &amp;ReErased state::user::Order;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: isize;<br align="left"/>let _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _43: !;<br align="left"/>let mut _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _45: ();<br align="left"/>let mut _46: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _47: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _48: &amp;ReErased state::user::Order;<br align="left"/>let mut _49: u64;<br align="left"/>let mut _50: u64;<br align="left"/>let mut _51: isize;<br align="left"/>let _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _55: ();<br align="left"/>let mut _56: ();<br align="left"/>debug order =&gt; _1;<br align="left"/>debug step_size =&gt; _2;<br align="left"/>debug min_order_size =&gt; _3;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _42;<br align="left"/>debug val =&gt; _45;<br align="left"/>debug residual =&gt; _52;<br align="left"/>debug val =&gt; _55;<br align="left"/>>;
    bb0__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_5 = discriminant(((*_1).13: state::user::OrderType))<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = &amp;(*_1)<br/>StorageLive(_49)<br/>_49 = _2<br/>StorageLive(_50)<br/>_50 = _3<br/></td></tr><tr><td align="left">_47 = validate_oracle_order(move _48, move _49, move _50)</td></tr></table>>];
    bb2__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_1)<br/>StorageLive(_9)<br/>_9 = _2<br/>StorageLive(_10)<br/>_10 = _3<br/></td></tr><tr><td align="left">_7 = validate_market_order(move _8, move _9, move _10)</td></tr></table>>];
    bb4__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb5__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_11 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb6__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Continue).0: ())<br/>_4 = _15<br/>StorageDead(_15)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb8__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;(*_1)<br/>StorageLive(_19)<br/>_19 = _2<br/>StorageLive(_20)<br/>_20 = _3<br/></td></tr><tr><td align="left">_17 = validate_spot_limit_order(move _18, move _19, move _20)</td></tr></table>>];
    bb10__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb11__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_21 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb12__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_16 as Continue).0: ())<br/>_4 = _25<br/>StorageDead(_25)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb14__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;(*_1)<br/>StorageLive(_29)<br/>_29 = _2<br/>StorageLive(_30)<br/>_30 = _3<br/></td></tr><tr><td align="left">_27 = validate_trigger_market_order(move _28, move _29, move _30)</td></tr></table>>];
    bb16__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb17__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_31 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb18__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_26 as Continue).0: ())<br/>_4 = _35<br/>StorageDead(_35)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb20__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = &amp;(*_1)<br/>StorageLive(_39)<br/>_39 = _2<br/>StorageLive(_40)<br/>_40 = _3<br/></td></tr><tr><td align="left">_37 = validate_trigger_limit_order(move _38, move _39, move _40)</td></tr></table>>];
    bb22__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _37)</td></tr></table>>];
    bb23__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_41 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb24__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_36 as Continue).0: ())<br/>_4 = _45<br/>StorageDead(_45)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_36 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_44)<br/>_44 = _42<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _44)</td></tr></table>>];
    bb26__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_46 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _47)</td></tr></table>>];
    bb28__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>_51 = discriminant(_46)<br/></td></tr><tr><td align="left">switchInt(move _51)</td></tr></table>>];
    bb29__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_46 as Continue).0: ())<br/>_4 = _55<br/>StorageDead(_55)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_46 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_54)<br/>_54 = _52<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _54)</td></tr></table>>];
    bb31__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_52)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_56)<br/>_56 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _56)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_4567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4567 -> bb3__0_4567 [label="0"];
    bb0__0_4567 -> bb9__0_4567 [label="1"];
    bb0__0_4567 -> bb15__0_4567 [label="2"];
    bb0__0_4567 -> bb21__0_4567 [label="3"];
    bb0__0_4567 -> bb1__0_4567 [label="4"];
    bb0__0_4567 -> bb2__0_4567 [label="otherwise"];
    bb1__0_4567 -> bb27__0_4567 [label="return"];
    bb3__0_4567 -> bb4__0_4567 [label="return"];
    bb4__0_4567 -> bb5__0_4567 [label="return"];
    bb5__0_4567 -> bb6__0_4567 [label="0"];
    bb5__0_4567 -> bb7__0_4567 [label="1"];
    bb5__0_4567 -> bb2__0_4567 [label="otherwise"];
    bb6__0_4567 -> bb32__0_4567 [label=""];
    bb7__0_4567 -> bb8__0_4567 [label="return"];
    bb8__0_4567 -> bb33__0_4567 [label=""];
    bb9__0_4567 -> bb10__0_4567 [label="return"];
    bb10__0_4567 -> bb11__0_4567 [label="return"];
    bb11__0_4567 -> bb12__0_4567 [label="0"];
    bb11__0_4567 -> bb13__0_4567 [label="1"];
    bb11__0_4567 -> bb2__0_4567 [label="otherwise"];
    bb12__0_4567 -> bb32__0_4567 [label=""];
    bb13__0_4567 -> bb14__0_4567 [label="return"];
    bb14__0_4567 -> bb33__0_4567 [label=""];
    bb15__0_4567 -> bb16__0_4567 [label="return"];
    bb16__0_4567 -> bb17__0_4567 [label="return"];
    bb17__0_4567 -> bb18__0_4567 [label="0"];
    bb17__0_4567 -> bb19__0_4567 [label="1"];
    bb17__0_4567 -> bb2__0_4567 [label="otherwise"];
    bb18__0_4567 -> bb32__0_4567 [label=""];
    bb19__0_4567 -> bb20__0_4567 [label="return"];
    bb20__0_4567 -> bb33__0_4567 [label=""];
    bb21__0_4567 -> bb22__0_4567 [label="return"];
    bb22__0_4567 -> bb23__0_4567 [label="return"];
    bb23__0_4567 -> bb24__0_4567 [label="0"];
    bb23__0_4567 -> bb25__0_4567 [label="1"];
    bb23__0_4567 -> bb2__0_4567 [label="otherwise"];
    bb24__0_4567 -> bb32__0_4567 [label=""];
    bb25__0_4567 -> bb26__0_4567 [label="return"];
    bb26__0_4567 -> bb33__0_4567 [label=""];
    bb27__0_4567 -> bb28__0_4567 [label="return"];
    bb28__0_4567 -> bb29__0_4567 [label="0"];
    bb28__0_4567 -> bb30__0_4567 [label="1"];
    bb28__0_4567 -> bb2__0_4567 [label="otherwise"];
    bb29__0_4567 -> bb32__0_4567 [label=""];
    bb30__0_4567 -> bb31__0_4567 [label="return"];
    bb31__0_4567 -> bb33__0_4567 [label=""];
    bb32__0_4567 -> bb34__0_4567 [label=""];
    bb33__0_4567 -> bb34__0_4567 [label=""];
}
