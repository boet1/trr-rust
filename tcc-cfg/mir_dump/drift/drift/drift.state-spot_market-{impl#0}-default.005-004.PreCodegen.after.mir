// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:212:1: 212:28>::default` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:212:1: 212:28>::default() -> SpotMarket {
    let mut _0: state::spot_market::SpotMarket;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: anchor_lang::prelude::Pubkey;
    let mut _5: [u8; 32];
    let mut _6: state::oracle::HistoricalOracleData;
    let mut _7: state::oracle::HistoricalIndexData;
    let mut _8: state::perp_market::PoolBalance;
    let mut _9: state::perp_market::PoolBalance;
    let mut _10: state::spot_market::InsuranceFund;
    let mut _11: state::oracle::OracleSource;
    let mut _12: state::perp_market::MarketStatus;
    let mut _13: state::spot_market::AssetTier;
    let mut _14: [u8; 40];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = [const 0_u8; 32];
        StorageLive(_6);
        _6 = <HistoricalOracleData as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_7);
        _7 = <HistoricalIndexData as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_8);
        _8 = <PoolBalance as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_9);
        _9 = <PoolBalance as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_10);
        _10 = <InsuranceFund as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_11);
        _11 = <state::oracle::OracleSource as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_12);
        _12 = <state::perp_market::MarketStatus as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_13);
        _13 = <state::spot_market::AssetTier as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_14);
        _14 = [const 0_u8; 40];
        _0 = SpotMarket { pubkey: move _1, oracle: move _2, mint: move _3, vault: move _4, name: move _5, historical_oracle_data: move _6, historical_index_data: move _7, revenue_pool: move _8, spot_fee_pool: move _9, insurance_fund: move _10, total_spot_fee: const 0_u128, deposit_balance: const 0_u128, borrow_balance: const 0_u128, cumulative_deposit_interest: const 0_u128, cumulative_borrow_interest: const 0_u128, total_social_loss: const 0_u128, total_quote_social_loss: const 0_u128, withdraw_guard_threshold: const 0_u64, max_token_deposits: const 0_u64, deposit_token_twap: const 0_u64, borrow_token_twap: const 0_u64, utilization_twap: const 0_u64, last_interest_ts: const 0_u64, last_twap_ts: const 0_u64, expiry_ts: const 0_i64, order_step_size: const 1_u64, order_tick_size: const 0_u64, min_order_size: const 0_u64, max_position_size: const 0_u64, next_fill_record_id: const 0_u64, next_deposit_record_id: const 0_u64, initial_asset_weight: const 0_u32, maintenance_asset_weight: const 0_u32, initial_liability_weight: const 0_u32, maintenance_liability_weight: const 0_u32, imf_factor: const 0_u32, liquidator_fee: const 0_u32, if_liquidation_fee: const 0_u32, optimal_utilization: const 0_u32, optimal_borrow_rate: const 0_u32, max_borrow_rate: const 0_u32, decimals: const 0_u32, market_index: const 0_u16, orders_enabled: const false, oracle_source: move _11, status: move _12, asset_tier: move _13, paused_operations: const 0_u8, if_paused_operations: const 0_u8, fee_adjustment: const 0_i16, max_token_borrows_fraction: const 0_u16, flash_loan_amount: const 0_u64, flash_loan_initial_token_amount: const 0_u64, total_swap_fee: const 0_u64, scale_initial_asset_weight_start: const 0_u64, min_borrow_rate: const 0_u8, fuel_boost_deposits: const 0_u8, fuel_boost_borrows: const 0_u8, fuel_boost_taker: const 0_u8, fuel_boost_maker: const 0_u8, fuel_boost_insurance: const 0_u8, token_program_flag: const 0_u8, pool_id: const 0_u8, padding: move _14 };
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
