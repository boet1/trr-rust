// MIR for `validate_user_deletion` after PreCodegen

fn validate_user_deletion(_1: &User, _2: &UserStats, _3: &state::state::State, _4: i64) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug user_stats => _2;
    debug state => _3;
    debug now => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: bool;
    let mut _9: &state::user::UserStats;
    let mut _10: bool;
    let mut _11: u16;
    let mut _12: ();
    let _13: error::ErrorCode;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &error::ErrorCode;
    let _32: &error::ErrorCode;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: error::ErrorCode;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: ();
    let _42: ();
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _44: std::result::Result<(), error::ErrorCode>;
    let mut _45: bool;
    let mut _46: &state::user::User;
    let mut _47: ();
    let _48: error::ErrorCode;
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::string::String;
    let _53: &std::string::String;
    let _54: std::string::String;
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let mut _58: &[&str; 2];
    let _59: &[&str; 2];
    let _60: [&str; 2];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let mut _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: [core::fmt::rt::Argument<'_>; 1];
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &error::ErrorCode;
    let _67: &error::ErrorCode;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: error::ErrorCode;
    let mut _72: isize;
    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: ();
    let _77: ();
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _79: std::result::Result<(), error::ErrorCode>;
    let mut _80: bool;
    let mut _81: &state::user::User;
    let mut _82: ();
    let _83: error::ErrorCode;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: &std::string::String;
    let _88: &std::string::String;
    let _89: std::string::String;
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 2];
    let _94: &[&str; 2];
    let _95: [&str; 2];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let mut _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: &[core::fmt::rt::Argument<'_>; 1];
    let _99: [core::fmt::rt::Argument<'_>; 1];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &error::ErrorCode;
    let _102: &error::ErrorCode;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: error::ErrorCode;
    let mut _107: isize;
    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _111: ();
    let _112: ();
    let mut _113: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _114: &[state::user::PerpPosition; 8];
    let mut _115: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _116: ();
    let _117: ();
    let mut _118: std::option::Option<&state::user::PerpPosition>;
    let mut _119: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _120: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _121: isize;
    let mut _122: !;
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _126: std::result::Result<(), error::ErrorCode>;
    let mut _127: bool;
    let mut _128: &state::user::PerpPosition;
    let mut _129: ();
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 2];
    let _141: &[&str; 2];
    let _142: [&str; 2];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: [core::fmt::rt::Argument<'_>; 1];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &error::ErrorCode;
    let _149: &error::ErrorCode;
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 1];
    let _160: &[&str; 1];
    let _161: [&str; 1];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &u16;
    let _168: &u16;
    let mut _169: error::ErrorCode;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _175: ();
    let mut _176: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _177: &[state::user::SpotPosition; 8];
    let mut _178: std::slice::Iter<'_, state::user::SpotPosition>;
    let _179: ();
    let mut _180: std::option::Option<&state::user::SpotPosition>;
    let mut _181: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _182: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _183: isize;
    let mut _184: !;
    let _186: ();
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _188: std::result::Result<(), error::ErrorCode>;
    let mut _189: bool;
    let mut _190: &state::user::SpotPosition;
    let mut _191: ();
    let _193: ();
    let mut _194: &str;
    let _195: &str;
    let mut _196: &std::string::String;
    let _197: &std::string::String;
    let _198: std::string::String;
    let mut _200: std::fmt::Arguments<'_>;
    let mut _201: &[&str];
    let mut _202: &[&str; 2];
    let _203: &[&str; 2];
    let _204: [&str; 2];
    let mut _205: &[core::fmt::rt::Argument<'_>];
    let mut _206: &[core::fmt::rt::Argument<'_>; 1];
    let _207: &[core::fmt::rt::Argument<'_>; 1];
    let _208: [core::fmt::rt::Argument<'_>; 1];
    let mut _209: core::fmt::rt::Argument<'_>;
    let mut _210: &error::ErrorCode;
    let _211: &error::ErrorCode;
    let _212: ();
    let mut _213: &str;
    let _214: &str;
    let mut _215: &std::string::String;
    let _216: &std::string::String;
    let _217: std::string::String;
    let mut _219: std::fmt::Arguments<'_>;
    let mut _220: &[&str];
    let mut _221: &[&str; 1];
    let _222: &[&str; 1];
    let _223: [&str; 1];
    let mut _224: &[core::fmt::rt::Argument<'_>];
    let mut _225: &[core::fmt::rt::Argument<'_>; 1];
    let _226: &[core::fmt::rt::Argument<'_>; 1];
    let _227: [core::fmt::rt::Argument<'_>; 1];
    let mut _228: core::fmt::rt::Argument<'_>;
    let mut _229: &u16;
    let _230: &u16;
    let mut _231: error::ErrorCode;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _237: ();
    let mut _238: std::slice::Iter<'_, state::user::Order>;
    let mut _239: &[state::user::Order; 32];
    let mut _240: std::slice::Iter<'_, state::user::Order>;
    let _241: ();
    let mut _242: std::option::Option<&state::user::Order>;
    let mut _243: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _244: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _245: isize;
    let mut _246: !;
    let _248: ();
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _250: std::result::Result<(), error::ErrorCode>;
    let mut _251: bool;
    let mut _252: &state::user::Order;
    let mut _253: ();
    let _255: ();
    let mut _256: &str;
    let _257: &str;
    let mut _258: &std::string::String;
    let _259: &std::string::String;
    let _260: std::string::String;
    let mut _262: std::fmt::Arguments<'_>;
    let mut _263: &[&str];
    let mut _264: &[&str; 2];
    let _265: &[&str; 2];
    let _266: [&str; 2];
    let mut _267: &[core::fmt::rt::Argument<'_>];
    let mut _268: &[core::fmt::rt::Argument<'_>; 1];
    let _269: &[core::fmt::rt::Argument<'_>; 1];
    let _270: [core::fmt::rt::Argument<'_>; 1];
    let mut _271: core::fmt::rt::Argument<'_>;
    let mut _272: &error::ErrorCode;
    let _273: &error::ErrorCode;
    let _274: ();
    let mut _275: &str;
    let _276: &str;
    let mut _277: error::ErrorCode;
    let mut _278: isize;
    let mut _280: !;
    let mut _281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _283: ();
    let mut _284: bool;
    let mut _285: u16;
    let _286: i64;
    let mut _287: &state::user::UserStats;
    let mut _288: i64;
    let mut _289: bool;
    let mut _290: i64;
    let _291: ();
    let mut _292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _293: std::result::Result<(), error::ErrorCode>;
    let mut _294: bool;
    let mut _295: ();
    let _297: ();
    let mut _298: &str;
    let _299: &str;
    let mut _300: &std::string::String;
    let _301: &std::string::String;
    let _302: std::string::String;
    let mut _304: std::fmt::Arguments<'_>;
    let mut _305: &[&str];
    let mut _306: &[&str; 2];
    let _307: &[&str; 2];
    let _308: [&str; 2];
    let mut _309: &[core::fmt::rt::Argument<'_>];
    let mut _310: &[core::fmt::rt::Argument<'_>; 1];
    let _311: &[core::fmt::rt::Argument<'_>; 1];
    let _312: [core::fmt::rt::Argument<'_>; 1];
    let mut _313: core::fmt::rt::Argument<'_>;
    let mut _314: &error::ErrorCode;
    let _315: &error::ErrorCode;
    let _316: ();
    let mut _317: &str;
    let _318: &str;
    let mut _319: &std::string::String;
    let _320: &std::string::String;
    let _321: std::string::String;
    let mut _323: std::fmt::Arguments<'_>;
    let mut _324: &[&str];
    let mut _325: &[&str; 3];
    let _326: &[&str; 3];
    let _327: [&str; 3];
    let mut _328: &[core::fmt::rt::Argument<'_>];
    let mut _329: &[core::fmt::rt::Argument<'_>; 2];
    let _330: &[core::fmt::rt::Argument<'_>; 2];
    let _331: [core::fmt::rt::Argument<'_>; 2];
    let mut _332: core::fmt::rt::Argument<'_>;
    let mut _333: &i64;
    let _334: &i64;
    let mut _335: core::fmt::rt::Argument<'_>;
    let mut _336: &i64;
    let _337: &i64;
    let _338: i64;
    let mut _339: error::ErrorCode;
    let mut _340: isize;
    let mut _342: !;
    let mut _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _345: ();
    scope 1 {
        debug error_code => _13;
        let _20: std::string::String;
        let mut _356: &[&str; 2];
        scope 2 {
            debug res => _20;
        }
    }
    scope 3 {
        debug residual => _38;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _41;
        scope 6 {
        }
    }
    scope 7 {
        debug error_code => _48;
        let _55: std::string::String;
        let mut _355: &[&str; 2];
        scope 8 {
            debug res => _55;
        }
    }
    scope 9 {
        debug residual => _73;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _76;
        scope 12 {
        }
    }
    scope 13 {
        debug error_code => _83;
        let _90: std::string::String;
        let mut _354: &[&str; 2];
        scope 14 {
            debug res => _90;
        }
    }
    scope 15 {
        debug residual => _108;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _111;
        scope 18 {
        }
    }
    scope 19 {
        debug iter => _115;
        let _123: &state::user::PerpPosition;
        scope 20 {
            debug perp_position => _123;
            let _130: error::ErrorCode;
            let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _174: ();
            scope 21 {
                debug error_code => _130;
                let _137: std::string::String;
                let _156: std::string::String;
                let mut _346: &[&str; 1];
                let mut _347: &[&str; 2];
                scope 22 {
                    debug res => _137;
                }
                scope 23 {
                    debug res => _156;
                }
            }
            scope 24 {
                debug residual => _171;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _174;
                scope 27 {
                }
            }
        }
    }
    scope 28 {
        debug iter => _178;
        let _185: &state::user::SpotPosition;
        scope 29 {
            debug spot_position => _185;
            let _192: error::ErrorCode;
            let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _236: ();
            scope 30 {
                debug error_code => _192;
                let _199: std::string::String;
                let _218: std::string::String;
                let mut _348: &[&str; 1];
                let mut _349: &[&str; 2];
                scope 31 {
                    debug res => _199;
                }
                scope 32 {
                    debug res => _218;
                }
            }
            scope 33 {
                debug residual => _233;
                scope 34 {
                }
            }
            scope 35 {
                debug val => _236;
                scope 36 {
                }
            }
        }
    }
    scope 37 {
        debug iter => _240;
        let _247: &state::user::Order;
        scope 38 {
            debug order => _247;
            let _254: error::ErrorCode;
            let _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _282: ();
            scope 39 {
                debug error_code => _254;
                let _261: std::string::String;
                let mut _350: &[&str; 2];
                scope 40 {
                    debug res => _261;
                }
            }
            scope 41 {
                debug residual => _279;
                scope 42 {
                }
            }
            scope 43 {
                debug val => _282;
                scope 44 {
                }
            }
        }
    }
    scope 45 {
        debug estimated_user_stats_age => _286;
        let _296: error::ErrorCode;
        let _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _344: ();
        scope 46 {
            debug error_code => _296;
            let _303: std::string::String;
            let _322: std::string::String;
            let mut _351: &i64;
            let mut _352: &[&str; 3];
            let mut _353: &[&str; 2];
            scope 47 {
                debug res => _303;
            }
            scope 48 {
                debug res => _322;
            }
        }
        scope 49 {
            debug residual => _341;
            scope 50 {
            }
        }
        scope 51 {
            debug val => _344;
            scope 52 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_2);
        _8 = UserStats::is_referrer(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).18: u16);
        _10 = Ne(move _11, const 0_u16);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb3: {
        StorageDead(_9);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_11);
        StorageLive(_12);
        _12 = ();
        _7 = std::result::Result::<(), error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        goto -> bb13;
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_13);
        _13 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _356 = const _;
        _24 = &(*_356);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        _29 = [move _30];
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb9, unwind: bb156];
    }

    bb9: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb10, unwind: bb156];
    }

    bb10: {
        StorageDead(_15);
        drop(_19) -> [return: bb11, unwind: bb157];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const "user id 0 cant be deleted if user is a referrer";
        _34 = &(*_35);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = _13;
        _7 = std::result::Result::<(), error::ErrorCode>::Err(move _36);
        StorageDead(_36);
        StorageDead(_13);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_7);
        _37 = discriminant(_6);
        switchInt(move _37) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_41);
        _41 = ((_6 as Continue).0: ());
        _5 = _41;
        StorageDead(_41);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_1);
        _45 = User::is_bankrupt(move _46) -> [return: bb19, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb146;
    }

    bb19: {
        switchInt(move _45) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_46);
        StorageLive(_48);
        _48 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _355 = const _;
        _59 = &(*_355);
        _58 = &(*_59);
        _57 = move _58 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_48;
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _66) -> [return: bb22, unwind continue];
    }

    bb21: {
        StorageDead(_46);
        StorageLive(_47);
        _47 = ();
        _44 = std::result::Result::<(), error::ErrorCode>::Ok(move _47);
        StorageDead(_47);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_66);
        _64 = [move _65];
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = move _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_62);
        _56 = Arguments::<'_>::new_v1(move _57, move _61) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = format(move _56) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        _54 = move _55;
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = <String as Deref>::deref(move _52) -> [return: bb25, unwind: bb155];
    }

    bb25: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb26, unwind: bb155];
    }

    bb26: {
        StorageDead(_50);
        drop(_54) -> [return: bb27, unwind: bb157];
    }

    bb27: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = const "user bankrupt";
        _69 = &(*_70);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_69);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_71);
        _71 = _48;
        _44 = std::result::Result::<(), error::ErrorCode>::Err(move _71);
        StorageDead(_71);
        StorageDead(_48);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_45);
        _43 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _44) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_44);
        _72 = discriminant(_43);
        switchInt(move _72) -> [0: bb31, 1: bb32, otherwise: bb16];
    }

    bb31: {
        StorageLive(_76);
        _76 = ((_43 as Continue).0: ());
        _42 = _76;
        StorageDead(_76);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_1);
        _80 = User::is_being_liquidated(move _81) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_73);
        _73 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb146;
    }

    bb34: {
        switchInt(move _80) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_81);
        StorageLive(_83);
        _83 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _354 = const _;
        _94 = &(*_354);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_83;
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _101) -> [return: bb37, unwind continue];
    }

    bb36: {
        StorageDead(_81);
        StorageLive(_82);
        _82 = ();
        _79 = std::result::Result::<(), error::ErrorCode>::Ok(move _82);
        StorageDead(_82);
        goto -> bb44;
    }

    bb37: {
        StorageDead(_101);
        _99 = [move _100];
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = move _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_97);
        _91 = Arguments::<'_>::new_v1(move _92, move _96) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = format(move _91) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_91);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        _89 = move _90;
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = <String as Deref>::deref(move _87) -> [return: bb40, unwind: bb154];
    }

    bb40: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb41, unwind: bb154];
    }

    bb41: {
        StorageDead(_85);
        drop(_89) -> [return: bb42, unwind: bb157];
    }

    bb42: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = const "user being liquidated";
        _104 = &(*_105);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_104);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_106);
        _106 = _83;
        _79 = std::result::Result::<(), error::ErrorCode>::Err(move _106);
        StorageDead(_106);
        StorageDead(_83);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_80);
        _78 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _79) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_79);
        _107 = discriminant(_78);
        switchInt(move _107) -> [0: bb46, 1: bb47, otherwise: bb16];
    }

    bb46: {
        StorageLive(_111);
        _111 = ((_78 as Continue).0: ());
        _77 = _111;
        StorageDead(_111);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &((*_1).4: [state::user::PerpPosition; 8]);
        _113 = <&[PerpPosition; 8] as IntoIterator>::into_iter(move _114) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_108);
        _108 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb146;
    }

    bb49: {
        StorageDead(_114);
        StorageLive(_115);
        _115 = move _113;
        goto -> bb50;
    }

    bb50: {
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &mut _115;
        _119 = &mut (*_120);
        _118 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _119) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_119);
        _121 = discriminant(_118);
        switchInt(move _121) -> [0: bb53, 1: bb52, otherwise: bb16];
    }

    bb52: {
        StorageLive(_123);
        _123 = ((_118 as Some).0: &state::user::PerpPosition);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(*_123);
        _127 = PerpPosition::is_available(move _128) -> [return: bb54, unwind continue];
    }

    bb53: {
        _112 = const ();
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &((*_1).3: [state::user::SpotPosition; 8]);
        _176 = <&[SpotPosition; 8] as IntoIterator>::into_iter(move _177) -> [return: bb74, unwind continue];
    }

    bb54: {
        switchInt(move _127) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        StorageDead(_128);
        StorageLive(_129);
        _129 = ();
        _126 = std::result::Result::<(), error::ErrorCode>::Ok(move _129);
        StorageDead(_129);
        goto -> bb69;
    }

    bb56: {
        StorageDead(_128);
        StorageLive(_130);
        _130 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _347 = const _;
        _141 = &(*_347);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_130;
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _148) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_148);
        _146 = [move _147];
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_138);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb60, unwind: bb153];
    }

    bb60: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb61, unwind: bb153];
    }

    bb61: {
        StorageDead(_132);
        drop(_136) -> [return: bb62, unwind: bb157];
    }

    bb62: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _346 = const _;
        _160 = &(*_346);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &((*_123).13: u16);
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _167) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_157);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb66, unwind: bb152];
    }

    bb66: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb67, unwind: bb152];
    }

    bb67: {
        StorageDead(_151);
        drop(_155) -> [return: bb68, unwind: bb157];
    }

    bb68: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_169);
        _169 = _130;
        _126 = std::result::Result::<(), error::ErrorCode>::Err(move _169);
        StorageDead(_169);
        StorageDead(_130);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_127);
        _125 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _126) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_126);
        _170 = discriminant(_125);
        switchInt(move _170) -> [0: bb71, 1: bb72, otherwise: bb16];
    }

    bb71: {
        StorageLive(_174);
        _174 = ((_125 as Continue).0: ());
        _124 = _174;
        StorageDead(_174);
        StorageDead(_125);
        StorageDead(_124);
        _117 = const ();
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        _116 = const ();
        goto -> bb50;
    }

    bb72: {
        StorageLive(_171);
        _171 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb146;
    }

    bb74: {
        StorageDead(_177);
        StorageLive(_178);
        _178 = move _176;
        goto -> bb75;
    }

    bb75: {
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &mut _178;
        _181 = &mut (*_182);
        _180 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _181) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_181);
        _183 = discriminant(_180);
        switchInt(move _183) -> [0: bb78, 1: bb77, otherwise: bb16];
    }

    bb77: {
        StorageLive(_185);
        _185 = ((_180 as Some).0: &state::user::SpotPosition);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_185);
        _189 = SpotPosition::is_available(move _190) -> [return: bb79, unwind continue];
    }

    bb78: {
        _175 = const ();
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &((*_1).5: [state::user::Order; 32]);
        _238 = <&[Order; 32] as IntoIterator>::into_iter(move _239) -> [return: bb99, unwind continue];
    }

    bb79: {
        switchInt(move _189) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        StorageDead(_190);
        StorageLive(_191);
        _191 = ();
        _188 = std::result::Result::<(), error::ErrorCode>::Ok(move _191);
        StorageDead(_191);
        goto -> bb94;
    }

    bb81: {
        StorageDead(_190);
        StorageLive(_192);
        _192 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _349 = const _;
        _203 = &(*_349);
        _202 = &(*_203);
        _201 = move _202 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_202);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_192;
        _210 = &(*_211);
        _209 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _210) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_210);
        _208 = [move _209];
        StorageDead(_209);
        _207 = &_208;
        _206 = &(*_207);
        _205 = move _206 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_206);
        _200 = Arguments::<'_>::new_v1(move _201, move _205) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_205);
        StorageDead(_201);
        _199 = format(move _200) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_200);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_203);
        _198 = move _199;
        StorageDead(_199);
        _197 = &_198;
        _196 = &(*_197);
        _195 = <String as Deref>::deref(move _196) -> [return: bb85, unwind: bb151];
    }

    bb85: {
        _194 = &(*_195);
        StorageDead(_196);
        _193 = solana_program::log::sol_log(move _194) -> [return: bb86, unwind: bb151];
    }

    bb86: {
        StorageDead(_194);
        drop(_198) -> [return: bb87, unwind: bb157];
    }

    bb87: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_193);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _348 = const _;
        _222 = &(*_348);
        _221 = &(*_222);
        _220 = move _221 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_221);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &((*_185).4: u16);
        _229 = &(*_230);
        _228 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _229) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_229);
        _227 = [move _228];
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _224 = move _225 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_225);
        _219 = Arguments::<'_>::new_v1(move _220, move _224) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_224);
        StorageDead(_220);
        _218 = format(move _219) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_219);
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_222);
        _217 = move _218;
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = <String as Deref>::deref(move _215) -> [return: bb91, unwind: bb150];
    }

    bb91: {
        _213 = &(*_214);
        StorageDead(_215);
        _212 = solana_program::log::sol_log(move _213) -> [return: bb92, unwind: bb150];
    }

    bb92: {
        StorageDead(_213);
        drop(_217) -> [return: bb93, unwind: bb157];
    }

    bb93: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_231);
        _231 = _192;
        _188 = std::result::Result::<(), error::ErrorCode>::Err(move _231);
        StorageDead(_231);
        StorageDead(_192);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_189);
        _187 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _188) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_188);
        _232 = discriminant(_187);
        switchInt(move _232) -> [0: bb96, 1: bb97, otherwise: bb16];
    }

    bb96: {
        StorageLive(_236);
        _236 = ((_187 as Continue).0: ());
        _186 = _236;
        StorageDead(_236);
        StorageDead(_187);
        StorageDead(_186);
        _179 = const ();
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        _116 = const ();
        goto -> bb75;
    }

    bb97: {
        StorageLive(_233);
        _233 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb146;
    }

    bb99: {
        StorageDead(_239);
        StorageLive(_240);
        _240 = move _238;
        goto -> bb100;
    }

    bb100: {
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &mut _240;
        _243 = &mut (*_244);
        _242 = <std::slice::Iter<'_, Order> as Iterator>::next(move _243) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_243);
        _245 = discriminant(_242);
        switchInt(move _245) -> [0: bb103, 1: bb102, otherwise: bb16];
    }

    bb102: {
        StorageLive(_247);
        _247 = ((_242 as Some).0: &state::user::Order);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &(*_247);
        _251 = Order::is_available(move _252) -> [return: bb104, unwind continue];
    }

    bb103: {
        _237 = const ();
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = ((*_3).23: u16);
        _284 = Gt(move _285, const 0_u16);
        switchInt(move _284) -> [0: bb120, otherwise: bb119];
    }

    bb104: {
        switchInt(move _251) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        StorageDead(_252);
        StorageLive(_253);
        _253 = ();
        _250 = std::result::Result::<(), error::ErrorCode>::Ok(move _253);
        StorageDead(_253);
        goto -> bb114;
    }

    bb106: {
        StorageDead(_252);
        StorageLive(_254);
        _254 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _350 = const _;
        _265 = &(*_350);
        _264 = &(*_265);
        _263 = move _264 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_264);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_254;
        _272 = &(*_273);
        _271 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _272) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_272);
        _270 = [move _271];
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = move _268 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_268);
        _262 = Arguments::<'_>::new_v1(move _263, move _267) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_267);
        StorageDead(_263);
        _261 = format(move _262) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_262);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_265);
        _260 = move _261;
        StorageDead(_261);
        _259 = &_260;
        _258 = &(*_259);
        _257 = <String as Deref>::deref(move _258) -> [return: bb110, unwind: bb149];
    }

    bb110: {
        _256 = &(*_257);
        StorageDead(_258);
        _255 = solana_program::log::sol_log(move _256) -> [return: bb111, unwind: bb149];
    }

    bb111: {
        StorageDead(_256);
        drop(_260) -> [return: bb112, unwind: bb157];
    }

    bb112: {
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_255);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = const "user has an open order";
        _275 = &(*_276);
        _274 = solana_program::log::sol_log(move _275) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_275);
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_277);
        _277 = _254;
        _250 = std::result::Result::<(), error::ErrorCode>::Err(move _277);
        StorageDead(_277);
        StorageDead(_254);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_251);
        _249 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _250) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_250);
        _278 = discriminant(_249);
        switchInt(move _278) -> [0: bb116, 1: bb117, otherwise: bb16];
    }

    bb116: {
        StorageLive(_282);
        _282 = ((_249 as Continue).0: ());
        _248 = _282;
        StorageDead(_282);
        StorageDead(_249);
        StorageDead(_248);
        _241 = const ();
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_241);
        _116 = const ();
        goto -> bb100;
    }

    bb117: {
        StorageLive(_279);
        _279 = ((_249 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_281);
        _281 = _279;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _281) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_237);
        goto -> bb146;
    }

    bb119: {
        StorageDead(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &(*_2);
        StorageLive(_288);
        _288 = _4;
        _286 = UserStats::get_age_ts(move _287, move _288) -> [return: bb121, unwind continue];
    }

    bb120: {
        StorageDead(_285);
        _283 = const ();
        goto -> bb145;
    }

    bb121: {
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_289);
        StorageLive(_290);
        _290 = _286;
        _289 = Lt(move _290, const _);
        switchInt(move _289) -> [0: bb143, otherwise: bb122];
    }

    bb122: {
        StorageDead(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = ((*_1).21: bool);
        switchInt(move _294) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        StorageLive(_295);
        _295 = ();
        _293 = std::result::Result::<(), error::ErrorCode>::Ok(move _295);
        StorageDead(_295);
        goto -> bb138;
    }

    bb124: {
        StorageLive(_296);
        _296 = error::ErrorCode::UserCantBeDeleted;
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _353 = const _;
        _307 = &(*_353);
        _306 = &(*_307);
        _305 = move _306 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_306);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_296;
        _314 = &(*_315);
        _313 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _314) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_314);
        _312 = [move _313];
        StorageDead(_313);
        _311 = &_312;
        _310 = &(*_311);
        _309 = move _310 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_310);
        _304 = Arguments::<'_>::new_v1(move _305, move _309) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_309);
        StorageDead(_305);
        _303 = format(move _304) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_304);
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_311);
        StorageDead(_307);
        _302 = move _303;
        StorageDead(_303);
        _301 = &_302;
        _300 = &(*_301);
        _299 = <String as Deref>::deref(move _300) -> [return: bb128, unwind: bb148];
    }

    bb128: {
        _298 = &(*_299);
        StorageDead(_300);
        _297 = solana_program::log::sol_log(move _298) -> [return: bb129, unwind: bb148];
    }

    bb129: {
        StorageDead(_298);
        drop(_302) -> [return: bb130, unwind: bb157];
    }

    bb130: {
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_297);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _352 = const _;
        _326 = &(*_352);
        _325 = &(*_326);
        _324 = move _325 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_325);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &_286;
        _333 = &(*_334);
        _332 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _333) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_333);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _351 = const _;
        _337 = &(*_351);
        _336 = &(*_337);
        _335 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _336) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_336);
        _331 = [move _332, move _335];
        StorageDead(_335);
        StorageDead(_332);
        _330 = &_331;
        _329 = &(*_330);
        _328 = move _329 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_329);
        _323 = Arguments::<'_>::new_v1(move _324, move _328) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_328);
        StorageDead(_324);
        _322 = format(move _323) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_323);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_326);
        _321 = move _322;
        StorageDead(_322);
        _320 = &_321;
        _319 = &(*_320);
        _318 = <String as Deref>::deref(move _319) -> [return: bb135, unwind: bb147];
    }

    bb135: {
        _317 = &(*_318);
        StorageDead(_319);
        _316 = solana_program::log::sol_log(move _317) -> [return: bb136, unwind: bb147];
    }

    bb136: {
        StorageDead(_317);
        drop(_321) -> [return: bb137, unwind: bb157];
    }

    bb137: {
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_316);
        StorageLive(_339);
        _339 = _296;
        _293 = std::result::Result::<(), error::ErrorCode>::Err(move _339);
        StorageDead(_339);
        StorageDead(_296);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_294);
        _292 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _293) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_293);
        _340 = discriminant(_292);
        switchInt(move _340) -> [0: bb140, 1: bb141, otherwise: bb16];
    }

    bb140: {
        StorageLive(_344);
        _344 = ((_292 as Continue).0: ());
        _291 = _344;
        StorageDead(_344);
        StorageDead(_292);
        StorageDead(_291);
        _283 = const ();
        goto -> bb144;
    }

    bb141: {
        StorageLive(_341);
        _341 = ((_292 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_343);
        _343 = _341;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _343) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb146;
    }

    bb143: {
        StorageDead(_290);
        _283 = const ();
        goto -> bb144;
    }

    bb144: {
        StorageDead(_289);
        StorageDead(_286);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_345);
        _345 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _345);
        StorageDead(_345);
        goto -> bb146;
    }

    bb146: {
        return;
    }

    bb147 (cleanup): {
        drop(_321) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_302) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_260) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_217) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_198) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_155) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_136) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_89) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_54) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_19) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        resume;
    }
}
