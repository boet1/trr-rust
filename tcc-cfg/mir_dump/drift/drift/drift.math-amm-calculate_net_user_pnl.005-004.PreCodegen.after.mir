// MIR for `calculate_net_user_pnl` after PreCodegen

fn calculate_net_user_pnl(_1: &AMM, _2: i64) -> std::result::Result<i128, error::ErrorCode> {
    debug amm => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: i64;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 1];
    let _39: &[&str; 1];
    let _40: [&str; 1];
    let mut _41: error::ErrorCode;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: ();
    let _47: i128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _49: std::result::Result<i128, error::ErrorCode>;
    let mut _50: i128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _52: std::result::Result<i128, error::ErrorCode>;
    let mut _53: i128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _55: std::result::Result<i128, error::ErrorCode>;
    let mut _56: i128;
    let mut _57: i128;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: i128;
    let mut _63: i128;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _65: std::result::Result<i128, error::ErrorCode>;
    let mut _66: i64;
    let mut _67: isize;
    let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: i128;
    let mut _72: isize;
    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: i128;
    let mut _77: i128;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _79: std::result::Result<i128, error::ErrorCode>;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _84: i128;
    let mut _85: isize;
    let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _89: i128;
    let mut _90: i128;
    let mut _91: i128;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _93: std::result::Result<i128, error::ErrorCode>;
    let mut _94: &state::perp_market::AMM;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let _35: std::string::String;
        let mut _100: &[&str; 1];
        let mut _101: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
        scope 3 {
            debug res => _35;
        }
    }
    scope 4 {
        debug residual => _43;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _46;
        scope 7 {
        }
    }
    scope 8 {
        debug net_user_base_asset_value => _47;
        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _99: i128;
        scope 29 {
            debug residual => _96;
            scope 30 {
            }
        }
        scope 31 {
            debug val => _99;
            scope 32 {
            }
        }
    }
    scope 9 {
        debug residual => _59;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _62;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _68;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _71;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _73;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _76;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _81;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _84;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _86;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _89;
        scope 28 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Gt(move _7, const 0_i64);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb14;
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidOracle;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _101 = const _;
        _20 = &(*_101);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb57];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb57];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb58];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _100 = const _;
        _39 = &(*_100);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        _36 = Arguments::<'_>::new_const(move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb11, unwind: bb56];
    }

    bb11: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        StorageDead(_30);
        drop(_34) -> [return: bb13, unwind: bb58];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_41);
        _41 = _9;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _41);
        StorageDead(_41);
        StorageDead(_9);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_5);
        _42 = discriminant(_4);
        switchInt(move _42) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_46);
        _46 = ((_4 as Continue).0: ());
        _3 = _46;
        StorageDead(_46);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = ((*_1).15: i128);
        StorageLive(_57);
        _57 = ((*_1).16: i128);
        _55 = <i128 as SafeMath>::safe_add(move _56, move _57) -> [return: bb20, unwind continue];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_43);
        _43 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb55;
    }

    bb20: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb22, 1: bb23, otherwise: bb17];
    }

    bb22: {
        StorageLive(_62);
        _62 = ((_54 as Continue).0: i128);
        _53 = _62;
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _2;
        _65 = <i64 as Cast>::cast::<i128>(move _66) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_59);
        _59 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb54;
    }

    bb25: {
        StorageDead(_66);
        _64 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _65) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb27, 1: bb28, otherwise: bb17];
    }

    bb27: {
        StorageLive(_71);
        _71 = ((_64 as Continue).0: i128);
        _63 = _71;
        StorageDead(_71);
        _52 = <i128 as SafeMath>::safe_mul(move _53, move _63) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_68);
        _68 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_63);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb52;
    }

    bb30: {
        StorageDead(_63);
        StorageDead(_53);
        _51 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_52);
        _72 = discriminant(_51);
        switchInt(move _72) -> [0: bb32, 1: bb33, otherwise: bb17];
    }

    bb32: {
        StorageLive(_76);
        _76 = ((_51 as Continue).0: i128);
        _50 = _76;
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_73);
        _73 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb52;
    }

    bb35: {
        _78 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_79);
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb37, 1: bb38, otherwise: bb17];
    }

    bb37: {
        StorageLive(_84);
        _84 = ((_78 as Continue).0: i128);
        _77 = _84;
        StorageDead(_84);
        _49 = <i128 as SafeMath>::safe_div(move _50, move _77) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_81);
        _81 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb51;
    }

    bb40: {
        StorageDead(_77);
        StorageDead(_50);
        _48 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_49);
        _85 = discriminant(_48);
        switchInt(move _85) -> [0: bb42, 1: bb43, otherwise: bb17];
    }

    bb42: {
        StorageLive(_89);
        _89 = ((_48 as Continue).0: i128);
        _47 = _89;
        StorageDead(_89);
        StorageDead(_78);
        StorageDead(_64);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_90);
        _90 = _47;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_1);
        _93 = calculate_net_user_cost_basis(move _94) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_86);
        _86 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_88);
        StorageDead(_86);
        goto -> bb51;
    }

    bb45: {
        StorageDead(_94);
        _92 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _93) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_93);
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb47, 1: bb48, otherwise: bb17];
    }

    bb47: {
        StorageLive(_99);
        _99 = ((_92 as Continue).0: i128);
        _91 = _99;
        StorageDead(_99);
        _0 = <i128 as SafeMath>::safe_add(move _90, move _91) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_96);
        _96 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_47);
        StorageDead(_92);
        goto -> bb55;
    }

    bb50: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_47);
        StorageDead(_92);
        goto -> bb55;
    }

    bb51: {
        StorageDead(_78);
        goto -> bb53;
    }

    bb52: {
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_64);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb55;
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_34) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_15) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        resume;
    }
}
