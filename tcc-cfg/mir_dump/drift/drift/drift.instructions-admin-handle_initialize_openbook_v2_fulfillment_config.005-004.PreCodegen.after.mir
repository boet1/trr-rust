// MIR for `admin::handle_initialize_openbook_v2_fulfillment_config` after PreCodegen

fn admin::handle_initialize_openbook_v2_fulfillment_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializeOpenbookV2FulfillmentConfig<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u16;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: error::ErrorCode;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let _38: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _40: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _43: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _44: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _52: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _53: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _55: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _56: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _63: ();
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _65: std::result::Result<(), error::ErrorCode>;
    let mut _66: bool;
    let mut _67: &anchor_lang::prelude::Pubkey;
    let _68: anchor_lang::prelude::Pubkey;
    let mut _69: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: ();
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &error::ErrorCode;
    let _91: &error::ErrorCode;
    let mut _92: error::ErrorCode;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: &anchor_lang::prelude::AccountInfo<'_>;
    let _100: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &anchor_lang::prelude::AccountInfo<'_>;
    let _102: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, openbook_v2_light::Market>;
    let mut _105: std::result::Result<openbook_v2_light::Market, error::ErrorCode>;
    let mut _106: &state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _112: ();
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _114: std::result::Result<(), error::ErrorCode>;
    let mut _115: bool;
    let mut _116: &anchor_lang::prelude::Pubkey;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let _118: &state::spot_market::SpotMarket;
    let mut _119: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _120: ();
    let _122: ();
    let mut _123: &str;
    let _124: &str;
    let mut _125: &std::string::String;
    let _126: &std::string::String;
    let _127: std::string::String;
    let mut _129: std::fmt::Arguments<'_>;
    let mut _130: &[&str];
    let mut _131: &[&str; 2];
    let _132: &[&str; 2];
    let _133: [&str; 2];
    let mut _134: &[core::fmt::rt::Argument<'_>];
    let mut _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: &[core::fmt::rt::Argument<'_>; 1];
    let _137: [core::fmt::rt::Argument<'_>; 1];
    let mut _138: core::fmt::rt::Argument<'_>;
    let mut _139: &error::ErrorCode;
    let _140: &error::ErrorCode;
    let _141: ();
    let mut _142: &str;
    let _143: &str;
    let mut _144: error::ErrorCode;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _150: ();
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _152: std::result::Result<(), error::ErrorCode>;
    let mut _153: bool;
    let mut _154: &anchor_lang::prelude::Pubkey;
    let mut _155: &anchor_lang::prelude::Pubkey;
    let _156: &state::spot_market::SpotMarket;
    let mut _157: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _158: ();
    let _160: ();
    let mut _161: &str;
    let _162: &str;
    let mut _163: &std::string::String;
    let _164: &std::string::String;
    let _165: std::string::String;
    let mut _167: std::fmt::Arguments<'_>;
    let mut _168: &[&str];
    let mut _169: &[&str; 2];
    let _170: &[&str; 2];
    let _171: [&str; 2];
    let mut _172: &[core::fmt::rt::Argument<'_>];
    let mut _173: &[core::fmt::rt::Argument<'_>; 1];
    let _174: &[core::fmt::rt::Argument<'_>; 1];
    let _175: [core::fmt::rt::Argument<'_>; 1];
    let mut _176: core::fmt::rt::Argument<'_>;
    let mut _177: &error::ErrorCode;
    let _178: &error::ErrorCode;
    let _179: ();
    let mut _180: &str;
    let _181: &str;
    let mut _182: error::ErrorCode;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _188: ();
    let mut _189: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _190: std::result::Result<(), error::ErrorCode>;
    let mut _191: bool;
    let mut _192: i64;
    let mut _193: ();
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 2];
    let _205: &[&str; 2];
    let _206: [&str; 2];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 1];
    let _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: [core::fmt::rt::Argument<'_>; 1];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &error::ErrorCode;
    let _213: &error::ErrorCode;
    let _214: ();
    let mut _215: &str;
    let _216: &str;
    let mut _217: error::ErrorCode;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: i64;
    let mut _226: bool;
    let mut _227: u64;
    let mut _228: &state::spot_market::SpotMarket;
    let mut _229: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _230: u64;
    let mut _231: u64;
    let mut _232: u64;
    let mut _233: &state::spot_market::SpotMarket;
    let mut _234: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _235: u64;
    let _236: ();
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _238: std::result::Result<(), error::ErrorCode>;
    let mut _239: bool;
    let mut _240: ();
    let _242: ();
    let mut _243: &str;
    let _244: &str;
    let mut _245: &std::string::String;
    let _246: &std::string::String;
    let _247: std::string::String;
    let mut _249: std::fmt::Arguments<'_>;
    let mut _250: &[&str];
    let mut _251: &[&str; 2];
    let _252: &[&str; 2];
    let _253: [&str; 2];
    let mut _254: &[core::fmt::rt::Argument<'_>];
    let mut _255: &[core::fmt::rt::Argument<'_>; 1];
    let _256: &[core::fmt::rt::Argument<'_>; 1];
    let _257: [core::fmt::rt::Argument<'_>; 1];
    let mut _258: core::fmt::rt::Argument<'_>;
    let mut _259: &error::ErrorCode;
    let _260: &error::ErrorCode;
    let _261: ();
    let mut _262: &str;
    let _263: &str;
    let mut _264: &std::string::String;
    let _265: &std::string::String;
    let _266: std::string::String;
    let mut _268: std::fmt::Arguments<'_>;
    let mut _269: &[&str];
    let mut _270: &[&str; 3];
    let _271: &[&str; 3];
    let _272: [&str; 3];
    let mut _273: &[core::fmt::rt::Argument<'_>];
    let mut _274: &[core::fmt::rt::Argument<'_>; 2];
    let _275: &[core::fmt::rt::Argument<'_>; 2];
    let _276: [core::fmt::rt::Argument<'_>; 2];
    let mut _277: core::fmt::rt::Argument<'_>;
    let mut _278: &u64;
    let _279: &u64;
    let _280: &state::spot_market::SpotMarket;
    let mut _281: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _282: core::fmt::rt::Argument<'_>;
    let mut _283: &u64;
    let _284: &u64;
    let mut _285: error::ErrorCode;
    let mut _286: isize;
    let mut _288: !;
    let mut _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _292: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>>;
    let mut _295: std::result::Result<std::cell::RefMut<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _296: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _297: isize;
    let mut _299: !;
    let mut _300: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _302: state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _303: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _304: std::result::Result<state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig, error::ErrorCode>;
    let mut _305: &state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
    let mut _306: &anchor_lang::prelude::Pubkey;
    let _307: &anchor_lang::prelude::Pubkey;
    let mut _308: u16;
    let mut _309: isize;
    let mut _311: !;
    let mut _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _314: &mut state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _315: &mut std::cell::RefMut<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _316: ();
    let mut _324: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _325: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _326: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _327: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _328: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _329: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _330: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let mut _323: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
    }
    scope 3 {
        debug residual => _34;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _37;
        scope 6 {
        }
    }
    scope 7 {
        debug base_spot_market => _38;
        let _50: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        scope 12 {
            debug quote_spot_market => _50;
            let _62: anchor_lang::prelude::Pubkey;
            scope 17 {
                debug openbook_v2_program_id => _62;
                let _72: error::ErrorCode;
                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _97: ();
                let _98: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
                scope 18 {
                    debug error_code => _72;
                    let _79: std::string::String;
                    let mut _322: &[&str; 2];
                    scope 19 {
                        debug res => _79;
                    }
                }
                scope 20 {
                    debug residual => _94;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _97;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug openbook_v2_market_context => _98;
                    let _103: openbook_v2_light::Market;
                    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _111: openbook_v2_light::Market;
                    scope 25 {
                        debug market => _103;
                        let _121: error::ErrorCode;
                        let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _149: ();
                        let _159: error::ErrorCode;
                        let _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _187: ();
                        let _194: error::ErrorCode;
                        let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _222: ();
                        let _223: u64;
                        scope 30 {
                            debug error_code => _121;
                            let _128: std::string::String;
                            let mut _321: &[&str; 2];
                            scope 31 {
                                debug res => _128;
                            }
                        }
                        scope 32 {
                            debug residual => _146;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug val => _149;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug error_code => _159;
                            let _166: std::string::String;
                            let mut _320: &[&str; 2];
                            scope 37 {
                                debug res => _166;
                            }
                        }
                        scope 38 {
                            debug residual => _184;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _187;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug error_code => _194;
                            let _201: std::string::String;
                            let mut _319: &[&str; 2];
                            scope 43 {
                                debug res => _201;
                            }
                        }
                        scope 44 {
                            debug residual => _219;
                            scope 45 {
                            }
                        }
                        scope 46 {
                            debug val => _222;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug market_step_size => _223;
                            let _225: bool;
                            scope 49 {
                                debug valid_step_size => _225;
                                let _241: error::ErrorCode;
                                let _287: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _290: ();
                                let _291: anchor_lang::prelude::Pubkey;
                                scope 50 {
                                    debug error_code => _241;
                                    let _248: std::string::String;
                                    let _267: std::string::String;
                                    let mut _317: &[&str; 3];
                                    let mut _318: &[&str; 2];
                                    scope 51 {
                                        debug res => _248;
                                    }
                                    scope 52 {
                                        debug res => _267;
                                    }
                                }
                                scope 53 {
                                    debug residual => _287;
                                    scope 54 {
                                    }
                                }
                                scope 55 {
                                    debug val => _290;
                                    scope 56 {
                                    }
                                }
                                scope 57 {
                                    debug openbook_v2_fulfillment_config_key => _291;
                                    let mut _293: std::cell::RefMut<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                                    let _298: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _301: std::cell::RefMut<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                                    scope 58 {
                                        debug openbook_v2_fulfillment_config => _293;
                                        let _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _313: state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
                                        scope 63 {
                                            debug residual => _310;
                                            scope 64 {
                                            }
                                        }
                                        scope 65 {
                                            debug val => _313;
                                            scope 66 {
                                            }
                                        }
                                    }
                                    scope 59 {
                                        debug residual => _298;
                                        scope 60 {
                                        }
                                    }
                                    scope 61 {
                                        debug val => _301;
                                        scope 62 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 26 {
                        debug residual => _108;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _111;
                        scope 29 {
                        }
                    }
                }
            }
        }
        scope 13 {
            debug residual => _58;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _61;
            scope 16 {
            }
        }
    }
    scope 8 {
        debug residual => _46;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _49;
        scope 11 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Ne(move _7, const _);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb10;
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidSpotMarketAccount;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _323 = const _;
        _20 = &(*_323);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb153];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb153];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb154];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "Cannot add openbook v2 market to quote asset";
        _30 = &(*_31);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        _32 = _9;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _32);
        StorageDead(_32);
        StorageDead(_9);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_5);
        _33 = discriminant(_4);
        switchInt(move _33) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_37);
        _37 = ((_4 as Continue).0: ());
        _3 = _37;
        StorageDead(_37);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _324 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _43 = &((*_324).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _42 = &(*_43);
        _41 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _42) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb143;
    }

    bb16: {
        StorageDead(_42);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _40 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _41, move _44) -> [return: bb17, unwind: bb154];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_41);
        _39 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _40) -> [return: bb18, unwind: bb154];
    }

    bb18: {
        StorageDead(_40);
        _45 = discriminant(_39);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_39 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _38 = move _49;
        StorageDead(_49);
        _333 = discriminant(_39);
        StorageDead(_43);
        StorageDead(_39);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _325 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _55 = &((*_325).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _54 = &(*_55);
        _53 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _54) -> [return: bb22, unwind: bb152];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb157];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _331 = discriminant(_39);
        StorageDead(_43);
        StorageDead(_39);
        goto -> bb142;
    }

    bb22: {
        StorageDead(_54);
        StorageLive(_56);
        _56 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _52 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _53, move _56) -> [return: bb23, unwind: bb152];
    }

    bb23: {
        StorageDead(_56);
        StorageDead(_53);
        _51 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb24, unwind: bb152];
    }

    bb24: {
        StorageDead(_52);
        _57 = discriminant(_51);
        switchInt(move _57) -> [0: bb25, 1: bb26, otherwise: bb13];
    }

    bb25: {
        StorageLive(_61);
        _61 = move ((_51 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _50 = move _61;
        StorageDead(_61);
        _337 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_62);
        _62 = openbook_v2_light::id() -> [return: bb28, unwind: bb151];
    }

    bb26: {
        StorageLive(_58);
        _58 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb27, unwind: bb156];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_58);
        _335 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        goto -> bb141;
    }

    bb28: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _326 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _69 = &((*_326).3: anchor_lang::prelude::AccountInfo<'_>);
        _68 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _69) -> [return: bb29, unwind: bb151];
    }

    bb29: {
        _67 = &_68;
        StorageDead(_69);
        StorageLive(_70);
        _70 = &_62;
        _66 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _67, move _70) -> [return: bb30, unwind: bb151];
    }

    bb30: {
        switchInt(move _66) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_71);
        _71 = ();
        _65 = std::result::Result::<(), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb39;
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_72);
        _72 = error::ErrorCode::InvalidOpenbookV2Program;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _322 = const _;
        _83 = &(*_322);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_72;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _90) -> [return: bb33, unwind: bb151];
    }

    bb33: {
        StorageDead(_90);
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb34, unwind: bb151];
    }

    bb34: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb35, unwind: bb151];
    }

    bb35: {
        StorageDead(_80);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb36, unwind: bb150];
    }

    bb36: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb37, unwind: bb150];
    }

    bb37: {
        StorageDead(_74);
        drop(_78) -> [return: bb38, unwind: bb151];
    }

    bb38: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_92);
        _92 = _72;
        _65 = std::result::Result::<(), error::ErrorCode>::Err(move _92);
        StorageDead(_92);
        StorageDead(_72);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_66);
        _64 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _65) -> [return: bb40, unwind: bb151];
    }

    bb40: {
        StorageDead(_65);
        _93 = discriminant(_64);
        switchInt(move _93) -> [0: bb41, 1: bb42, otherwise: bb13];
    }

    bb41: {
        StorageLive(_97);
        _97 = ((_64 as Continue).0: ());
        _63 = _97;
        StorageDead(_97);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _327 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _100 = &((*_327).3: anchor_lang::prelude::AccountInfo<'_>);
        _99 = &(*_100);
        StorageLive(_101);
        StorageLive(_102);
        _328 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _102 = &((*_328).4: anchor_lang::prelude::AccountInfo<'_>);
        _101 = &(*_102);
        _98 = OpenbookV2Context::<'_, '_> { openbook_v2_program: move _99, openbook_v2_market: move _101 };
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_98;
        _105 = OpenbookV2Context::<'_, '_>::load_openbook_v2_market(move _106) -> [return: bb44, unwind: bb151];
    }

    bb42: {
        StorageLive(_94);
        _94 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb43, unwind: bb151];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb140;
    }

    bb44: {
        StorageDead(_106);
        _104 = <std::result::Result<openbook_v2_light::Market, error::ErrorCode> as Try>::branch(move _105) -> [return: bb45, unwind: bb151];
    }

    bb45: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb46, 1: bb47, otherwise: bb13];
    }

    bb46: {
        StorageLive(_111);
        _111 = ((_104 as Continue).0: openbook_v2_light::Market);
        _103 = _111;
        StorageDead(_111);
        StorageDead(_104);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(_103.29: anchor_lang::prelude::Pubkey);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_38;
        _118 = <Ref<'_, SpotMarket> as Deref>::deref(move _119) -> [return: bb49, unwind: bb151];
    }

    bb47: {
        StorageLive(_108);
        _108 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb48, unwind: bb151];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_104);
        goto -> bb139;
    }

    bb49: {
        StorageDead(_119);
        _117 = &((*_118).2: anchor_lang::prelude::Pubkey);
        _115 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _116, move _117) -> [return: bb50, unwind: bb151];
    }

    bb50: {
        switchInt(move _115) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_120);
        _120 = ();
        _114 = std::result::Result::<(), error::ErrorCode>::Ok(move _120);
        StorageDead(_120);
        goto -> bb60;
    }

    bb52: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_121);
        _121 = error::ErrorCode::InvalidOpenbookV2Market;
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _321 = const _;
        _132 = &(*_321);
        _131 = &(*_132);
        _130 = move _131 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_131);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_121;
        _139 = &(*_140);
        _138 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _139) -> [return: bb53, unwind: bb151];
    }

    bb53: {
        StorageDead(_139);
        _137 = [move _138];
        StorageDead(_138);
        _136 = &_137;
        _135 = &(*_136);
        _134 = move _135 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_135);
        _129 = Arguments::<'_>::new_v1(move _130, move _134) -> [return: bb54, unwind: bb151];
    }

    bb54: {
        StorageDead(_134);
        StorageDead(_130);
        _128 = format(move _129) -> [return: bb55, unwind: bb151];
    }

    bb55: {
        StorageDead(_129);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_132);
        _127 = move _128;
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = <String as Deref>::deref(move _125) -> [return: bb56, unwind: bb149];
    }

    bb56: {
        _123 = &(*_124);
        StorageDead(_125);
        _122 = solana_program::log::sol_log(move _123) -> [return: bb57, unwind: bb149];
    }

    bb57: {
        StorageDead(_123);
        drop(_127) -> [return: bb58, unwind: bb151];
    }

    bb58: {
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_122);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = const "Invalid base mint";
        _142 = &(*_143);
        _141 = solana_program::log::sol_log(move _142) -> [return: bb59, unwind: bb151];
    }

    bb59: {
        StorageDead(_142);
        StorageDead(_143);
        StorageDead(_141);
        StorageLive(_144);
        _144 = _121;
        _114 = std::result::Result::<(), error::ErrorCode>::Err(move _144);
        StorageDead(_144);
        StorageDead(_121);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_115);
        _113 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _114) -> [return: bb61, unwind: bb151];
    }

    bb61: {
        StorageDead(_114);
        _145 = discriminant(_113);
        switchInt(move _145) -> [0: bb62, 1: bb63, otherwise: bb13];
    }

    bb62: {
        StorageLive(_149);
        _149 = ((_113 as Continue).0: ());
        _112 = _149;
        StorageDead(_149);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(_103.30: anchor_lang::prelude::Pubkey);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_50;
        _156 = <Ref<'_, SpotMarket> as Deref>::deref(move _157) -> [return: bb65, unwind: bb151];
    }

    bb63: {
        StorageLive(_146);
        _146 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb64, unwind: bb151];
    }

    bb64: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb139;
    }

    bb65: {
        StorageDead(_157);
        _155 = &((*_156).2: anchor_lang::prelude::Pubkey);
        _153 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _154, move _155) -> [return: bb66, unwind: bb151];
    }

    bb66: {
        switchInt(move _153) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_158);
        _158 = ();
        _152 = std::result::Result::<(), error::ErrorCode>::Ok(move _158);
        StorageDead(_158);
        goto -> bb76;
    }

    bb68: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_159);
        _159 = error::ErrorCode::InvalidOpenbookV2Market;
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _320 = const _;
        _170 = &(*_320);
        _169 = &(*_170);
        _168 = move _169 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_159;
        _177 = &(*_178);
        _176 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _177) -> [return: bb69, unwind: bb151];
    }

    bb69: {
        StorageDead(_177);
        _175 = [move _176];
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = move _173 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_173);
        _167 = Arguments::<'_>::new_v1(move _168, move _172) -> [return: bb70, unwind: bb151];
    }

    bb70: {
        StorageDead(_172);
        StorageDead(_168);
        _166 = format(move _167) -> [return: bb71, unwind: bb151];
    }

    bb71: {
        StorageDead(_167);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_170);
        _165 = move _166;
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = <String as Deref>::deref(move _163) -> [return: bb72, unwind: bb148];
    }

    bb72: {
        _161 = &(*_162);
        StorageDead(_163);
        _160 = solana_program::log::sol_log(move _161) -> [return: bb73, unwind: bb148];
    }

    bb73: {
        StorageDead(_161);
        drop(_165) -> [return: bb74, unwind: bb151];
    }

    bb74: {
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_160);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = const "Invalid quote mint";
        _180 = &(*_181);
        _179 = solana_program::log::sol_log(move _180) -> [return: bb75, unwind: bb151];
    }

    bb75: {
        StorageDead(_180);
        StorageDead(_181);
        StorageDead(_179);
        StorageLive(_182);
        _182 = _159;
        _152 = std::result::Result::<(), error::ErrorCode>::Err(move _182);
        StorageDead(_182);
        StorageDead(_159);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_153);
        _151 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _152) -> [return: bb77, unwind: bb151];
    }

    bb77: {
        StorageDead(_152);
        _183 = discriminant(_151);
        switchInt(move _183) -> [0: bb78, 1: bb79, otherwise: bb13];
    }

    bb78: {
        StorageLive(_187);
        _187 = ((_151 as Continue).0: ());
        _150 = _187;
        StorageDead(_187);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = (_103.22: i64);
        _191 = Eq(move _192, const 0_i64);
        switchInt(move _191) -> [0: bb82, otherwise: bb81];
    }

    bb79: {
        StorageLive(_184);
        _184 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_186);
        _186 = _184;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _186) -> [return: bb80, unwind: bb151];
    }

    bb80: {
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb139;
    }

    bb81: {
        StorageDead(_192);
        StorageLive(_193);
        _193 = ();
        _190 = std::result::Result::<(), error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        goto -> bb90;
    }

    bb82: {
        StorageDead(_192);
        StorageLive(_194);
        _194 = error::ErrorCode::InvalidOpenbookV2Market;
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _319 = const _;
        _205 = &(*_319);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_194;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _212) -> [return: bb83, unwind: bb151];
    }

    bb83: {
        StorageDead(_212);
        _210 = [move _211];
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        _202 = Arguments::<'_>::new_v1(move _203, move _207) -> [return: bb84, unwind: bb151];
    }

    bb84: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb85, unwind: bb151];
    }

    bb85: {
        StorageDead(_202);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <String as Deref>::deref(move _198) -> [return: bb86, unwind: bb147];
    }

    bb86: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb87, unwind: bb147];
    }

    bb87: {
        StorageDead(_196);
        drop(_200) -> [return: bb88, unwind: bb151];
    }

    bb88: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = const "Fee must be 0";
        _215 = &(*_216);
        _214 = solana_program::log::sol_log(move _215) -> [return: bb89, unwind: bb151];
    }

    bb89: {
        StorageDead(_215);
        StorageDead(_216);
        StorageDead(_214);
        StorageLive(_217);
        _217 = _194;
        _190 = std::result::Result::<(), error::ErrorCode>::Err(move _217);
        StorageDead(_217);
        StorageDead(_194);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_191);
        _189 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _190) -> [return: bb91, unwind: bb151];
    }

    bb91: {
        StorageDead(_190);
        _218 = discriminant(_189);
        switchInt(move _218) -> [0: bb92, 1: bb93, otherwise: bb13];
    }

    bb92: {
        StorageLive(_222);
        _222 = ((_189 as Continue).0: ());
        _188 = _222;
        StorageDead(_222);
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_223);
        StorageLive(_224);
        _224 = (_103.18: i64);
        _223 = move _224 as u64 (IntToInt);
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_38;
        _228 = <Ref<'_, SpotMarket> as Deref>::deref(move _229) -> [return: bb95, unwind: bb151];
    }

    bb93: {
        StorageLive(_219);
        _219 = ((_189 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb94, unwind: bb151];
    }

    bb94: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb139;
    }

    bb95: {
        StorageDead(_229);
        _227 = ((*_228).25: u64);
        StorageLive(_230);
        _230 = _223;
        _226 = Ge(move _227, move _230);
        switchInt(move _226) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_38;
        _233 = <Ref<'_, SpotMarket> as Deref>::deref(move _234) -> [return: bb98, unwind: bb151];
    }

    bb97: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_227);
        _225 = const false;
        goto -> bb100;
    }

    bb98: {
        StorageDead(_234);
        _232 = ((*_233).25: u64);
        StorageLive(_235);
        _235 = _223;
        _231 = core::num::<impl u64>::rem_euclid(move _232, move _235) -> [return: bb99, unwind: bb151];
    }

    bb99: {
        StorageDead(_235);
        StorageDead(_232);
        _225 = Eq(move _231, const 0_u64);
        StorageDead(_233);
        StorageDead(_231);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_226);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = _225;
        switchInt(move _239) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        StorageLive(_240);
        _240 = ();
        _238 = std::result::Result::<(), error::ErrorCode>::Ok(move _240);
        StorageDead(_240);
        goto -> bb117;
    }

    bb102: {
        StorageLive(_241);
        _241 = error::ErrorCode::InvalidOpenbookV2Market;
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _318 = const _;
        _252 = &(*_318);
        _251 = &(*_252);
        _250 = move _251 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_251);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &_241;
        _259 = &(*_260);
        _258 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _259) -> [return: bb103, unwind: bb151];
    }

    bb103: {
        StorageDead(_259);
        _257 = [move _258];
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = move _255 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_255);
        _249 = Arguments::<'_>::new_v1(move _250, move _254) -> [return: bb104, unwind: bb151];
    }

    bb104: {
        StorageDead(_254);
        StorageDead(_250);
        _248 = format(move _249) -> [return: bb105, unwind: bb151];
    }

    bb105: {
        StorageDead(_249);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_252);
        _247 = move _248;
        StorageDead(_248);
        _246 = &_247;
        _245 = &(*_246);
        _244 = <String as Deref>::deref(move _245) -> [return: bb106, unwind: bb146];
    }

    bb106: {
        _243 = &(*_244);
        StorageDead(_245);
        _242 = solana_program::log::sol_log(move _243) -> [return: bb107, unwind: bb146];
    }

    bb107: {
        StorageDead(_243);
        drop(_247) -> [return: bb108, unwind: bb151];
    }

    bb108: {
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_242);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _317 = const _;
        _271 = &(*_317);
        _270 = &(*_271);
        _269 = move _270 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_270);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_38;
        _280 = <Ref<'_, SpotMarket> as Deref>::deref(move _281) -> [return: bb109, unwind: bb151];
    }

    bb109: {
        StorageDead(_281);
        _279 = &((*_280).25: u64);
        _278 = &(*_279);
        _277 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _278) -> [return: bb110, unwind: bb151];
    }

    bb110: {
        StorageDead(_278);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = &_223;
        _283 = &(*_284);
        _282 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _283) -> [return: bb111, unwind: bb151];
    }

    bb111: {
        StorageDead(_283);
        _276 = [move _277, move _282];
        StorageDead(_282);
        StorageDead(_277);
        _275 = &_276;
        _274 = &(*_275);
        _273 = move _274 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_274);
        _268 = Arguments::<'_>::new_v1(move _269, move _273) -> [return: bb112, unwind: bb151];
    }

    bb112: {
        StorageDead(_273);
        StorageDead(_269);
        _267 = format(move _268) -> [return: bb113, unwind: bb151];
    }

    bb113: {
        StorageDead(_268);
        StorageDead(_284);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_271);
        _266 = move _267;
        StorageDead(_267);
        _265 = &_266;
        _264 = &(*_265);
        _263 = <String as Deref>::deref(move _264) -> [return: bb114, unwind: bb145];
    }

    bb114: {
        _262 = &(*_263);
        StorageDead(_264);
        _261 = solana_program::log::sol_log(move _262) -> [return: bb115, unwind: bb145];
    }

    bb115: {
        StorageDead(_262);
        drop(_266) -> [return: bb116, unwind: bb151];
    }

    bb116: {
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_261);
        StorageLive(_285);
        _285 = _241;
        _238 = std::result::Result::<(), error::ErrorCode>::Err(move _285);
        StorageDead(_285);
        StorageDead(_241);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_239);
        _237 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _238) -> [return: bb118, unwind: bb151];
    }

    bb118: {
        StorageDead(_238);
        _286 = discriminant(_237);
        switchInt(move _286) -> [0: bb119, 1: bb120, otherwise: bb13];
    }

    bb119: {
        StorageLive(_290);
        _290 = ((_237 as Continue).0: ());
        _236 = _290;
        StorageDead(_290);
        StorageDead(_237);
        StorageDead(_236);
        StorageLive(_291);
        StorageLive(_292);
        _329 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _292 = &((*_329).6: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _291 = <anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig> as anchor_lang::Key>::key(move _292) -> [return: bb122, unwind: bb151];
    }

    bb120: {
        StorageLive(_287);
        _287 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_289);
        _289 = _287;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _289) -> [return: bb121, unwind: bb151];
    }

    bb121: {
        StorageDead(_289);
        StorageDead(_287);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb138;
    }

    bb122: {
        StorageDead(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _330 = deref_copy (_1.1: &mut instructions::admin::InitializeOpenbookV2FulfillmentConfig<'_>);
        _296 = &((*_330).6: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _295 = anchor_lang::prelude::AccountLoader::<'_, OpenbookV2FulfillmentConfig>::load_init(move _296) -> [return: bb123, unwind: bb151];
    }

    bb123: {
        StorageDead(_296);
        _294 = <std::result::Result<RefMut<'_, OpenbookV2FulfillmentConfig>, anchor_lang::error::Error> as Try>::branch(move _295) -> [return: bb124, unwind: bb151];
    }

    bb124: {
        StorageDead(_295);
        _297 = discriminant(_294);
        switchInt(move _297) -> [0: bb125, 1: bb126, otherwise: bb13];
    }

    bb125: {
        StorageLive(_301);
        _301 = move ((_294 as Continue).0: std::cell::RefMut<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _293 = move _301;
        StorageDead(_301);
        _339 = discriminant(_294);
        StorageDead(_294);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &_98;
        StorageLive(_306);
        StorageLive(_307);
        _307 = &_291;
        _306 = &(*_307);
        StorageLive(_308);
        _308 = _2;
        _304 = OpenbookV2Context::<'_, '_>::to_openbook_v2_fulfillment_config(move _305, move _306, move _308) -> [return: bb128, unwind: bb144];
    }

    bb126: {
        StorageLive(_298);
        _298 = move ((_294 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_300);
        _300 = move _298;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _300) -> [return: bb127, unwind: bb155];
    }

    bb127: {
        StorageDead(_300);
        StorageDead(_298);
        _341 = discriminant(_294);
        StorageDead(_294);
        goto -> bb137;
    }

    bb128: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        _303 = <std::result::Result<OpenbookV2FulfillmentConfig, error::ErrorCode> as Try>::branch(move _304) -> [return: bb129, unwind: bb144];
    }

    bb129: {
        StorageDead(_304);
        _309 = discriminant(_303);
        switchInt(move _309) -> [0: bb130, 1: bb131, otherwise: bb13];
    }

    bb130: {
        StorageLive(_313);
        _313 = ((_303 as Continue).0: state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig);
        _302 = _313;
        StorageDead(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &mut _293;
        _314 = <RefMut<'_, OpenbookV2FulfillmentConfig> as DerefMut>::deref_mut(move _315) -> [return: bb133, unwind: bb144];
    }

    bb131: {
        StorageLive(_310);
        _310 = ((_303 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_312);
        _312 = _310;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _312) -> [return: bb132, unwind: bb144];
    }

    bb132: {
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_302);
        StorageDead(_307);
        StorageDead(_303);
        drop(_293) -> [return: bb137, unwind: bb151];
    }

    bb133: {
        StorageDead(_315);
        (*_314) = move _302;
        StorageDead(_302);
        StorageDead(_314);
        StorageDead(_307);
        StorageDead(_303);
        StorageLive(_316);
        _316 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _316);
        StorageDead(_316);
        drop(_293) -> [return: bb134, unwind: bb151];
    }

    bb134: {
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_103);
        StorageDead(_98);
        StorageDead(_62);
        drop(_50) -> [return: bb135, unwind: bb152];
    }

    bb135: {
        StorageDead(_50);
        drop(_38) -> [return: bb136, unwind: bb154];
    }

    bb136: {
        StorageDead(_38);
        goto -> bb143;
    }

    bb137: {
        StorageDead(_293);
        StorageDead(_291);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_225);
        StorageDead(_223);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_103);
        StorageDead(_98);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_62);
        drop(_50) -> [return: bb141, unwind: bb152];
    }

    bb141: {
        StorageDead(_50);
        drop(_38) -> [return: bb142, unwind: bb154];
    }

    bb142: {
        StorageDead(_38);
        goto -> bb143;
    }

    bb143: {
        return;
    }

    bb144 (cleanup): {
        drop(_293) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_266) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_247) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_200) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_165) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_127) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_78) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_50) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_38) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_15) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        resume;
    }

    bb155 (cleanup): {
        _343 = discriminant(_294);
        goto -> bb151;
    }

    bb156 (cleanup): {
        _344 = discriminant(_51);
        goto -> bb152;
    }

    bb157 (cleanup): {
        _345 = discriminant(_39);
        goto -> bb154;
    }
}
