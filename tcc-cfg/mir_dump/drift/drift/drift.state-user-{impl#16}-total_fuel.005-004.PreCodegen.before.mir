// MIR for `state::user::<impl at programs/drift/src/state/user.rs:2067:1: 2067:18>::total_fuel` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:2067:1: 2067:18>::total_fuel(_1: &FuelOverflow) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let mut _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u128;
    let mut _21: u128;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u128;
    let mut _27: u128;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: u128;
    let mut _33: u128;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: u128;
    let mut _39: u128;
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _20;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _23;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _26;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _29;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _32;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_1).1: u128);
        StorageLive(_15);
        _15 = ((*_1).2: u128);
        _13 = <u128 as SafeMath>::safe_add(move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: u128);
        _11 = _20;
        StorageDead(_20);
        StorageLive(_21);
        _21 = ((*_1).3: u128);
        _10 = <u128 as SafeMath>::safe_add(move _11, move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_10);
        _22 = discriminant(_9);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_9 as Continue).0: u128);
        _8 = _26;
        StorageDead(_26);
        StorageLive(_27);
        _27 = ((*_1).4: u128);
        _7 = <u128 as SafeMath>::safe_add(move _8, move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        goto -> bb23;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_7);
        _28 = discriminant(_6);
        switchInt(move _28) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_32);
        _32 = ((_6 as Continue).0: u128);
        _5 = _32;
        StorageDead(_32);
        StorageLive(_33);
        _33 = ((*_1).5: u128);
        _4 = <u128 as SafeMath>::safe_add(move _5, move _33) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_29);
        _29 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb24;
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_4);
        _34 = discriminant(_3);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_3 as Continue).0: u128);
        _2 = _38;
        StorageDead(_38);
        StorageLive(_39);
        _39 = ((*_1).6: u128);
        _0 = <u128 as SafeMath>::safe_add(move _2, move _39) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_35);
        _35 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb25;
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_2);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb26;
    }

    bb23: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_2);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb26;
    }

    bb26: {
        return;
    }
}
