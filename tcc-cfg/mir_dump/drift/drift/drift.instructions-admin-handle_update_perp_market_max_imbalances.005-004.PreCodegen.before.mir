// MIR for `admin::handle_update_perp_market_max_imbalances` before PreCodegen

fn admin::handle_update_perp_market_max_imbalances(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u64, _3: u64, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug unrealized_max_imbalance => _2;
    debug max_revenue_withdraw_per_period => _3;
    debug quote_max_insurance => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _21: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 2];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &u16;
    let _45: &u16;
    let _46: &state::perp_market::PerpMarket;
    let mut _47: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _49: &state::perp_market::PerpMarket;
    let mut _50: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _51: isize;
    let _52: ();
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _54: std::result::Result<(), error::ErrorCode>;
    let mut _55: bool;
    let mut _56: u64;
    let mut _57: u64;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _61: std::result::Result<u64, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: bool;
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: u64;
    let mut _71: (u64, bool);
    let mut _72: bool;
    let mut _73: u64;
    let mut _74: u64;
    let mut _75: ();
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: &std::string::String;
    let _81: &std::string::String;
    let _82: std::string::String;
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[&str; 2];
    let _87: &[&str; 2];
    let _88: [&str; 2];
    let mut _89: &[core::fmt::rt::Argument<'_>];
    let mut _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: &[core::fmt::rt::Argument<'_>; 1];
    let _92: [core::fmt::rt::Argument<'_>; 1];
    let mut _93: core::fmt::rt::Argument<'_>;
    let mut _94: &error::ErrorCode;
    let _95: &error::ErrorCode;
    let _96: ();
    let mut _97: &str;
    let _98: &str;
    let mut _99: &std::string::String;
    let _100: &std::string::String;
    let _101: std::string::String;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let mut _105: &[&str; 1];
    let _106: &[&str; 1];
    let _107: [&str; 1];
    let mut _108: &[core::fmt::rt::Argument<'_>];
    let mut _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: &[core::fmt::rt::Argument<'_>; 1];
    let _111: [core::fmt::rt::Argument<'_>; 1];
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &u64;
    let _114: &u64;
    let mut _115: error::ErrorCode;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _123: std::result::Result<(), error::ErrorCode>;
    let mut _124: bool;
    let mut _125: u64;
    let mut _126: &state::perp_market::PerpMarket;
    let mut _127: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _128: u64;
    let mut _129: ();
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 2];
    let _141: &[&str; 2];
    let _142: [&str; 2];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: [core::fmt::rt::Argument<'_>; 1];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &error::ErrorCode;
    let _149: &error::ErrorCode;
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 1];
    let _160: &[&str; 1];
    let _161: [&str; 1];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &u64;
    let _168: &u64;
    let _169: &state::perp_market::PerpMarket;
    let mut _170: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _171: error::ErrorCode;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _177: ();
    let mut _178: &str;
    let _179: &str;
    let mut _180: &std::string::String;
    let _181: &std::string::String;
    let _182: std::string::String;
    let mut _184: std::fmt::Arguments<'_>;
    let mut _185: &[&str];
    let mut _186: &[&str; 2];
    let _187: &[&str; 2];
    let _188: [&str; 2];
    let mut _189: &[core::fmt::rt::Argument<'_>];
    let mut _190: &[core::fmt::rt::Argument<'_>; 2];
    let _191: &[core::fmt::rt::Argument<'_>; 2];
    let _192: [core::fmt::rt::Argument<'_>; 2];
    let mut _193: core::fmt::rt::Argument<'_>;
    let mut _194: &u64;
    let _195: &u64;
    let _196: &state::perp_market::PerpMarket;
    let mut _197: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _198: core::fmt::rt::Argument<'_>;
    let mut _199: &u64;
    let _200: &u64;
    let _201: ();
    let mut _202: &str;
    let _203: &str;
    let mut _204: &std::string::String;
    let _205: &std::string::String;
    let _206: std::string::String;
    let mut _208: std::fmt::Arguments<'_>;
    let mut _209: &[&str];
    let mut _210: &[&str; 2];
    let _211: &[&str; 2];
    let _212: [&str; 2];
    let mut _213: &[core::fmt::rt::Argument<'_>];
    let mut _214: &[core::fmt::rt::Argument<'_>; 2];
    let _215: &[core::fmt::rt::Argument<'_>; 2];
    let _216: [core::fmt::rt::Argument<'_>; 2];
    let mut _217: core::fmt::rt::Argument<'_>;
    let mut _218: &u64;
    let _219: &u64;
    let _220: &state::perp_market::PerpMarket;
    let mut _221: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _222: core::fmt::rt::Argument<'_>;
    let mut _223: &u64;
    let _224: &u64;
    let _225: ();
    let mut _226: &str;
    let _227: &str;
    let mut _228: &std::string::String;
    let _229: &std::string::String;
    let _230: std::string::String;
    let mut _232: std::fmt::Arguments<'_>;
    let mut _233: &[&str];
    let mut _234: &[&str; 2];
    let _235: &[&str; 2];
    let _236: [&str; 2];
    let mut _237: &[core::fmt::rt::Argument<'_>];
    let mut _238: &[core::fmt::rt::Argument<'_>; 2];
    let _239: &[core::fmt::rt::Argument<'_>; 2];
    let _240: [core::fmt::rt::Argument<'_>; 2];
    let mut _241: core::fmt::rt::Argument<'_>;
    let mut _242: &u64;
    let _243: &u64;
    let _244: &state::perp_market::PerpMarket;
    let mut _245: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _246: core::fmt::rt::Argument<'_>;
    let mut _247: &u64;
    let _248: &u64;
    let mut _249: u64;
    let mut _250: &mut state::perp_market::PerpMarket;
    let mut _251: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _252: u64;
    let mut _253: &mut state::perp_market::PerpMarket;
    let mut _254: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _255: u64;
    let mut _256: &mut state::perp_market::PerpMarket;
    let mut _257: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _258: ();
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _260: std::result::Result<(), error::ErrorCode>;
    let mut _261: &state::perp_market::PerpMarket;
    let _262: &state::perp_market::PerpMarket;
    let mut _263: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _264: isize;
    let mut _266: !;
    let mut _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _269: ();
    let mut _278: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _279: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _15;
        let _33: std::string::String;
        let _48: u64;
        let mut _277: &[&str; 2];
        scope 10 {
            debug res => _33;
        }
        scope 11 {
            debug max_insurance_for_tier => _48;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u64;
            let _76: error::ErrorCode;
            let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _120: ();
            let _130: error::ErrorCode;
            let _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _176: ();
            let _183: std::string::String;
            let _207: std::string::String;
            let _231: std::string::String;
            let _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _268: ();
            let mut _270: &[&str; 2];
            let mut _271: &[&str; 2];
            let mut _272: &[&str; 2];
            scope 12 {
                debug residual => _63;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _66;
                scope 15 {
                }
            }
            scope 16 {
                debug error_code => _76;
                let _83: std::string::String;
                let _102: std::string::String;
                let mut _275: &[&str; 1];
                let mut _276: &[&str; 2];
                scope 17 {
                    debug res => _83;
                }
                scope 18 {
                    debug res => _102;
                }
            }
            scope 19 {
                debug residual => _117;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _120;
                scope 22 {
                }
            }
            scope 23 {
                debug error_code => _130;
                let _137: std::string::String;
                let _156: std::string::String;
                let mut _273: &[&str; 1];
                let mut _274: &[&str; 2];
                scope 24 {
                    debug res => _137;
                }
                scope 25 {
                    debug res => _156;
                }
            }
            scope 26 {
                debug residual => _173;
                scope 27 {
                }
            }
            scope 28 {
                debug val => _176;
                scope 29 {
                }
            }
            scope 30 {
                debug res => _183;
            }
            scope 31 {
                debug res => _207;
            }
            scope 32 {
                debug res => _231;
            }
            scope 33 {
                debug residual => _265;
                scope 34 {
                }
            }
            scope 35 {
                debug val => _268;
                scope 36 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _278 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _9 = &((*_278).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _8 = &(*_9);
        _7 = constraints::perp_market_valid(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb127];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _280 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _279 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _20 = &((*_279).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _19 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb129];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _286 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb117;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _18 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _19, move _21) -> [return: bb8, unwind: bb127];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind: bb127];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = move ((_17 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _16 = move _26;
        StorageDead(_26);
        _15 = &mut _16;
        _284 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _277 = const _;
        _37 = &(*_277);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_15);
        _46 = <RefMut<'_, PerpMarket> as Deref>::deref(move _47) -> [return: bb13, unwind: bb126];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind: bb128];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _282 = discriminant(_17);
        StorageDead(_17);
        goto -> bb116;
    }

    bb13: {
        StorageDead(_47);
        _45 = &((*_46).21: u16);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _44) -> [return: bb14, unwind: bb126];
    }

    bb14: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb15, unwind: bb126];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb16, unwind: bb126];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb17, unwind: bb125];
    }

    bb17: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb18, unwind: bb125];
    }

    bb18: {
        StorageDead(_28);
        drop(_32) -> [return: bb19, unwind: bb126];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_15);
        _49 = <RefMut<'_, PerpMarket> as Deref>::deref(move _50) -> [return: bb20, unwind: bb126];
    }

    bb20: {
        StorageDead(_50);
        _51 = discriminant(((*_49).24: state::perp_market::ContractTier));
        switchInt(move _51) -> [0: bb22, 1: bb23, 2: bb24, 3: bb25, 4: bb26, 5: bb21, otherwise: bb4];
    }

    bb21: {
        _48 = const _;
        goto -> bb27;
    }

    bb22: {
        _48 = const _;
        goto -> bb27;
    }

    bb23: {
        _48 = const _;
        goto -> bb27;
    }

    bb24: {
        _48 = const _;
        goto -> bb27;
    }

    bb25: {
        _48 = const _;
        goto -> bb27;
    }

    bb26: {
        _48 = const _;
        goto -> bb27;
    }

    bb27: {
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _3;
        StorageLive(_57);
        StorageLive(_58);
        _58 = _48;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = <u128 as Cast>::cast::<u64>(const _) -> [return: bb28, unwind: bb126];
    }

    bb28: {
        _60 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _61) -> [return: bb29, unwind: bb126];
    }

    bb29: {
        StorageDead(_61);
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_66);
        _66 = ((_60 as Continue).0: u64);
        _59 = _66;
        StorageDead(_66);
        _57 = <u64 as Ord>::max(move _58, move _59) -> [return: bb33, unwind: bb126];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb32, unwind: bb126];
    }

    bb32: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb114;
    }

    bb33: {
        StorageDead(_59);
        StorageDead(_58);
        _55 = Le(move _56, move _57);
        switchInt(move _55) -> [0: bb40, otherwise: bb34];
    }

    bb34: {
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _2;
        StorageLive(_69);
        StorageLive(_70);
        _70 = _48;
        _71 = CheckedAdd(_70, const 1_u64);
        assert(!move (_71.1: bool), "attempt to compute `{} + {}`, which would overflow", move _70, const 1_u64) -> [success: bb35, unwind: bb126];
    }

    bb35: {
        _69 = move (_71.0: u64);
        StorageDead(_70);
        _67 = Le(move _68, move _69);
        switchInt(move _67) -> [0: bb39, otherwise: bb36];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _4;
        StorageLive(_74);
        _74 = _48;
        _72 = Le(move _73, move _74);
        switchInt(move _72) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_75);
        _75 = ();
        _54 = std::result::Result::<(), error::ErrorCode>::Ok(move _75);
        StorageDead(_75);
        goto -> bb54;
    }

    bb38: {
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb41;
    }

    bb39: {
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb41;
    }

    bb41: {
        StorageLive(_76);
        _76 = error::ErrorCode::DefaultError;
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _276 = const _;
        _87 = &(*_276);
        _86 = &(*_87);
        _85 = move _86 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_86);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_76;
        _94 = &(*_95);
        _93 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _94) -> [return: bb42, unwind: bb126];
    }

    bb42: {
        StorageDead(_94);
        _92 = [move _93];
        StorageDead(_93);
        _91 = &_92;
        _90 = &(*_91);
        _89 = move _90 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_90);
        _84 = Arguments::<'_>::new_v1(move _85, move _89) -> [return: bb43, unwind: bb126];
    }

    bb43: {
        StorageDead(_89);
        StorageDead(_85);
        _83 = format(move _84) -> [return: bb44, unwind: bb126];
    }

    bb44: {
        StorageDead(_84);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_87);
        _82 = move _83;
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = <String as Deref>::deref(move _80) -> [return: bb45, unwind: bb124];
    }

    bb45: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb46, unwind: bb124];
    }

    bb46: {
        StorageDead(_78);
        drop(_82) -> [return: bb47, unwind: bb126];
    }

    bb47: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _275 = const _;
        _106 = &(*_275);
        _105 = &(*_106);
        _104 = move _105 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_48;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _113) -> [return: bb48, unwind: bb126];
    }

    bb48: {
        StorageDead(_113);
        _111 = [move _112];
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = move _109 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_109);
        _103 = Arguments::<'_>::new_v1(move _104, move _108) -> [return: bb49, unwind: bb126];
    }

    bb49: {
        StorageDead(_108);
        StorageDead(_104);
        _102 = format(move _103) -> [return: bb50, unwind: bb126];
    }

    bb50: {
        StorageDead(_103);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_106);
        _101 = move _102;
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = <String as Deref>::deref(move _99) -> [return: bb51, unwind: bb123];
    }

    bb51: {
        _97 = &(*_98);
        StorageDead(_99);
        _96 = solana_program::log::sol_log(move _97) -> [return: bb52, unwind: bb123];
    }

    bb52: {
        StorageDead(_97);
        drop(_101) -> [return: bb53, unwind: bb126];
    }

    bb53: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageLive(_115);
        _115 = _76;
        _54 = std::result::Result::<(), error::ErrorCode>::Err(move _115);
        StorageDead(_115);
        StorageDead(_76);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_72);
        StorageDead(_67);
        StorageDead(_55);
        _53 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _54) -> [return: bb55, unwind: bb126];
    }

    bb55: {
        StorageDead(_54);
        _116 = discriminant(_53);
        switchInt(move _116) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_120);
        _120 = ((_53 as Continue).0: ());
        _52 = _120;
        StorageDead(_120);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &(*_15);
        _126 = <RefMut<'_, PerpMarket> as Deref>::deref(move _127) -> [return: bb59, unwind: bb126];
    }

    bb57: {
        StorageLive(_117);
        _117 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb58, unwind: bb126];
    }

    bb58: {
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb114;
    }

    bb59: {
        StorageDead(_127);
        _125 = (((*_126).4: state::perp_market::InsuranceClaim).3: u64);
        StorageLive(_128);
        _128 = _4;
        _124 = Le(move _125, move _128);
        switchInt(move _124) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_129);
        _129 = ();
        _123 = std::result::Result::<(), error::ErrorCode>::Ok(move _129);
        StorageDead(_129);
        goto -> bb75;
    }

    bb61: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_130);
        _130 = error::ErrorCode::DefaultError;
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _274 = const _;
        _141 = &(*_274);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_130;
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _148) -> [return: bb62, unwind: bb126];
    }

    bb62: {
        StorageDead(_148);
        _146 = [move _147];
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb63, unwind: bb126];
    }

    bb63: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb64, unwind: bb126];
    }

    bb64: {
        StorageDead(_138);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb65, unwind: bb122];
    }

    bb65: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb66, unwind: bb122];
    }

    bb66: {
        StorageDead(_132);
        drop(_136) -> [return: bb67, unwind: bb126];
    }

    bb67: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _273 = const _;
        _160 = &(*_273);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &(*_15);
        _169 = <RefMut<'_, PerpMarket> as Deref>::deref(move _170) -> [return: bb68, unwind: bb126];
    }

    bb68: {
        StorageDead(_170);
        _168 = &(((*_169).4: state::perp_market::InsuranceClaim).3: u64);
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _167) -> [return: bb69, unwind: bb126];
    }

    bb69: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb70, unwind: bb126];
    }

    bb70: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb71, unwind: bb126];
    }

    bb71: {
        StorageDead(_157);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb72, unwind: bb121];
    }

    bb72: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb73, unwind: bb121];
    }

    bb73: {
        StorageDead(_151);
        drop(_155) -> [return: bb74, unwind: bb126];
    }

    bb74: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_171);
        _171 = _130;
        _123 = std::result::Result::<(), error::ErrorCode>::Err(move _171);
        StorageDead(_171);
        StorageDead(_130);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_124);
        _122 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _123) -> [return: bb76, unwind: bb126];
    }

    bb76: {
        StorageDead(_123);
        _172 = discriminant(_122);
        switchInt(move _172) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_176);
        _176 = ((_122 as Continue).0: ());
        _121 = _176;
        StorageDead(_176);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _272 = const _;
        _187 = &(*_272);
        _186 = &(*_187);
        _185 = move _186 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &(*_15);
        _196 = <RefMut<'_, PerpMarket> as Deref>::deref(move _197) -> [return: bb80, unwind: bb126];
    }

    bb78: {
        StorageLive(_173);
        _173 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _175) -> [return: bb79, unwind: bb126];
    }

    bb79: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb115;
    }

    bb80: {
        StorageDead(_197);
        _195 = &(((*_196).4: state::perp_market::InsuranceClaim).1: u64);
        _194 = &(*_195);
        _193 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _194) -> [return: bb81, unwind: bb126];
    }

    bb81: {
        StorageDead(_194);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_3;
        _199 = &(*_200);
        _198 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _199) -> [return: bb82, unwind: bb126];
    }

    bb82: {
        StorageDead(_199);
        _192 = [move _193, move _198];
        StorageDead(_198);
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = move _190 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_190);
        _184 = Arguments::<'_>::new_v1(move _185, move _189) -> [return: bb83, unwind: bb126];
    }

    bb83: {
        StorageDead(_189);
        StorageDead(_185);
        _183 = format(move _184) -> [return: bb84, unwind: bb126];
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_200);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_187);
        _182 = move _183;
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = <String as Deref>::deref(move _180) -> [return: bb85, unwind: bb120];
    }

    bb85: {
        _178 = &(*_179);
        StorageDead(_180);
        _177 = solana_program::log::sol_log(move _178) -> [return: bb86, unwind: bb120];
    }

    bb86: {
        StorageDead(_178);
        drop(_182) -> [return: bb87, unwind: bb126];
    }

    bb87: {
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_177);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _271 = const _;
        _211 = &(*_271);
        _210 = &(*_211);
        _209 = move _210 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_210);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_15);
        _220 = <RefMut<'_, PerpMarket> as Deref>::deref(move _221) -> [return: bb88, unwind: bb126];
    }

    bb88: {
        StorageDead(_221);
        _219 = &((*_220).5: u64);
        _218 = &(*_219);
        _217 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _218) -> [return: bb89, unwind: bb126];
    }

    bb89: {
        StorageDead(_218);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_2;
        _223 = &(*_224);
        _222 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _223) -> [return: bb90, unwind: bb126];
    }

    bb90: {
        StorageDead(_223);
        _216 = [move _217, move _222];
        StorageDead(_222);
        StorageDead(_217);
        _215 = &_216;
        _214 = &(*_215);
        _213 = move _214 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_214);
        _208 = Arguments::<'_>::new_v1(move _209, move _213) -> [return: bb91, unwind: bb126];
    }

    bb91: {
        StorageDead(_213);
        StorageDead(_209);
        _207 = format(move _208) -> [return: bb92, unwind: bb126];
    }

    bb92: {
        StorageDead(_208);
        StorageDead(_224);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_211);
        _206 = move _207;
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        _203 = <String as Deref>::deref(move _204) -> [return: bb93, unwind: bb119];
    }

    bb93: {
        _202 = &(*_203);
        StorageDead(_204);
        _201 = solana_program::log::sol_log(move _202) -> [return: bb94, unwind: bb119];
    }

    bb94: {
        StorageDead(_202);
        drop(_206) -> [return: bb95, unwind: bb126];
    }

    bb95: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_201);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _270 = const _;
        _235 = &(*_270);
        _234 = &(*_235);
        _233 = move _234 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_234);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &(*_15);
        _244 = <RefMut<'_, PerpMarket> as Deref>::deref(move _245) -> [return: bb96, unwind: bb126];
    }

    bb96: {
        StorageDead(_245);
        _243 = &(((*_244).4: state::perp_market::InsuranceClaim).2: u64);
        _242 = &(*_243);
        _241 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _242) -> [return: bb97, unwind: bb126];
    }

    bb97: {
        StorageDead(_242);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_4;
        _247 = &(*_248);
        _246 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _247) -> [return: bb98, unwind: bb126];
    }

    bb98: {
        StorageDead(_247);
        _240 = [move _241, move _246];
        StorageDead(_246);
        StorageDead(_241);
        _239 = &_240;
        _238 = &(*_239);
        _237 = move _238 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_238);
        _232 = Arguments::<'_>::new_v1(move _233, move _237) -> [return: bb99, unwind: bb126];
    }

    bb99: {
        StorageDead(_237);
        StorageDead(_233);
        _231 = format(move _232) -> [return: bb100, unwind: bb126];
    }

    bb100: {
        StorageDead(_232);
        StorageDead(_248);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_235);
        _230 = move _231;
        StorageDead(_231);
        _229 = &_230;
        _228 = &(*_229);
        _227 = <String as Deref>::deref(move _228) -> [return: bb101, unwind: bb118];
    }

    bb101: {
        _226 = &(*_227);
        StorageDead(_228);
        _225 = solana_program::log::sol_log(move _226) -> [return: bb102, unwind: bb118];
    }

    bb102: {
        StorageDead(_226);
        drop(_230) -> [return: bb103, unwind: bb126];
    }

    bb103: {
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        StorageLive(_249);
        _249 = _3;
        StorageLive(_250);
        StorageLive(_251);
        _251 = &mut (*_15);
        _250 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _251) -> [return: bb104, unwind: bb126];
    }

    bb104: {
        StorageDead(_251);
        (((*_250).4: state::perp_market::InsuranceClaim).1: u64) = move _249;
        StorageDead(_249);
        StorageDead(_250);
        StorageLive(_252);
        _252 = _2;
        StorageLive(_253);
        StorageLive(_254);
        _254 = &mut (*_15);
        _253 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _254) -> [return: bb105, unwind: bb126];
    }

    bb105: {
        StorageDead(_254);
        ((*_253).5: u64) = move _252;
        StorageDead(_252);
        StorageDead(_253);
        StorageLive(_255);
        _255 = _4;
        StorageLive(_256);
        StorageLive(_257);
        _257 = &mut (*_15);
        _256 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _257) -> [return: bb106, unwind: bb126];
    }

    bb106: {
        StorageDead(_257);
        (((*_256).4: state::perp_market::InsuranceClaim).2: u64) = move _255;
        StorageDead(_255);
        StorageDead(_256);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &(*_15);
        _262 = <RefMut<'_, PerpMarket> as Deref>::deref(move _263) -> [return: bb107, unwind: bb126];
    }

    bb107: {
        _261 = &(*_262);
        StorageDead(_263);
        _260 = validate_perp_market(move _261) -> [return: bb108, unwind: bb126];
    }

    bb108: {
        StorageDead(_261);
        _259 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _260) -> [return: bb109, unwind: bb126];
    }

    bb109: {
        StorageDead(_260);
        _264 = discriminant(_259);
        switchInt(move _264) -> [0: bb110, 1: bb111, otherwise: bb4];
    }

    bb110: {
        StorageLive(_268);
        _268 = ((_259 as Continue).0: ());
        _258 = _268;
        StorageDead(_268);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_269);
        _269 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _269);
        StorageDead(_269);
        StorageDead(_48);
        drop(_16) -> [return: bb113, unwind: bb127];
    }

    bb111: {
        StorageLive(_265);
        _265 = ((_259 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_267);
        _267 = _265;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _267) -> [return: bb112, unwind: bb126];
    }

    bb112: {
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        goto -> bb115;
    }

    bb113: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb117;
    }

    bb114: {
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_48);
        drop(_16) -> [return: bb116, unwind: bb127];
    }

    bb116: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb117;
    }

    bb117: {
        return;
    }

    bb118 (cleanup): {
        drop(_230) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_206) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_182) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_155) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_136) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_101) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_82) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_32) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_16) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        resume;
    }

    bb128 (cleanup): {
        _288 = discriminant(_17);
        goto -> bb127;
    }

    bb129 (cleanup): {
        _289 = discriminant(_6);
        goto -> bb127;
    }
}
