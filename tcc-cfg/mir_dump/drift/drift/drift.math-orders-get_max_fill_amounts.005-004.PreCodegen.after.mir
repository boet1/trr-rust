// MIR for `math::orders::get_max_fill_amounts` after PreCodegen

fn math::orders::get_max_fill_amounts(_1: &User, _2: usize, _3: &SpotMarket, _4: &SpotMarket, _5: bool) -> std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> {
    debug user => _1;
    debug user_order_index => _2;
    debug base_market => _3;
    debug quote_market => _4;
    debug is_leaving_drift => _5;
    let mut _0: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let _6: controller::position::PositionDirection;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _13: std::result::Result<u64, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: &state::user::User;
    let mut _18: &state::spot_market::SpotMarket;
    let mut _19: bool;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _31: std::option::Option<u64>;
    let mut _32: std::option::Option<u64>;
    let mut _33: u64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _36: std::result::Result<u64, error::ErrorCode>;
    let mut _37: u64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _39: std::result::Result<u64, error::ErrorCode>;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: &state::user::User;
    let mut _44: &state::spot_market::SpotMarket;
    let mut _45: bool;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _63: std::option::Option<u64>;
    let mut _64: u64;
    let mut _65: std::option::Option<u64>;
    scope 1 {
        debug direction => _6;
        let _11: u64;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: u128;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u64;
        let _34: u64;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: u128;
        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _55: u64;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: u64;
        scope 2 {
            debug max_quote => _11;
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
        scope 11 {
            debug max_base => _34;
        }
        scope 12 {
            debug residual => _47;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _50;
            scope 15 {
            }
        }
        scope 16 {
            debug residual => _52;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _55;
            scope 19 {
            }
        }
        scope 20 {
            debug residual => _58;
            scope 21 {
            }
        }
        scope 22 {
            debug val => _61;
            scope 23 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _8 = Len(((*_1).5: [state::user::Order; 32]));
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = (((*_1).5: [state::user::Order; 32])[_7].17: controller::position::PositionDirection);
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(*_1);
        StorageLive(_44);
        _44 = &(*_3);
        StorageLive(_45);
        _45 = _5;
        _42 = get_max_fill_amounts_for_market(move _43, move _44, move _45) -> [return: bb15, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_1);
        StorageLive(_18);
        _18 = &(*_4);
        StorageLive(_19);
        _19 = _5;
        _16 = get_max_fill_amounts_for_market(move _17, move _18, move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb7, 1: bb8, otherwise: bb3];
    }

    bb7: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: u128);
        _14 = _24;
        StorageDead(_24);
        _13 = <u128 as Cast>::cast::<u64>(move _14) -> [return: bb10, unwind continue];
    }

    bb8: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb33;
    }

    bb10: {
        StorageDead(_14);
        _12 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_13);
        _25 = discriminant(_12);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_12 as Continue).0: u64);
        _11 = _29;
        StorageDead(_29);
        StorageDead(_15);
        StorageDead(_12);
        StorageLive(_30);
        StorageLive(_31);
        _31 = Option::<u64>::None;
        StorageLive(_32);
        StorageLive(_33);
        _33 = _11;
        _32 = Option::<u64>::Some(move _33);
        StorageDead(_33);
        _30 = (move _31, move _32);
        StorageDead(_32);
        StorageDead(_31);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        StorageDead(_11);
        goto -> bb30;
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb33;
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_42);
        _46 = discriminant(_41);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        StorageLive(_50);
        _50 = ((_41 as Continue).0: u128);
        _40 = _50;
        StorageDead(_50);
        _39 = <u128 as Cast>::cast::<u64>(move _40) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb31;
    }

    bb20: {
        StorageDead(_40);
        _38 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        _51 = discriminant(_38);
        switchInt(move _51) -> [0: bb22, 1: bb23, otherwise: bb3];
    }

    bb22: {
        StorageLive(_55);
        _55 = ((_38 as Continue).0: u64);
        _37 = _55;
        StorageDead(_55);
        StorageLive(_56);
        _56 = ((*_3).25: u64);
        _36 = math::orders::standardize_base_asset_amount(move _37, move _56) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_52);
        _52 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_54);
        StorageDead(_52);
        goto -> bb31;
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_37);
        _35 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_36);
        _57 = discriminant(_35);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb3];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_35 as Continue).0: u64);
        _34 = _61;
        StorageDead(_61);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _34;
        _63 = Option::<u64>::Some(move _64);
        StorageDead(_64);
        StorageLive(_65);
        _65 = Option::<u64>::None;
        _62 = (move _63, move _65);
        StorageDead(_65);
        StorageDead(_63);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _62);
        StorageDead(_62);
        StorageDead(_34);
        goto -> bb30;
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_6);
        goto -> bb35;
    }

    bb31: {
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_6);
        goto -> bb35;
    }

    bb35: {
        return;
    }
}
