// MIR for `instructions::user::handle_place_and_make_signed_msg_perp_order` after PreCodegen

fn instructions::user::handle_place_and_make_signed_msg_perp_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceAndMakeSignedMsg<'_>>, _2: order_params::OrderParams, _3: [u8; 8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    debug signed_msg_order_uuid => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &anchor_lang::prelude::Clock;
    let _15: anchor_lang::prelude::Clock;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _17: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _22: anchor_lang::prelude::Clock;
    let mut _25: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _26: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _27: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _31: instructions::optional_accounts::AccountMaps<'_>;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _33: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _34: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _35: &std::collections::BTreeSet<u16>;
    let _36: &std::collections::BTreeSet<u16>;
    let _37: std::collections::BTreeSet<u16>;
    let mut _38: u16;
    let mut _39: &std::collections::BTreeSet<u16>;
    let _40: &std::collections::BTreeSet<u16>;
    let _41: std::collections::BTreeSet<u16>;
    let mut _42: u64;
    let mut _43: anchor_lang::prelude::Clock;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _45: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _51: std::option::Option<state::state::OracleGuardRails>;
    let mut _52: state::state::OracleGuardRails;
    let mut _53: &state::state::State;
    let mut _54: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: bool;
    let mut _62: &state::order_params::OrderParams;
    let mut _63: bool;
    let mut _64: &state::order_params::PostOnlyParam;
    let mut _65: &state::order_params::PostOnlyParam;
    let _66: state::order_params::PostOnlyParam;
    let mut _67: bool;
    let mut _68: &state::user::OrderType;
    let mut _69: &state::user::OrderType;
    let _70: state::user::OrderType;
    let mut _71: !;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: anchor_lang::error::Error;
    let mut _76: error::ErrorCode;
    let mut _77: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _78: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _79: ();
    let _80: i128;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _82: std::result::Result<i128, error::ErrorCode>;
    let mut _83: u16;
    let mut _84: &state::perp_market_map::PerpMarketMap<'_>;
    let _85: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _86: &mut state::oracle_map::OracleMap<'_>;
    let mut _87: &mut state::oracle_map::OracleMap<'_>;
    let mut _88: &state::state::State;
    let _89: &state::state::State;
    let mut _90: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _91: &anchor_lang::prelude::Clock;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _101: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _102: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _103: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _104: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _110: ();
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _112: std::result::Result<(), error::ErrorCode>;
    let mut _113: &state::state::State;
    let _114: &state::state::State;
    let mut _115: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _116: &mut state::user::User;
    let mut _117: &mut state::user::User;
    let mut _118: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _119: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _120: anchor_lang::prelude::Pubkey;
    let mut _121: &state::perp_market_map::PerpMarketMap<'_>;
    let _122: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _123: &state::spot_market_map::SpotMarketMap<'_>;
    let _124: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _125: &mut state::oracle_map::OracleMap<'_>;
    let mut _126: &mut state::oracle_map::OracleMap<'_>;
    let mut _127: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _128: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _129: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _130: &anchor_lang::prelude::Clock;
    let mut _131: state::order_params::OrderParams;
    let mut _132: state::order_params::PlaceOrderOptions;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: (u32, anchor_lang::prelude::Pubkey);
    let mut _141: u32;
    let mut _142: &state::user::User;
    let _143: &state::user::User;
    let mut _144: &std::cell::RefMut<'_, state::user::User>;
    let mut _145: anchor_lang::prelude::Pubkey;
    let mut _146: &state::user::User;
    let mut _147: &std::cell::RefMut<'_, state::user::User>;
    let _148: ();
    let mut _149: std::cell::RefMut<'_, state::user::User>;
    let mut _152: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>)>;
    let mut _154: std::result::Result<(state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>), error::ErrorCode>;
    let mut _155: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _161: ();
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _163: std::result::Result<(), error::ErrorCode>;
    let mut _164: &mut state::user_map::UserMap<'_>;
    let mut _165: anchor_lang::prelude::Pubkey;
    let mut _166: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _167: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _168: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _174: ();
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _176: std::result::Result<(), error::ErrorCode>;
    let mut _177: &mut state::user_map::UserStatsMap<'_>;
    let mut _178: anchor_lang::prelude::Pubkey;
    let mut _179: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _180: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::signed_msg_user::SignedMsgUserOrdersZeroCopy<'_>>;
    let mut _188: std::result::Result<state::signed_msg_user::SignedMsgUserOrdersZeroCopy<'_>, error::ErrorCode>;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: &state::signed_msg_user::SignedMsgOrderId;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::signed_msg_user::SignedMsgOrderId>;
    let mut _198: std::result::Result<&state::signed_msg_user::SignedMsgOrderId, error::ErrorCode>;
    let mut _199: std::option::Option<&state::signed_msg_user::SignedMsgOrderId>;
    let mut _200: &mut std::iter::Map<std::ops::Range<u32>, {closure@programs/drift/src/state/signed_msg_user.rs:103:29: 103:37}>;
    let mut _201: std::iter::Map<std::ops::Range<u32>, {closure@programs/drift/src/state/signed_msg_user.rs:103:29: 103:37}>;
    let mut _202: &state::signed_msg_user::SignedMsgUserOrdersZeroCopy<'_>;
    let mut _203: {closure@programs/drift/src/instructions/user.rs:2555:15: 2555:36};
    let mut _204: &[u8; 8];
    let mut _205: error::ErrorCode;
    let mut _206: isize;
    let mut _208: !;
    let mut _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _211: (u64, u64);
    let mut _212: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _213: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _214: u32;
    let mut _215: &state::state::State;
    let _216: &state::state::State;
    let mut _217: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _218: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _219: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _220: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _221: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _222: &state::spot_market_map::SpotMarketMap<'_>;
    let _223: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _224: &state::perp_market_map::PerpMarketMap<'_>;
    let _225: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _226: &mut state::oracle_map::OracleMap<'_>;
    let mut _227: &mut state::oracle_map::OracleMap<'_>;
    let mut _228: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _229: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _230: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _231: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _232: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _233: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _234: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _235: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _236: &state::user_map::UserMap<'_>;
    let _237: &state::user_map::UserMap<'_>;
    let mut _238: &state::user_map::UserStatsMap<'_>;
    let _239: &state::user_map::UserStatsMap<'_>;
    let mut _240: std::option::Option<u32>;
    let mut _241: u32;
    let mut _242: &anchor_lang::prelude::Clock;
    let mut _243: state::fill_mode::FillMode;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _250: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _251: std::slice::Iter<'_, state::user::Order>;
    let mut _252: &[state::user::Order];
    let mut _253: &[state::user::Order; 32];
    let _254: &state::user::User;
    let mut _255: &std::cell::Ref<'_, state::user::User>;
    let _256: std::cell::Ref<'_, state::user::User>;
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _258: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _259: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _260: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _261: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _267: {closure@programs/drift/src/instructions/user.rs:2579:14: 2579:21};
    let mut _268: &u32;
    let _269: ();
    let mut _270: bool;
    let _271: ();
    let mut _272: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _273: std::result::Result<(), error::ErrorCode>;
    let mut _274: u32;
    let mut _275: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _276: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _277: &state::perp_market_map::PerpMarketMap<'_>;
    let _278: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _279: &state::spot_market_map::SpotMarketMap<'_>;
    let _280: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _281: &mut state::oracle_map::OracleMap<'_>;
    let mut _282: &mut state::oracle_map::OracleMap<'_>;
    let mut _283: &anchor_lang::prelude::Clock;
    let mut _284: isize;
    let mut _286: !;
    let mut _287: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _289: ();
    let mut _294: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _295: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _296: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _297: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _298: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _299: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _300: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _301: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _302: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _303: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _304: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _305: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _306: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _307: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _308: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _309: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _310: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _311: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _312: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _313: &mut instructions::user::PlaceAndMakeSignedMsg<'_>;
    let mut _314: bool;
    let mut _315: bool;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _362: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _363: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _364: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _365: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _23: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _23;
            let _24: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 11 {
                debug remaining_accounts_iter => _24;
                let _28: state::perp_market_map::PerpMarketMap<'_>;
                let _29: state::spot_market_map::SpotMarketMap<'_>;
                let mut _30: state::oracle_map::OracleMap<'_>;
                let _47: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _50: anchor_lang::prelude::Clock;
                let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _59: instructions::optional_accounts::AccountMaps<'_>;
                scope 12 {
                    debug perp_market_map => _28;
                    debug spot_market_map => _29;
                    debug oracle_map => _30;
                    let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _96: i128;
                    let _97: anchor_lang::prelude::Pubkey;
                    let mut _290: &{closure@programs/drift/src/error.rs:647:9: 647:11};
                    let mut _292: &state::user::OrderType;
                    let mut _293: &state::order_params::PostOnlyParam;
                    scope 21 {
                        debug residual => _93;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _96;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug user_key => _97;
                        let mut _99: std::cell::RefMut<'_, state::user::User>;
                        let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _109: std::cell::RefMut<'_, state::user::User>;
                        scope 26 {
                            debug user => _99;
                            let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _137: ();
                            let _138: u32;
                            let _139: anchor_lang::prelude::Pubkey;
                            let mut _291: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                            scope 31 {
                                debug residual => _134;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _137;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug order_id => _138;
                                debug authority => _139;
                                let mut _150: state::user_map::UserMap<'_>;
                                let mut _151: state::user_map::UserStatsMap<'_>;
                                let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _160: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
                                scope 36 {
                                    debug makers_and_referrer => _150;
                                    debug makers_and_referrer_stats => _151;
                                    let _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _173: ();
                                    let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _185: ();
                                    let _186: state::signed_msg_user::SignedMsgUserOrdersZeroCopy<'_>;
                                    let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _194: state::signed_msg_user::SignedMsgUserOrdersZeroCopy<'_>;
                                    scope 41 {
                                        debug residual => _170;
                                        scope 42 {
                                        }
                                    }
                                    scope 43 {
                                        debug val => _173;
                                        scope 44 {
                                        }
                                    }
                                    scope 45 {
                                        debug residual => _182;
                                        scope 46 {
                                        }
                                    }
                                    scope 47 {
                                        debug val => _185;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug taker_signed_msg_account => _186;
                                        let _195: u32;
                                        let _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _210: &state::signed_msg_user::SignedMsgOrderId;
                                        scope 54 {
                                            debug taker_order_id => _195;
                                            let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _248: (u64, u64);
                                            let _249: bool;
                                            let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _266: std::cell::Ref<'_, state::user::User>;
                                            scope 59 {
                                                debug residual => _245;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug val => _248;
                                                scope 62 {
                                                }
                                            }
                                            scope 63 {
                                                debug order_exists => _249;
                                                let _285: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _288: ();
                                                scope 68 {
                                                    debug residual => _285;
                                                    scope 69 {
                                                    }
                                                }
                                                scope 70 {
                                                    debug val => _288;
                                                    scope 71 {
                                                    }
                                                }
                                            }
                                            scope 64 {
                                                debug residual => _263;
                                                scope 65 {
                                                }
                                            }
                                            scope 66 {
                                                debug val => _266;
                                                scope 67 {
                                                }
                                            }
                                        }
                                        scope 55 {
                                            debug residual => _207;
                                            scope 56 {
                                            }
                                        }
                                        scope 57 {
                                            debug val => _210;
                                            scope 58 {
                                            }
                                        }
                                    }
                                    scope 50 {
                                        debug residual => _191;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug val => _194;
                                        scope 53 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _157;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _160;
                                    scope 40 {
                                    }
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _106;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _109;
                            scope 30 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _47;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _50;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug residual => _56;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _59;
                    scope 20 {
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        _314 = const false;
        _316 = const false;
        _315 = const false;
        _317 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _294 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _8 = &((*_294).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _295 = deref_copy (*_8);
        _361 = (((_295.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_361);
        _6 = constraints::fill_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb154];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _318 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb168];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _348 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb143;
    }

    bb7: {
        _16 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _17) -> [return: bb8, unwind: bb154];
    }

    bb8: {
        StorageDead(_17);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = move ((_16 as Continue).0: anchor_lang::prelude::Clock);
        _15 = move _22;
        StorageDead(_22);
        _14 = &_15;
        _320 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_23);
        _296 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _23 = &((*_296).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _297 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _27 = &(*_297);
        _26 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _21) -> [return: bb11, unwind: bb167];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        _346 = discriminant(_16);
        StorageDead(_16);
        goto -> bb142;
    }

    bb12: {
        StorageDead(_27);
        _25 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        _24 = &mut _25;
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut (*_24);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = (_2.6: u16);
        _37 = get_writable_perp_market_set(move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb153];
    }

    bb15: {
        _40 = &_41;
        _39 = &(*_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb16, unwind: bb152];
    }

    bb16: {
        _44 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _45) -> [return: bb17, unwind: bb152];
    }

    bb17: {
        _315 = const true;
        _316 = const true;
        StorageDead(_45);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_50);
        _50 = move ((_44 as Continue).0: anchor_lang::prelude::Clock);
        _43 = move _50;
        StorageDead(_50);
        _42 = (_43.0: u64);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _298 = deref_copy (*_23);
        _362 = (((_298.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _54 = &(*_362);
        _53 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _54) -> [return: bb21, unwind: bb166];
    }

    bb19: {
        StorageLive(_47);
        _47 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _49) -> [return: bb20, unwind: bb166];
    }

    bb20: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb158;
    }

    bb21: {
        StorageDead(_54);
        _52 = ((*_53).7: state::state::OracleGuardRails);
        _51 = Option::<state::state::OracleGuardRails>::Some(move _52);
        StorageDead(_52);
        _33 = load_maps(move _34, move _35, move _39, move _42, move _51) -> [return: bb22, unwind: bb166];
    }

    bb22: {
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _33) -> [return: bb23, unwind: bb166];
    }

    bb23: {
        StorageDead(_33);
        _55 = discriminant(_32);
        switchInt(move _55) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_59);
        _59 = move ((_32 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _31 = move _59;
        StorageDead(_59);
        StorageLive(_28);
        _28 = move (_31.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_29);
        _29 = move (_31.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_30);
        _30 = move (_31.2: state::oracle_map::OracleMap<'_>);
        _324 = discriminant(_32);
        StorageDead(_53);
        _326 = discriminant(_44);
        _315 = const false;
        _316 = const false;
        StorageDead(_44);
        StorageDead(_43);
        drop(_41) -> [return: bb27, unwind: bb148];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb26, unwind: bb165];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_56);
        _322 = discriminant(_32);
        StorageDead(_53);
        goto -> bb158;
    }

    bb27: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_37) -> [return: bb28, unwind: bb149];
    }

    bb28: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_2;
        _61 = order_params::OrderParams::is_immediate_or_cancel(move _62) -> [return: bb29, unwind: bb149];
    }

    bb29: {
        switchInt(move _61) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(_2.8: state::order_params::PostOnlyParam);
        StorageLive(_65);
        _293 = const _;
        _65 = &(*_293);
        _63 = <PostOnlyParam as PartialEq>::eq(move _64, move _65) -> [return: bb32, unwind: bb149];
    }

    bb31: {
        StorageDead(_62);
        goto -> bb33;
    }

    bb32: {
        switchInt(move _63) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb36;
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &(_2.0: state::user::OrderType);
        StorageLive(_69);
        _292 = const _;
        _69 = &(*_292);
        _67 = <state::user::OrderType as PartialEq>::ne(move _68, move _69) -> [return: bb35, unwind: bb149];
    }

    bb35: {
        switchInt(move _67) -> [0: bb40, otherwise: bb36];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = const "place_and_make must use IOC post only limit order";
        _73 = &(*_74);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb37, unwind: bb149];
    }

    bb37: {
        StorageDead(_73);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _290 = const _;
        _77 = &(*_290);
        StorageLive(_79);
        _79 = ();
        _76 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _77, move _79) -> [return: bb38, unwind: bb149];
    }

    bb38: {
        StorageDead(_79);
        StorageDead(_77);
        _75 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _76) -> [return: bb39, unwind: bb149];
    }

    bb39: {
        StorageDead(_76);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _75);
        StorageDead(_75);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb135;
    }

    bb40: {
        StorageDead(_69);
        StorageDead(_68);
        _60 = const ();
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = (_2.6: u16);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_28;
        _84 = &(*_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut _30;
        _86 = &mut (*_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _299 = deref_copy (*_23);
        _363 = (((_299.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _90 = &(*_363);
        _89 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _90) -> [return: bb41, unwind: bb149];
    }

    bb41: {
        _88 = &(*_89);
        StorageDead(_90);
        StorageLive(_91);
        _91 = &(*_14);
        _82 = update_amm(move _83, move _84, move _86, move _88, move _91) -> [return: bb42, unwind: bb149];
    }

    bb42: {
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        _81 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _82) -> [return: bb43, unwind: bb149];
    }

    bb43: {
        StorageDead(_82);
        _92 = discriminant(_81);
        switchInt(move _92) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_96);
        _96 = ((_81 as Continue).0: i128);
        _80 = _96;
        StorageDead(_96);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_97);
        StorageLive(_98);
        _300 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _98 = &((*_300).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _97 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _98) -> [return: bb47, unwind: bb149];
    }

    bb45: {
        StorageLive(_93);
        _93 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb46, unwind: bb149];
    }

    bb46: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb135;
    }

    bb47: {
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _301 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _103 = &((*_301).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _102 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _103) -> [return: bb48, unwind: bb149];
    }

    bb48: {
        StorageDead(_103);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _101 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _102, move _104) -> [return: bb49, unwind: bb149];
    }

    bb49: {
        StorageDead(_104);
        StorageDead(_102);
        _100 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _101) -> [return: bb50, unwind: bb149];
    }

    bb50: {
        StorageDead(_101);
        _105 = discriminant(_100);
        switchInt(move _105) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_109);
        _109 = move ((_100 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _314 = const true;
        _99 = move _109;
        StorageDead(_109);
        _330 = discriminant(_100);
        StorageDead(_100);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _302 = deref_copy (*_23);
        _364 = (((_302.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _115 = &(*_364);
        _114 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _115) -> [return: bb54, unwind: bb163];
    }

    bb52: {
        StorageLive(_106);
        _106 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb53, unwind: bb164];
    }

    bb53: {
        StorageDead(_108);
        StorageDead(_106);
        _328 = discriminant(_100);
        StorageDead(_100);
        goto -> bb134;
    }

    bb54: {
        _113 = &(*_114);
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &mut _99;
        _118 = &mut (*_119);
        _117 = <RefMut<'_, User> as DerefMut>::deref_mut(move _118) -> [return: bb55, unwind: bb163];
    }

    bb55: {
        _116 = &mut (*_117);
        StorageDead(_118);
        StorageLive(_120);
        _120 = _97;
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_28;
        _121 = &(*_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_29;
        _123 = &(*_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &mut _30;
        _125 = &mut (*_126);
        StorageLive(_127);
        StorageLive(_128);
        _291 = const _;
        _128 = &(*_291);
        _127 = &(*_128);
        StorageLive(_130);
        _130 = &(*_14);
        StorageLive(_131);
        _131 = _2;
        StorageLive(_132);
        _132 = <PlaceOrderOptions as Default>::default() -> [return: bb56, unwind: bb163];
    }

    bb56: {
        _112 = controller::orders::place_perp_order(move _113, move _116, move _120, move _121, move _123, move _125, move _127, move _130, move _131, move _132) -> [return: bb57, unwind: bb163];
    }

    bb57: {
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_113);
        _111 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _112) -> [return: bb58, unwind: bb163];
    }

    bb58: {
        StorageDead(_112);
        _133 = discriminant(_111);
        switchInt(move _133) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_137);
        _137 = ((_111 as Continue).0: ());
        _110 = _137;
        StorageDead(_137);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_99;
        _143 = <RefMut<'_, User> as Deref>::deref(move _144) -> [return: bb62, unwind: bb163];
    }

    bb60: {
        StorageLive(_134);
        _134 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb61, unwind: bb163];
    }

    bb61: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb157;
    }

    bb62: {
        _142 = &(*_143);
        StorageDead(_144);
        _141 = User::get_last_order_id(move _142) -> [return: bb63, unwind: bb163];
    }

    bb63: {
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_99;
        _146 = <RefMut<'_, User> as Deref>::deref(move _147) -> [return: bb64, unwind: bb163];
    }

    bb64: {
        StorageDead(_147);
        _145 = ((*_146).0: anchor_lang::prelude::Pubkey);
        _140 = (move _141, move _145);
        StorageDead(_145);
        StorageDead(_141);
        StorageLive(_138);
        _138 = (_140.0: u32);
        StorageLive(_139);
        _139 = (_140.1: anchor_lang::prelude::Pubkey);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_140);
        StorageLive(_148);
        StorageLive(_149);
        _314 = const false;
        _149 = move _99;
        _148 = std::mem::drop::<RefMut<'_, User>>(move _149) -> [return: bb65, unwind: bb163];
    }

    bb65: {
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &mut (*_24);
        _154 = load_user_maps::<'_, '_>(move _155, const true) -> [return: bb66, unwind: bb163];
    }

    bb66: {
        StorageDead(_155);
        _153 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as Try>::branch(move _154) -> [return: bb67, unwind: bb163];
    }

    bb67: {
        StorageDead(_154);
        _156 = discriminant(_153);
        switchInt(move _156) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_160);
        _160 = move ((_153 as Continue).0: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>));
        _152 = move _160;
        StorageDead(_160);
        StorageLive(_150);
        _150 = move (_152.0: state::user_map::UserMap<'_>);
        StorageLive(_151);
        _151 = move (_152.1: state::user_map::UserStatsMap<'_>);
        _334 = discriminant(_153);
        StorageDead(_153);
        StorageDead(_152);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &mut _150;
        StorageLive(_165);
        StorageLive(_166);
        _303 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _166 = &((*_303).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _165 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _166) -> [return: bb71, unwind: bb146];
    }

    bb69: {
        StorageLive(_157);
        _157 = ((_153 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb70, unwind: bb161];
    }

    bb70: {
        StorageDead(_159);
        StorageDead(_157);
        _332 = discriminant(_153);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb133;
    }

    bb71: {
        StorageDead(_166);
        StorageLive(_167);
        StorageLive(_168);
        _304 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _168 = &((*_304).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _167 = <anchor_lang::prelude::AccountLoader<'_, User> as Clone>::clone(move _168) -> [return: bb72, unwind: bb146];
    }

    bb72: {
        StorageDead(_168);
        _163 = UserMap::<'_>::insert(move _164, move _165, move _167) -> [return: bb73, unwind: bb146];
    }

    bb73: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        _162 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _163) -> [return: bb74, unwind: bb146];
    }

    bb74: {
        StorageDead(_163);
        _169 = discriminant(_162);
        switchInt(move _169) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_173);
        _173 = ((_162 as Continue).0: ());
        _161 = _173;
        StorageDead(_173);
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &mut _151;
        StorageLive(_178);
        _178 = _139;
        StorageLive(_179);
        StorageLive(_180);
        _305 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _180 = &((*_305).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _179 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as Clone>::clone(move _180) -> [return: bb78, unwind: bb146];
    }

    bb76: {
        StorageLive(_170);
        _170 = ((_162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _172) -> [return: bb77, unwind: bb146];
    }

    bb77: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb130;
    }

    bb78: {
        StorageDead(_180);
        _176 = UserStatsMap::<'_>::insert(move _177, move _178, move _179) -> [return: bb79, unwind: bb146];
    }

    bb79: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        _175 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _176) -> [return: bb80, unwind: bb146];
    }

    bb80: {
        StorageDead(_176);
        _181 = discriminant(_175);
        switchInt(move _181) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_185);
        _185 = ((_175 as Continue).0: ());
        _174 = _185;
        StorageDead(_185);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _306 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _189 = &((*_306).5: anchor_lang::prelude::AccountInfo<'_>);
        _188 = <anchor_lang::prelude::AccountInfo<'_> as SignedMsgUserOrdersLoader<'_>>::load(move _189) -> [return: bb84, unwind: bb146];
    }

    bb82: {
        StorageLive(_182);
        _182 = ((_175 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb83, unwind: bb146];
    }

    bb83: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb130;
    }

    bb84: {
        StorageDead(_189);
        _187 = <std::result::Result<SignedMsgUserOrdersZeroCopy<'_>, error::ErrorCode> as Try>::branch(move _188) -> [return: bb85, unwind: bb146];
    }

    bb85: {
        StorageDead(_188);
        _190 = discriminant(_187);
        switchInt(move _190) -> [0: bb86, 1: bb87, otherwise: bb4];
    }

    bb86: {
        StorageLive(_194);
        _194 = move ((_187 as Continue).0: state::signed_msg_user::SignedMsgUserOrdersZeroCopy<'_>);
        _186 = move _194;
        StorageDead(_194);
        _338 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_186;
        _201 = SignedMsgUserOrdersZeroCopy::<'_>::iter(move _202) -> [return: bb89, unwind: bb145];
    }

    bb87: {
        StorageLive(_191);
        _191 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb88, unwind: bb160];
    }

    bb88: {
        StorageDead(_193);
        StorageDead(_191);
        _336 = discriminant(_187);
        StorageDead(_187);
        goto -> bb129;
    }

    bb89: {
        _200 = &mut _201;
        StorageDead(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_3;
        _203 = {closure@programs/drift/src/instructions/user.rs:2555:15: 2555:36} { signed_msg_order_uuid: move _204 };
        StorageDead(_204);
        _199 = <Map<std::ops::Range<u32>, {closure@programs/drift/src/state/signed_msg_user.rs:103:29: 103:37}> as Iterator>::find::<{closure@programs/drift/src/instructions/user.rs:2555:15: 2555:36}>(move _200, move _203) -> [return: bb90, unwind: bb145];
    }

    bb90: {
        StorageDead(_203);
        StorageDead(_200);
        StorageLive(_205);
        _205 = error::ErrorCode::SignedMsgOrderDoesNotExist;
        _198 = Option::<&SignedMsgOrderId>::ok_or::<error::ErrorCode>(move _199, move _205) -> [return: bb91, unwind: bb145];
    }

    bb91: {
        StorageDead(_205);
        StorageDead(_199);
        _197 = <std::result::Result<&SignedMsgOrderId, error::ErrorCode> as Try>::branch(move _198) -> [return: bb92, unwind: bb145];
    }

    bb92: {
        StorageDead(_198);
        _206 = discriminant(_197);
        switchInt(move _206) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_210);
        _210 = ((_197 as Continue).0: &state::signed_msg_user::SignedMsgOrderId);
        _196 = _210;
        StorageDead(_210);
        _195 = ((*_196).2: u32);
        StorageDead(_201);
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = _195;
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _307 = deref_copy (*_23);
        _365 = (((_307.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _217 = &(*_365);
        _216 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _217) -> [return: bb96, unwind: bb145];
    }

    bb94: {
        StorageLive(_207);
        _207 = ((_197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_209);
        _209 = _207;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _209) -> [return: bb95, unwind: bb145];
    }

    bb95: {
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_201);
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb128;
    }

    bb96: {
        _215 = &(*_216);
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        _308 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _219 = &((*_308).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _218 = &(*_219);
        StorageLive(_220);
        StorageLive(_221);
        _309 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _221 = &((*_309).4: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _220 = &(*_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_29;
        _222 = &(*_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &_28;
        _224 = &(*_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &mut _30;
        _226 = &mut (*_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _310 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _231 = &((*_310).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _230 = <anchor_lang::prelude::AccountLoader<'_, User> as Clone>::clone(move _231) -> [return: bb97, unwind: bb145];
    }

    bb97: {
        StorageDead(_231);
        _229 = &_230;
        _228 = &(*_229);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _311 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _235 = &((*_311).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _234 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as Clone>::clone(move _235) -> [return: bb98, unwind: bb145];
    }

    bb98: {
        StorageDead(_235);
        _233 = &_234;
        _232 = &(*_233);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_150;
        _236 = &(*_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &_151;
        _238 = &(*_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _138;
        _240 = Option::<u32>::Some(move _241);
        StorageDead(_241);
        StorageLive(_242);
        _242 = &(*_14);
        StorageLive(_243);
        _243 = FillMode::PlaceAndMake;
        _213 = controller::orders::fill_perp_order(move _214, move _215, move _218, move _220, move _222, move _224, move _226, move _228, move _232, move _236, move _238, move _240, move _242, move _243) -> [return: bb99, unwind: bb145];
    }

    bb99: {
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_232);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_214);
        _212 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _213) -> [return: bb100, unwind: bb145];
    }

    bb100: {
        StorageDead(_213);
        _244 = discriminant(_212);
        switchInt(move _244) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        StorageLive(_248);
        _248 = ((_212 as Continue).0: (u64, u64));
        _211 = _248;
        StorageDead(_248);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _312 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _260 = &((*_312).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _259 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _260) -> [return: bb104, unwind: bb145];
    }

    bb102: {
        StorageLive(_245);
        _245 = ((_212 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb103, unwind: bb145];
    }

    bb103: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb128;
    }

    bb104: {
        StorageDead(_260);
        StorageLive(_261);
        _261 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _258 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _259, move _261) -> [return: bb105, unwind: bb145];
    }

    bb105: {
        StorageDead(_261);
        StorageDead(_259);
        _257 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _258) -> [return: bb106, unwind: bb145];
    }

    bb106: {
        _317 = const true;
        StorageDead(_258);
        _262 = discriminant(_257);
        switchInt(move _262) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        StorageLive(_266);
        _266 = move ((_257 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _256 = move _266;
        StorageDead(_266);
        _255 = &_256;
        _254 = <Ref<'_, User> as Deref>::deref(move _255) -> [return: bb110, unwind: bb144];
    }

    bb108: {
        StorageLive(_263);
        _263 = ((_257 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb109, unwind: bb159];
    }

    bb109: {
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_250);
        _340 = discriminant(_257);
        _317 = const false;
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_251);
        goto -> bb127;
    }

    bb110: {
        StorageDead(_255);
        _253 = &((*_254).5: [state::user::Order; 32]);
        _252 = move _253 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_253);
        _251 = core::slice::<impl [Order]>::iter(move _252) -> [return: bb111, unwind: bb144];
    }

    bb111: {
        _250 = &mut _251;
        StorageDead(_252);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_138;
        _267 = {closure@programs/drift/src/instructions/user.rs:2579:14: 2579:21} { order_id: move _268 };
        StorageDead(_268);
        _249 = <std::slice::Iter<'_, Order> as Iterator>::any::<{closure@programs/drift/src/instructions/user.rs:2579:14: 2579:21}>(move _250, move _267) -> [return: bb112, unwind: bb144];
    }

    bb112: {
        StorageDead(_267);
        StorageDead(_250);
        drop(_256) -> [return: bb155, unwind: bb159];
    }

    bb113: {
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = _138;
        StorageLive(_275);
        StorageLive(_276);
        _313 = deref_copy (_1.1: &mut instructions::user::PlaceAndMakeSignedMsg<'_>);
        _276 = &((*_313).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _275 = &(*_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_28;
        _277 = &(*_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_29;
        _279 = &(*_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &mut _30;
        _281 = &mut (*_282);
        StorageLive(_283);
        _283 = &(*_14);
        _273 = cancel_order_by_order_id(move _274, move _275, move _277, move _279, move _281, move _283) -> [return: bb114, unwind: bb145];
    }

    bb114: {
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_274);
        _272 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _273) -> [return: bb115, unwind: bb145];
    }

    bb115: {
        StorageDead(_273);
        _284 = discriminant(_272);
        switchInt(move _284) -> [0: bb116, 1: bb117, otherwise: bb4];
    }

    bb116: {
        StorageLive(_288);
        _288 = ((_272 as Continue).0: ());
        _271 = _288;
        StorageDead(_288);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_272);
        StorageDead(_271);
        _269 = const ();
        goto -> bb120;
    }

    bb117: {
        StorageLive(_285);
        _285 = ((_272 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_287);
        _287 = _285;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _287) -> [return: bb118, unwind: bb145];
    }

    bb118: {
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_269);
        goto -> bb127;
    }

    bb119: {
        _269 = const ();
        goto -> bb120;
    }

    bb120: {
        StorageDead(_270);
        StorageDead(_269);
        StorageLive(_289);
        _289 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _289);
        StorageDead(_289);
        StorageDead(_249);
        StorageDead(_195);
        drop(_186) -> [return: bb121, unwind: bb146];
    }

    bb121: {
        StorageDead(_186);
        drop(_151) -> [return: bb122, unwind: bb147];
    }

    bb122: {
        StorageDead(_151);
        drop(_150) -> [return: bb123, unwind: bb163];
    }

    bb123: {
        StorageDead(_150);
        StorageDead(_139);
        StorageDead(_138);
        _314 = const false;
        StorageDead(_99);
        StorageDead(_97);
        drop(_30) -> [return: bb124, unwind: bb150];
    }

    bb124: {
        StorageDead(_30);
        drop(_29) -> [return: bb125, unwind: bb151];
    }

    bb125: {
        StorageDead(_29);
        drop(_28) -> [return: bb126, unwind: bb154];
    }

    bb126: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb143;
    }

    bb127: {
        StorageDead(_249);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_195);
        drop(_186) -> [return: bb129, unwind: bb146];
    }

    bb129: {
        StorageDead(_186);
        goto -> bb130;
    }

    bb130: {
        drop(_151) -> [return: bb131, unwind: bb147];
    }

    bb131: {
        StorageDead(_151);
        drop(_150) -> [return: bb132, unwind: bb163];
    }

    bb132: {
        StorageDead(_150);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb157;
    }

    bb134: {
        _314 = const false;
        StorageDead(_99);
        StorageDead(_97);
        goto -> bb135;
    }

    bb135: {
        drop(_30) -> [return: bb136, unwind: bb150];
    }

    bb136: {
        StorageDead(_30);
        drop(_29) -> [return: bb137, unwind: bb151];
    }

    bb137: {
        StorageDead(_29);
        drop(_28) -> [return: bb138, unwind: bb154];
    }

    bb138: {
        StorageDead(_28);
        goto -> bb141;
    }

    bb139: {
        StorageDead(_41);
        StorageDead(_40);
        drop(_37) -> [return: bb140, unwind: bb154];
    }

    bb140: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb143;
    }

    bb143: {
        return;
    }

    bb144 (cleanup): {
        drop(_256) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_186) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_151) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_150) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_37) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_30) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_29) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_28) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_41) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_37) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        resume;
    }

    bb155: {
        _342 = discriminant(_257);
        _317 = const false;
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_251);
        StorageLive(_269);
        StorageLive(_270);
        _270 = _249;
        switchInt(move _270) -> [0: bb119, otherwise: bb113];
    }

    bb156: {
        drop(_99) -> [return: bb134, unwind: bb149];
    }

    bb157: {
        switchInt(_314) -> [0: bb134, otherwise: bb156];
    }

    bb158: {
        _344 = discriminant(_44);
        _315 = const false;
        _316 = const false;
        StorageDead(_44);
        StorageDead(_43);
        drop(_41) -> [return: bb139, unwind: bb153];
    }

    bb159 (cleanup): {
        _350 = discriminant(_257);
        goto -> bb145;
    }

    bb160 (cleanup): {
        _351 = discriminant(_187);
        goto -> bb146;
    }

    bb161 (cleanup): {
        _353 = discriminant(_153);
        goto -> bb163;
    }

    bb162 (cleanup): {
        drop(_99) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_314) -> [0: bb149, otherwise: bb162];
    }

    bb164 (cleanup): {
        _354 = discriminant(_100);
        goto -> bb149;
    }

    bb165 (cleanup): {
        _357 = discriminant(_32);
        goto -> bb166;
    }

    bb166 (cleanup): {
        _358 = discriminant(_44);
        goto -> bb152;
    }

    bb167 (cleanup): {
        _359 = discriminant(_16);
        goto -> bb154;
    }

    bb168 (cleanup): {
        _360 = discriminant(_5);
        goto -> bb154;
    }
}
