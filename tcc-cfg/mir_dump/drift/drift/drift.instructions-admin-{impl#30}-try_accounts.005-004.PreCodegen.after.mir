// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5015:10: 5015:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5015:10: 5015:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeSerumFulfillmentConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _22: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _112: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _125: ();
    let mut _126: bool;
    let mut _127: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _128: !;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::ErrorCode;
    let _132: usize;
    let mut _133: usize;
    let mut _134: bool;
    let mut _135: &[anchor_lang::prelude::AccountInfo<'_>];
    let _136: &[anchor_lang::prelude::AccountInfo<'_>];
    let _137: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _138: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _139: std::ops::RangeFrom<usize>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _142: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _143: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _146: &[u8];
    let mut _147: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _148: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _149: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _157: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _158: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let mut _160: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _161: &[u8];
    let mut _162: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _163: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _164: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _172: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _173: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let mut _175: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _176: &[u8];
    let mut _177: &mut instructions::admin::InitializeSerumFulfillmentConfigBumps;
    let mut _178: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _179: {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
    let mut _180: isize;
    let mut _182: !;
    let mut _183: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _187: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _195: (anchor_lang::prelude::Pubkey, u8);
    let mut _196: &[&[u8]];
    let mut _197: &[&[u8]; 2];
    let _198: &[&[u8]; 2];
    let _199: [&[u8]; 2];
    let mut _200: &[u8];
    let _201: &[u8];
    let mut _202: &[u8; 24];
    let _203: &[u8; 24];
    let mut _204: &[u8];
    let _205: &[u8];
    let mut _206: &anchor_lang::prelude::Pubkey;
    let mut _207: &anchor_lang::prelude::Pubkey;
    let mut _208: u8;
    let _209: ();
    let mut _210: bool;
    let mut _211: &anchor_lang::prelude::Pubkey;
    let _212: anchor_lang::prelude::Pubkey;
    let mut _213: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _214: &anchor_lang::prelude::Pubkey;
    let mut _215: !;
    let mut _216: anchor_lang::error::Error;
    let mut _217: anchor_lang::error::Error;
    let mut _218: anchor_lang::error::Error;
    let mut _219: anchor_lang::error::ErrorCode;
    let mut _220: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _221: anchor_lang::prelude::Pubkey;
    let mut _222: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _223: anchor_lang::prelude::Pubkey;
    let mut _226: &&anchor_lang::prelude::AccountInfo<'_>;
    let _227: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: &&anchor_lang::prelude::Pubkey;
    let mut _234: &&anchor_lang::prelude::Pubkey;
    let _235: &anchor_lang::prelude::Pubkey;
    let _236: anchor_lang::prelude::Pubkey;
    let mut _238: &anchor_lang::prelude::AccountInfo<'_>;
    let _239: ();
    let mut _240: bool;
    let mut _241: u64;
    let mut _244: &anchor_lang::prelude::Rent;
    let mut _245: usize;
    let mut _247: anchor_lang::prelude::AccountInfo<'_>;
    let mut _248: &anchor_lang::prelude::Signer<'_>;
    let mut _249: anchor_lang::prelude::AccountInfo<'_>;
    let mut _250: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _252: anchor_lang::prelude::AccountInfo<'_>;
    let mut _253: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _254: anchor_lang::system_program::CreateAccount<'_>;
    let _255: ();
    let mut _256: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _257: std::result::Result<(), anchor_lang::error::Error>;
    let mut _258: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _259: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _260: &[&[&[u8]]];
    let mut _261: &[&[&[u8]]; 1];
    let _262: &[&[&[u8]]; 1];
    let _263: [&[&[u8]]; 1];
    let mut _264: &[&[u8]];
    let _265: &[&[u8]];
    let _266: &[&[u8]];
    let mut _267: &[&[u8]; 3];
    let _268: [&[u8]; 3];
    let mut _269: &[u8];
    let mut _270: &[u8; 24];
    let _271: &[u8; 24];
    let mut _272: &[u8];
    let _273: &[u8];
    let mut _274: &anchor_lang::prelude::Pubkey;
    let mut _275: &[u8];
    let _276: &[u8];
    let _277: &[u8];
    let mut _278: &[u8; 1];
    let _279: [u8; 1];
    let mut _280: u8;
    let mut _281: std::ops::RangeFull;
    let mut _282: std::ops::RangeFull;
    let mut _283: u64;
    let mut _284: u64;
    let mut _285: usize;
    let mut _286: &anchor_lang::prelude::Pubkey;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _292: ();
    let mut _293: bool;
    let mut _294: &anchor_lang::prelude::Pubkey;
    let _295: anchor_lang::prelude::Pubkey;
    let mut _296: &anchor_lang::prelude::Signer<'_>;
    let mut _297: &anchor_lang::prelude::Pubkey;
    let _298: anchor_lang::prelude::Pubkey;
    let mut _299: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _300: !;
    let mut _301: anchor_lang::error::Error;
    let mut _302: anchor_lang::error::Error;
    let mut _303: anchor_lang::error::AnchorError;
    let mut _304: std::string::String;
    let mut _305: &anchor_lang::error::ErrorCode;
    let _306: anchor_lang::error::ErrorCode;
    let mut _307: u32;
    let mut _308: anchor_lang::error::ErrorCode;
    let mut _309: std::string::String;
    let mut _310: &anchor_lang::error::ErrorCode;
    let _311: anchor_lang::error::ErrorCode;
    let mut _312: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _313: anchor_lang::error::ErrorOrigin;
    let mut _314: anchor_lang::error::Source;
    let mut _315: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _316: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _317: anchor_lang::prelude::Pubkey;
    let mut _318: &anchor_lang::prelude::Signer<'_>;
    let mut _319: anchor_lang::prelude::Pubkey;
    let mut _320: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _322: u64;
    let mut _323: u64;
    let mut _324: &anchor_lang::prelude::Rent;
    let mut _325: usize;
    let mut _326: u64;
    let _327: ();
    let mut _328: bool;
    let mut _329: u64;
    let mut _331: anchor_lang::prelude::AccountInfo<'_>;
    let mut _332: &anchor_lang::prelude::Signer<'_>;
    let mut _333: anchor_lang::prelude::AccountInfo<'_>;
    let mut _334: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _336: anchor_lang::prelude::AccountInfo<'_>;
    let mut _337: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _338: anchor_lang::system_program::Transfer<'_>;
    let _339: ();
    let mut _340: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _341: std::result::Result<(), anchor_lang::error::Error>;
    let mut _342: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _343: u64;
    let mut _344: isize;
    let mut _346: !;
    let mut _347: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _350: anchor_lang::prelude::AccountInfo<'_>;
    let mut _351: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _353: anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _355: anchor_lang::system_program::Allocate<'_>;
    let _356: ();
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _358: std::result::Result<(), anchor_lang::error::Error>;
    let mut _359: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _360: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _361: &[&[&[u8]]];
    let mut _362: &[&[&[u8]]; 1];
    let _363: &[&[&[u8]]; 1];
    let _364: [&[&[u8]]; 1];
    let mut _365: &[&[u8]];
    let _366: &[&[u8]];
    let _367: &[&[u8]];
    let mut _368: &[&[u8]; 3];
    let _369: [&[u8]; 3];
    let mut _370: &[u8];
    let mut _371: &[u8; 24];
    let _372: &[u8; 24];
    let mut _373: &[u8];
    let _374: &[u8];
    let mut _375: &anchor_lang::prelude::Pubkey;
    let mut _376: &[u8];
    let _377: &[u8];
    let _378: &[u8];
    let mut _379: &[u8; 1];
    let _380: [u8; 1];
    let mut _381: u8;
    let mut _382: std::ops::RangeFull;
    let mut _383: std::ops::RangeFull;
    let mut _384: u64;
    let mut _385: usize;
    let mut _386: isize;
    let mut _388: !;
    let mut _389: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _392: anchor_lang::prelude::AccountInfo<'_>;
    let mut _393: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _395: anchor_lang::prelude::AccountInfo<'_>;
    let mut _396: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _397: anchor_lang::system_program::Assign<'_>;
    let _398: ();
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _400: std::result::Result<(), anchor_lang::error::Error>;
    let mut _401: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _402: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _403: &[&[&[u8]]];
    let mut _404: &[&[&[u8]]; 1];
    let _405: &[&[&[u8]]; 1];
    let _406: [&[&[u8]]; 1];
    let mut _407: &[&[u8]];
    let _408: &[&[u8]];
    let _409: &[&[u8]];
    let mut _410: &[&[u8]; 3];
    let _411: [&[u8]; 3];
    let mut _412: &[u8];
    let mut _413: &[u8; 24];
    let _414: &[u8; 24];
    let mut _415: &[u8];
    let _416: &[u8];
    let mut _417: &anchor_lang::prelude::Pubkey;
    let mut _418: &[u8];
    let _419: &[u8];
    let _420: &[u8];
    let mut _421: &[u8; 1];
    let _422: [u8; 1];
    let mut _423: u8;
    let mut _424: std::ops::RangeFull;
    let mut _425: std::ops::RangeFull;
    let mut _426: &anchor_lang::prelude::Pubkey;
    let mut _427: isize;
    let mut _429: !;
    let mut _430: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _432: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _433: &anchor_lang::prelude::Pubkey;
    let mut _434: &anchor_lang::prelude::AccountInfo<'_>;
    let _435: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: isize;
    let mut _439: !;
    let mut _440: anchor_lang::error::Error;
    let mut _441: anchor_lang::error::Error;
    let mut _442: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _443: &anchor_lang::prelude::AccountInfo<'_>;
    let _444: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _445: isize;
    let mut _448: !;
    let mut _449: anchor_lang::error::Error;
    let mut _450: anchor_lang::error::Error;
    let _451: ();
    let mut _452: bool;
    let _453: ();
    let mut _454: bool;
    let mut _455: usize;
    let mut _456: usize;
    let mut _457: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _458: !;
    let mut _459: anchor_lang::error::Error;
    let mut _460: anchor_lang::error::Error;
    let mut _461: anchor_lang::error::Error;
    let mut _462: anchor_lang::error::ErrorCode;
    let mut _463: (usize, usize);
    let mut _464: usize;
    let mut _465: usize;
    let mut _466: &anchor_lang::prelude::AccountInfo<'_>;
    let _467: ();
    let mut _468: bool;
    let mut _469: &&anchor_lang::prelude::Pubkey;
    let mut _470: &&anchor_lang::prelude::Pubkey;
    let mut _471: !;
    let mut _472: anchor_lang::error::Error;
    let mut _473: anchor_lang::error::Error;
    let mut _474: anchor_lang::error::Error;
    let mut _475: anchor_lang::error::ErrorCode;
    let mut _476: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _477: anchor_lang::prelude::Pubkey;
    let mut _478: anchor_lang::prelude::Pubkey;
    let mut _480: &anchor_lang::prelude::Rent;
    let mut _481: usize;
    let mut _482: bool;
    let mut _483: u64;
    let mut _484: &anchor_lang::prelude::AccountInfo<'_>;
    let _485: anchor_lang::prelude::AccountInfo<'_>;
    let mut _486: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _487: u64;
    let mut _488: !;
    let mut _489: anchor_lang::error::Error;
    let mut _490: anchor_lang::error::Error;
    let mut _491: anchor_lang::error::ErrorCode;
    let _492: ();
    let mut _493: bool;
    let mut _494: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _495: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let _496: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _497: !;
    let mut _498: anchor_lang::error::Error;
    let mut _499: anchor_lang::error::Error;
    let mut _500: anchor_lang::error::ErrorCode;
    let _501: ();
    let mut _502: bool;
    let mut _503: &anchor_lang::prelude::Rent;
    let mut _504: u64;
    let mut _505: &anchor_lang::prelude::AccountInfo<'_>;
    let _506: anchor_lang::prelude::AccountInfo<'_>;
    let mut _507: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _508: usize;
    let mut _509: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _510: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _511: &anchor_lang::prelude::AccountInfo<'_>;
    let _512: anchor_lang::prelude::AccountInfo<'_>;
    let mut _513: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _514: isize;
    let mut _516: !;
    let mut _517: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _519: !;
    let mut _520: anchor_lang::error::Error;
    let mut _521: anchor_lang::error::Error;
    let mut _522: anchor_lang::error::ErrorCode;
    let mut _525: (anchor_lang::prelude::Pubkey, u8);
    let mut _526: &[&[u8]];
    let mut _527: &[&[u8]; 2];
    let _528: &[&[u8]; 2];
    let _529: [&[u8]; 2];
    let mut _530: &[u8];
    let mut _531: &[u8; 11];
    let _532: &[u8; 11];
    let mut _533: &[u8];
    let _534: &[u8];
    let mut _535: &[u8; 2];
    let _536: [u8; 2];
    let mut _537: u16;
    let mut _538: &anchor_lang::prelude::Pubkey;
    let _539: &&anchor_lang::prelude::Pubkey;
    let mut _540: u8;
    let _541: ();
    let mut _542: bool;
    let mut _543: &anchor_lang::prelude::Pubkey;
    let _544: anchor_lang::prelude::Pubkey;
    let mut _545: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _546: &anchor_lang::prelude::Pubkey;
    let mut _547: !;
    let mut _548: anchor_lang::error::Error;
    let mut _549: anchor_lang::error::Error;
    let mut _550: anchor_lang::error::Error;
    let mut _551: anchor_lang::error::ErrorCode;
    let mut _552: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _553: anchor_lang::prelude::Pubkey;
    let mut _554: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _555: anchor_lang::prelude::Pubkey;
    let mut _558: (anchor_lang::prelude::Pubkey, u8);
    let mut _559: &[&[u8]];
    let mut _560: &[&[u8]; 2];
    let _561: &[&[u8]; 2];
    let _562: [&[u8]; 2];
    let mut _563: &[u8];
    let mut _564: &[u8; 11];
    let _565: &[u8; 11];
    let mut _566: &[u8];
    let _567: &[u8];
    let mut _568: &[u8; 2];
    let _569: [u8; 2];
    let mut _570: &anchor_lang::prelude::Pubkey;
    let _571: &&anchor_lang::prelude::Pubkey;
    let mut _572: u8;
    let _573: ();
    let mut _574: bool;
    let mut _575: &anchor_lang::prelude::Pubkey;
    let _576: anchor_lang::prelude::Pubkey;
    let mut _577: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _578: &anchor_lang::prelude::Pubkey;
    let mut _579: !;
    let mut _580: anchor_lang::error::Error;
    let mut _581: anchor_lang::error::Error;
    let mut _582: anchor_lang::error::Error;
    let mut _583: anchor_lang::error::ErrorCode;
    let mut _584: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _585: anchor_lang::prelude::Pubkey;
    let mut _586: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _587: anchor_lang::prelude::Pubkey;
    let _588: ();
    let mut _589: bool;
    let mut _590: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _591: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _592: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _593: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _594: !;
    let mut _595: anchor_lang::error::Error;
    let mut _596: anchor_lang::error::Error;
    let mut _597: anchor_lang::error::ErrorCode;
    let _598: ();
    let mut _600: &state::state::State;
    let mut _601: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _603: &anchor_lang::prelude::Signer<'_>;
    let mut _604: bool;
    let mut _605: &anchor_lang::prelude::Pubkey;
    let mut _606: &anchor_lang::prelude::Pubkey;
    let mut _607: !;
    let mut _608: anchor_lang::error::Error;
    let mut _609: anchor_lang::error::Error;
    let mut _610: anchor_lang::error::Error;
    let mut _611: anchor_lang::error::ErrorCode;
    let mut _612: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _613: anchor_lang::prelude::Pubkey;
    let mut _614: anchor_lang::prelude::Pubkey;
    let mut _617: (anchor_lang::prelude::Pubkey, u8);
    let mut _618: &[&[u8]];
    let mut _619: &[&[u8]; 2];
    let _620: &[&[u8]; 2];
    let _621: [&[u8]; 2];
    let mut _622: &[u8];
    let _623: &[u8];
    let mut _624: &[u8; 17];
    let _625: &[u8; 17];
    let mut _626: &[u8];
    let _627: &[u8];
    let mut _628: &anchor_lang::prelude::Pubkey;
    let mut _629: &anchor_lang::prelude::Pubkey;
    let _630: &&anchor_lang::prelude::Pubkey;
    let mut _631: u8;
    let _632: ();
    let mut _633: bool;
    let mut _634: &anchor_lang::prelude::Pubkey;
    let _635: anchor_lang::prelude::Pubkey;
    let mut _636: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _637: &anchor_lang::prelude::Pubkey;
    let mut _638: !;
    let mut _639: anchor_lang::error::Error;
    let mut _640: anchor_lang::error::Error;
    let mut _641: anchor_lang::error::Error;
    let mut _642: anchor_lang::error::ErrorCode;
    let mut _643: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _644: anchor_lang::prelude::Pubkey;
    let mut _645: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _646: anchor_lang::prelude::Pubkey;
    let _647: ();
    let mut _648: bool;
    let mut _649: &bool;
    let mut _650: !;
    let mut _651: anchor_lang::error::Error;
    let mut _652: anchor_lang::error::Error;
    let mut _653: anchor_lang::error::ErrorCode;
    let _654: ();
    let mut _655: bool;
    let mut _656: &anchor_lang::prelude::Pubkey;
    let _657: &state::state::State;
    let mut _658: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _659: &anchor_lang::prelude::Pubkey;
    let _660: &anchor_lang::prelude::Pubkey;
    let _661: anchor_lang::prelude::Pubkey;
    let mut _662: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _663: !;
    let mut _664: anchor_lang::error::Error;
    let mut _665: anchor_lang::error::Error;
    let mut _666: anchor_lang::error::ErrorCode;
    let _667: ();
    let mut _668: bool;
    let mut _669: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _670: &anchor_lang::prelude::Signer<'_>;
    let _671: &anchor_lang::prelude::Signer<'_>;
    let mut _672: !;
    let mut _673: anchor_lang::error::Error;
    let mut _674: anchor_lang::error::Error;
    let mut _675: anchor_lang::error::ErrorCode;
    let mut _676: instructions::admin::InitializeSerumFulfillmentConfig<'_>;
    let mut _677: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _678: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _679: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _680: anchor_lang::prelude::AccountInfo<'_>;
    let mut _681: anchor_lang::prelude::AccountInfo<'_>;
    let mut _682: anchor_lang::prelude::AccountInfo<'_>;
    let mut _683: anchor_lang::prelude::AccountInfo<'_>;
    let mut _684: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _685: anchor_lang::prelude::Signer<'_>;
    let mut _686: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _687: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _691: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _692: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _693: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _694: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _695: &anchor_lang::prelude::Pubkey;
    let mut _696: &anchor_lang::prelude::Pubkey;
    let mut _697: &anchor_lang::prelude::Pubkey;
    let mut _698: &anchor_lang::prelude::Pubkey;
    let mut _699: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _700: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _701: &anchor_lang::prelude::Pubkey;
    let mut _702: &anchor_lang::prelude::Pubkey;
    let mut _703: &anchor_lang::prelude::Pubkey;
    let mut _704: &anchor_lang::prelude::Pubkey;
    let mut _705: bool;
    let mut _706: bool;
    let mut _707: bool;
    let mut _708: bool;
    let mut _709: bool;
    let mut _710: bool;
    let mut _711: bool;
    let mut _712: bool;
    let mut _713: bool;
    let mut _714: bool;
    let mut _715: bool;
    let mut _716: bool;
    let mut _717: bool;
    let mut _718: bool;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: isize;
    let mut _748: isize;
    let mut _749: isize;
    let mut _750: isize;
    let mut _751: isize;
    let mut _752: isize;
    let mut _753: isize;
    let mut _754: isize;
    let mut _755: isize;
    let mut _756: isize;
    let mut _757: isize;
    let mut _758: isize;
    let mut _759: isize;
    let mut _760: isize;
    let mut _761: isize;
    let mut _762: isize;
    let mut _763: isize;
    let mut _764: isize;
    let mut _765: isize;
    let mut _766: isize;
    let mut _767: isize;
    let mut _768: isize;
    let mut _769: isize;
    let mut _770: isize;
    let mut _771: isize;
    let mut _772: isize;
    let mut _773: isize;
    let mut _774: isize;
    let mut _775: isize;
    let mut _776: isize;
    let mut _777: isize;
    let mut _778: isize;
    let mut _779: isize;
    let mut _780: isize;
    let mut _781: isize;
    let mut _782: isize;
    let mut _783: isize;
    let mut _784: isize;
    let mut _785: isize;
    let mut _786: isize;
    let mut _787: isize;
    let mut _788: isize;
    let mut _789: isize;
    let mut _790: isize;
    let mut _791: isize;
    let mut _792: isize;
    let mut _793: isize;
    let mut _794: isize;
    let mut _795: isize;
    let mut _796: isize;
    let mut _797: isize;
    let mut _798: isize;
    let mut _799: isize;
    let mut _800: isize;
    let mut _801: isize;
    let mut _802: isize;
    let mut _803: isize;
    let mut _804: isize;
    let mut _805: isize;
    let mut _806: isize;
    let mut _807: isize;
    let mut _808: isize;
    let mut _809: isize;
    let mut _810: isize;
    let mut _811: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _812: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args;
        scope 2 {
            debug market_index => _7;
            let _20: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            scope 7 {
                debug base_spot_market => _20;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                scope 12 {
                    debug quote_spot_market => _35;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 17 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::AccountInfo<'_>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountInfo<'_>;
                        scope 22 {
                            debug serum_program => _65;
                            let _80: anchor_lang::prelude::AccountInfo<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::AccountInfo<'_>;
                            scope 27 {
                                debug serum_market => _80;
                                let _95: anchor_lang::prelude::AccountInfo<'_>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::AccountInfo<'_>;
                                scope 32 {
                                    debug serum_open_orders => _95;
                                    let _110: anchor_lang::prelude::AccountInfo<'_>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::AccountInfo<'_>;
                                    scope 37 {
                                        debug drift_signer => _110;
                                        let _131: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 42 {
                                            debug serum_fulfillment_config => _131;
                                            let _140: anchor_lang::prelude::Signer<'_>;
                                            let _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _154: anchor_lang::prelude::Signer<'_>;
                                            scope 43 {
                                                debug admin => _140;
                                                let _155: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                                let _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _169: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                                scope 48 {
                                                    debug rent => _155;
                                                    let _170: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                                    let _181: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _184: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                                    scope 53 {
                                                        debug system_program => _170;
                                                        let _185: anchor_lang::prelude::Rent;
                                                        let _189: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                        let _192: anchor_lang::prelude::Rent;
                                                        scope 58 {
                                                            debug __anchor_rent => _185;
                                                            let _193: anchor_lang::prelude::Pubkey;
                                                            let _194: u8;
                                                            scope 63 {
                                                                debug __pda_address => _193;
                                                                debug __bump => _194;
                                                                let _224: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                                                                let _225: &anchor_lang::prelude::AccountInfo<'_>;
                                                                scope 64 {
                                                                    debug serum_fulfillment_config => _224;
                                                                    let _515: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                    let _518: usize;
                                                                    let _523: anchor_lang::prelude::Pubkey;
                                                                    let _524: u8;
                                                                    scope 102 {
                                                                        debug residual => _515;
                                                                        scope 103 {
                                                                        }
                                                                    }
                                                                    scope 104 {
                                                                        debug val => _518;
                                                                        scope 105 {
                                                                        }
                                                                    }
                                                                    scope 106 {
                                                                        debug __pda_address => _523;
                                                                        debug __bump => _524;
                                                                        let _556: anchor_lang::prelude::Pubkey;
                                                                        let _557: u8;
                                                                        scope 107 {
                                                                            debug __pda_address => _556;
                                                                            debug __bump => _557;
                                                                            let _599: anchor_lang::prelude::Pubkey;
                                                                            let _615: anchor_lang::prelude::Pubkey;
                                                                            let _616: u8;
                                                                            scope 108 {
                                                                                debug my_key => _599;
                                                                                let _602: anchor_lang::prelude::Pubkey;
                                                                                scope 109 {
                                                                                    debug target_key => _602;
                                                                                }
                                                                            }
                                                                            scope 110 {
                                                                                debug __pda_address => _615;
                                                                                debug __bump => _616;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 65 {
                                                                    debug actual_field => _225;
                                                                    let _228: &anchor_lang::prelude::Pubkey;
                                                                    scope 66 {
                                                                        debug actual_owner => _228;
                                                                        let _229: usize;
                                                                        scope 67 {
                                                                            debug space => _229;
                                                                            let _230: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                                                                            let _237: u64;
                                                                            let _446: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                                                                            let _447: anchor_lang::error::Error;
                                                                            let mut _690: &&anchor_lang::prelude::Pubkey;
                                                                            scope 68 {
                                                                                debug pa => _230;
                                                                                let _479: u64;
                                                                                scope 101 {
                                                                                    debug required_lamports => _479;
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug __current_lamports => _237;
                                                                                let _242: usize;
                                                                                let _321: u64;
                                                                                let _437: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                                                                                let _438: anchor_lang::error::Error;
                                                                                let mut _688: &anchor_lang::error::ErrorCode;
                                                                                let mut _689: &anchor_lang::error::ErrorCode;
                                                                                scope 70 {
                                                                                    debug space => _242;
                                                                                    let _243: u64;
                                                                                    scope 71 {
                                                                                        debug lamports => _243;
                                                                                        let _246: anchor_lang::system_program::CreateAccount<'_>;
                                                                                        scope 72 {
                                                                                            debug cpi_accounts => _246;
                                                                                            let _251: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                            scope 73 {
                                                                                                debug cpi_context => _251;
                                                                                                let _288: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _291: ();
                                                                                                scope 74 {
                                                                                                    debug residual => _288;
                                                                                                    scope 75 {
                                                                                                    }
                                                                                                }
                                                                                                scope 76 {
                                                                                                    debug val => _291;
                                                                                                    scope 77 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 78 {
                                                                                    debug required_lamports => _321;
                                                                                    let _330: anchor_lang::system_program::Transfer<'_>;
                                                                                    let _349: anchor_lang::system_program::Allocate<'_>;
                                                                                    scope 79 {
                                                                                        debug cpi_accounts => _330;
                                                                                        let _335: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                        scope 80 {
                                                                                            debug cpi_context => _335;
                                                                                            let _345: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _348: ();
                                                                                            scope 81 {
                                                                                                debug residual => _345;
                                                                                                scope 82 {
                                                                                                }
                                                                                            }
                                                                                            scope 83 {
                                                                                                debug val => _348;
                                                                                                scope 84 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 85 {
                                                                                        debug cpi_accounts => _349;
                                                                                        let _352: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                        scope 86 {
                                                                                            debug cpi_context => _352;
                                                                                            let _387: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _390: ();
                                                                                            let _391: anchor_lang::system_program::Assign<'_>;
                                                                                            scope 87 {
                                                                                                debug residual => _387;
                                                                                                scope 88 {
                                                                                                }
                                                                                            }
                                                                                            scope 89 {
                                                                                                debug val => _390;
                                                                                                scope 90 {
                                                                                                }
                                                                                            }
                                                                                            scope 91 {
                                                                                                debug cpi_accounts => _391;
                                                                                                let _394: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                                scope 92 {
                                                                                                    debug cpi_context => _394;
                                                                                                    let _428: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _431: ();
                                                                                                    scope 93 {
                                                                                                        debug residual => _428;
                                                                                                        scope 94 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 95 {
                                                                                                        debug val => _431;
                                                                                                        scope 96 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 97 {
                                                                                    debug val => _437;
                                                                                }
                                                                                scope 98 {
                                                                                    debug e => _438;
                                                                                }
                                                                            }
                                                                            scope 99 {
                                                                                debug val => _446;
                                                                            }
                                                                            scope 100 {
                                                                                debug e => _447;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 59 {
                                                            debug residual => _189;
                                                            scope 60 {
                                                            }
                                                        }
                                                        scope 61 {
                                                            debug val => _192;
                                                            scope 62 {
                                                            }
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug residual => _181;
                                                        scope 55 {
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug val => _184;
                                                        scope 57 {
                                                        }
                                                    }
                                                }
                                                scope 49 {
                                                    debug residual => _166;
                                                    scope 50 {
                                                    }
                                                }
                                                scope 51 {
                                                    debug val => _169;
                                                    scope 52 {
                                                    }
                                                }
                                            }
                                            scope 44 {
                                                debug residual => _151;
                                                scope 45 {
                                                }
                                            }
                                            scope 46 {
                                                debug val => _154;
                                                scope 47 {
                                                }
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _121;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _124;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _106;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _109;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _718 = const false;
        _717 = const false;
        _716 = const false;
        _715 = const false;
        _714 = const false;
        _713 = const false;
        _712 = const false;
        _711 = const false;
        _710 = const false;
        _709 = const false;
        _707 = const false;
        _706 = const false;
        _705 = const false;
        _708 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _10 = std::result::Result::<<admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _11, move _14) -> [return: bb2, unwind: bb326];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::InitializeSerumFulfillmentConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeSerumFulfillmentConfigBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb313;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _22 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _23, move _29) -> [return: bb9, unwind: bb326];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb326];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _20 = move _34;
        StorageDead(_34);
        _719 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb370];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _791 = discriminant(_21);
        StorageDead(_21);
        goto -> bb312;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _38, move _44) -> [return: bb15, unwind: bb326];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb326];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _35 = move _49;
        StorageDead(_49);
        _721 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb369];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _789 = discriminant(_36);
        StorageDead(_36);
        goto -> bb311;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _53, move _59) -> [return: bb21, unwind: bb326];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb326];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _723 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb325];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb368];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _787 = discriminant(_51);
        StorageDead(_51);
        goto -> bb310;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _68, move _74) -> [return: bb27, unwind: bb325];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb325];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _65 = move _79;
        StorageDead(_79);
        _725 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb324];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb367];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _785 = discriminant(_66);
        StorageDead(_66);
        goto -> bb309;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _82 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _83, move _89) -> [return: bb33, unwind: bb324];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb324];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _80 = move _94;
        StorageDead(_94);
        _727 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb323];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb366];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _783 = discriminant(_81);
        StorageDead(_81);
        goto -> bb308;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _97 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _98, move _104) -> [return: bb39, unwind: bb323];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb323];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _95 = move _109;
        StorageDead(_109);
        _729 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb322];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb365];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _781 = discriminant(_96);
        StorageDead(_96);
        goto -> bb307;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _112 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _113, move _119) -> [return: bb45, unwind: bb322];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb322];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _110 = move _124;
        StorageDead(_124);
        _731 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _691 = deref_copy (*_2);
        _127 = &(*_691);
        _126 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _127) -> [return: bb50, unwind: bb321];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb364];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _779 = discriminant(_111);
        StorageDead(_111);
        goto -> bb306;
    }

    bb50: {
        switchInt(move _126) -> [0: bb53, otherwise: bb51];
    }

    bb51: {
        StorageDead(_127);
        StorageLive(_129);
        StorageLive(_130);
        _130 = AccountNotEnoughKeys;
        _129 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _130) -> [return: bb52, unwind: bb321];
    }

    bb52: {
        StorageDead(_130);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _129);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb305;
    }

    bb53: {
        StorageDead(_127);
        _125 = const ();
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_131);
        StorageLive(_132);
        _132 = const 0_usize;
        _692 = deref_copy (*_2);
        _133 = Len((*_692));
        _134 = Lt(_132, _133);
        assert(move _134, "index out of bounds: the length is {} but the index is {}", move _133, _132) -> [success: bb54, unwind: bb321];
    }

    bb54: {
        _693 = deref_copy (*_2);
        _131 = &(*_693)[_132];
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _694 = deref_copy (*_2);
        _138 = &(*_694);
        StorageLive(_139);
        _139 = RangeFrom::<usize> { start: const 1_usize };
        _137 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _138, move _139) -> [return: bb55, unwind: bb321];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_138);
        _136 = &(*_137);
        _135 = &(*_136);
        (*_2) = move _135;
        StorageDead(_135);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(*_1);
        StorageLive(_145);
        _145 = &mut (*_2);
        StorageLive(_146);
        _146 = &(*_6);
        StorageLive(_147);
        _147 = &mut (*_4);
        StorageLive(_148);
        _148 = &mut (*_5);
        _143 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _144, move _145, move _146, move _147, move _148) -> [return: bb56, unwind: bb321];
    }

    bb56: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_149);
        _149 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _142 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _143, move _149) -> [return: bb57, unwind: bb321];
    }

    bb57: {
        StorageDead(_149);
        StorageDead(_143);
        _141 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb58, unwind: bb321];
    }

    bb58: {
        StorageDead(_142);
        _150 = discriminant(_141);
        switchInt(move _150) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_154);
        _154 = move ((_141 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _140 = move _154;
        StorageDead(_154);
        _733 = discriminant(_141);
        StorageDead(_141);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_1);
        StorageLive(_160);
        _160 = &mut (*_2);
        StorageLive(_161);
        _161 = &(*_6);
        StorageLive(_162);
        _162 = &mut (*_4);
        StorageLive(_163);
        _163 = &mut (*_5);
        _158 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _159, move _160, move _161, move _162, move _163) -> [return: bb62, unwind: bb321];
    }

    bb60: {
        StorageLive(_151);
        _151 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_153);
        _153 = move _151;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _153) -> [return: bb61, unwind: bb363];
    }

    bb61: {
        StorageDead(_153);
        StorageDead(_151);
        _777 = discriminant(_141);
        StorageDead(_141);
        goto -> bb304;
    }

    bb62: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_164);
        _164 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _157 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _158, move _164) -> [return: bb63, unwind: bb321];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_158);
        _156 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _157) -> [return: bb64, unwind: bb321];
    }

    bb64: {
        StorageDead(_157);
        _165 = discriminant(_156);
        switchInt(move _165) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_169);
        _169 = move ((_156 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _155 = move _169;
        StorageDead(_169);
        _735 = discriminant(_156);
        StorageDead(_156);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &(*_1);
        StorageLive(_175);
        _175 = &mut (*_2);
        StorageLive(_176);
        _176 = &(*_6);
        StorageLive(_177);
        _177 = &mut (*_4);
        StorageLive(_178);
        _178 = &mut (*_5);
        _173 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeSerumFulfillmentConfigBumps>>::try_accounts(move _174, move _175, move _176, move _177, move _178) -> [return: bb68, unwind: bb321];
    }

    bb66: {
        StorageLive(_166);
        _166 = move ((_156 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _168) -> [return: bb67, unwind: bb362];
    }

    bb67: {
        StorageDead(_168);
        StorageDead(_166);
        _775 = discriminant(_156);
        StorageDead(_156);
        goto -> bb303;
    }

    bb68: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_179);
        _179 = {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18};
        _172 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5015:10: 5015:18}>(move _173, move _179) -> [return: bb69, unwind: bb321];
    }

    bb69: {
        StorageDead(_179);
        StorageDead(_173);
        _171 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _172) -> [return: bb70, unwind: bb321];
    }

    bb70: {
        StorageDead(_172);
        _180 = discriminant(_171);
        switchInt(move _180) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_184);
        _184 = move ((_171 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _170 = move _184;
        StorageDead(_184);
        _737 = discriminant(_171);
        StorageDead(_171);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb74, unwind: bb321];
    }

    bb72: {
        StorageLive(_181);
        _181 = move ((_171 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_183);
        _183 = move _181;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _183) -> [return: bb73, unwind: bb361];
    }

    bb73: {
        StorageDead(_183);
        StorageDead(_181);
        _773 = discriminant(_171);
        StorageDead(_171);
        goto -> bb302;
    }

    bb74: {
        _186 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _187) -> [return: bb75, unwind: bb321];
    }

    bb75: {
        StorageDead(_187);
        _188 = discriminant(_186);
        switchInt(move _188) -> [0: bb76, 1: bb77, otherwise: bb5];
    }

    bb76: {
        StorageLive(_192);
        _192 = ((_186 as Continue).0: anchor_lang::prelude::Rent);
        _185 = _192;
        StorageDead(_192);
        _739 = discriminant(_186);
        StorageDead(_186);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = const b"serum_fulfillment_config";
        _202 = &(*_203);
        _201 = <[u8; 24] as AsRef<[u8]>>::as_ref(move _202) -> [return: bb79, unwind: bb321];
    }

    bb77: {
        StorageLive(_189);
        _189 = move ((_186 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_191);
        _191 = move _189;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _191) -> [return: bb78, unwind: bb360];
    }

    bb78: {
        StorageDead(_191);
        StorageDead(_189);
        _771 = discriminant(_186);
        StorageDead(_186);
        goto -> bb301;
    }

    bb79: {
        _200 = &(*_201);
        StorageDead(_202);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _695 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _206 = &(*_695);
        _205 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _206) -> [return: bb80, unwind: bb321];
    }

    bb80: {
        _204 = &(*_205);
        StorageDead(_206);
        _199 = [move _200, move _204];
        StorageDead(_204);
        StorageDead(_200);
        _198 = &_199;
        _197 = &(*_198);
        _196 = move _197 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_197);
        StorageLive(_207);
        _207 = &(*_1);
        _195 = anchor_lang::prelude::Pubkey::find_program_address(move _196, move _207) -> [return: bb81, unwind: bb321];
    }

    bb81: {
        StorageDead(_207);
        StorageDead(_196);
        StorageLive(_193);
        _193 = (_195.0: anchor_lang::prelude::Pubkey);
        StorageLive(_194);
        _194 = (_195.1: u8);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_195);
        StorageLive(_208);
        _208 = _194;
        ((*_4).3: u8) = move _208;
        StorageDead(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &(*_131);
        _212 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _213) -> [return: bb82, unwind: bb321];
    }

    bb82: {
        _211 = &_212;
        StorageDead(_213);
        StorageLive(_214);
        _214 = &_193;
        _210 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _211, move _214) -> [return: bb83, unwind: bb321];
    }

    bb83: {
        switchInt(move _210) -> [0: bb89, otherwise: bb84];
    }

    bb84: {
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = ConstraintSeeds;
        _218 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _219) -> [return: bb85, unwind: bb321];
    }

    bb85: {
        StorageDead(_219);
        _217 = anchor_lang::error::Error::with_account_name::<&str>(move _218, const "serum_fulfillment_config") -> [return: bb86, unwind: bb321];
    }

    bb86: {
        _718 = const true;
        StorageDead(_218);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &(*_131);
        _221 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _222) -> [return: bb87, unwind: bb359];
    }

    bb87: {
        StorageDead(_222);
        StorageLive(_223);
        _223 = _193;
        _220 = (move _221, move _223);
        StorageDead(_223);
        StorageDead(_221);
        _718 = const false;
        _216 = anchor_lang::error::Error::with_pubkeys(move _217, move _220) -> [return: bb88, unwind: bb359];
    }

    bb88: {
        StorageDead(_220);
        _718 = const false;
        StorageDead(_217);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _216);
        StorageDead(_216);
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb300;
    }

    bb89: {
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        _209 = const ();
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_131;
        _226 = &(*_227);
        _225 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _226) -> [return: bb90, unwind: bb321];
    }

    bb90: {
        StorageDead(_226);
        StorageDead(_227);
        StorageLive(_228);
        _228 = ((*_225).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_229);
        _229 = const _;
        StorageLive(_230);
        StorageLive(_231);
        _231 = const false;
        switchInt(move _231) -> [0: bb93, otherwise: bb91];
    }

    bb91: {
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_228;
        StorageLive(_234);
        _690 = const _;
        _234 = &(*_690);
        _232 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _233, move _234) -> [return: bb92, unwind: bb321];
    }

    bb92: {
        switchInt(move _232) -> [0: bb170, otherwise: bb93];
    }

    bb93: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &(*_131);
        _237 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _238) -> [return: bb94, unwind: bb321];
    }

    bb94: {
        StorageDead(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _237;
        _240 = Eq(move _241, const 0_u64);
        switchInt(move _240) -> [0: bb111, otherwise: bb95];
    }

    bb95: {
        StorageDead(_241);
        StorageLive(_242);
        _242 = _229;
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_185;
        StorageLive(_245);
        _245 = _242;
        _243 = anchor_lang::prelude::Rent::minimum_balance(move _244, move _245) -> [return: bb96, unwind: bb321];
    }

    bb96: {
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_140;
        _247 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _248) -> [return: bb97, unwind: bb321];
    }

    bb97: {
        StorageDead(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &(*_131);
        _249 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _250) -> [return: bb98, unwind: bb320];
    }

    bb98: {
        StorageDead(_250);
        _717 = const true;
        _246 = anchor_lang::system_program::CreateAccount::<'_> { from: move _247, to: move _249 };
        StorageDead(_249);
        StorageDead(_247);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_170;
        _252 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _253) -> [return: bb99, unwind: bb357];
    }

    bb99: {
        StorageDead(_253);
        StorageLive(_254);
        _717 = const false;
        _254 = move _246;
        _251 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _252, move _254) -> [return: bb100, unwind: bb357];
    }

    bb100: {
        StorageDead(_254);
        StorageDead(_252);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _716 = const true;
        _259 = move _251;
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = const b"serum_fulfillment_config";
        _270 = &(*_271);
        _269 = <[u8; 24] as AsRef<[u8]>>::as_ref(move _270) -> [return: bb101, unwind: bb355];
    }

    bb101: {
        StorageDead(_270);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _696 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _274 = &(*_696);
        _273 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _274) -> [return: bb102, unwind: bb355];
    }

    bb102: {
        _272 = &(*_273);
        StorageDead(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = _194;
        _279 = [move _280];
        _278 = &_279;
        StorageDead(_280);
        StorageLive(_281);
        _281 = RangeFull;
        _277 = <[u8; 1] as Index<RangeFull>>::index(move _278, move _281) -> [return: bb103, unwind: bb355];
    }

    bb103: {
        StorageDead(_281);
        StorageDead(_278);
        _276 = &(*_277);
        _275 = &(*_276);
        _268 = [move _269, move _272, move _275];
        _267 = &_268;
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_269);
        StorageLive(_282);
        _282 = RangeFull;
        _266 = <[&[u8]; 3] as Index<RangeFull>>::index(move _267, move _282) -> [return: bb104, unwind: bb355];
    }

    bb104: {
        StorageDead(_282);
        StorageDead(_267);
        _265 = &(*_266);
        _264 = &(*_265);
        _263 = [move _264];
        StorageDead(_264);
        _262 = &_263;
        _261 = &(*_262);
        _260 = move _261 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_261);
        _716 = const false;
        _258 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _259, move _260) -> [return: bb105, unwind: bb355];
    }

    bb105: {
        StorageDead(_260);
        _716 = const false;
        StorageDead(_259);
        StorageLive(_283);
        _283 = _243;
        StorageLive(_284);
        StorageLive(_285);
        _285 = _242;
        _284 = move _285 as u64 (IntToInt);
        StorageDead(_285);
        StorageLive(_286);
        _286 = &(*_1);
        _257 = anchor_lang::system_program::create_account(move _258, move _283, move _284, move _286) -> [return: bb106, unwind: bb357];
    }

    bb106: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_258);
        _256 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _257) -> [return: bb107, unwind: bb357];
    }

    bb107: {
        StorageDead(_257);
        _287 = discriminant(_256);
        switchInt(move _287) -> [0: bb108, 1: bb109, otherwise: bb5];
    }

    bb108: {
        StorageLive(_291);
        _291 = ((_256 as Continue).0: ());
        _255 = _291;
        StorageDead(_291);
        _741 = discriminant(_256);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_256);
        StorageDead(_255);
        _239 = const ();
        StorageDead(_251);
        _717 = const false;
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb165;
    }

    bb109: {
        StorageLive(_288);
        _288 = move ((_256 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_290);
        _290 = move _288;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _290) -> [return: bb110, unwind: bb353];
    }

    bb110: {
        StorageDead(_290);
        StorageDead(_288);
        _769 = discriminant(_256);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_251);
        _717 = const false;
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb296;
    }

    bb111: {
        StorageDead(_241);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = &_140;
        _295 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _296) -> [return: bb112, unwind: bb321];
    }

    bb112: {
        _294 = &_295;
        StorageDead(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = &(*_131);
        _298 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _299) -> [return: bb113, unwind: bb321];
    }

    bb113: {
        _297 = &_298;
        StorageDead(_299);
        _293 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _294, move _297) -> [return: bb114, unwind: bb321];
    }

    bb114: {
        switchInt(move _293) -> [0: bb123, otherwise: bb115];
    }

    bb115: {
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _689 = const _;
        _305 = &(*_689);
        _304 = anchor_lang::error::ErrorCode::name(move _305) -> [return: bb116, unwind: bb321];
    }

    bb116: {
        StorageDead(_305);
        StorageLive(_307);
        StorageLive(_308);
        _308 = TryingToInitPayerAsProgramAccount;
        _307 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _308) -> [return: bb117, unwind: bb319];
    }

    bb117: {
        StorageDead(_308);
        StorageLive(_309);
        StorageLive(_310);
        _688 = const _;
        _310 = &(*_688);
        _309 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _310) -> [return: bb118, unwind: bb319];
    }

    bb118: {
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5015_u32 };
        _313 = anchor_lang::error::ErrorOrigin::Source(move _314);
        StorageDead(_314);
        _312 = Option::<ErrorOrigin>::Some(move _313);
        StorageDead(_313);
        StorageLive(_315);
        _315 = Option::<ComparedValues>::None;
        _303 = anchor_lang::error::AnchorError { error_name: move _304, error_code_number: move _307, error_msg: move _309, error_origin: move _312, compared_values: move _315 };
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_304);
        _302 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _303) -> [return: bb119, unwind: bb321];
    }

    bb119: {
        _715 = const true;
        StorageDead(_303);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_140;
        _317 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _318) -> [return: bb120, unwind: bb352];
    }

    bb120: {
        StorageDead(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &(*_131);
        _319 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _320) -> [return: bb121, unwind: bb352];
    }

    bb121: {
        StorageDead(_320);
        _316 = (move _317, move _319);
        StorageDead(_319);
        StorageDead(_317);
        _715 = const false;
        _301 = anchor_lang::error::Error::with_pubkeys(move _302, move _316) -> [return: bb122, unwind: bb352];
    }

    bb122: {
        StorageDead(_316);
        _715 = const false;
        StorageDead(_302);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _301);
        StorageDead(_301);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb296;
    }

    bb123: {
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_294);
        _292 = const ();
        StorageDead(_293);
        StorageDead(_292);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &_185;
        StorageLive(_325);
        _325 = _229;
        _323 = anchor_lang::prelude::Rent::minimum_balance(move _324, move _325) -> [return: bb124, unwind: bb321];
    }

    bb124: {
        StorageDead(_325);
        StorageDead(_324);
        _322 = <u64 as Ord>::max(move _323, const 1_u64) -> [return: bb125, unwind: bb321];
    }

    bb125: {
        StorageDead(_323);
        StorageLive(_326);
        _326 = _237;
        _321 = core::num::<impl u64>::saturating_sub(move _322, move _326) -> [return: bb126, unwind: bb321];
    }

    bb126: {
        StorageDead(_326);
        StorageDead(_322);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = _321;
        _328 = Gt(move _329, const 0_u64);
        switchInt(move _328) -> [0: bb137, otherwise: bb127];
    }

    bb127: {
        StorageDead(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_140;
        _331 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _332) -> [return: bb128, unwind: bb321];
    }

    bb128: {
        StorageDead(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &(*_131);
        _333 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _334) -> [return: bb129, unwind: bb318];
    }

    bb129: {
        StorageDead(_334);
        _714 = const true;
        _330 = anchor_lang::system_program::Transfer::<'_> { from: move _331, to: move _333 };
        StorageDead(_333);
        StorageDead(_331);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_170;
        _336 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _337) -> [return: bb130, unwind: bb350];
    }

    bb130: {
        StorageDead(_337);
        StorageLive(_338);
        _714 = const false;
        _338 = move _330;
        _335 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _336, move _338) -> [return: bb131, unwind: bb350];
    }

    bb131: {
        StorageDead(_338);
        StorageDead(_336);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = move _335;
        StorageLive(_343);
        _343 = _321;
        _341 = anchor_lang::system_program::transfer(move _342, move _343) -> [return: bb132, unwind: bb350];
    }

    bb132: {
        StorageDead(_343);
        StorageDead(_342);
        _340 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _341) -> [return: bb133, unwind: bb350];
    }

    bb133: {
        StorageDead(_341);
        _344 = discriminant(_340);
        switchInt(move _344) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_348);
        _348 = ((_340 as Continue).0: ());
        _339 = _348;
        StorageDead(_348);
        _743 = discriminant(_340);
        StorageDead(_340);
        StorageDead(_339);
        _327 = const ();
        StorageDead(_335);
        _714 = const false;
        StorageDead(_330);
        goto -> bb138;
    }

    bb135: {
        StorageLive(_345);
        _345 = move ((_340 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_347);
        _347 = move _345;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _347) -> [return: bb136, unwind: bb348];
    }

    bb136: {
        StorageDead(_347);
        StorageDead(_345);
        _767 = discriminant(_340);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_335);
        _714 = const false;
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_327);
        goto -> bb295;
    }

    bb137: {
        StorageDead(_329);
        _327 = const ();
        goto -> bb138;
    }

    bb138: {
        StorageDead(_328);
        StorageDead(_327);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_131);
        _350 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _351) -> [return: bb139, unwind: bb321];
    }

    bb139: {
        StorageDead(_351);
        _713 = const true;
        _349 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _350 };
        StorageDead(_350);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &_170;
        _353 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _354) -> [return: bb140, unwind: bb347];
    }

    bb140: {
        StorageDead(_354);
        StorageLive(_355);
        _713 = const false;
        _355 = move _349;
        _352 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _353, move _355) -> [return: bb141, unwind: bb347];
    }

    bb141: {
        StorageDead(_355);
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _712 = const true;
        _360 = move _352;
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = const b"serum_fulfillment_config";
        _371 = &(*_372);
        _370 = <[u8; 24] as AsRef<[u8]>>::as_ref(move _371) -> [return: bb142, unwind: bb345];
    }

    bb142: {
        StorageDead(_371);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _697 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _375 = &(*_697);
        _374 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _375) -> [return: bb143, unwind: bb345];
    }

    bb143: {
        _373 = &(*_374);
        StorageDead(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = _194;
        _380 = [move _381];
        _379 = &_380;
        StorageDead(_381);
        StorageLive(_382);
        _382 = RangeFull;
        _378 = <[u8; 1] as Index<RangeFull>>::index(move _379, move _382) -> [return: bb144, unwind: bb345];
    }

    bb144: {
        StorageDead(_382);
        StorageDead(_379);
        _377 = &(*_378);
        _376 = &(*_377);
        _369 = [move _370, move _373, move _376];
        _368 = &_369;
        StorageDead(_376);
        StorageDead(_373);
        StorageDead(_370);
        StorageLive(_383);
        _383 = RangeFull;
        _367 = <[&[u8]; 3] as Index<RangeFull>>::index(move _368, move _383) -> [return: bb145, unwind: bb345];
    }

    bb145: {
        StorageDead(_383);
        StorageDead(_368);
        _366 = &(*_367);
        _365 = &(*_366);
        _364 = [move _365];
        StorageDead(_365);
        _363 = &_364;
        _362 = &(*_363);
        _361 = move _362 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_362);
        _712 = const false;
        _359 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _360, move _361) -> [return: bb146, unwind: bb345];
    }

    bb146: {
        StorageDead(_361);
        _712 = const false;
        StorageDead(_360);
        StorageLive(_384);
        StorageLive(_385);
        _385 = _229;
        _384 = move _385 as u64 (IntToInt);
        StorageDead(_385);
        _358 = anchor_lang::system_program::allocate(move _359, move _384) -> [return: bb147, unwind: bb347];
    }

    bb147: {
        StorageDead(_384);
        StorageDead(_359);
        _357 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _358) -> [return: bb148, unwind: bb347];
    }

    bb148: {
        StorageDead(_358);
        _386 = discriminant(_357);
        switchInt(move _386) -> [0: bb149, 1: bb150, otherwise: bb5];
    }

    bb149: {
        StorageLive(_390);
        _390 = ((_357 as Continue).0: ());
        _356 = _390;
        StorageDead(_390);
        _745 = discriminant(_357);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_357);
        StorageDead(_356);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = &(*_131);
        _392 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _393) -> [return: bb152, unwind: bb347];
    }

    bb150: {
        StorageLive(_387);
        _387 = move ((_357 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_389);
        _389 = move _387;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _389) -> [return: bb151, unwind: bb343];
    }

    bb151: {
        StorageDead(_389);
        StorageDead(_387);
        _765 = discriminant(_357);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_357);
        StorageDead(_356);
        goto -> bb294;
    }

    bb152: {
        StorageDead(_393);
        _711 = const true;
        _391 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _392 };
        StorageDead(_392);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = &_170;
        _395 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _396) -> [return: bb153, unwind: bb342];
    }

    bb153: {
        StorageDead(_396);
        StorageLive(_397);
        _711 = const false;
        _397 = move _391;
        _394 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _395, move _397) -> [return: bb154, unwind: bb342];
    }

    bb154: {
        StorageDead(_397);
        StorageDead(_395);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _710 = const true;
        _402 = move _394;
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = const b"serum_fulfillment_config";
        _413 = &(*_414);
        _412 = <[u8; 24] as AsRef<[u8]>>::as_ref(move _413) -> [return: bb155, unwind: bb340];
    }

    bb155: {
        StorageDead(_413);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _698 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _417 = &(*_698);
        _416 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _417) -> [return: bb156, unwind: bb340];
    }

    bb156: {
        _415 = &(*_416);
        StorageDead(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = _194;
        _422 = [move _423];
        _421 = &_422;
        StorageDead(_423);
        StorageLive(_424);
        _424 = RangeFull;
        _420 = <[u8; 1] as Index<RangeFull>>::index(move _421, move _424) -> [return: bb157, unwind: bb340];
    }

    bb157: {
        StorageDead(_424);
        StorageDead(_421);
        _419 = &(*_420);
        _418 = &(*_419);
        _411 = [move _412, move _415, move _418];
        _410 = &_411;
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_412);
        StorageLive(_425);
        _425 = RangeFull;
        _409 = <[&[u8]; 3] as Index<RangeFull>>::index(move _410, move _425) -> [return: bb158, unwind: bb340];
    }

    bb158: {
        StorageDead(_425);
        StorageDead(_410);
        _408 = &(*_409);
        _407 = &(*_408);
        _406 = [move _407];
        StorageDead(_407);
        _405 = &_406;
        _404 = &(*_405);
        _403 = move _404 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_404);
        _710 = const false;
        _401 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _402, move _403) -> [return: bb159, unwind: bb340];
    }

    bb159: {
        StorageDead(_403);
        _710 = const false;
        StorageDead(_402);
        StorageLive(_426);
        _426 = &(*_1);
        _400 = anchor_lang::system_program::assign(move _401, move _426) -> [return: bb160, unwind: bb342];
    }

    bb160: {
        StorageDead(_426);
        StorageDead(_401);
        _399 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _400) -> [return: bb161, unwind: bb342];
    }

    bb161: {
        StorageDead(_400);
        _427 = discriminant(_399);
        switchInt(move _427) -> [0: bb162, 1: bb163, otherwise: bb5];
    }

    bb162: {
        StorageLive(_431);
        _431 = ((_399 as Continue).0: ());
        _398 = _431;
        StorageDead(_431);
        _747 = discriminant(_399);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_416);
        StorageDead(_414);
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_399);
        StorageDead(_398);
        _239 = const ();
        StorageDead(_394);
        _711 = const false;
        StorageDead(_391);
        StorageDead(_352);
        _713 = const false;
        StorageDead(_349);
        StorageDead(_321);
        goto -> bb165;
    }

    bb163: {
        StorageLive(_428);
        _428 = move ((_399 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_430);
        _430 = move _428;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _430) -> [return: bb164, unwind: bb338];
    }

    bb164: {
        StorageDead(_430);
        StorageDead(_428);
        _763 = discriminant(_399);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_416);
        StorageDead(_414);
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_394);
        _711 = const false;
        StorageDead(_391);
        goto -> bb294;
    }

    bb165: {
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &(*_1);
        StorageLive(_434);
        StorageLive(_435);
        _435 = &_131;
        _699 = deref_copy (*_435);
        _434 = &(*_699);
        _432 = anchor_lang::prelude::AccountLoader::<'_, SerumV3FulfillmentConfig>::try_from_unchecked(move _433, move _434) -> [return: bb166, unwind: bb321];
    }

    bb166: {
        StorageDead(_434);
        StorageDead(_433);
        _436 = discriminant(_432);
        switchInt(move _436) -> [0: bb168, 1: bb167, otherwise: bb5];
    }

    bb167: {
        StorageLive(_438);
        _438 = move ((_432 as Err).0: anchor_lang::error::Error);
        StorageLive(_440);
        StorageLive(_441);
        _441 = move _438;
        _440 = anchor_lang::error::Error::with_account_name::<&str>(move _441, const "serum_fulfillment_config") -> [return: bb169, unwind: bb337];
    }

    bb168: {
        StorageLive(_437);
        _437 = move ((_432 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _230 = move _437;
        StorageDead(_437);
        StorageDead(_237);
        _749 = discriminant(_432);
        StorageDead(_435);
        StorageDead(_432);
        goto -> bb175;
    }

    bb169: {
        StorageDead(_441);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _440);
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_237);
        _761 = discriminant(_432);
        StorageDead(_435);
        StorageDead(_432);
        goto -> bb297;
    }

    bb170: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &_131;
        _700 = deref_copy (*_444);
        _443 = &(*_700);
        _442 = anchor_lang::prelude::AccountLoader::<'_, SerumV3FulfillmentConfig>::try_from(move _443) -> [return: bb171, unwind: bb321];
    }

    bb171: {
        StorageDead(_443);
        _445 = discriminant(_442);
        switchInt(move _445) -> [0: bb173, 1: bb172, otherwise: bb5];
    }

    bb172: {
        StorageLive(_447);
        _447 = move ((_442 as Err).0: anchor_lang::error::Error);
        StorageLive(_449);
        StorageLive(_450);
        _450 = move _447;
        _449 = anchor_lang::error::Error::with_account_name::<&str>(move _450, const "serum_fulfillment_config") -> [return: bb174, unwind: bb336];
    }

    bb173: {
        StorageLive(_446);
        _446 = move ((_442 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _230 = move _446;
        StorageDead(_446);
        _751 = discriminant(_442);
        StorageDead(_444);
        StorageDead(_442);
        goto -> bb175;
    }

    bb174: {
        StorageDead(_450);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _449);
        StorageDead(_449);
        StorageDead(_447);
        _759 = discriminant(_442);
        StorageDead(_444);
        StorageDead(_442);
        goto -> bb297;
    }

    bb175: {
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_451);
        StorageLive(_452);
        _452 = const false;
        switchInt(move _452) -> [0: bb199, otherwise: bb176];
    }

    bb176: {
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = _229;
        StorageLive(_456);
        StorageLive(_457);
        _457 = &(*_225);
        _456 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _457) -> [return: bb177, unwind: bb321];
    }

    bb177: {
        StorageDead(_457);
        _454 = Ne(move _455, move _456);
        switchInt(move _454) -> [0: bb183, otherwise: bb178];
    }

    bb178: {
        StorageDead(_456);
        StorageDead(_455);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = ConstraintSpace;
        _461 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _462) -> [return: bb179, unwind: bb321];
    }

    bb179: {
        StorageDead(_462);
        _460 = anchor_lang::error::Error::with_account_name::<&str>(move _461, const "serum_fulfillment_config") -> [return: bb180, unwind: bb321];
    }

    bb180: {
        _709 = const true;
        StorageDead(_461);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _229;
        StorageLive(_465);
        StorageLive(_466);
        _466 = &(*_225);
        _465 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _466) -> [return: bb181, unwind: bb335];
    }

    bb181: {
        StorageDead(_466);
        _463 = (move _464, move _465);
        StorageDead(_465);
        StorageDead(_464);
        _709 = const false;
        _459 = anchor_lang::error::Error::with_values::<usize, usize>(move _460, move _463) -> [return: bb182, unwind: bb335];
    }

    bb182: {
        StorageDead(_463);
        _709 = const false;
        StorageDead(_460);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _459);
        StorageDead(_459);
        StorageDead(_454);
        StorageDead(_453);
        goto -> bb293;
    }

    bb183: {
        StorageDead(_456);
        StorageDead(_455);
        _453 = const ();
        StorageDead(_454);
        StorageDead(_453);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = &_228;
        StorageLive(_470);
        _470 = &_1;
        _468 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _469, move _470) -> [return: bb184, unwind: bb321];
    }

    bb184: {
        switchInt(move _468) -> [0: bb189, otherwise: bb185];
    }

    bb185: {
        StorageDead(_470);
        StorageDead(_469);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = ConstraintOwner;
        _474 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _475) -> [return: bb186, unwind: bb321];
    }

    bb186: {
        StorageDead(_475);
        _473 = anchor_lang::error::Error::with_account_name::<&str>(move _474, const "serum_fulfillment_config") -> [return: bb187, unwind: bb321];
    }

    bb187: {
        StorageDead(_474);
        StorageLive(_476);
        StorageLive(_477);
        _477 = (*_228);
        StorageLive(_478);
        _478 = (*_1);
        _476 = (move _477, move _478);
        StorageDead(_478);
        StorageDead(_477);
        _472 = anchor_lang::error::Error::with_pubkeys(move _473, move _476) -> [return: bb188, unwind: bb321];
    }

    bb188: {
        StorageDead(_476);
        StorageDead(_473);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _472);
        StorageDead(_472);
        StorageDead(_468);
        StorageDead(_467);
        goto -> bb293;
    }

    bb189: {
        StorageDead(_470);
        StorageDead(_469);
        _467 = const ();
        StorageDead(_468);
        StorageDead(_467);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_185;
        StorageLive(_481);
        _481 = _229;
        _479 = anchor_lang::prelude::Rent::minimum_balance(move _480, move _481) -> [return: bb190, unwind: bb321];
    }

    bb190: {
        StorageDead(_481);
        StorageDead(_480);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_230;
        _485 = <anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _486) -> [return: bb191, unwind: bb321];
    }

    bb191: {
        _484 = &_485;
        StorageDead(_486);
        _483 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _484) -> [return: bb192, unwind: bb317];
    }

    bb192: {
        StorageDead(_484);
        StorageLive(_487);
        _487 = _479;
        _482 = Lt(move _483, move _487);
        switchInt(move _482) -> [0: bb197, otherwise: bb193];
    }

    bb193: {
        StorageDead(_487);
        drop(_485) -> [return: bb194, unwind: bb321];
    }

    bb194: {
        StorageDead(_485);
        StorageDead(_483);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _491 = ConstraintRentExempt;
        _490 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _491) -> [return: bb195, unwind: bb321];
    }

    bb195: {
        StorageDead(_491);
        _489 = anchor_lang::error::Error::with_account_name::<&str>(move _490, const "serum_fulfillment_config") -> [return: bb196, unwind: bb321];
    }

    bb196: {
        StorageDead(_490);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _489);
        StorageDead(_489);
        StorageDead(_482);
        StorageDead(_479);
        goto -> bb293;
    }

    bb197: {
        StorageDead(_487);
        drop(_485) -> [return: bb198, unwind: bb321];
    }

    bb198: {
        StorageDead(_485);
        StorageDead(_483);
        _451 = const ();
        StorageDead(_482);
        StorageDead(_479);
        goto -> bb200;
    }

    bb199: {
        _451 = const ();
        goto -> bb200;
    }

    bb200: {
        StorageDead(_452);
        StorageDead(_451);
        _224 = move _230;
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_225);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _496 = &_224;
        _495 = &(*_496);
        _494 = <anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _495) -> [return: bb201, unwind: bb321];
    }

    bb201: {
        StorageDead(_495);
        _493 = ((*_494).6: bool);
        switchInt(move _493) -> [0: bb202, otherwise: bb205];
    }

    bb202: {
        StorageDead(_496);
        StorageDead(_494);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _500 = ConstraintMut;
        _499 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _500) -> [return: bb203, unwind: bb321];
    }

    bb203: {
        StorageDead(_500);
        _498 = anchor_lang::error::Error::with_account_name::<&str>(move _499, const "serum_fulfillment_config") -> [return: bb204, unwind: bb321];
    }

    bb204: {
        StorageDead(_499);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _498);
        StorageDead(_498);
        StorageDead(_493);
        StorageDead(_492);
        goto -> bb299;
    }

    bb205: {
        StorageDead(_496);
        StorageDead(_494);
        _492 = const ();
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &_185;
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &_224;
        _506 = <anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _507) -> [return: bb206, unwind: bb321];
    }

    bb206: {
        _505 = &_506;
        StorageDead(_507);
        _504 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _505) -> [return: bb207, unwind: bb316];
    }

    bb207: {
        StorageDead(_505);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        _513 = &_224;
        _512 = <anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _513) -> [return: bb208, unwind: bb316];
    }

    bb208: {
        _511 = &_512;
        StorageDead(_513);
        _510 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _511) -> [return: bb209, unwind: bb315];
    }

    bb209: {
        StorageDead(_511);
        _509 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _510) -> [return: bb210, unwind: bb315];
    }

    bb210: {
        _708 = const true;
        StorageDead(_510);
        _514 = discriminant(_509);
        switchInt(move _514) -> [0: bb211, 1: bb212, otherwise: bb5];
    }

    bb211: {
        StorageLive(_518);
        _518 = ((_509 as Continue).0: usize);
        _508 = _518;
        StorageDead(_518);
        _502 = anchor_lang::prelude::Rent::is_exempt(move _503, move _504, move _508) -> [return: bb214, unwind: bb333];
    }

    bb212: {
        StorageLive(_515);
        _515 = move ((_509 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_517);
        _517 = move _515;
        _0 = <std::result::Result<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _517) -> [return: bb213, unwind: bb333];
    }

    bb213: {
        StorageDead(_517);
        StorageDead(_515);
        StorageDead(_508);
        StorageDead(_504);
        StorageDead(_503);
        _757 = discriminant(_509);
        drop(_512) -> [return: bb290, unwind: bb316];
    }

    bb214: {
        switchInt(move _502) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        StorageDead(_508);
        StorageDead(_504);
        StorageDead(_503);
        _753 = discriminant(_509);
        drop(_512) -> [return: bb221, unwind: bb316];
    }

    bb216: {
        StorageDead(_508);
        StorageDead(_504);
        StorageDead(_503);
        _755 = discriminant(_509);
        drop(_512) -> [return: bb217, unwind: bb316];
    }

    bb217: {
        StorageDead(_512);
        _708 = const false;
        StorageDead(_509);
        drop(_506) -> [return: bb218, unwind: bb321];
    }

    bb218: {
        StorageDead(_506);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = ConstraintRentExempt;
        _521 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _522) -> [return: bb219, unwind: bb321];
    }

    bb219: {
        StorageDead(_522);
        _520 = anchor_lang::error::Error::with_account_name::<&str>(move _521, const "serum_fulfillment_config") -> [return: bb220, unwind: bb321];
    }

    bb220: {
        StorageDead(_521);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _520);
        StorageDead(_520);
        goto -> bb292;
    }

    bb221: {
        StorageDead(_512);
        _708 = const false;
        StorageDead(_509);
        drop(_506) -> [return: bb222, unwind: bb321];
    }

    bb222: {
        StorageDead(_506);
        _501 = const ();
        StorageDead(_502);
        StorageDead(_501);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _532 = const b"spot_market";
        _531 = &(*_532);
        _530 = move _531 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_531);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = _7;
        _536 = core::num::<impl u16>::to_le_bytes(move _537) -> [return: bb223, unwind: bb321];
    }

    bb223: {
        _535 = &_536;
        StorageDead(_537);
        _534 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _535) -> [return: bb224, unwind: bb321];
    }

    bb224: {
        _533 = &(*_534);
        StorageDead(_535);
        _529 = [move _530, move _533];
        StorageDead(_533);
        StorageDead(_530);
        _528 = &_529;
        _527 = &(*_528);
        _526 = move _527 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_527);
        StorageLive(_538);
        StorageLive(_539);
        _539 = &_1;
        _701 = deref_copy (*_539);
        _538 = &(*_701);
        _525 = anchor_lang::prelude::Pubkey::find_program_address(move _526, move _538) -> [return: bb225, unwind: bb321];
    }

    bb225: {
        StorageDead(_538);
        StorageDead(_526);
        StorageLive(_523);
        _523 = (_525.0: anchor_lang::prelude::Pubkey);
        StorageLive(_524);
        _524 = (_525.1: u8);
        StorageDead(_539);
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_528);
        StorageDead(_525);
        StorageLive(_540);
        _540 = _524;
        ((*_4).0: u8) = move _540;
        StorageDead(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _545 = &_20;
        _544 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _545) -> [return: bb226, unwind: bb321];
    }

    bb226: {
        _543 = &_544;
        StorageDead(_545);
        StorageLive(_546);
        _546 = &_523;
        _542 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _543, move _546) -> [return: bb227, unwind: bb321];
    }

    bb227: {
        switchInt(move _542) -> [0: bb233, otherwise: bb228];
    }

    bb228: {
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_543);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = ConstraintSeeds;
        _550 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _551) -> [return: bb229, unwind: bb321];
    }

    bb229: {
        StorageDead(_551);
        _549 = anchor_lang::error::Error::with_account_name::<&str>(move _550, const "base_spot_market") -> [return: bb230, unwind: bb321];
    }

    bb230: {
        _707 = const true;
        StorageDead(_550);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _554 = &_20;
        _553 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _554) -> [return: bb231, unwind: bb332];
    }

    bb231: {
        StorageDead(_554);
        StorageLive(_555);
        _555 = _523;
        _552 = (move _553, move _555);
        StorageDead(_555);
        StorageDead(_553);
        _707 = const false;
        _548 = anchor_lang::error::Error::with_pubkeys(move _549, move _552) -> [return: bb232, unwind: bb332];
    }

    bb232: {
        StorageDead(_552);
        _707 = const false;
        StorageDead(_549);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _548);
        StorageDead(_548);
        StorageDead(_542);
        StorageDead(_541);
        goto -> bb289;
    }

    bb233: {
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_543);
        _541 = const ();
        StorageDead(_542);
        StorageDead(_541);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        _565 = const b"spot_market";
        _564 = &(*_565);
        _563 = move _564 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_564);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        _569 = core::num::<impl u16>::to_le_bytes(const 0_u16) -> [return: bb234, unwind: bb321];
    }

    bb234: {
        _568 = &_569;
        _567 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _568) -> [return: bb235, unwind: bb321];
    }

    bb235: {
        _566 = &(*_567);
        StorageDead(_568);
        _562 = [move _563, move _566];
        StorageDead(_566);
        StorageDead(_563);
        _561 = &_562;
        _560 = &(*_561);
        _559 = move _560 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_560);
        StorageLive(_570);
        StorageLive(_571);
        _571 = &_1;
        _702 = deref_copy (*_571);
        _570 = &(*_702);
        _558 = anchor_lang::prelude::Pubkey::find_program_address(move _559, move _570) -> [return: bb236, unwind: bb321];
    }

    bb236: {
        StorageDead(_570);
        StorageDead(_559);
        StorageLive(_556);
        _556 = (_558.0: anchor_lang::prelude::Pubkey);
        StorageLive(_557);
        _557 = (_558.1: u8);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_567);
        StorageDead(_565);
        StorageDead(_562);
        StorageDead(_561);
        StorageDead(_558);
        StorageLive(_572);
        _572 = _557;
        ((*_4).1: u8) = move _572;
        StorageDead(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        _577 = &_35;
        _576 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _577) -> [return: bb237, unwind: bb321];
    }

    bb237: {
        _575 = &_576;
        StorageDead(_577);
        StorageLive(_578);
        _578 = &_556;
        _574 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _575, move _578) -> [return: bb238, unwind: bb321];
    }

    bb238: {
        switchInt(move _574) -> [0: bb244, otherwise: bb239];
    }

    bb239: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_575);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        _583 = ConstraintSeeds;
        _582 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _583) -> [return: bb240, unwind: bb321];
    }

    bb240: {
        StorageDead(_583);
        _581 = anchor_lang::error::Error::with_account_name::<&str>(move _582, const "quote_spot_market") -> [return: bb241, unwind: bb321];
    }

    bb241: {
        _706 = const true;
        StorageDead(_582);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = &_35;
        _585 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _586) -> [return: bb242, unwind: bb330];
    }

    bb242: {
        StorageDead(_586);
        StorageLive(_587);
        _587 = _556;
        _584 = (move _585, move _587);
        StorageDead(_587);
        StorageDead(_585);
        _706 = const false;
        _580 = anchor_lang::error::Error::with_pubkeys(move _581, move _584) -> [return: bb243, unwind: bb330];
    }

    bb243: {
        StorageDead(_584);
        _706 = const false;
        StorageDead(_581);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _580);
        StorageDead(_580);
        StorageDead(_574);
        StorageDead(_573);
        goto -> bb288;
    }

    bb244: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_575);
        _573 = const ();
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _593 = &_50;
        _592 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _593) -> [return: bb245, unwind: bb321];
    }

    bb245: {
        _591 = &(*_592);
        StorageDead(_593);
        _590 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _591) -> [return: bb246, unwind: bb321];
    }

    bb246: {
        StorageDead(_591);
        _589 = ((*_590).6: bool);
        switchInt(move _589) -> [0: bb247, otherwise: bb250];
    }

    bb247: {
        StorageDead(_592);
        StorageDead(_590);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _597 = ConstraintMut;
        _596 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _597) -> [return: bb248, unwind: bb321];
    }

    bb248: {
        StorageDead(_597);
        _595 = anchor_lang::error::Error::with_account_name::<&str>(move _596, const "state") -> [return: bb249, unwind: bb321];
    }

    bb249: {
        StorageDead(_596);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _595);
        StorageDead(_595);
        StorageDead(_589);
        StorageDead(_588);
        goto -> bb288;
    }

    bb250: {
        StorageDead(_592);
        StorageDead(_590);
        _588 = const ();
        StorageDead(_589);
        StorageDead(_588);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        _811 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _601 = &(*_811);
        _600 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _601) -> [return: bb251, unwind: bb321];
    }

    bb251: {
        StorageDead(_601);
        _599 = ((*_600).0: anchor_lang::prelude::Pubkey);
        StorageDead(_600);
        StorageLive(_602);
        StorageLive(_603);
        _603 = &_140;
        _602 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _603) -> [return: bb252, unwind: bb321];
    }

    bb252: {
        StorageDead(_603);
        StorageLive(_604);
        StorageLive(_605);
        _605 = &_599;
        StorageLive(_606);
        _606 = &_602;
        _604 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _605, move _606) -> [return: bb253, unwind: bb321];
    }

    bb253: {
        switchInt(move _604) -> [0: bb258, otherwise: bb254];
    }

    bb254: {
        StorageDead(_606);
        StorageDead(_605);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        _611 = ConstraintHasOne;
        _610 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _611) -> [return: bb255, unwind: bb321];
    }

    bb255: {
        StorageDead(_611);
        _609 = anchor_lang::error::Error::with_account_name::<&str>(move _610, const "state") -> [return: bb256, unwind: bb321];
    }

    bb256: {
        StorageDead(_610);
        StorageLive(_612);
        StorageLive(_613);
        _613 = _599;
        StorageLive(_614);
        _614 = _602;
        _612 = (move _613, move _614);
        StorageDead(_614);
        StorageDead(_613);
        _608 = anchor_lang::error::Error::with_pubkeys(move _609, move _612) -> [return: bb257, unwind: bb321];
    }

    bb257: {
        StorageDead(_612);
        StorageDead(_609);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _608);
        StorageDead(_608);
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_599);
        StorageDead(_598);
        goto -> bb288;
    }

    bb258: {
        StorageDead(_606);
        StorageDead(_605);
        _598 = const ();
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_599);
        StorageDead(_598);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        _625 = const b"serum_open_orders";
        _624 = &(*_625);
        _623 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _624) -> [return: bb259, unwind: bb321];
    }

    bb259: {
        _622 = &(*_623);
        StorageDead(_624);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        _703 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _628 = &(*_703);
        _627 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _628) -> [return: bb260, unwind: bb321];
    }

    bb260: {
        _626 = &(*_627);
        StorageDead(_628);
        _621 = [move _622, move _626];
        StorageDead(_626);
        StorageDead(_622);
        _620 = &_621;
        _619 = &(*_620);
        _618 = move _619 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_619);
        StorageLive(_629);
        StorageLive(_630);
        _630 = &_1;
        _704 = deref_copy (*_630);
        _629 = &(*_704);
        _617 = anchor_lang::prelude::Pubkey::find_program_address(move _618, move _629) -> [return: bb261, unwind: bb321];
    }

    bb261: {
        StorageDead(_629);
        StorageDead(_618);
        StorageLive(_615);
        _615 = (_617.0: anchor_lang::prelude::Pubkey);
        StorageLive(_616);
        _616 = (_617.1: u8);
        StorageDead(_630);
        StorageDead(_627);
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_617);
        StorageLive(_631);
        _631 = _616;
        ((*_4).2: u8) = move _631;
        StorageDead(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _636 = &_95;
        _635 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _636) -> [return: bb262, unwind: bb321];
    }

    bb262: {
        _634 = &_635;
        StorageDead(_636);
        StorageLive(_637);
        _637 = &_615;
        _633 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _634, move _637) -> [return: bb263, unwind: bb321];
    }

    bb263: {
        switchInt(move _633) -> [0: bb269, otherwise: bb264];
    }

    bb264: {
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_634);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = ConstraintSeeds;
        _641 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _642) -> [return: bb265, unwind: bb321];
    }

    bb265: {
        StorageDead(_642);
        _640 = anchor_lang::error::Error::with_account_name::<&str>(move _641, const "serum_open_orders") -> [return: bb266, unwind: bb321];
    }

    bb266: {
        _705 = const true;
        StorageDead(_641);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        _645 = &_95;
        _644 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _645) -> [return: bb267, unwind: bb328];
    }

    bb267: {
        StorageDead(_645);
        StorageLive(_646);
        _646 = _615;
        _643 = (move _644, move _646);
        StorageDead(_646);
        StorageDead(_644);
        _705 = const false;
        _639 = anchor_lang::error::Error::with_pubkeys(move _640, move _643) -> [return: bb268, unwind: bb328];
    }

    bb268: {
        StorageDead(_643);
        _705 = const false;
        StorageDead(_640);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _639);
        StorageDead(_639);
        StorageDead(_633);
        StorageDead(_632);
        goto -> bb287;
    }

    bb269: {
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_634);
        _632 = const ();
        StorageDead(_633);
        StorageDead(_632);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = &(_95.6: bool);
        _648 = <&bool as Not>::not(move _649) -> [return: bb270, unwind: bb321];
    }

    bb270: {
        switchInt(move _648) -> [0: bb274, otherwise: bb271];
    }

    bb271: {
        StorageDead(_649);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        _653 = ConstraintMut;
        _652 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _653) -> [return: bb272, unwind: bb321];
    }

    bb272: {
        StorageDead(_653);
        _651 = anchor_lang::error::Error::with_account_name::<&str>(move _652, const "serum_open_orders") -> [return: bb273, unwind: bb321];
    }

    bb273: {
        StorageDead(_652);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _651);
        StorageDead(_651);
        StorageDead(_648);
        StorageDead(_647);
        goto -> bb287;
    }

    bb274: {
        StorageDead(_649);
        _647 = const ();
        StorageDead(_648);
        StorageDead(_647);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        _812 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _658 = &(*_812);
        _657 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _658) -> [return: bb275, unwind: bb321];
    }

    bb275: {
        StorageDead(_658);
        _656 = &((*_657).3: anchor_lang::prelude::Pubkey);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = &_110;
        _661 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _662) -> [return: bb276, unwind: bb321];
    }

    bb276: {
        StorageDead(_662);
        _660 = &_661;
        _659 = &(*_660);
        _655 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _656, move _659) -> [return: bb277, unwind: bb321];
    }

    bb277: {
        switchInt(move _655) -> [0: bb279, otherwise: bb278];
    }

    bb278: {
        StorageDead(_659);
        StorageDead(_656);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_657);
        _654 = const ();
        StorageDead(_655);
        StorageDead(_654);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        _671 = &_140;
        _670 = &(*_671);
        _669 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _670) -> [return: bb282, unwind: bb321];
    }

    bb279: {
        StorageDead(_659);
        StorageDead(_656);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_657);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = ConstraintRaw;
        _665 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _666) -> [return: bb280, unwind: bb321];
    }

    bb280: {
        StorageDead(_666);
        _664 = anchor_lang::error::Error::with_account_name::<&str>(move _665, const "drift_signer") -> [return: bb281, unwind: bb321];
    }

    bb281: {
        StorageDead(_665);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _664);
        StorageDead(_664);
        StorageDead(_655);
        StorageDead(_654);
        goto -> bb287;
    }

    bb282: {
        StorageDead(_670);
        _668 = ((*_669).6: bool);
        switchInt(move _668) -> [0: bb283, otherwise: bb286];
    }

    bb283: {
        StorageDead(_671);
        StorageDead(_669);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        _675 = ConstraintMut;
        _674 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _675) -> [return: bb284, unwind: bb321];
    }

    bb284: {
        StorageDead(_675);
        _673 = anchor_lang::error::Error::with_account_name::<&str>(move _674, const "admin") -> [return: bb285, unwind: bb321];
    }

    bb285: {
        StorageDead(_674);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Err(move _673);
        StorageDead(_673);
        StorageDead(_668);
        StorageDead(_667);
        goto -> bb287;
    }

    bb286: {
        StorageDead(_671);
        StorageDead(_669);
        _667 = const ();
        StorageDead(_668);
        StorageDead(_667);
        StorageLive(_676);
        StorageLive(_677);
        _677 = move _20;
        StorageLive(_678);
        _678 = move _35;
        StorageLive(_679);
        _679 = move _50;
        StorageLive(_680);
        _680 = move _65;
        StorageLive(_681);
        _681 = move _80;
        StorageLive(_682);
        _682 = move _95;
        StorageLive(_683);
        _683 = move _110;
        StorageLive(_684);
        _684 = move _224;
        StorageLive(_685);
        _685 = move _140;
        StorageLive(_686);
        _686 = move _155;
        StorageLive(_687);
        _687 = move _170;
        _676 = admin::InitializeSerumFulfillmentConfig::<'_> { base_spot_market: move _677, quote_spot_market: move _678, state: move _679, serum_program: move _680, serum_market: move _681, serum_open_orders: move _682, drift_signer: move _683, serum_fulfillment_config: move _684, admin: move _685, rent: move _686, system_program: move _687 };
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_685);
        StorageDead(_684);
        StorageDead(_683);
        StorageDead(_682);
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_677);
        _0 = std::result::Result::<admin::InitializeSerumFulfillmentConfig<'_>, anchor_lang::error::Error>::Ok(move _676);
        StorageDead(_676);
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_524);
        StorageDead(_523);
        StorageDead(_224);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_185);
        StorageDead(_170);
        StorageDead(_155);
        StorageDead(_140);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb314;
    }

    bb287: {
        StorageDead(_616);
        StorageDead(_615);
        goto -> bb288;
    }

    bb288: {
        StorageDead(_557);
        StorageDead(_556);
        goto -> bb289;
    }

    bb289: {
        StorageDead(_524);
        StorageDead(_523);
        goto -> bb299;
    }

    bb290: {
        StorageDead(_512);
        _708 = const false;
        StorageDead(_509);
        drop(_506) -> [return: bb291, unwind: bb321];
    }

    bb291: {
        StorageDead(_506);
        goto -> bb292;
    }

    bb292: {
        StorageDead(_502);
        StorageDead(_501);
        goto -> bb299;
    }

    bb293: {
        StorageDead(_452);
        StorageDead(_451);
        goto -> bb298;
    }

    bb294: {
        StorageDead(_352);
        _713 = const false;
        StorageDead(_349);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_321);
        goto -> bb296;
    }

    bb296: {
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_237);
        goto -> bb297;
    }

    bb297: {
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb298;
    }

    bb298: {
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_225);
        goto -> bb299;
    }

    bb299: {
        StorageDead(_224);
        goto -> bb300;
    }

    bb300: {
        StorageDead(_194);
        StorageDead(_193);
        goto -> bb301;
    }

    bb301: {
        StorageDead(_185);
        goto -> bb302;
    }

    bb302: {
        StorageDead(_170);
        goto -> bb303;
    }

    bb303: {
        StorageDead(_155);
        goto -> bb304;
    }

    bb304: {
        StorageDead(_140);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb305;
    }

    bb305: {
        drop(_110) -> [return: bb306, unwind: bb322];
    }

    bb306: {
        StorageDead(_110);
        drop(_95) -> [return: bb307, unwind: bb323];
    }

    bb307: {
        StorageDead(_95);
        drop(_80) -> [return: bb308, unwind: bb324];
    }

    bb308: {
        StorageDead(_80);
        drop(_65) -> [return: bb309, unwind: bb325];
    }

    bb309: {
        StorageDead(_65);
        drop(_50) -> [return: bb310, unwind: bb326];
    }

    bb310: {
        StorageDead(_50);
        goto -> bb311;
    }

    bb311: {
        StorageDead(_35);
        goto -> bb312;
    }

    bb312: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb313;
    }

    bb313: {
        StorageDead(_6);
        goto -> bb314;
    }

    bb314: {
        return;
    }

    bb315 (cleanup): {
        drop(_512) -> [return: bb316, unwind terminate(cleanup)];
    }

    bb316 (cleanup): {
        drop(_506) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb317 (cleanup): {
        drop(_485) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb318 (cleanup): {
        drop(_331) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb319 (cleanup): {
        drop(_304) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb320 (cleanup): {
        drop(_247) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb321 (cleanup): {
        drop(_110) -> [return: bb322, unwind terminate(cleanup)];
    }

    bb322 (cleanup): {
        drop(_95) -> [return: bb323, unwind terminate(cleanup)];
    }

    bb323 (cleanup): {
        drop(_80) -> [return: bb324, unwind terminate(cleanup)];
    }

    bb324 (cleanup): {
        drop(_65) -> [return: bb325, unwind terminate(cleanup)];
    }

    bb325 (cleanup): {
        drop(_50) -> [return: bb326, unwind terminate(cleanup)];
    }

    bb326 (cleanup): {
        resume;
    }

    bb327 (cleanup): {
        drop(_640) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb328 (cleanup): {
        switchInt(_705) -> [0: bb321, otherwise: bb327];
    }

    bb329 (cleanup): {
        drop(_581) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb330 (cleanup): {
        switchInt(_706) -> [0: bb321, otherwise: bb329];
    }

    bb331 (cleanup): {
        drop(_549) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb332 (cleanup): {
        switchInt(_707) -> [0: bb321, otherwise: bb331];
    }

    bb333 (cleanup): {
        _793 = discriminant(_509);
        goto -> bb315;
    }

    bb334 (cleanup): {
        drop(_460) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb335 (cleanup): {
        switchInt(_709) -> [0: bb321, otherwise: bb334];
    }

    bb336 (cleanup): {
        _794 = discriminant(_442);
        goto -> bb321;
    }

    bb337 (cleanup): {
        _795 = discriminant(_432);
        goto -> bb321;
    }

    bb338 (cleanup): {
        _796 = discriminant(_399);
        goto -> bb342;
    }

    bb339 (cleanup): {
        drop(_402) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        switchInt(_710) -> [0: bb342, otherwise: bb339];
    }

    bb341 (cleanup): {
        drop(_391) -> [return: bb347, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        switchInt(_711) -> [0: bb347, otherwise: bb341];
    }

    bb343 (cleanup): {
        _797 = discriminant(_357);
        goto -> bb347;
    }

    bb344 (cleanup): {
        drop(_360) -> [return: bb347, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        switchInt(_712) -> [0: bb347, otherwise: bb344];
    }

    bb346 (cleanup): {
        drop(_349) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb347 (cleanup): {
        switchInt(_713) -> [0: bb321, otherwise: bb346];
    }

    bb348 (cleanup): {
        _798 = discriminant(_340);
        goto -> bb350;
    }

    bb349 (cleanup): {
        drop(_330) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb350 (cleanup): {
        switchInt(_714) -> [0: bb321, otherwise: bb349];
    }

    bb351 (cleanup): {
        drop(_302) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb352 (cleanup): {
        switchInt(_715) -> [0: bb321, otherwise: bb351];
    }

    bb353 (cleanup): {
        _799 = discriminant(_256);
        goto -> bb357;
    }

    bb354 (cleanup): {
        drop(_259) -> [return: bb357, unwind terminate(cleanup)];
    }

    bb355 (cleanup): {
        switchInt(_716) -> [0: bb357, otherwise: bb354];
    }

    bb356 (cleanup): {
        drop(_246) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb357 (cleanup): {
        switchInt(_717) -> [0: bb321, otherwise: bb356];
    }

    bb358 (cleanup): {
        drop(_217) -> [return: bb321, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        switchInt(_718) -> [0: bb321, otherwise: bb358];
    }

    bb360 (cleanup): {
        _800 = discriminant(_186);
        goto -> bb321;
    }

    bb361 (cleanup): {
        _801 = discriminant(_171);
        goto -> bb321;
    }

    bb362 (cleanup): {
        _802 = discriminant(_156);
        goto -> bb321;
    }

    bb363 (cleanup): {
        _803 = discriminant(_141);
        goto -> bb321;
    }

    bb364 (cleanup): {
        _804 = discriminant(_111);
        goto -> bb322;
    }

    bb365 (cleanup): {
        _805 = discriminant(_96);
        goto -> bb323;
    }

    bb366 (cleanup): {
        _806 = discriminant(_81);
        goto -> bb324;
    }

    bb367 (cleanup): {
        _807 = discriminant(_66);
        goto -> bb325;
    }

    bb368 (cleanup): {
        _808 = discriminant(_51);
        goto -> bb326;
    }

    bb369 (cleanup): {
        _809 = discriminant(_36);
        goto -> bb326;
    }

    bb370 (cleanup): {
        _810 = discriminant(_21);
        goto -> bb326;
    }
}

alloc197 (size: 17, align: 1) {
    0x00 │ 73 65 72 75 6d 5f 6f 70 65 6e 5f 6f 72 64 65 72 │ serum_open_order
    0x10 │ 73                                              │ s
}

alloc196 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc195 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc194 (size: 24, align: 1) {
    0x00 │ 73 65 72 75 6d 5f 66 75 6c 66 69 6c 6c 6d 65 6e │ serum_fulfillmen
    0x10 │ 74 5f 63 6f 6e 66 69 67                         │ t_config
}

alloc193 (size: 24, align: 1) {
    0x00 │ 73 65 72 75 6d 5f 66 75 6c 66 69 6c 6c 6d 65 6e │ serum_fulfillmen
    0x10 │ 74 5f 63 6f 6e 66 69 67                         │ t_config
}

alloc192 (size: 24, align: 1) {
    0x00 │ 73 65 72 75 6d 5f 66 75 6c 66 69 6c 6c 6d 65 6e │ serum_fulfillmen
    0x10 │ 74 5f 63 6f 6e 66 69 67                         │ t_config
}

alloc191 (size: 24, align: 1) {
    0x00 │ 73 65 72 75 6d 5f 66 75 6c 66 69 6c 6c 6d 65 6e │ serum_fulfillmen
    0x10 │ 74 5f 63 6f 6e 66 69 67                         │ t_config
}
