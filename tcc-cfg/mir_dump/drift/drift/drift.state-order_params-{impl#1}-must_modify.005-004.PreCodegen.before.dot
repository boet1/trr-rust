digraph Mir_0_3652 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_params::ModifyOrderParams::must_modify(_1: &amp;ReErased state::order_params::ModifyOrderParams) -&gt; bool<br align="left"/>let mut _2: u8;<br align="left"/>let mut _3: u8;<br align="left"/>let mut _4: std::option::Option&lt;u8&gt;;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: isize;<br align="left"/>let mut _7: (isize, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_3652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = ((*_1).13: std::option::Option&lt;u8&gt;)<br/></td></tr><tr><td align="left">_3 = Option::&lt;u8&gt;::unwrap_or(move _4, const 0_u8)</td></tr></table>>];
    bb1__0_3652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_7 = CheckedAdd(const _, const 0_isize)<br/></td></tr><tr><td align="left">assert(!move (_7.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_isize)</td></tr></table>>];
    bb2__0_3652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_6 = move (_7.0: isize)<br/>_5 = move _6 as u8 (IntToInt)<br/>StorageDead(_6)<br/>_2 = BitAnd(move _3, move _5)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/>_0 = Ne(move _2, const 0_u8)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3652 -> bb1__0_3652 [label="return"];
    bb1__0_3652 -> bb2__0_3652 [label="success"];
}
