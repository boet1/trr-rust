// MIR for `state::events::<impl at programs/drift/src/state/events.rs:505:46: 505:51>::clone` after PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:505:46: 505:51>::clone(_1: &SpotBankruptcyRecord) -> SpotBankruptcyRecord {
    debug self => _1;
    let mut _0: state::events::SpotBankruptcyRecord;
    let mut _2: u16;
    let mut _3: &u16;
    let _4: &u16;
    let mut _5: u128;
    let mut _6: &u128;
    let _7: &u128;
    let mut _8: u128;
    let mut _9: &u128;
    let _10: &u128;
    let mut _11: u128;
    let mut _12: &u128;
    let _13: &u128;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: u16);
        _3 = &(*_4);
        _2 = <u16 as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: u128);
        _6 = &(*_7);
        _5 = <u128 as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: u128);
        _9 = &(*_10);
        _8 = <u128 as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: u128);
        _12 = &(*_13);
        _11 = <u128 as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _0 = SpotBankruptcyRecord { market_index: move _2, borrow_amount: move _5, if_payment: move _8, cumulative_deposit_interest_delta: move _11 };
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
