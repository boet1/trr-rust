// MIR for `get_liquidation_order_params` before PreCodegen

fn get_liquidation_order_params(_1: u16, _2: controller::position::PositionDirection, _3: u64, _4: i64, _5: u32) -> std::result::Result<order_params::OrderParams, error::ErrorCode> {
    debug market_index => _1;
    debug existing_direction => _2;
    debug base_asset_amount => _3;
    debug oracle_price => _4;
    debug liquidation_fee => _5;
    let mut _0: std::result::Result<state::order_params::OrderParams, error::ErrorCode>;
    let _6: controller::position::PositionDirection;
    let mut _7: &controller::position::PositionDirection;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: i64;
    let mut _12: i64;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _21: std::result::Result<u64, error::ErrorCode>;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _31: std::result::Result<u128, error::ErrorCode>;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _35: std::result::Result<u128, error::ErrorCode>;
    let mut _36: u32;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _63: std::result::Result<u64, error::ErrorCode>;
    let mut _64: u128;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _66: std::result::Result<u128, error::ErrorCode>;
    let mut _67: u128;
    let mut _68: u128;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _70: std::result::Result<u128, error::ErrorCode>;
    let mut _71: u128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _73: std::result::Result<u128, error::ErrorCode>;
    let mut _74: u128;
    let mut _75: u128;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _77: std::result::Result<u128, error::ErrorCode>;
    let mut _78: u32;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: u16;
    let mut _106: controller::position::PositionDirection;
    let mut _107: u64;
    let mut _108: state::user::OrderType;
    let mut _109: state::user::MarketType;
    let mut _110: u64;
    let mut _111: state::order_params::OrderParams;
    let mut _112: state::order_params::OrderParams;
    scope 1 {
        debug direction => _6;
        let _8: u128;
        let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _17: u128;
        scope 2 {
            debug oracle_price_u128 => _8;
            let _18: u64;
            let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _41: u128;
            let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _46: u128;
            let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _51: u128;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: u128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u64;
            let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _83: u128;
            let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _88: u128;
            let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _93: u128;
            let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _98: u128;
            let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _103: u64;
            scope 7 {
                debug limit_price => _18;
                let _104: state::order_params::OrderParams;
                scope 48 {
                    debug order_params => _104;
                }
            }
            scope 8 {
                debug residual => _38;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _41;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _43;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _46;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _48;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _51;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _53;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _56;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _58;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _61;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _80;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _83;
                scope 31 {
                }
            }
            scope 32 {
                debug residual => _85;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _88;
                scope 35 {
                }
            }
            scope 36 {
                debug residual => _90;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _93;
                scope 39 {
                }
            }
            scope 40 {
                debug residual => _95;
                scope 41 {
                }
            }
            scope 42 {
                debug val => _98;
                scope 43 {
                }
            }
            scope 44 {
                debug residual => _100;
                scope 45 {
                }
            }
            scope 46 {
                debug val => _103;
                scope 47 {
                }
            }
        }
        scope 3 {
            debug residual => _14;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _17;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        _6 = controller::position::PositionDirection::opposite(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _4;
        _11 = core::num::<impl i64>::abs(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _10 = <i64 as Cast>::cast::<u128>(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: u128);
        _8 = _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageLive(_18);
        _19 = discriminant(_6);
        switchInt(move _19) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb72;
    }

    bb9: {
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _8;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _8;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _5;
        _77 = <u32 as Cast>::cast::<u128>(move _78) -> [return: bb36, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _8;
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _8;
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _5;
        _35 = <u32 as Cast>::cast::<u128>(move _36) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_36);
        _34 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: u128);
        _33 = _41;
        StorageDead(_41);
        _31 = <u128 as SafeMath>::safe_mul(move _32, move _33) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb67;
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        _42 = discriminant(_30);
        switchInt(move _42) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_46);
        _46 = ((_30 as Continue).0: u128);
        _29 = _46;
        StorageDead(_46);
        _28 = <u128 as SafeMath>::safe_div(move _29, const _) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb67;
    }

    bb21: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_28);
        _47 = discriminant(_27);
        switchInt(move _47) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_51);
        _51 = ((_27 as Continue).0: u128);
        _26 = _51;
        StorageDead(_51);
        _24 = <u128 as SafeMath>::safe_add(move _25, move _26) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_48);
        _48 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb68;
    }

    bb26: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_24);
        _52 = discriminant(_23);
        switchInt(move _52) -> [0: bb28, 1: bb29, otherwise: bb6];
    }

    bb28: {
        StorageLive(_56);
        _56 = ((_23 as Continue).0: u128);
        _22 = _56;
        StorageDead(_56);
        _21 = <u128 as Cast>::cast::<u64>(move _22) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_53);
        _53 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb69;
    }

    bb31: {
        StorageDead(_22);
        _20 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _21) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_21);
        _57 = discriminant(_20);
        switchInt(move _57) -> [0: bb33, 1: bb34, otherwise: bb6];
    }

    bb33: {
        StorageLive(_61);
        _61 = ((_20 as Continue).0: u64);
        _18 = _61;
        StorageDead(_61);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb61;
    }

    bb34: {
        StorageLive(_58);
        _58 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb70;
    }

    bb36: {
        StorageDead(_78);
        _76 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _77) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb38, 1: bb39, otherwise: bb6];
    }

    bb38: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u128);
        _75 = _83;
        StorageDead(_83);
        _73 = <u128 as SafeMath>::safe_mul(move _74, move _75) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_80);
        _80 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb63;
    }

    bb41: {
        StorageDead(_75);
        StorageDead(_74);
        _72 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_73);
        _84 = discriminant(_72);
        switchInt(move _84) -> [0: bb43, 1: bb44, otherwise: bb6];
    }

    bb43: {
        StorageLive(_88);
        _88 = ((_72 as Continue).0: u128);
        _71 = _88;
        StorageDead(_88);
        _70 = <u128 as SafeMath>::safe_div(move _71, const _) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_85);
        _85 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_87);
        StorageDead(_85);
        goto -> bb63;
    }

    bb46: {
        StorageDead(_71);
        _69 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _70) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_70);
        _89 = discriminant(_69);
        switchInt(move _89) -> [0: bb48, 1: bb49, otherwise: bb6];
    }

    bb48: {
        StorageLive(_93);
        _93 = ((_69 as Continue).0: u128);
        _68 = _93;
        StorageDead(_93);
        _66 = <u128 as SafeMath>::safe_sub(move _67, move _68) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_90);
        _90 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_92);
        StorageDead(_90);
        goto -> bb64;
    }

    bb51: {
        StorageDead(_68);
        StorageDead(_67);
        _65 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _66) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_66);
        _94 = discriminant(_65);
        switchInt(move _94) -> [0: bb53, 1: bb54, otherwise: bb6];
    }

    bb53: {
        StorageLive(_98);
        _98 = ((_65 as Continue).0: u128);
        _64 = _98;
        StorageDead(_98);
        _63 = <u128 as Cast>::cast::<u64>(move _64) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_95);
        _95 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_97);
        StorageDead(_95);
        goto -> bb65;
    }

    bb56: {
        StorageDead(_64);
        _62 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _63) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_63);
        _99 = discriminant(_62);
        switchInt(move _99) -> [0: bb58, 1: bb59, otherwise: bb6];
    }

    bb58: {
        StorageLive(_103);
        _103 = ((_62 as Continue).0: u64);
        _18 = _103;
        StorageDead(_103);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_62);
        goto -> bb61;
    }

    bb59: {
        StorageLive(_100);
        _100 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb66;
    }

    bb61: {
        StorageLive(_104);
        StorageLive(_105);
        _105 = _1;
        StorageLive(_106);
        _106 = _6;
        StorageLive(_107);
        _107 = _18;
        StorageLive(_108);
        _108 = state::user::OrderType::Limit;
        StorageLive(_109);
        _109 = state::user::MarketType::Perp;
        StorageLive(_110);
        _110 = _3;
        StorageLive(_111);
        _111 = <order_params::OrderParams as Default>::default() -> [return: bb62, unwind continue];
    }

    bb62: {
        _104 = order_params::OrderParams { order_type: move _108, market_type: move _109, direction: move _106, user_order_id: (_111.3: u8), base_asset_amount: move _110, price: move _107, market_index: move _105, reduce_only: const true, post_only: (_111.8: state::order_params::PostOnlyParam), bit_flags: (_111.9: u8), max_ts: (_111.10: std::option::Option<i64>), trigger_price: (_111.11: std::option::Option<u64>), trigger_condition: (_111.12: state::user::OrderTriggerCondition), oracle_price_offset: (_111.13: std::option::Option<i32>), auction_duration: (_111.14: std::option::Option<u8>), auction_start_price: (_111.15: std::option::Option<i64>), auction_end_price: (_111.16: std::option::Option<i64>) };
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_111);
        StorageLive(_112);
        _112 = _104;
        _0 = std::result::Result::<order_params::OrderParams, error::ErrorCode>::Ok(move _112);
        StorageDead(_112);
        StorageDead(_104);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb73;
    }

    bb63: {
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_62);
        goto -> bb71;
    }

    bb67: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_18);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb73;
    }

    bb73: {
        return;
    }
}
