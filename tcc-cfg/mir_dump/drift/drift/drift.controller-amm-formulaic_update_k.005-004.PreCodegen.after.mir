// MIR for `formulaic_update_k` after PreCodegen

fn formulaic_update_k(_1: &mut PerpMarket, _2: &OraclePriceData, _3: i128, _4: i64) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    debug _oracle_price_data => _2;
    debug funding_imbalance_cost => _3;
    debug now => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _11: std::result::Result<i64, error::ErrorCode>;
    let mut _12: i128;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: bool;
    let mut _20: i64;
    let mut _21: bool;
    let mut _22: u32;
    let mut _23: u32;
    let mut _24: u32;
    let mut _25: u32;
    let mut _26: i64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _28: std::result::Result<i64, error::ErrorCode>;
    let mut _29: i64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: bool;
    let mut _36: i64;
    let mut _37: i64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _39: std::result::Result<i64, error::ErrorCode>;
    let mut _40: i64;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _42: std::result::Result<i64, error::ErrorCode>;
    let mut _43: i64;
    let mut _44: i64;
    let mut _45: i64;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: ();
    let mut _57: bool;
    let mut _58: i64;
    let mut _59: bool;
    let mut _60: u128;
    let mut _61: bool;
    let mut _62: i64;
    let mut _63: bool;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _65: std::result::Result<bool, error::ErrorCode>;
    let mut _66: &state::perp_market::AMM;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: i128;
    let mut _74: i128;
    let mut _75: i128;
    let mut _76: u8;
    let mut _77: (i128, bool);
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: (i128, bool);
    let mut _84: i128;
    let mut _85: i128;
    let mut _86: i128;
    let mut _87: u8;
    let mut _88: (i128, bool);
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: (i128, bool);
    let mut _96: (u128, u128);
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _98: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _99: &mut state::perp_market::PerpMarket;
    let mut _100: i128;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _102: std::result::Result<i128, error::ErrorCode>;
    let mut _103: i64;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: i128;
    let mut _110: i128;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _118: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _119: math::bn::U192;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _121: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _122: math::bn::U192;
    let mut _123: u128;
    let mut _124: math::bn::U192;
    let mut _125: u128;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: math::bn::U192;
    let mut _132: u128;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::cp_curve::UpdateKResult>;
    let mut _140: std::result::Result<math::cp_curve::UpdateKResult, error::ErrorCode>;
    let mut _141: &state::perp_market::PerpMarket;
    let mut _142: math::bn::U192;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _150: std::result::Result<i128, error::ErrorCode>;
    let mut _151: &mut state::perp_market::PerpMarket;
    let mut _152: &math::cp_curve::UpdateKResult;
    let _153: &math::cp_curve::UpdateKResult;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _161: std::result::Result<bool, error::ErrorCode>;
    let mut _162: &mut state::perp_market::PerpMarket;
    let mut _163: i128;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: bool;
    let _170: ();
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _172: std::result::Result<(), error::ErrorCode>;
    let mut _173: &mut state::perp_market::PerpMarket;
    let mut _174: &math::cp_curve::UpdateKResult;
    let _175: &math::cp_curve::UpdateKResult;
    let mut _176: isize;
    let mut _178: !;
    let mut _179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _185: ();
    let _186: ();
    let mut _187: &[&[u8]];
    let mut _188: &[&[u8]; 1];
    let _189: &[&[u8]; 1];
    let _190: [&[u8]; 1];
    let mut _191: &[u8];
    let _192: &[u8];
    let mut _193: &std::vec::Vec<u8>;
    let _194: &std::vec::Vec<u8>;
    let _195: std::vec::Vec<u8>;
    let mut _196: &state::events::CurveRecord;
    let _197: &state::events::CurveRecord;
    let _198: state::events::CurveRecord;
    let mut _199: i64;
    let mut _200: u64;
    let mut _202: u64;
    let mut _203: std::option::Option<u64>;
    let mut _204: std::option::Option<u64>;
    let mut _205: u64;
    let mut _206: std::option::Option<u64>;
    let mut _207: u16;
    let mut _208: u128;
    let mut _209: u128;
    let mut _210: u128;
    let mut _211: u128;
    let mut _212: u128;
    let mut _213: u128;
    let mut _214: u128;
    let mut _215: u128;
    let mut _216: u128;
    let mut _217: i128;
    let mut _218: u128;
    let mut _219: i128;
    let mut _220: i128;
    let mut _221: u32;
    let mut _222: i128;
    let mut _223: i128;
    let mut _224: i128;
    let mut _225: i64;
    let mut _226: u128;
    let mut _227: u64;
    let mut _228: ();
    scope 1 {
        debug peg_multiplier_before => _5;
        let _6: u128;
        scope 2 {
            debug base_asset_reserve_before => _6;
            let _7: u128;
            scope 3 {
                debug quote_asset_reserve_before => _7;
                let _8: u128;
                scope 4 {
                    debug sqrt_k_before => _8;
                    let _9: i64;
                    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _17: i64;
                    scope 5 {
                        debug funding_imbalance_cost_i64 => _9;
                        let _18: i64;
                        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _34: i64;
                        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _50: i64;
                        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _55: i64;
                        scope 10 {
                            debug budget => _18;
                            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _71: bool;
                            let _72: i128;
                            scope 23 {
                                debug residual => _68;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug val => _71;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug k_pct_upper_bound => _72;
                                let _83: i128;
                                scope 28 {
                                    debug k_pct_lower_bound => _83;
                                    let _94: u128;
                                    let _95: u128;
                                    let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _108: i128;
                                    let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _115: (u128, u128);
                                    scope 29 {
                                        debug k_scale_numerator => _94;
                                        debug k_scale_denominator => _95;
                                        let _116: math::bn::U192;
                                        let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _130: math::bn::U192;
                                        let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _137: math::bn::U192;
                                        scope 38 {
                                            debug new_sqrt_k => _116;
                                            let _138: math::cp_curve::UpdateKResult;
                                            let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _147: math::cp_curve::UpdateKResult;
                                            scope 47 {
                                                debug update_k_result => _138;
                                                let _148: i128;
                                                let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _158: i128;
                                                scope 52 {
                                                    debug adjustment_cost => _148;
                                                    let _159: bool;
                                                    let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _168: bool;
                                                    scope 57 {
                                                        debug cost_applied => _159;
                                                        let _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _180: ();
                                                        let _181: u128;
                                                        scope 62 {
                                                            debug residual => _177;
                                                            scope 63 {
                                                            }
                                                        }
                                                        scope 64 {
                                                            debug val => _180;
                                                            scope 65 {
                                                            }
                                                        }
                                                        scope 66 {
                                                            debug peg_multiplier_after => _181;
                                                            let _182: u128;
                                                            scope 67 {
                                                                debug base_asset_reserve_after => _182;
                                                                let _183: u128;
                                                                scope 68 {
                                                                    debug quote_asset_reserve_after => _183;
                                                                    let _184: u128;
                                                                    scope 69 {
                                                                        debug sqrt_k_after => _184;
                                                                        let _201: u64;
                                                                        scope 70 {
                                                                            debug current_id => _201;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug residual => _165;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug val => _168;
                                                        scope 61 {
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug residual => _155;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug val => _158;
                                                    scope 56 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _144;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _147;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _127;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _130;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _134;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _137;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _105;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _108;
                                        scope 33 {
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _112;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _115;
                                        scope 37 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _31;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _34;
                            scope 14 {
                            }
                        }
                        scope 15 {
                            debug residual => _47;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _50;
                            scope 18 {
                            }
                        }
                        scope 19 {
                            debug residual => _52;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _55;
                            scope 22 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _14;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _17;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_6);
        _6 = (((*_1).1: state::perp_market::AMM).5: u128);
        StorageLive(_7);
        _7 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_8);
        _8 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _3;
        _11 = <i128 as Cast>::cast::<i64>(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _10 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_10 as Continue).0: i64);
        _9 = _17;
        StorageDead(_17);
        StorageDead(_10);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _9;
        _19 = Lt(move _20, const 0_i64);
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb124;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = (((*_1).1: state::perp_market::AMM).65: u32);
        StorageLive(_24);
        _24 = (((*_1).1: state::perp_market::AMM).66: u32);
        _22 = std::cmp::max::<u32>(move _23, move _24) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_35);
        StorageLive(_36);
        _36 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_37);
        _37 = _9;
        _35 = Lt(move _36, move _37);
        switchInt(move _35) -> [0: bb20, otherwise: bb19];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_25);
        _25 = (((*_1).1: state::perp_market::AMM).63: u32);
        _21 = Le(move _22, move _25);
        switchInt(move _21) -> [0: bb17, otherwise: bb10];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _9;
        _28 = <i64 as SafeMath>::safe_div(move _29, const 2_i64) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _27 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: i64);
        _26 = _34;
        StorageDead(_34);
        _18 = core::num::<impl i64>::abs(move _26) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_27);
        StorageDead(_21);
        goto -> bb122;
    }

    bb16: {
        StorageDead(_26);
        StorageDead(_27);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_25);
        StorageDead(_22);
        _18 = const 0_i64;
        goto -> bb18;
    }

    bb18: {
        StorageDead(_21);
        goto -> bb33;
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = (((*_1).1: state::perp_market::AMM).49: i64);
        _43 = std::cmp::max::<i64>(const 0_i64, move _44) -> [return: bb21, unwind continue];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_36);
        _18 = const 0_i64;
        goto -> bb32;
    }

    bb21: {
        StorageDead(_44);
        StorageLive(_45);
        _45 = _9;
        _42 = <i64 as SafeMath>::safe_sub(move _43, move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        _41 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _42) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_42);
        _46 = discriminant(_41);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_41 as Continue).0: i64);
        _40 = _50;
        StorageDead(_50);
        _39 = <i64 as SafeMath>::safe_div(move _40, const 2_i64) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb121;
    }

    bb27: {
        StorageDead(_40);
        _38 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_39);
        _51 = discriminant(_38);
        switchInt(move _51) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_55);
        _55 = ((_38 as Continue).0: i64);
        _18 = _55;
        StorageDead(_55);
        StorageDead(_41);
        StorageDead(_38);
        goto -> bb32;
    }

    bb30: {
        StorageLive(_52);
        _52 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_54);
        StorageDead(_52);
        goto -> bb121;
    }

    bb32: {
        StorageDead(_35);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_19);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _18;
        _57 = Gt(move _58, const 0_i64);
        switchInt(move _57) -> [0: bb37, otherwise: bb34];
    }

    bb34: {
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = (((*_1).1: state::perp_market::AMM).10: u128);
        _59 = Lt(move _60, const _);
        switchInt(move _59) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_60);
        goto -> bb45;
    }

    bb36: {
        StorageDead(_60);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_58);
        goto -> bb38;
    }

    bb38: {
        StorageLive(_61);
        StorageLive(_62);
        _62 = _18;
        _61 = Lt(move _62, const 0_i64);
        switchInt(move _61) -> [0: bb110, otherwise: bb39];
    }

    bb39: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &((*_1).1: state::perp_market::AMM);
        _65 = AMM::can_lower_k(move _66) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_66);
        _64 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _65) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_71);
        _71 = ((_64 as Continue).0: bool);
        _63 = _71;
        StorageDead(_71);
        switchInt(move _63) -> [0: bb46, otherwise: bb45];
    }

    bb43: {
        StorageLive(_68);
        _68 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_64);
        goto -> bb120;
    }

    bb45: {
        StorageDead(_64);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = (((*_1).1: state::perp_market::AMM).70: u8);
        _75 = move _76 as i128 (IntToInt);
        StorageDead(_76);
        _77 = CheckedMul(const _, _75);
        assert(!move (_77.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, move _75) -> [success: bb47, unwind continue];
    }

    bb46: {
        StorageDead(_64);
        goto -> bb111;
    }

    bb47: {
        _74 = move (_77.0: i128);
        StorageDead(_75);
        _78 = Eq(const 100_i128, const 0_i128);
        assert(!move _78, "attempt to divide `{}` by zero", _74) -> [success: bb48, unwind continue];
    }

    bb48: {
        _79 = Eq(const 100_i128, const -1_i128);
        _80 = Eq(_74, const i128::MIN);
        _81 = BitAnd(move _79, move _80);
        assert(!move _81, "attempt to compute `{} / {}`, which would overflow", _74, const 100_i128) -> [success: bb49, unwind continue];
    }

    bb49: {
        _73 = Div(move _74, const 100_i128);
        StorageDead(_74);
        _82 = CheckedAdd(const _, _73);
        assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, move _73) -> [success: bb50, unwind continue];
    }

    bb50: {
        _72 = move (_82.0: i128);
        StorageDead(_73);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = (((*_1).1: state::perp_market::AMM).70: u8);
        _86 = move _87 as i128 (IntToInt);
        StorageDead(_87);
        _88 = CheckedMul(const _, _86);
        assert(!move (_88.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, move _86) -> [success: bb51, unwind continue];
    }

    bb51: {
        _85 = move (_88.0: i128);
        StorageDead(_86);
        _89 = Eq(const 100_i128, const 0_i128);
        assert(!move _89, "attempt to divide `{}` by zero", _85) -> [success: bb52, unwind continue];
    }

    bb52: {
        _90 = Eq(const 100_i128, const -1_i128);
        _91 = Eq(_85, const i128::MIN);
        _92 = BitAnd(move _90, move _91);
        assert(!move _92, "attempt to compute `{} / {}`, which would overflow", _85, const 100_i128) -> [success: bb53, unwind continue];
    }

    bb53: {
        _84 = Div(move _85, const 100_i128);
        StorageDead(_85);
        _93 = CheckedSub(const _, _84);
        assert(!move (_93.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _84) -> [success: bb54, unwind continue];
    }

    bb54: {
        _83 = move (_93.0: i128);
        StorageDead(_84);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &mut (*_1);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _18;
        _102 = <i64 as Cast>::cast::<i128>(move _103) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_103);
        _101 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _102) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_102);
        _104 = discriminant(_101);
        switchInt(move _104) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_108);
        _108 = ((_101 as Continue).0: i128);
        _100 = _108;
        StorageDead(_108);
        StorageLive(_109);
        _109 = _72;
        StorageLive(_110);
        _110 = _83;
        _98 = calculate_budgeted_k_scale(move _99, move _100, move _109, move _110) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_105);
        _105 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb118;
    }

    bb60: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_100);
        StorageDead(_99);
        _97 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _98) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_98);
        _111 = discriminant(_97);
        switchInt(move _111) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_115);
        _115 = ((_97 as Continue).0: (u128, u128));
        _96 = _115;
        StorageDead(_115);
        StorageLive(_94);
        _94 = (_96.0: u128);
        StorageLive(_95);
        _95 = (_96.1: u128);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = (((*_1).1: state::perp_market::AMM).10: u128);
        _122 = <U192 as From<u128>>::from(move _123) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_112);
        _112 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_114);
        StorageDead(_112);
        goto -> bb118;
    }

    bb65: {
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _94;
        _124 = <U192 as From<u128>>::from(move _125) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_125);
        _121 = <U192 as SafeMath>::safe_mul(move _122, move _124) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_124);
        StorageDead(_122);
        _120 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _121) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_121);
        _126 = discriminant(_120);
        switchInt(move _126) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_130);
        _130 = ((_120 as Continue).0: math::bn::U192);
        _119 = _130;
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _95;
        _131 = <U192 as From<u128>>::from(move _132) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_127);
        _127 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb116;
    }

    bb72: {
        StorageDead(_132);
        _118 = <U192 as SafeMath>::safe_div(move _119, move _131) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_131);
        StorageDead(_119);
        _117 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _118) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_118);
        _133 = discriminant(_117);
        switchInt(move _133) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_137);
        _137 = ((_117 as Continue).0: math::bn::U192);
        _116 = _137;
        StorageDead(_137);
        StorageDead(_120);
        StorageDead(_117);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &(*_1);
        StorageLive(_142);
        _142 = _116;
        _140 = get_update_k_result(move _141, move _142, const true) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_134);
        _134 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_136);
        StorageDead(_134);
        goto -> bb116;
    }

    bb78: {
        StorageDead(_142);
        StorageDead(_141);
        _139 = <std::result::Result<UpdateKResult, error::ErrorCode> as Try>::branch(move _140) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_140);
        _143 = discriminant(_139);
        switchInt(move _143) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_147);
        _147 = move ((_139 as Continue).0: math::cp_curve::UpdateKResult);
        _138 = move _147;
        StorageDead(_147);
        StorageDead(_139);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &mut (*_1);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_138;
        _152 = &(*_153);
        _150 = adjust_k_cost(move _151, move _152) -> [return: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_144);
        _144 = ((_139 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_139);
        goto -> bb115;
    }

    bb83: {
        StorageDead(_152);
        StorageDead(_151);
        _149 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _150) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_150);
        _154 = discriminant(_149);
        switchInt(move _154) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_158);
        _158 = ((_149 as Continue).0: i128);
        _148 = _158;
        StorageDead(_158);
        StorageDead(_153);
        StorageDead(_149);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &mut (*_1);
        StorageLive(_163);
        _163 = _148;
        _161 = apply_cost_to_market(move _162, move _163, const true) -> [return: bb88, unwind continue];
    }

    bb86: {
        StorageLive(_155);
        _155 = ((_149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_149);
        goto -> bb114;
    }

    bb88: {
        StorageDead(_163);
        StorageDead(_162);
        _160 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _161) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_161);
        _164 = discriminant(_160);
        switchInt(move _164) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_168);
        _168 = ((_160 as Continue).0: bool);
        _159 = _168;
        StorageDead(_168);
        StorageDead(_160);
        StorageLive(_169);
        _169 = _159;
        switchInt(move _169) -> [0: bb94, otherwise: bb93];
    }

    bb91: {
        StorageLive(_165);
        _165 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_160);
        goto -> bb113;
    }

    bb93: {
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &mut (*_1);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &_138;
        _174 = &(*_175);
        _172 = cp_curve::update_k(move _173, move _174) -> [return: bb95, unwind continue];
    }

    bb94: {
        _56 = const ();
        goto -> bb109;
    }

    bb95: {
        StorageDead(_174);
        StorageDead(_173);
        _171 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _172) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_172);
        _176 = discriminant(_171);
        switchInt(move _176) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_180);
        _180 = ((_171 as Continue).0: ());
        _170 = _180;
        StorageDead(_180);
        StorageDead(_175);
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_181);
        _181 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_182);
        _182 = (((*_1).1: state::perp_market::AMM).5: u128);
        StorageLive(_183);
        _183 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_184);
        _184 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = _4;
        StorageLive(_200);
        StorageLive(_201);
        _201 = ((*_1).10: u64);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _201;
        _204 = core::num::<impl u64>::checked_add(move _205, const 1_u64) -> [return: bb100, unwind continue];
    }

    bb98: {
        StorageLive(_177);
        _177 = ((_171 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_179);
        _179 = _177;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _179) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        goto -> bb113;
    }

    bb100: {
        StorageDead(_205);
        StorageLive(_206);
        _206 = Option::<u64>::Some(const 1_u64);
        _203 = Option::<u64>::or(move _204, move _206) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_206);
        StorageDead(_204);
        _202 = Option::<u64>::unwrap(move _203) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_203);
        ((*_1).10: u64) = move _202;
        StorageDead(_202);
        _200 = _201;
        StorageDead(_201);
        StorageLive(_207);
        _207 = ((*_1).21: u16);
        StorageLive(_208);
        _208 = _5;
        StorageLive(_209);
        _209 = _6;
        StorageLive(_210);
        _210 = _7;
        StorageLive(_211);
        _211 = _8;
        StorageLive(_212);
        _212 = _181;
        StorageLive(_213);
        _213 = _182;
        StorageLive(_214);
        _214 = _183;
        StorageLive(_215);
        _215 = _184;
        StorageLive(_216);
        StorageLive(_217);
        _217 = (((*_1).1: state::perp_market::AMM).13: i128);
        _216 = core::num::<impl i128>::unsigned_abs(move _217) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = (((*_1).1: state::perp_market::AMM).14: i128);
        _218 = core::num::<impl i128>::unsigned_abs(move _219) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_219);
        StorageLive(_220);
        _220 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_221);
        _221 = ((*_1).20: u32);
        StorageLive(_222);
        _222 = _148;
        StorageLive(_223);
        _223 = (((*_1).1: state::perp_market::AMM).28: i128);
        StorageLive(_224);
        _224 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_225);
        _225 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).0: i64);
        StorageLive(_226);
        StorageLive(_227);
        _227 = ((*_1).8: u64);
        _226 = move _227 as u128 (IntToInt);
        StorageDead(_227);
        _198 = CurveRecord { ts: move _199, record_id: move _200, peg_multiplier_before: move _208, base_asset_reserve_before: move _209, quote_asset_reserve_before: move _210, sqrt_k_before: move _211, peg_multiplier_after: move _212, base_asset_reserve_after: move _213, quote_asset_reserve_after: move _214, sqrt_k_after: move _215, base_asset_amount_long: move _216, base_asset_amount_short: move _218, base_asset_amount_with_amm: move _220, total_fee: move _223, total_fee_minus_distributions: move _224, adjustment_cost: move _222, oracle_price: move _225, fill_record: move _226, number_of_users: move _221, market_index: move _207 };
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_200);
        StorageDead(_199);
        _197 = &_198;
        _196 = &(*_197);
        _195 = <CurveRecord as anchor_lang::Event>::data(move _196) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_196);
        _194 = &_195;
        _193 = &(*_194);
        _192 = <Vec<u8> as Deref>::deref(move _193) -> [return: bb106, unwind: bb126];
    }

    bb106: {
        _191 = &(*_192);
        StorageDead(_193);
        _190 = [move _191];
        StorageDead(_191);
        _189 = &_190;
        _188 = &(*_189);
        _187 = move _188 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_188);
        _186 = solana_program::log::sol_log_data(move _187) -> [return: bb107, unwind: bb126];
    }

    bb107: {
        StorageDead(_187);
        drop(_195) -> [return: bb108, unwind: bb127];
    }

    bb108: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        _185 = const ();
        StorageDead(_185);
        _56 = const ();
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_169);
        StorageDead(_159);
        StorageDead(_148);
        StorageDead(_138);
        StorageDead(_116);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_83);
        StorageDead(_72);
        goto -> bb112;
    }

    bb110: {
        StorageDead(_62);
        goto -> bb111;
    }

    bb111: {
        _56 = const ();
        goto -> bb112;
    }

    bb112: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_228);
        _228 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _228);
        StorageDead(_228);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb125;
    }

    bb113: {
        StorageDead(_159);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_148);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_138);
        goto -> bb117;
    }

    bb116: {
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_116);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb119;
    }

    bb118: {
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_83);
        StorageDead(_72);
        goto -> bb120;
    }

    bb120: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb123;
    }

    bb121: {
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_19);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_18);
        goto -> bb124;
    }

    bb124: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb125;
    }

    bb125: {
        return;
    }

    bb126 (cleanup): {
        drop(_195) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        resume;
    }
}
