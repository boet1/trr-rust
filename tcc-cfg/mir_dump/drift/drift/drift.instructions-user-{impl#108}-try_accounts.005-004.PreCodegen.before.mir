// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4251:10: 4251:18>::try_accounts` before PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4251:10: 4251:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut TransferPoolsBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _11: <instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, instructions::user::TransferPoolsBumps>>::try_accounts::__Args;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, instructions::user::TransferPoolsBumps>>::try_accounts::__Args>;
    let mut _13: std::result::Result<<instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, instructions::user::TransferPoolsBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _14: std::result::Result<<instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, instructions::user::TransferPoolsBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _15: &mut &[u8];
    let mut _16: &mut &[u8];
    let mut _17: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _25: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _26: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _27: &anchor_lang::prelude::Pubkey;
    let mut _28: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _29: &[u8];
    let mut _30: &mut instructions::user::TransferPoolsBumps;
    let mut _31: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _32: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _40: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _41: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::Pubkey;
    let mut _43: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _44: &[u8];
    let mut _45: &mut instructions::user::TransferPoolsBumps;
    let mut _46: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _47: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _55: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _56: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _57: &anchor_lang::prelude::Pubkey;
    let mut _58: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _59: &[u8];
    let mut _60: &mut instructions::user::TransferPoolsBumps;
    let mut _61: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _62: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _70: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _71: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _72: &anchor_lang::prelude::Pubkey;
    let mut _73: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _74: &[u8];
    let mut _75: &mut instructions::user::TransferPoolsBumps;
    let mut _76: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _77: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _85: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _86: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _87: &anchor_lang::prelude::Pubkey;
    let mut _88: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _89: &[u8];
    let mut _90: &mut instructions::user::TransferPoolsBumps;
    let mut _91: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _92: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _100: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _101: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _102: &anchor_lang::prelude::Pubkey;
    let mut _103: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _104: &[u8];
    let mut _105: &mut instructions::user::TransferPoolsBumps;
    let mut _106: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _107: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _115: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _116: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let mut _118: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _119: &[u8];
    let mut _120: &mut instructions::user::TransferPoolsBumps;
    let mut _121: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _122: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _123: isize;
    let mut _125: !;
    let mut _126: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _130: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _131: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _132: &anchor_lang::prelude::Pubkey;
    let mut _133: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _134: &[u8];
    let mut _135: &mut instructions::user::TransferPoolsBumps;
    let mut _136: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _137: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _145: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _146: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _147: &anchor_lang::prelude::Pubkey;
    let mut _148: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _149: &[u8];
    let mut _150: &mut instructions::user::TransferPoolsBumps;
    let mut _151: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _152: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _160: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _161: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _162: &anchor_lang::prelude::Pubkey;
    let mut _163: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _164: &[u8];
    let mut _165: &mut instructions::user::TransferPoolsBumps;
    let mut _166: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _167: {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _173: ();
    let mut _174: bool;
    let mut _175: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _177: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _178: !;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::Error;
    let mut _181: anchor_lang::error::ErrorCode;
    let _182: ();
    let mut _184: &state::user::User;
    let mut _185: &std::cell::Ref<'_, state::user::User>;
    let _186: std::cell::Ref<'_, state::user::User>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::User>>;
    let mut _188: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _189: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _196: &anchor_lang::prelude::Signer<'_>;
    let mut _197: bool;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let mut _199: &anchor_lang::prelude::Pubkey;
    let mut _200: !;
    let mut _201: anchor_lang::error::Error;
    let mut _202: anchor_lang::error::Error;
    let mut _203: anchor_lang::error::Error;
    let mut _204: anchor_lang::error::ErrorCode;
    let mut _205: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _206: anchor_lang::prelude::Pubkey;
    let mut _207: anchor_lang::prelude::Pubkey;
    let _208: ();
    let mut _209: bool;
    let mut _210: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _211: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _212: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _213: !;
    let mut _214: anchor_lang::error::Error;
    let mut _215: anchor_lang::error::Error;
    let mut _216: anchor_lang::error::ErrorCode;
    let _217: ();
    let mut _219: &state::user::User;
    let mut _220: &std::cell::Ref<'_, state::user::User>;
    let _221: std::cell::Ref<'_, state::user::User>;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::User>>;
    let mut _223: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _224: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _231: &anchor_lang::prelude::Signer<'_>;
    let mut _232: bool;
    let mut _233: &anchor_lang::prelude::Pubkey;
    let mut _234: &anchor_lang::prelude::Pubkey;
    let mut _235: !;
    let mut _236: anchor_lang::error::Error;
    let mut _237: anchor_lang::error::Error;
    let mut _238: anchor_lang::error::Error;
    let mut _239: anchor_lang::error::ErrorCode;
    let mut _240: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _241: anchor_lang::prelude::Pubkey;
    let mut _242: anchor_lang::prelude::Pubkey;
    let _243: ();
    let mut _244: bool;
    let mut _245: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _246: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _247: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _248: !;
    let mut _249: anchor_lang::error::Error;
    let mut _250: anchor_lang::error::Error;
    let mut _251: anchor_lang::error::ErrorCode;
    let _252: ();
    let mut _254: &state::user::UserStats;
    let mut _255: &std::cell::Ref<'_, state::user::UserStats>;
    let _256: std::cell::Ref<'_, state::user::UserStats>;
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _258: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _259: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _260: isize;
    let mut _262: !;
    let mut _263: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _266: &anchor_lang::prelude::Signer<'_>;
    let mut _267: bool;
    let mut _268: &anchor_lang::prelude::Pubkey;
    let mut _269: &anchor_lang::prelude::Pubkey;
    let mut _270: !;
    let mut _271: anchor_lang::error::Error;
    let mut _272: anchor_lang::error::Error;
    let mut _273: anchor_lang::error::Error;
    let mut _274: anchor_lang::error::ErrorCode;
    let mut _275: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _276: anchor_lang::prelude::Pubkey;
    let mut _277: anchor_lang::prelude::Pubkey;
    let mut _280: (anchor_lang::prelude::Pubkey, u8);
    let mut _281: &[&[u8]];
    let mut _282: &[&[u8]; 2];
    let _283: &[&[u8]; 2];
    let _284: [&[u8]; 2];
    let mut _285: &[u8];
    let _286: &[u8];
    let mut _287: &[u8; 17];
    let _288: &[u8; 17];
    let mut _289: &[u8];
    let _290: &[u8];
    let mut _291: &[u8; 2];
    let _292: [u8; 2];
    let mut _293: u16;
    let mut _294: &anchor_lang::prelude::Pubkey;
    let _295: &&anchor_lang::prelude::Pubkey;
    let mut _296: u8;
    let _297: ();
    let mut _298: bool;
    let mut _299: &anchor_lang::prelude::Pubkey;
    let _300: anchor_lang::prelude::Pubkey;
    let mut _301: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _302: &anchor_lang::prelude::Pubkey;
    let mut _303: !;
    let mut _304: anchor_lang::error::Error;
    let mut _305: anchor_lang::error::Error;
    let mut _306: anchor_lang::error::Error;
    let mut _307: anchor_lang::error::ErrorCode;
    let mut _308: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _309: anchor_lang::prelude::Pubkey;
    let mut _310: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _311: anchor_lang::prelude::Pubkey;
    let _312: ();
    let mut _313: bool;
    let mut _314: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _315: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _316: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _317: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _318: !;
    let mut _319: anchor_lang::error::Error;
    let mut _320: anchor_lang::error::Error;
    let mut _321: anchor_lang::error::ErrorCode;
    let mut _324: (anchor_lang::prelude::Pubkey, u8);
    let mut _325: &[&[u8]];
    let mut _326: &[&[u8]; 2];
    let _327: &[&[u8]; 2];
    let _328: [&[u8]; 2];
    let mut _329: &[u8];
    let _330: &[u8];
    let mut _331: &[u8; 17];
    let _332: &[u8; 17];
    let mut _333: &[u8];
    let _334: &[u8];
    let mut _335: &[u8; 2];
    let _336: [u8; 2];
    let mut _337: u16;
    let mut _338: &anchor_lang::prelude::Pubkey;
    let _339: &&anchor_lang::prelude::Pubkey;
    let mut _340: u8;
    let _341: ();
    let mut _342: bool;
    let mut _343: &anchor_lang::prelude::Pubkey;
    let _344: anchor_lang::prelude::Pubkey;
    let mut _345: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _346: &anchor_lang::prelude::Pubkey;
    let mut _347: !;
    let mut _348: anchor_lang::error::Error;
    let mut _349: anchor_lang::error::Error;
    let mut _350: anchor_lang::error::Error;
    let mut _351: anchor_lang::error::ErrorCode;
    let mut _352: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _353: anchor_lang::prelude::Pubkey;
    let mut _354: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _355: anchor_lang::prelude::Pubkey;
    let _356: ();
    let mut _357: bool;
    let mut _358: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _359: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _360: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _361: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _362: !;
    let mut _363: anchor_lang::error::Error;
    let mut _364: anchor_lang::error::Error;
    let mut _365: anchor_lang::error::ErrorCode;
    let mut _368: (anchor_lang::prelude::Pubkey, u8);
    let mut _369: &[&[u8]];
    let mut _370: &[&[u8]; 2];
    let _371: &[&[u8]; 2];
    let _372: [&[u8]; 2];
    let mut _373: &[u8];
    let _374: &[u8];
    let mut _375: &[u8; 17];
    let _376: &[u8; 17];
    let mut _377: &[u8];
    let _378: &[u8];
    let mut _379: &[u8; 2];
    let _380: [u8; 2];
    let mut _381: u16;
    let mut _382: &anchor_lang::prelude::Pubkey;
    let _383: &&anchor_lang::prelude::Pubkey;
    let mut _384: u8;
    let _385: ();
    let mut _386: bool;
    let mut _387: &anchor_lang::prelude::Pubkey;
    let _388: anchor_lang::prelude::Pubkey;
    let mut _389: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _390: &anchor_lang::prelude::Pubkey;
    let mut _391: !;
    let mut _392: anchor_lang::error::Error;
    let mut _393: anchor_lang::error::Error;
    let mut _394: anchor_lang::error::Error;
    let mut _395: anchor_lang::error::ErrorCode;
    let mut _396: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _397: anchor_lang::prelude::Pubkey;
    let mut _398: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _399: anchor_lang::prelude::Pubkey;
    let _400: ();
    let mut _401: bool;
    let mut _402: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _403: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _404: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _405: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _406: !;
    let mut _407: anchor_lang::error::Error;
    let mut _408: anchor_lang::error::Error;
    let mut _409: anchor_lang::error::ErrorCode;
    let mut _412: (anchor_lang::prelude::Pubkey, u8);
    let mut _413: &[&[u8]];
    let mut _414: &[&[u8]; 2];
    let _415: &[&[u8]; 2];
    let _416: [&[u8]; 2];
    let mut _417: &[u8];
    let _418: &[u8];
    let mut _419: &[u8; 17];
    let _420: &[u8; 17];
    let mut _421: &[u8];
    let _422: &[u8];
    let mut _423: &[u8; 2];
    let _424: [u8; 2];
    let mut _425: u16;
    let mut _426: &anchor_lang::prelude::Pubkey;
    let _427: &&anchor_lang::prelude::Pubkey;
    let mut _428: u8;
    let _429: ();
    let mut _430: bool;
    let mut _431: &anchor_lang::prelude::Pubkey;
    let _432: anchor_lang::prelude::Pubkey;
    let mut _433: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _434: &anchor_lang::prelude::Pubkey;
    let mut _435: !;
    let mut _436: anchor_lang::error::Error;
    let mut _437: anchor_lang::error::Error;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::ErrorCode;
    let mut _440: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _441: anchor_lang::prelude::Pubkey;
    let mut _442: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _443: anchor_lang::prelude::Pubkey;
    let _444: ();
    let mut _445: bool;
    let mut _446: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _447: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _448: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _449: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _450: !;
    let mut _451: anchor_lang::error::Error;
    let mut _452: anchor_lang::error::Error;
    let mut _453: anchor_lang::error::ErrorCode;
    let _454: ();
    let mut _455: bool;
    let mut _456: &anchor_lang::prelude::Pubkey;
    let _457: &state::state::State;
    let mut _458: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _459: &anchor_lang::prelude::Pubkey;
    let _460: &anchor_lang::prelude::Pubkey;
    let _461: anchor_lang::prelude::Pubkey;
    let mut _462: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _463: !;
    let mut _464: anchor_lang::error::Error;
    let mut _465: anchor_lang::error::Error;
    let mut _466: anchor_lang::error::ErrorCode;
    let mut _467: instructions::user::TransferPools<'_>;
    let mut _468: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _469: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _470: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _471: anchor_lang::prelude::Signer<'_>;
    let mut _472: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _473: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _474: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _475: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _476: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _477: anchor_lang::prelude::AccountInfo<'_>;
    let mut _478: &anchor_lang::prelude::Pubkey;
    let mut _479: &anchor_lang::prelude::Pubkey;
    let mut _480: &anchor_lang::prelude::Pubkey;
    let mut _481: &anchor_lang::prelude::Pubkey;
    let mut _482: bool;
    let mut _483: bool;
    let mut _484: bool;
    let mut _485: bool;
    let mut _486: bool;
    let mut _487: bool;
    let mut _488: bool;
    let mut _489: bool;
    let mut _490: bool;
    let mut _491: bool;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _558: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _559: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _560: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _561: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _562: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _563: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _564: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _565: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _8: u16;
        let _9: u16;
        let _10: u16;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _22: <instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, instructions::user::TransferPoolsBumps>>::try_accounts::__Args;
        scope 2 {
            debug deposit_from_market_index => _7;
            debug deposit_to_market_index => _8;
            debug borrow_from_market_index => _9;
            debug borrow_to_market_index => _10;
            let _23: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
            let _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _37: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
            scope 7 {
                debug from_user => _23;
                let _38: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                let _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _52: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                scope 12 {
                    debug to_user => _38;
                    let _53: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    let _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _67: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    scope 17 {
                        debug user_stats => _53;
                        let _68: anchor_lang::prelude::Signer<'_>;
                        let _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _82: anchor_lang::prelude::Signer<'_>;
                        scope 22 {
                            debug authority => _68;
                            let _83: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                            let _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _97: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                            scope 27 {
                                debug state => _83;
                                let _98: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                let _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _112: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                scope 32 {
                                    debug deposit_from_spot_market_vault => _98;
                                    let _113: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    let _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _127: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    scope 37 {
                                        debug deposit_to_spot_market_vault => _113;
                                        let _128: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _142: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 42 {
                                            debug borrow_from_spot_market_vault => _128;
                                            let _143: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                            let _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _157: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                            scope 47 {
                                                debug borrow_to_spot_market_vault => _143;
                                                let _158: anchor_lang::prelude::AccountInfo<'_>;
                                                let _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _172: anchor_lang::prelude::AccountInfo<'_>;
                                                scope 52 {
                                                    debug drift_signer => _158;
                                                    let _183: anchor_lang::prelude::Pubkey;
                                                    let _191: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _194: std::cell::Ref<'_, state::user::User>;
                                                    let _218: anchor_lang::prelude::Pubkey;
                                                    let _226: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _229: std::cell::Ref<'_, state::user::User>;
                                                    let _253: anchor_lang::prelude::Pubkey;
                                                    let _261: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _264: std::cell::Ref<'_, state::user::UserStats>;
                                                    let _278: anchor_lang::prelude::Pubkey;
                                                    let _279: u8;
                                                    scope 57 {
                                                        debug my_key => _183;
                                                        let _195: anchor_lang::prelude::Pubkey;
                                                        scope 62 {
                                                            debug target_key => _195;
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug residual => _191;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug val => _194;
                                                        scope 61 {
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug my_key => _218;
                                                        let _230: anchor_lang::prelude::Pubkey;
                                                        scope 68 {
                                                            debug target_key => _230;
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug residual => _226;
                                                        scope 65 {
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug val => _229;
                                                        scope 67 {
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug my_key => _253;
                                                        let _265: anchor_lang::prelude::Pubkey;
                                                        scope 74 {
                                                            debug target_key => _265;
                                                        }
                                                    }
                                                    scope 70 {
                                                        debug residual => _261;
                                                        scope 71 {
                                                        }
                                                    }
                                                    scope 72 {
                                                        debug val => _264;
                                                        scope 73 {
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug __pda_address => _278;
                                                        debug __bump => _279;
                                                        let _322: anchor_lang::prelude::Pubkey;
                                                        let _323: u8;
                                                        scope 76 {
                                                            debug __pda_address => _322;
                                                            debug __bump => _323;
                                                            let _366: anchor_lang::prelude::Pubkey;
                                                            let _367: u8;
                                                            scope 77 {
                                                                debug __pda_address => _366;
                                                                debug __bump => _367;
                                                                let _410: anchor_lang::prelude::Pubkey;
                                                                let _411: u8;
                                                                scope 78 {
                                                                    debug __pda_address => _410;
                                                                    debug __bump => _411;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug residual => _169;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug val => _172;
                                                    scope 56 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _154;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _157;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _139;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _142;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _124;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _127;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _109;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _112;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _94;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _97;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _79;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _82;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _64;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _67;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _49;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _52;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _34;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _37;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _19;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _22;
            scope 6 {
            }
        }
    }

    bb0: {
        _485 = const false;
        _484 = const false;
        _483 = const false;
        _482 = const false;
        _491 = const false;
        _490 = const false;
        _489 = const false;
        _488 = const false;
        _487 = const false;
        _486 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _6;
        _15 = &mut (*_16);
        _14 = <<instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, TransferPoolsBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _13 = std::result::Result::<<instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, TransferPoolsBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _14, move _17) -> [return: bb2, unwind: bb230];
    }

    bb2: {
        StorageDead(_17);
        StorageDead(_14);
        _12 = <std::result::Result<<instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, TransferPoolsBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _18 = discriminant(_12);
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_22);
        _22 = move ((_12 as Continue).0: <instructions::user::TransferPools<'info> as anchor_lang::Accounts<'info, instructions::user::TransferPoolsBumps>>::try_accounts::__Args);
        _11 = move _22;
        StorageDead(_22);
        StorageLive(_7);
        _7 = (_11.0: u16);
        StorageLive(_8);
        _8 = (_11.1: u16);
        StorageLive(_9);
        _9 = (_11.2: u16);
        StorageLive(_10);
        _10 = (_11.3: u16);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_1);
        StorageLive(_28);
        _28 = &mut (*_2);
        StorageLive(_29);
        _29 = &(*_6);
        StorageLive(_30);
        _30 = &mut (*_4);
        StorageLive(_31);
        _31 = &mut (*_5);
        _26 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _27, move _28, move _29, move _30, move _31) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb219;
    }

    bb8: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_32);
        _32 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _25 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _26, move _32) -> [return: bb9, unwind: bb230];
    }

    bb9: {
        StorageDead(_32);
        StorageDead(_26);
        _24 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb10, unwind: bb230];
    }

    bb10: {
        StorageDead(_25);
        _33 = discriminant(_24);
        switchInt(move _33) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_37);
        _37 = move ((_24 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _23 = move _37;
        StorageDead(_37);
        _492 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_1);
        StorageLive(_43);
        _43 = &mut (*_2);
        StorageLive(_44);
        _44 = &(*_6);
        StorageLive(_45);
        _45 = &mut (*_4);
        StorageLive(_46);
        _46 = &mut (*_5);
        _41 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _42, move _43, move _44, move _45, move _46) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_34);
        _34 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _36) -> [return: bb13, unwind: bb254];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_34);
        _542 = discriminant(_24);
        StorageDead(_24);
        goto -> bb218;
    }

    bb14: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_47);
        _47 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _40 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _41, move _47) -> [return: bb15, unwind: bb230];
    }

    bb15: {
        StorageDead(_47);
        StorageDead(_41);
        _39 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _40) -> [return: bb16, unwind: bb230];
    }

    bb16: {
        StorageDead(_40);
        _48 = discriminant(_39);
        switchInt(move _48) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_52);
        _52 = move ((_39 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _38 = move _52;
        StorageDead(_52);
        _494 = discriminant(_39);
        StorageDead(_39);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_1);
        StorageLive(_58);
        _58 = &mut (*_2);
        StorageLive(_59);
        _59 = &(*_6);
        StorageLive(_60);
        _60 = &mut (*_4);
        StorageLive(_61);
        _61 = &mut (*_5);
        _56 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _57, move _58, move _59, move _60, move _61) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_49);
        _49 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_51);
        _51 = move _49;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _51) -> [return: bb19, unwind: bb253];
    }

    bb19: {
        StorageDead(_51);
        StorageDead(_49);
        _540 = discriminant(_39);
        StorageDead(_39);
        goto -> bb217;
    }

    bb20: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_62);
        _62 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _55 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _56, move _62) -> [return: bb21, unwind: bb230];
    }

    bb21: {
        StorageDead(_62);
        StorageDead(_56);
        _54 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _55) -> [return: bb22, unwind: bb230];
    }

    bb22: {
        StorageDead(_55);
        _63 = discriminant(_54);
        switchInt(move _63) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_67);
        _67 = move ((_54 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _53 = move _67;
        StorageDead(_67);
        _496 = discriminant(_54);
        StorageDead(_54);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(*_1);
        StorageLive(_73);
        _73 = &mut (*_2);
        StorageLive(_74);
        _74 = &(*_6);
        StorageLive(_75);
        _75 = &mut (*_4);
        StorageLive(_76);
        _76 = &mut (*_5);
        _71 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _72, move _73, move _74, move _75, move _76) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_64);
        _64 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_66);
        _66 = move _64;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _66) -> [return: bb25, unwind: bb252];
    }

    bb25: {
        StorageDead(_66);
        StorageDead(_64);
        _538 = discriminant(_54);
        StorageDead(_54);
        goto -> bb216;
    }

    bb26: {
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_77);
        _77 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _70 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _71, move _77) -> [return: bb27, unwind: bb230];
    }

    bb27: {
        StorageDead(_77);
        StorageDead(_71);
        _69 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _70) -> [return: bb28, unwind: bb230];
    }

    bb28: {
        StorageDead(_70);
        _78 = discriminant(_69);
        switchInt(move _78) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_82);
        _82 = move ((_69 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _68 = move _82;
        StorageDead(_82);
        _498 = discriminant(_69);
        StorageDead(_69);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_1);
        StorageLive(_88);
        _88 = &mut (*_2);
        StorageLive(_89);
        _89 = &(*_6);
        StorageLive(_90);
        _90 = &mut (*_4);
        StorageLive(_91);
        _91 = &mut (*_5);
        _86 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _87, move _88, move _89, move _90, move _91) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_79);
        _79 = move ((_69 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_81);
        _81 = move _79;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _81) -> [return: bb31, unwind: bb251];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_79);
        _536 = discriminant(_69);
        StorageDead(_69);
        goto -> bb215;
    }

    bb32: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_92);
        _92 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _85 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _86, move _92) -> [return: bb33, unwind: bb230];
    }

    bb33: {
        StorageDead(_92);
        StorageDead(_86);
        _84 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _85) -> [return: bb34, unwind: bb230];
    }

    bb34: {
        StorageDead(_85);
        _93 = discriminant(_84);
        switchInt(move _93) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_97);
        _97 = move ((_84 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _83 = move _97;
        StorageDead(_97);
        _500 = discriminant(_84);
        StorageDead(_84);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &(*_1);
        StorageLive(_103);
        _103 = &mut (*_2);
        StorageLive(_104);
        _104 = &(*_6);
        StorageLive(_105);
        _105 = &mut (*_4);
        StorageLive(_106);
        _106 = &mut (*_5);
        _101 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _102, move _103, move _104, move _105, move _106) -> [return: bb38, unwind: bb229];
    }

    bb36: {
        StorageLive(_94);
        _94 = move ((_84 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _96) -> [return: bb37, unwind: bb250];
    }

    bb37: {
        StorageDead(_96);
        StorageDead(_94);
        _534 = discriminant(_84);
        StorageDead(_84);
        goto -> bb214;
    }

    bb38: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_107);
        _107 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _100 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _101, move _107) -> [return: bb39, unwind: bb229];
    }

    bb39: {
        StorageDead(_107);
        StorageDead(_101);
        _99 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _100) -> [return: bb40, unwind: bb229];
    }

    bb40: {
        StorageDead(_100);
        _108 = discriminant(_99);
        switchInt(move _108) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_112);
        _112 = move ((_99 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _98 = move _112;
        StorageDead(_112);
        _502 = discriminant(_99);
        StorageDead(_99);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &(*_1);
        StorageLive(_118);
        _118 = &mut (*_2);
        StorageLive(_119);
        _119 = &(*_6);
        StorageLive(_120);
        _120 = &mut (*_4);
        StorageLive(_121);
        _121 = &mut (*_5);
        _116 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _117, move _118, move _119, move _120, move _121) -> [return: bb44, unwind: bb228];
    }

    bb42: {
        StorageLive(_109);
        _109 = move ((_99 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_111);
        _111 = move _109;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _111) -> [return: bb43, unwind: bb249];
    }

    bb43: {
        StorageDead(_111);
        StorageDead(_109);
        _532 = discriminant(_99);
        StorageDead(_99);
        goto -> bb213;
    }

    bb44: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_122);
        _122 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _115 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _116, move _122) -> [return: bb45, unwind: bb228];
    }

    bb45: {
        StorageDead(_122);
        StorageDead(_116);
        _114 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _115) -> [return: bb46, unwind: bb228];
    }

    bb46: {
        StorageDead(_115);
        _123 = discriminant(_114);
        switchInt(move _123) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_127);
        _127 = move ((_114 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _113 = move _127;
        StorageDead(_127);
        _504 = discriminant(_114);
        StorageDead(_114);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_1);
        StorageLive(_133);
        _133 = &mut (*_2);
        StorageLive(_134);
        _134 = &(*_6);
        StorageLive(_135);
        _135 = &mut (*_4);
        StorageLive(_136);
        _136 = &mut (*_5);
        _131 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _132, move _133, move _134, move _135, move _136) -> [return: bb50, unwind: bb227];
    }

    bb48: {
        StorageLive(_124);
        _124 = move ((_114 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_126);
        _126 = move _124;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _126) -> [return: bb49, unwind: bb248];
    }

    bb49: {
        StorageDead(_126);
        StorageDead(_124);
        _530 = discriminant(_114);
        StorageDead(_114);
        goto -> bb212;
    }

    bb50: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_137);
        _137 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _130 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _131, move _137) -> [return: bb51, unwind: bb227];
    }

    bb51: {
        StorageDead(_137);
        StorageDead(_131);
        _129 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _130) -> [return: bb52, unwind: bb227];
    }

    bb52: {
        StorageDead(_130);
        _138 = discriminant(_129);
        switchInt(move _138) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_142);
        _142 = move ((_129 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _128 = move _142;
        StorageDead(_142);
        _506 = discriminant(_129);
        StorageDead(_129);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(*_1);
        StorageLive(_148);
        _148 = &mut (*_2);
        StorageLive(_149);
        _149 = &(*_6);
        StorageLive(_150);
        _150 = &mut (*_4);
        StorageLive(_151);
        _151 = &mut (*_5);
        _146 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _147, move _148, move _149, move _150, move _151) -> [return: bb56, unwind: bb226];
    }

    bb54: {
        StorageLive(_139);
        _139 = move ((_129 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_141);
        _141 = move _139;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _141) -> [return: bb55, unwind: bb247];
    }

    bb55: {
        StorageDead(_141);
        StorageDead(_139);
        _528 = discriminant(_129);
        StorageDead(_129);
        goto -> bb211;
    }

    bb56: {
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_152);
        _152 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _145 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _146, move _152) -> [return: bb57, unwind: bb226];
    }

    bb57: {
        StorageDead(_152);
        StorageDead(_146);
        _144 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _145) -> [return: bb58, unwind: bb226];
    }

    bb58: {
        StorageDead(_145);
        _153 = discriminant(_144);
        switchInt(move _153) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_157);
        _157 = move ((_144 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _143 = move _157;
        StorageDead(_157);
        _508 = discriminant(_144);
        StorageDead(_144);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_1);
        StorageLive(_163);
        _163 = &mut (*_2);
        StorageLive(_164);
        _164 = &(*_6);
        StorageLive(_165);
        _165 = &mut (*_4);
        StorageLive(_166);
        _166 = &mut (*_5);
        _161 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, TransferPoolsBumps>>::try_accounts(move _162, move _163, move _164, move _165, move _166) -> [return: bb62, unwind: bb225];
    }

    bb60: {
        StorageLive(_154);
        _154 = move ((_144 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_156);
        _156 = move _154;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _156) -> [return: bb61, unwind: bb246];
    }

    bb61: {
        StorageDead(_156);
        StorageDead(_154);
        _526 = discriminant(_144);
        StorageDead(_144);
        goto -> bb210;
    }

    bb62: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_167);
        _167 = {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18};
        _160 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4251:10: 4251:18}>(move _161, move _167) -> [return: bb63, unwind: bb225];
    }

    bb63: {
        StorageDead(_167);
        StorageDead(_161);
        _159 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _160) -> [return: bb64, unwind: bb225];
    }

    bb64: {
        StorageDead(_160);
        _168 = discriminant(_159);
        switchInt(move _168) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_172);
        _172 = move ((_159 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _158 = move _172;
        StorageDead(_172);
        _510 = discriminant(_159);
        StorageDead(_159);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_23;
        _176 = &(*_177);
        _175 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _176) -> [return: bb68, unwind: bb224];
    }

    bb66: {
        StorageLive(_169);
        _169 = move ((_159 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_171);
        _171 = move _169;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _171) -> [return: bb67, unwind: bb245];
    }

    bb67: {
        StorageDead(_171);
        StorageDead(_169);
        _524 = discriminant(_159);
        StorageDead(_159);
        goto -> bb209;
    }

    bb68: {
        StorageDead(_176);
        _174 = ((*_175).6: bool);
        switchInt(move _174) -> [0: bb69, otherwise: bb72];
    }

    bb69: {
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = ConstraintMut;
        _180 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _181) -> [return: bb70, unwind: bb224];
    }

    bb70: {
        StorageDead(_181);
        _179 = anchor_lang::error::Error::with_account_name::<&str>(move _180, const "from_user") -> [return: bb71, unwind: bb224];
    }

    bb71: {
        StorageDead(_180);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _179);
        StorageDead(_179);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb208;
    }

    bb72: {
        StorageDead(_177);
        StorageDead(_175);
        _173 = const ();
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_23;
        _188 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _189) -> [return: bb73, unwind: bb224];
    }

    bb73: {
        StorageDead(_189);
        _187 = <std::result::Result<Ref<'_, User>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb74, unwind: bb224];
    }

    bb74: {
        _490 = const true;
        _491 = const true;
        StorageDead(_188);
        _190 = discriminant(_187);
        switchInt(move _190) -> [0: bb75, 1: bb76, otherwise: bb5];
    }

    bb75: {
        StorageLive(_194);
        _194 = move ((_187 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _186 = move _194;
        StorageDead(_194);
        _185 = &_186;
        _184 = <Ref<'_, User> as Deref>::deref(move _185) -> [return: bb78, unwind: bb223];
    }

    bb76: {
        StorageLive(_191);
        _191 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_193);
        _193 = move _191;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _193) -> [return: bb77, unwind: bb244];
    }

    bb77: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_185);
        _522 = discriminant(_187);
        _490 = const false;
        _491 = const false;
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        goto -> bb207;
    }

    bb78: {
        StorageDead(_185);
        _183 = ((*_184).0: anchor_lang::prelude::Pubkey);
        drop(_186) -> [return: bb231, unwind: bb244];
    }

    bb79: {
        StorageDead(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &_183;
        StorageLive(_199);
        _199 = &_195;
        _197 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _198, move _199) -> [return: bb80, unwind: bb224];
    }

    bb80: {
        switchInt(move _197) -> [0: bb85, otherwise: bb81];
    }

    bb81: {
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = ConstraintHasOne;
        _203 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _204) -> [return: bb82, unwind: bb224];
    }

    bb82: {
        StorageDead(_204);
        _202 = anchor_lang::error::Error::with_account_name::<&str>(move _203, const "from_user") -> [return: bb83, unwind: bb224];
    }

    bb83: {
        StorageDead(_203);
        StorageLive(_205);
        StorageLive(_206);
        _206 = _183;
        StorageLive(_207);
        _207 = _195;
        _205 = (move _206, move _207);
        StorageDead(_207);
        StorageDead(_206);
        _201 = anchor_lang::error::Error::with_pubkeys(move _202, move _205) -> [return: bb84, unwind: bb224];
    }

    bb84: {
        StorageDead(_205);
        StorageDead(_202);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _201);
        StorageDead(_201);
        StorageDead(_197);
        StorageDead(_195);
        goto -> bb207;
    }

    bb85: {
        StorageDead(_199);
        StorageDead(_198);
        _182 = const ();
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_38;
        _211 = &(*_212);
        _210 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _211) -> [return: bb86, unwind: bb224];
    }

    bb86: {
        StorageDead(_211);
        _209 = ((*_210).6: bool);
        switchInt(move _209) -> [0: bb87, otherwise: bb90];
    }

    bb87: {
        StorageDead(_212);
        StorageDead(_210);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = ConstraintMut;
        _215 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _216) -> [return: bb88, unwind: bb224];
    }

    bb88: {
        StorageDead(_216);
        _214 = anchor_lang::error::Error::with_account_name::<&str>(move _215, const "to_user") -> [return: bb89, unwind: bb224];
    }

    bb89: {
        StorageDead(_215);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _214);
        StorageDead(_214);
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb208;
    }

    bb90: {
        StorageDead(_212);
        StorageDead(_210);
        _208 = const ();
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_38;
        _223 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _224) -> [return: bb91, unwind: bb224];
    }

    bb91: {
        StorageDead(_224);
        _222 = <std::result::Result<Ref<'_, User>, anchor_lang::error::Error> as Try>::branch(move _223) -> [return: bb92, unwind: bb224];
    }

    bb92: {
        _488 = const true;
        _489 = const true;
        StorageDead(_223);
        _225 = discriminant(_222);
        switchInt(move _225) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_229);
        _229 = move ((_222 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _221 = move _229;
        StorageDead(_229);
        _220 = &_221;
        _219 = <Ref<'_, User> as Deref>::deref(move _220) -> [return: bb96, unwind: bb222];
    }

    bb94: {
        StorageLive(_226);
        _226 = move ((_222 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_228);
        _228 = move _226;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _228) -> [return: bb95, unwind: bb243];
    }

    bb95: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_220);
        _520 = discriminant(_222);
        _488 = const false;
        _489 = const false;
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        goto -> bb206;
    }

    bb96: {
        StorageDead(_220);
        _218 = ((*_219).0: anchor_lang::prelude::Pubkey);
        drop(_221) -> [return: bb232, unwind: bb243];
    }

    bb97: {
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_218;
        StorageLive(_234);
        _234 = &_230;
        _232 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _233, move _234) -> [return: bb98, unwind: bb224];
    }

    bb98: {
        switchInt(move _232) -> [0: bb103, otherwise: bb99];
    }

    bb99: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = ConstraintHasOne;
        _238 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _239) -> [return: bb100, unwind: bb224];
    }

    bb100: {
        StorageDead(_239);
        _237 = anchor_lang::error::Error::with_account_name::<&str>(move _238, const "to_user") -> [return: bb101, unwind: bb224];
    }

    bb101: {
        StorageDead(_238);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _218;
        StorageLive(_242);
        _242 = _230;
        _240 = (move _241, move _242);
        StorageDead(_242);
        StorageDead(_241);
        _236 = anchor_lang::error::Error::with_pubkeys(move _237, move _240) -> [return: bb102, unwind: bb224];
    }

    bb102: {
        StorageDead(_240);
        StorageDead(_237);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _236);
        StorageDead(_236);
        StorageDead(_232);
        StorageDead(_230);
        goto -> bb206;
    }

    bb103: {
        StorageDead(_234);
        StorageDead(_233);
        _217 = const ();
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_53;
        _246 = &(*_247);
        _245 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _246) -> [return: bb104, unwind: bb224];
    }

    bb104: {
        StorageDead(_246);
        _244 = ((*_245).6: bool);
        switchInt(move _244) -> [0: bb105, otherwise: bb108];
    }

    bb105: {
        StorageDead(_247);
        StorageDead(_245);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = ConstraintMut;
        _250 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _251) -> [return: bb106, unwind: bb224];
    }

    bb106: {
        StorageDead(_251);
        _249 = anchor_lang::error::Error::with_account_name::<&str>(move _250, const "user_stats") -> [return: bb107, unwind: bb224];
    }

    bb107: {
        StorageDead(_250);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _249);
        StorageDead(_249);
        StorageDead(_244);
        StorageDead(_243);
        goto -> bb208;
    }

    bb108: {
        StorageDead(_247);
        StorageDead(_245);
        _243 = const ();
        StorageDead(_244);
        StorageDead(_243);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &_53;
        _258 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _259) -> [return: bb109, unwind: bb224];
    }

    bb109: {
        StorageDead(_259);
        _257 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _258) -> [return: bb110, unwind: bb224];
    }

    bb110: {
        _486 = const true;
        _487 = const true;
        StorageDead(_258);
        _260 = discriminant(_257);
        switchInt(move _260) -> [0: bb111, 1: bb112, otherwise: bb5];
    }

    bb111: {
        StorageLive(_264);
        _264 = move ((_257 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _256 = move _264;
        StorageDead(_264);
        _255 = &_256;
        _254 = <Ref<'_, UserStats> as Deref>::deref(move _255) -> [return: bb114, unwind: bb221];
    }

    bb112: {
        StorageLive(_261);
        _261 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_263);
        _263 = move _261;
        _0 = <std::result::Result<instructions::user::TransferPools<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _263) -> [return: bb113, unwind: bb242];
    }

    bb113: {
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_255);
        _518 = discriminant(_257);
        _486 = const false;
        _487 = const false;
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        goto -> bb205;
    }

    bb114: {
        StorageDead(_255);
        _253 = ((*_254).0: anchor_lang::prelude::Pubkey);
        drop(_256) -> [return: bb233, unwind: bb242];
    }

    bb115: {
        StorageDead(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_253;
        StorageLive(_269);
        _269 = &_265;
        _267 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _268, move _269) -> [return: bb116, unwind: bb224];
    }

    bb116: {
        switchInt(move _267) -> [0: bb121, otherwise: bb117];
    }

    bb117: {
        StorageDead(_269);
        StorageDead(_268);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = ConstraintHasOne;
        _273 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _274) -> [return: bb118, unwind: bb224];
    }

    bb118: {
        StorageDead(_274);
        _272 = anchor_lang::error::Error::with_account_name::<&str>(move _273, const "user_stats") -> [return: bb119, unwind: bb224];
    }

    bb119: {
        StorageDead(_273);
        StorageLive(_275);
        StorageLive(_276);
        _276 = _253;
        StorageLive(_277);
        _277 = _265;
        _275 = (move _276, move _277);
        StorageDead(_277);
        StorageDead(_276);
        _271 = anchor_lang::error::Error::with_pubkeys(move _272, move _275) -> [return: bb120, unwind: bb224];
    }

    bb120: {
        StorageDead(_275);
        StorageDead(_272);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _271);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_265);
        goto -> bb205;
    }

    bb121: {
        StorageDead(_269);
        StorageDead(_268);
        _252 = const ();
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = const b"spot_market_vault";
        _287 = &(*_288);
        _286 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _287) -> [return: bb122, unwind: bb224];
    }

    bb122: {
        _285 = &(*_286);
        StorageDead(_287);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = _7;
        _292 = core::num::<impl u16>::to_le_bytes(move _293) -> [return: bb123, unwind: bb224];
    }

    bb123: {
        _291 = &_292;
        StorageDead(_293);
        _290 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _291) -> [return: bb124, unwind: bb224];
    }

    bb124: {
        _289 = &(*_290);
        StorageDead(_291);
        _284 = [move _285, move _289];
        StorageDead(_289);
        StorageDead(_285);
        _283 = &_284;
        _282 = &(*_283);
        _281 = move _282 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_282);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &_1;
        _478 = deref_copy (*_295);
        _294 = &(*_478);
        _280 = anchor_lang::prelude::Pubkey::find_program_address(move _281, move _294) -> [return: bb125, unwind: bb224];
    }

    bb125: {
        StorageDead(_294);
        StorageDead(_281);
        StorageLive(_278);
        _278 = (_280.0: anchor_lang::prelude::Pubkey);
        StorageLive(_279);
        _279 = (_280.1: u8);
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_280);
        StorageLive(_296);
        _296 = _279;
        ((*_4).0: u8) = move _296;
        StorageDead(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _557 = (((_98.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _301 = &(*_557);
        _300 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _301) -> [return: bb126, unwind: bb224];
    }

    bb126: {
        _299 = &_300;
        StorageDead(_301);
        StorageLive(_302);
        _302 = &_278;
        _298 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _299, move _302) -> [return: bb127, unwind: bb224];
    }

    bb127: {
        switchInt(move _298) -> [0: bb133, otherwise: bb128];
    }

    bb128: {
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_299);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = ConstraintSeeds;
        _306 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _307) -> [return: bb129, unwind: bb224];
    }

    bb129: {
        StorageDead(_307);
        _305 = anchor_lang::error::Error::with_account_name::<&str>(move _306, const "deposit_from_spot_market_vault") -> [return: bb130, unwind: bb224];
    }

    bb130: {
        _485 = const true;
        StorageDead(_306);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _558 = (((_98.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _310 = &(*_558);
        _309 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _310) -> [return: bb131, unwind: bb241];
    }

    bb131: {
        StorageDead(_310);
        StorageLive(_311);
        _311 = _278;
        _308 = (move _309, move _311);
        StorageDead(_311);
        StorageDead(_309);
        _485 = const false;
        _304 = anchor_lang::error::Error::with_pubkeys(move _305, move _308) -> [return: bb132, unwind: bb241];
    }

    bb132: {
        StorageDead(_308);
        _485 = const false;
        StorageDead(_305);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _304);
        StorageDead(_304);
        StorageDead(_298);
        StorageDead(_297);
        goto -> bb204;
    }

    bb133: {
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_299);
        _297 = const ();
        StorageDead(_298);
        StorageDead(_297);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &_98;
        _316 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _317) -> [return: bb134, unwind: bb224];
    }

    bb134: {
        _315 = &(*_316);
        StorageDead(_317);
        _314 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _315) -> [return: bb135, unwind: bb224];
    }

    bb135: {
        StorageDead(_315);
        _313 = ((*_314).6: bool);
        switchInt(move _313) -> [0: bb136, otherwise: bb139];
    }

    bb136: {
        StorageDead(_316);
        StorageDead(_314);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = ConstraintMut;
        _320 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _321) -> [return: bb137, unwind: bb224];
    }

    bb137: {
        StorageDead(_321);
        _319 = anchor_lang::error::Error::with_account_name::<&str>(move _320, const "deposit_from_spot_market_vault") -> [return: bb138, unwind: bb224];
    }

    bb138: {
        StorageDead(_320);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _319);
        StorageDead(_319);
        StorageDead(_313);
        StorageDead(_312);
        goto -> bb204;
    }

    bb139: {
        StorageDead(_316);
        StorageDead(_314);
        _312 = const ();
        StorageDead(_313);
        StorageDead(_312);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = const b"spot_market_vault";
        _331 = &(*_332);
        _330 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _331) -> [return: bb140, unwind: bb224];
    }

    bb140: {
        _329 = &(*_330);
        StorageDead(_331);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = _8;
        _336 = core::num::<impl u16>::to_le_bytes(move _337) -> [return: bb141, unwind: bb224];
    }

    bb141: {
        _335 = &_336;
        StorageDead(_337);
        _334 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _335) -> [return: bb142, unwind: bb224];
    }

    bb142: {
        _333 = &(*_334);
        StorageDead(_335);
        _328 = [move _329, move _333];
        StorageDead(_333);
        StorageDead(_329);
        _327 = &_328;
        _326 = &(*_327);
        _325 = move _326 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_326);
        StorageLive(_338);
        StorageLive(_339);
        _339 = &_1;
        _479 = deref_copy (*_339);
        _338 = &(*_479);
        _324 = anchor_lang::prelude::Pubkey::find_program_address(move _325, move _338) -> [return: bb143, unwind: bb224];
    }

    bb143: {
        StorageDead(_338);
        StorageDead(_325);
        StorageLive(_322);
        _322 = (_324.0: anchor_lang::prelude::Pubkey);
        StorageLive(_323);
        _323 = (_324.1: u8);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_324);
        StorageLive(_340);
        _340 = _323;
        ((*_4).1: u8) = move _340;
        StorageDead(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _559 = (((_113.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _345 = &(*_559);
        _344 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _345) -> [return: bb144, unwind: bb224];
    }

    bb144: {
        _343 = &_344;
        StorageDead(_345);
        StorageLive(_346);
        _346 = &_322;
        _342 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _343, move _346) -> [return: bb145, unwind: bb224];
    }

    bb145: {
        switchInt(move _342) -> [0: bb151, otherwise: bb146];
    }

    bb146: {
        StorageDead(_346);
        StorageDead(_344);
        StorageDead(_343);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = ConstraintSeeds;
        _350 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _351) -> [return: bb147, unwind: bb224];
    }

    bb147: {
        StorageDead(_351);
        _349 = anchor_lang::error::Error::with_account_name::<&str>(move _350, const "deposit_to_spot_market_vault") -> [return: bb148, unwind: bb224];
    }

    bb148: {
        _484 = const true;
        StorageDead(_350);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _560 = (((_113.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _354 = &(*_560);
        _353 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _354) -> [return: bb149, unwind: bb239];
    }

    bb149: {
        StorageDead(_354);
        StorageLive(_355);
        _355 = _322;
        _352 = (move _353, move _355);
        StorageDead(_355);
        StorageDead(_353);
        _484 = const false;
        _348 = anchor_lang::error::Error::with_pubkeys(move _349, move _352) -> [return: bb150, unwind: bb239];
    }

    bb150: {
        StorageDead(_352);
        _484 = const false;
        StorageDead(_349);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _348);
        StorageDead(_348);
        StorageDead(_342);
        StorageDead(_341);
        goto -> bb203;
    }

    bb151: {
        StorageDead(_346);
        StorageDead(_344);
        StorageDead(_343);
        _341 = const ();
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_113;
        _360 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _361) -> [return: bb152, unwind: bb224];
    }

    bb152: {
        _359 = &(*_360);
        StorageDead(_361);
        _358 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _359) -> [return: bb153, unwind: bb224];
    }

    bb153: {
        StorageDead(_359);
        _357 = ((*_358).6: bool);
        switchInt(move _357) -> [0: bb154, otherwise: bb157];
    }

    bb154: {
        StorageDead(_360);
        StorageDead(_358);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = ConstraintMut;
        _364 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _365) -> [return: bb155, unwind: bb224];
    }

    bb155: {
        StorageDead(_365);
        _363 = anchor_lang::error::Error::with_account_name::<&str>(move _364, const "deposit_to_spot_market_vault") -> [return: bb156, unwind: bb224];
    }

    bb156: {
        StorageDead(_364);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _363);
        StorageDead(_363);
        StorageDead(_357);
        StorageDead(_356);
        goto -> bb203;
    }

    bb157: {
        StorageDead(_360);
        StorageDead(_358);
        _356 = const ();
        StorageDead(_357);
        StorageDead(_356);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = const b"spot_market_vault";
        _375 = &(*_376);
        _374 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _375) -> [return: bb158, unwind: bb224];
    }

    bb158: {
        _373 = &(*_374);
        StorageDead(_375);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = _9;
        _380 = core::num::<impl u16>::to_le_bytes(move _381) -> [return: bb159, unwind: bb224];
    }

    bb159: {
        _379 = &_380;
        StorageDead(_381);
        _378 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _379) -> [return: bb160, unwind: bb224];
    }

    bb160: {
        _377 = &(*_378);
        StorageDead(_379);
        _372 = [move _373, move _377];
        StorageDead(_377);
        StorageDead(_373);
        _371 = &_372;
        _370 = &(*_371);
        _369 = move _370 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_370);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &_1;
        _480 = deref_copy (*_383);
        _382 = &(*_480);
        _368 = anchor_lang::prelude::Pubkey::find_program_address(move _369, move _382) -> [return: bb161, unwind: bb224];
    }

    bb161: {
        StorageDead(_382);
        StorageDead(_369);
        StorageLive(_366);
        _366 = (_368.0: anchor_lang::prelude::Pubkey);
        StorageLive(_367);
        _367 = (_368.1: u8);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_368);
        StorageLive(_384);
        _384 = _367;
        ((*_4).2: u8) = move _384;
        StorageDead(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _561 = (((_128.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _389 = &(*_561);
        _388 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _389) -> [return: bb162, unwind: bb224];
    }

    bb162: {
        _387 = &_388;
        StorageDead(_389);
        StorageLive(_390);
        _390 = &_366;
        _386 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _387, move _390) -> [return: bb163, unwind: bb224];
    }

    bb163: {
        switchInt(move _386) -> [0: bb169, otherwise: bb164];
    }

    bb164: {
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = ConstraintSeeds;
        _394 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _395) -> [return: bb165, unwind: bb224];
    }

    bb165: {
        StorageDead(_395);
        _393 = anchor_lang::error::Error::with_account_name::<&str>(move _394, const "borrow_from_spot_market_vault") -> [return: bb166, unwind: bb224];
    }

    bb166: {
        _483 = const true;
        StorageDead(_394);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _562 = (((_128.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _398 = &(*_562);
        _397 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _398) -> [return: bb167, unwind: bb237];
    }

    bb167: {
        StorageDead(_398);
        StorageLive(_399);
        _399 = _366;
        _396 = (move _397, move _399);
        StorageDead(_399);
        StorageDead(_397);
        _483 = const false;
        _392 = anchor_lang::error::Error::with_pubkeys(move _393, move _396) -> [return: bb168, unwind: bb237];
    }

    bb168: {
        StorageDead(_396);
        _483 = const false;
        StorageDead(_393);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _392);
        StorageDead(_392);
        StorageDead(_386);
        StorageDead(_385);
        goto -> bb202;
    }

    bb169: {
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_387);
        _385 = const ();
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_128;
        _404 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _405) -> [return: bb170, unwind: bb224];
    }

    bb170: {
        _403 = &(*_404);
        StorageDead(_405);
        _402 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _403) -> [return: bb171, unwind: bb224];
    }

    bb171: {
        StorageDead(_403);
        _401 = ((*_402).6: bool);
        switchInt(move _401) -> [0: bb172, otherwise: bb175];
    }

    bb172: {
        StorageDead(_404);
        StorageDead(_402);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = ConstraintMut;
        _408 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _409) -> [return: bb173, unwind: bb224];
    }

    bb173: {
        StorageDead(_409);
        _407 = anchor_lang::error::Error::with_account_name::<&str>(move _408, const "borrow_from_spot_market_vault") -> [return: bb174, unwind: bb224];
    }

    bb174: {
        StorageDead(_408);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _407);
        StorageDead(_407);
        StorageDead(_401);
        StorageDead(_400);
        goto -> bb202;
    }

    bb175: {
        StorageDead(_404);
        StorageDead(_402);
        _400 = const ();
        StorageDead(_401);
        StorageDead(_400);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = const b"spot_market_vault";
        _419 = &(*_420);
        _418 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _419) -> [return: bb176, unwind: bb224];
    }

    bb176: {
        _417 = &(*_418);
        StorageDead(_419);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = _10;
        _424 = core::num::<impl u16>::to_le_bytes(move _425) -> [return: bb177, unwind: bb224];
    }

    bb177: {
        _423 = &_424;
        StorageDead(_425);
        _422 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _423) -> [return: bb178, unwind: bb224];
    }

    bb178: {
        _421 = &(*_422);
        StorageDead(_423);
        _416 = [move _417, move _421];
        StorageDead(_421);
        StorageDead(_417);
        _415 = &_416;
        _414 = &(*_415);
        _413 = move _414 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_414);
        StorageLive(_426);
        StorageLive(_427);
        _427 = &_1;
        _481 = deref_copy (*_427);
        _426 = &(*_481);
        _412 = anchor_lang::prelude::Pubkey::find_program_address(move _413, move _426) -> [return: bb179, unwind: bb224];
    }

    bb179: {
        StorageDead(_426);
        StorageDead(_413);
        StorageLive(_410);
        _410 = (_412.0: anchor_lang::prelude::Pubkey);
        StorageLive(_411);
        _411 = (_412.1: u8);
        StorageDead(_427);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_412);
        StorageLive(_428);
        _428 = _411;
        ((*_4).3: u8) = move _428;
        StorageDead(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _563 = (((_143.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _433 = &(*_563);
        _432 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _433) -> [return: bb180, unwind: bb224];
    }

    bb180: {
        _431 = &_432;
        StorageDead(_433);
        StorageLive(_434);
        _434 = &_410;
        _430 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _431, move _434) -> [return: bb181, unwind: bb224];
    }

    bb181: {
        switchInt(move _430) -> [0: bb187, otherwise: bb182];
    }

    bb182: {
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_431);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = ConstraintSeeds;
        _438 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _439) -> [return: bb183, unwind: bb224];
    }

    bb183: {
        StorageDead(_439);
        _437 = anchor_lang::error::Error::with_account_name::<&str>(move _438, const "borrow_to_spot_market_vault") -> [return: bb184, unwind: bb224];
    }

    bb184: {
        _482 = const true;
        StorageDead(_438);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _564 = (((_143.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _442 = &(*_564);
        _441 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _442) -> [return: bb185, unwind: bb235];
    }

    bb185: {
        StorageDead(_442);
        StorageLive(_443);
        _443 = _410;
        _440 = (move _441, move _443);
        StorageDead(_443);
        StorageDead(_441);
        _482 = const false;
        _436 = anchor_lang::error::Error::with_pubkeys(move _437, move _440) -> [return: bb186, unwind: bb235];
    }

    bb186: {
        StorageDead(_440);
        _482 = const false;
        StorageDead(_437);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _436);
        StorageDead(_436);
        StorageDead(_430);
        StorageDead(_429);
        goto -> bb201;
    }

    bb187: {
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_431);
        _429 = const ();
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &_143;
        _448 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _449) -> [return: bb188, unwind: bb224];
    }

    bb188: {
        _447 = &(*_448);
        StorageDead(_449);
        _446 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _447) -> [return: bb189, unwind: bb224];
    }

    bb189: {
        StorageDead(_447);
        _445 = ((*_446).6: bool);
        switchInt(move _445) -> [0: bb190, otherwise: bb193];
    }

    bb190: {
        StorageDead(_448);
        StorageDead(_446);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = ConstraintMut;
        _452 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _453) -> [return: bb191, unwind: bb224];
    }

    bb191: {
        StorageDead(_453);
        _451 = anchor_lang::error::Error::with_account_name::<&str>(move _452, const "borrow_to_spot_market_vault") -> [return: bb192, unwind: bb224];
    }

    bb192: {
        StorageDead(_452);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _451);
        StorageDead(_451);
        StorageDead(_445);
        StorageDead(_444);
        goto -> bb201;
    }

    bb193: {
        StorageDead(_448);
        StorageDead(_446);
        _444 = const ();
        StorageDead(_445);
        StorageDead(_444);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _565 = (((_83.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _458 = &(*_565);
        _457 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _458) -> [return: bb194, unwind: bb224];
    }

    bb194: {
        StorageDead(_458);
        _456 = &((*_457).3: anchor_lang::prelude::Pubkey);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &_158;
        _461 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _462) -> [return: bb195, unwind: bb224];
    }

    bb195: {
        StorageDead(_462);
        _460 = &_461;
        _459 = &(*_460);
        _455 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _456, move _459) -> [return: bb196, unwind: bb224];
    }

    bb196: {
        switchInt(move _455) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        StorageDead(_459);
        StorageDead(_456);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_457);
        _454 = const ();
        StorageDead(_455);
        StorageDead(_454);
        StorageLive(_467);
        StorageLive(_468);
        _468 = move _23;
        StorageLive(_469);
        _469 = move _38;
        StorageLive(_470);
        _470 = move _53;
        StorageLive(_471);
        _471 = move _68;
        StorageLive(_472);
        _472 = move _83;
        StorageLive(_473);
        _473 = move _98;
        StorageLive(_474);
        _474 = move _113;
        StorageLive(_475);
        _475 = move _128;
        StorageLive(_476);
        _476 = move _143;
        StorageLive(_477);
        _477 = move _158;
        _467 = instructions::user::TransferPools::<'_> { from_user: move _468, to_user: move _469, user_stats: move _470, authority: move _471, state: move _472, deposit_from_spot_market_vault: move _473, deposit_to_spot_market_vault: move _474, borrow_from_spot_market_vault: move _475, borrow_to_spot_market_vault: move _476, drift_signer: move _477 };
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Ok(move _467);
        StorageDead(_467);
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_158);
        StorageDead(_143);
        StorageDead(_128);
        StorageDead(_113);
        StorageDead(_98);
        StorageDead(_83);
        StorageDead(_68);
        StorageDead(_53);
        StorageDead(_38);
        StorageDead(_23);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb220;
    }

    bb198: {
        StorageDead(_459);
        StorageDead(_456);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_457);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = ConstraintRaw;
        _465 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _466) -> [return: bb199, unwind: bb224];
    }

    bb199: {
        StorageDead(_466);
        _464 = anchor_lang::error::Error::with_account_name::<&str>(move _465, const "drift_signer") -> [return: bb200, unwind: bb224];
    }

    bb200: {
        StorageDead(_465);
        _0 = std::result::Result::<instructions::user::TransferPools<'_>, anchor_lang::error::Error>::Err(move _464);
        StorageDead(_464);
        StorageDead(_455);
        StorageDead(_454);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_323);
        StorageDead(_322);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb208;
    }

    bb205: {
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb208;
    }

    bb206: {
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb208;
    }

    bb207: {
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb208;
    }

    bb208: {
        drop(_158) -> [return: bb209, unwind: bb225];
    }

    bb209: {
        StorageDead(_158);
        drop(_143) -> [return: bb210, unwind: bb226];
    }

    bb210: {
        StorageDead(_143);
        drop(_128) -> [return: bb211, unwind: bb227];
    }

    bb211: {
        StorageDead(_128);
        drop(_113) -> [return: bb212, unwind: bb228];
    }

    bb212: {
        StorageDead(_113);
        drop(_98) -> [return: bb213, unwind: bb229];
    }

    bb213: {
        StorageDead(_98);
        drop(_83) -> [return: bb214, unwind: bb230];
    }

    bb214: {
        StorageDead(_83);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_68);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_53);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_38);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_23);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_6);
        goto -> bb220;
    }

    bb220: {
        return;
    }

    bb221 (cleanup): {
        drop(_256) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_221) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_186) -> [return: bb244, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_158) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_143) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        drop(_128) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        drop(_113) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        drop(_98) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        drop(_83) -> [return: bb230, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        resume;
    }

    bb231: {
        _512 = discriminant(_187);
        _490 = const false;
        _491 = const false;
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &_68;
        _195 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _196) -> [return: bb79, unwind: bb224];
    }

    bb232: {
        _514 = discriminant(_222);
        _488 = const false;
        _489 = const false;
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_68;
        _230 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _231) -> [return: bb97, unwind: bb224];
    }

    bb233: {
        _516 = discriminant(_257);
        _486 = const false;
        _487 = const false;
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &_68;
        _265 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _266) -> [return: bb115, unwind: bb224];
    }

    bb234 (cleanup): {
        drop(_437) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        switchInt(_482) -> [0: bb224, otherwise: bb234];
    }

    bb236 (cleanup): {
        drop(_393) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        switchInt(_483) -> [0: bb224, otherwise: bb236];
    }

    bb238 (cleanup): {
        drop(_349) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        switchInt(_484) -> [0: bb224, otherwise: bb238];
    }

    bb240 (cleanup): {
        drop(_305) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_485) -> [0: bb224, otherwise: bb240];
    }

    bb242 (cleanup): {
        _544 = discriminant(_257);
        goto -> bb224;
    }

    bb243 (cleanup): {
        _545 = discriminant(_222);
        goto -> bb224;
    }

    bb244 (cleanup): {
        _546 = discriminant(_187);
        goto -> bb224;
    }

    bb245 (cleanup): {
        _547 = discriminant(_159);
        goto -> bb225;
    }

    bb246 (cleanup): {
        _548 = discriminant(_144);
        goto -> bb226;
    }

    bb247 (cleanup): {
        _549 = discriminant(_129);
        goto -> bb227;
    }

    bb248 (cleanup): {
        _550 = discriminant(_114);
        goto -> bb228;
    }

    bb249 (cleanup): {
        _551 = discriminant(_99);
        goto -> bb229;
    }

    bb250 (cleanup): {
        _552 = discriminant(_84);
        goto -> bb230;
    }

    bb251 (cleanup): {
        _553 = discriminant(_69);
        goto -> bb230;
    }

    bb252 (cleanup): {
        _554 = discriminant(_54);
        goto -> bb230;
    }

    bb253 (cleanup): {
        _555 = discriminant(_39);
        goto -> bb230;
    }

    bb254 (cleanup): {
        _556 = discriminant(_24);
        goto -> bb230;
    }
}

alloc314 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc313 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc312 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc311 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}
