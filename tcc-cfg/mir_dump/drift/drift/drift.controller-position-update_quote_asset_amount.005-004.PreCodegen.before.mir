// MIR for `update_quote_asset_amount` before PreCodegen

fn update_quote_asset_amount(_1: &mut PerpPosition, _2: &mut PerpMarket, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug position => _1;
    debug market => _2;
    debug delta => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: !;
    let mut _8: ();
    let _9: ();
    let mut _10: bool;
    let mut _11: i64;
    let mut _12: bool;
    let mut _13: i64;
    let mut _14: u32;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _16: std::result::Result<u32, error::ErrorCode>;
    let mut _17: u32;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u32;
    let mut _23: i64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: i64;
    let mut _33: i128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _35: std::result::Result<i128, error::ErrorCode>;
    let mut _36: i128;
    let mut _37: i128;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _39: std::result::Result<i128, error::ErrorCode>;
    let mut _40: i64;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: i128;
    let mut _46: isize;
    let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: i128;
    let _51: ();
    let mut _52: bool;
    let mut _53: i64;
    let mut _54: bool;
    let mut _55: i64;
    let mut _56: u32;
    let mut _57: u32;
    let mut _58: ();
    scope 1 {
        debug residual => _19;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _22;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _29;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _32;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _42;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _45;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _47;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _50;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Eq(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb38;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).2: i64);
        _10 = Eq(move _11, const 0_i64);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).1: i64);
        _12 = Eq(move _13, const 0_i64);
        switchInt(move _12) -> [0: bb12, otherwise: bb5];
    }

    bb4: {
        StorageDead(_11);
        goto -> bb13;
    }

    bb5: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_2).20: u32);
        _16 = <u32 as SafeMath>::safe_add(move _17, const 1_u32) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        _15 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: u32);
        _14 = _22;
        StorageDead(_22);
        ((*_2).20: u32) = move _14;
        StorageDead(_14);
        StorageDead(_15);
        _9 = const ();
        goto -> bb14;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb38;
    }

    bb12: {
        StorageDead(_13);
        goto -> bb13;
    }

    bb13: {
        _9 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((*_1).2: i64);
        StorageLive(_27);
        _27 = _3;
        _25 = <i64 as SafeMath>::safe_add(move _26, move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb9];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_24 as Continue).0: i64);
        _23 = _32;
        StorageDead(_32);
        ((*_1).2: i64) = move _23;
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = (((*_2).1: state::perp_market::AMM).18: i128);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _3;
        _39 = <i64 as Cast>::cast::<i128>(move _40) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_29);
        _29 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_23);
        StorageDead(_24);
        goto -> bb38;
    }

    bb20: {
        StorageDead(_40);
        _38 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb22, 1: bb23, otherwise: bb9];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_38 as Continue).0: i128);
        _37 = _45;
        StorageDead(_45);
        _35 = <i128 as SafeMath>::safe_add(move _36, move _37) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_42);
        _42 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb37;
    }

    bb25: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_35);
        _46 = discriminant(_34);
        switchInt(move _46) -> [0: bb27, 1: bb28, otherwise: bb9];
    }

    bb27: {
        StorageLive(_50);
        _50 = ((_34 as Continue).0: i128);
        _33 = _50;
        StorageDead(_50);
        (((*_2).1: state::perp_market::AMM).18: i128) = move _33;
        StorageDead(_33);
        StorageDead(_38);
        StorageDead(_34);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = ((*_1).2: i64);
        _52 = Eq(move _53, const 0_i64);
        switchInt(move _52) -> [0: bb31, otherwise: bb30];
    }

    bb28: {
        StorageLive(_47);
        _47 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb37;
    }

    bb30: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = ((*_1).1: i64);
        _54 = Eq(move _55, const 0_i64);
        switchInt(move _54) -> [0: bb34, otherwise: bb32];
    }

    bb31: {
        StorageDead(_53);
        goto -> bb35;
    }

    bb32: {
        StorageDead(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = ((*_2).20: u32);
        _56 = core::num::<impl u32>::saturating_sub(move _57, const 1_u32) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_57);
        ((*_2).20: u32) = move _56;
        StorageDead(_56);
        _51 = const ();
        goto -> bb36;
    }

    bb34: {
        StorageDead(_55);
        goto -> bb35;
    }

    bb35: {
        _51 = const ();
        goto -> bb36;
    }

    bb36: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_58);
        _58 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _58);
        StorageDead(_58);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_33);
        StorageDead(_38);
        StorageDead(_34);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
