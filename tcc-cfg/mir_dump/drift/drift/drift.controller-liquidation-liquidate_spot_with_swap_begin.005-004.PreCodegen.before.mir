// MIR for `controller::liquidation::liquidate_spot_with_swap_begin` before PreCodegen

fn controller::liquidation::liquidate_spot_with_swap_begin(_1: u16, _2: u16, _3: u64, _4: &mut User, _5: &anchor_lang::prelude::Pubkey, _6: &mut UserStats, _7: &mut User, _8: &anchor_lang::prelude::Pubkey, _9: &mut UserStats, _10: &PerpMarketMap<'_>, _11: &SpotMarketMap<'_>, _12: &mut OracleMap<'_>, _13: i64, _14: u64, _15: &state::state::State) -> std::result::Result<(), error::ErrorCode> {
    debug asset_market_index => _1;
    debug liability_market_index => _2;
    debug swap_amount_in => _3;
    debug user => _4;
    debug user_key => _5;
    debug user_stats => _6;
    debug liquidator => _7;
    debug liquidator_key => _8;
    debug _liquidator_stats => _9;
    debug perp_market_map => _10;
    debug spot_market_map => _11;
    debug oracle_map => _12;
    debug now => _13;
    debug slot => _14;
    debug state => _15;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _16: u32;
    let mut _18: u16;
    let mut _20: u8;
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _23: std::result::Result<(), error::ErrorCode>;
    let mut _24: bool;
    let mut _25: &state::user::User;
    let mut _26: ();
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 2];
    let _38: &[&str; 2];
    let _39: [&str; 2];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &error::ErrorCode;
    let _46: &error::ErrorCode;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 1];
    let _57: &[&str; 1];
    let _58: [&str; 1];
    let mut _59: error::ErrorCode;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: bool;
    let mut _69: &state::user::User;
    let mut _70: ();
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 2];
    let _82: &[&str; 2];
    let _83: [&str; 2];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let mut _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: [core::fmt::rt::Argument<'_>; 1];
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &error::ErrorCode;
    let _90: &error::ErrorCode;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 1];
    let _101: &[&str; 1];
    let _102: [&str; 1];
    let mut _103: error::ErrorCode;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _111: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _112: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _113: &u16;
    let _114: &u16;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _120: ();
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _122: std::result::Result<(), error::ErrorCode>;
    let mut _123: bool;
    let mut _124: &state::spot_market::SpotMarket;
    let _125: &state::spot_market::SpotMarket;
    let mut _126: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _127: state::paused_operations::SpotOperation;
    let mut _128: ();
    let _130: ();
    let mut _131: &str;
    let _132: &str;
    let mut _133: &std::string::String;
    let _134: &std::string::String;
    let _135: std::string::String;
    let mut _137: std::fmt::Arguments<'_>;
    let mut _138: &[&str];
    let mut _139: &[&str; 2];
    let _140: &[&str; 2];
    let _141: [&str; 2];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let mut _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: [core::fmt::rt::Argument<'_>; 1];
    let mut _146: core::fmt::rt::Argument<'_>;
    let mut _147: &error::ErrorCode;
    let _148: &error::ErrorCode;
    let _149: ();
    let mut _150: &str;
    let _151: &str;
    let mut _152: &std::string::String;
    let _153: &std::string::String;
    let _154: std::string::String;
    let mut _156: std::fmt::Arguments<'_>;
    let mut _157: &[&str];
    let mut _158: &[&str; 1];
    let _159: &[&str; 1];
    let _160: [&str; 1];
    let mut _161: &[core::fmt::rt::Argument<'_>];
    let mut _162: &[core::fmt::rt::Argument<'_>; 1];
    let _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: [core::fmt::rt::Argument<'_>; 1];
    let mut _165: core::fmt::rt::Argument<'_>;
    let mut _166: &u16;
    let _167: &u16;
    let mut _168: error::ErrorCode;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _176: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _177: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _178: &u16;
    let _179: &u16;
    let mut _180: isize;
    let mut _182: !;
    let mut _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _185: ();
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _187: std::result::Result<(), error::ErrorCode>;
    let mut _188: bool;
    let mut _189: &state::spot_market::SpotMarket;
    let _190: &state::spot_market::SpotMarket;
    let mut _191: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _192: state::paused_operations::SpotOperation;
    let mut _193: ();
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 2];
    let _205: &[&str; 2];
    let _206: [&str; 2];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 1];
    let _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: [core::fmt::rt::Argument<'_>; 1];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &error::ErrorCode;
    let _213: &error::ErrorCode;
    let _214: ();
    let mut _215: &str;
    let _216: &str;
    let mut _217: &std::string::String;
    let _218: &std::string::String;
    let _219: std::string::String;
    let mut _221: std::fmt::Arguments<'_>;
    let mut _222: &[&str];
    let mut _223: &[&str; 1];
    let _224: &[&str; 1];
    let _225: [&str; 1];
    let mut _226: &[core::fmt::rt::Argument<'_>];
    let mut _227: &[core::fmt::rt::Argument<'_>; 1];
    let _228: &[core::fmt::rt::Argument<'_>; 1];
    let _229: [core::fmt::rt::Argument<'_>; 1];
    let mut _230: core::fmt::rt::Argument<'_>;
    let mut _231: &u16;
    let _232: &u16;
    let mut _233: error::ErrorCode;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _239: ();
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _241: std::result::Result<(), error::ErrorCode>;
    let mut _242: bool;
    let mut _243: u8;
    let mut _244: &state::spot_market::SpotMarket;
    let mut _245: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _246: u8;
    let mut _247: &state::spot_market::SpotMarket;
    let mut _248: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _249: ();
    let _251: ();
    let mut _252: &str;
    let _253: &str;
    let mut _254: &std::string::String;
    let _255: &std::string::String;
    let _256: std::string::String;
    let mut _258: std::fmt::Arguments<'_>;
    let mut _259: &[&str];
    let mut _260: &[&str; 2];
    let _261: &[&str; 2];
    let _262: [&str; 2];
    let mut _263: &[core::fmt::rt::Argument<'_>];
    let mut _264: &[core::fmt::rt::Argument<'_>; 1];
    let _265: &[core::fmt::rt::Argument<'_>; 1];
    let _266: [core::fmt::rt::Argument<'_>; 1];
    let mut _267: core::fmt::rt::Argument<'_>;
    let mut _268: &error::ErrorCode;
    let _269: &error::ErrorCode;
    let _270: ();
    let mut _271: &str;
    let _272: &str;
    let mut _273: &std::string::String;
    let _274: &std::string::String;
    let _275: std::string::String;
    let mut _277: std::fmt::Arguments<'_>;
    let mut _278: &[&str];
    let mut _279: &[&str; 3];
    let _280: &[&str; 3];
    let _281: [&str; 3];
    let mut _282: &[core::fmt::rt::Argument<'_>];
    let mut _283: &[core::fmt::rt::Argument<'_>; 2];
    let _284: &[core::fmt::rt::Argument<'_>; 2];
    let _285: [core::fmt::rt::Argument<'_>; 2];
    let mut _286: core::fmt::rt::Argument<'_>;
    let mut _287: &u8;
    let _288: &u8;
    let _289: &state::spot_market::SpotMarket;
    let mut _290: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _291: core::fmt::rt::Argument<'_>;
    let mut _292: &u8;
    let _293: &u8;
    let _294: &state::spot_market::SpotMarket;
    let mut _295: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _296: error::ErrorCode;
    let mut _297: isize;
    let mut _299: !;
    let mut _300: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _302: ();
    let mut _303: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _304: ();
    let mut _305: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _312: (u128, i64, u32, u32, u8, i64);
    let mut _314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _315: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _316: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _317: &u16;
    let _318: &u16;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _326: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _327: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails)>;
    let mut _328: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let mut _329: &mut state::oracle_map::OracleMap<'_>;
    let mut _330: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _331: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _332: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _333: &state::spot_market::SpotMarket;
    let _334: &state::spot_market::SpotMarket;
    let mut _335: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _336: isize;
    let mut _338: !;
    let mut _339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _341: ();
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _343: std::result::Result<(), error::ErrorCode>;
    let mut _344: &mut state::spot_market::SpotMarket;
    let mut _345: &mut state::spot_market::SpotMarket;
    let mut _346: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _347: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _348: &state::oracle::OraclePriceData;
    let mut _349: &state::state::ValidityGuardRails;
    let mut _350: i64;
    let mut _351: std::option::Option<math::oracle::DriftAction>;
    let mut _352: math::oracle::DriftAction;
    let mut _353: isize;
    let mut _355: !;
    let mut _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _359: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _360: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _361: &state::user::User;
    let mut _362: u16;
    let mut _363: isize;
    let mut _365: !;
    let mut _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _368: ();
    let mut _369: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _370: std::result::Result<(), error::ErrorCode>;
    let mut _371: bool;
    let mut _372: &state::spot_market::SpotBalanceType;
    let mut _373: &state::spot_market::SpotBalanceType;
    let _374: state::spot_market::SpotBalanceType;
    let mut _375: ();
    let _377: ();
    let mut _378: &str;
    let _379: &str;
    let mut _380: &std::string::String;
    let _381: &std::string::String;
    let _382: std::string::String;
    let mut _384: std::fmt::Arguments<'_>;
    let mut _385: &[&str];
    let mut _386: &[&str; 2];
    let _387: &[&str; 2];
    let _388: [&str; 2];
    let mut _389: &[core::fmt::rt::Argument<'_>];
    let mut _390: &[core::fmt::rt::Argument<'_>; 1];
    let _391: &[core::fmt::rt::Argument<'_>; 1];
    let _392: [core::fmt::rt::Argument<'_>; 1];
    let mut _393: core::fmt::rt::Argument<'_>;
    let mut _394: &error::ErrorCode;
    let _395: &error::ErrorCode;
    let _396: ();
    let mut _397: &str;
    let _398: &str;
    let mut _399: error::ErrorCode;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _406: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _407: std::result::Result<u128, error::ErrorCode>;
    let mut _408: &state::user::SpotPosition;
    let mut _409: &state::spot_market::SpotMarket;
    let _410: &state::spot_market::SpotMarket;
    let mut _411: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _412: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _413: isize;
    let mut _415: !;
    let mut _416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _418: ();
    let mut _419: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _420: std::result::Result<(), error::ErrorCode>;
    let mut _421: bool;
    let mut _422: u128;
    let mut _423: ();
    let _425: ();
    let mut _426: &str;
    let _427: &str;
    let mut _428: &std::string::String;
    let _429: &std::string::String;
    let _430: std::string::String;
    let mut _432: std::fmt::Arguments<'_>;
    let mut _433: &[&str];
    let mut _434: &[&str; 2];
    let _435: &[&str; 2];
    let _436: [&str; 2];
    let mut _437: &[core::fmt::rt::Argument<'_>];
    let mut _438: &[core::fmt::rt::Argument<'_>; 1];
    let _439: &[core::fmt::rt::Argument<'_>; 1];
    let _440: [core::fmt::rt::Argument<'_>; 1];
    let mut _441: core::fmt::rt::Argument<'_>;
    let mut _442: &error::ErrorCode;
    let _443: &error::ErrorCode;
    let _444: ();
    let mut _445: &str;
    let _446: &str;
    let mut _447: &std::string::String;
    let _448: &std::string::String;
    let _449: std::string::String;
    let mut _451: std::fmt::Arguments<'_>;
    let mut _452: &[&str];
    let mut _453: &[&str; 1];
    let _454: &[&str; 1];
    let _455: [&str; 1];
    let mut _456: &[core::fmt::rt::Argument<'_>];
    let mut _457: &[core::fmt::rt::Argument<'_>; 1];
    let _458: &[core::fmt::rt::Argument<'_>; 1];
    let _459: [core::fmt::rt::Argument<'_>; 1];
    let mut _460: core::fmt::rt::Argument<'_>;
    let mut _461: &u16;
    let _462: &u16;
    let mut _463: error::ErrorCode;
    let mut _464: isize;
    let mut _466: !;
    let mut _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _470: u128;
    let mut _471: i64;
    let mut _472: u32;
    let mut _473: &state::spot_market::SpotMarket;
    let mut _474: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _475: u32;
    let mut _476: &state::spot_market::SpotMarket;
    let mut _477: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _478: u8;
    let mut _479: &state::spot_market::SpotMarket;
    let mut _480: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _481: i64;
    let mut _488: (i64, u32, u32, u32, u8, i64);
    let mut _490: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _491: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _492: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _493: &u16;
    let _494: &u16;
    let mut _495: isize;
    let mut _497: !;
    let mut _498: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _502: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _503: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails)>;
    let mut _504: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let mut _505: &mut state::oracle_map::OracleMap<'_>;
    let mut _506: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _507: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _508: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _509: &state::spot_market::SpotMarket;
    let _510: &state::spot_market::SpotMarket;
    let mut _511: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _512: isize;
    let mut _514: !;
    let mut _515: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _517: ();
    let mut _518: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _519: std::result::Result<(), error::ErrorCode>;
    let mut _520: &mut state::spot_market::SpotMarket;
    let mut _521: &mut state::spot_market::SpotMarket;
    let mut _522: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _523: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _524: &state::oracle::OraclePriceData;
    let mut _525: &state::state::ValidityGuardRails;
    let mut _526: i64;
    let mut _527: std::option::Option<math::oracle::DriftAction>;
    let mut _528: math::oracle::DriftAction;
    let mut _529: isize;
    let mut _531: !;
    let mut _532: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _535: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _536: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _537: &state::user::User;
    let mut _538: u16;
    let mut _539: isize;
    let mut _541: !;
    let mut _542: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _544: ();
    let mut _545: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _546: std::result::Result<(), error::ErrorCode>;
    let mut _547: bool;
    let mut _548: &state::spot_market::SpotBalanceType;
    let mut _549: &state::spot_market::SpotBalanceType;
    let _550: state::spot_market::SpotBalanceType;
    let mut _551: ();
    let _553: ();
    let mut _554: &str;
    let _555: &str;
    let mut _556: &std::string::String;
    let _557: &std::string::String;
    let _558: std::string::String;
    let mut _560: std::fmt::Arguments<'_>;
    let mut _561: &[&str];
    let mut _562: &[&str; 2];
    let _563: &[&str; 2];
    let _564: [&str; 2];
    let mut _565: &[core::fmt::rt::Argument<'_>];
    let mut _566: &[core::fmt::rt::Argument<'_>; 1];
    let _567: &[core::fmt::rt::Argument<'_>; 1];
    let _568: [core::fmt::rt::Argument<'_>; 1];
    let mut _569: core::fmt::rt::Argument<'_>;
    let mut _570: &error::ErrorCode;
    let _571: &error::ErrorCode;
    let _572: ();
    let mut _573: &str;
    let _574: &str;
    let mut _575: error::ErrorCode;
    let mut _576: isize;
    let mut _578: !;
    let mut _579: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _582: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _583: std::result::Result<u128, error::ErrorCode>;
    let mut _584: &state::user::SpotPosition;
    let mut _585: &state::spot_market::SpotMarket;
    let _586: &state::spot_market::SpotMarket;
    let mut _587: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _588: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _589: isize;
    let mut _591: !;
    let mut _592: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _594: ();
    let mut _595: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _596: std::result::Result<(), error::ErrorCode>;
    let mut _597: bool;
    let mut _598: u128;
    let mut _599: ();
    let _601: ();
    let mut _602: &str;
    let _603: &str;
    let mut _604: &std::string::String;
    let _605: &std::string::String;
    let _606: std::string::String;
    let mut _608: std::fmt::Arguments<'_>;
    let mut _609: &[&str];
    let mut _610: &[&str; 2];
    let _611: &[&str; 2];
    let _612: [&str; 2];
    let mut _613: &[core::fmt::rt::Argument<'_>];
    let mut _614: &[core::fmt::rt::Argument<'_>; 1];
    let _615: &[core::fmt::rt::Argument<'_>; 1];
    let _616: [core::fmt::rt::Argument<'_>; 1];
    let mut _617: core::fmt::rt::Argument<'_>;
    let mut _618: &error::ErrorCode;
    let _619: &error::ErrorCode;
    let _620: ();
    let mut _621: &str;
    let _622: &str;
    let mut _623: &std::string::String;
    let _624: &std::string::String;
    let _625: std::string::String;
    let mut _627: std::fmt::Arguments<'_>;
    let mut _628: &[&str];
    let mut _629: &[&str; 1];
    let _630: &[&str; 1];
    let _631: [&str; 1];
    let mut _632: &[core::fmt::rt::Argument<'_>];
    let mut _633: &[core::fmt::rt::Argument<'_>; 1];
    let _634: &[core::fmt::rt::Argument<'_>; 1];
    let _635: [core::fmt::rt::Argument<'_>; 1];
    let mut _636: core::fmt::rt::Argument<'_>;
    let mut _637: &u16;
    let _638: &u16;
    let mut _639: error::ErrorCode;
    let mut _640: isize;
    let mut _642: !;
    let mut _643: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _646: i64;
    let mut _647: u32;
    let mut _648: &state::spot_market::SpotMarket;
    let mut _649: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _650: u32;
    let mut _651: &state::spot_market::SpotMarket;
    let mut _652: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _653: u32;
    let mut _654: &state::spot_market::SpotMarket;
    let mut _655: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _656: u8;
    let mut _657: &state::spot_market::SpotMarket;
    let mut _658: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _659: i64;
    let _660: ();
    let mut _661: bool;
    let mut _662: u8;
    let mut _663: bool;
    let mut _664: u8;
    let _665: ();
    let mut _666: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _667: std::result::Result<(), error::ErrorCode>;
    let mut _668: bool;
    let mut _669: i64;
    let mut _670: bool;
    let mut _671: i64;
    let mut _672: ();
    let _674: ();
    let mut _675: &str;
    let _676: &str;
    let mut _677: &std::string::String;
    let _678: &std::string::String;
    let _679: std::string::String;
    let mut _681: std::fmt::Arguments<'_>;
    let mut _682: &[&str];
    let mut _683: &[&str; 2];
    let _684: &[&str; 2];
    let _685: [&str; 2];
    let mut _686: &[core::fmt::rt::Argument<'_>];
    let mut _687: &[core::fmt::rt::Argument<'_>; 1];
    let _688: &[core::fmt::rt::Argument<'_>; 1];
    let _689: [core::fmt::rt::Argument<'_>; 1];
    let mut _690: core::fmt::rt::Argument<'_>;
    let mut _691: &error::ErrorCode;
    let _692: &error::ErrorCode;
    let _693: ();
    let mut _694: &str;
    let _695: &str;
    let mut _696: &std::string::String;
    let _697: &std::string::String;
    let _698: std::string::String;
    let mut _700: std::fmt::Arguments<'_>;
    let mut _701: &[&str];
    let mut _702: &[&str; 3];
    let _703: &[&str; 3];
    let _704: [&str; 3];
    let mut _705: &[core::fmt::rt::Argument<'_>];
    let mut _706: &[core::fmt::rt::Argument<'_>; 2];
    let _707: &[core::fmt::rt::Argument<'_>; 2];
    let _708: [core::fmt::rt::Argument<'_>; 2];
    let mut _709: core::fmt::rt::Argument<'_>;
    let mut _710: &i64;
    let _711: &i64;
    let mut _712: core::fmt::rt::Argument<'_>;
    let mut _713: &i64;
    let _714: &i64;
    let mut _715: error::ErrorCode;
    let mut _716: isize;
    let mut _718: !;
    let mut _719: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _722: state::margin_calculation::MarginContext;
    let mut _723: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _724: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _725: state::margin_calculation::MarginContext;
    let mut _726: u32;
    let mut _727: state::margin_calculation::MarketIdentifier;
    let mut _728: u16;
    let mut _729: isize;
    let mut _731: !;
    let mut _732: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _734: &state::user::User;
    let mut _735: i64;
    let mut _737: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _738: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _739: &mut state::user::User;
    let mut _740: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _741: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _742: &mut state::oracle_map::OracleMap<'_>;
    let mut _743: state::margin_calculation::MarginContext;
    let mut _744: &mut state::user::UserStats;
    let mut _745: i64;
    let mut _746: isize;
    let mut _748: !;
    let mut _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _751: ();
    let mut _752: bool;
    let mut _753: &state::user::User;
    let mut _754: bool;
    let mut _755: &state::margin_calculation::MarginCalculation;
    let mut _756: !;
    let _757: ();
    let mut _758: &str;
    let _759: &str;
    let mut _760: &std::string::String;
    let _761: &std::string::String;
    let _762: std::string::String;
    let mut _764: std::fmt::Arguments<'_>;
    let mut _765: &[&str];
    let mut _766: &[&str; 1];
    let _767: &[&str; 1];
    let _768: [&str; 1];
    let mut _769: &[core::fmt::rt::Argument<'_>];
    let mut _770: &[core::fmt::rt::Argument<'_>; 1];
    let _771: &[core::fmt::rt::Argument<'_>; 1];
    let _772: [core::fmt::rt::Argument<'_>; 1];
    let mut _773: core::fmt::rt::Argument<'_>;
    let mut _774: &state::margin_calculation::MarginCalculation;
    let _775: &state::margin_calculation::MarginCalculation;
    let mut _776: error::ErrorCode;
    let mut _777: bool;
    let mut _778: &state::user::User;
    let mut _779: bool;
    let mut _780: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _781: std::result::Result<bool, error::ErrorCode>;
    let mut _782: &state::margin_calculation::MarginCalculation;
    let mut _783: isize;
    let mut _785: !;
    let mut _786: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _788: !;
    let _789: ();
    let mut _790: &str;
    let _791: &str;
    let mut _792: &std::string::String;
    let _793: &std::string::String;
    let _794: std::string::String;
    let mut _796: std::fmt::Arguments<'_>;
    let mut _797: &[&str];
    let mut _798: &[&str; 1];
    let _799: &[&str; 1];
    let _800: [&str; 1];
    let mut _801: &[core::fmt::rt::Argument<'_>];
    let mut _802: &[core::fmt::rt::Argument<'_>; 1];
    let _803: &[core::fmt::rt::Argument<'_>; 1];
    let _804: [core::fmt::rt::Argument<'_>; 1];
    let mut _805: core::fmt::rt::Argument<'_>;
    let mut _806: &state::margin_calculation::MarginCalculation;
    let _807: &state::margin_calculation::MarginCalculation;
    let mut _808: error::ErrorCode;
    let mut _810: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _811: std::result::Result<u16, error::ErrorCode>;
    let mut _812: &mut state::user::User;
    let mut _813: u64;
    let mut _814: isize;
    let mut _816: !;
    let mut _817: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _820: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _821: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _822: &mut state::user::User;
    let mut _823: &anchor_lang::prelude::Pubkey;
    let mut _824: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _825: &anchor_lang::prelude::Pubkey;
    let mut _826: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _827: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _828: &mut state::oracle_map::OracleMap<'_>;
    let mut _829: i64;
    let mut _830: u64;
    let mut _831: state::events::OrderActionExplanation;
    let mut _832: std::option::Option<state::user::MarketType>;
    let mut _833: std::option::Option<u16>;
    let mut _834: std::option::Option<controller::position::PositionDirection>;
    let mut _835: isize;
    let mut _837: !;
    let mut _838: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _841: bool;
    let mut _842: &std::vec::Vec<u32>;
    let mut _844: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _845: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _846: &state::user::User;
    let mut _847: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _848: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _849: &mut state::oracle_map::OracleMap<'_>;
    let mut _850: state::margin_calculation::MarginContext;
    let mut _851: state::margin_calculation::MarginContext;
    let mut _852: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _853: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _854: state::margin_calculation::MarginContext;
    let mut _855: u32;
    let mut _856: state::margin_calculation::MarketIdentifier;
    let mut _857: u16;
    let mut _858: isize;
    let mut _860: !;
    let mut _861: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _863: &state::user::User;
    let mut _864: i64;
    let mut _865: isize;
    let mut _867: !;
    let mut _868: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _871: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _872: std::result::Result<u128, error::ErrorCode>;
    let mut _873: &state::margin_calculation::MarginCalculation;
    let mut _874: isize;
    let mut _876: !;
    let mut _877: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _880: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _881: std::result::Result<u128, error::ErrorCode>;
    let mut _882: &state::margin_calculation::MarginCalculation;
    let mut _883: isize;
    let mut _885: !;
    let mut _886: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _889: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _890: std::result::Result<u64, error::ErrorCode>;
    let mut _891: u128;
    let mut _892: u128;
    let mut _893: u128;
    let mut _894: isize;
    let mut _896: !;
    let mut _897: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _899: ();
    let mut _900: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _901: std::result::Result<(), error::ErrorCode>;
    let mut _902: &mut state::user::User;
    let mut _903: u64;
    let mut _904: isize;
    let mut _906: !;
    let mut _907: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _909: ();
    let _910: ();
    let mut _911: &[&[u8]];
    let mut _912: &[&[u8]; 1];
    let _913: &[&[u8]; 1];
    let _914: [&[u8]; 1];
    let mut _915: &[u8];
    let _916: &[u8];
    let mut _917: &std::vec::Vec<u8>;
    let _918: &std::vec::Vec<u8>;
    let _919: std::vec::Vec<u8>;
    let mut _920: &state::events::LiquidationRecord;
    let _921: &state::events::LiquidationRecord;
    let _922: state::events::LiquidationRecord;
    let mut _923: i64;
    let mut _924: u16;
    let mut _925: state::events::LiquidationType;
    let mut _926: anchor_lang::prelude::Pubkey;
    let mut _927: anchor_lang::prelude::Pubkey;
    let mut _928: u128;
    let mut _929: i128;
    let mut _930: bool;
    let mut _931: &state::user::User;
    let mut _932: std::vec::Vec<u32>;
    let mut _933: u64;
    let mut _934: state::events::LiquidateSpotRecord;
    let mut _935: u16;
    let mut _936: i64;
    let mut _937: u16;
    let mut _938: i64;
    let mut _939: state::events::LiquidationRecord;
    let _940: ();
    let mut _941: bool;
    let mut _942: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _943: std::result::Result<bool, error::ErrorCode>;
    let mut _944: &state::margin_calculation::MarginCalculation;
    let mut _945: isize;
    let mut _947: !;
    let mut _948: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _950: !;
    let mut _951: error::ErrorCode;
    let mut _953: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _954: std::result::Result<u128, error::ErrorCode>;
    let mut _955: &state::margin_calculation::MarginCalculation;
    let mut _956: isize;
    let mut _958: !;
    let mut _959: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _962: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _963: std::result::Result<u32, error::ErrorCode>;
    let mut _964: u32;
    let mut _965: u32;
    let mut _966: isize;
    let mut _968: !;
    let mut _969: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _972: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _973: std::result::Result<u128, error::ErrorCode>;
    let mut _974: u128;
    let mut _975: u32;
    let mut _976: u32;
    let mut _977: u32;
    let mut _978: i64;
    let mut _979: u32;
    let mut _980: isize;
    let mut _982: !;
    let mut _983: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _986: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _987: std::result::Result<u128, error::ErrorCode>;
    let mut _988: &state::user::User;
    let mut _989: u128;
    let mut _990: u64;
    let mut _991: u128;
    let mut _992: u128;
    let mut _993: isize;
    let mut _995: !;
    let mut _996: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _999: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1000: std::result::Result<u128, error::ErrorCode>;
    let mut _1001: u128;
    let mut _1002: u128;
    let mut _1003: u128;
    let mut _1004: isize;
    let mut _1006: !;
    let mut _1007: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1009: ();
    let mut _1010: bool;
    let mut _1011: u128;
    let mut _1012: !;
    let _1013: ();
    let mut _1014: &str;
    let _1015: &str;
    let mut _1016: error::ErrorCode;
    let mut _1018: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1019: std::result::Result<u128, error::ErrorCode>;
    let mut _1020: u128;
    let mut _1021: u32;
    let mut _1022: i64;
    let mut _1023: u128;
    let mut _1024: u32;
    let mut _1025: i64;
    let mut _1026: isize;
    let mut _1028: !;
    let mut _1029: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1032: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1033: std::result::Result<u128, error::ErrorCode>;
    let mut _1034: u128;
    let mut _1035: u128;
    let mut _1036: u128;
    let mut _1037: bool;
    let mut _1038: isize;
    let mut _1040: !;
    let mut _1041: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1043: ();
    let mut _1044: bool;
    let mut _1045: u128;
    let mut _1046: !;
    let _1047: ();
    let mut _1048: &str;
    let _1049: &str;
    let mut _1050: &std::string::String;
    let _1051: &std::string::String;
    let _1052: std::string::String;
    let mut _1054: std::fmt::Arguments<'_>;
    let mut _1055: &[&str];
    let mut _1056: &[&str; 2];
    let _1057: &[&str; 2];
    let _1058: [&str; 2];
    let mut _1059: &[core::fmt::rt::Argument<'_>];
    let mut _1060: &[core::fmt::rt::Argument<'_>; 2];
    let _1061: &[core::fmt::rt::Argument<'_>; 2];
    let _1062: [core::fmt::rt::Argument<'_>; 2];
    let mut _1063: core::fmt::rt::Argument<'_>;
    let mut _1064: &u16;
    let _1065: &u16;
    let mut _1066: core::fmt::rt::Argument<'_>;
    let mut _1067: &u16;
    let _1068: &u16;
    let _1069: ();
    let mut _1070: &str;
    let _1071: &str;
    let mut _1072: &std::string::String;
    let _1073: &std::string::String;
    let _1074: std::string::String;
    let mut _1076: std::fmt::Arguments<'_>;
    let mut _1077: &[&str];
    let mut _1078: &[&str; 2];
    let _1079: &[&str; 2];
    let _1080: [&str; 2];
    let mut _1081: &[core::fmt::rt::Argument<'_>];
    let mut _1082: &[core::fmt::rt::Argument<'_>; 2];
    let _1083: &[core::fmt::rt::Argument<'_>; 2];
    let _1084: [core::fmt::rt::Argument<'_>; 2];
    let mut _1085: core::fmt::rt::Argument<'_>;
    let mut _1086: &u128;
    let _1087: &u128;
    let mut _1088: core::fmt::rt::Argument<'_>;
    let mut _1089: &u128;
    let _1090: &u128;
    let _1091: ();
    let mut _1092: &str;
    let _1093: &str;
    let mut _1094: &std::string::String;
    let _1095: &std::string::String;
    let _1096: std::string::String;
    let mut _1098: std::fmt::Arguments<'_>;
    let mut _1099: &[&str];
    let mut _1100: &[&str; 2];
    let _1101: &[&str; 2];
    let _1102: [&str; 2];
    let mut _1103: &[core::fmt::rt::Argument<'_>];
    let mut _1104: &[core::fmt::rt::Argument<'_>; 2];
    let _1105: &[core::fmt::rt::Argument<'_>; 2];
    let _1106: [core::fmt::rt::Argument<'_>; 2];
    let mut _1107: core::fmt::rt::Argument<'_>;
    let mut _1108: &u128;
    let _1109: &u128;
    let mut _1110: core::fmt::rt::Argument<'_>;
    let mut _1111: &u128;
    let _1112: &u128;
    let _1113: ();
    let mut _1114: &str;
    let _1115: &str;
    let mut _1116: &std::string::String;
    let _1117: &std::string::String;
    let _1118: std::string::String;
    let mut _1120: std::fmt::Arguments<'_>;
    let mut _1121: &[&str];
    let mut _1122: &[&str; 1];
    let _1123: &[&str; 1];
    let _1124: [&str; 1];
    let mut _1125: &[core::fmt::rt::Argument<'_>];
    let mut _1126: &[core::fmt::rt::Argument<'_>; 1];
    let _1127: &[core::fmt::rt::Argument<'_>; 1];
    let _1128: [core::fmt::rt::Argument<'_>; 1];
    let mut _1129: core::fmt::rt::Argument<'_>;
    let mut _1130: &u64;
    let _1131: &u64;
    let mut _1132: error::ErrorCode;
    let _1133: ();
    let mut _1134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1135: std::result::Result<(), error::ErrorCode>;
    let mut _1136: bool;
    let mut _1137: u128;
    let mut _1138: u128;
    let mut _1139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1140: std::result::Result<u128, error::ErrorCode>;
    let mut _1141: u64;
    let mut _1142: isize;
    let mut _1144: !;
    let mut _1145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1147: ();
    let _1149: ();
    let mut _1150: &str;
    let _1151: &str;
    let mut _1152: &std::string::String;
    let _1153: &std::string::String;
    let _1154: std::string::String;
    let mut _1156: std::fmt::Arguments<'_>;
    let mut _1157: &[&str];
    let mut _1158: &[&str; 2];
    let _1159: &[&str; 2];
    let _1160: [&str; 2];
    let mut _1161: &[core::fmt::rt::Argument<'_>];
    let mut _1162: &[core::fmt::rt::Argument<'_>; 1];
    let _1163: &[core::fmt::rt::Argument<'_>; 1];
    let _1164: [core::fmt::rt::Argument<'_>; 1];
    let mut _1165: core::fmt::rt::Argument<'_>;
    let mut _1166: &error::ErrorCode;
    let _1167: &error::ErrorCode;
    let _1168: ();
    let mut _1169: &str;
    let _1170: &str;
    let mut _1171: &std::string::String;
    let _1172: &std::string::String;
    let _1173: std::string::String;
    let mut _1175: std::fmt::Arguments<'_>;
    let mut _1176: &[&str];
    let mut _1177: &[&str; 3];
    let _1178: &[&str; 3];
    let _1179: [&str; 3];
    let mut _1180: &[core::fmt::rt::Argument<'_>];
    let mut _1181: &[core::fmt::rt::Argument<'_>; 2];
    let _1182: &[core::fmt::rt::Argument<'_>; 2];
    let _1183: [core::fmt::rt::Argument<'_>; 2];
    let mut _1184: core::fmt::rt::Argument<'_>;
    let mut _1185: &u64;
    let _1186: &u64;
    let mut _1187: core::fmt::rt::Argument<'_>;
    let mut _1188: &u128;
    let _1189: &u128;
    let mut _1190: error::ErrorCode;
    let mut _1191: isize;
    let mut _1193: !;
    let mut _1194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1196: ();
    let mut _1197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1198: std::result::Result<(), error::ErrorCode>;
    let mut _1199: bool;
    let mut _1200: u128;
    let mut _1201: u128;
    let mut _1202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1203: std::result::Result<u128, error::ErrorCode>;
    let mut _1204: u64;
    let mut _1205: isize;
    let mut _1207: !;
    let mut _1208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1210: ();
    let _1212: ();
    let mut _1213: &str;
    let _1214: &str;
    let mut _1215: &std::string::String;
    let _1216: &std::string::String;
    let _1217: std::string::String;
    let mut _1219: std::fmt::Arguments<'_>;
    let mut _1220: &[&str];
    let mut _1221: &[&str; 2];
    let _1222: &[&str; 2];
    let _1223: [&str; 2];
    let mut _1224: &[core::fmt::rt::Argument<'_>];
    let mut _1225: &[core::fmt::rt::Argument<'_>; 1];
    let _1226: &[core::fmt::rt::Argument<'_>; 1];
    let _1227: [core::fmt::rt::Argument<'_>; 1];
    let mut _1228: core::fmt::rt::Argument<'_>;
    let mut _1229: &error::ErrorCode;
    let _1230: &error::ErrorCode;
    let _1231: ();
    let mut _1232: &str;
    let _1233: &str;
    let mut _1234: &std::string::String;
    let _1235: &std::string::String;
    let _1236: std::string::String;
    let mut _1238: std::fmt::Arguments<'_>;
    let mut _1239: &[&str];
    let mut _1240: &[&str; 3];
    let _1241: &[&str; 3];
    let _1242: [&str; 3];
    let mut _1243: &[core::fmt::rt::Argument<'_>];
    let mut _1244: &[core::fmt::rt::Argument<'_>; 2];
    let _1245: &[core::fmt::rt::Argument<'_>; 2];
    let _1246: [core::fmt::rt::Argument<'_>; 2];
    let mut _1247: core::fmt::rt::Argument<'_>;
    let mut _1248: &u64;
    let _1249: &u64;
    let mut _1250: core::fmt::rt::Argument<'_>;
    let mut _1251: &u128;
    let _1252: &u128;
    let mut _1253: error::ErrorCode;
    let mut _1254: isize;
    let mut _1256: !;
    let mut _1257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1261: std::result::Result<bool, error::ErrorCode>;
    let mut _1262: i64;
    let mut _1263: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1264: std::result::Result<i64, error::ErrorCode>;
    let mut _1265: i64;
    let mut _1266: isize;
    let mut _1268: !;
    let mut _1269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1271: i64;
    let mut _1272: &state::spot_market::SpotMarket;
    let mut _1273: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1274: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1275: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1276: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1277: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1278: &u16;
    let _1279: &u16;
    let mut _1280: isize;
    let mut _1282: !;
    let mut _1283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1285: i64;
    let mut _1286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1287: std::result::Result<i64, error::ErrorCode>;
    let mut _1288: u64;
    let mut _1289: &state::state::OracleGuardRails;
    let mut _1290: isize;
    let mut _1292: !;
    let mut _1293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1295: isize;
    let mut _1297: !;
    let mut _1298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1300: ();
    let mut _1301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1302: std::result::Result<(), error::ErrorCode>;
    let mut _1303: bool;
    let mut _1304: ();
    let _1306: ();
    let mut _1307: &str;
    let _1308: &str;
    let mut _1309: &std::string::String;
    let _1310: &std::string::String;
    let _1311: std::string::String;
    let mut _1313: std::fmt::Arguments<'_>;
    let mut _1314: &[&str];
    let mut _1315: &[&str; 2];
    let _1316: &[&str; 2];
    let _1317: [&str; 2];
    let mut _1318: &[core::fmt::rt::Argument<'_>];
    let mut _1319: &[core::fmt::rt::Argument<'_>; 1];
    let _1320: &[core::fmt::rt::Argument<'_>; 1];
    let _1321: [core::fmt::rt::Argument<'_>; 1];
    let mut _1322: core::fmt::rt::Argument<'_>;
    let mut _1323: &error::ErrorCode;
    let _1324: &error::ErrorCode;
    let _1325: ();
    let mut _1326: &str;
    let _1327: &str;
    let mut _1328: error::ErrorCode;
    let mut _1329: isize;
    let mut _1331: !;
    let mut _1332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1336: std::result::Result<bool, error::ErrorCode>;
    let mut _1337: i64;
    let mut _1338: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1339: std::result::Result<i64, error::ErrorCode>;
    let mut _1340: i64;
    let mut _1341: isize;
    let mut _1343: !;
    let mut _1344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1346: i64;
    let mut _1347: &state::spot_market::SpotMarket;
    let mut _1348: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1349: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1350: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1351: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1352: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1353: &u16;
    let _1354: &u16;
    let mut _1355: isize;
    let mut _1357: !;
    let mut _1358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1360: i64;
    let mut _1361: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1362: std::result::Result<i64, error::ErrorCode>;
    let mut _1363: u64;
    let mut _1364: &state::state::OracleGuardRails;
    let mut _1365: isize;
    let mut _1367: !;
    let mut _1368: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1370: isize;
    let mut _1372: !;
    let mut _1373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1375: ();
    let mut _1376: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1377: std::result::Result<(), error::ErrorCode>;
    let mut _1378: bool;
    let mut _1379: ();
    let _1381: ();
    let mut _1382: &str;
    let _1383: &str;
    let mut _1384: &std::string::String;
    let _1385: &std::string::String;
    let _1386: std::string::String;
    let mut _1388: std::fmt::Arguments<'_>;
    let mut _1389: &[&str];
    let mut _1390: &[&str; 2];
    let _1391: &[&str; 2];
    let _1392: [&str; 2];
    let mut _1393: &[core::fmt::rt::Argument<'_>];
    let mut _1394: &[core::fmt::rt::Argument<'_>; 1];
    let _1395: &[core::fmt::rt::Argument<'_>; 1];
    let _1396: [core::fmt::rt::Argument<'_>; 1];
    let mut _1397: core::fmt::rt::Argument<'_>;
    let mut _1398: &error::ErrorCode;
    let _1399: &error::ErrorCode;
    let _1400: ();
    let mut _1401: &str;
    let _1402: &str;
    let mut _1403: error::ErrorCode;
    let mut _1404: isize;
    let mut _1406: !;
    let mut _1407: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1409: ();
    let mut _1442: bool;
    let mut _1443: bool;
    let mut _1444: bool;
    let mut _1445: bool;
    let mut _1446: bool;
    let mut _1447: isize;
    let mut _1448: isize;
    let mut _1449: isize;
    let mut _1450: isize;
    let mut _1451: isize;
    let mut _1452: isize;
    let mut _1453: isize;
    let mut _1454: isize;
    let mut _1455: isize;
    let mut _1456: isize;
    let mut _1457: isize;
    let mut _1458: isize;
    let mut _1459: isize;
    let mut _1460: isize;
    let mut _1461: isize;
    let mut _1462: isize;
    let mut _1463: isize;
    let mut _1464: isize;
    let mut _1465: isize;
    let mut _1466: isize;
    let mut _1467: isize;
    let mut _1468: isize;
    let mut _1469: isize;
    let mut _1470: isize;
    let mut _1471: isize;
    let mut _1472: isize;
    let mut _1473: isize;
    let mut _1474: isize;
    let mut _1475: isize;
    let mut _1476: isize;
    let mut _1477: isize;
    let mut _1478: isize;
    let mut _1479: isize;
    let mut _1480: isize;
    let mut _1481: isize;
    scope 1 {
        debug liquidation_margin_buffer_ratio => _16;
        let _17: u128;
        scope 2 {
            debug initial_pct_to_liquidate => _17;
            let _19: u128;
            scope 3 {
                debug liquidation_duration => _19;
                let _27: error::ErrorCode;
                let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _64: ();
                let _71: error::ErrorCode;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: ();
                let _109: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _119: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                scope 4 {
                    debug error_code => _27;
                    let _34: std::string::String;
                    let _53: std::string::String;
                    let mut _1440: &[&str; 1];
                    let mut _1441: &[&str; 2];
                    scope 5 {
                        debug res => _34;
                    }
                    scope 6 {
                        debug res => _53;
                    }
                }
                scope 7 {
                    debug residual => _61;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug val => _64;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug error_code => _71;
                    let _78: std::string::String;
                    let _97: std::string::String;
                    let mut _1438: &[&str; 1];
                    let mut _1439: &[&str; 2];
                    scope 12 {
                        debug res => _78;
                    }
                    scope 13 {
                        debug res => _97;
                    }
                }
                scope 14 {
                    debug residual => _105;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _108;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug asset_spot_market => _109;
                    let _129: error::ErrorCode;
                    let _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _173: ();
                    let _174: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    let _181: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _184: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    scope 23 {
                        debug error_code => _129;
                        let _136: std::string::String;
                        let _155: std::string::String;
                        let mut _1436: &[&str; 1];
                        let mut _1437: &[&str; 2];
                        scope 24 {
                            debug res => _136;
                        }
                        scope 25 {
                            debug res => _155;
                        }
                    }
                    scope 26 {
                        debug residual => _170;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _173;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug liability_spot_market => _174;
                        let _194: error::ErrorCode;
                        let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _238: ();
                        let _250: error::ErrorCode;
                        let _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _301: ();
                        let _306: u128;
                        let _307: i64;
                        let _308: u32;
                        let _309: u32;
                        let _310: u8;
                        let _311: i64;
                        let mut _313: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                        let _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _323: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                        scope 35 {
                            debug error_code => _194;
                            let _201: std::string::String;
                            let _220: std::string::String;
                            let mut _1434: &[&str; 1];
                            let mut _1435: &[&str; 2];
                            scope 36 {
                                debug res => _201;
                            }
                            scope 37 {
                                debug res => _220;
                            }
                        }
                        scope 38 {
                            debug residual => _235;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _238;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug error_code => _250;
                            let _257: std::string::String;
                            let _276: std::string::String;
                            let mut _1432: &[&str; 3];
                            let mut _1433: &[&str; 2];
                            scope 43 {
                                debug res => _257;
                            }
                            scope 44 {
                                debug res => _276;
                            }
                        }
                        scope 45 {
                            debug residual => _298;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _301;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug asset_amount => _306;
                            debug asset_price => _307;
                            debug asset_decimals => _308;
                            debug asset_weight => _309;
                            debug asset_pool_id => _310;
                            debug asset_oracle_delay => _311;
                            let _482: i64;
                            let _483: u32;
                            let _484: u32;
                            let _485: u32;
                            let _486: u8;
                            let _487: i64;
                            let mut _489: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            let _496: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _499: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            scope 88 {
                                debug liability_price => _482;
                                debug liability_decimals => _483;
                                debug liability_weight => _484;
                                debug liability_if_fee => _485;
                                debug liability_pool_id => _486;
                                debug liability_oracle_delay => _487;
                                let _673: error::ErrorCode;
                                let _717: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _720: ();
                                let _721: state::margin_calculation::MarginContext;
                                let _730: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _733: state::margin_calculation::MarginContext;
                                scope 127 {
                                    debug error_code => _673;
                                    let _680: std::string::String;
                                    let _699: std::string::String;
                                    let mut _1422: &[&str; 3];
                                    let mut _1423: &[&str; 2];
                                    scope 128 {
                                        debug res => _680;
                                    }
                                    scope 129 {
                                        debug res => _699;
                                    }
                                }
                                scope 130 {
                                    debug residual => _717;
                                    scope 131 {
                                    }
                                }
                                scope 132 {
                                    debug val => _720;
                                    scope 133 {
                                    }
                                }
                                scope 134 {
                                    debug margin_context => _721;
                                    let _736: state::margin_calculation::MarginCalculation;
                                    let _747: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _750: state::margin_calculation::MarginCalculation;
                                    scope 139 {
                                        debug margin_calculation => _736;
                                        let _763: std::string::String;
                                        let _784: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _787: bool;
                                        let _795: std::string::String;
                                        let _809: u16;
                                        let _815: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _818: u16;
                                        let mut _1410: &[&str; 1];
                                        let mut _1421: &[&str; 1];
                                        scope 144 {
                                            debug res => _763;
                                        }
                                        scope 145 {
                                            debug residual => _784;
                                            scope 146 {
                                            }
                                        }
                                        scope 147 {
                                            debug val => _787;
                                            scope 148 {
                                            }
                                        }
                                        scope 149 {
                                            debug res => _795;
                                        }
                                        scope 150 {
                                            debug liquidation_id => _809;
                                            let _819: std::vec::Vec<u32>;
                                            let _836: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _839: std::vec::Vec<u32>;
                                            scope 155 {
                                                debug canceled_order_ids => _819;
                                                let _840: state::margin_calculation::MarginCalculation;
                                                let _843: state::margin_calculation::MarginCalculation;
                                                let _859: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _862: state::margin_calculation::MarginContext;
                                                let _866: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _869: state::margin_calculation::MarginCalculation;
                                                scope 160 {
                                                    debug intermediate_margin_calculation => _840;
                                                    let _952: u128;
                                                    let _957: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _960: u128;
                                                    scope 193 {
                                                        debug margin_shortage => _952;
                                                        let _961: u32;
                                                        let _967: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _970: u32;
                                                        scope 198 {
                                                            debug liability_weight_with_buffer => _961;
                                                            let _971: u128;
                                                            let _981: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _984: u128;
                                                            scope 203 {
                                                                debug liability_transfer_to_cover_margin_shortage => _971;
                                                                let _985: u128;
                                                                let _994: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _997: u128;
                                                                scope 208 {
                                                                    debug max_pct_allowed => _985;
                                                                    let _998: u128;
                                                                    let _1005: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _1008: u128;
                                                                    scope 213 {
                                                                        debug max_liability_allowed_to_be_transferred => _998;
                                                                        let _1017: u128;
                                                                        let _1027: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _1030: u128;
                                                                        scope 218 {
                                                                            debug asset_transfer_to_cover_margin_shortage => _1017;
                                                                            let _1031: u128;
                                                                            let _1039: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _1042: u128;
                                                                            scope 223 {
                                                                                debug max_asset_transfer => _1031;
                                                                                let _1053: std::string::String;
                                                                                let _1075: std::string::String;
                                                                                let _1097: std::string::String;
                                                                                let _1119: std::string::String;
                                                                                let _1143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1146: u128;
                                                                                let _1148: error::ErrorCode;
                                                                                let _1192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1195: ();
                                                                                let _1206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1209: u128;
                                                                                let _1211: error::ErrorCode;
                                                                                let _1255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1258: ();
                                                                                let _1259: bool;
                                                                                let _1267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1270: i64;
                                                                                let _1281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1284: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                let _1291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1294: i64;
                                                                                let _1296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1299: bool;
                                                                                let mut _1411: &[&str; 1];
                                                                                let mut _1412: &[&str; 2];
                                                                                let mut _1413: &[&str; 2];
                                                                                let mut _1414: &[&str; 2];
                                                                                scope 228 {
                                                                                    debug res => _1053;
                                                                                }
                                                                                scope 229 {
                                                                                    debug res => _1075;
                                                                                }
                                                                                scope 230 {
                                                                                    debug res => _1097;
                                                                                }
                                                                                scope 231 {
                                                                                    debug res => _1119;
                                                                                }
                                                                                scope 232 {
                                                                                    debug residual => _1143;
                                                                                    scope 233 {
                                                                                    }
                                                                                }
                                                                                scope 234 {
                                                                                    debug val => _1146;
                                                                                    scope 235 {
                                                                                    }
                                                                                }
                                                                                scope 236 {
                                                                                    debug error_code => _1148;
                                                                                    let _1155: std::string::String;
                                                                                    let _1174: std::string::String;
                                                                                    let mut _1419: &[&str; 3];
                                                                                    let mut _1420: &[&str; 2];
                                                                                    scope 237 {
                                                                                        debug res => _1155;
                                                                                    }
                                                                                    scope 238 {
                                                                                        debug res => _1174;
                                                                                    }
                                                                                }
                                                                                scope 239 {
                                                                                    debug residual => _1192;
                                                                                    scope 240 {
                                                                                    }
                                                                                }
                                                                                scope 241 {
                                                                                    debug val => _1195;
                                                                                    scope 242 {
                                                                                    }
                                                                                }
                                                                                scope 243 {
                                                                                    debug residual => _1206;
                                                                                    scope 244 {
                                                                                    }
                                                                                }
                                                                                scope 245 {
                                                                                    debug val => _1209;
                                                                                    scope 246 {
                                                                                    }
                                                                                }
                                                                                scope 247 {
                                                                                    debug error_code => _1211;
                                                                                    let _1218: std::string::String;
                                                                                    let _1237: std::string::String;
                                                                                    let mut _1417: &[&str; 3];
                                                                                    let mut _1418: &[&str; 2];
                                                                                    scope 248 {
                                                                                        debug res => _1218;
                                                                                    }
                                                                                    scope 249 {
                                                                                        debug res => _1237;
                                                                                    }
                                                                                }
                                                                                scope 250 {
                                                                                    debug residual => _1255;
                                                                                    scope 251 {
                                                                                    }
                                                                                }
                                                                                scope 252 {
                                                                                    debug val => _1258;
                                                                                    scope 253 {
                                                                                    }
                                                                                }
                                                                                scope 254 {
                                                                                    debug liability_oracle_too_divergent => _1259;
                                                                                    let _1305: error::ErrorCode;
                                                                                    let _1330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1333: ();
                                                                                    let _1334: bool;
                                                                                    let _1342: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1345: i64;
                                                                                    let _1356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1359: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                    let _1366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1369: i64;
                                                                                    let _1371: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1374: bool;
                                                                                    scope 271 {
                                                                                        debug error_code => _1305;
                                                                                        let _1312: std::string::String;
                                                                                        let mut _1416: &[&str; 2];
                                                                                        scope 272 {
                                                                                            debug res => _1312;
                                                                                        }
                                                                                    }
                                                                                    scope 273 {
                                                                                        debug residual => _1330;
                                                                                        scope 274 {
                                                                                        }
                                                                                    }
                                                                                    scope 275 {
                                                                                        debug val => _1333;
                                                                                        scope 276 {
                                                                                        }
                                                                                    }
                                                                                    scope 277 {
                                                                                        debug asset_oracle_too_divergent => _1334;
                                                                                        let _1380: error::ErrorCode;
                                                                                        let _1405: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1408: ();
                                                                                        scope 294 {
                                                                                            debug error_code => _1380;
                                                                                            let _1387: std::string::String;
                                                                                            let mut _1415: &[&str; 2];
                                                                                            scope 295 {
                                                                                                debug res => _1387;
                                                                                            }
                                                                                        }
                                                                                        scope 296 {
                                                                                            debug residual => _1405;
                                                                                            scope 297 {
                                                                                            }
                                                                                        }
                                                                                        scope 298 {
                                                                                            debug val => _1408;
                                                                                            scope 299 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 278 {
                                                                                        debug residual => _1342;
                                                                                        scope 279 {
                                                                                        }
                                                                                    }
                                                                                    scope 280 {
                                                                                        debug val => _1345;
                                                                                        scope 281 {
                                                                                        }
                                                                                    }
                                                                                    scope 282 {
                                                                                        debug residual => _1356;
                                                                                        scope 283 {
                                                                                        }
                                                                                    }
                                                                                    scope 284 {
                                                                                        debug val => _1359;
                                                                                        scope 285 {
                                                                                        }
                                                                                    }
                                                                                    scope 286 {
                                                                                        debug residual => _1366;
                                                                                        scope 287 {
                                                                                        }
                                                                                    }
                                                                                    scope 288 {
                                                                                        debug val => _1369;
                                                                                        scope 289 {
                                                                                        }
                                                                                    }
                                                                                    scope 290 {
                                                                                        debug residual => _1371;
                                                                                        scope 291 {
                                                                                        }
                                                                                    }
                                                                                    scope 292 {
                                                                                        debug val => _1374;
                                                                                        scope 293 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 255 {
                                                                                    debug residual => _1267;
                                                                                    scope 256 {
                                                                                    }
                                                                                }
                                                                                scope 257 {
                                                                                    debug val => _1270;
                                                                                    scope 258 {
                                                                                    }
                                                                                }
                                                                                scope 259 {
                                                                                    debug residual => _1281;
                                                                                    scope 260 {
                                                                                    }
                                                                                }
                                                                                scope 261 {
                                                                                    debug val => _1284;
                                                                                    scope 262 {
                                                                                    }
                                                                                }
                                                                                scope 263 {
                                                                                    debug residual => _1291;
                                                                                    scope 264 {
                                                                                    }
                                                                                }
                                                                                scope 265 {
                                                                                    debug val => _1294;
                                                                                    scope 266 {
                                                                                    }
                                                                                }
                                                                                scope 267 {
                                                                                    debug residual => _1296;
                                                                                    scope 268 {
                                                                                    }
                                                                                }
                                                                                scope 269 {
                                                                                    debug val => _1299;
                                                                                    scope 270 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 224 {
                                                                                debug residual => _1039;
                                                                                scope 225 {
                                                                                }
                                                                            }
                                                                            scope 226 {
                                                                                debug val => _1042;
                                                                                scope 227 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 219 {
                                                                            debug residual => _1027;
                                                                            scope 220 {
                                                                            }
                                                                        }
                                                                        scope 221 {
                                                                            debug val => _1030;
                                                                            scope 222 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 214 {
                                                                        debug residual => _1005;
                                                                        scope 215 {
                                                                        }
                                                                    }
                                                                    scope 216 {
                                                                        debug val => _1008;
                                                                        scope 217 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 209 {
                                                                    debug residual => _994;
                                                                    scope 210 {
                                                                    }
                                                                }
                                                                scope 211 {
                                                                    debug val => _997;
                                                                    scope 212 {
                                                                    }
                                                                }
                                                            }
                                                            scope 204 {
                                                                debug residual => _981;
                                                                scope 205 {
                                                                }
                                                            }
                                                            scope 206 {
                                                                debug val => _984;
                                                                scope 207 {
                                                                }
                                                            }
                                                        }
                                                        scope 199 {
                                                            debug residual => _967;
                                                            scope 200 {
                                                            }
                                                        }
                                                        scope 201 {
                                                            debug val => _970;
                                                            scope 202 {
                                                            }
                                                        }
                                                    }
                                                    scope 194 {
                                                        debug residual => _957;
                                                        scope 195 {
                                                        }
                                                    }
                                                    scope 196 {
                                                        debug val => _960;
                                                        scope 197 {
                                                        }
                                                    }
                                                }
                                                scope 161 {
                                                    debug intermediate_margin_calculation => _843;
                                                    let _870: u128;
                                                    let _875: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _878: u128;
                                                    scope 170 {
                                                        debug initial_margin_shortage => _870;
                                                        let _879: u128;
                                                        let _884: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _887: u128;
                                                        scope 175 {
                                                            debug new_margin_shortage => _879;
                                                            let _888: u64;
                                                            let _895: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _898: u64;
                                                            scope 180 {
                                                                debug margin_freed => _888;
                                                                let _905: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _908: ();
                                                                let _946: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _949: bool;
                                                                scope 185 {
                                                                    debug residual => _905;
                                                                    scope 186 {
                                                                    }
                                                                }
                                                                scope 187 {
                                                                    debug val => _908;
                                                                    scope 188 {
                                                                    }
                                                                }
                                                                scope 189 {
                                                                    debug residual => _946;
                                                                    scope 190 {
                                                                    }
                                                                }
                                                                scope 191 {
                                                                    debug val => _949;
                                                                    scope 192 {
                                                                    }
                                                                }
                                                            }
                                                            scope 181 {
                                                                debug residual => _895;
                                                                scope 182 {
                                                                }
                                                            }
                                                            scope 183 {
                                                                debug val => _898;
                                                                scope 184 {
                                                                }
                                                            }
                                                        }
                                                        scope 176 {
                                                            debug residual => _884;
                                                            scope 177 {
                                                            }
                                                        }
                                                        scope 178 {
                                                            debug val => _887;
                                                            scope 179 {
                                                            }
                                                        }
                                                    }
                                                    scope 171 {
                                                        debug residual => _875;
                                                        scope 172 {
                                                        }
                                                    }
                                                    scope 173 {
                                                        debug val => _878;
                                                        scope 174 {
                                                        }
                                                    }
                                                }
                                                scope 162 {
                                                    debug residual => _859;
                                                    scope 163 {
                                                    }
                                                }
                                                scope 164 {
                                                    debug val => _862;
                                                    scope 165 {
                                                    }
                                                }
                                                scope 166 {
                                                    debug residual => _866;
                                                    scope 167 {
                                                    }
                                                }
                                                scope 168 {
                                                    debug val => _869;
                                                    scope 169 {
                                                    }
                                                }
                                            }
                                            scope 156 {
                                                debug residual => _836;
                                                scope 157 {
                                                }
                                            }
                                            scope 158 {
                                                debug val => _839;
                                                scope 159 {
                                                }
                                            }
                                        }
                                        scope 151 {
                                            debug residual => _815;
                                            scope 152 {
                                            }
                                        }
                                        scope 153 {
                                            debug val => _818;
                                            scope 154 {
                                            }
                                        }
                                    }
                                    scope 140 {
                                        debug residual => _747;
                                        scope 141 {
                                        }
                                    }
                                    scope 142 {
                                        debug val => _750;
                                        scope 143 {
                                        }
                                    }
                                }
                                scope 135 {
                                    debug residual => _730;
                                    scope 136 {
                                    }
                                }
                                scope 137 {
                                    debug val => _733;
                                    scope 138 {
                                    }
                                }
                            }
                            scope 89 {
                                debug liability_market => _489;
                                let _500: &state::oracle::OraclePriceData;
                                let _501: &state::state::ValidityGuardRails;
                                let _513: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _516: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
                                scope 94 {
                                    debug liability_price_data => _500;
                                    debug validity_guard_rails => _501;
                                    let _530: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _533: ();
                                    let _534: &state::user::SpotPosition;
                                    let _540: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _543: &state::user::SpotPosition;
                                    scope 99 {
                                        debug residual => _530;
                                        scope 100 {
                                        }
                                    }
                                    scope 101 {
                                        debug val => _533;
                                        scope 102 {
                                        }
                                    }
                                    scope 103 {
                                        debug spot_position => _534;
                                        let _552: error::ErrorCode;
                                        let _577: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _580: ();
                                        let _581: u128;
                                        let _590: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _593: u128;
                                        let mut _1427: &state::spot_market::SpotBalanceType;
                                        scope 108 {
                                            debug error_code => _552;
                                            let _559: std::string::String;
                                            let mut _1426: &[&str; 2];
                                            scope 109 {
                                                debug res => _559;
                                            }
                                        }
                                        scope 110 {
                                            debug residual => _577;
                                            scope 111 {
                                            }
                                        }
                                        scope 112 {
                                            debug val => _580;
                                            scope 113 {
                                            }
                                        }
                                        scope 114 {
                                            debug token_amount => _581;
                                            let _600: error::ErrorCode;
                                            let _641: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _644: ();
                                            let _645: i64;
                                            scope 119 {
                                                debug error_code => _600;
                                                let _607: std::string::String;
                                                let _626: std::string::String;
                                                let mut _1424: &[&str; 1];
                                                let mut _1425: &[&str; 2];
                                                scope 120 {
                                                    debug res => _607;
                                                }
                                                scope 121 {
                                                    debug res => _626;
                                                }
                                            }
                                            scope 122 {
                                                debug residual => _641;
                                                scope 123 {
                                                }
                                            }
                                            scope 124 {
                                                debug val => _644;
                                                scope 125 {
                                                }
                                            }
                                            scope 126 {
                                                debug liability_price => _645;
                                            }
                                        }
                                        scope 115 {
                                            debug residual => _590;
                                            scope 116 {
                                            }
                                        }
                                        scope 117 {
                                            debug val => _593;
                                            scope 118 {
                                            }
                                        }
                                    }
                                    scope 104 {
                                        debug residual => _540;
                                        scope 105 {
                                        }
                                    }
                                    scope 106 {
                                        debug val => _543;
                                        scope 107 {
                                        }
                                    }
                                }
                                scope 95 {
                                    debug residual => _513;
                                    scope 96 {
                                    }
                                }
                                scope 97 {
                                    debug val => _516;
                                    scope 98 {
                                    }
                                }
                            }
                            scope 90 {
                                debug residual => _496;
                                scope 91 {
                                }
                            }
                            scope 92 {
                                debug val => _499;
                                scope 93 {
                                }
                            }
                        }
                        scope 50 {
                            debug asset_market => _313;
                            let _324: &state::oracle::OraclePriceData;
                            let _325: &state::state::ValidityGuardRails;
                            let _337: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _340: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
                            scope 55 {
                                debug asset_price_data => _324;
                                debug validity_guard_rails => _325;
                                let _354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _357: ();
                                let _358: &state::user::SpotPosition;
                                let _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _367: &state::user::SpotPosition;
                                scope 60 {
                                    debug residual => _354;
                                    scope 61 {
                                    }
                                }
                                scope 62 {
                                    debug val => _357;
                                    scope 63 {
                                    }
                                }
                                scope 64 {
                                    debug spot_deposit_position => _358;
                                    let _376: error::ErrorCode;
                                    let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _404: ();
                                    let _405: u128;
                                    let _414: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _417: u128;
                                    let mut _1431: &state::spot_market::SpotBalanceType;
                                    scope 69 {
                                        debug error_code => _376;
                                        let _383: std::string::String;
                                        let mut _1430: &[&str; 2];
                                        scope 70 {
                                            debug res => _383;
                                        }
                                    }
                                    scope 71 {
                                        debug residual => _401;
                                        scope 72 {
                                        }
                                    }
                                    scope 73 {
                                        debug val => _404;
                                        scope 74 {
                                        }
                                    }
                                    scope 75 {
                                        debug token_amount => _405;
                                        let _424: error::ErrorCode;
                                        let _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _468: ();
                                        let _469: i64;
                                        scope 80 {
                                            debug error_code => _424;
                                            let _431: std::string::String;
                                            let _450: std::string::String;
                                            let mut _1428: &[&str; 1];
                                            let mut _1429: &[&str; 2];
                                            scope 81 {
                                                debug res => _431;
                                            }
                                            scope 82 {
                                                debug res => _450;
                                            }
                                        }
                                        scope 83 {
                                            debug residual => _465;
                                            scope 84 {
                                            }
                                        }
                                        scope 85 {
                                            debug val => _468;
                                            scope 86 {
                                            }
                                        }
                                        scope 87 {
                                            debug asset_price => _469;
                                        }
                                    }
                                    scope 76 {
                                        debug residual => _414;
                                        scope 77 {
                                        }
                                    }
                                    scope 78 {
                                        debug val => _417;
                                        scope 79 {
                                        }
                                    }
                                }
                                scope 65 {
                                    debug residual => _364;
                                    scope 66 {
                                    }
                                }
                                scope 67 {
                                    debug val => _367;
                                    scope 68 {
                                    }
                                }
                            }
                            scope 56 {
                                debug residual => _337;
                                scope 57 {
                                }
                            }
                            scope 58 {
                                debug val => _340;
                                scope 59 {
                                }
                            }
                        }
                        scope 51 {
                            debug residual => _320;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _323;
                            scope 54 {
                            }
                        }
                    }
                    scope 31 {
                        debug residual => _181;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _184;
                        scope 34 {
                        }
                    }
                }
                scope 19 {
                    debug residual => _116;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _119;
                    scope 22 {
                    }
                }
            }
        }
    }

    bb0: {
        _1446 = const false;
        _1445 = const false;
        _1442 = const false;
        _1444 = const false;
        _1443 = const false;
        StorageLive(_16);
        _16 = ((*_15).11: u32);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_15).21: u16);
        _17 = move _18 as u128 (IntToInt);
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_15).20: u8);
        _19 = move _20 as u128 (IntToInt);
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_4);
        _24 = User::is_bankrupt(move _25) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _24) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_25);
        StorageLive(_27);
        _27 = error::ErrorCode::UserBankrupt;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _1441 = const _;
        _38 = &(*_1441);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_27;
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _45) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_25);
        StorageLive(_26);
        _26 = ();
        _23 = std::result::Result::<(), error::ErrorCode>::Ok(move _26);
        StorageDead(_26);
        goto -> bb15;
    }

    bb4: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_35);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb7, unwind: bb661];
    }

    bb7: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb8, unwind: bb661];
    }

    bb8: {
        StorageDead(_29);
        drop(_33) -> [return: bb9, unwind: bb662];
    }

    bb9: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _1440 = const _;
        _57 = &(*_1440);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        _54 = Arguments::<'_>::new_const(move _55) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_54);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb12, unwind: bb660];
    }

    bb12: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb13, unwind: bb660];
    }

    bb13: {
        StorageDead(_48);
        drop(_52) -> [return: bb14, unwind: bb662];
    }

    bb14: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_59);
        _59 = _27;
        _23 = std::result::Result::<(), error::ErrorCode>::Err(move _59);
        StorageDead(_59);
        StorageDead(_27);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_24);
        _22 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_23);
        _60 = discriminant(_22);
        switchInt(move _60) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_64);
        _64 = ((_22 as Continue).0: ());
        _21 = _64;
        StorageDead(_64);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_7);
        _68 = User::is_bankrupt(move _69) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_61);
        _61 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb622;
    }

    bb21: {
        switchInt(move _68) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_69);
        StorageLive(_71);
        _71 = error::ErrorCode::UserBankrupt;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _1439 = const _;
        _82 = &(*_1439);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_71;
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _89) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_69);
        StorageLive(_70);
        _70 = ();
        _67 = std::result::Result::<(), error::ErrorCode>::Ok(move _70);
        StorageDead(_70);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_89);
        _87 = [move _88];
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_85);
        _79 = Arguments::<'_>::new_v1(move _80, move _84) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_84);
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_79);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb27, unwind: bb659];
    }

    bb27: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb28, unwind: bb659];
    }

    bb28: {
        StorageDead(_73);
        drop(_77) -> [return: bb29, unwind: bb662];
    }

    bb29: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _1438 = const _;
        _101 = &(*_1438);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        _98 = Arguments::<'_>::new_const(move _99) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_98);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb32, unwind: bb658];
    }

    bb32: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb33, unwind: bb658];
    }

    bb33: {
        StorageDead(_92);
        drop(_96) -> [return: bb34, unwind: bb662];
    }

    bb34: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_103);
        _103 = _71;
        _67 = std::result::Result::<(), error::ErrorCode>::Err(move _103);
        StorageDead(_103);
        StorageDead(_71);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        _104 = discriminant(_66);
        switchInt(move _104) -> [0: bb37, 1: bb38, otherwise: bb18];
    }

    bb37: {
        StorageLive(_108);
        _108 = ((_66 as Continue).0: ());
        _65 = _108;
        StorageDead(_108);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_11);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_1;
        _113 = &(*_114);
        _111 = SpotMarketMap::<'_>::get_ref(move _112, move _113) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_105);
        _105 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb622;
    }

    bb40: {
        StorageDead(_113);
        StorageDead(_112);
        _110 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _111) -> [return: bb41, unwind: bb662];
    }

    bb41: {
        StorageDead(_111);
        _115 = discriminant(_110);
        switchInt(move _115) -> [0: bb42, 1: bb43, otherwise: bb18];
    }

    bb42: {
        StorageLive(_119);
        _119 = move ((_110 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1446 = const true;
        _109 = move _119;
        StorageDead(_119);
        _1449 = discriminant(_110);
        StorageDead(_114);
        StorageDead(_110);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_109;
        _125 = <Ref<'_, SpotMarket> as Deref>::deref(move _126) -> [return: bb45, unwind: bb684];
    }

    bb43: {
        StorageLive(_116);
        _116 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb44, unwind: bb685];
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_116);
        _1447 = discriminant(_110);
        StorageDead(_114);
        StorageDead(_110);
        goto -> bb621;
    }

    bb45: {
        _124 = &(*_125);
        StorageDead(_126);
        StorageLive(_127);
        _127 = SpotOperation::Liquidation;
        _123 = SpotMarket::is_operation_paused(move _124, move _127) -> [return: bb46, unwind: bb684];
    }

    bb46: {
        switchInt(move _123) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_125);
        StorageLive(_129);
        _129 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _1437 = const _;
        _140 = &(*_1437);
        _139 = &(*_140);
        _138 = move _139 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_129;
        _147 = &(*_148);
        _146 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _147) -> [return: bb49, unwind: bb684];
    }

    bb48: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_125);
        StorageLive(_128);
        _128 = ();
        _122 = std::result::Result::<(), error::ErrorCode>::Ok(move _128);
        StorageDead(_128);
        goto -> bb61;
    }

    bb49: {
        StorageDead(_147);
        _145 = [move _146];
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = move _143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_143);
        _137 = Arguments::<'_>::new_v1(move _138, move _142) -> [return: bb50, unwind: bb684];
    }

    bb50: {
        StorageDead(_142);
        StorageDead(_138);
        _136 = format(move _137) -> [return: bb51, unwind: bb684];
    }

    bb51: {
        StorageDead(_137);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_140);
        _135 = move _136;
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <String as Deref>::deref(move _133) -> [return: bb52, unwind: bb657];
    }

    bb52: {
        _131 = &(*_132);
        StorageDead(_133);
        _130 = solana_program::log::sol_log(move _131) -> [return: bb53, unwind: bb657];
    }

    bb53: {
        StorageDead(_131);
        drop(_135) -> [return: bb54, unwind: bb684];
    }

    bb54: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _1436 = const _;
        _159 = &(*_1436);
        _158 = &(*_159);
        _157 = move _158 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_158);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_1;
        _166 = &(*_167);
        _165 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _166) -> [return: bb55, unwind: bb684];
    }

    bb55: {
        StorageDead(_166);
        _164 = [move _165];
        StorageDead(_165);
        _163 = &_164;
        _162 = &(*_163);
        _161 = move _162 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_162);
        _156 = Arguments::<'_>::new_v1(move _157, move _161) -> [return: bb56, unwind: bb684];
    }

    bb56: {
        StorageDead(_161);
        StorageDead(_157);
        _155 = format(move _156) -> [return: bb57, unwind: bb684];
    }

    bb57: {
        StorageDead(_156);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_159);
        _154 = move _155;
        StorageDead(_155);
        _153 = &_154;
        _152 = &(*_153);
        _151 = <String as Deref>::deref(move _152) -> [return: bb58, unwind: bb656];
    }

    bb58: {
        _150 = &(*_151);
        StorageDead(_152);
        _149 = solana_program::log::sol_log(move _150) -> [return: bb59, unwind: bb656];
    }

    bb59: {
        StorageDead(_150);
        drop(_154) -> [return: bb60, unwind: bb684];
    }

    bb60: {
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageLive(_168);
        _168 = _129;
        _122 = std::result::Result::<(), error::ErrorCode>::Err(move _168);
        StorageDead(_168);
        StorageDead(_129);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_123);
        _121 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _122) -> [return: bb62, unwind: bb684];
    }

    bb62: {
        StorageDead(_122);
        _169 = discriminant(_121);
        switchInt(move _169) -> [0: bb63, 1: bb64, otherwise: bb18];
    }

    bb63: {
        StorageLive(_173);
        _173 = ((_121 as Continue).0: ());
        _120 = _173;
        StorageDead(_173);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &(*_11);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_2;
        _178 = &(*_179);
        _176 = SpotMarketMap::<'_>::get_ref(move _177, move _178) -> [return: bb66, unwind: bb684];
    }

    bb64: {
        StorageLive(_170);
        _170 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _172) -> [return: bb65, unwind: bb684];
    }

    bb65: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb672;
    }

    bb66: {
        StorageDead(_178);
        StorageDead(_177);
        _175 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _176) -> [return: bb67, unwind: bb684];
    }

    bb67: {
        StorageDead(_176);
        _180 = discriminant(_175);
        switchInt(move _180) -> [0: bb68, 1: bb69, otherwise: bb18];
    }

    bb68: {
        StorageLive(_184);
        _184 = move ((_175 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1445 = const true;
        _174 = move _184;
        StorageDead(_184);
        _1453 = discriminant(_175);
        StorageDead(_179);
        StorageDead(_175);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_174;
        _190 = <Ref<'_, SpotMarket> as Deref>::deref(move _191) -> [return: bb71, unwind: bb681];
    }

    bb69: {
        StorageLive(_181);
        _181 = ((_175 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_183);
        _183 = _181;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _183) -> [return: bb70, unwind: bb682];
    }

    bb70: {
        StorageDead(_183);
        StorageDead(_181);
        _1451 = discriminant(_175);
        StorageDead(_179);
        StorageDead(_175);
        goto -> bb620;
    }

    bb71: {
        _189 = &(*_190);
        StorageDead(_191);
        StorageLive(_192);
        _192 = SpotOperation::Liquidation;
        _188 = SpotMarket::is_operation_paused(move _189, move _192) -> [return: bb72, unwind: bb681];
    }

    bb72: {
        switchInt(move _188) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_190);
        StorageLive(_194);
        _194 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _1435 = const _;
        _205 = &(*_1435);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_194;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _212) -> [return: bb75, unwind: bb681];
    }

    bb74: {
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_190);
        StorageLive(_193);
        _193 = ();
        _187 = std::result::Result::<(), error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        goto -> bb87;
    }

    bb75: {
        StorageDead(_212);
        _210 = [move _211];
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        _202 = Arguments::<'_>::new_v1(move _203, move _207) -> [return: bb76, unwind: bb681];
    }

    bb76: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb77, unwind: bb681];
    }

    bb77: {
        StorageDead(_202);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <String as Deref>::deref(move _198) -> [return: bb78, unwind: bb655];
    }

    bb78: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb79, unwind: bb655];
    }

    bb79: {
        StorageDead(_196);
        drop(_200) -> [return: bb80, unwind: bb681];
    }

    bb80: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _1434 = const _;
        _224 = &(*_1434);
        _223 = &(*_224);
        _222 = move _223 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_223);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_2;
        _231 = &(*_232);
        _230 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _231) -> [return: bb81, unwind: bb681];
    }

    bb81: {
        StorageDead(_231);
        _229 = [move _230];
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = move _227 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_227);
        _221 = Arguments::<'_>::new_v1(move _222, move _226) -> [return: bb82, unwind: bb681];
    }

    bb82: {
        StorageDead(_226);
        StorageDead(_222);
        _220 = format(move _221) -> [return: bb83, unwind: bb681];
    }

    bb83: {
        StorageDead(_221);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_224);
        _219 = move _220;
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = <String as Deref>::deref(move _217) -> [return: bb84, unwind: bb654];
    }

    bb84: {
        _215 = &(*_216);
        StorageDead(_217);
        _214 = solana_program::log::sol_log(move _215) -> [return: bb85, unwind: bb654];
    }

    bb85: {
        StorageDead(_215);
        drop(_219) -> [return: bb86, unwind: bb681];
    }

    bb86: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_214);
        StorageLive(_233);
        _233 = _194;
        _187 = std::result::Result::<(), error::ErrorCode>::Err(move _233);
        StorageDead(_233);
        StorageDead(_194);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_188);
        _186 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _187) -> [return: bb88, unwind: bb681];
    }

    bb88: {
        StorageDead(_187);
        _234 = discriminant(_186);
        switchInt(move _234) -> [0: bb89, 1: bb90, otherwise: bb18];
    }

    bb89: {
        StorageLive(_238);
        _238 = ((_186 as Continue).0: ());
        _185 = _238;
        StorageDead(_238);
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_109;
        _244 = <Ref<'_, SpotMarket> as Deref>::deref(move _245) -> [return: bb92, unwind: bb681];
    }

    bb90: {
        StorageLive(_235);
        _235 = ((_186 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb91, unwind: bb681];
    }

    bb91: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_186);
        StorageDead(_185);
        goto -> bb670;
    }

    bb92: {
        StorageDead(_245);
        _243 = ((*_244).62: u8);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_174;
        _247 = <Ref<'_, SpotMarket> as Deref>::deref(move _248) -> [return: bb93, unwind: bb681];
    }

    bb93: {
        StorageDead(_248);
        _246 = ((*_247).62: u8);
        _242 = Eq(move _243, move _246);
        switchInt(move _242) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_243);
        StorageLive(_249);
        _249 = ();
        _241 = std::result::Result::<(), error::ErrorCode>::Ok(move _249);
        StorageDead(_249);
        goto -> bb111;
    }

    bb95: {
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_243);
        StorageLive(_250);
        _250 = error::ErrorCode::InvalidPoolId;
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _1433 = const _;
        _261 = &(*_1433);
        _260 = &(*_261);
        _259 = move _260 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_260);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = &_250;
        _268 = &(*_269);
        _267 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _268) -> [return: bb96, unwind: bb681];
    }

    bb96: {
        StorageDead(_268);
        _266 = [move _267];
        StorageDead(_267);
        _265 = &_266;
        _264 = &(*_265);
        _263 = move _264 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_264);
        _258 = Arguments::<'_>::new_v1(move _259, move _263) -> [return: bb97, unwind: bb681];
    }

    bb97: {
        StorageDead(_263);
        StorageDead(_259);
        _257 = format(move _258) -> [return: bb98, unwind: bb681];
    }

    bb98: {
        StorageDead(_258);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_261);
        _256 = move _257;
        StorageDead(_257);
        _255 = &_256;
        _254 = &(*_255);
        _253 = <String as Deref>::deref(move _254) -> [return: bb99, unwind: bb653];
    }

    bb99: {
        _252 = &(*_253);
        StorageDead(_254);
        _251 = solana_program::log::sol_log(move _252) -> [return: bb100, unwind: bb653];
    }

    bb100: {
        StorageDead(_252);
        drop(_256) -> [return: bb101, unwind: bb681];
    }

    bb101: {
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _1432 = const _;
        _280 = &(*_1432);
        _279 = &(*_280);
        _278 = move _279 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_279);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = &_109;
        _289 = <Ref<'_, SpotMarket> as Deref>::deref(move _290) -> [return: bb102, unwind: bb681];
    }

    bb102: {
        StorageDead(_290);
        _288 = &((*_289).62: u8);
        _287 = &(*_288);
        _286 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _287) -> [return: bb103, unwind: bb681];
    }

    bb103: {
        StorageDead(_287);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &_174;
        _294 = <Ref<'_, SpotMarket> as Deref>::deref(move _295) -> [return: bb104, unwind: bb681];
    }

    bb104: {
        StorageDead(_295);
        _293 = &((*_294).62: u8);
        _292 = &(*_293);
        _291 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _292) -> [return: bb105, unwind: bb681];
    }

    bb105: {
        StorageDead(_292);
        _285 = [move _286, move _291];
        StorageDead(_291);
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _282 = move _283 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_283);
        _277 = Arguments::<'_>::new_v1(move _278, move _282) -> [return: bb106, unwind: bb681];
    }

    bb106: {
        StorageDead(_282);
        StorageDead(_278);
        _276 = format(move _277) -> [return: bb107, unwind: bb681];
    }

    bb107: {
        StorageDead(_277);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_280);
        _275 = move _276;
        StorageDead(_276);
        _274 = &_275;
        _273 = &(*_274);
        _272 = <String as Deref>::deref(move _273) -> [return: bb108, unwind: bb652];
    }

    bb108: {
        _271 = &(*_272);
        StorageDead(_273);
        _270 = solana_program::log::sol_log(move _271) -> [return: bb109, unwind: bb652];
    }

    bb109: {
        StorageDead(_271);
        drop(_275) -> [return: bb110, unwind: bb681];
    }

    bb110: {
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_270);
        StorageLive(_296);
        _296 = _250;
        _241 = std::result::Result::<(), error::ErrorCode>::Err(move _296);
        StorageDead(_296);
        StorageDead(_250);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_242);
        _240 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _241) -> [return: bb112, unwind: bb681];
    }

    bb112: {
        StorageDead(_241);
        _297 = discriminant(_240);
        switchInt(move _297) -> [0: bb113, 1: bb114, otherwise: bb18];
    }

    bb113: {
        StorageLive(_301);
        _301 = ((_240 as Continue).0: ());
        _239 = _301;
        StorageDead(_301);
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_302);
        StorageLive(_303);
        _1446 = const false;
        _303 = move _109;
        _302 = std::mem::drop::<Ref<'_, SpotMarket>>(move _303) -> [return: bb116, unwind: bb681];
    }

    bb114: {
        StorageLive(_298);
        _298 = ((_240 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_300);
        _300 = _298;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _300) -> [return: bb115, unwind: bb681];
    }

    bb115: {
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb670;
    }

    bb116: {
        StorageDead(_303);
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        _1445 = const false;
        _305 = move _174;
        _304 = std::mem::drop::<Ref<'_, SpotMarket>>(move _305) -> [return: bb117, unwind: bb681];
    }

    bb117: {
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &(*_11);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_1;
        _317 = &(*_318);
        _315 = SpotMarketMap::<'_>::get_ref_mut(move _316, move _317) -> [return: bb118, unwind: bb681];
    }

    bb118: {
        StorageDead(_317);
        StorageDead(_316);
        _314 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _315) -> [return: bb119, unwind: bb681];
    }

    bb119: {
        StorageDead(_315);
        _319 = discriminant(_314);
        switchInt(move _319) -> [0: bb120, 1: bb121, otherwise: bb18];
    }

    bb120: {
        StorageLive(_323);
        _323 = move ((_314 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _313 = move _323;
        StorageDead(_323);
        _1457 = discriminant(_314);
        StorageDead(_318);
        StorageDead(_314);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &mut (*_12);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = &_313;
        _334 = <RefMut<'_, SpotMarket> as Deref>::deref(move _335) -> [return: bb123, unwind: bb651];
    }

    bb121: {
        StorageLive(_320);
        _320 = ((_314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_322);
        _322 = _320;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _322) -> [return: bb122, unwind: bb679];
    }

    bb122: {
        StorageDead(_322);
        StorageDead(_320);
        _1455 = discriminant(_314);
        StorageDead(_318);
        StorageDead(_314);
        goto -> bb619;
    }

    bb123: {
        _333 = &(*_334);
        StorageDead(_335);
        _332 = SpotMarket::oracle_id(move _333) -> [return: bb124, unwind: bb651];
    }

    bb124: {
        StorageDead(_333);
        _331 = &_332;
        _330 = &(*_331);
        _328 = OracleMap::<'_>::get_price_data_and_guard_rails(move _329, move _330) -> [return: bb125, unwind: bb651];
    }

    bb125: {
        StorageDead(_330);
        StorageDead(_329);
        _327 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as Try>::branch(move _328) -> [return: bb126, unwind: bb651];
    }

    bb126: {
        StorageDead(_328);
        _336 = discriminant(_327);
        switchInt(move _336) -> [0: bb127, 1: bb128, otherwise: bb18];
    }

    bb127: {
        StorageLive(_340);
        _340 = ((_327 as Continue).0: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails));
        _326 = _340;
        StorageDead(_340);
        StorageLive(_324);
        _324 = (_326.0: &state::oracle::OraclePriceData);
        StorageLive(_325);
        _325 = (_326.1: &state::state::ValidityGuardRails);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_327);
        StorageDead(_326);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &mut _313;
        _346 = &mut (*_347);
        _345 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _346) -> [return: bb130, unwind: bb651];
    }

    bb128: {
        StorageLive(_337);
        _337 = ((_327 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_339);
        _339 = _337;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _339) -> [return: bb129, unwind: bb651];
    }

    bb129: {
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_327);
        StorageDead(_326);
        goto -> bb618;
    }

    bb130: {
        _344 = &mut (*_345);
        StorageDead(_346);
        StorageLive(_348);
        _348 = &(*_324);
        StorageLive(_349);
        _349 = &(*_325);
        StorageLive(_350);
        _350 = _13;
        StorageLive(_351);
        StorageLive(_352);
        _352 = DriftAction::Liquidate;
        _351 = Option::<DriftAction>::Some(move _352);
        StorageDead(_352);
        _343 = update_spot_market_and_check_validity(move _344, move _348, move _349, move _350, move _351) -> [return: bb131, unwind: bb651];
    }

    bb131: {
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_344);
        _342 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _343) -> [return: bb132, unwind: bb651];
    }

    bb132: {
        StorageDead(_343);
        _353 = discriminant(_342);
        switchInt(move _353) -> [0: bb133, 1: bb134, otherwise: bb18];
    }

    bb133: {
        StorageLive(_357);
        _357 = ((_342 as Continue).0: ());
        _341 = _357;
        StorageDead(_357);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &(*_4);
        StorageLive(_362);
        _362 = _1;
        _360 = User::get_spot_position(move _361, move _362) -> [return: bb136, unwind: bb651];
    }

    bb134: {
        StorageLive(_354);
        _354 = ((_342 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_356);
        _356 = _354;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _356) -> [return: bb135, unwind: bb651];
    }

    bb135: {
        StorageDead(_356);
        StorageDead(_354);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_341);
        goto -> bb617;
    }

    bb136: {
        StorageDead(_362);
        StorageDead(_361);
        _359 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _360) -> [return: bb137, unwind: bb651];
    }

    bb137: {
        StorageDead(_360);
        _363 = discriminant(_359);
        switchInt(move _363) -> [0: bb138, 1: bb139, otherwise: bb18];
    }

    bb138: {
        StorageLive(_367);
        _367 = ((_359 as Continue).0: &state::user::SpotPosition);
        _358 = _367;
        StorageDead(_367);
        StorageDead(_359);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &((*_358).5: state::spot_market::SpotBalanceType);
        StorageLive(_373);
        _1431 = const _;
        _373 = &(*_1431);
        _371 = <SpotBalanceType as PartialEq>::eq(move _372, move _373) -> [return: bb141, unwind: bb651];
    }

    bb139: {
        StorageLive(_364);
        _364 = ((_359 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_366);
        _366 = _364;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _366) -> [return: bb140, unwind: bb651];
    }

    bb140: {
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_359);
        goto -> bb616;
    }

    bb141: {
        switchInt(move _371) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        StorageDead(_373);
        StorageDead(_372);
        StorageLive(_375);
        _375 = ();
        _370 = std::result::Result::<(), error::ErrorCode>::Ok(move _375);
        StorageDead(_375);
        goto -> bb151;
    }

    bb143: {
        StorageDead(_373);
        StorageDead(_372);
        StorageLive(_376);
        _376 = error::ErrorCode::WrongSpotBalanceType;
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _1430 = const _;
        _387 = &(*_1430);
        _386 = &(*_387);
        _385 = move _386 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_386);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &_376;
        _394 = &(*_395);
        _393 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _394) -> [return: bb144, unwind: bb651];
    }

    bb144: {
        StorageDead(_394);
        _392 = [move _393];
        StorageDead(_393);
        _391 = &_392;
        _390 = &(*_391);
        _389 = move _390 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_390);
        _384 = Arguments::<'_>::new_v1(move _385, move _389) -> [return: bb145, unwind: bb651];
    }

    bb145: {
        StorageDead(_389);
        StorageDead(_385);
        _383 = format(move _384) -> [return: bb146, unwind: bb651];
    }

    bb146: {
        StorageDead(_384);
        StorageDead(_395);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_387);
        _382 = move _383;
        StorageDead(_383);
        _381 = &_382;
        _380 = &(*_381);
        _379 = <String as Deref>::deref(move _380) -> [return: bb147, unwind: bb650];
    }

    bb147: {
        _378 = &(*_379);
        StorageDead(_380);
        _377 = solana_program::log::sol_log(move _378) -> [return: bb148, unwind: bb650];
    }

    bb148: {
        StorageDead(_378);
        drop(_382) -> [return: bb149, unwind: bb651];
    }

    bb149: {
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = const "User did not have a deposit for the asset market index";
        _397 = &(*_398);
        _396 = solana_program::log::sol_log(move _397) -> [return: bb150, unwind: bb651];
    }

    bb150: {
        StorageDead(_397);
        StorageDead(_398);
        StorageDead(_396);
        StorageLive(_399);
        _399 = _376;
        _370 = std::result::Result::<(), error::ErrorCode>::Err(move _399);
        StorageDead(_399);
        StorageDead(_376);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_371);
        _369 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _370) -> [return: bb152, unwind: bb651];
    }

    bb152: {
        StorageDead(_370);
        _400 = discriminant(_369);
        switchInt(move _400) -> [0: bb153, 1: bb154, otherwise: bb18];
    }

    bb153: {
        StorageLive(_404);
        _404 = ((_369 as Continue).0: ());
        _368 = _404;
        StorageDead(_404);
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &(*_358);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = &_313;
        _411 = &(*_412);
        _410 = <RefMut<'_, SpotMarket> as Deref>::deref(move _411) -> [return: bb156, unwind: bb651];
    }

    bb154: {
        StorageLive(_401);
        _401 = ((_369 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb155, unwind: bb651];
    }

    bb155: {
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_369);
        StorageDead(_368);
        goto -> bb616;
    }

    bb156: {
        _409 = &(*_410);
        StorageDead(_411);
        _407 = SpotPosition::get_token_amount(move _408, move _409) -> [return: bb157, unwind: bb651];
    }

    bb157: {
        StorageDead(_409);
        StorageDead(_408);
        _406 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _407) -> [return: bb158, unwind: bb651];
    }

    bb158: {
        StorageDead(_407);
        _413 = discriminant(_406);
        switchInt(move _413) -> [0: bb159, 1: bb160, otherwise: bb18];
    }

    bb159: {
        StorageLive(_417);
        _417 = ((_406 as Continue).0: u128);
        _405 = _417;
        StorageDead(_417);
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_406);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = _405;
        _421 = Ne(move _422, const 0_u128);
        switchInt(move _421) -> [0: bb163, otherwise: bb162];
    }

    bb160: {
        StorageLive(_414);
        _414 = ((_406 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_416);
        _416 = _414;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _416) -> [return: bb161, unwind: bb651];
    }

    bb161: {
        StorageDead(_416);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_406);
        goto -> bb615;
    }

    bb162: {
        StorageDead(_422);
        StorageLive(_423);
        _423 = ();
        _420 = std::result::Result::<(), error::ErrorCode>::Ok(move _423);
        StorageDead(_423);
        goto -> bb176;
    }

    bb163: {
        StorageDead(_422);
        StorageLive(_424);
        _424 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _1429 = const _;
        _435 = &(*_1429);
        _434 = &(*_435);
        _433 = move _434 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_434);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_424;
        _442 = &(*_443);
        _441 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _442) -> [return: bb164, unwind: bb651];
    }

    bb164: {
        StorageDead(_442);
        _440 = [move _441];
        StorageDead(_441);
        _439 = &_440;
        _438 = &(*_439);
        _437 = move _438 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_438);
        _432 = Arguments::<'_>::new_v1(move _433, move _437) -> [return: bb165, unwind: bb651];
    }

    bb165: {
        StorageDead(_437);
        StorageDead(_433);
        _431 = format(move _432) -> [return: bb166, unwind: bb651];
    }

    bb166: {
        StorageDead(_432);
        StorageDead(_443);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_435);
        _430 = move _431;
        StorageDead(_431);
        _429 = &_430;
        _428 = &(*_429);
        _427 = <String as Deref>::deref(move _428) -> [return: bb167, unwind: bb649];
    }

    bb167: {
        _426 = &(*_427);
        StorageDead(_428);
        _425 = solana_program::log::sol_log(move _426) -> [return: bb168, unwind: bb649];
    }

    bb168: {
        StorageDead(_426);
        drop(_430) -> [return: bb169, unwind: bb651];
    }

    bb169: {
        StorageDead(_430);
        StorageDead(_429);
        StorageDead(_427);
        StorageDead(_425);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _1428 = const _;
        _454 = &(*_1428);
        _453 = &(*_454);
        _452 = move _453 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_453);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &_1;
        _461 = &(*_462);
        _460 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _461) -> [return: bb170, unwind: bb651];
    }

    bb170: {
        StorageDead(_461);
        _459 = [move _460];
        StorageDead(_460);
        _458 = &_459;
        _457 = &(*_458);
        _456 = move _457 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_457);
        _451 = Arguments::<'_>::new_v1(move _452, move _456) -> [return: bb171, unwind: bb651];
    }

    bb171: {
        StorageDead(_456);
        StorageDead(_452);
        _450 = format(move _451) -> [return: bb172, unwind: bb651];
    }

    bb172: {
        StorageDead(_451);
        StorageDead(_462);
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_454);
        _449 = move _450;
        StorageDead(_450);
        _448 = &_449;
        _447 = &(*_448);
        _446 = <String as Deref>::deref(move _447) -> [return: bb173, unwind: bb648];
    }

    bb173: {
        _445 = &(*_446);
        StorageDead(_447);
        _444 = solana_program::log::sol_log(move _445) -> [return: bb174, unwind: bb648];
    }

    bb174: {
        StorageDead(_445);
        drop(_449) -> [return: bb175, unwind: bb651];
    }

    bb175: {
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_444);
        StorageLive(_463);
        _463 = _424;
        _420 = std::result::Result::<(), error::ErrorCode>::Err(move _463);
        StorageDead(_463);
        StorageDead(_424);
        goto -> bb176;
    }

    bb176: {
        StorageDead(_421);
        _419 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _420) -> [return: bb177, unwind: bb651];
    }

    bb177: {
        StorageDead(_420);
        _464 = discriminant(_419);
        switchInt(move _464) -> [0: bb178, 1: bb179, otherwise: bb18];
    }

    bb178: {
        StorageLive(_468);
        _468 = ((_419 as Continue).0: ());
        _418 = _468;
        StorageDead(_468);
        StorageDead(_419);
        StorageDead(_418);
        StorageLive(_469);
        _469 = ((*_324).0: i64);
        StorageLive(_470);
        _470 = _405;
        StorageLive(_471);
        _471 = _469;
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _474 = &_313;
        _473 = <RefMut<'_, SpotMarket> as Deref>::deref(move _474) -> [return: bb181, unwind: bb651];
    }

    bb179: {
        StorageLive(_465);
        _465 = ((_419 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_467);
        _467 = _465;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _467) -> [return: bb180, unwind: bb651];
    }

    bb180: {
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_419);
        StorageDead(_418);
        goto -> bb615;
    }

    bb181: {
        StorageDead(_474);
        _472 = ((*_473).41: u32);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = &_313;
        _476 = <RefMut<'_, SpotMarket> as Deref>::deref(move _477) -> [return: bb182, unwind: bb651];
    }

    bb182: {
        StorageDead(_477);
        _475 = ((*_476).32: u32);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_313;
        _479 = <RefMut<'_, SpotMarket> as Deref>::deref(move _480) -> [return: bb183, unwind: bb651];
    }

    bb183: {
        StorageDead(_480);
        _478 = ((*_479).62: u8);
        StorageLive(_481);
        _481 = ((*_324).2: i64);
        _312 = (move _470, move _471, move _472, move _475, move _478, move _481);
        StorageDead(_481);
        StorageDead(_478);
        StorageDead(_475);
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_405);
        StorageDead(_358);
        StorageDead(_325);
        StorageDead(_324);
        drop(_313) -> [return: bb184, unwind: bb681];
    }

    bb184: {
        StorageDead(_313);
        StorageLive(_306);
        _306 = (_312.0: u128);
        StorageLive(_307);
        _307 = (_312.1: i64);
        StorageLive(_308);
        _308 = (_312.2: u32);
        StorageLive(_309);
        _309 = (_312.3: u32);
        StorageLive(_310);
        _310 = (_312.4: u8);
        StorageLive(_311);
        _311 = (_312.5: i64);
        StorageDead(_479);
        StorageDead(_476);
        StorageDead(_473);
        StorageDead(_312);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &(*_11);
        StorageLive(_493);
        StorageLive(_494);
        _494 = &_2;
        _493 = &(*_494);
        _491 = SpotMarketMap::<'_>::get_ref_mut(move _492, move _493) -> [return: bb185, unwind: bb681];
    }

    bb185: {
        StorageDead(_493);
        StorageDead(_492);
        _490 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _491) -> [return: bb186, unwind: bb681];
    }

    bb186: {
        StorageDead(_491);
        _495 = discriminant(_490);
        switchInt(move _495) -> [0: bb187, 1: bb188, otherwise: bb18];
    }

    bb187: {
        StorageLive(_499);
        _499 = move ((_490 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _489 = move _499;
        StorageDead(_499);
        _1461 = discriminant(_490);
        StorageDead(_494);
        StorageDead(_490);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &mut (*_12);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_489;
        _510 = <RefMut<'_, SpotMarket> as Deref>::deref(move _511) -> [return: bb190, unwind: bb647];
    }

    bb188: {
        StorageLive(_496);
        _496 = ((_490 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_498);
        _498 = _496;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _498) -> [return: bb189, unwind: bb678];
    }

    bb189: {
        StorageDead(_498);
        StorageDead(_496);
        _1459 = discriminant(_490);
        StorageDead(_494);
        StorageDead(_490);
        goto -> bb613;
    }

    bb190: {
        _509 = &(*_510);
        StorageDead(_511);
        _508 = SpotMarket::oracle_id(move _509) -> [return: bb191, unwind: bb647];
    }

    bb191: {
        StorageDead(_509);
        _507 = &_508;
        _506 = &(*_507);
        _504 = OracleMap::<'_>::get_price_data_and_guard_rails(move _505, move _506) -> [return: bb192, unwind: bb647];
    }

    bb192: {
        StorageDead(_506);
        StorageDead(_505);
        _503 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as Try>::branch(move _504) -> [return: bb193, unwind: bb647];
    }

    bb193: {
        StorageDead(_504);
        _512 = discriminant(_503);
        switchInt(move _512) -> [0: bb194, 1: bb195, otherwise: bb18];
    }

    bb194: {
        StorageLive(_516);
        _516 = ((_503 as Continue).0: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails));
        _502 = _516;
        StorageDead(_516);
        StorageLive(_500);
        _500 = (_502.0: &state::oracle::OraclePriceData);
        StorageLive(_501);
        _501 = (_502.1: &state::state::ValidityGuardRails);
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_503);
        StorageDead(_502);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = &mut _489;
        _522 = &mut (*_523);
        _521 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _522) -> [return: bb197, unwind: bb647];
    }

    bb195: {
        StorageLive(_513);
        _513 = ((_503 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_515);
        _515 = _513;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _515) -> [return: bb196, unwind: bb647];
    }

    bb196: {
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_503);
        StorageDead(_502);
        goto -> bb612;
    }

    bb197: {
        _520 = &mut (*_521);
        StorageDead(_522);
        StorageLive(_524);
        _524 = &(*_500);
        StorageLive(_525);
        _525 = &(*_501);
        StorageLive(_526);
        _526 = _13;
        StorageLive(_527);
        StorageLive(_528);
        _528 = DriftAction::Liquidate;
        _527 = Option::<DriftAction>::Some(move _528);
        StorageDead(_528);
        _519 = update_spot_market_and_check_validity(move _520, move _524, move _525, move _526, move _527) -> [return: bb198, unwind: bb647];
    }

    bb198: {
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_520);
        _518 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _519) -> [return: bb199, unwind: bb647];
    }

    bb199: {
        StorageDead(_519);
        _529 = discriminant(_518);
        switchInt(move _529) -> [0: bb200, 1: bb201, otherwise: bb18];
    }

    bb200: {
        StorageLive(_533);
        _533 = ((_518 as Continue).0: ());
        _517 = _533;
        StorageDead(_533);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_518);
        StorageDead(_517);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = &(*_4);
        StorageLive(_538);
        _538 = _2;
        _536 = User::get_spot_position(move _537, move _538) -> [return: bb203, unwind: bb647];
    }

    bb201: {
        StorageLive(_530);
        _530 = ((_518 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_532);
        _532 = _530;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _532) -> [return: bb202, unwind: bb647];
    }

    bb202: {
        StorageDead(_532);
        StorageDead(_530);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_518);
        StorageDead(_517);
        goto -> bb611;
    }

    bb203: {
        StorageDead(_538);
        StorageDead(_537);
        _535 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _536) -> [return: bb204, unwind: bb647];
    }

    bb204: {
        StorageDead(_536);
        _539 = discriminant(_535);
        switchInt(move _539) -> [0: bb205, 1: bb206, otherwise: bb18];
    }

    bb205: {
        StorageLive(_543);
        _543 = ((_535 as Continue).0: &state::user::SpotPosition);
        _534 = _543;
        StorageDead(_543);
        StorageDead(_535);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = &((*_534).5: state::spot_market::SpotBalanceType);
        StorageLive(_549);
        _1427 = const _;
        _549 = &(*_1427);
        _547 = <SpotBalanceType as PartialEq>::eq(move _548, move _549) -> [return: bb208, unwind: bb647];
    }

    bb206: {
        StorageLive(_540);
        _540 = ((_535 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_542);
        _542 = _540;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _542) -> [return: bb207, unwind: bb647];
    }

    bb207: {
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_535);
        goto -> bb610;
    }

    bb208: {
        switchInt(move _547) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        StorageDead(_549);
        StorageDead(_548);
        StorageLive(_551);
        _551 = ();
        _546 = std::result::Result::<(), error::ErrorCode>::Ok(move _551);
        StorageDead(_551);
        goto -> bb218;
    }

    bb210: {
        StorageDead(_549);
        StorageDead(_548);
        StorageLive(_552);
        _552 = error::ErrorCode::WrongSpotBalanceType;
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        _1426 = const _;
        _563 = &(*_1426);
        _562 = &(*_563);
        _561 = move _562 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_562);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        _571 = &_552;
        _570 = &(*_571);
        _569 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _570) -> [return: bb211, unwind: bb647];
    }

    bb211: {
        StorageDead(_570);
        _568 = [move _569];
        StorageDead(_569);
        _567 = &_568;
        _566 = &(*_567);
        _565 = move _566 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_566);
        _560 = Arguments::<'_>::new_v1(move _561, move _565) -> [return: bb212, unwind: bb647];
    }

    bb212: {
        StorageDead(_565);
        StorageDead(_561);
        _559 = format(move _560) -> [return: bb213, unwind: bb647];
    }

    bb213: {
        StorageDead(_560);
        StorageDead(_571);
        StorageDead(_568);
        StorageDead(_567);
        StorageDead(_563);
        _558 = move _559;
        StorageDead(_559);
        _557 = &_558;
        _556 = &(*_557);
        _555 = <String as Deref>::deref(move _556) -> [return: bb214, unwind: bb646];
    }

    bb214: {
        _554 = &(*_555);
        StorageDead(_556);
        _553 = solana_program::log::sol_log(move _554) -> [return: bb215, unwind: bb646];
    }

    bb215: {
        StorageDead(_554);
        drop(_558) -> [return: bb216, unwind: bb647];
    }

    bb216: {
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_553);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = const "User did not have a borrow for the liability market index";
        _573 = &(*_574);
        _572 = solana_program::log::sol_log(move _573) -> [return: bb217, unwind: bb647];
    }

    bb217: {
        StorageDead(_573);
        StorageDead(_574);
        StorageDead(_572);
        StorageLive(_575);
        _575 = _552;
        _546 = std::result::Result::<(), error::ErrorCode>::Err(move _575);
        StorageDead(_575);
        StorageDead(_552);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_547);
        _545 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _546) -> [return: bb219, unwind: bb647];
    }

    bb219: {
        StorageDead(_546);
        _576 = discriminant(_545);
        switchInt(move _576) -> [0: bb220, 1: bb221, otherwise: bb18];
    }

    bb220: {
        StorageLive(_580);
        _580 = ((_545 as Continue).0: ());
        _544 = _580;
        StorageDead(_580);
        StorageDead(_545);
        StorageDead(_544);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = &(*_534);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        _588 = &_489;
        _587 = &(*_588);
        _586 = <RefMut<'_, SpotMarket> as Deref>::deref(move _587) -> [return: bb223, unwind: bb647];
    }

    bb221: {
        StorageLive(_577);
        _577 = ((_545 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_579);
        _579 = _577;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _579) -> [return: bb222, unwind: bb647];
    }

    bb222: {
        StorageDead(_579);
        StorageDead(_577);
        StorageDead(_545);
        StorageDead(_544);
        goto -> bb610;
    }

    bb223: {
        _585 = &(*_586);
        StorageDead(_587);
        _583 = SpotPosition::get_token_amount(move _584, move _585) -> [return: bb224, unwind: bb647];
    }

    bb224: {
        StorageDead(_585);
        StorageDead(_584);
        _582 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _583) -> [return: bb225, unwind: bb647];
    }

    bb225: {
        StorageDead(_583);
        _589 = discriminant(_582);
        switchInt(move _589) -> [0: bb226, 1: bb227, otherwise: bb18];
    }

    bb226: {
        StorageLive(_593);
        _593 = ((_582 as Continue).0: u128);
        _581 = _593;
        StorageDead(_593);
        StorageDead(_588);
        StorageDead(_586);
        StorageDead(_582);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        _598 = _581;
        _597 = Ne(move _598, const 0_u128);
        switchInt(move _597) -> [0: bb230, otherwise: bb229];
    }

    bb227: {
        StorageLive(_590);
        _590 = ((_582 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_592);
        _592 = _590;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _592) -> [return: bb228, unwind: bb647];
    }

    bb228: {
        StorageDead(_592);
        StorageDead(_590);
        StorageDead(_588);
        StorageDead(_586);
        StorageDead(_582);
        goto -> bb609;
    }

    bb229: {
        StorageDead(_598);
        StorageLive(_599);
        _599 = ();
        _596 = std::result::Result::<(), error::ErrorCode>::Ok(move _599);
        StorageDead(_599);
        goto -> bb243;
    }

    bb230: {
        StorageDead(_598);
        StorageLive(_600);
        _600 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        _1425 = const _;
        _611 = &(*_1425);
        _610 = &(*_611);
        _609 = move _610 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_610);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        _619 = &_600;
        _618 = &(*_619);
        _617 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _618) -> [return: bb231, unwind: bb647];
    }

    bb231: {
        StorageDead(_618);
        _616 = [move _617];
        StorageDead(_617);
        _615 = &_616;
        _614 = &(*_615);
        _613 = move _614 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_614);
        _608 = Arguments::<'_>::new_v1(move _609, move _613) -> [return: bb232, unwind: bb647];
    }

    bb232: {
        StorageDead(_613);
        StorageDead(_609);
        _607 = format(move _608) -> [return: bb233, unwind: bb647];
    }

    bb233: {
        StorageDead(_608);
        StorageDead(_619);
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_611);
        _606 = move _607;
        StorageDead(_607);
        _605 = &_606;
        _604 = &(*_605);
        _603 = <String as Deref>::deref(move _604) -> [return: bb234, unwind: bb645];
    }

    bb234: {
        _602 = &(*_603);
        StorageDead(_604);
        _601 = solana_program::log::sol_log(move _602) -> [return: bb235, unwind: bb645];
    }

    bb235: {
        StorageDead(_602);
        drop(_606) -> [return: bb236, unwind: bb647];
    }

    bb236: {
        StorageDead(_606);
        StorageDead(_605);
        StorageDead(_603);
        StorageDead(_601);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        _1424 = const _;
        _630 = &(*_1424);
        _629 = &(*_630);
        _628 = move _629 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_629);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        _638 = &_2;
        _637 = &(*_638);
        _636 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _637) -> [return: bb237, unwind: bb647];
    }

    bb237: {
        StorageDead(_637);
        _635 = [move _636];
        StorageDead(_636);
        _634 = &_635;
        _633 = &(*_634);
        _632 = move _633 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_633);
        _627 = Arguments::<'_>::new_v1(move _628, move _632) -> [return: bb238, unwind: bb647];
    }

    bb238: {
        StorageDead(_632);
        StorageDead(_628);
        _626 = format(move _627) -> [return: bb239, unwind: bb647];
    }

    bb239: {
        StorageDead(_627);
        StorageDead(_638);
        StorageDead(_635);
        StorageDead(_634);
        StorageDead(_630);
        _625 = move _626;
        StorageDead(_626);
        _624 = &_625;
        _623 = &(*_624);
        _622 = <String as Deref>::deref(move _623) -> [return: bb240, unwind: bb644];
    }

    bb240: {
        _621 = &(*_622);
        StorageDead(_623);
        _620 = solana_program::log::sol_log(move _621) -> [return: bb241, unwind: bb644];
    }

    bb241: {
        StorageDead(_621);
        drop(_625) -> [return: bb242, unwind: bb647];
    }

    bb242: {
        StorageDead(_625);
        StorageDead(_624);
        StorageDead(_622);
        StorageDead(_620);
        StorageLive(_639);
        _639 = _600;
        _596 = std::result::Result::<(), error::ErrorCode>::Err(move _639);
        StorageDead(_639);
        StorageDead(_600);
        goto -> bb243;
    }

    bb243: {
        StorageDead(_597);
        _595 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _596) -> [return: bb244, unwind: bb647];
    }

    bb244: {
        StorageDead(_596);
        _640 = discriminant(_595);
        switchInt(move _640) -> [0: bb245, 1: bb246, otherwise: bb18];
    }

    bb245: {
        StorageLive(_644);
        _644 = ((_595 as Continue).0: ());
        _594 = _644;
        StorageDead(_644);
        StorageDead(_595);
        StorageDead(_594);
        StorageLive(_645);
        _645 = ((*_500).0: i64);
        StorageLive(_646);
        _646 = _645;
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = &_489;
        _648 = <RefMut<'_, SpotMarket> as Deref>::deref(move _649) -> [return: bb248, unwind: bb647];
    }

    bb246: {
        StorageLive(_641);
        _641 = ((_595 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_643);
        _643 = _641;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _643) -> [return: bb247, unwind: bb647];
    }

    bb247: {
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_595);
        StorageDead(_594);
        goto -> bb609;
    }

    bb248: {
        StorageDead(_649);
        _647 = ((*_648).41: u32);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _652 = &_489;
        _651 = <RefMut<'_, SpotMarket> as Deref>::deref(move _652) -> [return: bb249, unwind: bb647];
    }

    bb249: {
        StorageDead(_652);
        _650 = ((*_651).34: u32);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        _655 = &_489;
        _654 = <RefMut<'_, SpotMarket> as Deref>::deref(move _655) -> [return: bb250, unwind: bb647];
    }

    bb250: {
        StorageDead(_655);
        _653 = ((*_654).37: u32);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        _658 = &_489;
        _657 = <RefMut<'_, SpotMarket> as Deref>::deref(move _658) -> [return: bb251, unwind: bb647];
    }

    bb251: {
        StorageDead(_658);
        _656 = ((*_657).62: u8);
        StorageLive(_659);
        _659 = ((*_500).2: i64);
        _488 = (move _646, move _647, move _650, move _653, move _656, move _659);
        StorageDead(_659);
        StorageDead(_656);
        StorageDead(_653);
        StorageDead(_650);
        StorageDead(_647);
        StorageDead(_646);
        StorageDead(_645);
        StorageDead(_581);
        StorageDead(_534);
        StorageDead(_501);
        StorageDead(_500);
        drop(_489) -> [return: bb252, unwind: bb681];
    }

    bb252: {
        StorageDead(_489);
        StorageLive(_482);
        _482 = (_488.0: i64);
        StorageLive(_483);
        _483 = (_488.1: u32);
        StorageLive(_484);
        _484 = (_488.2: u32);
        StorageLive(_485);
        _485 = (_488.3: u32);
        StorageLive(_486);
        _486 = (_488.4: u8);
        StorageLive(_487);
        _487 = (_488.5: i64);
        StorageDead(_657);
        StorageDead(_654);
        StorageDead(_651);
        StorageDead(_648);
        StorageDead(_488);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = _310;
        _661 = Eq(move _662, const _);
        switchInt(move _661) -> [0: bb279, otherwise: bb253];
    }

    bb253: {
        StorageDead(_662);
        StorageLive(_663);
        StorageLive(_664);
        _664 = _486;
        _663 = Eq(move _664, const _);
        switchInt(move _663) -> [0: bb278, otherwise: bb254];
    }

    bb254: {
        StorageDead(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        _669 = _311;
        _668 = Eq(move _669, const 0_i64);
        switchInt(move _668) -> [0: bb258, otherwise: bb255];
    }

    bb255: {
        StorageDead(_669);
        StorageLive(_670);
        StorageLive(_671);
        _671 = _487;
        _670 = Eq(move _671, const 0_i64);
        switchInt(move _670) -> [0: bb257, otherwise: bb256];
    }

    bb256: {
        StorageDead(_671);
        StorageLive(_672);
        _672 = ();
        _667 = std::result::Result::<(), error::ErrorCode>::Ok(move _672);
        StorageDead(_672);
        goto -> bb273;
    }

    bb257: {
        StorageDead(_671);
        goto -> bb259;
    }

    bb258: {
        StorageDead(_669);
        goto -> bb259;
    }

    bb259: {
        StorageLive(_673);
        _673 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        _1423 = const _;
        _684 = &(*_1423);
        _683 = &(*_684);
        _682 = move _683 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_683);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        _692 = &_673;
        _691 = &(*_692);
        _690 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _691) -> [return: bb260, unwind: bb681];
    }

    bb260: {
        StorageDead(_691);
        _689 = [move _690];
        StorageDead(_690);
        _688 = &_689;
        _687 = &(*_688);
        _686 = move _687 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_687);
        _681 = Arguments::<'_>::new_v1(move _682, move _686) -> [return: bb261, unwind: bb681];
    }

    bb261: {
        StorageDead(_686);
        StorageDead(_682);
        _680 = format(move _681) -> [return: bb262, unwind: bb681];
    }

    bb262: {
        StorageDead(_681);
        StorageDead(_692);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_684);
        _679 = move _680;
        StorageDead(_680);
        _678 = &_679;
        _677 = &(*_678);
        _676 = <String as Deref>::deref(move _677) -> [return: bb263, unwind: bb643];
    }

    bb263: {
        _675 = &(*_676);
        StorageDead(_677);
        _674 = solana_program::log::sol_log(move _675) -> [return: bb264, unwind: bb643];
    }

    bb264: {
        StorageDead(_675);
        drop(_679) -> [return: bb265, unwind: bb681];
    }

    bb265: {
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_676);
        StorageDead(_674);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        _1422 = const _;
        _703 = &(*_1422);
        _702 = &(*_703);
        _701 = move _702 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_702);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        _711 = &_311;
        _710 = &(*_711);
        _709 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _710) -> [return: bb266, unwind: bb681];
    }

    bb266: {
        StorageDead(_710);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        _714 = &_487;
        _713 = &(*_714);
        _712 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _713) -> [return: bb267, unwind: bb681];
    }

    bb267: {
        StorageDead(_713);
        _708 = [move _709, move _712];
        StorageDead(_712);
        StorageDead(_709);
        _707 = &_708;
        _706 = &(*_707);
        _705 = move _706 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_706);
        _700 = Arguments::<'_>::new_v1(move _701, move _705) -> [return: bb268, unwind: bb681];
    }

    bb268: {
        StorageDead(_705);
        StorageDead(_701);
        _699 = format(move _700) -> [return: bb269, unwind: bb681];
    }

    bb269: {
        StorageDead(_700);
        StorageDead(_714);
        StorageDead(_711);
        StorageDead(_708);
        StorageDead(_707);
        StorageDead(_703);
        _698 = move _699;
        StorageDead(_699);
        _697 = &_698;
        _696 = &(*_697);
        _695 = <String as Deref>::deref(move _696) -> [return: bb270, unwind: bb642];
    }

    bb270: {
        _694 = &(*_695);
        StorageDead(_696);
        _693 = solana_program::log::sol_log(move _694) -> [return: bb271, unwind: bb642];
    }

    bb271: {
        StorageDead(_694);
        drop(_698) -> [return: bb272, unwind: bb681];
    }

    bb272: {
        StorageDead(_698);
        StorageDead(_697);
        StorageDead(_695);
        StorageDead(_693);
        StorageLive(_715);
        _715 = _673;
        _667 = std::result::Result::<(), error::ErrorCode>::Err(move _715);
        StorageDead(_715);
        StorageDead(_673);
        goto -> bb273;
    }

    bb273: {
        StorageDead(_670);
        StorageDead(_668);
        _666 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _667) -> [return: bb274, unwind: bb681];
    }

    bb274: {
        StorageDead(_667);
        _716 = discriminant(_666);
        switchInt(move _716) -> [0: bb275, 1: bb276, otherwise: bb18];
    }

    bb275: {
        StorageLive(_720);
        _720 = ((_666 as Continue).0: ());
        _665 = _720;
        StorageDead(_720);
        StorageDead(_666);
        StorageDead(_665);
        _660 = const ();
        goto -> bb281;
    }

    bb276: {
        StorageLive(_717);
        _717 = ((_666 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_719);
        _719 = _717;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _719) -> [return: bb277, unwind: bb681];
    }

    bb277: {
        StorageDead(_719);
        StorageDead(_717);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_661);
        StorageDead(_660);
        goto -> bb608;
    }

    bb278: {
        StorageDead(_664);
        goto -> bb280;
    }

    bb279: {
        StorageDead(_662);
        goto -> bb280;
    }

    bb280: {
        _660 = const ();
        goto -> bb281;
    }

    bb281: {
        StorageDead(_663);
        StorageDead(_661);
        StorageDead(_660);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = _16;
        _725 = MarginContext::liquidation(move _726) -> [return: bb282, unwind: bb681];
    }

    bb282: {
        StorageDead(_726);
        StorageLive(_727);
        StorageLive(_728);
        _728 = _2;
        _727 = MarketIdentifier::spot(move _728) -> [return: bb283, unwind: bb681];
    }

    bb283: {
        StorageDead(_728);
        _724 = MarginContext::track_market_margin_requirement(move _725, move _727) -> [return: bb284, unwind: bb681];
    }

    bb284: {
        StorageDead(_727);
        StorageDead(_725);
        _723 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _724) -> [return: bb285, unwind: bb681];
    }

    bb285: {
        StorageDead(_724);
        _729 = discriminant(_723);
        switchInt(move _729) -> [0: bb286, 1: bb287, otherwise: bb18];
    }

    bb286: {
        StorageLive(_733);
        _733 = ((_723 as Continue).0: state::margin_calculation::MarginContext);
        _722 = _733;
        StorageDead(_733);
        StorageLive(_734);
        _734 = &(*_4);
        StorageLive(_735);
        _735 = _13;
        _721 = MarginContext::fuel_numerator(move _722, move _734, move _735) -> [return: bb289, unwind: bb681];
    }

    bb287: {
        StorageLive(_730);
        _730 = ((_723 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_732);
        _732 = _730;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _732) -> [return: bb288, unwind: bb681];
    }

    bb288: {
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_722);
        StorageDead(_723);
        goto -> bb607;
    }

    bb289: {
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_722);
        StorageDead(_723);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        _739 = &mut (*_4);
        StorageLive(_740);
        _740 = &(*_10);
        StorageLive(_741);
        _741 = &(*_11);
        StorageLive(_742);
        _742 = &mut (*_12);
        StorageLive(_743);
        _743 = _721;
        StorageLive(_744);
        _744 = &mut (*_6);
        StorageLive(_745);
        _745 = _13;
        _738 = User::calculate_margin_and_increment_fuel_bonus(move _739, move _740, move _741, move _742, move _743, move _744, move _745) -> [return: bb290, unwind: bb681];
    }

    bb290: {
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_743);
        StorageDead(_742);
        StorageDead(_741);
        StorageDead(_740);
        StorageDead(_739);
        _737 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _738) -> [return: bb291, unwind: bb681];
    }

    bb291: {
        StorageDead(_738);
        _746 = discriminant(_737);
        switchInt(move _746) -> [0: bb292, 1: bb293, otherwise: bb18];
    }

    bb292: {
        StorageLive(_750);
        _750 = ((_737 as Continue).0: state::margin_calculation::MarginCalculation);
        _736 = _750;
        StorageDead(_750);
        StorageDead(_737);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        _753 = &(*_4);
        _752 = User::is_being_liquidated(move _753) -> [return: bb295, unwind: bb681];
    }

    bb293: {
        StorageLive(_747);
        _747 = ((_737 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_749);
        _749 = _747;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _749) -> [return: bb294, unwind: bb681];
    }

    bb294: {
        StorageDead(_749);
        StorageDead(_747);
        StorageDead(_737);
        goto -> bb606;
    }

    bb295: {
        switchInt(move _752) -> [0: bb297, otherwise: bb296];
    }

    bb296: {
        StorageDead(_753);
        goto -> bb307;
    }

    bb297: {
        StorageDead(_753);
        StorageLive(_754);
        StorageLive(_755);
        _755 = &_736;
        _754 = MarginCalculation::meets_margin_requirement(move _755) -> [return: bb298, unwind: bb681];
    }

    bb298: {
        switchInt(move _754) -> [0: bb306, otherwise: bb299];
    }

    bb299: {
        StorageDead(_755);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        _1421 = const _;
        _767 = &(*_1421);
        _766 = &(*_767);
        _765 = move _766 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_766);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        _775 = &_736;
        _774 = &(*_775);
        _773 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _774) -> [return: bb300, unwind: bb681];
    }

    bb300: {
        StorageDead(_774);
        _772 = [move _773];
        StorageDead(_773);
        _771 = &_772;
        _770 = &(*_771);
        _769 = move _770 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_770);
        _764 = Arguments::<'_>::new_v1(move _765, move _769) -> [return: bb301, unwind: bb681];
    }

    bb301: {
        StorageDead(_769);
        StorageDead(_765);
        _763 = format(move _764) -> [return: bb302, unwind: bb681];
    }

    bb302: {
        StorageDead(_764);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_771);
        StorageDead(_767);
        _762 = move _763;
        StorageDead(_763);
        _761 = &_762;
        _760 = &(*_761);
        _759 = <String as Deref>::deref(move _760) -> [return: bb303, unwind: bb641];
    }

    bb303: {
        _758 = &(*_759);
        StorageDead(_760);
        _757 = solana_program::log::sol_log(move _758) -> [return: bb304, unwind: bb641];
    }

    bb304: {
        StorageDead(_758);
        drop(_762) -> [return: bb305, unwind: bb681];
    }

    bb305: {
        StorageDead(_762);
        StorageDead(_761);
        StorageDead(_759);
        StorageDead(_757);
        StorageLive(_776);
        _776 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _776);
        StorageDead(_776);
        goto -> bb605;
    }

    bb306: {
        StorageDead(_755);
        goto -> bb307;
    }

    bb307: {
        StorageLive(_777);
        StorageLive(_778);
        _778 = &(*_4);
        _777 = User::is_being_liquidated(move _778) -> [return: bb308, unwind: bb681];
    }

    bb308: {
        switchInt(move _777) -> [0: bb323, otherwise: bb309];
    }

    bb309: {
        StorageDead(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        _782 = &_736;
        _781 = MarginCalculation::can_exit_liquidation(move _782) -> [return: bb310, unwind: bb681];
    }

    bb310: {
        StorageDead(_782);
        _780 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _781) -> [return: bb311, unwind: bb681];
    }

    bb311: {
        StorageDead(_781);
        _783 = discriminant(_780);
        switchInt(move _783) -> [0: bb312, 1: bb313, otherwise: bb18];
    }

    bb312: {
        StorageLive(_787);
        _787 = ((_780 as Continue).0: bool);
        _779 = _787;
        StorageDead(_787);
        switchInt(move _779) -> [0: bb316, otherwise: bb315];
    }

    bb313: {
        StorageLive(_784);
        _784 = ((_780 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_786);
        _786 = _784;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _786) -> [return: bb314, unwind: bb681];
    }

    bb314: {
        StorageDead(_786);
        StorageDead(_784);
        StorageDead(_780);
        goto -> bb604;
    }

    bb315: {
        StorageDead(_780);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _1410 = const _;
        _799 = &(*_1410);
        _798 = &(*_799);
        _797 = move _798 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_798);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        _807 = &_736;
        _806 = &(*_807);
        _805 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _806) -> [return: bb317, unwind: bb681];
    }

    bb316: {
        StorageDead(_780);
        goto -> bb324;
    }

    bb317: {
        StorageDead(_806);
        _804 = [move _805];
        StorageDead(_805);
        _803 = &_804;
        _802 = &(*_803);
        _801 = move _802 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_802);
        _796 = Arguments::<'_>::new_v1(move _797, move _801) -> [return: bb318, unwind: bb681];
    }

    bb318: {
        StorageDead(_801);
        StorageDead(_797);
        _795 = format(move _796) -> [return: bb319, unwind: bb681];
    }

    bb319: {
        StorageDead(_796);
        StorageDead(_807);
        StorageDead(_804);
        StorageDead(_803);
        StorageDead(_799);
        _794 = move _795;
        StorageDead(_795);
        _793 = &_794;
        _792 = &(*_793);
        _791 = <String as Deref>::deref(move _792) -> [return: bb320, unwind: bb640];
    }

    bb320: {
        _790 = &(*_791);
        StorageDead(_792);
        _789 = solana_program::log::sol_log(move _790) -> [return: bb321, unwind: bb640];
    }

    bb321: {
        StorageDead(_790);
        drop(_794) -> [return: bb322, unwind: bb681];
    }

    bb322: {
        StorageDead(_794);
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_789);
        StorageLive(_808);
        _808 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _808);
        StorageDead(_808);
        goto -> bb604;
    }

    bb323: {
        StorageDead(_778);
        goto -> bb324;
    }

    bb324: {
        _751 = const ();
        StorageDead(_779);
        StorageDead(_777);
        StorageDead(_754);
        StorageDead(_752);
        StorageDead(_751);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        _812 = &mut (*_4);
        StorageLive(_813);
        _813 = _14;
        _811 = User::enter_liquidation(move _812, move _813) -> [return: bb325, unwind: bb681];
    }

    bb325: {
        StorageDead(_813);
        StorageDead(_812);
        _810 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _811) -> [return: bb326, unwind: bb681];
    }

    bb326: {
        StorageDead(_811);
        _814 = discriminant(_810);
        switchInt(move _814) -> [0: bb327, 1: bb328, otherwise: bb18];
    }

    bb327: {
        StorageLive(_818);
        _818 = ((_810 as Continue).0: u16);
        _809 = _818;
        StorageDead(_818);
        StorageDead(_810);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        _822 = &mut (*_4);
        StorageLive(_823);
        _823 = &(*_5);
        StorageLive(_824);
        StorageLive(_825);
        _825 = &(*_8);
        _824 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _825);
        StorageDead(_825);
        StorageLive(_826);
        _826 = &(*_10);
        StorageLive(_827);
        _827 = &(*_11);
        StorageLive(_828);
        _828 = &mut (*_12);
        StorageLive(_829);
        _829 = _13;
        StorageLive(_830);
        _830 = _14;
        StorageLive(_831);
        _831 = OrderActionExplanation::Liquidation;
        StorageLive(_832);
        _832 = Option::<state::user::MarketType>::None;
        StorageLive(_833);
        _833 = Option::<u16>::None;
        StorageLive(_834);
        _834 = Option::<controller::position::PositionDirection>::None;
        _821 = controller::orders::cancel_orders(move _822, move _823, move _824, move _826, move _827, move _828, move _829, move _830, move _831, move _832, move _833, move _834) -> [return: bb330, unwind: bb681];
    }

    bb328: {
        StorageLive(_815);
        _815 = ((_810 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_817);
        _817 = _815;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _817) -> [return: bb329, unwind: bb681];
    }

    bb329: {
        StorageDead(_817);
        StorageDead(_815);
        StorageDead(_810);
        goto -> bb603;
    }

    bb330: {
        StorageDead(_834);
        StorageDead(_833);
        StorageDead(_832);
        StorageDead(_831);
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_826);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        _820 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _821) -> [return: bb331, unwind: bb681];
    }

    bb331: {
        StorageDead(_821);
        _835 = discriminant(_820);
        switchInt(move _835) -> [0: bb332, 1: bb333, otherwise: bb18];
    }

    bb332: {
        StorageLive(_839);
        _839 = move ((_820 as Continue).0: std::vec::Vec<u32>);
        _1442 = const true;
        _819 = move _839;
        StorageDead(_839);
        _1465 = discriminant(_820);
        StorageDead(_820);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _842 = &_819;
        _841 = Vec::<u32>::is_empty(move _842) -> [return: bb335, unwind: bb676];
    }

    bb333: {
        StorageLive(_836);
        _836 = ((_820 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_838);
        _838 = _836;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _838) -> [return: bb334, unwind: bb677];
    }

    bb334: {
        StorageDead(_838);
        StorageDead(_836);
        _1463 = discriminant(_820);
        StorageDead(_820);
        goto -> bb602;
    }

    bb335: {
        switchInt(move _841) -> [0: bb337, otherwise: bb336];
    }

    bb336: {
        StorageDead(_842);
        _840 = _736;
        goto -> bb387;
    }

    bb337: {
        StorageDead(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        _846 = &(*_4);
        StorageLive(_847);
        _847 = &(*_10);
        StorageLive(_848);
        _848 = &(*_11);
        StorageLive(_849);
        _849 = &mut (*_12);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        _855 = _16;
        _854 = MarginContext::liquidation(move _855) -> [return: bb338, unwind: bb676];
    }

    bb338: {
        StorageDead(_855);
        StorageLive(_856);
        StorageLive(_857);
        _857 = _2;
        _856 = MarketIdentifier::spot(move _857) -> [return: bb339, unwind: bb676];
    }

    bb339: {
        StorageDead(_857);
        _853 = MarginContext::track_market_margin_requirement(move _854, move _856) -> [return: bb340, unwind: bb676];
    }

    bb340: {
        StorageDead(_856);
        StorageDead(_854);
        _852 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _853) -> [return: bb341, unwind: bb676];
    }

    bb341: {
        StorageDead(_853);
        _858 = discriminant(_852);
        switchInt(move _858) -> [0: bb342, 1: bb343, otherwise: bb18];
    }

    bb342: {
        StorageLive(_862);
        _862 = ((_852 as Continue).0: state::margin_calculation::MarginContext);
        _851 = _862;
        StorageDead(_862);
        StorageLive(_863);
        _863 = &(*_4);
        StorageLive(_864);
        _864 = _13;
        _850 = MarginContext::fuel_numerator(move _851, move _863, move _864) -> [return: bb345, unwind: bb676];
    }

    bb343: {
        StorageLive(_859);
        _859 = ((_852 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_861);
        _861 = _859;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _861) -> [return: bb344, unwind: bb676];
    }

    bb344: {
        StorageDead(_861);
        StorageDead(_859);
        StorageDead(_851);
        StorageDead(_850);
        StorageDead(_849);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_845);
        goto -> bb599;
    }

    bb345: {
        StorageDead(_864);
        StorageDead(_863);
        StorageDead(_851);
        _845 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _846, move _847, move _848, move _849, move _850) -> [return: bb346, unwind: bb676];
    }

    bb346: {
        StorageDead(_850);
        StorageDead(_849);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_846);
        _844 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _845) -> [return: bb347, unwind: bb676];
    }

    bb347: {
        StorageDead(_845);
        _865 = discriminant(_844);
        switchInt(move _865) -> [0: bb348, 1: bb349, otherwise: bb18];
    }

    bb348: {
        StorageLive(_869);
        _869 = ((_844 as Continue).0: state::margin_calculation::MarginCalculation);
        _843 = _869;
        StorageDead(_869);
        StorageDead(_852);
        StorageDead(_844);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = &_736;
        _872 = MarginCalculation::margin_shortage(move _873) -> [return: bb351, unwind: bb676];
    }

    bb349: {
        StorageLive(_866);
        _866 = ((_844 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_868);
        _868 = _866;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _868) -> [return: bb350, unwind: bb676];
    }

    bb350: {
        StorageDead(_868);
        StorageDead(_866);
        goto -> bb599;
    }

    bb351: {
        StorageDead(_873);
        _871 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _872) -> [return: bb352, unwind: bb676];
    }

    bb352: {
        StorageDead(_872);
        _874 = discriminant(_871);
        switchInt(move _874) -> [0: bb353, 1: bb354, otherwise: bb18];
    }

    bb353: {
        StorageLive(_878);
        _878 = ((_871 as Continue).0: u128);
        _870 = _878;
        StorageDead(_878);
        StorageDead(_871);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        _882 = &_843;
        _881 = MarginCalculation::margin_shortage(move _882) -> [return: bb356, unwind: bb676];
    }

    bb354: {
        StorageLive(_875);
        _875 = ((_871 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_877);
        _877 = _875;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _877) -> [return: bb355, unwind: bb676];
    }

    bb355: {
        StorageDead(_877);
        StorageDead(_875);
        StorageDead(_871);
        goto -> bb598;
    }

    bb356: {
        StorageDead(_882);
        _880 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _881) -> [return: bb357, unwind: bb676];
    }

    bb357: {
        StorageDead(_881);
        _883 = discriminant(_880);
        switchInt(move _883) -> [0: bb358, 1: bb359, otherwise: bb18];
    }

    bb358: {
        StorageLive(_887);
        _887 = ((_880 as Continue).0: u128);
        _879 = _887;
        StorageDead(_887);
        StorageDead(_880);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        _892 = _870;
        StorageLive(_893);
        _893 = _879;
        _891 = core::num::<impl u128>::saturating_sub(move _892, move _893) -> [return: bb361, unwind: bb676];
    }

    bb359: {
        StorageLive(_884);
        _884 = ((_880 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_886);
        _886 = _884;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _886) -> [return: bb360, unwind: bb676];
    }

    bb360: {
        StorageDead(_886);
        StorageDead(_884);
        StorageDead(_880);
        goto -> bb597;
    }

    bb361: {
        StorageDead(_893);
        StorageDead(_892);
        _890 = <u128 as Cast>::cast::<u64>(move _891) -> [return: bb362, unwind: bb676];
    }

    bb362: {
        StorageDead(_891);
        _889 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _890) -> [return: bb363, unwind: bb676];
    }

    bb363: {
        StorageDead(_890);
        _894 = discriminant(_889);
        switchInt(move _894) -> [0: bb364, 1: bb365, otherwise: bb18];
    }

    bb364: {
        StorageLive(_898);
        _898 = ((_889 as Continue).0: u64);
        _888 = _898;
        StorageDead(_898);
        StorageDead(_889);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        _902 = &mut (*_4);
        StorageLive(_903);
        _903 = _888;
        _901 = User::increment_margin_freed(move _902, move _903) -> [return: bb367, unwind: bb676];
    }

    bb365: {
        StorageLive(_895);
        _895 = ((_889 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_897);
        _897 = _895;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _897) -> [return: bb366, unwind: bb676];
    }

    bb366: {
        StorageDead(_897);
        StorageDead(_895);
        StorageDead(_889);
        goto -> bb596;
    }

    bb367: {
        StorageDead(_903);
        StorageDead(_902);
        _900 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _901) -> [return: bb368, unwind: bb676];
    }

    bb368: {
        StorageDead(_901);
        _904 = discriminant(_900);
        switchInt(move _904) -> [0: bb369, 1: bb370, otherwise: bb18];
    }

    bb369: {
        StorageLive(_908);
        _908 = ((_900 as Continue).0: ());
        _899 = _908;
        StorageDead(_908);
        StorageDead(_900);
        StorageDead(_899);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        _923 = _13;
        StorageLive(_924);
        _924 = _809;
        StorageLive(_925);
        _925 = LiquidationType::LiquidateSpot;
        StorageLive(_926);
        _926 = (*_5);
        StorageLive(_927);
        _927 = (*_8);
        StorageLive(_928);
        _928 = (_736.3: u128);
        StorageLive(_929);
        _929 = (_736.1: i128);
        StorageLive(_930);
        StorageLive(_931);
        _931 = &(*_4);
        _930 = User::is_bankrupt(move _931) -> [return: bb372, unwind: bb676];
    }

    bb370: {
        StorageLive(_905);
        _905 = ((_900 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_907);
        _907 = _905;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _907) -> [return: bb371, unwind: bb676];
    }

    bb371: {
        StorageDead(_907);
        StorageDead(_905);
        StorageDead(_900);
        StorageDead(_899);
        goto -> bb596;
    }

    bb372: {
        StorageDead(_931);
        StorageLive(_932);
        _1442 = const false;
        _932 = move _819;
        StorageLive(_933);
        _933 = _888;
        StorageLive(_934);
        StorageLive(_935);
        _935 = _1;
        StorageLive(_936);
        _936 = _307;
        StorageLive(_937);
        _937 = _2;
        StorageLive(_938);
        _938 = _482;
        _934 = LiquidateSpotRecord { asset_market_index: move _935, asset_price: move _936, asset_transfer: const 0_u128, liability_market_index: move _937, liability_price: move _938, liability_transfer: const 0_u128, if_fee: const 0_u64 };
        StorageDead(_938);
        StorageDead(_937);
        StorageDead(_936);
        StorageDead(_935);
        StorageLive(_939);
        _939 = <LiquidationRecord as Default>::default() -> [return: bb373, unwind: bb639];
    }

    bb373: {
        _922 = LiquidationRecord { ts: move _923, liquidation_type: move _925, user: move _926, liquidator: move _927, margin_requirement: move _928, total_collateral: move _929, margin_freed: move _933, liquidation_id: move _924, bankrupt: move _930, canceled_order_ids: move _932, liquidate_perp: move (_939.10: state::events::LiquidatePerpRecord), liquidate_spot: move _934, liquidate_borrow_for_perp_pnl: move (_939.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_939.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_939.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_939.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_934);
        StorageDead(_933);
        StorageDead(_932);
        StorageDead(_930);
        StorageDead(_929);
        StorageDead(_928);
        StorageDead(_927);
        StorageDead(_926);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_923);
        _921 = &_922;
        _920 = &(*_921);
        _919 = <LiquidationRecord as anchor_lang::Event>::data(move _920) -> [return: bb374, unwind: bb637];
    }

    bb374: {
        StorageDead(_920);
        _918 = &_919;
        _917 = &(*_918);
        _916 = <Vec<u8> as Deref>::deref(move _917) -> [return: bb375, unwind: bb636];
    }

    bb375: {
        _915 = &(*_916);
        StorageDead(_917);
        _914 = [move _915];
        StorageDead(_915);
        _913 = &_914;
        _912 = &(*_913);
        _911 = move _912 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_912);
        _910 = solana_program::log::sol_log_data(move _911) -> [return: bb376, unwind: bb636];
    }

    bb376: {
        StorageDead(_911);
        drop(_919) -> [return: bb377, unwind: bb637];
    }

    bb377: {
        drop(_922) -> [return: bb378, unwind: bb638];
    }

    bb378: {
        drop(_939) -> [return: bb379, unwind: bb676];
    }

    bb379: {
        StorageDead(_939);
        StorageDead(_922);
        StorageDead(_921);
        StorageDead(_919);
        StorageDead(_918);
        StorageDead(_916);
        StorageDead(_914);
        StorageDead(_913);
        StorageDead(_910);
        _909 = const ();
        StorageDead(_909);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        _944 = &_843;
        _943 = MarginCalculation::can_exit_liquidation(move _944) -> [return: bb380, unwind: bb676];
    }

    bb380: {
        StorageDead(_944);
        _942 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _943) -> [return: bb381, unwind: bb676];
    }

    bb381: {
        StorageDead(_943);
        _945 = discriminant(_942);
        switchInt(move _945) -> [0: bb382, 1: bb383, otherwise: bb18];
    }

    bb382: {
        StorageLive(_949);
        _949 = ((_942 as Continue).0: bool);
        _941 = _949;
        StorageDead(_949);
        switchInt(move _941) -> [0: bb386, otherwise: bb385];
    }

    bb383: {
        StorageLive(_946);
        _946 = ((_942 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_948);
        _948 = _946;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _948) -> [return: bb384, unwind: bb676];
    }

    bb384: {
        StorageDead(_948);
        StorageDead(_946);
        StorageDead(_942);
        goto -> bb595;
    }

    bb385: {
        StorageDead(_942);
        StorageLive(_951);
        _951 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _951);
        StorageDead(_951);
        goto -> bb595;
    }

    bb386: {
        StorageDead(_942);
        _940 = const ();
        StorageDead(_941);
        StorageDead(_940);
        _840 = _843;
        StorageDead(_888);
        StorageDead(_879);
        StorageDead(_870);
        StorageDead(_843);
        goto -> bb387;
    }

    bb387: {
        StorageDead(_841);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        _955 = &_840;
        _954 = MarginCalculation::margin_shortage(move _955) -> [return: bb388, unwind: bb676];
    }

    bb388: {
        StorageDead(_955);
        _953 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _954) -> [return: bb389, unwind: bb676];
    }

    bb389: {
        StorageDead(_954);
        _956 = discriminant(_953);
        switchInt(move _956) -> [0: bb390, 1: bb391, otherwise: bb18];
    }

    bb390: {
        StorageLive(_960);
        _960 = ((_953 as Continue).0: u128);
        _952 = _960;
        StorageDead(_960);
        StorageDead(_953);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        _964 = _484;
        StorageLive(_965);
        _965 = _16;
        _963 = <u32 as SafeMath>::safe_add(move _964, move _965) -> [return: bb393, unwind: bb676];
    }

    bb391: {
        StorageLive(_957);
        _957 = ((_953 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_959);
        _959 = _957;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _959) -> [return: bb392, unwind: bb676];
    }

    bb392: {
        StorageDead(_959);
        StorageDead(_957);
        StorageDead(_953);
        goto -> bb594;
    }

    bb393: {
        StorageDead(_965);
        StorageDead(_964);
        _962 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _963) -> [return: bb394, unwind: bb676];
    }

    bb394: {
        StorageDead(_963);
        _966 = discriminant(_962);
        switchInt(move _966) -> [0: bb395, 1: bb396, otherwise: bb18];
    }

    bb395: {
        StorageLive(_970);
        _970 = ((_962 as Continue).0: u32);
        _961 = _970;
        StorageDead(_970);
        StorageDead(_962);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        _974 = _952;
        StorageLive(_975);
        _975 = _309;
        StorageLive(_976);
        _976 = _961;
        StorageLive(_977);
        _977 = _483;
        StorageLive(_978);
        _978 = _482;
        StorageLive(_979);
        _979 = _485;
        _973 = calculate_liability_transfer_to_cover_margin_shortage(move _974, move _975, const _, move _976, const _, move _977, move _978, move _979) -> [return: bb398, unwind: bb676];
    }

    bb396: {
        StorageLive(_967);
        _967 = ((_962 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_969);
        _969 = _967;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _969) -> [return: bb397, unwind: bb676];
    }

    bb397: {
        StorageDead(_969);
        StorageDead(_967);
        StorageDead(_962);
        goto -> bb593;
    }

    bb398: {
        StorageDead(_979);
        StorageDead(_978);
        StorageDead(_977);
        StorageDead(_976);
        StorageDead(_975);
        StorageDead(_974);
        _972 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _973) -> [return: bb399, unwind: bb676];
    }

    bb399: {
        StorageDead(_973);
        _980 = discriminant(_972);
        switchInt(move _980) -> [0: bb400, 1: bb401, otherwise: bb18];
    }

    bb400: {
        StorageLive(_984);
        _984 = ((_972 as Continue).0: u128);
        _971 = _984;
        StorageDead(_984);
        StorageDead(_972);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        _988 = &(*_4);
        StorageLive(_989);
        _989 = _952;
        StorageLive(_990);
        _990 = _14;
        StorageLive(_991);
        _991 = _17;
        StorageLive(_992);
        _992 = _19;
        _987 = calculate_max_pct_to_liquidate(move _988, move _989, move _990, move _991, move _992) -> [return: bb403, unwind: bb676];
    }

    bb401: {
        StorageLive(_981);
        _981 = ((_972 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_983);
        _983 = _981;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _983) -> [return: bb402, unwind: bb676];
    }

    bb402: {
        StorageDead(_983);
        StorageDead(_981);
        StorageDead(_972);
        goto -> bb592;
    }

    bb403: {
        StorageDead(_992);
        StorageDead(_991);
        StorageDead(_990);
        StorageDead(_989);
        StorageDead(_988);
        _986 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _987) -> [return: bb404, unwind: bb676];
    }

    bb404: {
        StorageDead(_987);
        _993 = discriminant(_986);
        switchInt(move _993) -> [0: bb405, 1: bb406, otherwise: bb18];
    }

    bb405: {
        StorageLive(_997);
        _997 = ((_986 as Continue).0: u128);
        _985 = _997;
        StorageDead(_997);
        StorageDead(_986);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        _1002 = _971;
        StorageLive(_1003);
        _1003 = _985;
        _1001 = core::num::<impl u128>::saturating_mul(move _1002, move _1003) -> [return: bb408, unwind: bb676];
    }

    bb406: {
        StorageLive(_994);
        _994 = ((_986 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_996);
        _996 = _994;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _996) -> [return: bb407, unwind: bb676];
    }

    bb407: {
        StorageDead(_996);
        StorageDead(_994);
        StorageDead(_986);
        goto -> bb591;
    }

    bb408: {
        StorageDead(_1003);
        StorageDead(_1002);
        _1000 = <u128 as SafeMath>::safe_div(move _1001, const _) -> [return: bb409, unwind: bb676];
    }

    bb409: {
        StorageDead(_1001);
        _999 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1000) -> [return: bb410, unwind: bb676];
    }

    bb410: {
        StorageDead(_1000);
        _1004 = discriminant(_999);
        switchInt(move _1004) -> [0: bb411, 1: bb412, otherwise: bb18];
    }

    bb411: {
        StorageLive(_1008);
        _1008 = ((_999 as Continue).0: u128);
        _998 = _1008;
        StorageDead(_1008);
        StorageDead(_999);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        _1011 = _998;
        _1010 = Eq(move _1011, const 0_u128);
        switchInt(move _1010) -> [0: bb415, otherwise: bb414];
    }

    bb412: {
        StorageLive(_1005);
        _1005 = ((_999 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1007);
        _1007 = _1005;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1007) -> [return: bb413, unwind: bb676];
    }

    bb413: {
        StorageDead(_1007);
        StorageDead(_1005);
        StorageDead(_999);
        goto -> bb590;
    }

    bb414: {
        StorageDead(_1011);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        _1015 = const "max_liability_allowed_to_be_transferred == 0";
        _1014 = &(*_1015);
        _1013 = solana_program::log::sol_log(move _1014) -> [return: bb416, unwind: bb676];
    }

    bb415: {
        StorageDead(_1011);
        _1009 = const ();
        StorageDead(_1010);
        StorageDead(_1009);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        _1020 = _306;
        StorageLive(_1021);
        _1021 = _308;
        StorageLive(_1022);
        _1022 = _307;
        StorageLive(_1023);
        _1023 = _971;
        StorageLive(_1024);
        _1024 = _483;
        StorageLive(_1025);
        _1025 = _482;
        _1019 = calculate_asset_transfer_for_liability_transfer(move _1020, const _, move _1021, move _1022, move _1023, const _, move _1024, move _1025) -> [return: bb417, unwind: bb676];
    }

    bb416: {
        StorageDead(_1014);
        StorageDead(_1015);
        StorageDead(_1013);
        StorageLive(_1016);
        _1016 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1016);
        StorageDead(_1016);
        StorageDead(_1010);
        StorageDead(_1009);
        goto -> bb590;
    }

    bb417: {
        StorageDead(_1025);
        StorageDead(_1024);
        StorageDead(_1023);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageDead(_1020);
        _1018 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1019) -> [return: bb418, unwind: bb676];
    }

    bb418: {
        StorageDead(_1019);
        _1026 = discriminant(_1018);
        switchInt(move _1026) -> [0: bb419, 1: bb420, otherwise: bb18];
    }

    bb419: {
        StorageLive(_1030);
        _1030 = ((_1018 as Continue).0: u128);
        _1017 = _1030;
        StorageDead(_1030);
        StorageDead(_1018);
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        _1034 = _1017;
        StorageLive(_1035);
        StorageLive(_1036);
        _1036 = _1017;
        _1037 = Eq(const 400_u128, const 0_u128);
        assert(!move _1037, "attempt to divide `{}` by zero", _1036) -> [success: bb422, unwind: bb676];
    }

    bb420: {
        StorageLive(_1027);
        _1027 = ((_1018 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1029);
        _1029 = _1027;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1029) -> [return: bb421, unwind: bb676];
    }

    bb421: {
        StorageDead(_1029);
        StorageDead(_1027);
        StorageDead(_1018);
        goto -> bb589;
    }

    bb422: {
        _1035 = Div(move _1036, const 400_u128);
        StorageDead(_1036);
        _1033 = <u128 as SafeMath>::safe_add(move _1034, move _1035) -> [return: bb423, unwind: bb676];
    }

    bb423: {
        StorageDead(_1035);
        StorageDead(_1034);
        _1032 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1033) -> [return: bb424, unwind: bb676];
    }

    bb424: {
        StorageDead(_1033);
        _1038 = discriminant(_1032);
        switchInt(move _1038) -> [0: bb425, 1: bb426, otherwise: bb18];
    }

    bb425: {
        StorageLive(_1042);
        _1042 = ((_1032 as Continue).0: u128);
        _1031 = _1042;
        StorageDead(_1042);
        StorageDead(_1032);
        StorageLive(_1043);
        StorageLive(_1044);
        StorageLive(_1045);
        _1045 = _1031;
        _1044 = Eq(move _1045, const 0_u128);
        switchInt(move _1044) -> [0: bb429, otherwise: bb428];
    }

    bb426: {
        StorageLive(_1039);
        _1039 = ((_1032 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1041);
        _1041 = _1039;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1041) -> [return: bb427, unwind: bb676];
    }

    bb427: {
        StorageDead(_1041);
        StorageDead(_1039);
        StorageDead(_1032);
        goto -> bb588;
    }

    bb428: {
        StorageDead(_1045);
        StorageLive(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        StorageLive(_1056);
        StorageLive(_1057);
        _1414 = const _;
        _1057 = &(*_1414);
        _1056 = &(*_1057);
        _1055 = move _1056 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1056);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        _1065 = &_1;
        _1064 = &(*_1065);
        _1063 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1064) -> [return: bb430, unwind: bb676];
    }

    bb429: {
        StorageDead(_1045);
        _1043 = const ();
        StorageDead(_1044);
        StorageDead(_1043);
        StorageLive(_1133);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        _1137 = _1031;
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        StorageLive(_1141);
        _1141 = _3;
        _1140 = <u64 as Cast>::cast::<u128>(move _1141) -> [return: bb457, unwind: bb676];
    }

    bb430: {
        StorageDead(_1064);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        _1068 = &_2;
        _1067 = &(*_1068);
        _1066 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1067) -> [return: bb431, unwind: bb676];
    }

    bb431: {
        StorageDead(_1067);
        _1062 = [move _1063, move _1066];
        StorageDead(_1066);
        StorageDead(_1063);
        _1061 = &_1062;
        _1060 = &(*_1061);
        _1059 = move _1060 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1060);
        _1054 = Arguments::<'_>::new_v1(move _1055, move _1059) -> [return: bb432, unwind: bb676];
    }

    bb432: {
        StorageDead(_1059);
        StorageDead(_1055);
        _1053 = format(move _1054) -> [return: bb433, unwind: bb676];
    }

    bb433: {
        StorageDead(_1054);
        StorageDead(_1068);
        StorageDead(_1065);
        StorageDead(_1062);
        StorageDead(_1061);
        StorageDead(_1057);
        _1052 = move _1053;
        StorageDead(_1053);
        _1051 = &_1052;
        _1050 = &(*_1051);
        _1049 = <String as Deref>::deref(move _1050) -> [return: bb434, unwind: bb635];
    }

    bb434: {
        _1048 = &(*_1049);
        StorageDead(_1050);
        _1047 = solana_program::log::sol_log(move _1048) -> [return: bb435, unwind: bb635];
    }

    bb435: {
        StorageDead(_1048);
        drop(_1052) -> [return: bb436, unwind: bb676];
    }

    bb436: {
        StorageDead(_1052);
        StorageDead(_1051);
        StorageDead(_1049);
        StorageDead(_1047);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        _1413 = const _;
        _1079 = &(*_1413);
        _1078 = &(*_1079);
        _1077 = move _1078 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1078);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        StorageLive(_1087);
        _1087 = &_1031;
        _1086 = &(*_1087);
        _1085 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1086) -> [return: bb437, unwind: bb676];
    }

    bb437: {
        StorageDead(_1086);
        StorageLive(_1088);
        StorageLive(_1089);
        StorageLive(_1090);
        _1090 = &_971;
        _1089 = &(*_1090);
        _1088 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1089) -> [return: bb438, unwind: bb676];
    }

    bb438: {
        StorageDead(_1089);
        _1084 = [move _1085, move _1088];
        StorageDead(_1088);
        StorageDead(_1085);
        _1083 = &_1084;
        _1082 = &(*_1083);
        _1081 = move _1082 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1082);
        _1076 = Arguments::<'_>::new_v1(move _1077, move _1081) -> [return: bb439, unwind: bb676];
    }

    bb439: {
        StorageDead(_1081);
        StorageDead(_1077);
        _1075 = format(move _1076) -> [return: bb440, unwind: bb676];
    }

    bb440: {
        StorageDead(_1076);
        StorageDead(_1090);
        StorageDead(_1087);
        StorageDead(_1084);
        StorageDead(_1083);
        StorageDead(_1079);
        _1074 = move _1075;
        StorageDead(_1075);
        _1073 = &_1074;
        _1072 = &(*_1073);
        _1071 = <String as Deref>::deref(move _1072) -> [return: bb441, unwind: bb634];
    }

    bb441: {
        _1070 = &(*_1071);
        StorageDead(_1072);
        _1069 = solana_program::log::sol_log(move _1070) -> [return: bb442, unwind: bb634];
    }

    bb442: {
        StorageDead(_1070);
        drop(_1074) -> [return: bb443, unwind: bb676];
    }

    bb443: {
        StorageDead(_1074);
        StorageDead(_1073);
        StorageDead(_1071);
        StorageDead(_1069);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        StorageLive(_1101);
        _1412 = const _;
        _1101 = &(*_1412);
        _1100 = &(*_1101);
        _1099 = move _1100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1100);
        StorageLive(_1103);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        _1109 = &_998;
        _1108 = &(*_1109);
        _1107 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1108) -> [return: bb444, unwind: bb676];
    }

    bb444: {
        StorageDead(_1108);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        _1112 = &_971;
        _1111 = &(*_1112);
        _1110 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1111) -> [return: bb445, unwind: bb676];
    }

    bb445: {
        StorageDead(_1111);
        _1106 = [move _1107, move _1110];
        StorageDead(_1110);
        StorageDead(_1107);
        _1105 = &_1106;
        _1104 = &(*_1105);
        _1103 = move _1104 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1104);
        _1098 = Arguments::<'_>::new_v1(move _1099, move _1103) -> [return: bb446, unwind: bb676];
    }

    bb446: {
        StorageDead(_1103);
        StorageDead(_1099);
        _1097 = format(move _1098) -> [return: bb447, unwind: bb676];
    }

    bb447: {
        StorageDead(_1098);
        StorageDead(_1112);
        StorageDead(_1109);
        StorageDead(_1106);
        StorageDead(_1105);
        StorageDead(_1101);
        _1096 = move _1097;
        StorageDead(_1097);
        _1095 = &_1096;
        _1094 = &(*_1095);
        _1093 = <String as Deref>::deref(move _1094) -> [return: bb448, unwind: bb633];
    }

    bb448: {
        _1092 = &(*_1093);
        StorageDead(_1094);
        _1091 = solana_program::log::sol_log(move _1092) -> [return: bb449, unwind: bb633];
    }

    bb449: {
        StorageDead(_1092);
        drop(_1096) -> [return: bb450, unwind: bb676];
    }

    bb450: {
        StorageDead(_1096);
        StorageDead(_1095);
        StorageDead(_1093);
        StorageDead(_1091);
        StorageLive(_1113);
        StorageLive(_1114);
        StorageLive(_1115);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        StorageLive(_1120);
        StorageLive(_1121);
        StorageLive(_1122);
        StorageLive(_1123);
        _1411 = const _;
        _1123 = &(*_1411);
        _1122 = &(*_1123);
        _1121 = move _1122 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1122);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        StorageLive(_1131);
        _1131 = &_3;
        _1130 = &(*_1131);
        _1129 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1130) -> [return: bb451, unwind: bb676];
    }

    bb451: {
        StorageDead(_1130);
        _1128 = [move _1129];
        StorageDead(_1129);
        _1127 = &_1128;
        _1126 = &(*_1127);
        _1125 = move _1126 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1126);
        _1120 = Arguments::<'_>::new_v1(move _1121, move _1125) -> [return: bb452, unwind: bb676];
    }

    bb452: {
        StorageDead(_1125);
        StorageDead(_1121);
        _1119 = format(move _1120) -> [return: bb453, unwind: bb676];
    }

    bb453: {
        StorageDead(_1120);
        StorageDead(_1131);
        StorageDead(_1128);
        StorageDead(_1127);
        StorageDead(_1123);
        _1118 = move _1119;
        StorageDead(_1119);
        _1117 = &_1118;
        _1116 = &(*_1117);
        _1115 = <String as Deref>::deref(move _1116) -> [return: bb454, unwind: bb632];
    }

    bb454: {
        _1114 = &(*_1115);
        StorageDead(_1116);
        _1113 = solana_program::log::sol_log(move _1114) -> [return: bb455, unwind: bb632];
    }

    bb455: {
        StorageDead(_1114);
        drop(_1118) -> [return: bb456, unwind: bb676];
    }

    bb456: {
        StorageDead(_1118);
        StorageDead(_1117);
        StorageDead(_1115);
        StorageDead(_1113);
        StorageLive(_1132);
        _1132 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1132);
        StorageDead(_1132);
        StorageDead(_1044);
        StorageDead(_1043);
        goto -> bb588;
    }

    bb457: {
        StorageDead(_1141);
        _1139 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1140) -> [return: bb458, unwind: bb676];
    }

    bb458: {
        StorageDead(_1140);
        _1142 = discriminant(_1139);
        switchInt(move _1142) -> [0: bb459, 1: bb460, otherwise: bb18];
    }

    bb459: {
        StorageLive(_1146);
        _1146 = ((_1139 as Continue).0: u128);
        _1138 = _1146;
        StorageDead(_1146);
        _1136 = Ge(move _1137, move _1138);
        switchInt(move _1136) -> [0: bb463, otherwise: bb462];
    }

    bb460: {
        StorageLive(_1143);
        _1143 = ((_1139 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1145);
        _1145 = _1143;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1145) -> [return: bb461, unwind: bb676];
    }

    bb461: {
        StorageDead(_1145);
        StorageDead(_1143);
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageDead(_1136);
        StorageDead(_1135);
        goto -> bb587;
    }

    bb462: {
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageLive(_1147);
        _1147 = ();
        _1135 = std::result::Result::<(), error::ErrorCode>::Ok(move _1147);
        StorageDead(_1147);
        goto -> bb477;
    }

    bb463: {
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageLive(_1148);
        _1148 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        StorageLive(_1152);
        StorageLive(_1153);
        StorageLive(_1154);
        StorageLive(_1155);
        StorageLive(_1156);
        StorageLive(_1157);
        StorageLive(_1158);
        StorageLive(_1159);
        _1420 = const _;
        _1159 = &(*_1420);
        _1158 = &(*_1159);
        _1157 = move _1158 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1158);
        StorageLive(_1161);
        StorageLive(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        _1167 = &_1148;
        _1166 = &(*_1167);
        _1165 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1166) -> [return: bb464, unwind: bb676];
    }

    bb464: {
        StorageDead(_1166);
        _1164 = [move _1165];
        StorageDead(_1165);
        _1163 = &_1164;
        _1162 = &(*_1163);
        _1161 = move _1162 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1162);
        _1156 = Arguments::<'_>::new_v1(move _1157, move _1161) -> [return: bb465, unwind: bb676];
    }

    bb465: {
        StorageDead(_1161);
        StorageDead(_1157);
        _1155 = format(move _1156) -> [return: bb466, unwind: bb676];
    }

    bb466: {
        StorageDead(_1156);
        StorageDead(_1167);
        StorageDead(_1164);
        StorageDead(_1163);
        StorageDead(_1159);
        _1154 = move _1155;
        StorageDead(_1155);
        _1153 = &_1154;
        _1152 = &(*_1153);
        _1151 = <String as Deref>::deref(move _1152) -> [return: bb467, unwind: bb631];
    }

    bb467: {
        _1150 = &(*_1151);
        StorageDead(_1152);
        _1149 = solana_program::log::sol_log(move _1150) -> [return: bb468, unwind: bb631];
    }

    bb468: {
        StorageDead(_1150);
        drop(_1154) -> [return: bb469, unwind: bb676];
    }

    bb469: {
        StorageDead(_1154);
        StorageDead(_1153);
        StorageDead(_1151);
        StorageDead(_1149);
        StorageLive(_1168);
        StorageLive(_1169);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        _1419 = const _;
        _1178 = &(*_1419);
        _1177 = &(*_1178);
        _1176 = move _1177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1177);
        StorageLive(_1180);
        StorageLive(_1181);
        StorageLive(_1182);
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        _1186 = &_3;
        _1185 = &(*_1186);
        _1184 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1185) -> [return: bb470, unwind: bb676];
    }

    bb470: {
        StorageDead(_1185);
        StorageLive(_1187);
        StorageLive(_1188);
        StorageLive(_1189);
        _1189 = &_1031;
        _1188 = &(*_1189);
        _1187 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1188) -> [return: bb471, unwind: bb676];
    }

    bb471: {
        StorageDead(_1188);
        _1183 = [move _1184, move _1187];
        StorageDead(_1187);
        StorageDead(_1184);
        _1182 = &_1183;
        _1181 = &(*_1182);
        _1180 = move _1181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1181);
        _1175 = Arguments::<'_>::new_v1(move _1176, move _1180) -> [return: bb472, unwind: bb676];
    }

    bb472: {
        StorageDead(_1180);
        StorageDead(_1176);
        _1174 = format(move _1175) -> [return: bb473, unwind: bb676];
    }

    bb473: {
        StorageDead(_1175);
        StorageDead(_1189);
        StorageDead(_1186);
        StorageDead(_1183);
        StorageDead(_1182);
        StorageDead(_1178);
        _1173 = move _1174;
        StorageDead(_1174);
        _1172 = &_1173;
        _1171 = &(*_1172);
        _1170 = <String as Deref>::deref(move _1171) -> [return: bb474, unwind: bb630];
    }

    bb474: {
        _1169 = &(*_1170);
        StorageDead(_1171);
        _1168 = solana_program::log::sol_log(move _1169) -> [return: bb475, unwind: bb630];
    }

    bb475: {
        StorageDead(_1169);
        drop(_1173) -> [return: bb476, unwind: bb676];
    }

    bb476: {
        StorageDead(_1173);
        StorageDead(_1172);
        StorageDead(_1170);
        StorageDead(_1168);
        StorageLive(_1190);
        _1190 = _1148;
        _1135 = std::result::Result::<(), error::ErrorCode>::Err(move _1190);
        StorageDead(_1190);
        StorageDead(_1148);
        goto -> bb477;
    }

    bb477: {
        StorageDead(_1136);
        _1134 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1135) -> [return: bb478, unwind: bb676];
    }

    bb478: {
        StorageDead(_1135);
        _1191 = discriminant(_1134);
        switchInt(move _1191) -> [0: bb479, 1: bb480, otherwise: bb18];
    }

    bb479: {
        StorageLive(_1195);
        _1195 = ((_1134 as Continue).0: ());
        _1133 = _1195;
        StorageDead(_1195);
        StorageDead(_1134);
        StorageDead(_1133);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        StorageLive(_1199);
        StorageLive(_1200);
        _1200 = _306;
        StorageLive(_1201);
        StorageLive(_1202);
        StorageLive(_1203);
        StorageLive(_1204);
        _1204 = _3;
        _1203 = <u64 as Cast>::cast::<u128>(move _1204) -> [return: bb482, unwind: bb676];
    }

    bb480: {
        StorageLive(_1192);
        _1192 = ((_1134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1194);
        _1194 = _1192;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1194) -> [return: bb481, unwind: bb676];
    }

    bb481: {
        StorageDead(_1194);
        StorageDead(_1192);
        goto -> bb587;
    }

    bb482: {
        StorageDead(_1204);
        _1202 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1203) -> [return: bb483, unwind: bb676];
    }

    bb483: {
        StorageDead(_1203);
        _1205 = discriminant(_1202);
        switchInt(move _1205) -> [0: bb484, 1: bb485, otherwise: bb18];
    }

    bb484: {
        StorageLive(_1209);
        _1209 = ((_1202 as Continue).0: u128);
        _1201 = _1209;
        StorageDead(_1209);
        _1199 = Ge(move _1200, move _1201);
        switchInt(move _1199) -> [0: bb488, otherwise: bb487];
    }

    bb485: {
        StorageLive(_1206);
        _1206 = ((_1202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1208);
        _1208 = _1206;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1208) -> [return: bb486, unwind: bb676];
    }

    bb486: {
        StorageDead(_1208);
        StorageDead(_1206);
        StorageDead(_1202);
        StorageDead(_1201);
        StorageDead(_1200);
        StorageDead(_1199);
        StorageDead(_1198);
        goto -> bb586;
    }

    bb487: {
        StorageDead(_1202);
        StorageDead(_1201);
        StorageDead(_1200);
        StorageLive(_1210);
        _1210 = ();
        _1198 = std::result::Result::<(), error::ErrorCode>::Ok(move _1210);
        StorageDead(_1210);
        goto -> bb502;
    }

    bb488: {
        StorageDead(_1202);
        StorageDead(_1201);
        StorageDead(_1200);
        StorageLive(_1211);
        _1211 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_1212);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        StorageLive(_1216);
        StorageLive(_1217);
        StorageLive(_1218);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        _1418 = const _;
        _1222 = &(*_1418);
        _1221 = &(*_1222);
        _1220 = move _1221 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1221);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        _1230 = &_1211;
        _1229 = &(*_1230);
        _1228 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1229) -> [return: bb489, unwind: bb676];
    }

    bb489: {
        StorageDead(_1229);
        _1227 = [move _1228];
        StorageDead(_1228);
        _1226 = &_1227;
        _1225 = &(*_1226);
        _1224 = move _1225 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1225);
        _1219 = Arguments::<'_>::new_v1(move _1220, move _1224) -> [return: bb490, unwind: bb676];
    }

    bb490: {
        StorageDead(_1224);
        StorageDead(_1220);
        _1218 = format(move _1219) -> [return: bb491, unwind: bb676];
    }

    bb491: {
        StorageDead(_1219);
        StorageDead(_1230);
        StorageDead(_1227);
        StorageDead(_1226);
        StorageDead(_1222);
        _1217 = move _1218;
        StorageDead(_1218);
        _1216 = &_1217;
        _1215 = &(*_1216);
        _1214 = <String as Deref>::deref(move _1215) -> [return: bb492, unwind: bb629];
    }

    bb492: {
        _1213 = &(*_1214);
        StorageDead(_1215);
        _1212 = solana_program::log::sol_log(move _1213) -> [return: bb493, unwind: bb629];
    }

    bb493: {
        StorageDead(_1213);
        drop(_1217) -> [return: bb494, unwind: bb676];
    }

    bb494: {
        StorageDead(_1217);
        StorageDead(_1216);
        StorageDead(_1214);
        StorageDead(_1212);
        StorageLive(_1231);
        StorageLive(_1232);
        StorageLive(_1233);
        StorageLive(_1234);
        StorageLive(_1235);
        StorageLive(_1236);
        StorageLive(_1237);
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        _1417 = const _;
        _1241 = &(*_1417);
        _1240 = &(*_1241);
        _1239 = move _1240 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1240);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        _1249 = &_3;
        _1248 = &(*_1249);
        _1247 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1248) -> [return: bb495, unwind: bb676];
    }

    bb495: {
        StorageDead(_1248);
        StorageLive(_1250);
        StorageLive(_1251);
        StorageLive(_1252);
        _1252 = &_306;
        _1251 = &(*_1252);
        _1250 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1251) -> [return: bb496, unwind: bb676];
    }

    bb496: {
        StorageDead(_1251);
        _1246 = [move _1247, move _1250];
        StorageDead(_1250);
        StorageDead(_1247);
        _1245 = &_1246;
        _1244 = &(*_1245);
        _1243 = move _1244 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1244);
        _1238 = Arguments::<'_>::new_v1(move _1239, move _1243) -> [return: bb497, unwind: bb676];
    }

    bb497: {
        StorageDead(_1243);
        StorageDead(_1239);
        _1237 = format(move _1238) -> [return: bb498, unwind: bb676];
    }

    bb498: {
        StorageDead(_1238);
        StorageDead(_1252);
        StorageDead(_1249);
        StorageDead(_1246);
        StorageDead(_1245);
        StorageDead(_1241);
        _1236 = move _1237;
        StorageDead(_1237);
        _1235 = &_1236;
        _1234 = &(*_1235);
        _1233 = <String as Deref>::deref(move _1234) -> [return: bb499, unwind: bb628];
    }

    bb499: {
        _1232 = &(*_1233);
        StorageDead(_1234);
        _1231 = solana_program::log::sol_log(move _1232) -> [return: bb500, unwind: bb628];
    }

    bb500: {
        StorageDead(_1232);
        drop(_1236) -> [return: bb501, unwind: bb676];
    }

    bb501: {
        StorageDead(_1236);
        StorageDead(_1235);
        StorageDead(_1233);
        StorageDead(_1231);
        StorageLive(_1253);
        _1253 = _1211;
        _1198 = std::result::Result::<(), error::ErrorCode>::Err(move _1253);
        StorageDead(_1253);
        StorageDead(_1211);
        goto -> bb502;
    }

    bb502: {
        StorageDead(_1199);
        _1197 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1198) -> [return: bb503, unwind: bb676];
    }

    bb503: {
        StorageDead(_1198);
        _1254 = discriminant(_1197);
        switchInt(move _1254) -> [0: bb504, 1: bb505, otherwise: bb18];
    }

    bb504: {
        StorageLive(_1258);
        _1258 = ((_1197 as Continue).0: ());
        _1196 = _1258;
        StorageDead(_1258);
        StorageDead(_1197);
        StorageDead(_1196);
        StorageLive(_1259);
        StorageLive(_1260);
        StorageLive(_1261);
        StorageLive(_1262);
        StorageLive(_1263);
        StorageLive(_1264);
        StorageLive(_1265);
        _1265 = _482;
        _1264 = <i64 as Cast>::cast::<i64>(move _1265) -> [return: bb507, unwind: bb676];
    }

    bb505: {
        StorageLive(_1255);
        _1255 = ((_1197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1257);
        _1257 = _1255;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1257) -> [return: bb506, unwind: bb676];
    }

    bb506: {
        StorageDead(_1257);
        StorageDead(_1255);
        goto -> bb586;
    }

    bb507: {
        StorageDead(_1265);
        _1263 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1264) -> [return: bb508, unwind: bb676];
    }

    bb508: {
        StorageDead(_1264);
        _1266 = discriminant(_1263);
        switchInt(move _1266) -> [0: bb509, 1: bb510, otherwise: bb18];
    }

    bb509: {
        StorageLive(_1270);
        _1270 = ((_1263 as Continue).0: i64);
        _1262 = _1270;
        StorageDead(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        StorageLive(_1277);
        _1277 = &(*_11);
        StorageLive(_1278);
        StorageLive(_1279);
        _1279 = &_2;
        _1278 = &(*_1279);
        _1276 = SpotMarketMap::<'_>::get_ref(move _1277, move _1278) -> [return: bb512, unwind: bb676];
    }

    bb510: {
        StorageLive(_1267);
        _1267 = ((_1263 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1269);
        _1269 = _1267;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1269) -> [return: bb511, unwind: bb676];
    }

    bb511: {
        StorageDead(_1269);
        StorageDead(_1267);
        StorageDead(_1262);
        StorageDead(_1261);
        goto -> bb584;
    }

    bb512: {
        StorageDead(_1278);
        StorageDead(_1277);
        _1275 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1276) -> [return: bb513, unwind: bb676];
    }

    bb513: {
        _1444 = const true;
        StorageDead(_1276);
        _1280 = discriminant(_1275);
        switchInt(move _1280) -> [0: bb514, 1: bb515, otherwise: bb18];
    }

    bb514: {
        StorageLive(_1284);
        _1284 = move ((_1275 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1274 = move _1284;
        StorageDead(_1284);
        _1273 = &_1274;
        _1272 = <Ref<'_, SpotMarket> as Deref>::deref(move _1273) -> [return: bb517, unwind: bb627];
    }

    bb515: {
        StorageLive(_1281);
        _1281 = ((_1275 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1283);
        _1283 = _1281;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1283) -> [return: bb516, unwind: bb674];
    }

    bb516: {
        StorageDead(_1283);
        StorageDead(_1281);
        StorageDead(_1273);
        StorageDead(_1271);
        StorageDead(_1262);
        StorageDead(_1261);
        goto -> bb667;
    }

    bb517: {
        StorageDead(_1273);
        _1271 = (((*_1272).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_1285);
        StorageLive(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        StorageLive(_1289);
        _1289 = &((*_15).7: state::state::OracleGuardRails);
        _1288 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1289) -> [return: bb518, unwind: bb627];
    }

    bb518: {
        StorageDead(_1289);
        _1287 = <u64 as Cast>::cast::<i64>(move _1288) -> [return: bb519, unwind: bb627];
    }

    bb519: {
        StorageDead(_1288);
        _1286 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1287) -> [return: bb520, unwind: bb627];
    }

    bb520: {
        StorageDead(_1287);
        _1290 = discriminant(_1286);
        switchInt(move _1290) -> [0: bb521, 1: bb522, otherwise: bb18];
    }

    bb521: {
        StorageLive(_1294);
        _1294 = ((_1286 as Continue).0: i64);
        _1285 = _1294;
        StorageDead(_1294);
        _1261 = math::orders::is_oracle_too_divergent_with_twap_5min(move _1262, move _1271, move _1285) -> [return: bb524, unwind: bb627];
    }

    bb522: {
        StorageLive(_1291);
        _1291 = ((_1286 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1293);
        _1293 = _1291;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1293) -> [return: bb523, unwind: bb627];
    }

    bb523: {
        StorageDead(_1293);
        StorageDead(_1291);
        StorageDead(_1285);
        StorageDead(_1271);
        StorageDead(_1262);
        StorageDead(_1261);
        goto -> bb583;
    }

    bb524: {
        StorageDead(_1285);
        StorageDead(_1271);
        StorageDead(_1262);
        _1260 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1261) -> [return: bb525, unwind: bb627];
    }

    bb525: {
        StorageDead(_1261);
        _1295 = discriminant(_1260);
        switchInt(move _1295) -> [0: bb526, 1: bb527, otherwise: bb18];
    }

    bb526: {
        StorageLive(_1299);
        _1299 = ((_1260 as Continue).0: bool);
        _1259 = _1299;
        StorageDead(_1299);
        StorageDead(_1286);
        drop(_1274) -> [return: bb663, unwind: bb674];
    }

    bb527: {
        StorageLive(_1296);
        _1296 = ((_1260 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1298);
        _1298 = _1296;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1298) -> [return: bb528, unwind: bb627];
    }

    bb528: {
        StorageDead(_1298);
        StorageDead(_1296);
        goto -> bb583;
    }

    bb529: {
        StorageLive(_1304);
        _1304 = ();
        _1302 = std::result::Result::<(), error::ErrorCode>::Ok(move _1304);
        StorageDead(_1304);
        goto -> bb538;
    }

    bb530: {
        StorageLive(_1305);
        _1305 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_1306);
        StorageLive(_1307);
        StorageLive(_1308);
        StorageLive(_1309);
        StorageLive(_1310);
        StorageLive(_1311);
        StorageLive(_1312);
        StorageLive(_1313);
        StorageLive(_1314);
        StorageLive(_1315);
        StorageLive(_1316);
        _1416 = const _;
        _1316 = &(*_1416);
        _1315 = &(*_1316);
        _1314 = move _1315 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1315);
        StorageLive(_1318);
        StorageLive(_1319);
        StorageLive(_1320);
        StorageLive(_1321);
        StorageLive(_1322);
        StorageLive(_1323);
        StorageLive(_1324);
        _1324 = &_1305;
        _1323 = &(*_1324);
        _1322 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1323) -> [return: bb531, unwind: bb676];
    }

    bb531: {
        StorageDead(_1323);
        _1321 = [move _1322];
        StorageDead(_1322);
        _1320 = &_1321;
        _1319 = &(*_1320);
        _1318 = move _1319 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1319);
        _1313 = Arguments::<'_>::new_v1(move _1314, move _1318) -> [return: bb532, unwind: bb676];
    }

    bb532: {
        StorageDead(_1318);
        StorageDead(_1314);
        _1312 = format(move _1313) -> [return: bb533, unwind: bb676];
    }

    bb533: {
        StorageDead(_1313);
        StorageDead(_1324);
        StorageDead(_1321);
        StorageDead(_1320);
        StorageDead(_1316);
        _1311 = move _1312;
        StorageDead(_1312);
        _1310 = &_1311;
        _1309 = &(*_1310);
        _1308 = <String as Deref>::deref(move _1309) -> [return: bb534, unwind: bb626];
    }

    bb534: {
        _1307 = &(*_1308);
        StorageDead(_1309);
        _1306 = solana_program::log::sol_log(move _1307) -> [return: bb535, unwind: bb626];
    }

    bb535: {
        StorageDead(_1307);
        drop(_1311) -> [return: bb536, unwind: bb676];
    }

    bb536: {
        StorageDead(_1311);
        StorageDead(_1310);
        StorageDead(_1308);
        StorageDead(_1306);
        StorageLive(_1325);
        StorageLive(_1326);
        StorageLive(_1327);
        _1327 = const "liability oracle too divergent";
        _1326 = &(*_1327);
        _1325 = solana_program::log::sol_log(move _1326) -> [return: bb537, unwind: bb676];
    }

    bb537: {
        StorageDead(_1326);
        StorageDead(_1327);
        StorageDead(_1325);
        StorageLive(_1328);
        _1328 = _1305;
        _1302 = std::result::Result::<(), error::ErrorCode>::Err(move _1328);
        StorageDead(_1328);
        StorageDead(_1305);
        goto -> bb538;
    }

    bb538: {
        StorageDead(_1303);
        _1301 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1302) -> [return: bb539, unwind: bb676];
    }

    bb539: {
        StorageDead(_1302);
        _1329 = discriminant(_1301);
        switchInt(move _1329) -> [0: bb540, 1: bb541, otherwise: bb18];
    }

    bb540: {
        StorageLive(_1333);
        _1333 = ((_1301 as Continue).0: ());
        _1300 = _1333;
        StorageDead(_1333);
        StorageDead(_1301);
        StorageDead(_1300);
        StorageLive(_1334);
        StorageLive(_1335);
        StorageLive(_1336);
        StorageLive(_1337);
        StorageLive(_1338);
        StorageLive(_1339);
        StorageLive(_1340);
        _1340 = _307;
        _1339 = <i64 as Cast>::cast::<i64>(move _1340) -> [return: bb543, unwind: bb676];
    }

    bb541: {
        StorageLive(_1330);
        _1330 = ((_1301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1332);
        _1332 = _1330;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1332) -> [return: bb542, unwind: bb676];
    }

    bb542: {
        StorageDead(_1332);
        StorageDead(_1330);
        StorageDead(_1301);
        StorageDead(_1300);
        goto -> bb585;
    }

    bb543: {
        StorageDead(_1340);
        _1338 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1339) -> [return: bb544, unwind: bb676];
    }

    bb544: {
        StorageDead(_1339);
        _1341 = discriminant(_1338);
        switchInt(move _1341) -> [0: bb545, 1: bb546, otherwise: bb18];
    }

    bb545: {
        StorageLive(_1345);
        _1345 = ((_1338 as Continue).0: i64);
        _1337 = _1345;
        StorageDead(_1345);
        StorageLive(_1346);
        StorageLive(_1347);
        StorageLive(_1348);
        StorageLive(_1349);
        StorageLive(_1350);
        StorageLive(_1351);
        StorageLive(_1352);
        _1352 = &(*_11);
        StorageLive(_1353);
        StorageLive(_1354);
        _1354 = &_1;
        _1353 = &(*_1354);
        _1351 = SpotMarketMap::<'_>::get_ref(move _1352, move _1353) -> [return: bb548, unwind: bb676];
    }

    bb546: {
        StorageLive(_1342);
        _1342 = ((_1338 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1344);
        _1344 = _1342;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1344) -> [return: bb547, unwind: bb676];
    }

    bb547: {
        StorageDead(_1344);
        StorageDead(_1342);
        StorageDead(_1337);
        StorageDead(_1336);
        goto -> bb581;
    }

    bb548: {
        StorageDead(_1353);
        StorageDead(_1352);
        _1350 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1351) -> [return: bb549, unwind: bb676];
    }

    bb549: {
        _1443 = const true;
        StorageDead(_1351);
        _1355 = discriminant(_1350);
        switchInt(move _1355) -> [0: bb550, 1: bb551, otherwise: bb18];
    }

    bb550: {
        StorageLive(_1359);
        _1359 = move ((_1350 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1349 = move _1359;
        StorageDead(_1359);
        _1348 = &_1349;
        _1347 = <Ref<'_, SpotMarket> as Deref>::deref(move _1348) -> [return: bb553, unwind: bb625];
    }

    bb551: {
        StorageLive(_1356);
        _1356 = ((_1350 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1358);
        _1358 = _1356;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1358) -> [return: bb552, unwind: bb673];
    }

    bb552: {
        StorageDead(_1358);
        StorageDead(_1356);
        StorageDead(_1348);
        StorageDead(_1346);
        StorageDead(_1337);
        StorageDead(_1336);
        goto -> bb666;
    }

    bb553: {
        StorageDead(_1348);
        _1346 = (((*_1347).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_1360);
        StorageLive(_1361);
        StorageLive(_1362);
        StorageLive(_1363);
        StorageLive(_1364);
        _1364 = &((*_15).7: state::state::OracleGuardRails);
        _1363 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1364) -> [return: bb554, unwind: bb625];
    }

    bb554: {
        StorageDead(_1364);
        _1362 = <u64 as Cast>::cast::<i64>(move _1363) -> [return: bb555, unwind: bb625];
    }

    bb555: {
        StorageDead(_1363);
        _1361 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1362) -> [return: bb556, unwind: bb625];
    }

    bb556: {
        StorageDead(_1362);
        _1365 = discriminant(_1361);
        switchInt(move _1365) -> [0: bb557, 1: bb558, otherwise: bb18];
    }

    bb557: {
        StorageLive(_1369);
        _1369 = ((_1361 as Continue).0: i64);
        _1360 = _1369;
        StorageDead(_1369);
        _1336 = math::orders::is_oracle_too_divergent_with_twap_5min(move _1337, move _1346, move _1360) -> [return: bb560, unwind: bb625];
    }

    bb558: {
        StorageLive(_1366);
        _1366 = ((_1361 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1368);
        _1368 = _1366;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1368) -> [return: bb559, unwind: bb625];
    }

    bb559: {
        StorageDead(_1368);
        StorageDead(_1366);
        StorageDead(_1360);
        StorageDead(_1346);
        StorageDead(_1337);
        StorageDead(_1336);
        goto -> bb580;
    }

    bb560: {
        StorageDead(_1360);
        StorageDead(_1346);
        StorageDead(_1337);
        _1335 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1336) -> [return: bb561, unwind: bb625];
    }

    bb561: {
        StorageDead(_1336);
        _1370 = discriminant(_1335);
        switchInt(move _1370) -> [0: bb562, 1: bb563, otherwise: bb18];
    }

    bb562: {
        StorageLive(_1374);
        _1374 = ((_1335 as Continue).0: bool);
        _1334 = _1374;
        StorageDead(_1374);
        StorageDead(_1361);
        drop(_1349) -> [return: bb664, unwind: bb673];
    }

    bb563: {
        StorageLive(_1371);
        _1371 = ((_1335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1373);
        _1373 = _1371;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1373) -> [return: bb564, unwind: bb625];
    }

    bb564: {
        StorageDead(_1373);
        StorageDead(_1371);
        goto -> bb580;
    }

    bb565: {
        StorageLive(_1379);
        _1379 = ();
        _1377 = std::result::Result::<(), error::ErrorCode>::Ok(move _1379);
        StorageDead(_1379);
        goto -> bb574;
    }

    bb566: {
        StorageLive(_1380);
        _1380 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_1381);
        StorageLive(_1382);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        StorageLive(_1386);
        StorageLive(_1387);
        StorageLive(_1388);
        StorageLive(_1389);
        StorageLive(_1390);
        StorageLive(_1391);
        _1415 = const _;
        _1391 = &(*_1415);
        _1390 = &(*_1391);
        _1389 = move _1390 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1390);
        StorageLive(_1393);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        StorageLive(_1399);
        _1399 = &_1380;
        _1398 = &(*_1399);
        _1397 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1398) -> [return: bb567, unwind: bb676];
    }

    bb567: {
        StorageDead(_1398);
        _1396 = [move _1397];
        StorageDead(_1397);
        _1395 = &_1396;
        _1394 = &(*_1395);
        _1393 = move _1394 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1394);
        _1388 = Arguments::<'_>::new_v1(move _1389, move _1393) -> [return: bb568, unwind: bb676];
    }

    bb568: {
        StorageDead(_1393);
        StorageDead(_1389);
        _1387 = format(move _1388) -> [return: bb569, unwind: bb676];
    }

    bb569: {
        StorageDead(_1388);
        StorageDead(_1399);
        StorageDead(_1396);
        StorageDead(_1395);
        StorageDead(_1391);
        _1386 = move _1387;
        StorageDead(_1387);
        _1385 = &_1386;
        _1384 = &(*_1385);
        _1383 = <String as Deref>::deref(move _1384) -> [return: bb570, unwind: bb624];
    }

    bb570: {
        _1382 = &(*_1383);
        StorageDead(_1384);
        _1381 = solana_program::log::sol_log(move _1382) -> [return: bb571, unwind: bb624];
    }

    bb571: {
        StorageDead(_1382);
        drop(_1386) -> [return: bb572, unwind: bb676];
    }

    bb572: {
        StorageDead(_1386);
        StorageDead(_1385);
        StorageDead(_1383);
        StorageDead(_1381);
        StorageLive(_1400);
        StorageLive(_1401);
        StorageLive(_1402);
        _1402 = const "asset oracle too divergent";
        _1401 = &(*_1402);
        _1400 = solana_program::log::sol_log(move _1401) -> [return: bb573, unwind: bb676];
    }

    bb573: {
        StorageDead(_1401);
        StorageDead(_1402);
        StorageDead(_1400);
        StorageLive(_1403);
        _1403 = _1380;
        _1377 = std::result::Result::<(), error::ErrorCode>::Err(move _1403);
        StorageDead(_1403);
        StorageDead(_1380);
        goto -> bb574;
    }

    bb574: {
        StorageDead(_1378);
        _1376 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1377) -> [return: bb575, unwind: bb676];
    }

    bb575: {
        StorageDead(_1377);
        _1404 = discriminant(_1376);
        switchInt(move _1404) -> [0: bb576, 1: bb577, otherwise: bb18];
    }

    bb576: {
        StorageLive(_1408);
        _1408 = ((_1376 as Continue).0: ());
        _1375 = _1408;
        StorageDead(_1408);
        StorageDead(_1376);
        StorageDead(_1375);
        StorageLive(_1409);
        _1409 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1409);
        StorageDead(_1409);
        StorageDead(_1334);
        StorageDead(_1259);
        StorageDead(_1031);
        StorageDead(_1017);
        StorageDead(_998);
        StorageDead(_985);
        StorageDead(_971);
        StorageDead(_961);
        StorageDead(_952);
        StorageDead(_840);
        switchInt(_1442) -> [0: bb579, otherwise: bb665];
    }

    bb577: {
        StorageLive(_1405);
        _1405 = ((_1376 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1407);
        _1407 = _1405;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1407) -> [return: bb578, unwind: bb676];
    }

    bb578: {
        StorageDead(_1407);
        StorageDead(_1405);
        StorageDead(_1376);
        StorageDead(_1375);
        goto -> bb582;
    }

    bb579: {
        _1442 = const false;
        StorageDead(_819);
        StorageDead(_809);
        StorageDead(_736);
        StorageDead(_721);
        StorageDead(_487);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_306);
        _1445 = const false;
        StorageDead(_174);
        _1446 = const false;
        StorageDead(_109);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb623;
    }

    bb580: {
        StorageDead(_1361);
        drop(_1349) -> [return: bb666, unwind: bb673];
    }

    bb581: {
        StorageDead(_1338);
        StorageDead(_1335);
        goto -> bb582;
    }

    bb582: {
        StorageDead(_1334);
        goto -> bb585;
    }

    bb583: {
        StorageDead(_1286);
        drop(_1274) -> [return: bb667, unwind: bb674];
    }

    bb584: {
        StorageDead(_1263);
        StorageDead(_1260);
        goto -> bb585;
    }

    bb585: {
        StorageDead(_1259);
        goto -> bb588;
    }

    bb586: {
        StorageDead(_1197);
        StorageDead(_1196);
        goto -> bb588;
    }

    bb587: {
        StorageDead(_1134);
        StorageDead(_1133);
        goto -> bb588;
    }

    bb588: {
        StorageDead(_1031);
        goto -> bb589;
    }

    bb589: {
        StorageDead(_1017);
        goto -> bb590;
    }

    bb590: {
        StorageDead(_998);
        goto -> bb591;
    }

    bb591: {
        StorageDead(_985);
        goto -> bb592;
    }

    bb592: {
        StorageDead(_971);
        goto -> bb593;
    }

    bb593: {
        StorageDead(_961);
        goto -> bb594;
    }

    bb594: {
        StorageDead(_952);
        goto -> bb601;
    }

    bb595: {
        StorageDead(_941);
        StorageDead(_940);
        goto -> bb596;
    }

    bb596: {
        StorageDead(_888);
        goto -> bb597;
    }

    bb597: {
        StorageDead(_879);
        goto -> bb598;
    }

    bb598: {
        StorageDead(_870);
        goto -> bb600;
    }

    bb599: {
        StorageDead(_852);
        StorageDead(_844);
        goto -> bb600;
    }

    bb600: {
        StorageDead(_843);
        StorageDead(_841);
        goto -> bb601;
    }

    bb601: {
        StorageDead(_840);
        switchInt(_1442) -> [0: bb602, otherwise: bb668];
    }

    bb602: {
        _1442 = const false;
        StorageDead(_819);
        goto -> bb603;
    }

    bb603: {
        StorageDead(_809);
        goto -> bb606;
    }

    bb604: {
        StorageDead(_779);
        StorageDead(_777);
        goto -> bb605;
    }

    bb605: {
        StorageDead(_754);
        StorageDead(_752);
        StorageDead(_751);
        goto -> bb606;
    }

    bb606: {
        StorageDead(_736);
        goto -> bb607;
    }

    bb607: {
        StorageDead(_721);
        goto -> bb608;
    }

    bb608: {
        StorageDead(_487);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_482);
        goto -> bb614;
    }

    bb609: {
        StorageDead(_581);
        goto -> bb610;
    }

    bb610: {
        StorageDead(_534);
        goto -> bb611;
    }

    bb611: {
        StorageDead(_501);
        StorageDead(_500);
        goto -> bb612;
    }

    bb612: {
        drop(_489) -> [return: bb613, unwind: bb681];
    }

    bb613: {
        StorageDead(_489);
        StorageDead(_488);
        goto -> bb614;
    }

    bb614: {
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb670;
    }

    bb615: {
        StorageDead(_405);
        goto -> bb616;
    }

    bb616: {
        StorageDead(_358);
        goto -> bb617;
    }

    bb617: {
        StorageDead(_325);
        StorageDead(_324);
        goto -> bb618;
    }

    bb618: {
        drop(_313) -> [return: bb619, unwind: bb681];
    }

    bb619: {
        StorageDead(_313);
        StorageDead(_312);
        goto -> bb670;
    }

    bb620: {
        _1445 = const false;
        StorageDead(_174);
        goto -> bb672;
    }

    bb621: {
        _1446 = const false;
        StorageDead(_109);
        goto -> bb622;
    }

    bb622: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb623;
    }

    bb623: {
        return;
    }

    bb624 (cleanup): {
        drop(_1386) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb625 (cleanup): {
        drop(_1349) -> [return: bb673, unwind terminate(cleanup)];
    }

    bb626 (cleanup): {
        drop(_1311) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb627 (cleanup): {
        drop(_1274) -> [return: bb674, unwind terminate(cleanup)];
    }

    bb628 (cleanup): {
        drop(_1236) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb629 (cleanup): {
        drop(_1217) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb630 (cleanup): {
        drop(_1173) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb631 (cleanup): {
        drop(_1154) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb632 (cleanup): {
        drop(_1118) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb633 (cleanup): {
        drop(_1096) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb634 (cleanup): {
        drop(_1074) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb635 (cleanup): {
        drop(_1052) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb636 (cleanup): {
        drop(_919) -> [return: bb637, unwind terminate(cleanup)];
    }

    bb637 (cleanup): {
        drop(_922) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb638 (cleanup): {
        drop(_939) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb639 (cleanup): {
        drop(_932) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb640 (cleanup): {
        drop(_794) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb641 (cleanup): {
        drop(_762) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb642 (cleanup): {
        drop(_698) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb643 (cleanup): {
        drop(_679) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb644 (cleanup): {
        drop(_625) -> [return: bb647, unwind terminate(cleanup)];
    }

    bb645 (cleanup): {
        drop(_606) -> [return: bb647, unwind terminate(cleanup)];
    }

    bb646 (cleanup): {
        drop(_558) -> [return: bb647, unwind terminate(cleanup)];
    }

    bb647 (cleanup): {
        drop(_489) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb648 (cleanup): {
        drop(_449) -> [return: bb651, unwind terminate(cleanup)];
    }

    bb649 (cleanup): {
        drop(_430) -> [return: bb651, unwind terminate(cleanup)];
    }

    bb650 (cleanup): {
        drop(_382) -> [return: bb651, unwind terminate(cleanup)];
    }

    bb651 (cleanup): {
        drop(_313) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb652 (cleanup): {
        drop(_275) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb653 (cleanup): {
        drop(_256) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb654 (cleanup): {
        drop(_219) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb655 (cleanup): {
        drop(_200) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb656 (cleanup): {
        drop(_154) -> [return: bb684, unwind terminate(cleanup)];
    }

    bb657 (cleanup): {
        drop(_135) -> [return: bb684, unwind terminate(cleanup)];
    }

    bb658 (cleanup): {
        drop(_96) -> [return: bb662, unwind terminate(cleanup)];
    }

    bb659 (cleanup): {
        drop(_77) -> [return: bb662, unwind terminate(cleanup)];
    }

    bb660 (cleanup): {
        drop(_52) -> [return: bb662, unwind terminate(cleanup)];
    }

    bb661 (cleanup): {
        drop(_33) -> [return: bb662, unwind terminate(cleanup)];
    }

    bb662 (cleanup): {
        resume;
    }

    bb663: {
        _1467 = discriminant(_1275);
        StorageDead(_1279);
        _1444 = const false;
        StorageDead(_1275);
        StorageDead(_1274);
        StorageDead(_1272);
        StorageDead(_1263);
        StorageDead(_1260);
        StorageLive(_1300);
        StorageLive(_1301);
        StorageLive(_1302);
        StorageLive(_1303);
        _1303 = _1259;
        switchInt(move _1303) -> [0: bb529, otherwise: bb530];
    }

    bb664: {
        _1469 = discriminant(_1350);
        StorageDead(_1354);
        _1443 = const false;
        StorageDead(_1350);
        StorageDead(_1349);
        StorageDead(_1347);
        StorageDead(_1338);
        StorageDead(_1335);
        StorageLive(_1375);
        StorageLive(_1376);
        StorageLive(_1377);
        StorageLive(_1378);
        _1378 = _1334;
        switchInt(move _1378) -> [0: bb565, otherwise: bb566];
    }

    bb665: {
        drop(_819) -> [return: bb579, unwind: bb681];
    }

    bb666: {
        _1471 = discriminant(_1350);
        StorageDead(_1354);
        _1443 = const false;
        StorageDead(_1350);
        StorageDead(_1349);
        StorageDead(_1347);
        goto -> bb581;
    }

    bb667: {
        _1473 = discriminant(_1275);
        StorageDead(_1279);
        _1444 = const false;
        StorageDead(_1275);
        StorageDead(_1274);
        StorageDead(_1272);
        goto -> bb584;
    }

    bb668: {
        drop(_819) -> [return: bb602, unwind: bb681];
    }

    bb669: {
        drop(_174) -> [return: bb620, unwind: bb684];
    }

    bb670: {
        switchInt(_1445) -> [0: bb620, otherwise: bb669];
    }

    bb671: {
        drop(_109) -> [return: bb621, unwind: bb662];
    }

    bb672: {
        switchInt(_1446) -> [0: bb621, otherwise: bb671];
    }

    bb673 (cleanup): {
        _1475 = discriminant(_1350);
        goto -> bb676;
    }

    bb674 (cleanup): {
        _1476 = discriminant(_1275);
        goto -> bb676;
    }

    bb675 (cleanup): {
        drop(_819) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb676 (cleanup): {
        switchInt(_1442) -> [0: bb681, otherwise: bb675];
    }

    bb677 (cleanup): {
        _1477 = discriminant(_820);
        goto -> bb681;
    }

    bb678 (cleanup): {
        _1478 = discriminant(_490);
        goto -> bb681;
    }

    bb679 (cleanup): {
        _1479 = discriminant(_314);
        goto -> bb681;
    }

    bb680 (cleanup): {
        drop(_174) -> [return: bb684, unwind terminate(cleanup)];
    }

    bb681 (cleanup): {
        switchInt(_1445) -> [0: bb684, otherwise: bb680];
    }

    bb682 (cleanup): {
        _1480 = discriminant(_175);
        goto -> bb684;
    }

    bb683 (cleanup): {
        drop(_109) -> [return: bb662, unwind terminate(cleanup)];
    }

    bb684 (cleanup): {
        switchInt(_1446) -> [0: bb662, otherwise: bb683];
    }

    bb685 (cleanup): {
        _1481 = discriminant(_110);
        goto -> bb662;
    }
}
