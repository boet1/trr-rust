// MIR for `calculate_expiry_price` after PreCodegen

fn calculate_expiry_price(_1: &AMM, _2: i64, _3: i128) -> std::result::Result<i64, error::ErrorCode> {
    debug amm => _1;
    debug target_price => _2;
    debug total_excess_balance => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: i128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _10: std::result::Result<i128, error::ErrorCode>;
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: i128;
    let mut _17: !;
    let mut _18: i64;
    let _19: i64;
    let mut _20: i64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _22: std::result::Result<i64, error::ErrorCode>;
    let mut _23: i128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _25: std::result::Result<i128, error::ErrorCode>;
    let mut _26: i128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _28: std::result::Result<i128, error::ErrorCode>;
    let mut _29: i128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _31: std::result::Result<i128, error::ErrorCode>;
    let mut _32: i128;
    let mut _33: i128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _35: std::result::Result<i128, error::ErrorCode>;
    let mut _36: i128;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: i128;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: i128;
    let mut _47: isize;
    let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: i128;
    let mut _52: i128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: i128;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: i64;
    let mut _63: bool;
    let mut _65: bool;
    let mut _66: i128;
    let mut _67: i64;
    let mut _68: i64;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: i64;
    let mut _72: i64;
    let mut _73: i64;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug best_expiry_price => _19;
        let _64: i64;
        scope 26 {
            debug expiry_price => _64;
        }
    }
    scope 6 {
        debug residual => _38;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _41;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _43;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _46;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _48;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _51;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _54;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _57;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _59;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _62;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).15: i128);
        _6 = core::num::<impl i128>::abs(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).52: u64);
        _10 = <u64 as Cast>::cast::<i128>(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _9 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: i128);
        _8 = _16;
        StorageDead(_16);
        _5 = Lt(move _6, move _8);
        switchInt(move _5) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb47;
    }

    bb8: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_18);
        _18 = _2;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        goto -> bb47;
    }

    bb9: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_1).18: i128);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        _35 = <i128 as Cast>::cast::<i128>(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        _34 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: i128);
        _33 = _41;
        StorageDead(_41);
        _31 = <i128 as SafeMath>::safe_sub(move _32, move _33) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb43;
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        _42 = discriminant(_30);
        switchInt(move _42) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_46);
        _46 = ((_30 as Continue).0: i128);
        _29 = _46;
        StorageDead(_46);
        _28 = <i128 as SafeMath>::safe_mul(move _29, const _) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_43);
        _43 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb43;
    }

    bb20: {
        StorageDead(_29);
        _27 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_28);
        _47 = discriminant(_27);
        switchInt(move _47) -> [0: bb22, 1: bb23, otherwise: bb5];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_27 as Continue).0: i128);
        _26 = _51;
        StorageDead(_51);
        StorageLive(_52);
        _52 = ((*_1).15: i128);
        _25 = <i128 as SafeMath>::safe_div(move _26, move _52) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_48);
        _48 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb44;
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_26);
        _24 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_25);
        _53 = discriminant(_24);
        switchInt(move _53) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_57);
        _57 = ((_24 as Continue).0: i128);
        _23 = _57;
        StorageDead(_57);
        _22 = <i128 as Cast>::cast::<i64>(move _23) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_54);
        _54 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb45;
    }

    bb30: {
        StorageDead(_23);
        _21 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_22);
        _58 = discriminant(_21);
        switchInt(move _58) -> [0: bb32, 1: bb33, otherwise: bb5];
    }

    bb32: {
        StorageLive(_62);
        _62 = ((_21 as Continue).0: i64);
        _20 = _62;
        StorageDead(_62);
        _63 = Eq(_20, const i64::MIN);
        assert(!move _63, "attempt to negate `{}`, which would overflow", _20) -> [success: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_59);
        _59 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb46;
    }

    bb35: {
        _19 = Neg(move _20);
        StorageDead(_20);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = ((*_1).15: i128);
        _65 = Ge(move _66, const 0_i128);
        switchInt(move _65) -> [0: bb39, otherwise: bb36];
    }

    bb36: {
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _19;
        StorageLive(_69);
        _69 = _2;
        _67 = <i64 as Ord>::min(move _68, move _69) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_69);
        StorageDead(_68);
        _64 = core::num::<impl i64>::saturating_sub(move _67, const 1_i64) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_67);
        goto -> bb42;
    }

    bb39: {
        StorageDead(_66);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _19;
        StorageLive(_72);
        _72 = _2;
        _70 = <i64 as Ord>::max(move _71, move _72) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_72);
        StorageDead(_71);
        _64 = core::num::<impl i64>::saturating_add(move _70, const 1_i64) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_70);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_65);
        StorageLive(_73);
        _73 = _64;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _73);
        StorageDead(_73);
        StorageDead(_64);
        StorageDead(_19);
        goto -> bb48;
    }

    bb43: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_20);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb48;
    }

    bb48: {
        return;
    }
}
