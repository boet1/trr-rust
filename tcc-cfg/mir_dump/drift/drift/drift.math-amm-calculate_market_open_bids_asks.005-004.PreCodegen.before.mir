// MIR for `calculate_market_open_bids_asks` before PreCodegen

fn calculate_market_open_bids_asks(_1: &AMM) -> std::result::Result<(i128, i128), error::ErrorCode> {
    debug amm => _1;
    let mut _0: std::result::Result<(i128, i128), error::ErrorCode>;
    let _2: u128;
    let mut _7: (i128, i128);
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _9: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: u128;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: (i128, i128);
    let mut _19: i128;
    let mut _20: i128;
    scope 1 {
        debug base_asset_reserve => _2;
        let _3: u128;
        scope 2 {
            debug min_base_asset_reserve => _3;
            let _4: u128;
            scope 3 {
                debug max_base_asset_reserve => _4;
                let _5: i128;
                let _6: i128;
                let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _17: (i128, i128);
                scope 4 {
                    debug max_bids => _5;
                    debug max_asks => _6;
                }
                scope 5 {
                    debug residual => _14;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _17;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = ((*_1).5: u128);
        StorageLive(_3);
        _3 = ((*_1).8: u128);
        StorageLive(_4);
        _4 = ((*_1).9: u128);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _3;
        StorageLive(_12);
        _12 = _4;
        _9 = _calculate_market_open_bids_asks(move _10, move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _13 = discriminant(_8);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_8 as Continue).0: (i128, i128));
        _7 = _17;
        StorageDead(_17);
        StorageLive(_5);
        _5 = (_7.0: i128);
        StorageLive(_6);
        _6 = (_7.1: i128);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _5;
        StorageLive(_20);
        _20 = _6;
        _18 = (move _19, move _20);
        StorageDead(_20);
        StorageDead(_19);
        _0 = std::result::Result::<(i128, i128), error::ErrorCode>::Ok(move _18);
        StorageDead(_18);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
