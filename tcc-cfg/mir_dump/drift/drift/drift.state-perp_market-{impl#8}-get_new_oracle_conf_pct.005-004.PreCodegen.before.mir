// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_new_oracle_conf_pct` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_new_oracle_conf_pct(_1: &AMM, _2: u64, _3: u64, _4: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug confidence => _2;
    debug reserve_price => _3;
    debug now => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _5: u64;
    let mut _8: i64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _10: std::result::Result<i64, error::ErrorCode>;
    let mut _11: i64;
    let mut _12: i64;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: bool;
    let mut _20: i64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _26: std::result::Result<u64, error::ErrorCode>;
    let mut _27: i64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: u64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _35: std::result::Result<u64, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: u64;
    let mut _39: u64;
    let mut _40: bool;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: u64;
    let mut _47: u64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: u64;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _52: std::result::Result<u64, error::ErrorCode>;
    let mut _53: u64;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: u64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: u64;
    scope 1 {
        debug upper_bound_divisor => _5;
        let _6: u64;
        scope 2 {
            debug lower_bound_divisor => _6;
            let _7: i64;
            let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _17: i64;
            scope 3 {
                debug since_last => _7;
                let _18: u64;
                let _21: u64;
                let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _32: u64;
                scope 8 {
                    debug confidence_lower_bound => _18;
                    let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _58: u64;
                    let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _64: u64;
                    scope 18 {
                        debug residual => _55;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _58;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _61;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _64;
                        scope 25 {
                        }
                    }
                }
                scope 9 {
                    debug confidence_divisor => _21;
                    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _45: u64;
                    scope 14 {
                        debug residual => _42;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _45;
                        scope 17 {
                        }
                    }
                }
                scope 10 {
                    debug residual => _29;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _32;
                    scope 13 {
                    }
                }
            }
            scope 4 {
                debug residual => _14;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _17;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = const 21_u64;
        StorageLive(_6);
        _6 = const 5_u64;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _4;
        StorageLive(_12);
        _12 = (((*_1).1: state::oracle::HistoricalOracleData).5: i64);
        _10 = <i64 as SafeMath>::safe_sub(move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: i64);
        _8 = _17;
        StorageDead(_17);
        _7 = <i64 as Ord>::max(move _8, const 0_i64) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_9);
        goto -> bb37;
    }

    bb7: {
        StorageDead(_8);
        StorageDead(_9);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _7;
        _19 = Gt(move _20, const 0_i64);
        switchInt(move _19) -> [0: bb22, otherwise: bb8];
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _5;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _7;
        _26 = <i64 as Cast>::cast::<u64>(move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        _25 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: u64);
        _24 = _32;
        StorageDead(_32);
        _22 = core::num::<impl u64>::saturating_sub(move _23, move _24) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb36;
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_33);
        _33 = _6;
        _21 = <u64 as Ord>::max(move _22, move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_22);
        StorageDead(_25);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).48: u64);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_1).48: u64);
        StorageLive(_39);
        _39 = _21;
        _40 = Eq(_39, const 0_u64);
        assert(!move _40, "attempt to divide `{}` by zero", _38) -> [success: bb16, unwind continue];
    }

    bb16: {
        _37 = Div(move _38, move _39);
        StorageDead(_39);
        StorageDead(_38);
        _35 = <u64 as SafeMath>::safe_sub(move _36, move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        _41 = discriminant(_34);
        switchInt(move _41) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_45);
        _45 = ((_34 as Continue).0: u64);
        _18 = _45;
        StorageDead(_45);
        StorageDead(_21);
        StorageDead(_34);
        goto -> bb23;
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_21);
        StorageDead(_34);
        goto -> bb36;
    }

    bb22: {
        StorageDead(_20);
        _18 = ((*_1).48: u64);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_19);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _2;
        _52 = <u64 as SafeMath>::safe_mul(move _53, const _) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_53);
        _51 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _52) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_58);
        _58 = ((_51 as Continue).0: u64);
        _50 = _58;
        StorageDead(_58);
        StorageLive(_59);
        _59 = _3;
        _49 = <u64 as SafeMath>::safe_div(move _50, move _59) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_55);
        _55 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb35;
    }

    bb29: {
        StorageDead(_59);
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_49);
        _60 = discriminant(_48);
        switchInt(move _60) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_64);
        _64 = ((_48 as Continue).0: u64);
        _47 = _64;
        StorageDead(_64);
        StorageLive(_65);
        _65 = _18;
        _46 = <u64 as Ord>::max(move _47, move _65) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_61);
        _61 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_47);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _46);
        StorageDead(_46);
        StorageDead(_18);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb38;
    }

    bb35: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_18);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb38;
    }

    bb36: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
