// MIR for `get_timestamp_from_price_feed_account` before PreCodegen

fn get_timestamp_from_price_feed_account(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<i64, anchor_lang::error::Error> {
    debug price_feed_account => _1;
    let mut _0: std::result::Result<i64, anchor_lang::error::Error>;
    let mut _2: bool;
    let mut _3: &anchor_lang::prelude::AccountInfo<'_>;
    let _4: std::cell::Ref<'_, &mut [u8]>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _12: std::cell::Ref<'_, &mut [u8]>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_solana_receiver_sdk::price_update::PriceUpdateV2>;
    let mut _15: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, anchor_lang::error::Error>;
    let mut _16: &mut &[u8];
    let mut _17: &mut &[u8];
    let mut _18: &[u8];
    let _19: &[u8];
    let mut _20: &[u8];
    let _21: &&mut [u8];
    let mut _22: &std::cell::Ref<'_, &mut [u8]>;
    let mut _23: std::ops::RangeFull;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: i64;
    let mut _30: &mut [u8];
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    scope 1 {
        debug price_feed_account_data => _4;
        let _13: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
        let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _28: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
        scope 6 {
            debug price_feed_account => _13;
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = anchor_lang::prelude::AccountInfo::<'_>::data_is_empty(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        _0 = std::result::Result::<i64, anchor_lang::error::Error>::Ok(const 0_i64);
        goto -> bb18;
    }

    bb3: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        _5 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _4 = move _12;
        StorageDead(_12);
        _31 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_4;
        _21 = <Ref<'_, &mut [u8]> as Deref>::deref(move _22) -> [return: bb10, unwind: bb21];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<i64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _11) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        StorageDead(_11);
        StorageDead(_9);
        _37 = discriminant(_5);
        StorageDead(_5);
        goto -> bb19;
    }

    bb10: {
        _30 = deref_copy (*_21);
        _20 = &(*_30);
        StorageDead(_22);
        StorageLive(_23);
        _23 = RangeFull;
        _19 = <[u8] as Index<RangeFull>>::index(move _20, move _23) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_20);
        _18 = &(*_19);
        _17 = &mut _18;
        _16 = &mut (*_17);
        _15 = <PriceUpdateV2 as anchor_lang::AccountDeserialize>::try_deserialize(move _16) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        StorageDead(_16);
        _14 = <std::result::Result<PriceUpdateV2, anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_15);
        _24 = discriminant(_14);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb7];
    }

    bb14: {
        StorageLive(_28);
        _28 = move ((_14 as Continue).0: pyth_solana_receiver_sdk::price_update::PriceUpdateV2);
        _13 = move _28;
        StorageDead(_28);
        _33 = discriminant(_14);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageLive(_29);
        _29 = ((_13.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).4: i64);
        _0 = std::result::Result::<i64, anchor_lang::error::Error>::Ok(move _29);
        StorageDead(_29);
        StorageDead(_13);
        drop(_4) -> [return: bb17, unwind: bb22];
    }

    bb15: {
        StorageLive(_25);
        _25 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<i64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_25);
        _35 = discriminant(_14);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb19, unwind: bb22];
    }

    bb17: {
        StorageDead(_4);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_2);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _39 = discriminant(_14);
        goto -> bb21;
    }

    bb24 (cleanup): {
        _40 = discriminant(_5);
        goto -> bb22;
    }
}
