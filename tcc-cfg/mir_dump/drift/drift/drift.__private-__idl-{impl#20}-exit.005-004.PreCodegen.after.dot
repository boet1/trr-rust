digraph Mir_0_23509 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;__idl::IdlCreateBuffer&lt;'info&gt; as anchor_lang::AccountsExit&lt;'info&gt;&gt;::exit(_1: &amp;ReErased __private::__idl::IdlCreateBuffer&lt;ReErased&gt;, _2: &amp;ReErased anchor_lang::prelude::Pubkey) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _5: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _7: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, __private::__idl::IdlAccount&gt;;<br align="left"/>let _8: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, __private::__idl::IdlAccount&gt;;<br align="left"/>let mut _9: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _10: Closure(DefId(0:23510 ~ drift[d311]::__private::__idl::{impl#20}::exit::{closure#0}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _15: ();<br align="left"/>let mut _16: ();<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: isize;<br align="left"/>let mut _19: isize;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug program_id =&gt; _2;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>>;
    bb0__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;((*_1).0: anchor_lang::prelude::Account&lt;'_, __private::__idl::IdlAccount&gt;)<br/>_7 = &amp;(*_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_2)<br/></td></tr><tr><td align="left">_6 = &lt;anchor_lang::prelude::Account&lt;'_, __idl::IdlAccount&gt; as anchor_lang::AccountsExit&lt;'_&gt;&gt;::exit(move _7, move _9)</td></tr></table>>];
    bb1__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>_10 = {closure@programs/drift/src/lib.rs:69:1: 69:11}<br/></td></tr><tr><td align="left">_5 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/lib.rs:69:1: 69:11}&gt;(move _6, move _10)</td></tr></table>>];
    bb2__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb3__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_11 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_4 as Continue).0: ())<br/>_3 = _15<br/>StorageDead(_15)<br/>_17 = discriminant(_4)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_16)<br/>_16 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _16)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>_19 = discriminant(_4)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_23509 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_21 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_23509 -> bb1__0_23509 [label="return"];
    bb1__0_23509 -> bb2__0_23509 [label="return"];
    bb1__0_23509 -> bb9__0_23509 [label="unwind"];
    bb2__0_23509 -> bb3__0_23509 [label="return"];
    bb2__0_23509 -> bb9__0_23509 [label="unwind"];
    bb3__0_23509 -> bb4__0_23509 [label="0"];
    bb3__0_23509 -> bb6__0_23509 [label="1"];
    bb3__0_23509 -> bb5__0_23509 [label="otherwise"];
    bb4__0_23509 -> bb8__0_23509 [label=""];
    bb6__0_23509 -> bb7__0_23509 [label="return"];
    bb6__0_23509 -> bb10__0_23509 [label="unwind"];
    bb7__0_23509 -> bb8__0_23509 [label=""];
    bb10__0_23509 -> bb9__0_23509 [label=""];
}
