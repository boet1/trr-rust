// MIR for `validate_user_is_idle` after PreCodegen

fn validate_user_is_idle(_1: &User, _2: u64, _3: bool) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug slot => _2;
    debug accelerated => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: u64;
    let mut _5: u64;
    let mut _6: u64;
    let mut _8: bool;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _11: std::result::Result<(), error::ErrorCode>;
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: ();
    let _17: ();
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 2];
    let _27: &[&str; 2];
    let _28: [&str; 2];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &error::ErrorCode;
    let _35: &error::ErrorCode;
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 2];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &u64;
    let _54: &u64;
    let mut _55: error::ErrorCode;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _61: ();
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _63: std::result::Result<(), error::ErrorCode>;
    let mut _64: bool;
    let mut _65: &state::user::User;
    let mut _66: ();
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &error::ErrorCode;
    let _86: &error::ErrorCode;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: error::ErrorCode;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _96: ();
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _98: std::result::Result<(), error::ErrorCode>;
    let mut _99: bool;
    let mut _100: &state::user::User;
    let mut _101: ();
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: &std::string::String;
    let _107: &std::string::String;
    let _108: std::string::String;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[&str; 2];
    let _113: &[&str; 2];
    let _114: [&str; 2];
    let mut _115: &[core::fmt::rt::Argument<'_>];
    let mut _116: &[core::fmt::rt::Argument<'_>; 1];
    let _117: &[core::fmt::rt::Argument<'_>; 1];
    let _118: [core::fmt::rt::Argument<'_>; 1];
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: &error::ErrorCode;
    let _121: &error::ErrorCode;
    let _122: ();
    let mut _123: &str;
    let _124: &str;
    let mut _125: error::ErrorCode;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _131: ();
    let mut _132: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _133: &[state::user::PerpPosition; 8];
    let mut _135: ();
    let _136: ();
    let mut _137: std::option::Option<&state::user::PerpPosition>;
    let mut _138: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _139: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _140: isize;
    let mut _141: !;
    let _143: ();
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _145: std::result::Result<(), error::ErrorCode>;
    let mut _146: bool;
    let mut _147: &state::user::PerpPosition;
    let mut _148: ();
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 2];
    let _160: &[&str; 2];
    let _161: [&str; 2];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &error::ErrorCode;
    let _168: &error::ErrorCode;
    let _169: ();
    let mut _170: &str;
    let _171: &str;
    let mut _172: &std::string::String;
    let _173: &std::string::String;
    let _174: std::string::String;
    let mut _176: std::fmt::Arguments<'_>;
    let mut _177: &[&str];
    let mut _178: &[&str; 1];
    let _179: &[&str; 1];
    let _180: [&str; 1];
    let mut _181: &[core::fmt::rt::Argument<'_>];
    let mut _182: &[core::fmt::rt::Argument<'_>; 1];
    let _183: &[core::fmt::rt::Argument<'_>; 1];
    let _184: [core::fmt::rt::Argument<'_>; 1];
    let mut _185: core::fmt::rt::Argument<'_>;
    let mut _186: &u16;
    let _187: &u16;
    let mut _188: error::ErrorCode;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _194: ();
    let mut _195: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _196: &[state::user::SpotPosition; 8];
    let _198: ();
    let mut _199: std::option::Option<&state::user::SpotPosition>;
    let mut _200: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _201: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _202: isize;
    let mut _203: !;
    let _205: ();
    let mut _206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _207: std::result::Result<(), error::ErrorCode>;
    let mut _208: bool;
    let mut _209: &state::spot_market::SpotBalanceType;
    let mut _210: &state::spot_market::SpotBalanceType;
    let _211: state::spot_market::SpotBalanceType;
    let mut _212: bool;
    let mut _213: u64;
    let mut _214: ();
    let _216: ();
    let mut _217: &str;
    let _218: &str;
    let mut _219: &std::string::String;
    let _220: &std::string::String;
    let _221: std::string::String;
    let mut _223: std::fmt::Arguments<'_>;
    let mut _224: &[&str];
    let mut _225: &[&str; 2];
    let _226: &[&str; 2];
    let _227: [&str; 2];
    let mut _228: &[core::fmt::rt::Argument<'_>];
    let mut _229: &[core::fmt::rt::Argument<'_>; 1];
    let _230: &[core::fmt::rt::Argument<'_>; 1];
    let _231: [core::fmt::rt::Argument<'_>; 1];
    let mut _232: core::fmt::rt::Argument<'_>;
    let mut _233: &error::ErrorCode;
    let _234: &error::ErrorCode;
    let _235: ();
    let mut _236: &str;
    let _237: &str;
    let mut _238: &std::string::String;
    let _239: &std::string::String;
    let _240: std::string::String;
    let mut _242: std::fmt::Arguments<'_>;
    let mut _243: &[&str];
    let mut _244: &[&str; 1];
    let _245: &[&str; 1];
    let _246: [&str; 1];
    let mut _247: &[core::fmt::rt::Argument<'_>];
    let mut _248: &[core::fmt::rt::Argument<'_>; 1];
    let _249: &[core::fmt::rt::Argument<'_>; 1];
    let _250: [core::fmt::rt::Argument<'_>; 1];
    let mut _251: core::fmt::rt::Argument<'_>;
    let mut _252: &u16;
    let _253: &u16;
    let mut _254: error::ErrorCode;
    let mut _255: isize;
    let mut _257: !;
    let mut _258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _260: ();
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _262: std::result::Result<(), error::ErrorCode>;
    let mut _263: bool;
    let mut _264: u8;
    let mut _265: ();
    let _267: ();
    let mut _268: &str;
    let _269: &str;
    let mut _270: &std::string::String;
    let _271: &std::string::String;
    let _272: std::string::String;
    let mut _274: std::fmt::Arguments<'_>;
    let mut _275: &[&str];
    let mut _276: &[&str; 2];
    let _277: &[&str; 2];
    let _278: [&str; 2];
    let mut _279: &[core::fmt::rt::Argument<'_>];
    let mut _280: &[core::fmt::rt::Argument<'_>; 1];
    let _281: &[core::fmt::rt::Argument<'_>; 1];
    let _282: [core::fmt::rt::Argument<'_>; 1];
    let mut _283: core::fmt::rt::Argument<'_>;
    let mut _284: &error::ErrorCode;
    let _285: &error::ErrorCode;
    let _286: ();
    let mut _287: &str;
    let _288: &str;
    let mut _289: &std::string::String;
    let _290: &std::string::String;
    let _291: std::string::String;
    let mut _293: std::fmt::Arguments<'_>;
    let mut _294: &[&str];
    let mut _295: &[&str; 1];
    let _296: &[&str; 1];
    let _297: [&str; 1];
    let mut _298: &[core::fmt::rt::Argument<'_>];
    let mut _299: &[core::fmt::rt::Argument<'_>; 1];
    let _300: &[core::fmt::rt::Argument<'_>; 1];
    let _301: [core::fmt::rt::Argument<'_>; 1];
    let mut _302: core::fmt::rt::Argument<'_>;
    let mut _303: &u16;
    let _304: &u16;
    let mut _305: error::ErrorCode;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _311: ();
    let mut _312: std::slice::Iter<'_, state::user::Order>;
    let mut _313: &[state::user::Order; 32];
    let _315: ();
    let mut _316: std::option::Option<&state::user::Order>;
    let mut _317: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _318: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _319: isize;
    let mut _320: !;
    let _322: ();
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _324: std::result::Result<(), error::ErrorCode>;
    let mut _325: bool;
    let mut _326: &state::user::Order;
    let mut _327: ();
    let _329: ();
    let mut _330: &str;
    let _331: &str;
    let mut _332: &std::string::String;
    let _333: &std::string::String;
    let _334: std::string::String;
    let mut _336: std::fmt::Arguments<'_>;
    let mut _337: &[&str];
    let mut _338: &[&str; 2];
    let _339: &[&str; 2];
    let _340: [&str; 2];
    let mut _341: &[core::fmt::rt::Argument<'_>];
    let mut _342: &[core::fmt::rt::Argument<'_>; 1];
    let _343: &[core::fmt::rt::Argument<'_>; 1];
    let _344: [core::fmt::rt::Argument<'_>; 1];
    let mut _345: core::fmt::rt::Argument<'_>;
    let mut _346: &error::ErrorCode;
    let _347: &error::ErrorCode;
    let _348: ();
    let mut _349: &str;
    let _350: &str;
    let mut _351: error::ErrorCode;
    let mut _352: isize;
    let mut _354: !;
    let mut _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _357: ();
    scope 1 {
        debug slots_since_last_active => _4;
        let _7: u64;
        scope 2 {
            debug slots_before_idle => _7;
            let _16: error::ErrorCode;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: ();
            let _67: error::ErrorCode;
            let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _95: ();
            let _102: error::ErrorCode;
            let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _130: ();
            let mut _134: std::slice::Iter<'_, state::user::PerpPosition>;
            let mut _197: std::slice::Iter<'_, state::user::SpotPosition>;
            let mut _314: std::slice::Iter<'_, state::user::Order>;
            scope 3 {
                debug error_code => _16;
                let _23: std::string::String;
                let _42: std::string::String;
                let mut _368: &[&str; 2];
                let mut _369: &[&str; 2];
                scope 4 {
                    debug res => _23;
                }
                scope 5 {
                    debug res => _42;
                }
            }
            scope 6 {
                debug residual => _57;
                scope 7 {
                }
            }
            scope 8 {
                debug val => _60;
                scope 9 {
                }
            }
            scope 10 {
                debug error_code => _67;
                let _74: std::string::String;
                let mut _367: &[&str; 2];
                scope 11 {
                    debug res => _74;
                }
            }
            scope 12 {
                debug residual => _92;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _95;
                scope 15 {
                }
            }
            scope 16 {
                debug error_code => _102;
                let _109: std::string::String;
                let mut _366: &[&str; 2];
                scope 17 {
                    debug res => _109;
                }
            }
            scope 18 {
                debug residual => _127;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _130;
                scope 21 {
                }
            }
            scope 22 {
                debug iter => _134;
                let _142: &state::user::PerpPosition;
                scope 23 {
                    debug perp_position => _142;
                    let _149: error::ErrorCode;
                    let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _193: ();
                    scope 24 {
                        debug error_code => _149;
                        let _156: std::string::String;
                        let _175: std::string::String;
                        let mut _358: &[&str; 1];
                        let mut _359: &[&str; 2];
                        scope 25 {
                            debug res => _156;
                        }
                        scope 26 {
                            debug res => _175;
                        }
                    }
                    scope 27 {
                        debug residual => _190;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug val => _193;
                        scope 30 {
                        }
                    }
                }
            }
            scope 31 {
                debug iter => _197;
                let _204: &state::user::SpotPosition;
                scope 32 {
                    debug spot_position => _204;
                    let _215: error::ErrorCode;
                    let _256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _259: ();
                    let _266: error::ErrorCode;
                    let _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _310: ();
                    let mut _364: &state::spot_market::SpotBalanceType;
                    scope 33 {
                        debug error_code => _215;
                        let _222: std::string::String;
                        let _241: std::string::String;
                        let mut _362: &[&str; 1];
                        let mut _363: &[&str; 2];
                        scope 34 {
                            debug res => _222;
                        }
                        scope 35 {
                            debug res => _241;
                        }
                    }
                    scope 36 {
                        debug residual => _256;
                        scope 37 {
                        }
                    }
                    scope 38 {
                        debug val => _259;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug error_code => _266;
                        let _273: std::string::String;
                        let _292: std::string::String;
                        let mut _360: &[&str; 1];
                        let mut _361: &[&str; 2];
                        scope 41 {
                            debug res => _273;
                        }
                        scope 42 {
                            debug res => _292;
                        }
                    }
                    scope 43 {
                        debug residual => _307;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug val => _310;
                        scope 46 {
                        }
                    }
                }
            }
            scope 47 {
                debug iter => _314;
                let _321: &state::user::Order;
                scope 48 {
                    debug order => _321;
                    let _328: error::ErrorCode;
                    let _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _356: ();
                    scope 49 {
                        debug error_code => _328;
                        let _335: std::string::String;
                        let mut _365: &[&str; 2];
                        scope 50 {
                            debug res => _335;
                        }
                    }
                    scope 51 {
                        debug residual => _353;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug val => _356;
                        scope 54 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        _6 = ((*_1).14: u64);
        _4 = core::num::<impl u64>::saturating_sub(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = const 9000_u64;
        goto -> bb4;
    }

    bb3: {
        _7 = const 1512000_u64;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _4;
        StorageLive(_14);
        _14 = _7;
        _12 = Ge(move _13, move _14);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        _15 = ();
        _11 = std::result::Result::<(), error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        goto -> bb19;
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_16);
        _16 = error::ErrorCode::UserNotInactive;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _369 = const _;
        _27 = &(*_369);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_16;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = format(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        _22 = move _23;
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = <String as Deref>::deref(move _20) -> [return: bb10, unwind: bb159];
    }

    bb10: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = solana_program::log::sol_log(move _18) -> [return: bb11, unwind: bb159];
    }

    bb11: {
        StorageDead(_18);
        drop(_22) -> [return: bb12, unwind: bb160];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _368 = const _;
        _46 = &(*_368);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_4;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _53) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_53);
        _51 = [move _52];
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_43);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb16, unwind: bb158];
    }

    bb16: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb17, unwind: bb158];
    }

    bb17: {
        StorageDead(_37);
        drop(_41) -> [return: bb18, unwind: bb160];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_55);
        _55 = _16;
        _11 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        StorageDead(_16);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_12);
        _10 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _11) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_11);
        _56 = discriminant(_10);
        switchInt(move _56) -> [0: bb21, 1: bb23, otherwise: bb22];
    }

    bb21: {
        StorageLive(_60);
        _60 = ((_10 as Continue).0: ());
        _9 = _60;
        StorageDead(_60);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_1);
        _64 = User::is_bankrupt(move _65) -> [return: bb25, unwind continue];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb147;
    }

    bb25: {
        switchInt(move _64) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_65);
        StorageLive(_67);
        _67 = error::ErrorCode::UserNotInactive;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _367 = const _;
        _78 = &(*_367);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_67;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _85) -> [return: bb28, unwind continue];
    }

    bb27: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = ();
        _63 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb35;
    }

    bb28: {
        StorageDead(_85);
        _83 = [move _84];
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_75);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb31, unwind: bb157];
    }

    bb31: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb32, unwind: bb157];
    }

    bb32: {
        StorageDead(_69);
        drop(_73) -> [return: bb33, unwind: bb160];
    }

    bb33: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = const "user bankrupt";
        _88 = &(*_89);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_88);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_90);
        _90 = _67;
        _63 = std::result::Result::<(), error::ErrorCode>::Err(move _90);
        StorageDead(_90);
        StorageDead(_67);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_64);
        _62 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _63) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_63);
        _91 = discriminant(_62);
        switchInt(move _91) -> [0: bb37, 1: bb38, otherwise: bb22];
    }

    bb37: {
        StorageLive(_95);
        _95 = ((_62 as Continue).0: ());
        _61 = _95;
        StorageDead(_95);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        _99 = User::is_being_liquidated(move _100) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_92);
        _92 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb147;
    }

    bb40: {
        switchInt(move _99) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_100);
        StorageLive(_102);
        _102 = error::ErrorCode::UserNotInactive;
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _366 = const _;
        _113 = &(*_366);
        _112 = &(*_113);
        _111 = move _112 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_102;
        _120 = &(*_121);
        _119 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _120) -> [return: bb43, unwind continue];
    }

    bb42: {
        StorageDead(_100);
        StorageLive(_101);
        _101 = ();
        _98 = std::result::Result::<(), error::ErrorCode>::Ok(move _101);
        StorageDead(_101);
        goto -> bb50;
    }

    bb43: {
        StorageDead(_120);
        _118 = [move _119];
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_116);
        _110 = Arguments::<'_>::new_v1(move _111, move _115) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_115);
        StorageDead(_111);
        _109 = format(move _110) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_110);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        _108 = move _109;
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = <String as Deref>::deref(move _106) -> [return: bb46, unwind: bb156];
    }

    bb46: {
        _104 = &(*_105);
        StorageDead(_106);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb47, unwind: bb156];
    }

    bb47: {
        StorageDead(_104);
        drop(_108) -> [return: bb48, unwind: bb160];
    }

    bb48: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = const "user being liquidated";
        _123 = &(*_124);
        _122 = solana_program::log::sol_log(move _123) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_124);
        StorageDead(_122);
        StorageLive(_125);
        _125 = _102;
        _98 = std::result::Result::<(), error::ErrorCode>::Err(move _125);
        StorageDead(_125);
        StorageDead(_102);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_99);
        _97 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _98) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_98);
        _126 = discriminant(_97);
        switchInt(move _126) -> [0: bb52, 1: bb53, otherwise: bb22];
    }

    bb52: {
        StorageLive(_130);
        _130 = ((_97 as Continue).0: ());
        _96 = _130;
        StorageDead(_130);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &((*_1).4: [state::user::PerpPosition; 8]);
        _132 = <&[PerpPosition; 8] as IntoIterator>::into_iter(move _133) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_127);
        _127 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb147;
    }

    bb55: {
        StorageDead(_133);
        StorageLive(_134);
        _134 = move _132;
        goto -> bb56;
    }

    bb56: {
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &mut _134;
        _138 = &mut (*_139);
        _137 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _138) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_138);
        _140 = discriminant(_137);
        switchInt(move _140) -> [0: bb59, 1: bb58, otherwise: bb22];
    }

    bb58: {
        StorageLive(_142);
        _142 = ((_137 as Some).0: &state::user::PerpPosition);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(*_142);
        _146 = PerpPosition::is_available(move _147) -> [return: bb60, unwind continue];
    }

    bb59: {
        _131 = const ();
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &((*_1).3: [state::user::SpotPosition; 8]);
        _195 = <&[SpotPosition; 8] as IntoIterator>::into_iter(move _196) -> [return: bb80, unwind continue];
    }

    bb60: {
        switchInt(move _146) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_147);
        StorageLive(_148);
        _148 = ();
        _145 = std::result::Result::<(), error::ErrorCode>::Ok(move _148);
        StorageDead(_148);
        goto -> bb75;
    }

    bb62: {
        StorageDead(_147);
        StorageLive(_149);
        _149 = error::ErrorCode::UserNotInactive;
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _359 = const _;
        _160 = &(*_359);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_149;
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _167) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_157);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb66, unwind: bb155];
    }

    bb66: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb67, unwind: bb155];
    }

    bb67: {
        StorageDead(_151);
        drop(_155) -> [return: bb68, unwind: bb160];
    }

    bb68: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _358 = const _;
        _179 = &(*_358);
        _178 = &(*_179);
        _177 = move _178 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_178);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &((*_142).13: u16);
        _186 = &(*_187);
        _185 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _186) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_186);
        _184 = [move _185];
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = move _182 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_182);
        _176 = Arguments::<'_>::new_v1(move _177, move _181) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_181);
        StorageDead(_177);
        _175 = format(move _176) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_176);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_179);
        _174 = move _175;
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = <String as Deref>::deref(move _172) -> [return: bb72, unwind: bb154];
    }

    bb72: {
        _170 = &(*_171);
        StorageDead(_172);
        _169 = solana_program::log::sol_log(move _170) -> [return: bb73, unwind: bb154];
    }

    bb73: {
        StorageDead(_170);
        drop(_174) -> [return: bb74, unwind: bb160];
    }

    bb74: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_188);
        _188 = _149;
        _145 = std::result::Result::<(), error::ErrorCode>::Err(move _188);
        StorageDead(_188);
        StorageDead(_149);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_146);
        _144 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _145) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_145);
        _189 = discriminant(_144);
        switchInt(move _189) -> [0: bb77, 1: bb78, otherwise: bb22];
    }

    bb77: {
        StorageLive(_193);
        _193 = ((_144 as Continue).0: ());
        _143 = _193;
        StorageDead(_193);
        StorageDead(_144);
        StorageDead(_143);
        _136 = const ();
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        _135 = const ();
        goto -> bb56;
    }

    bb78: {
        StorageLive(_190);
        _190 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb147;
    }

    bb80: {
        StorageDead(_196);
        StorageLive(_197);
        _197 = move _195;
        goto -> bb81;
    }

    bb81: {
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &mut _197;
        _200 = &mut (*_201);
        _199 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _200) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_200);
        _202 = discriminant(_199);
        switchInt(move _202) -> [0: bb84, 1: bb83, otherwise: bb22];
    }

    bb83: {
        StorageLive(_204);
        _204 = ((_199 as Some).0: &state::user::SpotPosition);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &((*_204).5: state::spot_market::SpotBalanceType);
        StorageLive(_210);
        _364 = const _;
        _210 = &(*_364);
        _208 = <SpotBalanceType as PartialEq>::ne(move _209, move _210) -> [return: bb85, unwind continue];
    }

    bb84: {
        _194 = const ();
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &((*_1).5: [state::user::Order; 32]);
        _312 = <&[Order; 32] as IntoIterator>::into_iter(move _313) -> [return: bb126, unwind continue];
    }

    bb85: {
        switchInt(move _208) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb88;
    }

    bb87: {
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_212);
        StorageLive(_213);
        _213 = ((*_204).0: u64);
        _212 = Eq(move _213, const 0_u64);
        switchInt(move _212) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        StorageDead(_213);
        StorageLive(_214);
        _214 = ();
        _207 = std::result::Result::<(), error::ErrorCode>::Ok(move _214);
        StorageDead(_214);
        goto -> bb102;
    }

    bb89: {
        StorageDead(_213);
        StorageLive(_215);
        _215 = error::ErrorCode::UserNotInactive;
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _363 = const _;
        _226 = &(*_363);
        _225 = &(*_226);
        _224 = move _225 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_225);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_215;
        _233 = &(*_234);
        _232 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _233) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_233);
        _231 = [move _232];
        StorageDead(_232);
        _230 = &_231;
        _229 = &(*_230);
        _228 = move _229 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_229);
        _223 = Arguments::<'_>::new_v1(move _224, move _228) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_228);
        StorageDead(_224);
        _222 = format(move _223) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_223);
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_226);
        _221 = move _222;
        StorageDead(_222);
        _220 = &_221;
        _219 = &(*_220);
        _218 = <String as Deref>::deref(move _219) -> [return: bb93, unwind: bb153];
    }

    bb93: {
        _217 = &(*_218);
        StorageDead(_219);
        _216 = solana_program::log::sol_log(move _217) -> [return: bb94, unwind: bb153];
    }

    bb94: {
        StorageDead(_217);
        drop(_221) -> [return: bb95, unwind: bb160];
    }

    bb95: {
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_216);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _362 = const _;
        _245 = &(*_362);
        _244 = &(*_245);
        _243 = move _244 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_244);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &((*_204).4: u16);
        _252 = &(*_253);
        _251 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _252) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_252);
        _250 = [move _251];
        StorageDead(_251);
        _249 = &_250;
        _248 = &(*_249);
        _247 = move _248 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_248);
        _242 = Arguments::<'_>::new_v1(move _243, move _247) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_247);
        StorageDead(_243);
        _241 = format(move _242) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_242);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_245);
        _240 = move _241;
        StorageDead(_241);
        _239 = &_240;
        _238 = &(*_239);
        _237 = <String as Deref>::deref(move _238) -> [return: bb99, unwind: bb152];
    }

    bb99: {
        _236 = &(*_237);
        StorageDead(_238);
        _235 = solana_program::log::sol_log(move _236) -> [return: bb100, unwind: bb152];
    }

    bb100: {
        StorageDead(_236);
        drop(_240) -> [return: bb101, unwind: bb160];
    }

    bb101: {
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_235);
        StorageLive(_254);
        _254 = _215;
        _207 = std::result::Result::<(), error::ErrorCode>::Err(move _254);
        StorageDead(_254);
        StorageDead(_215);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_212);
        StorageDead(_208);
        _206 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _207) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_207);
        _255 = discriminant(_206);
        switchInt(move _255) -> [0: bb104, 1: bb105, otherwise: bb22];
    }

    bb104: {
        StorageLive(_259);
        _259 = ((_206 as Continue).0: ());
        _205 = _259;
        StorageDead(_259);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = ((*_204).6: u8);
        _263 = Eq(move _264, const 0_u8);
        switchInt(move _263) -> [0: bb108, otherwise: bb107];
    }

    bb105: {
        StorageLive(_256);
        _256 = ((_206 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_258);
        _258 = _256;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _258) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb146;
    }

    bb107: {
        StorageDead(_264);
        StorageLive(_265);
        _265 = ();
        _262 = std::result::Result::<(), error::ErrorCode>::Ok(move _265);
        StorageDead(_265);
        goto -> bb121;
    }

    bb108: {
        StorageDead(_264);
        StorageLive(_266);
        _266 = error::ErrorCode::UserNotInactive;
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _361 = const _;
        _277 = &(*_361);
        _276 = &(*_277);
        _275 = move _276 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_276);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &_266;
        _284 = &(*_285);
        _283 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _284) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_284);
        _282 = [move _283];
        StorageDead(_283);
        _281 = &_282;
        _280 = &(*_281);
        _279 = move _280 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_280);
        _274 = Arguments::<'_>::new_v1(move _275, move _279) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_279);
        StorageDead(_275);
        _273 = format(move _274) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_274);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_277);
        _272 = move _273;
        StorageDead(_273);
        _271 = &_272;
        _270 = &(*_271);
        _269 = <String as Deref>::deref(move _270) -> [return: bb112, unwind: bb151];
    }

    bb112: {
        _268 = &(*_269);
        StorageDead(_270);
        _267 = solana_program::log::sol_log(move _268) -> [return: bb113, unwind: bb151];
    }

    bb113: {
        StorageDead(_268);
        drop(_272) -> [return: bb114, unwind: bb160];
    }

    bb114: {
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _360 = const _;
        _296 = &(*_360);
        _295 = &(*_296);
        _294 = move _295 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_295);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &((*_204).4: u16);
        _303 = &(*_304);
        _302 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _303) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_303);
        _301 = [move _302];
        StorageDead(_302);
        _300 = &_301;
        _299 = &(*_300);
        _298 = move _299 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_299);
        _293 = Arguments::<'_>::new_v1(move _294, move _298) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_298);
        StorageDead(_294);
        _292 = format(move _293) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_293);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_300);
        StorageDead(_296);
        _291 = move _292;
        StorageDead(_292);
        _290 = &_291;
        _289 = &(*_290);
        _288 = <String as Deref>::deref(move _289) -> [return: bb118, unwind: bb150];
    }

    bb118: {
        _287 = &(*_288);
        StorageDead(_289);
        _286 = solana_program::log::sol_log(move _287) -> [return: bb119, unwind: bb150];
    }

    bb119: {
        StorageDead(_287);
        drop(_291) -> [return: bb120, unwind: bb160];
    }

    bb120: {
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_286);
        StorageLive(_305);
        _305 = _266;
        _262 = std::result::Result::<(), error::ErrorCode>::Err(move _305);
        StorageDead(_305);
        StorageDead(_266);
        goto -> bb121;
    }

    bb121: {
        StorageDead(_263);
        _261 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _262) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_262);
        _306 = discriminant(_261);
        switchInt(move _306) -> [0: bb123, 1: bb124, otherwise: bb22];
    }

    bb123: {
        StorageLive(_310);
        _310 = ((_261 as Continue).0: ());
        _260 = _310;
        StorageDead(_310);
        StorageDead(_261);
        StorageDead(_260);
        _198 = const ();
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        _135 = const ();
        goto -> bb81;
    }

    bb124: {
        StorageLive(_307);
        _307 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_309);
        _309 = _307;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _309) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_261);
        StorageDead(_260);
        goto -> bb146;
    }

    bb126: {
        StorageDead(_313);
        StorageLive(_314);
        _314 = move _312;
        goto -> bb127;
    }

    bb127: {
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &mut _314;
        _317 = &mut (*_318);
        _316 = <std::slice::Iter<'_, Order> as Iterator>::next(move _317) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_317);
        _319 = discriminant(_316);
        switchInt(move _319) -> [0: bb130, 1: bb129, otherwise: bb22];
    }

    bb129: {
        StorageLive(_321);
        _321 = ((_316 as Some).0: &state::user::Order);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _326 = &(*_321);
        _325 = Order::is_available(move _326) -> [return: bb131, unwind continue];
    }

    bb130: {
        _311 = const ();
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_357);
        _357 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _357);
        StorageDead(_357);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb148;
    }

    bb131: {
        switchInt(move _325) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        StorageDead(_326);
        StorageLive(_327);
        _327 = ();
        _324 = std::result::Result::<(), error::ErrorCode>::Ok(move _327);
        StorageDead(_327);
        goto -> bb141;
    }

    bb133: {
        StorageDead(_326);
        StorageLive(_328);
        _328 = error::ErrorCode::UserNotInactive;
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _365 = const _;
        _339 = &(*_365);
        _338 = &(*_339);
        _337 = move _338 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_338);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &_328;
        _346 = &(*_347);
        _345 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _346) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_346);
        _344 = [move _345];
        StorageDead(_345);
        _343 = &_344;
        _342 = &(*_343);
        _341 = move _342 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_342);
        _336 = Arguments::<'_>::new_v1(move _337, move _341) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_341);
        StorageDead(_337);
        _335 = format(move _336) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_336);
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_339);
        _334 = move _335;
        StorageDead(_335);
        _333 = &_334;
        _332 = &(*_333);
        _331 = <String as Deref>::deref(move _332) -> [return: bb137, unwind: bb149];
    }

    bb137: {
        _330 = &(*_331);
        StorageDead(_332);
        _329 = solana_program::log::sol_log(move _330) -> [return: bb138, unwind: bb149];
    }

    bb138: {
        StorageDead(_330);
        drop(_334) -> [return: bb139, unwind: bb160];
    }

    bb139: {
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_329);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = const "user has an open order";
        _349 = &(*_350);
        _348 = solana_program::log::sol_log(move _349) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_349);
        StorageDead(_350);
        StorageDead(_348);
        StorageLive(_351);
        _351 = _328;
        _324 = std::result::Result::<(), error::ErrorCode>::Err(move _351);
        StorageDead(_351);
        StorageDead(_328);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_325);
        _323 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _324) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_324);
        _352 = discriminant(_323);
        switchInt(move _352) -> [0: bb143, 1: bb144, otherwise: bb22];
    }

    bb143: {
        StorageLive(_356);
        _356 = ((_323 as Continue).0: ());
        _322 = _356;
        StorageDead(_356);
        StorageDead(_323);
        StorageDead(_322);
        _315 = const ();
        StorageDead(_321);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        _135 = const ();
        goto -> bb127;
    }

    bb144: {
        StorageLive(_353);
        _353 = ((_323 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_355);
        _355 = _353;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _355) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        goto -> bb147;
    }

    bb146: {
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb148;
    }

    bb148: {
        return;
    }

    bb149 (cleanup): {
        drop(_334) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_291) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_272) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_240) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_221) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_174) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_155) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_108) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_73) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_41) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_22) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        resume;
    }
}
