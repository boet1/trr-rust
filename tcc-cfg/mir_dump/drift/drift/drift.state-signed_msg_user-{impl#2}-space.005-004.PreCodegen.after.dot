digraph Mir_0_3949 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SignedMsgUserOrders::space(_1: usize) -&gt; usize<br align="left"/>let mut _2: usize;<br align="left"/>let mut _3: usize;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: (usize, bool);<br align="left"/>let mut _6: (usize, bool);<br align="left"/>let mut _7: (usize, bool);<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: (usize, bool);<br align="left"/>let mut _11: (usize, bool);<br align="left"/>debug num_orders =&gt; _1;<br align="left"/>>;
    bb0__0_3949 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_5 = CheckedAdd(const 8_usize, const 32_usize)<br/></td></tr><tr><td align="left">assert(!move (_5.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const 8_usize, const 32_usize)</td></tr></table>>];
    bb1__0_3949 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = move (_5.0: usize)<br/>_6 = CheckedAdd(_4, const 4_usize)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _4, const 4_usize)</td></tr></table>>];
    bb2__0_3949 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = move (_6.0: usize)<br/>StorageDead(_4)<br/>_7 = CheckedAdd(_3, const 32_usize)<br/></td></tr><tr><td align="left">assert(!move (_7.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _3, const 32_usize)</td></tr></table>>];
    bb3__0_3949 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_2 = move (_7.0: usize)<br/>StorageDead(_3)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _1<br/>_10 = CheckedMul(_9, const 24_usize)<br/></td></tr><tr><td align="left">assert(!move (_10.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _9, const 24_usize)</td></tr></table>>];
    bb4__0_3949 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_8 = move (_10.0: usize)<br/>StorageDead(_9)<br/>_11 = CheckedAdd(_2, _8)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _2, move _8)</td></tr></table>>];
    bb5__0_3949 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_0 = move (_11.0: usize)<br/>StorageDead(_8)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3949 -> bb1__0_3949 [label="success"];
    bb1__0_3949 -> bb2__0_3949 [label="success"];
    bb2__0_3949 -> bb3__0_3949 [label="success"];
    bb3__0_3949 -> bb4__0_3949 [label="success"];
    bb4__0_3949 -> bb5__0_3949 [label="success"];
}
