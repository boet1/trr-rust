// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::can_skip_auction_duration` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::can_skip_auction_duration(_1: &PerpMarket, _2: &state::state::State, _3: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug state => _2;
    debug amm_has_low_enough_inventory => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _7: std::result::Result<bool, error::ErrorCode>;
    let mut _8: &state::state::State;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: bool;
    let mut _14: !;
    let _15: bool;
    let mut _16: bool;
    let mut _17: i64;
    let mut _19: bool;
    let mut _20: &state::oracle::OracleSource;
    let mut _21: &state::oracle::OracleSource;
    let _22: state::oracle::OracleSource;
    let mut _23: bool;
    let mut _24: i64;
    let mut _25: &state::oracle::OracleSource;
    let mut _26: &state::oracle::OracleSource;
    let _27: state::oracle::OracleSource;
    let mut _29: bool;
    let _30: ();
    let mut _31: bool;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &u16;
    let _50: &u16;
    let mut _51: bool;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug amm_low_inventory_and_profitable => _15;
        let _18: bool;
        let mut _53: &state::oracle::OracleSource;
        let mut _54: &state::oracle::OracleSource;
        scope 6 {
            debug amm_oracle_no_latency => _18;
            let _28: bool;
            scope 7 {
                debug can_skip => _28;
                let _38: std::string::String;
                let mut _52: &[&str; 2];
                scope 8 {
                    debug res => _38;
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_2);
        _7 = state::state::State::amm_immediate_fill_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: bool);
        _5 = _13;
        StorageDead(_13);
        switchInt(move _5) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_6);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        goto -> bb32;
    }

    bb8: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (((*_1).1: state::perp_market::AMM).49: i64);
        _16 = Ge(move _17, const _);
        switchInt(move _16) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_17);
        _15 = _3;
        goto -> bb11;
    }

    bb10: {
        StorageDead(_17);
        _15 = const false;
        goto -> bb11;
    }

    bb11: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        StorageLive(_21);
        _54 = const _;
        _21 = &(*_54);
        _19 = <state::oracle::OracleSource as PartialEq>::eq(move _20, move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _19) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = const true;
        goto -> bb19;
    }

    bb14: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).2: i64);
        _23 = Eq(move _24, const 0_i64);
        switchInt(move _23) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_24);
        StorageLive(_25);
        _25 = &(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        StorageLive(_26);
        _53 = const _;
        _26 = &(*_53);
        _18 = <state::oracle::OracleSource as PartialEq>::eq(move _25, move _26) -> [return: bb17, unwind continue];
    }

    bb16: {
        StorageDead(_24);
        _18 = const false;
        goto -> bb18;
    }

    bb17: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_23);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_19);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _15;
        switchInt(move _29) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _28 = const true;
        goto -> bb22;
    }

    bb21: {
        _28 = _18;
        goto -> bb22;
    }

    bb22: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _28;
        switchInt(move _31) -> [0: bb30, otherwise: bb23];
    }

    bb23: {
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _52 = const _;
        _42 = &(*_52);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &((*_1).21: u16);
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _49) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_49);
        _47 = [move _48];
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_33);
        drop(_37) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        _30 = const ();
        goto -> bb31;
    }

    bb30: {
        _30 = const ();
        goto -> bb31;
    }

    bb31: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_51);
        _51 = _28;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        StorageDead(_28);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_37) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}
