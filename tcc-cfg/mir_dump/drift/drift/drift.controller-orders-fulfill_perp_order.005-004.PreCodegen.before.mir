// MIR for `fulfill_perp_order` before PreCodegen

fn fulfill_perp_order(_1: &mut User, _2: usize, _3: &anchor_lang::prelude::Pubkey, _4: &mut UserStats, _5: &UserMap<'_>, _6: &UserStatsMap<'_>, _7: &[(anchor_lang::prelude::Pubkey, usize, u64)], _8: &mut Option<&mut User>, _9: &anchor_lang::prelude::Pubkey, _10: &mut Option<&mut UserStats>, _11: Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, _12: &SpotMarketMap<'_>, _13: &PerpMarketMap<'_>, _14: &mut OracleMap<'_>, _15: &state::state::FeeStructure, _16: u64, _17: Option<i64>, _18: i64, _19: u64, _20: u8, _21: AMMAvailability, _22: FillMode, _23: bool) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug user => _1;
    debug user_order_index => _2;
    debug user_key => _3;
    debug user_stats => _4;
    debug makers_and_referrer => _5;
    debug makers_and_referrer_stats => _6;
    debug maker_orders_info => _7;
    debug filler => _8;
    debug filler_key => _9;
    debug filler_stats => _10;
    debug referrer_info => _11;
    debug spot_market_map => _12;
    debug perp_market_map => _13;
    debug oracle_map => _14;
    debug fee_structure => _15;
    debug reserve_price_before => _16;
    debug valid_oracle_price => _17;
    debug now => _18;
    debug slot => _19;
    debug min_auction_duration => _20;
    debug amm_availability => _21;
    debug fill_mode => _22;
    debug oracle_stale_for_margin => _23;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _24: u16;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _30: std::result::Result<bool, error::ErrorCode>;
    let mut _31: &state::user::User;
    let mut _32: u16;
    let mut _33: usize;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _42: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _43: &u16;
    let _44: &u16;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _52: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _53: &state::fill_mode::FillMode;
    let mut _54: &state::user::Order;
    let _55: &state::user::Order;
    let _56: usize;
    let mut _57: usize;
    let mut _58: bool;
    let mut _59: std::option::Option<i64>;
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: &state::perp_market::PerpMarket;
    let mut _63: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _64: bool;
    let mut _65: &state::perp_market::PerpMarket;
    let _66: &state::perp_market::PerpMarket;
    let mut _67: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: &state::perp_market::PerpMarket;
    let _75: &state::perp_market::PerpMarket;
    let mut _76: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _77: ();
    let mut _78: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _82: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _83: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _84: &u16;
    let _85: &u16;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: &state::oracle::OraclePriceData;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _94: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _95: &mut state::oracle_map::OracleMap<'_>;
    let mut _96: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _97: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _98: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _99: &state::perp_market::PerpMarket;
    let _100: &state::perp_market::PerpMarket;
    let mut _101: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>>;
    let mut _108: std::result::Result<std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>, error::ErrorCode>;
    let mut _109: &state::user::Order;
    let _110: &state::user::Order;
    let _111: usize;
    let mut _112: usize;
    let mut _113: bool;
    let mut _114: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let mut _115: &state::perp_market::AMM;
    let _116: &state::perp_market::AMM;
    let _117: &state::perp_market::PerpMarket;
    let mut _118: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _119: u64;
    let mut _120: std::option::Option<i64>;
    let mut _121: i64;
    let mut _122: std::option::Option<u64>;
    let mut _123: state::perp_market::AMMAvailability;
    let mut _124: u64;
    let mut _125: u8;
    let mut _126: state::fill_mode::FillMode;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _132: ();
    let mut _133: bool;
    let mut _134: &std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
    let mut _135: !;
    let mut _136: (u64, u64);
    let mut _141: &controller::position::PositionDirection;
    let _142: usize;
    let mut _143: usize;
    let mut _144: bool;
    let _145: ();
    let mut _146: std::slice::Iter<'_, state::fulfillment::PerpFulfillmentMethod>;
    let mut _147: std::slice::Iter<'_, state::fulfillment::PerpFulfillmentMethod>;
    let mut _148: &[state::fulfillment::PerpFulfillmentMethod];
    let _149: &[state::fulfillment::PerpFulfillmentMethod];
    let mut _150: &std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
    let mut _152: ();
    let _153: ();
    let mut _154: std::option::Option<&state::fulfillment::PerpFulfillmentMethod>;
    let mut _155: &mut std::slice::Iter<'_, state::fulfillment::PerpFulfillmentMethod>;
    let mut _156: &mut std::slice::Iter<'_, state::fulfillment::PerpFulfillmentMethod>;
    let mut _157: isize;
    let mut _158: !;
    let _160: ();
    let mut _161: bool;
    let mut _162: &state::user::OrderStatus;
    let _163: usize;
    let mut _164: usize;
    let mut _165: bool;
    let mut _166: &state::user::OrderStatus;
    let _167: state::user::OrderStatus;
    let mut _168: !;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _171: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _172: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _173: &u16;
    let _174: &u16;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _181: usize;
    let mut _182: usize;
    let mut _183: bool;
    let mut _186: (u64, u64);
    let mut _187: isize;
    let mut _191: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>)>;
    let mut _193: std::result::Result<(std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>), error::ErrorCode>;
    let mut _194: &std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let _195: &std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let mut _196: &state::user_map::UserMap<'_>;
    let mut _197: &state::user_map::UserStatsMap<'_>;
    let mut _198: std::option::Option<&state::user::User>;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _206: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _207: bool;
    let mut _208: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _209: &anchor_lang::prelude::Pubkey;
    let mut _210: bool;
    let mut _211: &std::option::Option<&mut state::user::User>;
    let mut _213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _214: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _215: &state::user_map::UserMap<'_>;
    let mut _216: &anchor_lang::prelude::Pubkey;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _222: bool;
    let mut _223: &anchor_lang::prelude::Pubkey;
    let _224: &state::user::User;
    let mut _225: &std::cell::RefMut<'_, state::user::User>;
    let mut _226: &anchor_lang::prelude::Pubkey;
    let mut _227: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _228: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _231: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _232: &state::user_map::UserStatsMap<'_>;
    let mut _233: &anchor_lang::prelude::Pubkey;
    let _234: &anchor_lang::prelude::Pubkey;
    let _235: &state::user::User;
    let mut _236: &std::cell::RefMut<'_, state::user::User>;
    let mut _237: isize;
    let mut _239: !;
    let mut _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _242: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _243: std::cell::RefMut<'_, state::user::User>;
    let mut _244: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _245: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _246: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _247: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _250: (u64, u64);
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _252: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _253: &mut state::user::User;
    let mut _254: &mut state::user::UserStats;
    let mut _255: usize;
    let mut _256: &mut state::perp_market::PerpMarket;
    let mut _257: &mut state::perp_market::PerpMarket;
    let mut _258: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _259: &mut state::oracle_map::OracleMap<'_>;
    let mut _260: u64;
    let mut _261: i64;
    let mut _262: u64;
    let mut _263: &anchor_lang::prelude::Pubkey;
    let mut _264: &anchor_lang::prelude::Pubkey;
    let mut _265: &mut std::option::Option<&mut state::user::User>;
    let mut _266: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _267: &mut std::option::Option<&mut state::user::User>;
    let mut _268: &mut std::option::Option<&mut state::user::User>;
    let mut _269: std::option::Option<&mut state::user::User>;
    let mut _270: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _271: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _272: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _273: std::option::Option<&mut state::user::UserStats>;
    let mut _274: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _275: &mut std::option::Option<&mut state::user::User>;
    let mut _276: &mut std::option::Option<&mut state::user::User>;
    let mut _277: std::option::Option<&mut state::user::User>;
    let mut _278: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _279: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _280: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _281: std::option::Option<&mut state::user::UserStats>;
    let mut _282: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _283: &state::state::FeeStructure;
    let mut _284: std::option::Option<u64>;
    let mut _285: std::option::Option<u64>;
    let mut _286: std::option::Option<u64>;
    let mut _287: bool;
    let mut _288: &state::fill_mode::FillMode;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _294: u64;
    let mut _295: u64;
    let mut _300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _301: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _302: &state::user_map::UserMap<'_>;
    let mut _303: &anchor_lang::prelude::Pubkey;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _310: bool;
    let mut _311: &anchor_lang::prelude::Pubkey;
    let _312: &state::user::User;
    let mut _313: &std::cell::RefMut<'_, state::user::User>;
    let mut _314: &anchor_lang::prelude::Pubkey;
    let mut _315: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _316: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _317: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _318: &state::user_map::UserStatsMap<'_>;
    let mut _319: &anchor_lang::prelude::Pubkey;
    let _320: &anchor_lang::prelude::Pubkey;
    let _321: &state::user::User;
    let mut _322: &std::cell::RefMut<'_, state::user::User>;
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _330: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _331: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>)>;
    let mut _332: std::result::Result<(std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>), error::ErrorCode>;
    let mut _333: &std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let _334: &std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let mut _335: &state::user_map::UserMap<'_>;
    let mut _336: &state::user_map::UserStatsMap<'_>;
    let mut _337: std::option::Option<&state::user::User>;
    let mut _338: &state::user::User;
    let _339: &state::user::User;
    let mut _340: &std::cell::RefMut<'_, state::user::User>;
    let _341: &std::cell::RefMut<'_, state::user::User>;
    let mut _342: isize;
    let mut _344: !;
    let mut _345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _350: (u64, u64, u64);
    let mut _351: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64, u64)>;
    let mut _352: std::result::Result<(u64, u64, u64), error::ErrorCode>;
    let mut _353: &mut state::perp_market::PerpMarket;
    let mut _354: &mut state::perp_market::PerpMarket;
    let mut _355: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _356: &mut state::user::User;
    let mut _357: &mut state::user::UserStats;
    let mut _358: usize;
    let mut _359: &anchor_lang::prelude::Pubkey;
    let mut _360: &mut state::user::User;
    let mut _361: &mut state::user::User;
    let mut _362: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _363: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _364: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _365: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _366: std::option::Option<&mut state::user::UserStats>;
    let mut _367: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _368: usize;
    let mut _369: u16;
    let mut _370: &anchor_lang::prelude::Pubkey;
    let mut _371: &mut std::option::Option<&mut state::user::User>;
    let mut _372: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _373: &anchor_lang::prelude::Pubkey;
    let mut _374: &mut std::option::Option<&mut state::user::User>;
    let mut _375: &mut std::option::Option<&mut state::user::User>;
    let mut _376: std::option::Option<&mut state::user::User>;
    let mut _377: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _378: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _379: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _380: std::option::Option<&mut state::user::UserStats>;
    let mut _381: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _382: u64;
    let mut _383: std::option::Option<i64>;
    let mut _384: std::option::Option<u64>;
    let mut _385: u64;
    let mut _386: i64;
    let mut _387: u64;
    let mut _388: &state::state::FeeStructure;
    let mut _389: &mut state::oracle_map::OracleMap<'_>;
    let mut _390: bool;
    let mut _391: &state::fill_mode::FillMode;
    let mut _392: isize;
    let mut _394: !;
    let mut _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _397: ();
    let mut _398: bool;
    let mut _399: u64;
    let _400: ();
    let mut _401: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _402: std::result::Result<(), error::ErrorCode>;
    let mut _403: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let mut _404: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let mut _405: &anchor_lang::prelude::Pubkey;
    let mut _406: controller::position::PositionDirection;
    let mut _407: u64;
    let mut _408: isize;
    let mut _410: !;
    let mut _411: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _413: u64;
    let mut _414: u64;
    let mut _415: u64;
    let mut _416: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _417: std::result::Result<u64, error::ErrorCode>;
    let mut _418: u64;
    let mut _419: u64;
    let mut _420: isize;
    let mut _422: !;
    let mut _423: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _425: u64;
    let mut _426: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _427: std::result::Result<u64, error::ErrorCode>;
    let mut _428: u64;
    let mut _429: u64;
    let mut _430: isize;
    let mut _432: !;
    let mut _433: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _435: ();
    let mut _436: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _437: std::result::Result<(), error::ErrorCode>;
    let mut _438: &mut state::perp_market::AMM;
    let mut _439: &mut state::perp_market::PerpMarket;
    let mut _440: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _441: u64;
    let mut _442: controller::position::PositionDirection;
    let mut _443: i64;
    let mut _444: isize;
    let mut _446: !;
    let mut _447: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _449: ();
    let mut _450: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _451: std::result::Result<(), error::ErrorCode>;
    let mut _452: bool;
    let mut _453: bool;
    let mut _454: u64;
    let mut _455: bool;
    let mut _456: u64;
    let mut _457: ();
    let _459: ();
    let mut _460: &str;
    let _461: &str;
    let mut _462: &std::string::String;
    let _463: &std::string::String;
    let _464: std::string::String;
    let mut _466: std::fmt::Arguments<'_>;
    let mut _467: &[&str];
    let mut _468: &[&str; 2];
    let _469: &[&str; 2];
    let _470: [&str; 2];
    let mut _471: &[core::fmt::rt::Argument<'_>];
    let mut _472: &[core::fmt::rt::Argument<'_>; 1];
    let _473: &[core::fmt::rt::Argument<'_>; 1];
    let _474: [core::fmt::rt::Argument<'_>; 1];
    let mut _475: core::fmt::rt::Argument<'_>;
    let mut _476: &error::ErrorCode;
    let _477: &error::ErrorCode;
    let _478: ();
    let mut _479: &str;
    let _480: &str;
    let mut _481: &std::string::String;
    let _482: &std::string::String;
    let _483: std::string::String;
    let mut _485: std::fmt::Arguments<'_>;
    let mut _486: &[&str];
    let mut _487: &[&str; 2];
    let _488: &[&str; 2];
    let _489: [&str; 2];
    let mut _490: &[core::fmt::rt::Argument<'_>];
    let mut _491: &[core::fmt::rt::Argument<'_>; 2];
    let _492: &[core::fmt::rt::Argument<'_>; 2];
    let _493: [core::fmt::rt::Argument<'_>; 2];
    let mut _494: core::fmt::rt::Argument<'_>;
    let mut _495: &u64;
    let _496: &u64;
    let mut _497: core::fmt::rt::Argument<'_>;
    let mut _498: &u64;
    let _499: &u64;
    let mut _500: error::ErrorCode;
    let mut _501: isize;
    let mut _503: !;
    let mut _504: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _507: std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, i64>;
    let mut _508: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let _509: ();
    let mut _510: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _511: std::result::Result<(), error::ErrorCode>;
    let mut _512: bool;
    let mut _513: u64;
    let mut _514: i64;
    let mut _515: u64;
    let mut _516: ();
    let _518: ();
    let mut _519: &str;
    let _520: &str;
    let mut _521: &std::string::String;
    let _522: &std::string::String;
    let _523: std::string::String;
    let mut _525: std::fmt::Arguments<'_>;
    let mut _526: &[&str];
    let mut _527: &[&str; 2];
    let _528: &[&str; 2];
    let _529: [&str; 2];
    let mut _530: &[core::fmt::rt::Argument<'_>];
    let mut _531: &[core::fmt::rt::Argument<'_>; 1];
    let _532: &[core::fmt::rt::Argument<'_>; 1];
    let _533: [core::fmt::rt::Argument<'_>; 1];
    let mut _534: core::fmt::rt::Argument<'_>;
    let mut _535: &error::ErrorCode;
    let _536: &error::ErrorCode;
    let _537: ();
    let mut _538: &str;
    let _539: &str;
    let mut _540: &std::string::String;
    let _541: &std::string::String;
    let _542: std::string::String;
    let mut _544: std::fmt::Arguments<'_>;
    let mut _545: &[&str];
    let mut _546: &[&str; 2];
    let _547: &[&str; 2];
    let _548: [&str; 2];
    let mut _549: &[core::fmt::rt::Argument<'_>];
    let mut _550: &[core::fmt::rt::Argument<'_>; 2];
    let _551: &[core::fmt::rt::Argument<'_>; 2];
    let _552: [core::fmt::rt::Argument<'_>; 2];
    let mut _553: core::fmt::rt::Argument<'_>;
    let mut _554: &i64;
    let _555: &i64;
    let mut _556: core::fmt::rt::Argument<'_>;
    let mut _557: &u64;
    let _558: &u64;
    let mut _559: error::ErrorCode;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _565: ();
    let mut _566: bool;
    let mut _567: &state::fill_mode::FillMode;
    let mut _569: bool;
    let mut _570: &controller::position::PositionDirection;
    let mut _571: &controller::position::PositionDirection;
    let _572: controller::position::PositionDirection;
    let mut _573: u64;
    let mut _574: i64;
    let mut _575: u64;
    let mut _576: bool;
    let mut _578: state::margin_calculation::MarginContext;
    let mut _579: state::margin_calculation::MarginContext;
    let mut _580: math::margin::MarginRequirementType;
    let mut _581: bool;
    let mut _582: u16;
    let mut _583: i64;
    let mut _584: &state::user::User;
    let mut _585: i64;
    let _586: ();
    let mut _587: bool;
    let mut _588: bool;
    let mut _589: state::margin_calculation::MarginContext;
    let mut _590: state::margin_calculation::MarginContext;
    let mut _592: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _593: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _594: &state::user::User;
    let mut _595: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _596: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _597: &mut state::oracle_map::OracleMap<'_>;
    let mut _598: state::margin_calculation::MarginContext;
    let mut _599: isize;
    let mut _601: !;
    let mut _602: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _604: ();
    let mut _605: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _606: std::result::Result<(), error::ErrorCode>;
    let mut _607: &mut state::user::UserStats;
    let mut _608: &mut state::user::User;
    let mut _609: u32;
    let mut _610: u32;
    let mut _611: u32;
    let mut _612: i64;
    let mut _613: isize;
    let mut _615: !;
    let mut _616: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _618: bool;
    let mut _619: &state::margin_calculation::MarginCalculation;
    let mut _620: !;
    let _621: ();
    let mut _622: &str;
    let _623: &str;
    let mut _624: &std::string::String;
    let _625: &std::string::String;
    let _626: std::string::String;
    let mut _628: std::fmt::Arguments<'_>;
    let mut _629: &[&str];
    let mut _630: &[&str; 3];
    let _631: &[&str; 3];
    let _632: [&str; 3];
    let mut _633: &[core::fmt::rt::Argument<'_>];
    let mut _634: &[core::fmt::rt::Argument<'_>; 2];
    let _635: &[core::fmt::rt::Argument<'_>; 2];
    let _636: [core::fmt::rt::Argument<'_>; 2];
    let mut _637: core::fmt::rt::Argument<'_>;
    let mut _638: &u128;
    let _639: &u128;
    let mut _640: core::fmt::rt::Argument<'_>;
    let mut _641: &i128;
    let _642: &i128;
    let mut _643: error::ErrorCode;
    let _644: ();
    let mut _645: std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
    let mut _646: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
    let _648: ();
    let mut _649: std::option::Option<(anchor_lang::prelude::Pubkey, i64)>;
    let mut _650: &mut std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
    let mut _651: &mut std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
    let mut _652: isize;
    let mut _653: !;
    let mut _657: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _658: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _659: &state::user_map::UserMap<'_>;
    let mut _660: &anchor_lang::prelude::Pubkey;
    let _661: &anchor_lang::prelude::Pubkey;
    let mut _662: isize;
    let mut _664: !;
    let mut _665: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _668: bool;
    let mut _669: &anchor_lang::prelude::Pubkey;
    let _670: &state::user::User;
    let mut _671: &std::cell::RefMut<'_, state::user::User>;
    let mut _672: &anchor_lang::prelude::Pubkey;
    let mut _673: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _674: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _675: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _676: &state::user_map::UserStatsMap<'_>;
    let mut _677: &anchor_lang::prelude::Pubkey;
    let _678: &anchor_lang::prelude::Pubkey;
    let _679: &state::user::User;
    let mut _680: &std::cell::RefMut<'_, state::user::User>;
    let mut _681: isize;
    let mut _683: !;
    let mut _684: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _688: (math::margin::MarginRequirementType, bool);
    let mut _689: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (math::margin::MarginRequirementType, bool)>;
    let mut _690: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let mut _691: &state::user::User;
    let _692: &state::user::User;
    let mut _693: &std::cell::RefMut<'_, state::user::User>;
    let _694: &std::cell::RefMut<'_, state::user::User>;
    let mut _695: i64;
    let mut _696: u16;
    let mut _697: isize;
    let mut _699: !;
    let mut _700: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _703: state::margin_calculation::MarginContext;
    let mut _704: state::margin_calculation::MarginContext;
    let mut _705: math::margin::MarginRequirementType;
    let mut _706: u16;
    let mut _707: i64;
    let mut _708: i64;
    let mut _709: bool;
    let mut _710: &state::user::User;
    let _711: &state::user::User;
    let mut _712: &std::cell::RefMut<'_, state::user::User>;
    let _713: &std::cell::RefMut<'_, state::user::User>;
    let mut _714: i64;
    let _715: ();
    let mut _716: bool;
    let _717: ();
    let mut _718: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _719: std::result::Result<(), error::ErrorCode>;
    let mut _720: bool;
    let mut _721: bool;
    let mut _722: ();
    let _724: ();
    let mut _725: &str;
    let _726: &str;
    let mut _727: &std::string::String;
    let _728: &std::string::String;
    let _729: std::string::String;
    let mut _731: std::fmt::Arguments<'_>;
    let mut _732: &[&str];
    let mut _733: &[&str; 2];
    let _734: &[&str; 2];
    let _735: [&str; 2];
    let mut _736: &[core::fmt::rt::Argument<'_>];
    let mut _737: &[core::fmt::rt::Argument<'_>; 1];
    let _738: &[core::fmt::rt::Argument<'_>; 1];
    let _739: [core::fmt::rt::Argument<'_>; 1];
    let mut _740: core::fmt::rt::Argument<'_>;
    let mut _741: &error::ErrorCode;
    let _742: &error::ErrorCode;
    let _743: ();
    let mut _744: &str;
    let _745: &str;
    let mut _746: error::ErrorCode;
    let mut _747: isize;
    let mut _749: !;
    let mut _750: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _752: bool;
    let mut _753: state::margin_calculation::MarginContext;
    let mut _754: state::margin_calculation::MarginContext;
    let mut _756: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _757: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _758: &state::user::User;
    let _759: &state::user::User;
    let mut _760: &std::cell::RefMut<'_, state::user::User>;
    let _761: &std::cell::RefMut<'_, state::user::User>;
    let mut _762: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _763: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _764: &mut state::oracle_map::OracleMap<'_>;
    let mut _765: state::margin_calculation::MarginContext;
    let mut _766: isize;
    let mut _768: !;
    let mut _769: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _771: ();
    let mut _772: isize;
    let _774: ();
    let mut _775: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _776: std::result::Result<(), error::ErrorCode>;
    let mut _777: &mut state::user::UserStats;
    let mut _778: &mut state::user::UserStats;
    let mut _779: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _780: &mut state::user::User;
    let mut _781: &mut state::user::User;
    let mut _782: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _783: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _784: u32;
    let mut _785: u32;
    let mut _786: u32;
    let mut _787: i64;
    let mut _788: isize;
    let mut _790: !;
    let mut _791: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _793: bool;
    let mut _794: &state::margin_calculation::MarginCalculation;
    let mut _795: !;
    let _796: ();
    let mut _797: &str;
    let _798: &str;
    let mut _799: &std::string::String;
    let _800: &std::string::String;
    let _801: std::string::String;
    let mut _803: std::fmt::Arguments<'_>;
    let mut _804: &[&str];
    let mut _805: &[&str; 4];
    let _806: &[&str; 4];
    let _807: [&str; 4];
    let mut _808: &[core::fmt::rt::Argument<'_>];
    let mut _809: &[core::fmt::rt::Argument<'_>; 3];
    let _810: &[core::fmt::rt::Argument<'_>; 3];
    let _811: [core::fmt::rt::Argument<'_>; 3];
    let mut _812: core::fmt::rt::Argument<'_>;
    let mut _813: &anchor_lang::prelude::Pubkey;
    let _814: &anchor_lang::prelude::Pubkey;
    let mut _815: core::fmt::rt::Argument<'_>;
    let mut _816: &u128;
    let _817: &u128;
    let mut _818: core::fmt::rt::Argument<'_>;
    let mut _819: &i128;
    let _820: &i128;
    let mut _821: error::ErrorCode;
    let _822: ();
    let mut _823: bool;
    let mut _825: &state::perp_market::PerpMarket;
    let _826: &state::perp_market::PerpMarket;
    let mut _827: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _828: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _829: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _830: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _831: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _832: &u16;
    let _833: &u16;
    let mut _834: isize;
    let mut _836: !;
    let mut _837: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _839: ();
    let mut _840: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _841: std::result::Result<(), error::ErrorCode>;
    let mut _842: bool;
    let mut _843: u128;
    let mut _844: u128;
    let mut _845: ();
    let _847: ();
    let mut _848: &str;
    let _849: &str;
    let mut _850: &std::string::String;
    let _851: &std::string::String;
    let _852: std::string::String;
    let mut _854: std::fmt::Arguments<'_>;
    let mut _855: &[&str];
    let mut _856: &[&str; 2];
    let _857: &[&str; 2];
    let _858: [&str; 2];
    let mut _859: &[core::fmt::rt::Argument<'_>];
    let mut _860: &[core::fmt::rt::Argument<'_>; 1];
    let _861: &[core::fmt::rt::Argument<'_>; 1];
    let _862: [core::fmt::rt::Argument<'_>; 1];
    let mut _863: core::fmt::rt::Argument<'_>;
    let mut _864: &error::ErrorCode;
    let _865: &error::ErrorCode;
    let _866: ();
    let mut _867: &str;
    let _868: &str;
    let mut _869: error::ErrorCode;
    let mut _870: isize;
    let mut _872: !;
    let mut _873: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _875: (u64, u64);
    let mut _876: u64;
    let mut _877: u64;
    let mut _888: bool;
    let mut _889: bool;
    let mut _890: bool;
    let mut _891: bool;
    let mut _892: bool;
    let mut _893: bool;
    let mut _894: isize;
    let mut _895: isize;
    let mut _896: isize;
    let mut _897: isize;
    let mut _898: isize;
    let mut _899: isize;
    let mut _900: isize;
    let mut _901: isize;
    let mut _902: isize;
    let mut _903: isize;
    let mut _904: isize;
    let mut _905: isize;
    let mut _906: isize;
    let mut _907: isize;
    let mut _908: isize;
    let mut _909: isize;
    let mut _910: isize;
    let mut _911: isize;
    let mut _912: isize;
    let mut _913: isize;
    let mut _914: isize;
    let mut _915: isize;
    let mut _916: isize;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    let mut _920: isize;
    let mut _921: isize;
    let mut _922: isize;
    let mut _923: isize;
    let mut _924: isize;
    let mut _925: isize;
    let mut _926: isize;
    let mut _927: isize;
    let mut _928: isize;
    let mut _929: isize;
    let mut _930: isize;
    let mut _931: isize;
    let mut _932: isize;
    let mut _933: isize;
    let mut _934: isize;
    let mut _935: isize;
    let mut _936: isize;
    let mut _937: isize;
    let mut _938: isize;
    let mut _939: isize;
    let mut _940: isize;
    let mut _941: isize;
    let mut _942: isize;
    let mut _943: isize;
    let mut _944: isize;
    let mut _945: isize;
    let mut _946: isize;
    let mut _947: isize;
    let mut _948: isize;
    let mut _949: isize;
    let mut _950: isize;
    let mut _951: isize;
    let mut _952: isize;
    let mut _953: isize;
    let mut _954: isize;
    let mut _955: isize;
    let mut _956: isize;
    let mut _957: isize;
    let mut _958: isize;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    scope 1 {
        debug market_index => _24;
        let _28: bool;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: bool;
        scope 2 {
            debug user_order_position_decreasing => _28;
            let _39: std::cell::Ref<'_, state::perp_market::PerpMarket>;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: std::cell::Ref<'_, state::perp_market::PerpMarket>;
            scope 7 {
                debug perp_market => _39;
                let _50: std::option::Option<u64>;
                let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _72: std::option::Option<u64>;
                scope 12 {
                    debug limit_price => _50;
                    let _73: u128;
                    scope 17 {
                        debug perp_market_oi_before => _73;
                        let _79: std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
                        let _80: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _90: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                        scope 18 {
                            debug fulfillment_methods => _79;
                            let mut _137: u64;
                            scope 33 {
                                debug base_asset_amount => _137;
                                let mut _138: u64;
                                scope 34 {
                                    debug quote_asset_amount => _138;
                                    let mut _139: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, i64>;
                                    scope 35 {
                                        debug maker_fills => _139;
                                        let _140: controller::position::PositionDirection;
                                        scope 36 {
                                            debug maker_direction => _140;
                                            let mut _151: std::slice::Iter<'_, state::fulfillment::PerpFulfillmentMethod>;
                                            let _458: error::ErrorCode;
                                            let _502: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _505: ();
                                            let _506: i64;
                                            scope 37 {
                                                debug iter => _151;
                                                let _159: &state::fulfillment::PerpFulfillmentMethod;
                                                scope 38 {
                                                    debug fulfillment_method => _159;
                                                    let mut _169: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                    let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _179: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                    let mut _887: &state::user::OrderStatus;
                                                    scope 39 {
                                                        debug market => _169;
                                                        let _180: controller::position::PositionDirection;
                                                        scope 44 {
                                                            debug user_order_direction => _180;
                                                            let _184: u64;
                                                            let _185: u64;
                                                            let _188: &std::option::Option<u64>;
                                                            let _296: &anchor_lang::prelude::Pubkey;
                                                            let _297: &u16;
                                                            let _298: &u64;
                                                            scope 45 {
                                                                debug fill_base_asset_amount => _184;
                                                                debug fill_quote_asset_amount => _185;
                                                                let _421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _424: u64;
                                                                let _431: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _434: u64;
                                                                let _445: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _448: ();
                                                                scope 93 {
                                                                    debug residual => _421;
                                                                    scope 94 {
                                                                    }
                                                                }
                                                                scope 95 {
                                                                    debug val => _424;
                                                                    scope 96 {
                                                                    }
                                                                }
                                                                scope 97 {
                                                                    debug residual => _431;
                                                                    scope 98 {
                                                                    }
                                                                }
                                                                scope 99 {
                                                                    debug val => _434;
                                                                    scope 100 {
                                                                    }
                                                                }
                                                                scope 101 {
                                                                    debug residual => _445;
                                                                    scope 102 {
                                                                    }
                                                                }
                                                                scope 103 {
                                                                    debug val => _448;
                                                                    scope 104 {
                                                                    }
                                                                }
                                                            }
                                                            scope 46 {
                                                                debug maker_price => _188;
                                                                let mut _189: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
                                                                let mut _190: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _203: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
                                                                scope 47 {
                                                                    debug referrer => _189;
                                                                    debug referrer_stats => _190;
                                                                    let mut _204: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
                                                                    let mut _205: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                    let _212: std::cell::RefMut<'_, state::user::User>;
                                                                    let _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _221: std::cell::RefMut<'_, state::user::User>;
                                                                    scope 52 {
                                                                        debug maker => _204;
                                                                        debug maker_stats => _205;
                                                                        let _248: u64;
                                                                        let _249: u64;
                                                                        let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _293: (u64, u64);
                                                                        scope 63 {
                                                                            debug fill_base_asset_amount => _248;
                                                                            debug fill_quote_asset_amount => _249;
                                                                        }
                                                                        scope 64 {
                                                                            debug residual => _290;
                                                                            scope 65 {
                                                                            }
                                                                        }
                                                                        scope 66 {
                                                                            debug val => _293;
                                                                            scope 67 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug maker => _212;
                                                                        let _229: std::cell::RefMut<'_, state::user::UserStats>;
                                                                        let _238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _241: std::cell::RefMut<'_, state::user::UserStats>;
                                                                        scope 58 {
                                                                            debug maker_stats => _229;
                                                                        }
                                                                        scope 59 {
                                                                            debug residual => _238;
                                                                            scope 60 {
                                                                            }
                                                                        }
                                                                        scope 61 {
                                                                            debug val => _241;
                                                                            scope 62 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 54 {
                                                                        debug residual => _218;
                                                                        scope 55 {
                                                                        }
                                                                    }
                                                                    scope 56 {
                                                                        debug val => _221;
                                                                        scope 57 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug residual => _200;
                                                                    scope 49 {
                                                                    }
                                                                }
                                                                scope 50 {
                                                                    debug val => _203;
                                                                    scope 51 {
                                                                    }
                                                                }
                                                            }
                                                            scope 68 {
                                                                debug maker_key => _296;
                                                                debug maker_order_index => _297;
                                                                debug maker_price => _298;
                                                                let mut _299: std::cell::RefMut<'_, state::user::User>;
                                                                let _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _308: std::cell::RefMut<'_, state::user::User>;
                                                                scope 69 {
                                                                    debug maker => _299;
                                                                    let mut _309: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                    let _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _327: std::cell::RefMut<'_, state::user::UserStats>;
                                                                    scope 74 {
                                                                        debug maker_stats => _309;
                                                                        let mut _328: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
                                                                        let mut _329: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                        let _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _346: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
                                                                        scope 79 {
                                                                            debug referrer => _328;
                                                                            debug referrer_stats => _329;
                                                                            let _347: u64;
                                                                            let _348: u64;
                                                                            let _349: u64;
                                                                            let _393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _396: (u64, u64, u64);
                                                                            scope 84 {
                                                                                debug fill_base_asset_amount => _347;
                                                                                debug fill_quote_asset_amount => _348;
                                                                                debug maker_fill_base_asset_amount => _349;
                                                                                let _409: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _412: ();
                                                                                scope 89 {
                                                                                    debug residual => _409;
                                                                                    scope 90 {
                                                                                    }
                                                                                }
                                                                                scope 91 {
                                                                                    debug val => _412;
                                                                                    scope 92 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 85 {
                                                                                debug residual => _393;
                                                                                scope 86 {
                                                                                }
                                                                            }
                                                                            scope 87 {
                                                                                debug val => _396;
                                                                                scope 88 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 80 {
                                                                            debug residual => _343;
                                                                            scope 81 {
                                                                            }
                                                                        }
                                                                        scope 82 {
                                                                            debug val => _346;
                                                                            scope 83 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 75 {
                                                                        debug residual => _324;
                                                                        scope 76 {
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug val => _327;
                                                                        scope 78 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 70 {
                                                                    debug residual => _305;
                                                                    scope 71 {
                                                                    }
                                                                }
                                                                scope 72 {
                                                                    debug val => _308;
                                                                    scope 73 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 40 {
                                                        debug residual => _176;
                                                        scope 41 {
                                                        }
                                                    }
                                                    scope 42 {
                                                        debug val => _179;
                                                        scope 43 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 105 {
                                                debug error_code => _458;
                                                let _465: std::string::String;
                                                let _484: std::string::String;
                                                let mut _885: &[&str; 2];
                                                let mut _886: &[&str; 2];
                                                scope 106 {
                                                    debug res => _465;
                                                }
                                                scope 107 {
                                                    debug res => _484;
                                                }
                                            }
                                            scope 108 {
                                                debug residual => _502;
                                                scope 109 {
                                                }
                                            }
                                            scope 110 {
                                                debug val => _505;
                                                scope 111 {
                                                }
                                            }
                                            scope 112 {
                                                debug total_maker_fill => _506;
                                                let _517: error::ErrorCode;
                                                let _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _564: ();
                                                let _568: i64;
                                                let mut _647: std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64>;
                                                let _824: u128;
                                                let _835: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _838: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                let mut _882: &controller::position::PositionDirection;
                                                scope 113 {
                                                    debug error_code => _517;
                                                    let _524: std::string::String;
                                                    let _543: std::string::String;
                                                    let mut _883: &[&str; 2];
                                                    let mut _884: &[&str; 2];
                                                    scope 114 {
                                                        debug res => _524;
                                                    }
                                                    scope 115 {
                                                        debug res => _543;
                                                    }
                                                }
                                                scope 116 {
                                                    debug residual => _561;
                                                    scope 117 {
                                                    }
                                                }
                                                scope 118 {
                                                    debug val => _564;
                                                    scope 119 {
                                                    }
                                                }
                                                scope 120 {
                                                    debug taker_base_asset_amount_delta => _568;
                                                    let mut _577: state::margin_calculation::MarginContext;
                                                    scope 121 {
                                                        debug context => _577;
                                                        let _591: state::margin_calculation::MarginCalculation;
                                                        let _600: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _603: state::margin_calculation::MarginCalculation;
                                                        scope 122 {
                                                            debug taker_margin_calculation => _591;
                                                            let _614: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _617: ();
                                                            let _627: std::string::String;
                                                            let mut _881: &[&str; 3];
                                                            scope 127 {
                                                                debug residual => _614;
                                                                scope 128 {
                                                                }
                                                            }
                                                            scope 129 {
                                                                debug val => _617;
                                                                scope 130 {
                                                                }
                                                            }
                                                            scope 131 {
                                                                debug res => _627;
                                                            }
                                                        }
                                                        scope 123 {
                                                            debug residual => _600;
                                                            scope 124 {
                                                            }
                                                        }
                                                        scope 125 {
                                                            debug val => _603;
                                                            scope 126 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 132 {
                                                    debug iter => _647;
                                                    let _654: anchor_lang::prelude::Pubkey;
                                                    let _655: i64;
                                                    scope 133 {
                                                        debug maker_key => _654;
                                                        debug maker_base_asset_amount_filled => _655;
                                                        let mut _656: std::cell::RefMut<'_, state::user::User>;
                                                        let _663: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _666: std::cell::RefMut<'_, state::user::User>;
                                                        scope 134 {
                                                            debug maker => _656;
                                                            let _667: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                            let _682: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _685: std::cell::RefMut<'_, state::user::UserStats>;
                                                            scope 139 {
                                                                debug maker_stats => _667;
                                                                let _686: math::margin::MarginRequirementType;
                                                                let _687: bool;
                                                                let _698: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _701: (math::margin::MarginRequirementType, bool);
                                                                scope 144 {
                                                                    debug margin_type => _686;
                                                                    debug maker_risk_increasing => _687;
                                                                    let mut _702: state::margin_calculation::MarginContext;
                                                                    scope 149 {
                                                                        debug context => _702;
                                                                        let _723: error::ErrorCode;
                                                                        let _748: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _751: ();
                                                                        let _755: state::margin_calculation::MarginCalculation;
                                                                        let _767: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _770: state::margin_calculation::MarginCalculation;
                                                                        scope 150 {
                                                                            debug error_code => _723;
                                                                            let _730: std::string::String;
                                                                            let mut _879: &[&str; 2];
                                                                            scope 151 {
                                                                                debug res => _730;
                                                                            }
                                                                        }
                                                                        scope 152 {
                                                                            debug residual => _748;
                                                                            scope 153 {
                                                                            }
                                                                        }
                                                                        scope 154 {
                                                                            debug val => _751;
                                                                            scope 155 {
                                                                            }
                                                                        }
                                                                        scope 156 {
                                                                            debug maker_margin_calculation => _755;
                                                                            let _802: std::string::String;
                                                                            let mut _878: &[&str; 4];
                                                                            scope 161 {
                                                                                debug maker_stats => _773;
                                                                                let mut _773: std::cell::RefMut<'_, state::user::UserStats>;
                                                                                let _789: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _792: ();
                                                                                scope 162 {
                                                                                    debug residual => _789;
                                                                                    scope 163 {
                                                                                    }
                                                                                }
                                                                                scope 164 {
                                                                                    debug val => _792;
                                                                                    scope 165 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 166 {
                                                                                debug res => _802;
                                                                            }
                                                                        }
                                                                        scope 157 {
                                                                            debug residual => _767;
                                                                            scope 158 {
                                                                            }
                                                                        }
                                                                        scope 159 {
                                                                            debug val => _770;
                                                                            scope 160 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 145 {
                                                                    debug residual => _698;
                                                                    scope 146 {
                                                                    }
                                                                }
                                                                scope 147 {
                                                                    debug val => _701;
                                                                    scope 148 {
                                                                    }
                                                                }
                                                            }
                                                            scope 140 {
                                                                debug residual => _682;
                                                                scope 141 {
                                                                }
                                                            }
                                                            scope 142 {
                                                                debug val => _685;
                                                                scope 143 {
                                                                }
                                                            }
                                                        }
                                                        scope 135 {
                                                            debug residual => _663;
                                                            scope 136 {
                                                            }
                                                        }
                                                        scope 137 {
                                                            debug val => _666;
                                                            scope 138 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 167 {
                                                    debug perp_market_oi_after => _824;
                                                    let _846: error::ErrorCode;
                                                    let _871: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _874: ();
                                                    scope 172 {
                                                        debug error_code => _846;
                                                        let _853: std::string::String;
                                                        let mut _880: &[&str; 2];
                                                        scope 173 {
                                                            debug res => _853;
                                                        }
                                                    }
                                                    scope 174 {
                                                        debug residual => _871;
                                                        scope 175 {
                                                        }
                                                    }
                                                    scope 176 {
                                                        debug val => _874;
                                                        scope 177 {
                                                        }
                                                    }
                                                }
                                                scope 168 {
                                                    debug residual => _835;
                                                    scope 169 {
                                                    }
                                                }
                                                scope 170 {
                                                    debug val => _838;
                                                    scope 171 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 19 {
                            debug market => _80;
                            let _91: i64;
                            let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _106: &state::oracle::OraclePriceData;
                            scope 24 {
                                debug oracle_price => _91;
                                let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _131: std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
                                scope 29 {
                                    debug residual => _128;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _131;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 25 {
                                debug residual => _103;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _106;
                                scope 28 {
                                }
                            }
                        }
                        scope 20 {
                            debug residual => _87;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _90;
                            scope 23 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _69;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _72;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _46;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _49;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _35;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _38;
            scope 6 {
            }
        }
    }

    bb0: {
        _891 = const false;
        _890 = const false;
        _888 = const false;
        _893 = const false;
        _889 = const false;
        _892 = const false;
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        _26 = Len(((*_1).5: [state::user::Order; 32]));
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb1, unwind continue];
    }

    bb1: {
        _24 = (((*_1).5: [state::user::Order; 32])[_25].11: u16);
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_1);
        StorageLive(_32);
        _32 = _24;
        StorageLive(_33);
        _33 = _2;
        _30 = determine_if_user_order_is_position_decreasing(move _31, move _32, move _33) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _30) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_38);
        _38 = ((_29 as Continue).0: bool);
        _28 = _38;
        StorageDead(_38);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_13);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_24;
        _43 = &(*_44);
        _41 = PerpMarketMap::<'_>::get_ref(move _42, move _43) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_29);
        goto -> bb405;
    }

    bb8: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _41) -> [return: bb9, unwind: bb432];
    }

    bb9: {
        StorageDead(_41);
        _45 = discriminant(_40);
        switchInt(move _45) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_49);
        _49 = move ((_40 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _891 = const true;
        _39 = move _49;
        StorageDead(_49);
        _896 = discriminant(_40);
        StorageDead(_44);
        StorageDead(_40);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_22;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _2;
        _57 = Len(((*_1).5: [state::user::Order; 32]));
        _58 = Lt(_56, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> [success: bb13, unwind: bb461];
    }

    bb11: {
        StorageLive(_46);
        _46 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb12, unwind: bb462];
    }

    bb12: {
        StorageDead(_48);
        StorageDead(_46);
        _894 = discriminant(_40);
        StorageDead(_44);
        StorageDead(_40);
        goto -> bb404;
    }

    bb13: {
        _55 = &((*_1).5: [state::user::Order; 32])[_56];
        _54 = &(*_55);
        StorageLive(_59);
        _59 = _17;
        StorageLive(_60);
        _60 = _19;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_39;
        _62 = <Ref<'_, PerpMarket> as Deref>::deref(move _63) -> [return: bb14, unwind: bb461];
    }

    bb14: {
        StorageDead(_63);
        _61 = (((*_62).1: state::perp_market::AMM).53: u64);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_39;
        _66 = <Ref<'_, PerpMarket> as Deref>::deref(move _67) -> [return: bb15, unwind: bb461];
    }

    bb15: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = PerpMarket::is_prediction_market(move _65) -> [return: bb16, unwind: bb461];
    }

    bb16: {
        StorageDead(_65);
        _52 = FillMode::get_limit_price(move _53, move _54, move _59, move _60, move _61, move _64) -> [return: bb17, unwind: bb461];
    }

    bb17: {
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb18, unwind: bb461];
    }

    bb18: {
        StorageDead(_52);
        _68 = discriminant(_51);
        switchInt(move _68) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_72);
        _72 = ((_51 as Continue).0: std::option::Option<u64>);
        _50 = _72;
        StorageDead(_72);
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_39;
        _75 = <Ref<'_, PerpMarket> as Deref>::deref(move _76) -> [return: bb22, unwind: bb461];
    }

    bb20: {
        StorageLive(_69);
        _69 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb21, unwind: bb461];
    }

    bb21: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        goto -> bb403;
    }

    bb22: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = PerpMarket::get_open_interest(move _74) -> [return: bb23, unwind: bb461];
    }

    bb23: {
        StorageDead(_74);
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _891 = const false;
        _78 = move _39;
        _77 = std::mem::drop::<Ref<'_, PerpMarket>>(move _78) -> [return: bb24, unwind: bb461];
    }

    bb24: {
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(*_13);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_24;
        _84 = &(*_85);
        _82 = PerpMarketMap::<'_>::get_ref(move _83, move _84) -> [return: bb25, unwind: bb461];
    }

    bb25: {
        StorageDead(_84);
        StorageDead(_83);
        _81 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _82) -> [return: bb26, unwind: bb461];
    }

    bb26: {
        StorageDead(_82);
        _86 = discriminant(_81);
        switchInt(move _86) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_90);
        _90 = move ((_81 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _80 = move _90;
        StorageDead(_90);
        _900 = discriminant(_81);
        StorageDead(_85);
        StorageDead(_81);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &mut (*_14);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_80;
        _100 = <Ref<'_, PerpMarket> as Deref>::deref(move _101) -> [return: bb30, unwind: bb431];
    }

    bb28: {
        StorageLive(_87);
        _87 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb29, unwind: bb459];
    }

    bb29: {
        StorageDead(_89);
        StorageDead(_87);
        _898 = discriminant(_81);
        StorageDead(_85);
        StorageDead(_81);
        goto -> bb401;
    }

    bb30: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = PerpMarket::oracle_id(move _99) -> [return: bb31, unwind: bb431];
    }

    bb31: {
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _94 = OracleMap::<'_>::get_price_data(move _95, move _96) -> [return: bb32, unwind: bb431];
    }

    bb32: {
        StorageDead(_96);
        StorageDead(_95);
        _93 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _94) -> [return: bb33, unwind: bb431];
    }

    bb33: {
        StorageDead(_94);
        _102 = discriminant(_93);
        switchInt(move _102) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_106);
        _106 = ((_93 as Continue).0: &state::oracle::OraclePriceData);
        _92 = _106;
        StorageDead(_106);
        _91 = ((*_92).0: i64);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = _2;
        _112 = Len(((*_1).5: [state::user::Order; 32]));
        _113 = Lt(_111, _112);
        assert(move _113, "index out of bounds: the length is {} but the index is {}", move _112, _111) -> [success: bb37, unwind: bb431];
    }

    bb35: {
        StorageLive(_103);
        _103 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb36, unwind: bb431];
    }

    bb36: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        drop(_80) -> [return: bb401, unwind: bb461];
    }

    bb37: {
        _110 = &((*_1).5: [state::user::Order; 32])[_111];
        _109 = &(*_110);
        StorageLive(_114);
        _114 = &(*_7);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_80;
        _117 = <Ref<'_, PerpMarket> as Deref>::deref(move _118) -> [return: bb38, unwind: bb431];
    }

    bb38: {
        StorageDead(_118);
        _116 = &((*_117).1: state::perp_market::AMM);
        _115 = &(*_116);
        StorageLive(_119);
        _119 = _16;
        StorageLive(_120);
        StorageLive(_121);
        _121 = _91;
        _120 = Option::<i64>::Some(move _121);
        StorageDead(_121);
        StorageLive(_122);
        _122 = _50;
        StorageLive(_123);
        _123 = _21;
        StorageLive(_124);
        _124 = _19;
        StorageLive(_125);
        _125 = _20;
        StorageLive(_126);
        _126 = _22;
        _108 = determine_perp_fulfillment_methods(move _109, move _114, move _115, move _119, move _120, move _122, move _123, move _124, move _125, move _126) -> [return: bb39, unwind: bb431];
    }

    bb39: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_109);
        _107 = <std::result::Result<Vec<PerpFulfillmentMethod>, error::ErrorCode> as Try>::branch(move _108) -> [return: bb40, unwind: bb431];
    }

    bb40: {
        _893 = const true;
        StorageDead(_108);
        _127 = discriminant(_107);
        switchInt(move _127) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_131);
        _131 = move ((_107 as Continue).0: std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>);
        _79 = move _131;
        StorageDead(_131);
        StorageDead(_91);
        drop(_80) -> [return: bb44, unwind: bb458];
    }

    bb42: {
        StorageLive(_128);
        _128 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb43, unwind: bb430];
    }

    bb43: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_91);
        drop(_80) -> [return: bb400, unwind: bb458];
    }

    bb44: {
        StorageDead(_80);
        _902 = discriminant(_107);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_110);
        _893 = const false;
        StorageDead(_107);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_79;
        _133 = Vec::<PerpFulfillmentMethod>::is_empty(move _134) -> [return: bb45, unwind: bb429];
    }

    bb45: {
        switchInt(move _133) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        StorageDead(_134);
        StorageLive(_136);
        _136 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _136);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb399;
    }

    bb47: {
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_137);
        _137 = const 0_u64;
        StorageLive(_138);
        _138 = const 0_u64;
        StorageLive(_139);
        _139 = BTreeMap::<anchor_lang::prelude::Pubkey, i64>::new() -> [return: bb48, unwind: bb429];
    }

    bb48: {
        _890 = const true;
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = _2;
        _143 = Len(((*_1).5: [state::user::Order; 32]));
        _144 = Lt(_142, _143);
        assert(move _144, "index out of bounds: the length is {} but the index is {}", move _143, _142) -> [success: bb49, unwind: bb457];
    }

    bb49: {
        _141 = &(((*_1).5: [state::user::Order; 32])[_142].17: controller::position::PositionDirection);
        _140 = controller::position::PositionDirection::opposite(move _141) -> [return: bb50, unwind: bb457];
    }

    bb50: {
        StorageDead(_141);
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_79;
        _149 = <Vec<PerpFulfillmentMethod> as Deref>::deref(move _150) -> [return: bb51, unwind: bb457];
    }

    bb51: {
        _148 = &(*_149);
        StorageDead(_150);
        _147 = core::slice::<impl [PerpFulfillmentMethod]>::iter(move _148) -> [return: bb52, unwind: bb457];
    }

    bb52: {
        StorageDead(_148);
        _146 = <std::slice::Iter<'_, PerpFulfillmentMethod> as IntoIterator>::into_iter(move _147) -> [return: bb53, unwind: bb457];
    }

    bb53: {
        StorageDead(_147);
        StorageLive(_151);
        _151 = move _146;
        goto -> bb54;
    }

    bb54: {
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &mut _151;
        _155 = &mut (*_156);
        _154 = <std::slice::Iter<'_, PerpFulfillmentMethod> as Iterator>::next(move _155) -> [return: bb55, unwind: bb457];
    }

    bb55: {
        StorageDead(_155);
        _157 = discriminant(_154);
        switchInt(move _157) -> [0: bb57, 1: bb56, otherwise: bb5];
    }

    bb56: {
        StorageLive(_159);
        _159 = ((_154 as Some).0: &state::fulfillment::PerpFulfillmentMethod);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _2;
        _164 = Len(((*_1).5: [state::user::Order; 32]));
        _165 = Lt(_163, _164);
        assert(move _165, "index out of bounds: the length is {} but the index is {}", move _164, _163) -> [success: bb58, unwind: bb457];
    }

    bb57: {
        _145 = const ();
        goto -> bb178;
    }

    bb58: {
        _162 = &(((*_1).5: [state::user::Order; 32])[_163].12: state::user::OrderStatus);
        StorageLive(_166);
        _887 = const _;
        _166 = &(*_887);
        _161 = <OrderStatus as PartialEq>::ne(move _162, move _166) -> [return: bb59, unwind: bb457];
    }

    bb59: {
        switchInt(move _161) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_162);
        _145 = const ();
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb178;
    }

    bb61: {
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_162);
        _160 = const ();
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &(*_13);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_24;
        _173 = &(*_174);
        _171 = PerpMarketMap::<'_>::get_ref_mut(move _172, move _173) -> [return: bb62, unwind: bb457];
    }

    bb62: {
        StorageDead(_173);
        StorageDead(_172);
        _170 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _171) -> [return: bb63, unwind: bb457];
    }

    bb63: {
        StorageDead(_171);
        _175 = discriminant(_170);
        switchInt(move _175) -> [0: bb64, 1: bb65, otherwise: bb5];
    }

    bb64: {
        StorageLive(_179);
        _179 = move ((_170 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _169 = move _179;
        StorageDead(_179);
        _906 = discriminant(_170);
        StorageDead(_174);
        StorageDead(_170);
        StorageLive(_180);
        StorageLive(_181);
        _181 = _2;
        _182 = Len(((*_1).5: [state::user::Order; 32]));
        _183 = Lt(_181, _182);
        assert(move _183, "index out of bounds: the length is {} but the index is {}", move _182, _181) -> [success: bb67, unwind: bb428];
    }

    bb65: {
        StorageLive(_176);
        _176 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb66, unwind: bb455];
    }

    bb66: {
        StorageDead(_178);
        StorageDead(_176);
        _904 = discriminant(_170);
        StorageDead(_174);
        StorageDead(_170);
        goto -> bb396;
    }

    bb67: {
        _180 = (((*_1).5: [state::user::Order; 32])[_181].17: controller::position::PositionDirection);
        StorageDead(_181);
        StorageLive(_186);
        _187 = discriminant((*_159));
        switchInt(move _187) -> [0: bb69, 1: bb68, otherwise: bb5];
    }

    bb68: {
        StorageLive(_296);
        _296 = &(((*_159) as Match).0: anchor_lang::prelude::Pubkey);
        StorageLive(_297);
        _297 = &(((*_159) as Match).1: u16);
        StorageLive(_298);
        _298 = &(((*_159) as Match).2: u64);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &(*_5);
        StorageLive(_303);
        _303 = &(*_296);
        _301 = UserMap::<'_>::get_ref_mut(move _302, move _303) -> [return: bb115, unwind: bb428];
    }

    bb69: {
        StorageLive(_188);
        _188 = &(((*_159) as AMM).0: std::option::Option<u64>);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_11;
        _194 = &(*_195);
        StorageLive(_196);
        _196 = &(*_5);
        StorageLive(_197);
        _197 = &(*_6);
        StorageLive(_198);
        _198 = Option::<&User>::None;
        _193 = get_referrer(move _194, move _196, move _197, move _198) -> [return: bb70, unwind: bb428];
    }

    bb70: {
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_194);
        _192 = <std::result::Result<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode> as Try>::branch(move _193) -> [return: bb71, unwind: bb428];
    }

    bb71: {
        StorageDead(_193);
        _199 = discriminant(_192);
        switchInt(move _199) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        StorageLive(_203);
        _203 = move ((_192 as Continue).0: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>));
        _191 = move _203;
        StorageDead(_203);
        StorageLive(_189);
        _189 = move (_191.0: std::option::Option<std::cell::RefMut<'_, state::user::User>>);
        StorageLive(_190);
        _190 = move (_191.1: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
        _910 = discriminant(_192);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &((*_5).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        StorageLive(_209);
        _209 = &(*_9);
        _207 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::contains_key::<anchor_lang::prelude::Pubkey>(move _208, move _209) -> [return: bb75, unwind: bb426];
    }

    bb73: {
        StorageLive(_200);
        _200 = ((_192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb74, unwind: bb454];
    }

    bb74: {
        StorageDead(_202);
        StorageDead(_200);
        _908 = discriminant(_192);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb393;
    }

    bb75: {
        switchInt(move _207) -> [0: bb97, otherwise: bb76];
    }

    bb76: {
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_8);
        _210 = Option::<&mut User>::is_none(move _211) -> [return: bb77, unwind: bb426];
    }

    bb77: {
        switchInt(move _210) -> [0: bb96, otherwise: bb78];
    }

    bb78: {
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &(*_5);
        StorageLive(_216);
        _216 = &(*_9);
        _214 = UserMap::<'_>::get_ref_mut(move _215, move _216) -> [return: bb79, unwind: bb426];
    }

    bb79: {
        StorageDead(_216);
        StorageDead(_215);
        _213 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _214) -> [return: bb80, unwind: bb426];
    }

    bb80: {
        StorageDead(_214);
        _217 = discriminant(_213);
        switchInt(move _217) -> [0: bb81, 1: bb82, otherwise: bb5];
    }

    bb81: {
        StorageLive(_221);
        _221 = move ((_213 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _888 = const true;
        _212 = move _221;
        StorageDead(_221);
        _914 = discriminant(_213);
        StorageDead(_213);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &_212;
        _224 = <RefMut<'_, User> as Deref>::deref(move _225) -> [return: bb84, unwind: bb425];
    }

    bb82: {
        StorageLive(_218);
        _218 = ((_213 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_220);
        _220 = _218;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _220) -> [return: bb83, unwind: bb453];
    }

    bb83: {
        StorageDead(_220);
        StorageDead(_218);
        _912 = discriminant(_213);
        StorageDead(_213);
        goto -> bb389;
    }

    bb84: {
        StorageDead(_225);
        _223 = &((*_224).0: anchor_lang::prelude::Pubkey);
        StorageLive(_226);
        _226 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _222 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _223, move _226) -> [return: bb85, unwind: bb425];
    }

    bb85: {
        switchInt(move _222) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_227);
        _227 = Option::<RefMut<'_, User>>::None;
        StorageLive(_228);
        _228 = Option::<RefMut<'_, UserStats>>::None;
        _206 = (move _227, move _228);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb94;
    }

    bb87: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &(*_6);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_212;
        _235 = <RefMut<'_, User> as Deref>::deref(move _236) -> [return: bb88, unwind: bb425];
    }

    bb88: {
        StorageDead(_236);
        _234 = &((*_235).0: anchor_lang::prelude::Pubkey);
        _233 = &(*_234);
        _231 = UserStatsMap::<'_>::get_ref_mut(move _232, move _233) -> [return: bb89, unwind: bb425];
    }

    bb89: {
        StorageDead(_233);
        StorageDead(_232);
        _230 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _231) -> [return: bb90, unwind: bb425];
    }

    bb90: {
        StorageDead(_231);
        _237 = discriminant(_230);
        switchInt(move _237) -> [0: bb91, 1: bb92, otherwise: bb5];
    }

    bb91: {
        StorageLive(_241);
        _241 = move ((_230 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _229 = move _241;
        StorageDead(_241);
        _918 = discriminant(_230);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_230);
        StorageLive(_242);
        StorageLive(_243);
        _888 = const false;
        _243 = move _212;
        _242 = Option::<RefMut<'_, User>>::Some(move _243);
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = move _229;
        _244 = Option::<RefMut<'_, UserStats>>::Some(move _245);
        StorageDead(_245);
        _206 = (move _242, move _244);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_229);
        goto -> bb94;
    }

    bb92: {
        StorageLive(_238);
        _238 = ((_230 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_240);
        _240 = _238;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _240) -> [return: bb93, unwind: bb452];
    }

    bb93: {
        StorageDead(_240);
        StorageDead(_238);
        _916 = discriminant(_230);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_222);
        drop(_212) -> [return: bb389, unwind: bb426];
    }

    bb94: {
        StorageDead(_222);
        switchInt(_888) -> [0: bb95, otherwise: bb433];
    }

    bb95: {
        _888 = const false;
        StorageDead(_212);
        goto -> bb99;
    }

    bb96: {
        StorageDead(_211);
        goto -> bb98;
    }

    bb97: {
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb98;
    }

    bb98: {
        StorageLive(_246);
        _246 = Option::<RefMut<'_, User>>::None;
        StorageLive(_247);
        _247 = Option::<RefMut<'_, UserStats>>::None;
        _206 = (move _246, move _247);
        StorageDead(_247);
        StorageDead(_246);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_210);
        StorageDead(_207);
        StorageLive(_204);
        _204 = move (_206.0: std::option::Option<std::cell::RefMut<'_, state::user::User>>);
        StorageLive(_205);
        _205 = move (_206.1: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
        StorageDead(_206);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &mut (*_1);
        StorageLive(_254);
        _254 = &mut (*_4);
        StorageLive(_255);
        _255 = _2;
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &mut _169;
        _257 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _258) -> [return: bb100, unwind: bb423];
    }

    bb100: {
        _256 = &mut (*_257);
        StorageDead(_258);
        StorageLive(_259);
        _259 = &mut (*_14);
        StorageLive(_260);
        _260 = _16;
        StorageLive(_261);
        _261 = _18;
        StorageLive(_262);
        _262 = _19;
        StorageLive(_263);
        _263 = &(*_3);
        StorageLive(_264);
        _264 = &(*_9);
        StorageLive(_265);
        _265 = &mut (*_8);
        StorageLive(_266);
        _266 = &mut (*_10);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &mut _204;
        _269 = Option::<RefMut<'_, User>>::as_deref_mut(move _270) -> [return: bb101, unwind: bb423];
    }

    bb101: {
        StorageDead(_270);
        _268 = &mut _269;
        _267 = &mut (*_268);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &mut _205;
        _273 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _274) -> [return: bb102, unwind: bb423];
    }

    bb102: {
        StorageDead(_274);
        _272 = &mut _273;
        _271 = &mut (*_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &mut _189;
        _277 = Option::<RefMut<'_, User>>::as_deref_mut(move _278) -> [return: bb103, unwind: bb423];
    }

    bb103: {
        StorageDead(_278);
        _276 = &mut _277;
        _275 = &mut (*_276);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &mut _190;
        _281 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _282) -> [return: bb104, unwind: bb423];
    }

    bb104: {
        StorageDead(_282);
        _280 = &mut _281;
        _279 = &mut (*_280);
        StorageLive(_283);
        _283 = &(*_15);
        StorageLive(_284);
        _284 = _50;
        StorageLive(_285);
        _285 = Option::<u64>::None;
        StorageLive(_286);
        _286 = (*_188);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &_22;
        _287 = FillMode::is_liquidation(move _288) -> [return: bb105, unwind: bb423];
    }

    bb105: {
        StorageDead(_288);
        _252 = fulfill_perp_order_with_amm(move _253, move _254, move _255, move _256, move _259, move _260, move _261, move _262, move _263, move _264, move _265, move _266, move _267, move _271, move _275, move _279, move _283, move _284, move _285, move _286, move _287) -> [return: bb106, unwind: bb423];
    }

    bb106: {
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_279);
        StorageDead(_275);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_253);
        _251 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _252) -> [return: bb107, unwind: bb423];
    }

    bb107: {
        StorageDead(_252);
        _289 = discriminant(_251);
        switchInt(move _289) -> [0: bb108, 1: bb109, otherwise: bb5];
    }

    bb108: {
        StorageLive(_293);
        _293 = ((_251 as Continue).0: (u64, u64));
        _250 = _293;
        StorageDead(_293);
        StorageLive(_248);
        _248 = (_250.0: u64);
        StorageLive(_249);
        _249 = (_250.1: u64);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_257);
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_294);
        _294 = _248;
        StorageLive(_295);
        _295 = _249;
        _186 = (move _294, move _295);
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_249);
        StorageDead(_248);
        drop(_205) -> [return: bb111, unwind: bb424];
    }

    bb109: {
        StorageLive(_290);
        _290 = ((_251 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb110, unwind: bb423];
    }

    bb110: {
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_257);
        StorageDead(_251);
        StorageDead(_250);
        drop(_205) -> [return: bb387, unwind: bb424];
    }

    bb111: {
        StorageDead(_205);
        drop(_204) -> [return: bb112, unwind: bb426];
    }

    bb112: {
        StorageDead(_204);
        drop(_190) -> [return: bb113, unwind: bb427];
    }

    bb113: {
        StorageDead(_190);
        drop(_189) -> [return: bb114, unwind: bb428];
    }

    bb114: {
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb160;
    }

    bb115: {
        StorageDead(_303);
        StorageDead(_302);
        _300 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _301) -> [return: bb116, unwind: bb428];
    }

    bb116: {
        StorageDead(_301);
        _304 = discriminant(_300);
        switchInt(move _304) -> [0: bb117, 1: bb118, otherwise: bb5];
    }

    bb117: {
        StorageLive(_308);
        _308 = move ((_300 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _299 = move _308;
        StorageDead(_308);
        _922 = discriminant(_300);
        StorageDead(_300);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_299;
        _312 = <RefMut<'_, User> as Deref>::deref(move _313) -> [return: bb120, unwind: bb422];
    }

    bb118: {
        StorageLive(_305);
        _305 = ((_300 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_307);
        _307 = _305;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _307) -> [return: bb119, unwind: bb451];
    }

    bb119: {
        StorageDead(_307);
        StorageDead(_305);
        _920 = discriminant(_300);
        StorageDead(_300);
        goto -> bb386;
    }

    bb120: {
        StorageDead(_313);
        _311 = &((*_312).0: anchor_lang::prelude::Pubkey);
        StorageLive(_314);
        _314 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _310 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _311, move _314) -> [return: bb121, unwind: bb422];
    }

    bb121: {
        switchInt(move _310) -> [0: bb123, otherwise: bb122];
    }

    bb122: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        _309 = Option::<RefMut<'_, UserStats>>::None;
        goto -> bb130;
    }

    bb123: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &(*_6);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &_299;
        _321 = <RefMut<'_, User> as Deref>::deref(move _322) -> [return: bb124, unwind: bb422];
    }

    bb124: {
        StorageDead(_322);
        _320 = &((*_321).0: anchor_lang::prelude::Pubkey);
        _319 = &(*_320);
        _317 = UserStatsMap::<'_>::get_ref_mut(move _318, move _319) -> [return: bb125, unwind: bb422];
    }

    bb125: {
        StorageDead(_319);
        StorageDead(_318);
        _316 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _317) -> [return: bb126, unwind: bb422];
    }

    bb126: {
        StorageDead(_317);
        _323 = discriminant(_316);
        switchInt(move _323) -> [0: bb127, 1: bb128, otherwise: bb5];
    }

    bb127: {
        StorageLive(_327);
        _327 = move ((_316 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _315 = move _327;
        StorageDead(_327);
        _309 = Option::<RefMut<'_, UserStats>>::Some(move _315);
        StorageDead(_315);
        _926 = discriminant(_316);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_316);
        goto -> bb130;
    }

    bb128: {
        StorageLive(_324);
        _324 = ((_316 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_326);
        _326 = _324;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _326) -> [return: bb129, unwind: bb450];
    }

    bb129: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_315);
        _924 = discriminant(_316);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_316);
        StorageDead(_310);
        goto -> bb385;
    }

    bb130: {
        StorageDead(_310);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &_11;
        _333 = &(*_334);
        StorageLive(_335);
        _335 = &(*_5);
        StorageLive(_336);
        _336 = &(*_6);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_299;
        _340 = &(*_341);
        _339 = <RefMut<'_, User> as Deref>::deref(move _340) -> [return: bb131, unwind: bb421];
    }

    bb131: {
        _338 = &(*_339);
        StorageDead(_340);
        _337 = Option::<&User>::Some(move _338);
        StorageDead(_338);
        _332 = get_referrer(move _333, move _335, move _336, move _337) -> [return: bb132, unwind: bb421];
    }

    bb132: {
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_333);
        _331 = <std::result::Result<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode> as Try>::branch(move _332) -> [return: bb133, unwind: bb421];
    }

    bb133: {
        StorageDead(_332);
        _342 = discriminant(_331);
        switchInt(move _342) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_346);
        _346 = move ((_331 as Continue).0: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>));
        _330 = move _346;
        StorageDead(_346);
        StorageLive(_328);
        _328 = move (_330.0: std::option::Option<std::cell::RefMut<'_, state::user::User>>);
        StorageLive(_329);
        _329 = move (_330.1: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
        _930 = discriminant(_331);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = &mut _169;
        _354 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _355) -> [return: bb137, unwind: bb419];
    }

    bb135: {
        StorageLive(_343);
        _343 = ((_331 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_345);
        _345 = _343;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _345) -> [return: bb136, unwind: bb449];
    }

    bb136: {
        StorageDead(_345);
        StorageDead(_343);
        _928 = discriminant(_331);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_330);
        goto -> bb384;
    }

    bb137: {
        _353 = &mut (*_354);
        StorageDead(_355);
        StorageLive(_356);
        _356 = &mut (*_1);
        StorageLive(_357);
        _357 = &mut (*_4);
        StorageLive(_358);
        _358 = _2;
        StorageLive(_359);
        _359 = &(*_3);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &mut _299;
        _362 = &mut (*_363);
        _361 = <RefMut<'_, User> as DerefMut>::deref_mut(move _362) -> [return: bb138, unwind: bb419];
    }

    bb138: {
        _360 = &mut (*_361);
        StorageDead(_362);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &mut _309;
        _366 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _367) -> [return: bb139, unwind: bb419];
    }

    bb139: {
        StorageDead(_367);
        _365 = &mut _366;
        _364 = &mut (*_365);
        StorageLive(_368);
        StorageLive(_369);
        _369 = (*_297);
        _368 = move _369 as usize (IntToInt);
        StorageDead(_369);
        StorageLive(_370);
        _370 = &(*_296);
        StorageLive(_371);
        _371 = &mut (*_8);
        StorageLive(_372);
        _372 = &mut (*_10);
        StorageLive(_373);
        _373 = &(*_9);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &mut _328;
        _376 = Option::<RefMut<'_, User>>::as_deref_mut(move _377) -> [return: bb140, unwind: bb419];
    }

    bb140: {
        StorageDead(_377);
        _375 = &mut _376;
        _374 = &mut (*_375);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &mut _329;
        _380 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _381) -> [return: bb141, unwind: bb419];
    }

    bb141: {
        StorageDead(_381);
        _379 = &mut _380;
        _378 = &mut (*_379);
        StorageLive(_382);
        _382 = _16;
        StorageLive(_383);
        _383 = _17;
        StorageLive(_384);
        _384 = _50;
        StorageLive(_385);
        _385 = (*_298);
        StorageLive(_386);
        _386 = _18;
        StorageLive(_387);
        _387 = _19;
        StorageLive(_388);
        _388 = &(*_15);
        StorageLive(_389);
        _389 = &mut (*_14);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_22;
        _390 = FillMode::is_liquidation(move _391) -> [return: bb142, unwind: bb419];
    }

    bb142: {
        StorageDead(_391);
        _352 = fulfill_perp_order_with_match(move _353, move _356, move _357, move _358, move _359, move _360, move _364, move _368, move _370, move _371, move _372, move _373, move _374, move _378, move _382, move _383, move _384, move _385, move _386, move _387, move _388, move _389, move _390) -> [return: bb143, unwind: bb419];
    }

    bb143: {
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_378);
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_364);
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_353);
        _351 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as Try>::branch(move _352) -> [return: bb144, unwind: bb419];
    }

    bb144: {
        StorageDead(_352);
        _392 = discriminant(_351);
        switchInt(move _392) -> [0: bb145, 1: bb146, otherwise: bb5];
    }

    bb145: {
        StorageLive(_396);
        _396 = ((_351 as Continue).0: (u64, u64, u64));
        _350 = _396;
        StorageDead(_396);
        StorageLive(_347);
        _347 = (_350.0: u64);
        StorageLive(_348);
        _348 = (_350.1: u64);
        StorageLive(_349);
        _349 = (_350.2: u64);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_354);
        StorageDead(_351);
        StorageDead(_350);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = _349;
        _398 = Ne(move _399, const 0_u64);
        switchInt(move _398) -> [0: bb149, otherwise: bb148];
    }

    bb146: {
        StorageLive(_393);
        _393 = ((_351 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_395);
        _395 = _393;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _395) -> [return: bb147, unwind: bb419];
    }

    bb147: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_354);
        StorageDead(_351);
        StorageDead(_350);
        goto -> bb381;
    }

    bb148: {
        StorageDead(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &mut _139;
        _403 = &mut (*_404);
        StorageLive(_405);
        _405 = &(*_296);
        StorageLive(_406);
        _406 = _140;
        StorageLive(_407);
        _407 = _349;
        _402 = update_maker_fills_map(move _403, move _405, move _406, move _407) -> [return: bb150, unwind: bb419];
    }

    bb149: {
        StorageDead(_399);
        _397 = const ();
        goto -> bb155;
    }

    bb150: {
        StorageDead(_407);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_403);
        _401 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _402) -> [return: bb151, unwind: bb419];
    }

    bb151: {
        StorageDead(_402);
        _408 = discriminant(_401);
        switchInt(move _408) -> [0: bb152, 1: bb153, otherwise: bb5];
    }

    bb152: {
        StorageLive(_412);
        _412 = ((_401 as Continue).0: ());
        _400 = _412;
        StorageDead(_412);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_400);
        _397 = const ();
        goto -> bb155;
    }

    bb153: {
        StorageLive(_409);
        _409 = ((_401 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_411);
        _411 = _409;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _411) -> [return: bb154, unwind: bb419];
    }

    bb154: {
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_347);
        goto -> bb381;
    }

    bb155: {
        StorageDead(_398);
        StorageDead(_397);
        StorageLive(_413);
        _413 = _347;
        StorageLive(_414);
        _414 = _348;
        _186 = (move _413, move _414);
        StorageDead(_414);
        StorageDead(_413);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_347);
        drop(_329) -> [return: bb156, unwind: bb420];
    }

    bb156: {
        StorageDead(_329);
        drop(_328) -> [return: bb157, unwind: bb421];
    }

    bb157: {
        StorageDead(_328);
        drop(_309) -> [return: bb158, unwind: bb422];
    }

    bb158: {
        StorageDead(_309);
        drop(_299) -> [return: bb159, unwind: bb428];
    }

    bb159: {
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_296);
        goto -> bb160;
    }

    bb160: {
        StorageLive(_184);
        _184 = (_186.0: u64);
        StorageLive(_185);
        _185 = (_186.1: u64);
        StorageDead(_186);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = _137;
        StorageLive(_419);
        _419 = _184;
        _417 = <u64 as SafeMath>::safe_add(move _418, move _419) -> [return: bb161, unwind: bb428];
    }

    bb161: {
        StorageDead(_419);
        StorageDead(_418);
        _416 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _417) -> [return: bb162, unwind: bb428];
    }

    bb162: {
        StorageDead(_417);
        _420 = discriminant(_416);
        switchInt(move _420) -> [0: bb163, 1: bb164, otherwise: bb5];
    }

    bb163: {
        StorageLive(_424);
        _424 = ((_416 as Continue).0: u64);
        _415 = _424;
        StorageDead(_424);
        _137 = move _415;
        StorageDead(_415);
        StorageDead(_416);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = _138;
        StorageLive(_429);
        _429 = _185;
        _427 = <u64 as SafeMath>::safe_add(move _428, move _429) -> [return: bb166, unwind: bb428];
    }

    bb164: {
        StorageLive(_421);
        _421 = ((_416 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_423);
        _423 = _421;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _423) -> [return: bb165, unwind: bb428];
    }

    bb165: {
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_415);
        StorageDead(_416);
        goto -> bb380;
    }

    bb166: {
        StorageDead(_429);
        StorageDead(_428);
        _426 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _427) -> [return: bb167, unwind: bb428];
    }

    bb167: {
        StorageDead(_427);
        _430 = discriminant(_426);
        switchInt(move _430) -> [0: bb168, 1: bb169, otherwise: bb5];
    }

    bb168: {
        StorageLive(_434);
        _434 = ((_426 as Continue).0: u64);
        _425 = _434;
        StorageDead(_434);
        _138 = move _425;
        StorageDead(_425);
        StorageDead(_426);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = &mut _169;
        _439 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _440) -> [return: bb171, unwind: bb428];
    }

    bb169: {
        StorageLive(_431);
        _431 = ((_426 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_433);
        _433 = _431;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _433) -> [return: bb170, unwind: bb428];
    }

    bb170: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_425);
        StorageDead(_426);
        goto -> bb380;
    }

    bb171: {
        StorageDead(_440);
        _438 = &mut ((*_439).1: state::perp_market::AMM);
        StorageLive(_441);
        _441 = _185;
        StorageLive(_442);
        _442 = _180;
        StorageLive(_443);
        _443 = _18;
        _437 = AMM::update_volume_24h(move _438, move _441, move _442, move _443) -> [return: bb172, unwind: bb428];
    }

    bb172: {
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_438);
        _436 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _437) -> [return: bb173, unwind: bb428];
    }

    bb173: {
        StorageDead(_437);
        _444 = discriminant(_436);
        switchInt(move _444) -> [0: bb174, 1: bb175, otherwise: bb5];
    }

    bb174: {
        StorageLive(_448);
        _448 = ((_436 as Continue).0: ());
        _435 = _448;
        StorageDead(_448);
        StorageDead(_439);
        StorageDead(_436);
        StorageDead(_435);
        _153 = const ();
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_180);
        drop(_169) -> [return: bb177, unwind: bb457];
    }

    bb175: {
        StorageLive(_445);
        _445 = ((_436 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_447);
        _447 = _445;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _447) -> [return: bb176, unwind: bb428];
    }

    bb176: {
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_439);
        StorageDead(_436);
        StorageDead(_435);
        goto -> bb380;
    }

    bb177: {
        StorageDead(_169);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        _152 = const ();
        goto -> bb54;
    }

    bb178: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = _137;
        _453 = Gt(move _454, const 0_u64);
        StorageDead(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = _138;
        _455 = Gt(move _456, const 0_u64);
        StorageDead(_456);
        _452 = Eq(move _453, move _455);
        switchInt(move _452) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        StorageDead(_455);
        StorageDead(_453);
        StorageLive(_457);
        _457 = ();
        _451 = std::result::Result::<(), error::ErrorCode>::Ok(move _457);
        StorageDead(_457);
        goto -> bb194;
    }

    bb180: {
        StorageDead(_455);
        StorageDead(_453);
        StorageLive(_458);
        _458 = error::ErrorCode::DefaultError;
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _886 = const _;
        _469 = &(*_886);
        _468 = &(*_469);
        _467 = move _468 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_468);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = &_458;
        _476 = &(*_477);
        _475 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _476) -> [return: bb181, unwind: bb457];
    }

    bb181: {
        StorageDead(_476);
        _474 = [move _475];
        StorageDead(_475);
        _473 = &_474;
        _472 = &(*_473);
        _471 = move _472 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_472);
        _466 = Arguments::<'_>::new_v1(move _467, move _471) -> [return: bb182, unwind: bb457];
    }

    bb182: {
        StorageDead(_471);
        StorageDead(_467);
        _465 = format(move _466) -> [return: bb183, unwind: bb457];
    }

    bb183: {
        StorageDead(_466);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_469);
        _464 = move _465;
        StorageDead(_465);
        _463 = &_464;
        _462 = &(*_463);
        _461 = <String as Deref>::deref(move _462) -> [return: bb184, unwind: bb418];
    }

    bb184: {
        _460 = &(*_461);
        StorageDead(_462);
        _459 = solana_program::log::sol_log(move _460) -> [return: bb185, unwind: bb418];
    }

    bb185: {
        StorageDead(_460);
        drop(_464) -> [return: bb186, unwind: bb457];
    }

    bb186: {
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_459);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _885 = const _;
        _488 = &(*_885);
        _487 = &(*_488);
        _486 = move _487 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_487);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _496 = &_137;
        _495 = &(*_496);
        _494 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _495) -> [return: bb187, unwind: bb457];
    }

    bb187: {
        StorageDead(_495);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_138;
        _498 = &(*_499);
        _497 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _498) -> [return: bb188, unwind: bb457];
    }

    bb188: {
        StorageDead(_498);
        _493 = [move _494, move _497];
        StorageDead(_497);
        StorageDead(_494);
        _492 = &_493;
        _491 = &(*_492);
        _490 = move _491 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_491);
        _485 = Arguments::<'_>::new_v1(move _486, move _490) -> [return: bb189, unwind: bb457];
    }

    bb189: {
        StorageDead(_490);
        StorageDead(_486);
        _484 = format(move _485) -> [return: bb190, unwind: bb457];
    }

    bb190: {
        StorageDead(_485);
        StorageDead(_499);
        StorageDead(_496);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_488);
        _483 = move _484;
        StorageDead(_484);
        _482 = &_483;
        _481 = &(*_482);
        _480 = <String as Deref>::deref(move _481) -> [return: bb191, unwind: bb417];
    }

    bb191: {
        _479 = &(*_480);
        StorageDead(_481);
        _478 = solana_program::log::sol_log(move _479) -> [return: bb192, unwind: bb417];
    }

    bb192: {
        StorageDead(_479);
        drop(_483) -> [return: bb193, unwind: bb457];
    }

    bb193: {
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_480);
        StorageDead(_478);
        StorageLive(_500);
        _500 = _458;
        _451 = std::result::Result::<(), error::ErrorCode>::Err(move _500);
        StorageDead(_500);
        StorageDead(_458);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_452);
        _450 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _451) -> [return: bb195, unwind: bb457];
    }

    bb195: {
        StorageDead(_451);
        _501 = discriminant(_450);
        switchInt(move _501) -> [0: bb196, 1: bb197, otherwise: bb5];
    }

    bb196: {
        StorageLive(_505);
        _505 = ((_450 as Continue).0: ());
        _449 = _505;
        StorageDead(_505);
        StorageDead(_450);
        StorageDead(_449);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_139;
        _507 = BTreeMap::<anchor_lang::prelude::Pubkey, i64>::values(move _508) -> [return: bb199, unwind: bb457];
    }

    bb197: {
        StorageLive(_502);
        _502 = ((_450 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_504);
        _504 = _502;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _504) -> [return: bb198, unwind: bb457];
    }

    bb198: {
        StorageDead(_504);
        StorageDead(_502);
        StorageDead(_450);
        StorageDead(_449);
        goto -> bb397;
    }

    bb199: {
        StorageDead(_508);
        _506 = <std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, i64> as Iterator>::sum::<i64>(move _507) -> [return: bb200, unwind: bb457];
    }

    bb200: {
        StorageDead(_507);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = _506;
        _513 = core::num::<impl i64>::unsigned_abs(move _514) -> [return: bb201, unwind: bb457];
    }

    bb201: {
        StorageDead(_514);
        StorageLive(_515);
        _515 = _137;
        _512 = Le(move _513, move _515);
        switchInt(move _512) -> [0: bb203, otherwise: bb202];
    }

    bb202: {
        StorageDead(_515);
        StorageDead(_513);
        StorageLive(_516);
        _516 = ();
        _511 = std::result::Result::<(), error::ErrorCode>::Ok(move _516);
        StorageDead(_516);
        goto -> bb217;
    }

    bb203: {
        StorageDead(_515);
        StorageDead(_513);
        StorageLive(_517);
        _517 = error::ErrorCode::DefaultError;
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _884 = const _;
        _528 = &(*_884);
        _527 = &(*_528);
        _526 = move _527 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_527);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &_517;
        _535 = &(*_536);
        _534 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _535) -> [return: bb204, unwind: bb457];
    }

    bb204: {
        StorageDead(_535);
        _533 = [move _534];
        StorageDead(_534);
        _532 = &_533;
        _531 = &(*_532);
        _530 = move _531 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_531);
        _525 = Arguments::<'_>::new_v1(move _526, move _530) -> [return: bb205, unwind: bb457];
    }

    bb205: {
        StorageDead(_530);
        StorageDead(_526);
        _524 = format(move _525) -> [return: bb206, unwind: bb457];
    }

    bb206: {
        StorageDead(_525);
        StorageDead(_536);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_528);
        _523 = move _524;
        StorageDead(_524);
        _522 = &_523;
        _521 = &(*_522);
        _520 = <String as Deref>::deref(move _521) -> [return: bb207, unwind: bb416];
    }

    bb207: {
        _519 = &(*_520);
        StorageDead(_521);
        _518 = solana_program::log::sol_log(move _519) -> [return: bb208, unwind: bb416];
    }

    bb208: {
        StorageDead(_519);
        drop(_523) -> [return: bb209, unwind: bb457];
    }

    bb209: {
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_518);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _883 = const _;
        _547 = &(*_883);
        _546 = &(*_547);
        _545 = move _546 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_546);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = &_506;
        _554 = &(*_555);
        _553 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _554) -> [return: bb210, unwind: bb457];
    }

    bb210: {
        StorageDead(_554);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &_137;
        _557 = &(*_558);
        _556 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _557) -> [return: bb211, unwind: bb457];
    }

    bb211: {
        StorageDead(_557);
        _552 = [move _553, move _556];
        StorageDead(_556);
        StorageDead(_553);
        _551 = &_552;
        _550 = &(*_551);
        _549 = move _550 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_550);
        _544 = Arguments::<'_>::new_v1(move _545, move _549) -> [return: bb212, unwind: bb457];
    }

    bb212: {
        StorageDead(_549);
        StorageDead(_545);
        _543 = format(move _544) -> [return: bb213, unwind: bb457];
    }

    bb213: {
        StorageDead(_544);
        StorageDead(_558);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_551);
        StorageDead(_547);
        _542 = move _543;
        StorageDead(_543);
        _541 = &_542;
        _540 = &(*_541);
        _539 = <String as Deref>::deref(move _540) -> [return: bb214, unwind: bb415];
    }

    bb214: {
        _538 = &(*_539);
        StorageDead(_540);
        _537 = solana_program::log::sol_log(move _538) -> [return: bb215, unwind: bb415];
    }

    bb215: {
        StorageDead(_538);
        drop(_542) -> [return: bb216, unwind: bb457];
    }

    bb216: {
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_537);
        StorageLive(_559);
        _559 = _517;
        _511 = std::result::Result::<(), error::ErrorCode>::Err(move _559);
        StorageDead(_559);
        StorageDead(_517);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_512);
        _510 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _511) -> [return: bb218, unwind: bb457];
    }

    bb218: {
        StorageDead(_511);
        _560 = discriminant(_510);
        switchInt(move _560) -> [0: bb219, 1: bb220, otherwise: bb5];
    }

    bb219: {
        StorageLive(_564);
        _564 = ((_510 as Continue).0: ());
        _509 = _564;
        StorageDead(_564);
        StorageDead(_510);
        StorageDead(_509);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        _567 = &_22;
        _566 = FillMode::is_liquidation(move _567) -> [return: bb222, unwind: bb457];
    }

    bb220: {
        StorageLive(_561);
        _561 = ((_510 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_563);
        _563 = _561;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _563) -> [return: bb221, unwind: bb457];
    }

    bb221: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_510);
        StorageDead(_509);
        goto -> bb379;
    }

    bb222: {
        switchInt(move _566) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        StorageDead(_567);
        _565 = const ();
        goto -> bb261;
    }

    bb224: {
        StorageDead(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        _570 = &_140;
        StorageLive(_571);
        _882 = const _;
        _571 = &(*_882);
        _569 = <controller::position::PositionDirection as PartialEq>::eq(move _570, move _571) -> [return: bb225, unwind: bb457];
    }

    bb225: {
        switchInt(move _569) -> [0: bb227, otherwise: bb226];
    }

    bb226: {
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_573);
        _573 = _137;
        _568 = move _573 as i64 (IntToInt);
        StorageDead(_573);
        goto -> bb229;
    }

    bb227: {
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_574);
        StorageLive(_575);
        _575 = _137;
        _574 = move _575 as i64 (IntToInt);
        StorageDead(_575);
        _576 = Eq(_574, const i64::MIN);
        assert(!move _576, "attempt to negate `{}`, which would overflow", _574) -> [success: bb228, unwind: bb457];
    }

    bb228: {
        _568 = Neg(move _574);
        StorageDead(_574);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_569);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        _581 = _28;
        switchInt(move _581) -> [0: bb231, otherwise: bb230];
    }

    bb230: {
        _580 = math::margin::MarginRequirementType::Maintenance;
        goto -> bb232;
    }

    bb231: {
        _580 = math::margin::MarginRequirementType::Fill;
        goto -> bb232;
    }

    bb232: {
        StorageDead(_581);
        _579 = MarginContext::standard(move _580) -> [return: bb233, unwind: bb457];
    }

    bb233: {
        StorageDead(_580);
        StorageLive(_582);
        _582 = _24;
        StorageLive(_583);
        _583 = _568;
        _578 = MarginContext::fuel_perp_delta(move _579, move _582, move _583) -> [return: bb234, unwind: bb457];
    }

    bb234: {
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_579);
        StorageLive(_584);
        _584 = &(*_1);
        StorageLive(_585);
        _585 = _18;
        _577 = MarginContext::fuel_numerator(move _578, move _584, move _585) -> [return: bb235, unwind: bb457];
    }

    bb235: {
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_578);
        StorageLive(_586);
        StorageLive(_587);
        _587 = _23;
        switchInt(move _587) -> [0: bb239, otherwise: bb236];
    }

    bb236: {
        StorageLive(_588);
        _588 = _28;
        switchInt(move _588) -> [0: bb237, otherwise: bb239];
    }

    bb237: {
        StorageLive(_589);
        StorageLive(_590);
        _590 = _577;
        _589 = MarginContext::margin_ratio_override(move _590, const _) -> [return: bb238, unwind: bb457];
    }

    bb238: {
        StorageDead(_590);
        _577 = move _589;
        StorageDead(_589);
        _586 = const ();
        goto -> bb240;
    }

    bb239: {
        _586 = const ();
        goto -> bb240;
    }

    bb240: {
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_586);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = &(*_1);
        StorageLive(_595);
        _595 = &(*_13);
        StorageLive(_596);
        _596 = &(*_12);
        StorageLive(_597);
        _597 = &mut (*_14);
        StorageLive(_598);
        _598 = _577;
        _593 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _594, move _595, move _596, move _597, move _598) -> [return: bb241, unwind: bb457];
    }

    bb241: {
        StorageDead(_598);
        StorageDead(_597);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_594);
        _592 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _593) -> [return: bb242, unwind: bb457];
    }

    bb242: {
        StorageDead(_593);
        _599 = discriminant(_592);
        switchInt(move _599) -> [0: bb243, 1: bb244, otherwise: bb5];
    }

    bb243: {
        StorageLive(_603);
        _603 = ((_592 as Continue).0: state::margin_calculation::MarginCalculation);
        _591 = _603;
        StorageDead(_603);
        StorageDead(_592);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        _607 = &mut (*_4);
        StorageLive(_608);
        _608 = &mut (*_1);
        StorageLive(_609);
        _609 = (_591.17: u32);
        StorageLive(_610);
        _610 = (_591.18: u32);
        StorageLive(_611);
        _611 = (_591.19: u32);
        StorageLive(_612);
        _612 = _18;
        _606 = UserStats::update_fuel_bonus(move _607, move _608, move _609, move _610, move _611, move _612) -> [return: bb246, unwind: bb457];
    }

    bb244: {
        StorageLive(_600);
        _600 = ((_592 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_602);
        _602 = _600;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _602) -> [return: bb245, unwind: bb457];
    }

    bb245: {
        StorageDead(_602);
        StorageDead(_600);
        StorageDead(_592);
        goto -> bb378;
    }

    bb246: {
        StorageDead(_612);
        StorageDead(_611);
        StorageDead(_610);
        StorageDead(_609);
        StorageDead(_608);
        StorageDead(_607);
        _605 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _606) -> [return: bb247, unwind: bb457];
    }

    bb247: {
        StorageDead(_606);
        _613 = discriminant(_605);
        switchInt(move _613) -> [0: bb248, 1: bb249, otherwise: bb5];
    }

    bb248: {
        StorageLive(_617);
        _617 = ((_605 as Continue).0: ());
        _604 = _617;
        StorageDead(_617);
        StorageDead(_605);
        StorageDead(_604);
        StorageLive(_618);
        StorageLive(_619);
        _619 = &_591;
        _618 = MarginCalculation::meets_margin_requirement(move _619) -> [return: bb251, unwind: bb457];
    }

    bb249: {
        StorageLive(_614);
        _614 = ((_605 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_616);
        _616 = _614;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _616) -> [return: bb250, unwind: bb457];
    }

    bb250: {
        StorageDead(_616);
        StorageDead(_614);
        StorageDead(_605);
        StorageDead(_604);
        goto -> bb378;
    }

    bb251: {
        switchInt(move _618) -> [0: bb253, otherwise: bb252];
    }

    bb252: {
        StorageDead(_619);
        _565 = const ();
        StorageDead(_618);
        StorageDead(_591);
        StorageDead(_577);
        StorageDead(_568);
        goto -> bb261;
    }

    bb253: {
        StorageDead(_619);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _881 = const _;
        _631 = &(*_881);
        _630 = &(*_631);
        _629 = move _630 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_630);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &(_591.3: u128);
        _638 = &(*_639);
        _637 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _638) -> [return: bb254, unwind: bb457];
    }

    bb254: {
        StorageDead(_638);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &(_591.1: i128);
        _641 = &(*_642);
        _640 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _641) -> [return: bb255, unwind: bb457];
    }

    bb255: {
        StorageDead(_641);
        _636 = [move _637, move _640];
        StorageDead(_640);
        StorageDead(_637);
        _635 = &_636;
        _634 = &(*_635);
        _633 = move _634 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_634);
        _628 = Arguments::<'_>::new_v1(move _629, move _633) -> [return: bb256, unwind: bb457];
    }

    bb256: {
        StorageDead(_633);
        StorageDead(_629);
        _627 = format(move _628) -> [return: bb257, unwind: bb457];
    }

    bb257: {
        StorageDead(_628);
        StorageDead(_642);
        StorageDead(_639);
        StorageDead(_636);
        StorageDead(_635);
        StorageDead(_631);
        _626 = move _627;
        StorageDead(_627);
        _625 = &_626;
        _624 = &(*_625);
        _623 = <String as Deref>::deref(move _624) -> [return: bb258, unwind: bb414];
    }

    bb258: {
        _622 = &(*_623);
        StorageDead(_624);
        _621 = solana_program::log::sol_log(move _622) -> [return: bb259, unwind: bb414];
    }

    bb259: {
        StorageDead(_622);
        drop(_626) -> [return: bb260, unwind: bb457];
    }

    bb260: {
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_621);
        StorageLive(_643);
        _643 = error::ErrorCode::InsufficientCollateral;
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Err(move _643);
        StorageDead(_643);
        StorageDead(_618);
        goto -> bb378;
    }

    bb261: {
        StorageDead(_566);
        StorageDead(_565);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        _890 = const false;
        _646 = move _139;
        _645 = <BTreeMap<anchor_lang::prelude::Pubkey, i64> as IntoIterator>::into_iter(move _646) -> [return: bb262, unwind: bb457];
    }

    bb262: {
        StorageDead(_646);
        StorageLive(_647);
        _647 = move _645;
        goto -> bb263;
    }

    bb263: {
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _651 = &mut _647;
        _650 = &mut (*_651);
        _649 = <std::collections::btree_map::IntoIter<anchor_lang::prelude::Pubkey, i64> as Iterator>::next(move _650) -> [return: bb264, unwind: bb413];
    }

    bb264: {
        StorageDead(_650);
        _652 = discriminant(_649);
        switchInt(move _652) -> [0: bb266, 1: bb265, otherwise: bb5];
    }

    bb265: {
        StorageLive(_654);
        _654 = (((_649 as Some).0: (anchor_lang::prelude::Pubkey, i64)).0: anchor_lang::prelude::Pubkey);
        StorageLive(_655);
        _655 = (((_649 as Some).0: (anchor_lang::prelude::Pubkey, i64)).1: i64);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &(*_5);
        StorageLive(_660);
        StorageLive(_661);
        _661 = &_654;
        _660 = &(*_661);
        _658 = UserMap::<'_>::get_ref_mut(move _659, move _660) -> [return: bb267, unwind: bb413];
    }

    bb266: {
        _644 = const ();
        StorageDead(_651);
        StorageDead(_649);
        StorageDead(_648);
        drop(_647) -> [return: bb345, unwind: bb457];
    }

    bb267: {
        StorageDead(_660);
        StorageDead(_659);
        _657 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _658) -> [return: bb268, unwind: bb413];
    }

    bb268: {
        StorageDead(_658);
        _662 = discriminant(_657);
        switchInt(move _662) -> [0: bb269, 1: bb270, otherwise: bb5];
    }

    bb269: {
        StorageLive(_666);
        _666 = move ((_657 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _656 = move _666;
        StorageDead(_666);
        _934 = discriminant(_657);
        StorageDead(_661);
        StorageDead(_657);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        _671 = &_656;
        _670 = <RefMut<'_, User> as Deref>::deref(move _671) -> [return: bb272, unwind: bb412];
    }

    bb270: {
        StorageLive(_663);
        _663 = ((_657 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_665);
        _665 = _663;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _665) -> [return: bb271, unwind: bb448];
    }

    bb271: {
        StorageDead(_665);
        StorageDead(_663);
        _932 = discriminant(_657);
        StorageDead(_661);
        StorageDead(_657);
        goto -> bb376;
    }

    bb272: {
        StorageDead(_671);
        _669 = &((*_670).0: anchor_lang::prelude::Pubkey);
        StorageLive(_672);
        _672 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _668 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _669, move _672) -> [return: bb273, unwind: bb412];
    }

    bb273: {
        switchInt(move _668) -> [0: bb275, otherwise: bb274];
    }

    bb274: {
        StorageDead(_672);
        StorageDead(_670);
        StorageDead(_669);
        _889 = const true;
        _667 = Option::<RefMut<'_, UserStats>>::None;
        goto -> bb282;
    }

    bb275: {
        StorageDead(_672);
        StorageDead(_670);
        StorageDead(_669);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        _676 = &(*_6);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        _680 = &_656;
        _679 = <RefMut<'_, User> as Deref>::deref(move _680) -> [return: bb276, unwind: bb412];
    }

    bb276: {
        StorageDead(_680);
        _678 = &((*_679).0: anchor_lang::prelude::Pubkey);
        _677 = &(*_678);
        _675 = UserStatsMap::<'_>::get_ref_mut(move _676, move _677) -> [return: bb277, unwind: bb412];
    }

    bb277: {
        StorageDead(_677);
        StorageDead(_676);
        _674 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _675) -> [return: bb278, unwind: bb412];
    }

    bb278: {
        StorageDead(_675);
        _681 = discriminant(_674);
        switchInt(move _681) -> [0: bb279, 1: bb280, otherwise: bb5];
    }

    bb279: {
        StorageLive(_685);
        _685 = move ((_674 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _673 = move _685;
        StorageDead(_685);
        _889 = const true;
        _667 = Option::<RefMut<'_, UserStats>>::Some(move _673);
        StorageDead(_673);
        _938 = discriminant(_674);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_674);
        goto -> bb282;
    }

    bb280: {
        StorageLive(_682);
        _682 = ((_674 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_684);
        _684 = _682;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _684) -> [return: bb281, unwind: bb447];
    }

    bb281: {
        StorageDead(_684);
        StorageDead(_682);
        StorageDead(_673);
        _936 = discriminant(_674);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_674);
        StorageDead(_668);
        goto -> bb375;
    }

    bb282: {
        StorageDead(_668);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = &_656;
        _693 = &(*_694);
        _692 = <RefMut<'_, User> as Deref>::deref(move _693) -> [return: bb283, unwind: bb446];
    }

    bb283: {
        _691 = &(*_692);
        StorageDead(_693);
        StorageLive(_695);
        _695 = _655;
        StorageLive(_696);
        _696 = _24;
        _690 = math::orders::select_margin_type_for_perp_maker(move _691, move _695, move _696) -> [return: bb284, unwind: bb446];
    }

    bb284: {
        StorageDead(_696);
        StorageDead(_695);
        StorageDead(_691);
        _689 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as Try>::branch(move _690) -> [return: bb285, unwind: bb446];
    }

    bb285: {
        StorageDead(_690);
        _697 = discriminant(_689);
        switchInt(move _697) -> [0: bb286, 1: bb287, otherwise: bb5];
    }

    bb286: {
        StorageLive(_701);
        _701 = ((_689 as Continue).0: (math::margin::MarginRequirementType, bool));
        _688 = _701;
        StorageDead(_701);
        StorageLive(_686);
        _686 = (_688.0: math::margin::MarginRequirementType);
        StorageLive(_687);
        _687 = (_688.1: bool);
        StorageDead(_694);
        StorageDead(_692);
        StorageDead(_689);
        StorageDead(_688);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        _705 = _686;
        _704 = MarginContext::standard(move _705) -> [return: bb289, unwind: bb446];
    }

    bb287: {
        StorageLive(_698);
        _698 = ((_689 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_700);
        _700 = _698;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _700) -> [return: bb288, unwind: bb446];
    }

    bb288: {
        StorageDead(_700);
        StorageDead(_698);
        StorageDead(_694);
        StorageDead(_692);
        StorageDead(_689);
        StorageDead(_688);
        goto -> bb440;
    }

    bb289: {
        StorageDead(_705);
        StorageLive(_706);
        _706 = _24;
        StorageLive(_707);
        StorageLive(_708);
        _708 = _655;
        _709 = Eq(_708, const i64::MIN);
        assert(!move _709, "attempt to negate `{}`, which would overflow", _708) -> [success: bb290, unwind: bb446];
    }

    bb290: {
        _707 = Neg(move _708);
        StorageDead(_708);
        _703 = MarginContext::fuel_perp_delta(move _704, move _706, move _707) -> [return: bb291, unwind: bb446];
    }

    bb291: {
        StorageDead(_707);
        StorageDead(_706);
        StorageDead(_704);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        _713 = &_656;
        _712 = &(*_713);
        _711 = <RefMut<'_, User> as Deref>::deref(move _712) -> [return: bb292, unwind: bb446];
    }

    bb292: {
        _710 = &(*_711);
        StorageDead(_712);
        StorageLive(_714);
        _714 = _18;
        _702 = MarginContext::fuel_numerator(move _703, move _710, move _714) -> [return: bb293, unwind: bb446];
    }

    bb293: {
        StorageDead(_714);
        StorageDead(_710);
        StorageDead(_703);
        StorageDead(_713);
        StorageDead(_711);
        StorageLive(_715);
        StorageLive(_716);
        _716 = _23;
        switchInt(move _716) -> [0: bb314, otherwise: bb294];
    }

    bb294: {
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        _720 = _28;
        switchInt(move _720) -> [0: bb295, otherwise: bb296];
    }

    bb295: {
        StorageLive(_721);
        _721 = _687;
        switchInt(move _721) -> [0: bb296, otherwise: bb297];
    }

    bb296: {
        StorageLive(_722);
        _722 = ();
        _719 = std::result::Result::<(), error::ErrorCode>::Ok(move _722);
        StorageDead(_722);
        goto -> bb305;
    }

    bb297: {
        StorageLive(_723);
        _723 = error::ErrorCode::InvalidOracle;
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        _879 = const _;
        _734 = &(*_879);
        _733 = &(*_734);
        _732 = move _733 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_733);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        _742 = &_723;
        _741 = &(*_742);
        _740 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _741) -> [return: bb298, unwind: bb446];
    }

    bb298: {
        StorageDead(_741);
        _739 = [move _740];
        StorageDead(_740);
        _738 = &_739;
        _737 = &(*_738);
        _736 = move _737 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_737);
        _731 = Arguments::<'_>::new_v1(move _732, move _736) -> [return: bb299, unwind: bb446];
    }

    bb299: {
        StorageDead(_736);
        StorageDead(_732);
        _730 = format(move _731) -> [return: bb300, unwind: bb446];
    }

    bb300: {
        StorageDead(_731);
        StorageDead(_742);
        StorageDead(_739);
        StorageDead(_738);
        StorageDead(_734);
        _729 = move _730;
        StorageDead(_730);
        _728 = &_729;
        _727 = &(*_728);
        _726 = <String as Deref>::deref(move _727) -> [return: bb301, unwind: bb411];
    }

    bb301: {
        _725 = &(*_726);
        StorageDead(_727);
        _724 = solana_program::log::sol_log(move _725) -> [return: bb302, unwind: bb411];
    }

    bb302: {
        StorageDead(_725);
        drop(_729) -> [return: bb303, unwind: bb446];
    }

    bb303: {
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_726);
        StorageDead(_724);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        _745 = const "taker or maker must be reducing position if oracle stale for margin";
        _744 = &(*_745);
        _743 = solana_program::log::sol_log(move _744) -> [return: bb304, unwind: bb446];
    }

    bb304: {
        StorageDead(_744);
        StorageDead(_745);
        StorageDead(_743);
        StorageLive(_746);
        _746 = _723;
        _719 = std::result::Result::<(), error::ErrorCode>::Err(move _746);
        StorageDead(_746);
        StorageDead(_723);
        goto -> bb305;
    }

    bb305: {
        StorageDead(_721);
        StorageDead(_720);
        _718 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _719) -> [return: bb306, unwind: bb446];
    }

    bb306: {
        StorageDead(_719);
        _747 = discriminant(_718);
        switchInt(move _747) -> [0: bb307, 1: bb308, otherwise: bb5];
    }

    bb307: {
        StorageLive(_751);
        _751 = ((_718 as Continue).0: ());
        _717 = _751;
        StorageDead(_751);
        StorageDead(_718);
        StorageDead(_717);
        StorageLive(_752);
        _752 = _687;
        switchInt(move _752) -> [0: bb311, otherwise: bb310];
    }

    bb308: {
        StorageLive(_748);
        _748 = ((_718 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_750);
        _750 = _748;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _750) -> [return: bb309, unwind: bb446];
    }

    bb309: {
        StorageDead(_750);
        StorageDead(_748);
        StorageDead(_718);
        StorageDead(_717);
        StorageDead(_716);
        StorageDead(_715);
        goto -> bb374;
    }

    bb310: {
        StorageLive(_753);
        StorageLive(_754);
        _754 = _702;
        _753 = MarginContext::margin_ratio_override(move _754, const _) -> [return: bb312, unwind: bb446];
    }

    bb311: {
        _715 = const ();
        goto -> bb313;
    }

    bb312: {
        StorageDead(_754);
        _702 = move _753;
        StorageDead(_753);
        _715 = const ();
        goto -> bb313;
    }

    bb313: {
        StorageDead(_752);
        goto -> bb315;
    }

    bb314: {
        _715 = const ();
        goto -> bb315;
    }

    bb315: {
        StorageDead(_716);
        StorageDead(_715);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _761 = &_656;
        _760 = &(*_761);
        _759 = <RefMut<'_, User> as Deref>::deref(move _760) -> [return: bb316, unwind: bb446];
    }

    bb316: {
        _758 = &(*_759);
        StorageDead(_760);
        StorageLive(_762);
        _762 = &(*_13);
        StorageLive(_763);
        _763 = &(*_12);
        StorageLive(_764);
        _764 = &mut (*_14);
        StorageLive(_765);
        _765 = _702;
        _757 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _758, move _762, move _763, move _764, move _765) -> [return: bb317, unwind: bb446];
    }

    bb317: {
        StorageDead(_765);
        StorageDead(_764);
        StorageDead(_763);
        StorageDead(_762);
        StorageDead(_758);
        _756 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _757) -> [return: bb318, unwind: bb446];
    }

    bb318: {
        StorageDead(_757);
        _766 = discriminant(_756);
        switchInt(move _766) -> [0: bb319, 1: bb320, otherwise: bb5];
    }

    bb319: {
        StorageLive(_770);
        _770 = ((_756 as Continue).0: state::margin_calculation::MarginCalculation);
        _755 = _770;
        StorageDead(_770);
        StorageDead(_761);
        StorageDead(_759);
        StorageDead(_756);
        StorageLive(_771);
        _772 = discriminant(_667);
        switchInt(move _772) -> [1: bb323, otherwise: bb322];
    }

    bb320: {
        StorageLive(_767);
        _767 = ((_756 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_769);
        _769 = _767;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _769) -> [return: bb321, unwind: bb446];
    }

    bb321: {
        StorageDead(_769);
        StorageDead(_767);
        StorageDead(_761);
        StorageDead(_759);
        StorageDead(_756);
        goto -> bb373;
    }

    bb322: {
        _771 = const ();
        goto -> bb332;
    }

    bb323: {
        StorageLive(_773);
        _889 = const false;
        _773 = move ((_667 as Some).0: std::cell::RefMut<'_, state::user::UserStats>);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        _779 = &mut _773;
        _778 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _779) -> [return: bb324, unwind: bb410];
    }

    bb324: {
        _777 = &mut (*_778);
        StorageDead(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        _783 = &mut _656;
        _782 = &mut (*_783);
        _781 = <RefMut<'_, User> as DerefMut>::deref_mut(move _782) -> [return: bb325, unwind: bb410];
    }

    bb325: {
        _780 = &mut (*_781);
        StorageDead(_782);
        StorageLive(_784);
        _784 = (_755.17: u32);
        StorageLive(_785);
        _785 = (_755.18: u32);
        StorageLive(_786);
        _786 = (_755.19: u32);
        StorageLive(_787);
        _787 = _18;
        _776 = UserStats::update_fuel_bonus(move _777, move _780, move _784, move _785, move _786, move _787) -> [return: bb326, unwind: bb410];
    }

    bb326: {
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_784);
        StorageDead(_780);
        StorageDead(_777);
        _775 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _776) -> [return: bb327, unwind: bb410];
    }

    bb327: {
        StorageDead(_776);
        _788 = discriminant(_775);
        switchInt(move _788) -> [0: bb328, 1: bb329, otherwise: bb5];
    }

    bb328: {
        StorageLive(_792);
        _792 = ((_775 as Continue).0: ());
        _774 = _792;
        StorageDead(_792);
        StorageDead(_783);
        StorageDead(_781);
        StorageDead(_778);
        StorageDead(_775);
        StorageDead(_774);
        _771 = const ();
        drop(_773) -> [return: bb331, unwind: bb446];
    }

    bb329: {
        StorageLive(_789);
        _789 = ((_775 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_791);
        _791 = _789;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _791) -> [return: bb330, unwind: bb410];
    }

    bb330: {
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_783);
        StorageDead(_781);
        StorageDead(_778);
        StorageDead(_775);
        StorageDead(_774);
        drop(_773) -> [return: bb372, unwind: bb446];
    }

    bb331: {
        StorageDead(_773);
        goto -> bb332;
    }

    bb332: {
        StorageDead(_771);
        StorageLive(_793);
        StorageLive(_794);
        _794 = &_755;
        _793 = MarginCalculation::meets_margin_requirement(move _794) -> [return: bb333, unwind: bb446];
    }

    bb333: {
        switchInt(move _793) -> [0: bb335, otherwise: bb334];
    }

    bb334: {
        StorageDead(_794);
        _648 = const ();
        StorageDead(_793);
        StorageDead(_755);
        StorageDead(_702);
        StorageDead(_687);
        StorageDead(_686);
        _940 = discriminant(_667);
        switchInt(move _940) -> [1: bb435, otherwise: bb434];
    }

    bb335: {
        StorageDead(_794);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        _878 = const _;
        _806 = &(*_878);
        _805 = &(*_806);
        _804 = move _805 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_805);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        _814 = &_654;
        _813 = &(*_814);
        _812 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _813) -> [return: bb336, unwind: bb446];
    }

    bb336: {
        StorageDead(_813);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        _817 = &(_755.3: u128);
        _816 = &(*_817);
        _815 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _816) -> [return: bb337, unwind: bb446];
    }

    bb337: {
        StorageDead(_816);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        _820 = &(_755.1: i128);
        _819 = &(*_820);
        _818 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _819) -> [return: bb338, unwind: bb446];
    }

    bb338: {
        StorageDead(_819);
        _811 = [move _812, move _815, move _818];
        StorageDead(_818);
        StorageDead(_815);
        StorageDead(_812);
        _810 = &_811;
        _809 = &(*_810);
        _808 = move _809 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_809);
        _803 = Arguments::<'_>::new_v1(move _804, move _808) -> [return: bb339, unwind: bb446];
    }

    bb339: {
        StorageDead(_808);
        StorageDead(_804);
        _802 = format(move _803) -> [return: bb340, unwind: bb446];
    }

    bb340: {
        StorageDead(_803);
        StorageDead(_820);
        StorageDead(_817);
        StorageDead(_814);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_806);
        _801 = move _802;
        StorageDead(_802);
        _800 = &_801;
        _799 = &(*_800);
        _798 = <String as Deref>::deref(move _799) -> [return: bb341, unwind: bb409];
    }

    bb341: {
        _797 = &(*_798);
        StorageDead(_799);
        _796 = solana_program::log::sol_log(move _797) -> [return: bb342, unwind: bb409];
    }

    bb342: {
        StorageDead(_797);
        drop(_801) -> [return: bb343, unwind: bb446];
    }

    bb343: {
        StorageDead(_801);
        StorageDead(_800);
        StorageDead(_798);
        StorageDead(_796);
        StorageLive(_821);
        _821 = error::ErrorCode::InsufficientCollateral;
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Err(move _821);
        StorageDead(_821);
        StorageDead(_793);
        goto -> bb373;
    }

    bb344: {
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_651);
        StorageDead(_649);
        StorageDead(_648);
        _152 = const ();
        goto -> bb263;
    }

    bb345: {
        StorageDead(_647);
        StorageDead(_645);
        StorageDead(_644);
        StorageLive(_822);
        StorageLive(_823);
        _823 = _23;
        switchInt(move _823) -> [0: bb368, otherwise: bb346];
    }

    bb346: {
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        _831 = &(*_13);
        StorageLive(_832);
        StorageLive(_833);
        _833 = &_24;
        _832 = &(*_833);
        _830 = PerpMarketMap::<'_>::get_ref(move _831, move _832) -> [return: bb347, unwind: bb457];
    }

    bb347: {
        StorageDead(_832);
        StorageDead(_831);
        _829 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _830) -> [return: bb348, unwind: bb457];
    }

    bb348: {
        _892 = const true;
        StorageDead(_830);
        _834 = discriminant(_829);
        switchInt(move _834) -> [0: bb349, 1: bb350, otherwise: bb5];
    }

    bb349: {
        StorageLive(_838);
        _838 = move ((_829 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _828 = move _838;
        StorageDead(_838);
        _827 = &_828;
        _826 = <Ref<'_, PerpMarket> as Deref>::deref(move _827) -> [return: bb352, unwind: bb408];
    }

    bb350: {
        StorageLive(_835);
        _835 = ((_829 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_837);
        _837 = _835;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _837) -> [return: bb351, unwind: bb443];
    }

    bb351: {
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_827);
        StorageDead(_825);
        _942 = discriminant(_829);
        StorageDead(_833);
        _892 = const false;
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_826);
        goto -> bb371;
    }

    bb352: {
        _825 = &(*_826);
        StorageDead(_827);
        _824 = PerpMarket::get_open_interest(move _825) -> [return: bb353, unwind: bb408];
    }

    bb353: {
        StorageDead(_825);
        drop(_828) -> [return: bb437, unwind: bb443];
    }

    bb354: {
        StorageDead(_844);
        StorageDead(_843);
        StorageLive(_845);
        _845 = ();
        _841 = std::result::Result::<(), error::ErrorCode>::Ok(move _845);
        StorageDead(_845);
        goto -> bb363;
    }

    bb355: {
        StorageDead(_844);
        StorageDead(_843);
        StorageLive(_846);
        _846 = error::ErrorCode::InvalidOracle;
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        _880 = const _;
        _857 = &(*_880);
        _856 = &(*_857);
        _855 = move _856 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_856);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        _865 = &_846;
        _864 = &(*_865);
        _863 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _864) -> [return: bb356, unwind: bb457];
    }

    bb356: {
        StorageDead(_864);
        _862 = [move _863];
        StorageDead(_863);
        _861 = &_862;
        _860 = &(*_861);
        _859 = move _860 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_860);
        _854 = Arguments::<'_>::new_v1(move _855, move _859) -> [return: bb357, unwind: bb457];
    }

    bb357: {
        StorageDead(_859);
        StorageDead(_855);
        _853 = format(move _854) -> [return: bb358, unwind: bb457];
    }

    bb358: {
        StorageDead(_854);
        StorageDead(_865);
        StorageDead(_862);
        StorageDead(_861);
        StorageDead(_857);
        _852 = move _853;
        StorageDead(_853);
        _851 = &_852;
        _850 = &(*_851);
        _849 = <String as Deref>::deref(move _850) -> [return: bb359, unwind: bb407];
    }

    bb359: {
        _848 = &(*_849);
        StorageDead(_850);
        _847 = solana_program::log::sol_log(move _848) -> [return: bb360, unwind: bb407];
    }

    bb360: {
        StorageDead(_848);
        drop(_852) -> [return: bb361, unwind: bb457];
    }

    bb361: {
        StorageDead(_852);
        StorageDead(_851);
        StorageDead(_849);
        StorageDead(_847);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        _868 = const "oracle stale for margin but open interest increased";
        _867 = &(*_868);
        _866 = solana_program::log::sol_log(move _867) -> [return: bb362, unwind: bb457];
    }

    bb362: {
        StorageDead(_867);
        StorageDead(_868);
        StorageDead(_866);
        StorageLive(_869);
        _869 = _846;
        _841 = std::result::Result::<(), error::ErrorCode>::Err(move _869);
        StorageDead(_869);
        StorageDead(_846);
        goto -> bb363;
    }

    bb363: {
        StorageDead(_842);
        _840 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _841) -> [return: bb364, unwind: bb457];
    }

    bb364: {
        StorageDead(_841);
        _870 = discriminant(_840);
        switchInt(move _870) -> [0: bb365, 1: bb366, otherwise: bb5];
    }

    bb365: {
        StorageLive(_874);
        _874 = ((_840 as Continue).0: ());
        _839 = _874;
        StorageDead(_874);
        StorageDead(_840);
        StorageDead(_839);
        _822 = const ();
        StorageDead(_824);
        goto -> bb369;
    }

    bb366: {
        StorageLive(_871);
        _871 = ((_840 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_873);
        _873 = _871;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _873) -> [return: bb367, unwind: bb457];
    }

    bb367: {
        StorageDead(_873);
        StorageDead(_871);
        StorageDead(_840);
        StorageDead(_839);
        goto -> bb371;
    }

    bb368: {
        _822 = const ();
        goto -> bb369;
    }

    bb369: {
        StorageDead(_823);
        StorageDead(_822);
        StorageLive(_875);
        StorageLive(_876);
        _876 = _137;
        StorageLive(_877);
        _877 = _138;
        _875 = (move _876, move _877);
        StorageDead(_877);
        StorageDead(_876);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _875);
        StorageDead(_875);
        StorageDead(_506);
        StorageDead(_140);
        _890 = const false;
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        drop(_79) -> [return: bb370, unwind: bb461];
    }

    bb370: {
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_50);
        _891 = const false;
        StorageDead(_39);
        StorageDead(_28);
        StorageDead(_24);
        goto -> bb406;
    }

    bb371: {
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        goto -> bb379;
    }

    bb372: {
        StorageDead(_773);
        StorageDead(_771);
        goto -> bb373;
    }

    bb373: {
        StorageDead(_755);
        goto -> bb374;
    }

    bb374: {
        StorageDead(_702);
        StorageDead(_687);
        StorageDead(_686);
        goto -> bb440;
    }

    bb375: {
        _889 = const false;
        StorageDead(_667);
        drop(_656) -> [return: bb376, unwind: bb413];
    }

    bb376: {
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_651);
        StorageDead(_649);
        StorageDead(_648);
        drop(_647) -> [return: bb377, unwind: bb457];
    }

    bb377: {
        StorageDead(_647);
        StorageDead(_645);
        StorageDead(_644);
        goto -> bb379;
    }

    bb378: {
        StorageDead(_591);
        StorageDead(_577);
        StorageDead(_568);
        StorageDead(_566);
        StorageDead(_565);
        goto -> bb379;
    }

    bb379: {
        StorageDead(_506);
        goto -> bb397;
    }

    bb380: {
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb395;
    }

    bb381: {
        drop(_329) -> [return: bb382, unwind: bb420];
    }

    bb382: {
        StorageDead(_329);
        drop(_328) -> [return: bb383, unwind: bb421];
    }

    bb383: {
        StorageDead(_328);
        goto -> bb384;
    }

    bb384: {
        drop(_309) -> [return: bb385, unwind: bb422];
    }

    bb385: {
        StorageDead(_309);
        drop(_299) -> [return: bb386, unwind: bb428];
    }

    bb386: {
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_296);
        goto -> bb394;
    }

    bb387: {
        StorageDead(_205);
        drop(_204) -> [return: bb388, unwind: bb426];
    }

    bb388: {
        StorageDead(_204);
        goto -> bb390;
    }

    bb389: {
        _888 = const false;
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb390;
    }

    bb390: {
        drop(_190) -> [return: bb391, unwind: bb427];
    }

    bb391: {
        StorageDead(_190);
        drop(_189) -> [return: bb392, unwind: bb428];
    }

    bb392: {
        StorageDead(_189);
        goto -> bb393;
    }

    bb393: {
        StorageDead(_188);
        goto -> bb394;
    }

    bb394: {
        StorageDead(_186);
        goto -> bb395;
    }

    bb395: {
        StorageDead(_180);
        drop(_169) -> [return: bb396, unwind: bb457];
    }

    bb396: {
        StorageDead(_169);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb397;
    }

    bb397: {
        StorageDead(_140);
        switchInt(_890) -> [0: bb398, otherwise: bb441];
    }

    bb398: {
        _890 = const false;
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb399;
    }

    bb399: {
        drop(_79) -> [return: bb402, unwind: bb461];
    }

    bb400: {
        StorageDead(_80);
        _948 = discriminant(_107);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_110);
        _893 = const false;
        StorageDead(_107);
        goto -> bb402;
    }

    bb401: {
        StorageDead(_80);
        goto -> bb402;
    }

    bb402: {
        StorageDead(_79);
        StorageDead(_73);
        goto -> bb403;
    }

    bb403: {
        StorageDead(_50);
        switchInt(_891) -> [0: bb404, otherwise: bb442];
    }

    bb404: {
        _891 = const false;
        StorageDead(_39);
        goto -> bb405;
    }

    bb405: {
        StorageDead(_28);
        StorageDead(_24);
        goto -> bb406;
    }

    bb406: {
        return;
    }

    bb407 (cleanup): {
        drop(_852) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb408 (cleanup): {
        drop(_828) -> [return: bb443, unwind terminate(cleanup)];
    }

    bb409 (cleanup): {
        drop(_801) -> [return: bb446, unwind terminate(cleanup)];
    }

    bb410 (cleanup): {
        drop(_773) -> [return: bb446, unwind terminate(cleanup)];
    }

    bb411 (cleanup): {
        drop(_729) -> [return: bb446, unwind terminate(cleanup)];
    }

    bb412 (cleanup): {
        drop(_656) -> [return: bb413, unwind terminate(cleanup)];
    }

    bb413 (cleanup): {
        drop(_647) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb414 (cleanup): {
        drop(_626) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb415 (cleanup): {
        drop(_542) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb416 (cleanup): {
        drop(_523) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb417 (cleanup): {
        drop(_483) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb418 (cleanup): {
        drop(_464) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb419 (cleanup): {
        drop(_329) -> [return: bb420, unwind terminate(cleanup)];
    }

    bb420 (cleanup): {
        drop(_328) -> [return: bb421, unwind terminate(cleanup)];
    }

    bb421 (cleanup): {
        drop(_309) -> [return: bb422, unwind terminate(cleanup)];
    }

    bb422 (cleanup): {
        drop(_299) -> [return: bb428, unwind terminate(cleanup)];
    }

    bb423 (cleanup): {
        drop(_205) -> [return: bb424, unwind terminate(cleanup)];
    }

    bb424 (cleanup): {
        drop(_204) -> [return: bb426, unwind terminate(cleanup)];
    }

    bb425 (cleanup): {
        drop(_212) -> [return: bb426, unwind terminate(cleanup)];
    }

    bb426 (cleanup): {
        drop(_190) -> [return: bb427, unwind terminate(cleanup)];
    }

    bb427 (cleanup): {
        drop(_189) -> [return: bb428, unwind terminate(cleanup)];
    }

    bb428 (cleanup): {
        drop(_169) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb429 (cleanup): {
        drop(_79) -> [return: bb461, unwind terminate(cleanup)];
    }

    bb430 (cleanup): {
        drop(_80) -> [return: bb458, unwind terminate(cleanup)];
    }

    bb431 (cleanup): {
        drop(_80) -> [return: bb461, unwind terminate(cleanup)];
    }

    bb432 (cleanup): {
        resume;
    }

    bb433: {
        drop(_212) -> [return: bb95, unwind: bb426];
    }

    bb434: {
        _889 = const false;
        StorageDead(_667);
        drop(_656) -> [return: bb344, unwind: bb413];
    }

    bb435: {
        switchInt(_889) -> [0: bb434, otherwise: bb436];
    }

    bb436: {
        drop(((_667 as Some).0: std::cell::RefMut<'_, state::user::UserStats>)) -> [return: bb434, unwind: bb412];
    }

    bb437: {
        _944 = discriminant(_829);
        StorageDead(_833);
        _892 = const false;
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_826);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        _843 = _824;
        StorageLive(_844);
        _844 = _73;
        _842 = Le(move _843, move _844);
        switchInt(move _842) -> [0: bb355, otherwise: bb354];
    }

    bb438: {
        switchInt(_889) -> [0: bb375, otherwise: bb439];
    }

    bb439: {
        drop(((_667 as Some).0: std::cell::RefMut<'_, state::user::UserStats>)) -> [return: bb375, unwind: bb412];
    }

    bb440: {
        _946 = discriminant(_667);
        switchInt(move _946) -> [1: bb438, otherwise: bb375];
    }

    bb441: {
        drop(_139) -> [return: bb398, unwind: bb429];
    }

    bb442: {
        drop(_39) -> [return: bb404, unwind: bb432];
    }

    bb443 (cleanup): {
        _950 = discriminant(_829);
        goto -> bb457;
    }

    bb444 (cleanup): {
        switchInt(_889) -> [0: bb412, otherwise: bb445];
    }

    bb445 (cleanup): {
        drop(((_667 as Some).0: std::cell::RefMut<'_, state::user::UserStats>)) -> [return: bb412, unwind terminate(cleanup)];
    }

    bb446 (cleanup): {
        _951 = discriminant(_667);
        switchInt(move _951) -> [1: bb444, otherwise: bb412];
    }

    bb447 (cleanup): {
        _952 = discriminant(_674);
        goto -> bb412;
    }

    bb448 (cleanup): {
        _953 = discriminant(_657);
        goto -> bb413;
    }

    bb449 (cleanup): {
        _955 = discriminant(_331);
        goto -> bb421;
    }

    bb450 (cleanup): {
        _956 = discriminant(_316);
        goto -> bb422;
    }

    bb451 (cleanup): {
        _957 = discriminant(_300);
        goto -> bb428;
    }

    bb452 (cleanup): {
        _958 = discriminant(_230);
        goto -> bb425;
    }

    bb453 (cleanup): {
        _959 = discriminant(_213);
        goto -> bb426;
    }

    bb454 (cleanup): {
        _961 = discriminant(_192);
        goto -> bb428;
    }

    bb455 (cleanup): {
        _962 = discriminant(_170);
        goto -> bb457;
    }

    bb456 (cleanup): {
        drop(_139) -> [return: bb429, unwind terminate(cleanup)];
    }

    bb457 (cleanup): {
        switchInt(_890) -> [0: bb429, otherwise: bb456];
    }

    bb458 (cleanup): {
        _963 = discriminant(_107);
        goto -> bb461;
    }

    bb459 (cleanup): {
        _964 = discriminant(_81);
        goto -> bb461;
    }

    bb460 (cleanup): {
        drop(_39) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb461 (cleanup): {
        switchInt(_891) -> [0: bb432, otherwise: bb460];
    }

    bb462 (cleanup): {
        _965 = discriminant(_40);
        goto -> bb432;
    }
}
