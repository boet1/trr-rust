// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:913:53: 913:60>::default` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:913:53: 913:60>::default() -> order_params::ModifyOrderParams {
    let mut _0: state::order_params::ModifyOrderParams;
    let mut _1: std::option::Option<controller::position::PositionDirection>;
    let mut _2: std::option::Option<u64>;
    let mut _3: std::option::Option<u64>;
    let mut _4: std::option::Option<bool>;
    let mut _5: std::option::Option<state::order_params::PostOnlyParam>;
    let mut _6: std::option::Option<u8>;
    let mut _7: std::option::Option<i64>;
    let mut _8: std::option::Option<u64>;
    let mut _9: std::option::Option<state::user::OrderTriggerCondition>;
    let mut _10: std::option::Option<i32>;
    let mut _11: std::option::Option<u8>;
    let mut _12: std::option::Option<i64>;
    let mut _13: std::option::Option<i64>;
    let mut _14: std::option::Option<u8>;

    bb0: {
        StorageLive(_1);
        _1 = <Option<controller::position::PositionDirection> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <Option<u64> as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <Option<u64> as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <Option<bool> as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <Option<PostOnlyParam> as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <Option<u8> as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <Option<i64> as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <Option<u64> as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <Option<OrderTriggerCondition> as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <Option<i32> as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <Option<u8> as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_12);
        _12 = <Option<i64> as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_13);
        _13 = <Option<i64> as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageLive(_14);
        _14 = <Option<u8> as Default>::default() -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = order_params::ModifyOrderParams { direction: move _1, base_asset_amount: move _2, price: move _3, reduce_only: move _4, post_only: move _5, bit_flags: move _6, max_ts: move _7, trigger_price: move _8, trigger_condition: move _9, oracle_price_offset: move _10, auction_duration: move _11, auction_start_price: move _12, auction_end_price: move _13, policy: move _14 };
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
