// MIR for `keeper::<impl at programs/drift/src/instructions/keeper.rs:3458:10: 3458:18>::try_accounts` after PreCodegen

fn keeper::<impl at programs/drift/src/instructions/keeper.rs:3458:10: 3458:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut ResolvePerpPnlDeficitBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolvePerpPnlDeficitBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolvePerpPnlDeficitBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolvePerpPnlDeficitBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolvePerpPnlDeficitBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _22: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::keeper::ResolvePerpPnlDeficitBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _37: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::keeper::ResolvePerpPnlDeficitBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::keeper::ResolvePerpPnlDeficitBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _67: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::keeper::ResolvePerpPnlDeficitBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::keeper::ResolvePerpPnlDeficitBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _97: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::keeper::ResolvePerpPnlDeficitBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: (anchor_lang::prelude::Pubkey, u8);
    let mut _113: &[&[u8]];
    let mut _114: &[&[u8]; 2];
    let _115: &[&[u8]; 2];
    let _116: [&[u8]; 2];
    let mut _117: &[u8];
    let _118: &[u8];
    let mut _119: &[u8; 17];
    let _120: &[u8; 17];
    let mut _121: &[u8];
    let _122: &[u8];
    let mut _123: &[u8; 2];
    let _124: [u8; 2];
    let mut _125: u16;
    let mut _126: &anchor_lang::prelude::Pubkey;
    let _127: &&anchor_lang::prelude::Pubkey;
    let mut _128: u8;
    let _129: ();
    let mut _130: bool;
    let mut _131: &anchor_lang::prelude::Pubkey;
    let _132: anchor_lang::prelude::Pubkey;
    let mut _133: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _134: &anchor_lang::prelude::Pubkey;
    let mut _135: !;
    let mut _136: anchor_lang::error::Error;
    let mut _137: anchor_lang::error::Error;
    let mut _138: anchor_lang::error::Error;
    let mut _139: anchor_lang::error::ErrorCode;
    let mut _140: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _141: anchor_lang::prelude::Pubkey;
    let mut _142: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _143: anchor_lang::prelude::Pubkey;
    let _144: ();
    let mut _145: bool;
    let mut _146: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _147: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _148: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _149: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _150: !;
    let mut _151: anchor_lang::error::Error;
    let mut _152: anchor_lang::error::Error;
    let mut _153: anchor_lang::error::ErrorCode;
    let mut _156: (anchor_lang::prelude::Pubkey, u8);
    let mut _157: &[&[u8]];
    let mut _158: &[&[u8]; 2];
    let _159: &[&[u8]; 2];
    let _160: [&[u8]; 2];
    let mut _161: &[u8];
    let _162: &[u8];
    let mut _163: &[u8; 20];
    let _164: &[u8; 20];
    let mut _165: &[u8];
    let _166: &[u8];
    let mut _167: &[u8; 2];
    let _168: [u8; 2];
    let mut _169: u16;
    let mut _170: &anchor_lang::prelude::Pubkey;
    let _171: &&anchor_lang::prelude::Pubkey;
    let mut _172: u8;
    let _173: ();
    let mut _174: bool;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let _176: anchor_lang::prelude::Pubkey;
    let mut _177: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _178: &anchor_lang::prelude::Pubkey;
    let mut _179: !;
    let mut _180: anchor_lang::error::Error;
    let mut _181: anchor_lang::error::Error;
    let mut _182: anchor_lang::error::Error;
    let mut _183: anchor_lang::error::ErrorCode;
    let mut _184: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _185: anchor_lang::prelude::Pubkey;
    let mut _186: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _187: anchor_lang::prelude::Pubkey;
    let _188: ();
    let mut _189: bool;
    let mut _190: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _192: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _193: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _194: !;
    let mut _195: anchor_lang::error::Error;
    let mut _196: anchor_lang::error::Error;
    let mut _197: anchor_lang::error::ErrorCode;
    let _198: ();
    let mut _199: bool;
    let mut _200: &anchor_lang::prelude::Pubkey;
    let _201: &state::state::State;
    let mut _202: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _203: &anchor_lang::prelude::Pubkey;
    let _204: &anchor_lang::prelude::Pubkey;
    let _205: anchor_lang::prelude::Pubkey;
    let mut _206: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _207: !;
    let mut _208: anchor_lang::error::Error;
    let mut _209: anchor_lang::error::Error;
    let mut _210: anchor_lang::error::ErrorCode;
    let mut _211: instructions::keeper::ResolvePerpPnlDeficit<'_>;
    let mut _212: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _213: anchor_lang::prelude::Signer<'_>;
    let mut _214: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _215: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _216: anchor_lang::prelude::AccountInfo<'_>;
    let mut _217: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _218: &anchor_lang::prelude::Pubkey;
    let mut _219: &anchor_lang::prelude::Pubkey;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _253: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _254: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _255: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _256: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolvePerpPnlDeficitBumps>>::try_accounts::__Args;
        scope 2 {
            debug spot_market_index => _7;
            let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _20;
                let _35: anchor_lang::prelude::Signer<'_>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug authority => _35;
                    let _50: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                    scope 17 {
                        debug spot_market_vault => _50;
                        let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        scope 22 {
                            debug insurance_fund_vault => _65;
                            let _80: anchor_lang::prelude::AccountInfo<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::AccountInfo<'_>;
                            scope 27 {
                                debug drift_signer => _80;
                                let _95: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                scope 32 {
                                    debug token_program => _95;
                                    let _110: anchor_lang::prelude::Pubkey;
                                    let _111: u8;
                                    scope 37 {
                                        debug __pda_address => _110;
                                        debug __bump => _111;
                                        let _154: anchor_lang::prelude::Pubkey;
                                        let _155: u8;
                                        scope 38 {
                                            debug __pda_address => _154;
                                            debug __bump => _155;
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _106;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _109;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _221 = const false;
        _220 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, ResolvePerpPnlDeficitBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _10 = std::result::Result::<<keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, ResolvePerpPnlDeficitBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _11, move _14) -> [return: bb2, unwind: bb101];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, ResolvePerpPnlDeficitBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::keeper::ResolvePerpPnlDeficit<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolvePerpPnlDeficitBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, ResolvePerpPnlDeficitBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb95;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _22 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _23, move _29) -> [return: bb9, unwind: bb101];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb101];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _20 = move _34;
        StorageDead(_34);
        _222 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, ResolvePerpPnlDeficitBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind: bb100];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb111];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _244 = discriminant(_21);
        StorageDead(_21);
        goto -> bb94;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _37 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _38, move _44) -> [return: bb15, unwind: bb100];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb100];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _35 = move _49;
        StorageDead(_49);
        _224 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, ResolvePerpPnlDeficitBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind: bb100];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb110];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _242 = discriminant(_36);
        StorageDead(_36);
        goto -> bb93;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _53, move _59) -> [return: bb21, unwind: bb100];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb100];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _50 = move _64;
        StorageDead(_64);
        _226 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, ResolvePerpPnlDeficitBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb99];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb109];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _240 = discriminant(_51);
        StorageDead(_51);
        goto -> bb92;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _67 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _68, move _74) -> [return: bb27, unwind: bb99];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb99];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _65 = move _79;
        StorageDead(_79);
        _228 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, ResolvePerpPnlDeficitBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb98];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _238 = discriminant(_66);
        StorageDead(_66);
        goto -> bb91;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _82 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _83, move _89) -> [return: bb33, unwind: bb98];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb98];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _80 = move _94;
        StorageDead(_94);
        _230 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, ResolvePerpPnlDeficitBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb97];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb107];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _236 = discriminant(_81);
        StorageDead(_81);
        goto -> bb90;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18};
        _97 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3458:10: 3458:18}>(move _98, move _104) -> [return: bb39, unwind: bb97];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _95 = move _109;
        StorageDead(_109);
        _232 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = const b"spot_market_vault";
        _119 = &(*_120);
        _118 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _119) -> [return: bb44, unwind: bb97];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb106];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _234 = discriminant(_96);
        StorageDead(_96);
        goto -> bb89;
    }

    bb44: {
        _117 = &(*_118);
        StorageDead(_119);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _7;
        _124 = core::num::<impl u16>::to_le_bytes(move _125) -> [return: bb45, unwind: bb97];
    }

    bb45: {
        _123 = &_124;
        StorageDead(_125);
        _122 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _123) -> [return: bb46, unwind: bb97];
    }

    bb46: {
        _121 = &(*_122);
        StorageDead(_123);
        _116 = [move _117, move _121];
        StorageDead(_121);
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = move _114 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_114);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_1;
        _218 = deref_copy (*_127);
        _126 = &(*_218);
        _112 = anchor_lang::prelude::Pubkey::find_program_address(move _113, move _126) -> [return: bb47, unwind: bb97];
    }

    bb47: {
        StorageDead(_126);
        StorageDead(_113);
        StorageLive(_110);
        _110 = (_112.0: anchor_lang::prelude::Pubkey);
        StorageLive(_111);
        _111 = (_112.1: u8);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_112);
        StorageLive(_128);
        _128 = _111;
        ((*_4).0: u8) = move _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _252 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _133 = &(*_252);
        _132 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _133) -> [return: bb48, unwind: bb97];
    }

    bb48: {
        _131 = &_132;
        StorageDead(_133);
        StorageLive(_134);
        _134 = &_110;
        _130 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _131, move _134) -> [return: bb49, unwind: bb97];
    }

    bb49: {
        switchInt(move _130) -> [0: bb55, otherwise: bb50];
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = ConstraintSeeds;
        _138 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _139) -> [return: bb51, unwind: bb97];
    }

    bb51: {
        StorageDead(_139);
        _137 = anchor_lang::error::Error::with_account_name::<&str>(move _138, const "spot_market_vault") -> [return: bb52, unwind: bb97];
    }

    bb52: {
        _221 = const true;
        StorageDead(_138);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _253 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _142 = &(*_253);
        _141 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _142) -> [return: bb53, unwind: bb105];
    }

    bb53: {
        StorageDead(_142);
        StorageLive(_143);
        _143 = _110;
        _140 = (move _141, move _143);
        StorageDead(_143);
        StorageDead(_141);
        _221 = const false;
        _136 = anchor_lang::error::Error::with_pubkeys(move _137, move _140) -> [return: bb54, unwind: bb105];
    }

    bb54: {
        StorageDead(_140);
        _221 = const false;
        StorageDead(_137);
        _0 = std::result::Result::<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>::Err(move _136);
        StorageDead(_136);
        StorageDead(_130);
        StorageDead(_129);
        goto -> bb88;
    }

    bb55: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        _129 = const ();
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_50;
        _148 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _149) -> [return: bb56, unwind: bb97];
    }

    bb56: {
        _147 = &(*_148);
        StorageDead(_149);
        _146 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _147) -> [return: bb57, unwind: bb97];
    }

    bb57: {
        StorageDead(_147);
        _145 = ((*_146).6: bool);
        switchInt(move _145) -> [0: bb58, otherwise: bb61];
    }

    bb58: {
        StorageDead(_148);
        StorageDead(_146);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = ConstraintMut;
        _152 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _153) -> [return: bb59, unwind: bb97];
    }

    bb59: {
        StorageDead(_153);
        _151 = anchor_lang::error::Error::with_account_name::<&str>(move _152, const "spot_market_vault") -> [return: bb60, unwind: bb97];
    }

    bb60: {
        StorageDead(_152);
        _0 = std::result::Result::<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>::Err(move _151);
        StorageDead(_151);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb88;
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_146);
        _144 = const ();
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = const b"insurance_fund_vault";
        _163 = &(*_164);
        _162 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _163) -> [return: bb62, unwind: bb97];
    }

    bb62: {
        _161 = &(*_162);
        StorageDead(_163);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = _7;
        _168 = core::num::<impl u16>::to_le_bytes(move _169) -> [return: bb63, unwind: bb97];
    }

    bb63: {
        _167 = &_168;
        StorageDead(_169);
        _166 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _167) -> [return: bb64, unwind: bb97];
    }

    bb64: {
        _165 = &(*_166);
        StorageDead(_167);
        _160 = [move _161, move _165];
        StorageDead(_165);
        StorageDead(_161);
        _159 = &_160;
        _158 = &(*_159);
        _157 = move _158 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_158);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &_1;
        _219 = deref_copy (*_171);
        _170 = &(*_219);
        _156 = anchor_lang::prelude::Pubkey::find_program_address(move _157, move _170) -> [return: bb65, unwind: bb97];
    }

    bb65: {
        StorageDead(_170);
        StorageDead(_157);
        StorageLive(_154);
        _154 = (_156.0: anchor_lang::prelude::Pubkey);
        StorageLive(_155);
        _155 = (_156.1: u8);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_156);
        StorageLive(_172);
        _172 = _155;
        ((*_4).1: u8) = move _172;
        StorageDead(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _254 = (((_65.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _177 = &(*_254);
        _176 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _177) -> [return: bb66, unwind: bb97];
    }

    bb66: {
        _175 = &_176;
        StorageDead(_177);
        StorageLive(_178);
        _178 = &_154;
        _174 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _175, move _178) -> [return: bb67, unwind: bb97];
    }

    bb67: {
        switchInt(move _174) -> [0: bb73, otherwise: bb68];
    }

    bb68: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = ConstraintSeeds;
        _182 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _183) -> [return: bb69, unwind: bb97];
    }

    bb69: {
        StorageDead(_183);
        _181 = anchor_lang::error::Error::with_account_name::<&str>(move _182, const "insurance_fund_vault") -> [return: bb70, unwind: bb97];
    }

    bb70: {
        _220 = const true;
        StorageDead(_182);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _255 = (((_65.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _186 = &(*_255);
        _185 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _186) -> [return: bb71, unwind: bb103];
    }

    bb71: {
        StorageDead(_186);
        StorageLive(_187);
        _187 = _154;
        _184 = (move _185, move _187);
        StorageDead(_187);
        StorageDead(_185);
        _220 = const false;
        _180 = anchor_lang::error::Error::with_pubkeys(move _181, move _184) -> [return: bb72, unwind: bb103];
    }

    bb72: {
        StorageDead(_184);
        _220 = const false;
        StorageDead(_181);
        _0 = std::result::Result::<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>::Err(move _180);
        StorageDead(_180);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb87;
    }

    bb73: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        _173 = const ();
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &_65;
        _192 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _193) -> [return: bb74, unwind: bb97];
    }

    bb74: {
        _191 = &(*_192);
        StorageDead(_193);
        _190 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _191) -> [return: bb75, unwind: bb97];
    }

    bb75: {
        StorageDead(_191);
        _189 = ((*_190).6: bool);
        switchInt(move _189) -> [0: bb76, otherwise: bb79];
    }

    bb76: {
        StorageDead(_192);
        StorageDead(_190);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ConstraintMut;
        _196 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _197) -> [return: bb77, unwind: bb97];
    }

    bb77: {
        StorageDead(_197);
        _195 = anchor_lang::error::Error::with_account_name::<&str>(move _196, const "insurance_fund_vault") -> [return: bb78, unwind: bb97];
    }

    bb78: {
        StorageDead(_196);
        _0 = std::result::Result::<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>::Err(move _195);
        StorageDead(_195);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb87;
    }

    bb79: {
        StorageDead(_192);
        StorageDead(_190);
        _188 = const ();
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _256 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _202 = &(*_256);
        _201 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _202) -> [return: bb80, unwind: bb97];
    }

    bb80: {
        StorageDead(_202);
        _200 = &((*_201).3: anchor_lang::prelude::Pubkey);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_80;
        _205 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _206) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _199 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _200, move _203) -> [return: bb82, unwind: bb97];
    }

    bb82: {
        switchInt(move _199) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_201);
        _198 = const ();
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_211);
        StorageLive(_212);
        _212 = move _20;
        StorageLive(_213);
        _213 = move _35;
        StorageLive(_214);
        _214 = move _50;
        StorageLive(_215);
        _215 = move _65;
        StorageLive(_216);
        _216 = move _80;
        StorageLive(_217);
        _217 = move _95;
        _211 = keeper::ResolvePerpPnlDeficit::<'_> { state: move _212, authority: move _213, spot_market_vault: move _214, insurance_fund_vault: move _215, drift_signer: move _216, token_program: move _217 };
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        _0 = std::result::Result::<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>::Ok(move _211);
        StorageDead(_211);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb96;
    }

    bb84: {
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_201);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = ConstraintRaw;
        _209 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _210) -> [return: bb85, unwind: bb97];
    }

    bb85: {
        StorageDead(_210);
        _208 = anchor_lang::error::Error::with_account_name::<&str>(move _209, const "drift_signer") -> [return: bb86, unwind: bb97];
    }

    bb86: {
        StorageDead(_209);
        _0 = std::result::Result::<keeper::ResolvePerpPnlDeficit<'_>, anchor_lang::error::Error>::Err(move _208);
        StorageDead(_208);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_95);
        drop(_80) -> [return: bb90, unwind: bb98];
    }

    bb90: {
        StorageDead(_80);
        drop(_65) -> [return: bb91, unwind: bb99];
    }

    bb91: {
        StorageDead(_65);
        drop(_50) -> [return: bb92, unwind: bb100];
    }

    bb92: {
        StorageDead(_50);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_35);
        drop(_20) -> [return: bb94, unwind: bb101];
    }

    bb94: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_6);
        goto -> bb96;
    }

    bb96: {
        return;
    }

    bb97 (cleanup): {
        drop(_80) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_65) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_50) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_20) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        resume;
    }

    bb102 (cleanup): {
        drop(_181) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_220) -> [0: bb97, otherwise: bb102];
    }

    bb104 (cleanup): {
        drop(_137) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_221) -> [0: bb97, otherwise: bb104];
    }

    bb106 (cleanup): {
        _246 = discriminant(_96);
        goto -> bb97;
    }

    bb107 (cleanup): {
        _247 = discriminant(_81);
        goto -> bb98;
    }

    bb108 (cleanup): {
        _248 = discriminant(_66);
        goto -> bb99;
    }

    bb109 (cleanup): {
        _249 = discriminant(_51);
        goto -> bb100;
    }

    bb110 (cleanup): {
        _250 = discriminant(_36);
        goto -> bb100;
    }

    bb111 (cleanup): {
        _251 = discriminant(_21);
        goto -> bb101;
    }
}

alloc273 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc272 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}
