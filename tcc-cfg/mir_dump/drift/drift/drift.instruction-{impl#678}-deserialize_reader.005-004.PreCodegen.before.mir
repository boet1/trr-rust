// MIR for `instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader` before PreCodegen

fn instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader(_1: &mut R) -> std::result::Result<UpdateSpotMarketFuel, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<instruction::UpdateSpotMarketFuel, std::io::Error>;
    let mut _2: instruction::UpdateSpotMarketFuel;
    let mut _3: std::option::Option<u8>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::option::Option<u8>>;
    let mut _5: std::result::Result<std::option::Option<u8>, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: std::option::Option<u8>;
    let mut _12: std::option::Option<u8>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::option::Option<u8>>;
    let mut _14: std::result::Result<std::option::Option<u8>, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: std::option::Option<u8>;
    let mut _21: std::option::Option<u8>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::option::Option<u8>>;
    let mut _23: std::result::Result<std::option::Option<u8>, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: std::option::Option<u8>;
    let mut _30: std::option::Option<u8>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::option::Option<u8>>;
    let mut _32: std::result::Result<std::option::Option<u8>, std::io::Error>;
    let mut _33: &mut R;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _38: std::option::Option<u8>;
    let mut _39: std::option::Option<u8>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::option::Option<u8>>;
    let mut _41: std::result::Result<std::option::Option<u8>, std::io::Error>;
    let mut _42: &mut R;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _47: std::option::Option<u8>;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _44;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _47;
        scope 20 {
        }
    }

    bb0: {
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <Option<u8> as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Option<u8>, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        _51 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: std::option::Option<u8>);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <Option<u8> as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb37];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<UpdateSpotMarketFuel, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<Option<u8>, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _50 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: std::option::Option<u8>);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <Option<u8> as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb36];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<UpdateSpotMarketFuel, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb31;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<Option<u8>, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _49 = const true;
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: std::option::Option<u8>);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        _32 = <Option<u8> as BorshDeserialize>::deserialize_reader::<R>(move _33) -> [return: bb17, unwind: bb35];
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<UpdateSpotMarketFuel, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb30;
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<Option<u8>, std::io::Error> as Try>::branch(move _32) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _48 = const true;
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: std::option::Option<u8>);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_1);
        _41 = <Option<u8> as BorshDeserialize>::deserialize_reader::<R>(move _42) -> [return: bb22, unwind: bb34];
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<UpdateSpotMarketFuel, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _37) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<Option<u8>, std::io::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: std::option::Option<u8>);
        _39 = _47;
        StorageDead(_47);
        _2 = UpdateSpotMarketFuel { fuel_boost_deposits: move _3, fuel_boost_borrows: move _12, fuel_boost_taker: move _21, fuel_boost_maker: move _30, fuel_boost_insurance: move _39 };
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<UpdateSpotMarketFuel, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _52 = discriminant(_40);
        StorageDead(_40);
        _54 = discriminant(_31);
        _48 = const false;
        StorageDead(_31);
        _56 = discriminant(_22);
        _49 = const false;
        StorageDead(_22);
        _58 = discriminant(_13);
        _50 = const false;
        StorageDead(_13);
        _60 = discriminant(_4);
        _51 = const false;
        StorageDead(_4);
        goto -> bb27;
    }

    bb25: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<UpdateSpotMarketFuel, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        _62 = discriminant(_40);
        StorageDead(_40);
        goto -> bb29;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29: {
        _64 = discriminant(_31);
        _48 = const false;
        StorageDead(_31);
        goto -> bb30;
    }

    bb30: {
        _66 = discriminant(_22);
        _49 = const false;
        StorageDead(_22);
        goto -> bb31;
    }

    bb31: {
        _68 = discriminant(_13);
        _50 = const false;
        StorageDead(_13);
        goto -> bb32;
    }

    bb32: {
        _70 = discriminant(_4);
        _51 = const false;
        StorageDead(_4);
        goto -> bb27;
    }

    bb33 (cleanup): {
        _72 = discriminant(_40);
        goto -> bb34;
    }

    bb34 (cleanup): {
        _73 = discriminant(_31);
        goto -> bb35;
    }

    bb35 (cleanup): {
        _74 = discriminant(_22);
        goto -> bb36;
    }

    bb36 (cleanup): {
        _75 = discriminant(_13);
        goto -> bb37;
    }

    bb37 (cleanup): {
        _76 = discriminant(_4);
        goto -> bb28;
    }
}
