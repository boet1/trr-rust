// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:255:1: 255:49>::invoke_new_order` before PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:255:1: 255:49>::invoke_new_order(_1: &OpenbookV2FulfillmentParams<'_, '_>, _2: Vec<u8>) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug data => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _4: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _5: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 16]>;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: *mut u8;
    let mut _9: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 16]>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let mut _12: anchor_lang::prelude::AccountMeta;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: anchor_lang::prelude::AccountMeta;
    let mut _15: anchor_lang::prelude::Pubkey;
    let mut _16: anchor_lang::prelude::AccountMeta;
    let mut _17: anchor_lang::prelude::Pubkey;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let mut _20: anchor_lang::prelude::AccountMeta;
    let mut _21: anchor_lang::prelude::Pubkey;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: anchor_lang::prelude::AccountMeta;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: anchor_lang::prelude::AccountMeta;
    let mut _27: anchor_lang::prelude::Pubkey;
    let mut _28: anchor_lang::prelude::AccountMeta;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _31: anchor_lang::prelude::AccountMeta;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _34: anchor_lang::prelude::AccountMeta;
    let mut _35: anchor_lang::prelude::Pubkey;
    let mut _36: anchor_lang::prelude::AccountMeta;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: anchor_lang::prelude::AccountMeta;
    let mut _39: anchor_lang::prelude::Pubkey;
    let mut _40: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _42: anchor_lang::prelude::AccountMeta;
    let mut _43: anchor_lang::prelude::Pubkey;
    let mut _44: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _45: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _46: anchor_lang::prelude::AccountMeta;
    let mut _47: anchor_lang::prelude::Pubkey;
    let mut _49: std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>]>;
    let mut _50: std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>; 17]>;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: *mut u8;
    let mut _54: std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>; 17]>;
    let mut _55: anchor_lang::prelude::AccountInfo<'_>;
    let mut _56: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _57: anchor_lang::prelude::AccountInfo<'_>;
    let mut _58: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _59: anchor_lang::prelude::AccountInfo<'_>;
    let mut _60: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _61: anchor_lang::prelude::AccountInfo<'_>;
    let mut _62: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _63: anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _65: anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _67: anchor_lang::prelude::AccountInfo<'_>;
    let mut _68: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _69: anchor_lang::prelude::AccountInfo<'_>;
    let mut _70: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _71: anchor_lang::prelude::AccountInfo<'_>;
    let mut _72: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _73: anchor_lang::prelude::AccountInfo<'_>;
    let mut _74: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _75: anchor_lang::prelude::AccountInfo<'_>;
    let mut _76: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _77: anchor_lang::prelude::AccountInfo<'_>;
    let mut _78: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _79: anchor_lang::prelude::AccountInfo<'_>;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _81: anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _85: anchor_lang::prelude::AccountInfo<'_>;
    let mut _86: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _87: anchor_lang::prelude::AccountInfo<'_>;
    let mut _88: &anchor_lang::prelude::AccountInfo<'_>;
    let _89: ();
    let mut _90: std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _91: std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _92: &[anchor_lang::prelude::UncheckedAccount<'_>];
    let _93: &[anchor_lang::prelude::UncheckedAccount<'_>];
    let mut _94: &std::vec::Vec<anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _96: ();
    let _97: ();
    let mut _98: std::option::Option<&anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _99: &mut std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _100: &mut std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _101: isize;
    let mut _102: !;
    let _104: ();
    let mut _105: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _106: anchor_lang::prelude::AccountMeta;
    let mut _107: anchor_lang::prelude::Pubkey;
    let mut _108: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _109: &anchor_lang::prelude::UncheckedAccount<'_>;
    let _110: ();
    let mut _111: &mut std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _112: anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: &anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _115: anchor_lang::prelude::Pubkey;
    let mut _116: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _117: std::vec::Vec<u8>;
    let mut _119: &u8;
    let _120: &u8;
    let _122: [&[&[u8]]; 1];
    let mut _123: &[&[u8]];
    let _124: &[&[u8]];
    let mut _125: &[&[u8]; 2];
    let mut _126: std::ops::RangeFull;
    let _127: ();
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _129: std::result::Result<(), error::ErrorCode>;
    let mut _130: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _131: &solana_program::instruction::Instruction;
    let _132: &solana_program::instruction::Instruction;
    let mut _133: &[anchor_lang::prelude::AccountInfo<'_>];
    let _134: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _135: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _136: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _137: &[&[&[u8]]];
    let mut _138: &[&[&[u8]]; 1];
    let mut _139: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:311:18: 311:21};
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _145: ();
    let mut _146: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _147: &anchor_lang::prelude::Pubkey;
    let mut _148: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _149: &anchor_lang::prelude::Pubkey;
    let mut _150: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _151: &anchor_lang::prelude::Pubkey;
    let mut _152: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _153: &anchor_lang::prelude::Pubkey;
    let mut _154: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _155: &anchor_lang::prelude::Pubkey;
    let mut _156: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _157: &anchor_lang::prelude::Pubkey;
    let mut _158: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let mut _160: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _161: &anchor_lang::prelude::Pubkey;
    let mut _162: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _163: &anchor_lang::prelude::Pubkey;
    let mut _164: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _165: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _166: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _167: &anchor_lang::prelude::Pubkey;
    let mut _168: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _169: &anchor_lang::prelude::Pubkey;
    let mut _170: &anchor_lang::prelude::Pubkey;
    let mut _171: &anchor_lang::prelude::Pubkey;
    let mut _172: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _173: &anchor_lang::prelude::Pubkey;
    let mut _174: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _175: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _177: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _178: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _179: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _180: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _181: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _182: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _183: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _184: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _185: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _186: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _187: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _188: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &anchor_lang::prelude::Pubkey;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: &mut std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>; 17]>;
    let mut _195: ();
    let mut _196: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _197: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _198: *const [anchor_lang::prelude::AccountMeta; 16];
    let mut _199: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _200: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _201: *const [anchor_lang::prelude::AccountInfo<'_>; 17];
    let mut _208: *const ();
    let mut _209: usize;
    let mut _210: usize;
    let mut _211: usize;
    let mut _212: usize;
    let mut _213: bool;
    scope 1 {
        debug accounts => _3;
        let mut _48: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
        let mut _202: *const ();
        let mut _203: usize;
        let mut _204: usize;
        let mut _205: usize;
        let mut _206: usize;
        let mut _207: bool;
        scope 3 {
            debug account_infos => _48;
            let mut _95: std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>>;
            let _114: solana_program::instruction::Instruction;
            scope 5 {
                debug iter => _95;
                let _103: &anchor_lang::prelude::UncheckedAccount<'_>;
                scope 6 {
                    debug unchecked_account => _103;
                }
            }
            scope 7 {
                debug new_place_take_order_instruction => _114;
                let _118: [&[u8]; 2];
                scope 8 {
                    debug signer_seeds => _118;
                    let _121: &[&[&[u8]]; 1];
                    scope 9 {
                        debug signers_seeds => _121;
                        let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _144: ();
                        scope 10 {
                            debug residual => _141;
                            scope 11 {
                            }
                        }
                        scope 12 {
                            debug val => _144;
                            scope 13 {
                            }
                        }
                    }
                }
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _193 = const false;
        _192 = const false;
        _193 = const true;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _6 = SizeOf([anchor_lang::prelude::AccountMeta; 16]);
        _7 = AlignOf([anchor_lang::prelude::AccountMeta; 16]);
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> [return: bb1, unwind: bb93];
    }

    bb1: {
        StorageLive(_9);
        _9 = ShallowInitBox(move _8, [anchor_lang::prelude::AccountMeta; 16]);
        StorageLive(_10);
        StorageLive(_11);
        _146 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _147 = deref_copy ((*_146).0: &anchor_lang::prelude::Pubkey);
        _11 = (*_147);
        _10 = anchor_lang::prelude::AccountMeta::new(move _11, const true) -> [return: bb2, unwind: bb87];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _148 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _149 = deref_copy ((*_148).0: &anchor_lang::prelude::Pubkey);
        _13 = (*_149);
        _12 = anchor_lang::prelude::AccountMeta::new(move _13, const true) -> [return: bb3, unwind: bb87];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _150 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).1: &anchor_lang::prelude::AccountInfo<'_>);
        _151 = deref_copy ((*_150).0: &anchor_lang::prelude::Pubkey);
        _15 = (*_151);
        _14 = anchor_lang::prelude::AccountMeta::new(move _15, const false) -> [return: bb4, unwind: bb87];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _152 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _153 = deref_copy ((*_152).0: &anchor_lang::prelude::Pubkey);
        _17 = (*_153);
        _16 = anchor_lang::prelude::AccountMeta::new_readonly(move _17, const false) -> [return: bb5, unwind: bb87];
    }

    bb5: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _154 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _155 = deref_copy ((*_154).0: &anchor_lang::prelude::Pubkey);
        _19 = (*_155);
        _18 = anchor_lang::prelude::AccountMeta::new(move _19, const false) -> [return: bb6, unwind: bb87];
    }

    bb6: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _156 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _157 = deref_copy ((*_156).0: &anchor_lang::prelude::Pubkey);
        _21 = (*_157);
        _20 = anchor_lang::prelude::AccountMeta::new(move _21, const false) -> [return: bb7, unwind: bb87];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _158 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _159 = deref_copy ((*_158).0: &anchor_lang::prelude::Pubkey);
        _23 = (*_159);
        _22 = anchor_lang::prelude::AccountMeta::new(move _23, const false) -> [return: bb8, unwind: bb87];
    }

    bb8: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _160 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _161 = deref_copy ((*_160).0: &anchor_lang::prelude::Pubkey);
        _25 = (*_161);
        _24 = anchor_lang::prelude::AccountMeta::new(move _25, const false) -> [return: bb9, unwind: bb87];
    }

    bb9: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        _162 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _163 = deref_copy ((*_162).0: &anchor_lang::prelude::Pubkey);
        _27 = (*_163);
        _26 = anchor_lang::prelude::AccountMeta::new(move _27, const false) -> [return: bb10, unwind: bb87];
    }

    bb10: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _164 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _196 = (((_164.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _30 = &(*_196);
        _29 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _30) -> [return: bb11, unwind: bb87];
    }

    bb11: {
        StorageDead(_30);
        _28 = anchor_lang::prelude::AccountMeta::new(move _29, const false) -> [return: bb12, unwind: bb87];
    }

    bb12: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _165 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _197 = (((_165.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _33 = &(*_197);
        _32 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _33) -> [return: bb13, unwind: bb87];
    }

    bb13: {
        StorageDead(_33);
        _31 = anchor_lang::prelude::AccountMeta::new(move _32, const false) -> [return: bb14, unwind: bb87];
    }

    bb14: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        _166 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _167 = deref_copy ((*_166).0: &anchor_lang::prelude::Pubkey);
        _35 = (*_167);
        _34 = anchor_lang::prelude::AccountMeta::new_readonly(move _35, const false) -> [return: bb15, unwind: bb87];
    }

    bb15: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _168 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _169 = deref_copy ((*_168).0: &anchor_lang::prelude::Pubkey);
        _37 = (*_169);
        _36 = anchor_lang::prelude::AccountMeta::new_readonly(move _37, const false) -> [return: bb16, unwind: bb87];
    }

    bb16: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &((*_1).10: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _40 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _41) -> [return: bb17, unwind: bb87];
    }

    bb17: {
        StorageDead(_41);
        _170 = deref_copy ((*_40).0: &anchor_lang::prelude::Pubkey);
        _39 = (*_170);
        _38 = anchor_lang::prelude::AccountMeta::new_readonly(move _39, const false) -> [return: bb18, unwind: bb87];
    }

    bb18: {
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).11: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _44 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as Deref>::deref(move _45) -> [return: bb19, unwind: bb87];
    }

    bb19: {
        StorageDead(_45);
        _171 = deref_copy ((*_44).0: &anchor_lang::prelude::Pubkey);
        _43 = (*_171);
        _42 = anchor_lang::prelude::AccountMeta::new_readonly(move _43, const false) -> [return: bb20, unwind: bb87];
    }

    bb20: {
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        _172 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _173 = deref_copy ((*_172).0: &anchor_lang::prelude::Pubkey);
        _47 = (*_173);
        _46 = anchor_lang::prelude::AccountMeta::new_readonly(move _47, const false) -> [return: bb21, unwind: bb87];
    }

    bb21: {
        StorageDead(_47);
        _198 = (((_9.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 16]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 16]>).0: *const [anchor_lang::prelude::AccountMeta; 16]);
        _208 = _198 as *const () (PtrToPtr);
        _209 = _208 as usize (Transmute);
        _210 = AlignOf([anchor_lang::prelude::AccountMeta; 16]);
        _211 = Sub(_210, const 1_usize);
        _212 = BitAnd(_209, _211);
        _213 = Eq(_212, const 0_usize);
        assert(_213, "misaligned pointer dereference: address must be a multiple of {} but is {}", _210, _209) -> [success: bb95, unwind unreachable];
    }

    bb22: {
        _192 = const true;
        StorageDead(_4);
        StorageDead(_44);
        StorageDead(_40);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _51 = SizeOf([anchor_lang::prelude::AccountInfo<'_>; 17]);
        _52 = AlignOf([anchor_lang::prelude::AccountInfo<'_>; 17]);
        _53 = alloc::alloc::exchange_malloc(move _51, move _52) -> [return: bb23, unwind: bb91];
    }

    bb23: {
        StorageLive(_54);
        _54 = ShallowInitBox(move _53, [anchor_lang::prelude::AccountInfo<'_>; 17]);
        StorageLive(_55);
        StorageLive(_56);
        _174 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _56 = &(*_174);
        _55 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _56) -> [return: bb24, unwind: bb89];
    }

    bb24: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _175 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _58 = &(*_175);
        _57 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _58) -> [return: bb25, unwind: bb86];
    }

    bb25: {
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        _176 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _60 = &(*_176);
        _59 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _60) -> [return: bb26, unwind: bb85];
    }

    bb26: {
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _177 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).1: &anchor_lang::prelude::AccountInfo<'_>);
        _62 = &(*_177);
        _61 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _62) -> [return: bb27, unwind: bb84];
    }

    bb27: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _178 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _64 = &(*_178);
        _63 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _64) -> [return: bb28, unwind: bb83];
    }

    bb28: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        _179 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _66 = &(*_179);
        _65 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _66) -> [return: bb29, unwind: bb82];
    }

    bb29: {
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _180 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _68 = &(*_180);
        _67 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _68) -> [return: bb30, unwind: bb81];
    }

    bb30: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _181 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _70 = &(*_181);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _70) -> [return: bb31, unwind: bb80];
    }

    bb31: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        _182 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _72 = &(*_182);
        _71 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _72) -> [return: bb32, unwind: bb79];
    }

    bb32: {
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        _183 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _74 = &(*_183);
        _73 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _74) -> [return: bb33, unwind: bb78];
    }

    bb33: {
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _184 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _199 = (((_184.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _76 = &(*_199);
        _75 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _76) -> [return: bb34, unwind: bb77];
    }

    bb34: {
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        _185 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _200 = (((_185.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _78 = &(*_200);
        _77 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _78) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _186 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _80 = &(*_186);
        _79 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _80) -> [return: bb36, unwind: bb75];
    }

    bb36: {
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _187 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _82 = &(*_187);
        _81 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _82) -> [return: bb37, unwind: bb74];
    }

    bb37: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_1).10: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _83 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _84) -> [return: bb38, unwind: bb73];
    }

    bb38: {
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &((*_1).11: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _85 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _86) -> [return: bb39, unwind: bb72];
    }

    bb39: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _188 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _88 = &(*_188);
        _87 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _88) -> [return: bb40, unwind: bb71];
    }

    bb40: {
        StorageDead(_88);
        _201 = (((_54.0: std::ptr::Unique<[anchor_lang::prelude::AccountInfo<'_>; 17]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountInfo<'_>; 17]>).0: *const [anchor_lang::prelude::AccountInfo<'_>; 17]);
        _202 = _201 as *const () (PtrToPtr);
        _203 = _202 as usize (Transmute);
        _204 = AlignOf([anchor_lang::prelude::AccountInfo<'_>; 17]);
        _205 = Sub(_204, const 1_usize);
        _206 = BitAnd(_203, _205);
        _207 = Eq(_206, const 0_usize);
        assert(_207, "misaligned pointer dereference: address must be a multiple of {} but is {}", _204, _203) -> [success: bb94, unwind unreachable];
    }

    bb41: {
        StorageDead(_49);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &((*_1).14: std::vec::Vec<anchor_lang::prelude::UncheckedAccount<'_>>);
        _93 = <Vec<anchor_lang::prelude::UncheckedAccount<'_>> as Deref>::deref(move _94) -> [return: bb42, unwind: bb70];
    }

    bb42: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = core::slice::<impl [anchor_lang::prelude::UncheckedAccount<'_>]>::iter(move _92) -> [return: bb43, unwind: bb70];
    }

    bb43: {
        StorageDead(_92);
        _90 = <std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>> as IntoIterator>::into_iter(move _91) -> [return: bb44, unwind: bb70];
    }

    bb44: {
        StorageDead(_91);
        StorageLive(_95);
        _95 = move _90;
        goto -> bb45;
    }

    bb45: {
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut _95;
        _99 = &mut (*_100);
        _98 = <std::slice::Iter<'_, anchor_lang::prelude::UncheckedAccount<'_>> as Iterator>::next(move _99) -> [return: bb46, unwind: bb70];
    }

    bb46: {
        StorageDead(_99);
        _101 = discriminant(_98);
        switchInt(move _101) -> [0: bb49, 1: bb47, otherwise: bb48];
    }

    bb47: {
        StorageLive(_103);
        _103 = ((_98 as Some).0: &anchor_lang::prelude::UncheckedAccount<'_>);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut _3;
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_103);
        _108 = <anchor_lang::prelude::UncheckedAccount<'_> as Deref>::deref(move _109) -> [return: bb50, unwind: bb70];
    }

    bb48: {
        unreachable;
    }

    bb49: {
        _89 = const ();
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_114);
        StorageLive(_115);
        _189 = deref_copy (((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>).0: &anchor_lang::prelude::AccountInfo<'_>);
        _190 = deref_copy ((*_189).0: &anchor_lang::prelude::Pubkey);
        _115 = (*_190);
        StorageLive(_116);
        _192 = const false;
        _116 = move _3;
        StorageLive(_117);
        _193 = const false;
        _117 = move _2;
        _114 = Instruction { program_id: move _115, accounts: move _116, data: move _117 };
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &((*_1).12: u8);
        _119 = &(*_120);
        _118 = get_signer_seeds(move _119) -> [return: bb55, unwind: bb69];
    }

    bb50: {
        StorageDead(_109);
        _191 = deref_copy ((*_108).0: &anchor_lang::prelude::Pubkey);
        _107 = (*_191);
        _106 = anchor_lang::prelude::AccountMeta::new(move _107, const false) -> [return: bb51, unwind: bb70];
    }

    bb51: {
        StorageDead(_107);
        _104 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _105, move _106) -> [return: bb52, unwind: bb70];
    }

    bb52: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_108);
        StorageDead(_104);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &mut _48;
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_103);
        _112 = <anchor_lang::prelude::UncheckedAccount<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _113) -> [return: bb53, unwind: bb70];
    }

    bb53: {
        StorageDead(_113);
        _110 = Vec::<anchor_lang::prelude::AccountInfo<'_>>::push(move _111, move _112) -> [return: bb54, unwind: bb70];
    }

    bb54: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        _97 = const ();
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        _96 = const ();
        goto -> bb45;
    }

    bb55: {
        StorageDead(_119);
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_118;
        StorageLive(_126);
        _126 = RangeFull;
        _124 = <[&[u8]; 2] as Index<RangeFull>>::index(move _125, move _126) -> [return: bb56, unwind: bb69];
    }

    bb56: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = &(*_124);
        _122 = [move _123];
        StorageDead(_123);
        _121 = &_122;
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_114;
        _131 = &(*_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_48;
        _135 = &(*_136);
        _134 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _135) -> [return: bb57, unwind: bb69];
    }

    bb57: {
        _133 = &(*_134);
        StorageDead(_135);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &(*_121);
        _137 = move _138 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_138);
        _130 = invoke_signed_unchecked(move _131, move _133, move _137) -> [return: bb58, unwind: bb69];
    }

    bb58: {
        StorageDead(_137);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_139);
        _139 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:311:18: 311:21};
        _129 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:311:18: 311:21}>(move _130, move _139) -> [return: bb59, unwind: bb69];
    }

    bb59: {
        StorageDead(_139);
        StorageDead(_130);
        _128 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _129) -> [return: bb60, unwind: bb69];
    }

    bb60: {
        StorageDead(_129);
        _140 = discriminant(_128);
        switchInt(move _140) -> [0: bb61, 1: bb62, otherwise: bb48];
    }

    bb61: {
        StorageLive(_144);
        _144 = ((_128 as Continue).0: ());
        _127 = _144;
        StorageDead(_144);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_145);
        _145 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _145);
        StorageDead(_145);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        drop(_114) -> [return: bb64, unwind: bb70];
    }

    bb62: {
        StorageLive(_141);
        _141 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb63, unwind: bb69];
    }

    bb63: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        drop(_114) -> [return: bb66, unwind: bb70];
    }

    bb64: {
        StorageDead(_114);
        drop(_48) -> [return: bb65, unwind: bb91];
    }

    bb65: {
        StorageDead(_48);
        _192 = const false;
        StorageDead(_3);
        goto -> bb68;
    }

    bb66: {
        StorageDead(_114);
        drop(_48) -> [return: bb67, unwind: bb91];
    }

    bb67: {
        StorageDead(_48);
        _192 = const false;
        StorageDead(_3);
        goto -> bb68;
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_114) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_48) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_85) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_83) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_81) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_79) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_77) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_75) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_73) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_71) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_69) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_67) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_65) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_63) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_61) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_59) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_57) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_55) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_9) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        resume;
    }

    bb89 (cleanup): {
        _194 = &mut _54;
        _195 = <Box<[anchor_lang::prelude::AccountInfo<'_>; 17]> as Drop>::drop(move _194) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_3) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_192) -> [0: bb93, otherwise: bb90];
    }

    bb92 (cleanup): {
        drop(_2) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_193) -> [0: bb88, otherwise: bb92];
    }

    bb94: {
        (*_201) = [move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69, move _71, move _73, move _75, move _77, move _79, move _81, move _83, move _85, move _87];
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        _50 = move _54;
        _49 = move _50 as std::boxed::Box<[anchor_lang::prelude::AccountInfo<'_>]> (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageDead(_50);
        _48 = std::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::into_vec::<std::alloc::Global>(move _49) -> [return: bb41, unwind: bb91];
    }

    bb95: {
        (*_198) = [move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _31, move _34, move _36, move _38, move _42, move _46];
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        _5 = move _9;
        _4 = move _5 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageDead(_5);
        _3 = std::slice::<impl [anchor_lang::prelude::AccountMeta]>::into_vec::<std::alloc::Global>(move _4) -> [return: bb22, unwind: bb93];
    }

    bb96 (cleanup): {
        goto -> bb91;
    }
}
