// MIR for `calculate_fee_for_fulfillment_with_match` after PreCodegen

fn calculate_fee_for_fulfillment_with_match(_1: &UserStats, _2: &Option<&mut UserStats>, _3: u64, _4: &state::state::FeeStructure, _5: u64, _6: u64, _7: u64, _8: bool, _9: &Option<&mut UserStats>, _10: &state::user::MarketType, _11: i16, _12: bool) -> std::result::Result<FillFees, error::ErrorCode> {
    debug taker_stats => _1;
    debug maker_stats => _2;
    debug quote_asset_amount => _3;
    debug fee_structure => _4;
    debug order_slot => _5;
    debug clock_slot => _6;
    debug filler_multiplier => _7;
    debug reward_referrer => _8;
    debug referrer_stats => _9;
    debug market_type => _10;
    debug fee_adjustment => _11;
    debug user_high_leverage_mode => _12;
    let mut _0: std::result::Result<math::fees::FillFees, error::ErrorCode>;
    let _13: state::state::FeeTier;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::state::FeeTier>;
    let mut _15: std::result::Result<state::state::FeeTier, error::ErrorCode>;
    let mut _16: &state::user::UserStats;
    let mut _17: &state::state::FeeStructure;
    let mut _18: &state::user::MarketType;
    let mut _19: bool;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: state::state::FeeTier;
    let mut _26: isize;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::state::FeeTier>;
    let mut _29: std::result::Result<state::state::FeeTier, error::ErrorCode>;
    let mut _30: &state::user::UserStats;
    let mut _31: &state::state::FeeStructure;
    let mut _32: &state::user::MarketType;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::state::FeeTier>;
    let mut _39: std::result::Result<state::state::FeeTier, error::ErrorCode>;
    let mut _40: &state::user::UserStats;
    let mut _41: &state::state::FeeStructure;
    let mut _42: &state::user::MarketType;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _50: std::result::Result<u64, error::ErrorCode>;
    let mut _51: u64;
    let mut _52: &state::state::FeeTier;
    let _53: &state::state::FeeTier;
    let mut _54: i16;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: bool;
    let mut _62: u64;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _64: std::result::Result<u64, error::ErrorCode>;
    let mut _65: u64;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: (u64, u64, u64);
    let mut _75: bool;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64, u64)>;
    let mut _77: std::result::Result<(u64, u64, u64), error::ErrorCode>;
    let mut _78: u64;
    let mut _79: &state::state::FeeTier;
    let _80: &state::state::FeeTier;
    let mut _81: u64;
    let mut _82: &std::option::Option<&mut state::user::UserStats>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: u64;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _91: std::result::Result<u64, error::ErrorCode>;
    let mut _92: u64;
    let mut _93: &state::state::FeeTier;
    let _94: &state::state::FeeTier;
    let mut _95: i16;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: bool;
    let mut _103: u64;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _105: std::result::Result<u64, error::ErrorCode>;
    let mut _106: u64;
    let mut _107: u64;
    let mut _108: u64;
    let mut _109: u64;
    let mut _110: &state::state::OrderFillerRewardStructure;
    let _111: &state::state::OrderFillerRewardStructure;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _119: std::result::Result<i64, error::ErrorCode>;
    let mut _120: u64;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _122: std::result::Result<u64, error::ErrorCode>;
    let mut _123: u64;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _125: std::result::Result<u64, error::ErrorCode>;
    let mut _126: u64;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _128: std::result::Result<u64, error::ErrorCode>;
    let mut _129: u64;
    let mut _130: u64;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: u64;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: u64;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: math::fees::FillFees;
    let mut _154: u64;
    let mut _155: u64;
    let mut _156: i64;
    let mut _157: u64;
    let mut _158: u64;
    let mut _159: u64;
    let mut _160: &mut state::user::UserStats;
    scope 1 {
        debug taker_fee_tier => _13;
        let _25: state::state::FeeTier;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: state::state::FeeTier;
        scope 6 {
            debug maker_fee_tier => _25;
            let mut _48: u64;
            let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _59: u64;
            scope 16 {
                debug taker_fee => _48;
                let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _70: u64;
                let _71: u64;
                let _72: u64;
                let _73: u64;
                let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _87: (u64, u64, u64);
                scope 21 {
                    debug residual => _67;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _70;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug taker_fee => _71;
                    debug referee_discount => _72;
                    debug referrer_reward => _73;
                    let _89: u64;
                    let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _100: u64;
                    scope 30 {
                        debug maker_rebate => _89;
                        let _101: u64;
                        let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _116: u64;
                        scope 35 {
                            debug filler_reward => _101;
                            let _117: i64;
                            let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _135: u64;
                            let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _141: u64;
                            let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _147: u64;
                            let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _152: i64;
                            scope 40 {
                                debug fee_to_market => _117;
                            }
                            scope 41 {
                                debug residual => _132;
                                scope 42 {
                                }
                            }
                            scope 43 {
                                debug val => _135;
                                scope 44 {
                                }
                            }
                            scope 45 {
                                debug residual => _138;
                                scope 46 {
                                }
                            }
                            scope 47 {
                                debug val => _141;
                                scope 48 {
                                }
                            }
                            scope 49 {
                                debug residual => _144;
                                scope 50 {
                                }
                            }
                            scope 51 {
                                debug val => _147;
                                scope 52 {
                                }
                            }
                            scope 53 {
                                debug residual => _149;
                                scope 54 {
                                }
                            }
                            scope 55 {
                                debug val => _152;
                                scope 56 {
                                }
                            }
                        }
                        scope 36 {
                            debug residual => _113;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug val => _116;
                            scope 39 {
                            }
                        }
                    }
                    scope 31 {
                        debug residual => _97;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _100;
                        scope 34 {
                        }
                    }
                }
                scope 26 {
                    debug residual => _84;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug val => _87;
                    scope 29 {
                    }
                }
            }
            scope 17 {
                debug residual => _56;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _59;
                scope 20 {
                }
            }
        }
        scope 7 {
            debug maker_stats => _27;
            let _27: &&mut state::user::UserStats;
            let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _37: state::state::FeeTier;
            scope 8 {
                debug residual => _34;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _37;
                scope 11 {
                }
            }
        }
        scope 12 {
            debug residual => _44;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _47;
            scope 15 {
            }
        }
    }
    scope 2 {
        debug residual => _21;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _24;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = &(*_4);
        StorageLive(_18);
        _18 = &(*_10);
        StorageLive(_19);
        _19 = _12;
        _15 = determine_user_fee_tier(move _16, move _17, move _18, move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as Try>::branch(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_24);
        _24 = ((_14 as Continue).0: state::state::FeeTier);
        _13 = _24;
        StorageDead(_24);
        StorageDead(_14);
        StorageLive(_25);
        _26 = discriminant((*_2));
        switchInt(move _26) -> [1: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_21);
        _21 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_14);
        goto -> bb81;
    }

    bb7: {
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &(*_4);
        StorageLive(_42);
        _42 = &(*_10);
        _39 = determine_user_fee_tier(move _40, move _41, move _42, const false) -> [return: bb14, unwind continue];
    }

    bb8: {
        StorageLive(_27);
        _27 = &(((*_2) as Some).0: &mut state::user::UserStats);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _160 = deref_copy (*_27);
        _30 = &(*_160);
        StorageLive(_31);
        _31 = &(*_4);
        StorageLive(_32);
        _32 = &(*_10);
        _29 = determine_user_fee_tier(move _30, move _31, move _32, const false) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as Try>::branch(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_37);
        _37 = ((_28 as Continue).0: state::state::FeeTier);
        _25 = _37;
        StorageDead(_37);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb19;
    }

    bb12: {
        StorageLive(_34);
        _34 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb80;
    }

    bb14: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as Try>::branch(move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_47);
        _47 = ((_38 as Continue).0: state::state::FeeTier);
        _25 = _47;
        StorageDead(_47);
        StorageDead(_38);
        goto -> bb19;
    }

    bb17: {
        StorageLive(_44);
        _44 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_38);
        goto -> bb80;
    }

    bb19: {
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _3;
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_13;
        _52 = &(*_53);
        StorageLive(_54);
        _54 = _11;
        _50 = calculate_taker_fee(move _51, move _52, move _54) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _50) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_50);
        _55 = discriminant(_49);
        switchInt(move _55) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_59);
        _59 = ((_49 as Continue).0: u64);
        _48 = _59;
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_49);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _12;
        switchInt(move _61) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_56);
        _56 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_49);
        goto -> bb79;
    }

    bb25: {
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _48;
        _64 = <u64 as SafeMath>::safe_mul(move _65, const 2_u64) -> [return: bb27, unwind continue];
    }

    bb26: {
        _60 = const ();
        goto -> bb32;
    }

    bb27: {
        StorageDead(_65);
        _63 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _64) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_70);
        _70 = ((_63 as Continue).0: u64);
        _62 = _70;
        StorageDead(_70);
        _48 = move _62;
        StorageDead(_62);
        StorageDead(_63);
        _60 = const ();
        goto -> bb32;
    }

    bb30: {
        StorageLive(_67);
        _67 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb79;
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _8;
        switchInt(move _75) -> [0: bb39, otherwise: bb33];
    }

    bb33: {
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _48;
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_13;
        _79 = &(*_80);
        StorageLive(_81);
        _81 = ((*_4).2: u64);
        StorageLive(_82);
        _82 = &(*_9);
        _77 = calculate_referee_fee_and_referrer_reward(move _78, move _79, move _81, move _82) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_78);
        _76 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as Try>::branch(move _77) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_77);
        _83 = discriminant(_76);
        switchInt(move _83) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_87);
        _87 = ((_76 as Continue).0: (u64, u64, u64));
        _74 = _87;
        StorageDead(_87);
        StorageDead(_80);
        StorageDead(_76);
        goto -> bb40;
    }

    bb37: {
        StorageLive(_84);
        _84 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb79;
    }

    bb39: {
        StorageLive(_88);
        _88 = _48;
        _74 = (move _88, const 0_u64, const 0_u64);
        StorageDead(_88);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_75);
        StorageLive(_71);
        _71 = (_74.0: u64);
        StorageLive(_72);
        _72 = (_74.1: u64);
        StorageLive(_73);
        _73 = (_74.2: u64);
        StorageDead(_74);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _3;
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_25;
        _93 = &(*_94);
        StorageLive(_95);
        _95 = _11;
        _91 = calculate_maker_rebate(move _92, move _93, move _95) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        _90 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _91) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_91);
        _96 = discriminant(_90);
        switchInt(move _96) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_100);
        _100 = ((_90 as Continue).0: u64);
        _89 = _100;
        StorageDead(_100);
        StorageDead(_94);
        StorageDead(_90);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _7;
        _102 = Eq(move _103, const 0_u64);
        switchInt(move _102) -> [0: bb47, otherwise: bb46];
    }

    bb44: {
        StorageLive(_97);
        _97 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_90);
        goto -> bb78;
    }

    bb46: {
        StorageDead(_103);
        _101 = const 0_u64;
        goto -> bb53;
    }

    bb47: {
        StorageDead(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _71;
        StorageLive(_107);
        _107 = _5;
        StorageLive(_108);
        _108 = _6;
        StorageLive(_109);
        _109 = _7;
        StorageLive(_110);
        StorageLive(_111);
        _111 = &((*_4).1: state::state::OrderFillerRewardStructure);
        _110 = &(*_111);
        _105 = calculate_filler_reward(move _106, move _107, move _108, move _109, move _110) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        _104 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _105) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_105);
        _112 = discriminant(_104);
        switchInt(move _112) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_116);
        _116 = ((_104 as Continue).0: u64);
        _101 = _116;
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_104);
        goto -> bb53;
    }

    bb51: {
        StorageLive(_113);
        _113 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb77;
    }

    bb53: {
        StorageDead(_102);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _71;
        StorageLive(_130);
        _130 = _101;
        _128 = <u64 as SafeMath>::safe_sub(move _129, move _130) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _128) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_128);
        _131 = discriminant(_127);
        switchInt(move _131) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_135);
        _135 = ((_127 as Continue).0: u64);
        _126 = _135;
        StorageDead(_135);
        StorageLive(_136);
        _136 = _73;
        _125 = <u64 as SafeMath>::safe_sub(move _126, move _136) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_132);
        _132 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb74;
    }

    bb59: {
        StorageDead(_136);
        StorageDead(_126);
        _124 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _125) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_125);
        _137 = discriminant(_124);
        switchInt(move _137) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_141);
        _141 = ((_124 as Continue).0: u64);
        _123 = _141;
        StorageDead(_141);
        StorageLive(_142);
        _142 = _89;
        _122 = <u64 as SafeMath>::safe_sub(move _123, move _142) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_138);
        _138 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_140);
        StorageDead(_138);
        goto -> bb74;
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_123);
        _121 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _122) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_122);
        _143 = discriminant(_121);
        switchInt(move _143) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_147);
        _147 = ((_121 as Continue).0: u64);
        _120 = _147;
        StorageDead(_147);
        _119 = <u64 as Cast>::cast::<i64>(move _120) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_144);
        _144 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_146);
        StorageDead(_144);
        goto -> bb75;
    }

    bb69: {
        StorageDead(_120);
        _118 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _119) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_119);
        _148 = discriminant(_118);
        switchInt(move _148) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_152);
        _152 = ((_118 as Continue).0: i64);
        _117 = _152;
        StorageDead(_152);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageLive(_153);
        StorageLive(_154);
        _154 = _71;
        StorageLive(_155);
        _155 = _89;
        StorageLive(_156);
        _156 = _117;
        StorageLive(_157);
        _157 = _101;
        StorageLive(_158);
        _158 = _73;
        StorageLive(_159);
        _159 = _72;
        _153 = FillFees { user_fee: move _154, maker_rebate: move _155, fee_to_market: move _156, fee_to_market_for_lp: const 0_i64, filler_reward: move _157, referrer_reward: move _158, referee_discount: move _159 };
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        _0 = std::result::Result::<FillFees, error::ErrorCode>::Ok(move _153);
        StorageDead(_153);
        StorageDead(_117);
        StorageDead(_101);
        StorageDead(_89);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_48);
        StorageDead(_25);
        StorageDead(_13);
        goto -> bb82;
    }

    bb72: {
        StorageLive(_149);
        _149 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<FillFees, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb76;
    }

    bb74: {
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_101);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_89);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_48);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_25);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_13);
        goto -> bb82;
    }

    bb82: {
        return;
    }
}
