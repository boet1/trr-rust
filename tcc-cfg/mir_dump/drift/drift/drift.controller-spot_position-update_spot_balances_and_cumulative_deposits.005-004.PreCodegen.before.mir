// MIR for `update_spot_balances_and_cumulative_deposits` before PreCodegen

fn update_spot_balances_and_cumulative_deposits(_1: u128, _2: &SpotBalanceType, _3: &mut SpotMarket, _4: &mut SpotPosition, _5: bool, _6: Option<u128>) -> std::result::Result<(), error::ErrorCode> {
    debug token_amount => _1;
    debug update_direction => _2;
    debug spot_market => _3;
    debug spot_position => _4;
    debug is_leaving_drift => _5;
    debug cumulative_deposit_delta => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: u128;
    let mut _11: &state::spot_market::SpotBalanceType;
    let mut _12: &mut state::spot_market::SpotMarket;
    let mut _13: &mut dyn state::spot_market::SpotBalance;
    let mut _14: &mut state::user::SpotPosition;
    let mut _15: bool;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: ();
    let _21: u128;
    let mut _22: std::option::Option<u128>;
    let mut _23: u128;
    let _24: ();
    let mut _25: isize;
    let mut _26: i64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _28: std::result::Result<i64, error::ErrorCode>;
    let mut _29: std::option::Option<i64>;
    let mut _30: i64;
    let mut _31: i64;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _33: std::result::Result<i64, error::ErrorCode>;
    let mut _34: u128;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: i64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _48: std::result::Result<i64, error::ErrorCode>;
    let mut _49: std::option::Option<i64>;
    let mut _50: i64;
    let mut _51: i64;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _53: std::result::Result<i64, error::ErrorCode>;
    let mut _54: u128;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: ();
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _20;
        scope 4 {
        }
    }
    scope 5 {
        debug cumulative_deposit_delta => _21;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: i64;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: i64;
        let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _59: i64;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: i64;
        scope 6 {
            debug residual => _36;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _39;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _42;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _45;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _56;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _59;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _62;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _65;
            scope 21 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        _11 = &(*_2);
        StorageLive(_12);
        _12 = &mut (*_3);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut (*_4);
        _13 = move _14 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_14);
        StorageLive(_15);
        _15 = _5;
        _9 = update_spot_balances(move _10, move _11, move _12, move _13, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _16 = discriminant(_8);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_8 as Continue).0: ());
        _7 = _20;
        StorageDead(_20);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _6;
        StorageLive(_23);
        _23 = _1;
        _21 = Option::<u128>::unwrap_or(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb36;
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        _25 = discriminant((*_2));
        switchInt(move _25) -> [0: bb9, 1: bb8, otherwise: bb4];
    }

    bb8: {
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_4).3: i64);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _21;
        _53 = <u128 as Cast>::cast::<i64>(move _54) -> [return: bb21, unwind continue];
    }

    bb9: {
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_4).3: i64);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _21;
        _33 = <u128 as Cast>::cast::<i64>(move _34) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_34);
        _32 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_33);
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_39);
        _39 = ((_32 as Continue).0: i64);
        _31 = _39;
        StorageDead(_39);
        _29 = core::num::<impl i64>::checked_add(move _30, move _31) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_36);
        _36 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb34;
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_40);
        _40 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _28 = Option::<i64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _29, move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_29);
        _27 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_28);
        _41 = discriminant(_27);
        switchInt(move _41) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_27 as Continue).0: i64);
        _26 = _45;
        StorageDead(_45);
        ((*_4).3: i64) = move _26;
        _24 = const ();
        StorageDead(_26);
        StorageDead(_32);
        StorageDead(_27);
        goto -> bb32;
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb34;
    }

    bb21: {
        StorageDead(_54);
        _52 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _53) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_53);
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_59);
        _59 = ((_52 as Continue).0: i64);
        _51 = _59;
        StorageDead(_59);
        _49 = core::num::<impl i64>::checked_sub(move _50, move _51) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_56);
        _56 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb33;
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _48 = Option::<i64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _49, move _60) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_49);
        _47 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_48);
        _61 = discriminant(_47);
        switchInt(move _61) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_65);
        _65 = ((_47 as Continue).0: i64);
        _46 = _65;
        StorageDead(_65);
        ((*_4).3: i64) = move _46;
        _24 = const ();
        StorageDead(_46);
        StorageDead(_52);
        StorageDead(_47);
        goto -> bb32;
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_64);
        StorageDead(_62);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_24);
        StorageLive(_66);
        _66 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        StorageDead(_21);
        goto -> bb36;
    }

    bb33: {
        StorageDead(_46);
        StorageDead(_52);
        StorageDead(_47);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_26);
        StorageDead(_32);
        StorageDead(_27);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_24);
        StorageDead(_21);
        goto -> bb36;
    }

    bb36: {
        return;
    }
}
