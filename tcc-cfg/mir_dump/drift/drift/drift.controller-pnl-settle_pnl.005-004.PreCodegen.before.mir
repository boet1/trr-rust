// MIR for `controller::pnl::settle_pnl` before PreCodegen

fn controller::pnl::settle_pnl(_1: u16, _2: &mut User, _3: &anchor_lang::prelude::Pubkey, _4: &anchor_lang::prelude::Pubkey, _5: &PerpMarketMap<'_>, _6: &SpotMarketMap<'_>, _7: &mut OracleMap<'_>, _8: &anchor_lang::prelude::Clock, _9: &state::state::State, _10: Option<bool>, _11: settle_pnl_mode::SettlePnlMode) -> std::result::Result<(), error::ErrorCode> {
    debug market_index => _1;
    debug user => _2;
    debug authority => _3;
    debug user_key => _4;
    debug perp_market_map => _5;
    debug spot_market_map => _6;
    debug oracle_map => _7;
    debug clock => _8;
    debug state => _9;
    debug meets_margin_requirement => _10;
    debug mode => _11;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _14: std::result::Result<(), error::ErrorCode>;
    let mut _15: bool;
    let mut _16: &state::user::User;
    let mut _17: ();
    let _18: error::ErrorCode;
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let _24: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 2];
    let _29: &[&str; 2];
    let _30: [&str; 2];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let mut _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &error::ErrorCode;
    let _37: &error::ErrorCode;
    let mut _38: error::ErrorCode;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: ();
    let _44: i64;
    let _48: ();
    let mut _50: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _52: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _53: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _61: std::result::Result<(), error::ErrorCode>;
    let mut _62: &mut state::spot_market::SpotMarket;
    let mut _63: &mut state::spot_market::SpotMarket;
    let mut _64: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _65: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _66: i64;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _74: std::result::Result<u128, error::ErrorCode>;
    let mut _75: &state::spot_market::SpotMarket;
    let _76: &state::spot_market::SpotMarket;
    let mut _77: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: u128;
    let mut _84: &state::spot_market::SpotMarket;
    let mut _85: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _86: u128;
    let mut _87: &state::spot_market::SpotMarket;
    let mut _88: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _91: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _92: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _93: &u16;
    let _94: &u16;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: &state::oracle::OraclePriceData;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _103: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _104: &mut state::oracle_map::OracleMap<'_>;
    let mut _105: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _106: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _107: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _108: &state::perp_market::PerpMarket;
    let _109: &state::perp_market::PerpMarket;
    let mut _110: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _116: bool;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _118: std::result::Result<bool, error::ErrorCode>;
    let mut _119: &state::perp_market::PerpMarket;
    let _120: &state::perp_market::PerpMarket;
    let mut _121: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _122: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _123: &state::state::State;
    let mut _124: i64;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _130: ();
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _132: std::result::Result<(), error::ErrorCode>;
    let mut _133: &mut state::user::User;
    let mut _134: &anchor_lang::prelude::Pubkey;
    let mut _135: &mut state::perp_market::PerpMarket;
    let mut _136: &mut state::perp_market::PerpMarket;
    let mut _137: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _138: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _139: i64;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _145: ();
    let mut _146: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _149: std::result::Result<usize, error::ErrorCode>;
    let mut _150: &[state::user::PerpPosition; 8];
    let _151: &[state::user::PerpPosition; 8];
    let mut _152: u16;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _160: std::result::Result<i128, error::ErrorCode>;
    let mut _161: &state::user::PerpPosition;
    let _162: usize;
    let mut _163: usize;
    let mut _164: bool;
    let mut _165: i64;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _171: ();
    let mut _172: bool;
    let mut _173: i128;
    let mut _175: isize;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _178: std::result::Result<bool, error::ErrorCode>;
    let mut _179: &state::user::User;
    let mut _180: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _181: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _182: &mut state::oracle_map::OracleMap<'_>;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _188: bool;
    let mut _189: !;
    let mut _192: std::fmt::Arguments<'_>;
    let mut _193: &[&str];
    let mut _194: &[&str; 1];
    let _195: &[&str; 1];
    let _196: [&str; 1];
    let mut _197: &[core::fmt::rt::Argument<'_>];
    let mut _198: &[core::fmt::rt::Argument<'_>; 1];
    let _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: [core::fmt::rt::Argument<'_>; 1];
    let mut _201: core::fmt::rt::Argument<'_>;
    let mut _202: &u16;
    let _203: &u16;
    let mut _204: state::settle_pnl_mode::SettlePnlMode;
    let mut _205: error::ErrorCode;
    let mut _206: u16;
    let mut _207: &str;
    let _208: &str;
    let mut _209: &std::string::String;
    let _210: &std::string::String;
    let mut _212: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _214: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _215: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _222: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _224: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _225: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _226: &u16;
    let _227: &u16;
    let mut _228: isize;
    let mut _230: !;
    let mut _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _233: ();
    let mut _234: bool;
    let mut _235: u8;
    let mut _236: &state::perp_market::PerpMarket;
    let mut _237: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _239: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _240: std::result::Result<bool, error::ErrorCode>;
    let mut _241: &state::perp_market::AMM;
    let _242: &state::perp_market::PerpMarket;
    let mut _243: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _244: u64;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _250: bool;
    let mut _252: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, math::oracle::OracleValidity)>;
    let mut _254: std::result::Result<(&state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode>;
    let mut _255: &mut state::oracle_map::OracleMap<'_>;
    let mut _256: state::user::MarketType;
    let mut _257: u16;
    let mut _258: &state::perp_market::PerpMarket;
    let mut _259: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _260: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _261: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _262: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _263: &state::perp_market::PerpMarket;
    let _264: &state::perp_market::PerpMarket;
    let mut _265: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _266: i64;
    let mut _267: &state::perp_market::PerpMarket;
    let mut _268: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _269: u64;
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _271: std::result::Result<u64, error::ErrorCode>;
    let mut _272: state::perp_market::PerpMarket;
    let mut _273: &state::perp_market::PerpMarket;
    let mut _274: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _280: isize;
    let mut _282: !;
    let mut _283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _285: bool;
    let mut _286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _287: std::result::Result<bool, error::ErrorCode>;
    let mut _288: math::oracle::OracleValidity;
    let mut _289: std::option::Option<math::oracle::DriftAction>;
    let mut _290: math::oracle::DriftAction;
    let mut _291: isize;
    let mut _293: !;
    let mut _294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _296: bool;
    let mut _297: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _298: std::result::Result<bool, error::ErrorCode>;
    let mut _299: &state::perp_market::PerpMarket;
    let _300: &state::perp_market::PerpMarket;
    let mut _301: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _302: i64;
    let mut _303: isize;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _308: ();
    let mut _309: bool;
    let mut _310: &state::perp_market::PerpMarket;
    let mut _311: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _312: !;
    let mut _315: std::fmt::Arguments<'_>;
    let mut _316: &[&str];
    let mut _317: &[&str; 2];
    let _318: &[&str; 2];
    let _319: [&str; 2];
    let mut _320: &[core::fmt::rt::Argument<'_>];
    let mut _321: &[core::fmt::rt::Argument<'_>; 2];
    let _322: &[core::fmt::rt::Argument<'_>; 2];
    let _323: [core::fmt::rt::Argument<'_>; 2];
    let mut _324: core::fmt::rt::Argument<'_>;
    let mut _325: &math::oracle::OracleValidity;
    let _326: &math::oracle::OracleValidity;
    let mut _327: core::fmt::rt::Argument<'_>;
    let mut _328: &u16;
    let _329: &u16;
    let mut _330: state::settle_pnl_mode::SettlePnlMode;
    let mut _331: error::ErrorCode;
    let mut _332: &math::oracle::OracleValidity;
    let mut _333: u16;
    let mut _334: &str;
    let _335: &str;
    let mut _336: &std::string::String;
    let _337: &std::string::String;
    let mut _338: bool;
    let mut _339: u64;
    let mut _340: u64;
    let mut _341: &state::perp_market::PerpMarket;
    let mut _342: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _343: !;
    let mut _346: std::fmt::Arguments<'_>;
    let mut _347: &[&str];
    let mut _348: &[&str; 5];
    let _349: &[&str; 5];
    let _350: [&str; 5];
    let mut _351: &[core::fmt::rt::Argument<'_>];
    let mut _352: &[core::fmt::rt::Argument<'_>; 4];
    let _353: &[core::fmt::rt::Argument<'_>; 4];
    let _354: [core::fmt::rt::Argument<'_>; 4];
    let mut _355: core::fmt::rt::Argument<'_>;
    let mut _356: &u16;
    let _357: &u16;
    let mut _358: core::fmt::rt::Argument<'_>;
    let mut _359: &u64;
    let _360: &u64;
    let mut _361: core::fmt::rt::Argument<'_>;
    let mut _362: &u64;
    let _363: &u64;
    let _364: &state::perp_market::PerpMarket;
    let mut _365: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _366: core::fmt::rt::Argument<'_>;
    let mut _367: &bool;
    let _368: &bool;
    let _369: &state::perp_market::PerpMarket;
    let mut _370: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _371: state::settle_pnl_mode::SettlePnlMode;
    let mut _372: error::ErrorCode;
    let mut _373: u16;
    let mut _374: &str;
    let _375: &str;
    let mut _376: &std::string::String;
    let _377: &std::string::String;
    let _378: ();
    let mut _379: bool;
    let mut _380: &state::perp_market::PerpMarket;
    let _381: &state::perp_market::PerpMarket;
    let mut _382: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _383: state::paused_operations::PerpOperation;
    let mut _384: !;
    let mut _387: std::fmt::Arguments<'_>;
    let mut _388: &[&str];
    let mut _389: &[&str; 2];
    let _390: &[&str; 2];
    let _391: [&str; 2];
    let mut _392: &[core::fmt::rt::Argument<'_>];
    let mut _393: &[core::fmt::rt::Argument<'_>; 1];
    let _394: &[core::fmt::rt::Argument<'_>; 1];
    let _395: [core::fmt::rt::Argument<'_>; 1];
    let mut _396: core::fmt::rt::Argument<'_>;
    let mut _397: &u16;
    let _398: &u16;
    let mut _399: state::settle_pnl_mode::SettlePnlMode;
    let mut _400: error::ErrorCode;
    let mut _401: u16;
    let mut _402: &str;
    let _403: &str;
    let mut _404: &std::string::String;
    let _405: &std::string::String;
    let _407: usize;
    let mut _408: usize;
    let mut _409: bool;
    let _410: ();
    let mut _411: bool;
    let mut _412: i64;
    let _413: ();
    let mut _414: bool;
    let mut _415: &state::perp_market::PerpMarket;
    let _416: &state::perp_market::PerpMarket;
    let mut _417: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _418: state::paused_operations::PerpOperation;
    let mut _419: !;
    let mut _422: std::fmt::Arguments<'_>;
    let mut _423: &[&str];
    let mut _424: &[&str; 2];
    let _425: &[&str; 2];
    let _426: [&str; 2];
    let mut _427: &[core::fmt::rt::Argument<'_>];
    let mut _428: &[core::fmt::rt::Argument<'_>; 1];
    let _429: &[core::fmt::rt::Argument<'_>; 1];
    let _430: [core::fmt::rt::Argument<'_>; 1];
    let mut _431: core::fmt::rt::Argument<'_>;
    let mut _432: &u16;
    let _433: &u16;
    let mut _434: state::settle_pnl_mode::SettlePnlMode;
    let mut _435: error::ErrorCode;
    let mut _436: u16;
    let mut _437: &str;
    let _438: &str;
    let mut _439: &std::string::String;
    let _440: &std::string::String;
    let mut _441: bool;
    let mut _442: &state::perp_market::MarketStatus;
    let _443: &state::perp_market::PerpMarket;
    let mut _444: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _445: &state::perp_market::MarketStatus;
    let _446: state::perp_market::MarketStatus;
    let mut _447: !;
    let mut _450: std::fmt::Arguments<'_>;
    let mut _451: &[&str];
    let mut _452: &[&str; 2];
    let _453: &[&str; 2];
    let _454: [&str; 2];
    let mut _455: &[core::fmt::rt::Argument<'_>];
    let mut _456: &[core::fmt::rt::Argument<'_>; 1];
    let _457: &[core::fmt::rt::Argument<'_>; 1];
    let _458: [core::fmt::rt::Argument<'_>; 1];
    let mut _459: core::fmt::rt::Argument<'_>;
    let mut _460: &u16;
    let _461: &u16;
    let mut _462: state::settle_pnl_mode::SettlePnlMode;
    let mut _463: error::ErrorCode;
    let mut _464: u16;
    let mut _465: &str;
    let _466: &str;
    let mut _467: &std::string::String;
    let _468: &std::string::String;
    let mut _469: bool;
    let mut _470: &state::perp_market::MarketStatus;
    let _471: &state::perp_market::PerpMarket;
    let mut _472: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _473: &state::perp_market::MarketStatus;
    let _474: state::perp_market::MarketStatus;
    let mut _475: bool;
    let mut _476: &state::perp_market::MarketStatus;
    let _477: &state::perp_market::PerpMarket;
    let mut _478: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _479: &state::perp_market::MarketStatus;
    let _480: state::perp_market::MarketStatus;
    let mut _481: !;
    let mut _484: std::fmt::Arguments<'_>;
    let mut _485: &[&str];
    let mut _486: &[&str; 2];
    let _487: &[&str; 2];
    let _488: [&str; 2];
    let mut _489: &[core::fmt::rt::Argument<'_>];
    let mut _490: &[core::fmt::rt::Argument<'_>; 1];
    let _491: &[core::fmt::rt::Argument<'_>; 1];
    let _492: [core::fmt::rt::Argument<'_>; 1];
    let mut _493: core::fmt::rt::Argument<'_>;
    let mut _494: &u16;
    let _495: &u16;
    let mut _496: state::settle_pnl_mode::SettlePnlMode;
    let mut _497: error::ErrorCode;
    let mut _498: u16;
    let mut _499: &str;
    let _500: &str;
    let mut _501: &std::string::String;
    let _502: &std::string::String;
    let mut _504: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _505: std::result::Result<u128, error::ErrorCode>;
    let mut _506: u128;
    let mut _507: &state::perp_market::PerpMarket;
    let mut _508: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _509: &state::spot_market::SpotMarket;
    let _510: &state::spot_market::SpotMarket;
    let mut _511: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _512: &state::spot_market::SpotBalanceType;
    let _513: &state::spot_market::SpotBalanceType;
    let mut _514: &state::perp_market::PoolBalance;
    let _515: &state::perp_market::PerpMarket;
    let mut _516: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _517: isize;
    let mut _519: !;
    let mut _520: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _523: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _524: std::result::Result<u128, error::ErrorCode>;
    let mut _525: u128;
    let mut _526: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _527: std::result::Result<u128, error::ErrorCode>;
    let mut _528: u128;
    let mut _529: &state::perp_market::PerpMarket;
    let mut _530: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _531: &state::spot_market::SpotMarket;
    let _532: &state::spot_market::SpotMarket;
    let mut _533: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _534: &state::spot_market::SpotBalanceType;
    let _535: &state::spot_market::SpotBalanceType;
    let mut _536: &state::perp_market::PoolBalance;
    let _537: &state::perp_market::PerpMarket;
    let mut _538: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _539: isize;
    let mut _541: !;
    let mut _542: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _544: isize;
    let mut _546: !;
    let mut _547: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _550: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _551: std::result::Result<i128, error::ErrorCode>;
    let mut _552: u128;
    let mut _553: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _554: std::result::Result<u128, error::ErrorCode>;
    let mut _555: u128;
    let mut _556: u128;
    let mut _557: isize;
    let mut _559: !;
    let mut _560: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _562: isize;
    let mut _564: !;
    let mut _565: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _568: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _569: std::result::Result<i128, error::ErrorCode>;
    let mut _570: &state::perp_market::AMM;
    let _571: &state::perp_market::AMM;
    let _572: &state::perp_market::PerpMarket;
    let mut _573: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _574: i64;
    let mut _575: isize;
    let mut _577: !;
    let mut _578: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _581: bool;
    let mut _582: i128;
    let mut _583: i128;
    let mut _584: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _585: std::result::Result<i128, error::ErrorCode>;
    let mut _586: i128;
    let mut _587: i128;
    let mut _588: i128;
    let mut _589: isize;
    let mut _591: !;
    let mut _592: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _595: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _596: std::result::Result<i128, error::ErrorCode>;
    let mut _597: &state::user::PerpPosition;
    let _598: usize;
    let mut _599: usize;
    let mut _600: bool;
    let mut _601: i64;
    let mut _602: i128;
    let mut _603: isize;
    let mut _605: !;
    let mut _606: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _609: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _610: std::result::Result<i128, error::ErrorCode>;
    let mut _611: &mut state::perp_market::PerpMarket;
    let mut _612: &mut state::perp_market::PerpMarket;
    let mut _613: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _614: &mut state::spot_market::SpotMarket;
    let mut _615: &mut state::spot_market::SpotMarket;
    let mut _616: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _617: &state::user::SpotPosition;
    let _618: &state::user::SpotPosition;
    let mut _619: &state::user::User;
    let mut _620: i128;
    let mut _621: i64;
    let mut _622: isize;
    let mut _624: !;
    let mut _625: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _627: ();
    let mut _628: bool;
    let mut _629: u128;
    let mut _630: &state::spot_market::SpotMarket;
    let mut _631: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _632: u128;
    let mut _633: bool;
    let mut _634: u128;
    let mut _635: &state::spot_market::SpotMarket;
    let mut _636: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _637: u128;
    let mut _638: bool;
    let mut _639: &state::settle_pnl_mode::SettlePnlMode;
    let mut _640: &state::settle_pnl_mode::SettlePnlMode;
    let _641: state::settle_pnl_mode::SettlePnlMode;
    let _642: ();
    let mut _643: &str;
    let _644: &str;
    let mut _645: state::settle_pnl_mode::SettlePnlMode;
    let _646: ();
    let mut _647: bool;
    let mut _648: i128;
    let mut _649: !;
    let mut _652: std::fmt::Arguments<'_>;
    let mut _653: &[&str];
    let mut _654: &[&str; 1];
    let _655: &[&str; 1];
    let _656: [&str; 1];
    let mut _657: &[core::fmt::rt::Argument<'_>];
    let mut _658: &[core::fmt::rt::Argument<'_>; 1];
    let _659: &[core::fmt::rt::Argument<'_>; 1];
    let _660: [core::fmt::rt::Argument<'_>; 1];
    let mut _661: core::fmt::rt::Argument<'_>;
    let mut _662: &u16;
    let _663: &u16;
    let mut _664: state::settle_pnl_mode::SettlePnlMode;
    let mut _665: error::ErrorCode;
    let mut _666: u16;
    let mut _667: &str;
    let _668: &str;
    let mut _669: &std::string::String;
    let _670: &std::string::String;
    let mut _671: bool;
    let mut _672: i128;
    let mut _673: !;
    let mut _676: std::fmt::Arguments<'_>;
    let mut _677: &[&str];
    let mut _678: &[&str; 1];
    let _679: &[&str; 1];
    let _680: [&str; 1];
    let mut _681: &[core::fmt::rt::Argument<'_>];
    let mut _682: &[core::fmt::rt::Argument<'_>; 1];
    let _683: &[core::fmt::rt::Argument<'_>; 1];
    let _684: [core::fmt::rt::Argument<'_>; 1];
    let mut _685: core::fmt::rt::Argument<'_>;
    let mut _686: &u16;
    let _687: &u16;
    let mut _688: state::settle_pnl_mode::SettlePnlMode;
    let mut _689: error::ErrorCode;
    let mut _690: u16;
    let mut _691: &str;
    let _692: &str;
    let mut _693: &std::string::String;
    let _694: &std::string::String;
    let mut _696: bool;
    let mut _697: i128;
    let mut _698: bool;
    let mut _699: i128;
    let mut _700: bool;
    let mut _701: i128;
    let mut _702: bool;
    let mut _703: i64;
    let mut _704: bool;
    let mut _705: &state::user::User;
    let mut _706: bool;
    let mut _707: bool;
    let mut _708: &anchor_lang::prelude::Pubkey;
    let mut _709: &anchor_lang::prelude::Pubkey;
    let mut _710: &anchor_lang::prelude::Pubkey;
    let mut _711: &anchor_lang::prelude::Pubkey;
    let _712: ();
    let mut _713: bool;
    let mut _714: !;
    let mut _717: std::fmt::Arguments<'_>;
    let mut _718: &[&str];
    let mut _719: &[&str; 2];
    let _720: &[&str; 2];
    let _721: [&str; 2];
    let mut _722: &[core::fmt::rt::Argument<'_>];
    let mut _723: &[core::fmt::rt::Argument<'_>; 1];
    let _724: &[core::fmt::rt::Argument<'_>; 1];
    let _725: [core::fmt::rt::Argument<'_>; 1];
    let mut _726: core::fmt::rt::Argument<'_>;
    let mut _727: &u16;
    let _728: &u16;
    let mut _729: state::settle_pnl_mode::SettlePnlMode;
    let mut _730: error::ErrorCode;
    let mut _731: u16;
    let mut _732: &str;
    let _733: &str;
    let mut _734: &std::string::String;
    let _735: &std::string::String;
    let _736: ();
    let mut _737: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _738: std::result::Result<(), error::ErrorCode>;
    let mut _739: u128;
    let mut _740: i128;
    let mut _741: &state::spot_market::SpotBalanceType;
    let mut _742: bool;
    let mut _743: i128;
    let _744: &state::spot_market::SpotBalanceType;
    let _745: state::spot_market::SpotBalanceType;
    let _746: &state::spot_market::SpotBalanceType;
    let _747: state::spot_market::SpotBalanceType;
    let mut _748: &mut state::spot_market::SpotMarket;
    let mut _749: &mut state::spot_market::SpotMarket;
    let mut _750: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _751: &mut dyn state::spot_market::SpotBalance;
    let mut _752: &mut state::user::SpotPosition;
    let mut _753: &mut state::user::SpotPosition;
    let mut _754: &mut state::user::User;
    let mut _755: isize;
    let mut _757: !;
    let mut _758: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _760: ();
    let mut _761: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _762: std::result::Result<(), error::ErrorCode>;
    let mut _763: &mut state::user::PerpPosition;
    let mut _764: &mut state::user::PerpPosition;
    let _765: usize;
    let mut _766: usize;
    let mut _767: bool;
    let mut _768: &mut state::perp_market::PerpMarket;
    let mut _769: &mut state::perp_market::PerpMarket;
    let mut _770: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _771: i64;
    let mut _772: i64;
    let mut _773: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _774: std::result::Result<i64, error::ErrorCode>;
    let mut _775: i128;
    let mut _776: isize;
    let mut _778: !;
    let mut _779: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _781: bool;
    let mut _782: isize;
    let mut _784: !;
    let mut _785: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _787: ();
    let mut _788: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _789: std::result::Result<(), error::ErrorCode>;
    let mut _790: &mut state::user::User;
    let mut _791: usize;
    let mut _792: i64;
    let mut _793: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _794: std::result::Result<i64, error::ErrorCode>;
    let mut _795: i128;
    let mut _796: isize;
    let mut _798: !;
    let mut _799: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _801: isize;
    let mut _803: !;
    let mut _804: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _807: usize;
    let mut _808: usize;
    let mut _809: bool;
    let _811: usize;
    let mut _812: usize;
    let mut _813: bool;
    let _814: ();
    let mut _815: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _816: std::result::Result<(), error::ErrorCode>;
    let mut _817: &state::perp_market::PerpMarket;
    let _818: &state::perp_market::PerpMarket;
    let mut _819: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _820: isize;
    let mut _822: !;
    let mut _823: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _825: ();
    let mut _826: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _827: std::result::Result<(), error::ErrorCode>;
    let mut _828: &state::user::PerpPosition;
    let _829: &state::user::PerpPosition;
    let _830: usize;
    let mut _831: usize;
    let mut _832: bool;
    let mut _833: &state::perp_market::PerpMarket;
    let _834: &state::perp_market::PerpMarket;
    let mut _835: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _836: isize;
    let mut _838: !;
    let mut _839: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _841: ();
    let _842: ();
    let mut _843: &[&[u8]];
    let mut _844: &[&[u8]; 1];
    let _845: &[&[u8]; 1];
    let _846: [&[u8]; 1];
    let mut _847: &[u8];
    let _848: &[u8];
    let mut _849: &std::vec::Vec<u8>;
    let _850: &std::vec::Vec<u8>;
    let _851: std::vec::Vec<u8>;
    let mut _852: &state::events::SettlePnlRecord;
    let _853: &state::events::SettlePnlRecord;
    let _854: state::events::SettlePnlRecord;
    let mut _855: i64;
    let mut _856: anchor_lang::prelude::Pubkey;
    let mut _857: u16;
    let mut _858: i128;
    let mut _859: i64;
    let mut _860: i64;
    let mut _861: i64;
    let mut _862: i64;
    let mut _863: state::events::SettlePnlExplanation;
    let mut _865: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _866: std::result::Result<u128, error::ErrorCode>;
    let mut _867: &state::spot_market::SpotMarket;
    let _868: &state::spot_market::SpotMarket;
    let mut _869: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _870: isize;
    let mut _872: !;
    let mut _873: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _875: ();
    let mut _876: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _877: std::result::Result<(), error::ErrorCode>;
    let mut _878: bool;
    let mut _879: u128;
    let mut _880: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _881: std::result::Result<u128, error::ErrorCode>;
    let mut _882: u128;
    let mut _883: u128;
    let mut _884: isize;
    let mut _886: !;
    let mut _887: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _889: ();
    let _891: ();
    let mut _892: &str;
    let _893: &str;
    let mut _894: &std::string::String;
    let _895: &std::string::String;
    let _896: std::string::String;
    let mut _898: std::fmt::Arguments<'_>;
    let mut _899: &[&str];
    let mut _900: &[&str; 2];
    let _901: &[&str; 2];
    let _902: [&str; 2];
    let mut _903: &[core::fmt::rt::Argument<'_>];
    let mut _904: &[core::fmt::rt::Argument<'_>; 1];
    let _905: &[core::fmt::rt::Argument<'_>; 1];
    let _906: [core::fmt::rt::Argument<'_>; 1];
    let mut _907: core::fmt::rt::Argument<'_>;
    let mut _908: &error::ErrorCode;
    let _909: &error::ErrorCode;
    let _910: ();
    let mut _911: &str;
    let _912: &str;
    let mut _913: &std::string::String;
    let _914: &std::string::String;
    let _915: std::string::String;
    let mut _917: std::fmt::Arguments<'_>;
    let mut _918: &[&str];
    let mut _919: &[&str; 2];
    let _920: &[&str; 2];
    let _921: [&str; 2];
    let mut _922: &[core::fmt::rt::Argument<'_>];
    let mut _923: &[core::fmt::rt::Argument<'_>; 2];
    let _924: &[core::fmt::rt::Argument<'_>; 2];
    let _925: [core::fmt::rt::Argument<'_>; 2];
    let mut _926: core::fmt::rt::Argument<'_>;
    let mut _927: &u128;
    let _928: &u128;
    let mut _929: core::fmt::rt::Argument<'_>;
    let mut _930: &u128;
    let _931: &u128;
    let mut _932: error::ErrorCode;
    let mut _933: isize;
    let mut _935: !;
    let mut _936: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _938: ();
    let mut _958: bool;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    let mut _966: isize;
    let mut _967: isize;
    let mut _968: isize;
    let mut _969: isize;
    let mut _970: isize;
    let mut _971: isize;
    let mut _972: isize;
    let mut _973: isize;
    let mut _974: isize;
    let mut _975: isize;
    let mut _976: isize;
    let mut _977: isize;
    let mut _978: isize;
    scope 1 {
        debug error_code => _18;
        let _25: std::string::String;
        let mut _957: &[&str; 2];
        scope 2 {
            debug res => _25;
        }
    }
    scope 3 {
        debug residual => _40;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _43;
        scope 6 {
        }
    }
    scope 7 {
        debug now => _44;
        let _45: u128;
        scope 8 {
            debug tvl_before => _45;
            let _46: u128;
            scope 9 {
                debug deposits_balance_before => _46;
                let _47: u128;
                scope 10 {
                    debug borrows_balance_before => _47;
                    let _49: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _58: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let mut _89: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                    let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _99: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                    scope 11 {
                        debug spot_market => _49;
                        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _71: ();
                        let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _82: u128;
                        scope 16 {
                            debug residual => _68;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _71;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug residual => _79;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _82;
                            scope 23 {
                            }
                        }
                    }
                    scope 12 {
                        debug residual => _55;
                        scope 13 {
                        }
                    }
                    scope 14 {
                        debug val => _58;
                        scope 15 {
                        }
                    }
                    scope 24 {
                        debug market => _89;
                        let _100: i64;
                        let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _115: &state::oracle::OraclePriceData;
                        scope 29 {
                            debug oracle_price => _100;
                            let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _129: bool;
                            let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _144: ();
                            let _147: usize;
                            let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _157: usize;
                            scope 34 {
                                debug residual => _126;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug val => _129;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug residual => _141;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug val => _144;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug position_index => _147;
                                let _158: i128;
                                let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _170: i128;
                                scope 47 {
                                    debug unrealized_pnl => _158;
                                    let _174: bool;
                                    let _176: bool;
                                    let _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _187: bool;
                                    let _211: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                    let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _220: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                    scope 52 {
                                        debug meets_margin_requirement => _174;
                                        let _190: std::string::String;
                                        let _191: std::string::String;
                                        let mut _956: &[&str; 1];
                                        scope 58 {
                                            debug msg => _190;
                                        }
                                        scope 59 {
                                            debug res => _191;
                                        }
                                    }
                                    scope 53 {
                                        debug meets_margin_requirement => _176;
                                    }
                                    scope 54 {
                                        debug residual => _184;
                                        scope 55 {
                                        }
                                    }
                                    scope 56 {
                                        debug val => _187;
                                        scope 57 {
                                        }
                                    }
                                    scope 60 {
                                        debug spot_market => _211;
                                        let _221: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                        let _229: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _232: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                        scope 65 {
                                            debug perp_market => _221;
                                            let _238: bool;
                                            let _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _249: bool;
                                            let _385: std::string::String;
                                            let _386: std::string::String;
                                            let _406: i64;
                                            let mut _939: &[&str; 2];
                                            scope 70 {
                                                debug healthy_oracle => _238;
                                                let _251: math::oracle::OracleValidity;
                                                let _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _279: u64;
                                                let _281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _284: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
                                                scope 75 {
                                                    debug oracle_validity => _251;
                                                    let _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _295: bool;
                                                    let _304: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _307: bool;
                                                    let _313: std::string::String;
                                                    let _314: std::string::String;
                                                    let _344: std::string::String;
                                                    let _345: std::string::String;
                                                    let mut _954: &[&str; 5];
                                                    let mut _955: &[&str; 2];
                                                    scope 84 {
                                                        debug residual => _292;
                                                        scope 85 {
                                                        }
                                                    }
                                                    scope 86 {
                                                        debug val => _295;
                                                        scope 87 {
                                                        }
                                                    }
                                                    scope 88 {
                                                        debug residual => _304;
                                                        scope 89 {
                                                        }
                                                    }
                                                    scope 90 {
                                                        debug val => _307;
                                                        scope 91 {
                                                        }
                                                    }
                                                    scope 92 {
                                                        debug msg => _313;
                                                    }
                                                    scope 93 {
                                                        debug res => _314;
                                                    }
                                                    scope 94 {
                                                        debug msg => _344;
                                                    }
                                                    scope 95 {
                                                        debug res => _345;
                                                    }
                                                }
                                                scope 76 {
                                                    debug residual => _276;
                                                    scope 77 {
                                                    }
                                                }
                                                scope 78 {
                                                    debug val => _279;
                                                    scope 79 {
                                                    }
                                                }
                                                scope 80 {
                                                    debug residual => _281;
                                                    scope 81 {
                                                    }
                                                }
                                                scope 82 {
                                                    debug val => _284;
                                                    scope 83 {
                                                    }
                                                }
                                            }
                                            scope 71 {
                                                debug residual => _246;
                                                scope 72 {
                                                }
                                            }
                                            scope 73 {
                                                debug val => _249;
                                                scope 74 {
                                                }
                                            }
                                            scope 96 {
                                                debug msg => _385;
                                            }
                                            scope 97 {
                                                debug res => _386;
                                            }
                                            scope 98 {
                                                debug base_asset_amount => _406;
                                                let _420: std::string::String;
                                                let _421: std::string::String;
                                                let _448: std::string::String;
                                                let _449: std::string::String;
                                                let _482: std::string::String;
                                                let _483: std::string::String;
                                                let _503: u128;
                                                let _518: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _521: u128;
                                                let mut _940: &[&str; 2];
                                                let mut _941: &[&str; 2];
                                                let mut _950: &state::perp_market::MarketStatus;
                                                let mut _951: &[&str; 2];
                                                let mut _952: &state::perp_market::MarketStatus;
                                                let mut _953: &state::perp_market::MarketStatus;
                                                scope 99 {
                                                    debug msg => _420;
                                                }
                                                scope 100 {
                                                    debug res => _421;
                                                }
                                                scope 101 {
                                                    debug msg => _448;
                                                }
                                                scope 102 {
                                                    debug res => _449;
                                                }
                                                scope 103 {
                                                    debug msg => _482;
                                                }
                                                scope 104 {
                                                    debug res => _483;
                                                }
                                                scope 105 {
                                                    debug pnl_pool_token_amount => _503;
                                                    let _522: u128;
                                                    let _540: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _543: u128;
                                                    let _545: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _548: u128;
                                                    scope 110 {
                                                        debug fraction_of_fee_pool_token_amount => _522;
                                                        let _549: i128;
                                                        let _558: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _561: u128;
                                                        let _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _566: i128;
                                                        scope 119 {
                                                            debug pnl_tokens_available => _549;
                                                            let _567: i128;
                                                            let _576: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _579: i128;
                                                            scope 128 {
                                                                debug net_user_pnl => _567;
                                                                let _580: i128;
                                                                let _590: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _593: i128;
                                                                scope 133 {
                                                                    debug max_pnl_pool_excess => _580;
                                                                    let _594: i128;
                                                                    let _604: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _607: i128;
                                                                    scope 138 {
                                                                        debug user_unsettled_pnl => _594;
                                                                        let _608: i128;
                                                                        let _623: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _626: i128;
                                                                        scope 143 {
                                                                            debug pnl_to_settle_with_user => _608;
                                                                            let _650: std::string::String;
                                                                            let _651: std::string::String;
                                                                            let _674: std::string::String;
                                                                            let _675: std::string::String;
                                                                            let _695: bool;
                                                                            let mut _942: &[&str; 1];
                                                                            let mut _943: &[&str; 1];
                                                                            let mut _949: &state::settle_pnl_mode::SettlePnlMode;
                                                                            scope 148 {
                                                                                debug msg => _650;
                                                                            }
                                                                            scope 149 {
                                                                                debug res => _651;
                                                                            }
                                                                            scope 150 {
                                                                                debug msg => _674;
                                                                            }
                                                                            scope 151 {
                                                                                debug res => _675;
                                                                            }
                                                                            scope 152 {
                                                                                debug user_must_settle_themself => _695;
                                                                                let _715: std::string::String;
                                                                                let _716: std::string::String;
                                                                                let _756: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _759: ();
                                                                                let _777: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _780: i64;
                                                                                let _783: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _786: ();
                                                                                let _797: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _800: i64;
                                                                                let _802: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _805: ();
                                                                                let _806: i64;
                                                                                let mut _944: &[&str; 2];
                                                                                let mut _947: &state::spot_market::SpotBalanceType;
                                                                                let mut _948: &state::spot_market::SpotBalanceType;
                                                                                scope 153 {
                                                                                    debug msg => _715;
                                                                                }
                                                                                scope 154 {
                                                                                    debug res => _716;
                                                                                }
                                                                                scope 155 {
                                                                                    debug residual => _756;
                                                                                    scope 156 {
                                                                                    }
                                                                                }
                                                                                scope 157 {
                                                                                    debug val => _759;
                                                                                    scope 158 {
                                                                                    }
                                                                                }
                                                                                scope 159 {
                                                                                    debug residual => _777;
                                                                                    scope 160 {
                                                                                    }
                                                                                }
                                                                                scope 161 {
                                                                                    debug val => _780;
                                                                                    scope 162 {
                                                                                    }
                                                                                }
                                                                                scope 163 {
                                                                                    debug residual => _783;
                                                                                    scope 164 {
                                                                                    }
                                                                                }
                                                                                scope 165 {
                                                                                    debug val => _786;
                                                                                    scope 166 {
                                                                                    }
                                                                                }
                                                                                scope 167 {
                                                                                    debug residual => _797;
                                                                                    scope 168 {
                                                                                    }
                                                                                }
                                                                                scope 169 {
                                                                                    debug val => _800;
                                                                                    scope 170 {
                                                                                    }
                                                                                }
                                                                                scope 171 {
                                                                                    debug residual => _802;
                                                                                    scope 172 {
                                                                                    }
                                                                                }
                                                                                scope 173 {
                                                                                    debug val => _805;
                                                                                    scope 174 {
                                                                                    }
                                                                                }
                                                                                scope 175 {
                                                                                    debug quote_asset_amount_after => _806;
                                                                                    let _810: i64;
                                                                                    scope 176 {
                                                                                        debug quote_entry_amount => _810;
                                                                                        let _821: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _824: ();
                                                                                        let _837: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _840: ();
                                                                                        let _864: u128;
                                                                                        let _871: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _874: u128;
                                                                                        scope 177 {
                                                                                            debug residual => _821;
                                                                                            scope 178 {
                                                                                            }
                                                                                        }
                                                                                        scope 179 {
                                                                                            debug val => _824;
                                                                                            scope 180 {
                                                                                            }
                                                                                        }
                                                                                        scope 181 {
                                                                                            debug residual => _837;
                                                                                            scope 182 {
                                                                                            }
                                                                                        }
                                                                                        scope 183 {
                                                                                            debug val => _840;
                                                                                            scope 184 {
                                                                                            }
                                                                                        }
                                                                                        scope 185 {
                                                                                            debug tvl_after => _864;
                                                                                            let _885: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _888: u128;
                                                                                            let _890: error::ErrorCode;
                                                                                            let _934: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _937: ();
                                                                                            scope 190 {
                                                                                                debug residual => _885;
                                                                                                scope 191 {
                                                                                                }
                                                                                            }
                                                                                            scope 192 {
                                                                                                debug val => _888;
                                                                                                scope 193 {
                                                                                                }
                                                                                            }
                                                                                            scope 194 {
                                                                                                debug error_code => _890;
                                                                                                let _897: std::string::String;
                                                                                                let _916: std::string::String;
                                                                                                let mut _945: &[&str; 2];
                                                                                                let mut _946: &[&str; 2];
                                                                                                scope 195 {
                                                                                                    debug res => _897;
                                                                                                }
                                                                                                scope 196 {
                                                                                                    debug res => _916;
                                                                                                }
                                                                                            }
                                                                                            scope 197 {
                                                                                                debug residual => _934;
                                                                                                scope 198 {
                                                                                                }
                                                                                            }
                                                                                            scope 199 {
                                                                                                debug val => _937;
                                                                                                scope 200 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 186 {
                                                                                            debug residual => _871;
                                                                                            scope 187 {
                                                                                            }
                                                                                        }
                                                                                        scope 188 {
                                                                                            debug val => _874;
                                                                                            scope 189 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 144 {
                                                                            debug residual => _623;
                                                                            scope 145 {
                                                                            }
                                                                        }
                                                                        scope 146 {
                                                                            debug val => _626;
                                                                            scope 147 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 139 {
                                                                        debug residual => _604;
                                                                        scope 140 {
                                                                        }
                                                                    }
                                                                    scope 141 {
                                                                        debug val => _607;
                                                                        scope 142 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 134 {
                                                                    debug residual => _590;
                                                                    scope 135 {
                                                                    }
                                                                }
                                                                scope 136 {
                                                                    debug val => _593;
                                                                    scope 137 {
                                                                    }
                                                                }
                                                            }
                                                            scope 129 {
                                                                debug residual => _576;
                                                                scope 130 {
                                                                }
                                                            }
                                                            scope 131 {
                                                                debug val => _579;
                                                                scope 132 {
                                                                }
                                                            }
                                                        }
                                                        scope 120 {
                                                            debug residual => _558;
                                                            scope 121 {
                                                            }
                                                        }
                                                        scope 122 {
                                                            debug val => _561;
                                                            scope 123 {
                                                            }
                                                        }
                                                        scope 124 {
                                                            debug residual => _563;
                                                            scope 125 {
                                                            }
                                                        }
                                                        scope 126 {
                                                            debug val => _566;
                                                            scope 127 {
                                                            }
                                                        }
                                                    }
                                                    scope 111 {
                                                        debug residual => _540;
                                                        scope 112 {
                                                        }
                                                    }
                                                    scope 113 {
                                                        debug val => _543;
                                                        scope 114 {
                                                        }
                                                    }
                                                    scope 115 {
                                                        debug residual => _545;
                                                        scope 116 {
                                                        }
                                                    }
                                                    scope 117 {
                                                        debug val => _548;
                                                        scope 118 {
                                                        }
                                                    }
                                                }
                                                scope 106 {
                                                    debug residual => _518;
                                                    scope 107 {
                                                    }
                                                }
                                                scope 108 {
                                                    debug val => _521;
                                                    scope 109 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 66 {
                                            debug residual => _229;
                                            scope 67 {
                                            }
                                        }
                                        scope 68 {
                                            debug val => _232;
                                            scope 69 {
                                            }
                                        }
                                    }
                                    scope 61 {
                                        debug residual => _217;
                                        scope 62 {
                                        }
                                    }
                                    scope 63 {
                                        debug val => _220;
                                        scope 64 {
                                        }
                                    }
                                }
                                scope 48 {
                                    debug residual => _167;
                                    scope 49 {
                                    }
                                }
                                scope 50 {
                                    debug val => _170;
                                    scope 51 {
                                    }
                                }
                            }
                            scope 43 {
                                debug residual => _154;
                                scope 44 {
                                }
                            }
                            scope 45 {
                                debug val => _157;
                                scope 46 {
                                }
                            }
                        }
                        scope 30 {
                            debug residual => _112;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _115;
                            scope 33 {
                            }
                        }
                    }
                    scope 25 {
                        debug residual => _96;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _99;
                        scope 28 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _958 = const false;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_2);
        _15 = User::is_bankrupt(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_16);
        StorageLive(_18);
        _18 = error::ErrorCode::UserBankrupt;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _957 = const _;
        _29 = &(*_957);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_18;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _36) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = ();
        _14 = std::result::Result::<(), error::ErrorCode>::Ok(move _17);
        StorageDead(_17);
        goto -> bb10;
    }

    bb4: {
        StorageDead(_36);
        _34 = [move _35];
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = move _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_32);
        _26 = Arguments::<'_>::new_v1(move _27, move _31) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_31);
        StorageDead(_27);
        _25 = format(move _26) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_26);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        _24 = move _25;
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = <String as Deref>::deref(move _22) -> [return: bb7, unwind: bb473];
    }

    bb7: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb8, unwind: bb473];
    }

    bb8: {
        StorageDead(_20);
        drop(_24) -> [return: bb9, unwind: bb474];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_38);
        _38 = _18;
        _14 = std::result::Result::<(), error::ErrorCode>::Err(move _38);
        StorageDead(_38);
        StorageDead(_18);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_15);
        _13 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_14);
        _39 = discriminant(_13);
        switchInt(move _39) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_43);
        _43 = ((_13 as Continue).0: ());
        _12 = _43;
        StorageDead(_43);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_44);
        _44 = ((*_8).4: i64);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_6);
        _52 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _53) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_40);
        _40 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb456;
    }

    bb16: {
        StorageDead(_53);
        _51 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb17, unwind: bb474];
    }

    bb17: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb18, 1: bb19, otherwise: bb13];
    }

    bb18: {
        StorageLive(_58);
        _58 = move ((_51 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _50 = move _58;
        StorageDead(_58);
        _49 = &mut _50;
        _961 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_49);
        _63 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _64) -> [return: bb21, unwind: bb472];
    }

    bb19: {
        StorageLive(_55);
        _55 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb20, unwind: bb481];
    }

    bb20: {
        StorageDead(_57);
        StorageDead(_55);
        _959 = discriminant(_51);
        StorageDead(_51);
        goto -> bb454;
    }

    bb21: {
        _62 = &mut (*_63);
        StorageDead(_64);
        StorageLive(_65);
        _65 = Option::<&OraclePriceData>::None;
        StorageLive(_66);
        _66 = _44;
        _61 = controller::spot_balance::update_spot_market_cumulative_interest(move _62, move _65, move _66) -> [return: bb22, unwind: bb472];
    }

    bb22: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_62);
        _60 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _61) -> [return: bb23, unwind: bb472];
    }

    bb23: {
        StorageDead(_61);
        _67 = discriminant(_60);
        switchInt(move _67) -> [0: bb24, 1: bb25, otherwise: bb13];
    }

    bb24: {
        StorageLive(_71);
        _71 = ((_60 as Continue).0: ());
        _59 = _71;
        StorageDead(_71);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_49);
        _76 = <RefMut<'_, SpotMarket> as Deref>::deref(move _77) -> [return: bb27, unwind: bb472];
    }

    bb25: {
        StorageLive(_68);
        _68 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb26, unwind: bb472];
    }

    bb26: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb453;
    }

    bb27: {
        _75 = &(*_76);
        StorageDead(_77);
        _74 = SpotMarket::get_tvl(move _75) -> [return: bb28, unwind: bb472];
    }

    bb28: {
        StorageDead(_75);
        _73 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb29, unwind: bb472];
    }

    bb29: {
        StorageDead(_74);
        _78 = discriminant(_73);
        switchInt(move _78) -> [0: bb30, 1: bb31, otherwise: bb13];
    }

    bb30: {
        StorageLive(_82);
        _82 = ((_73 as Continue).0: u128);
        _72 = _82;
        StorageDead(_82);
        _45 = move _72;
        StorageDead(_72);
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_49);
        _84 = <RefMut<'_, SpotMarket> as Deref>::deref(move _85) -> [return: bb33, unwind: bb472];
    }

    bb31: {
        StorageLive(_79);
        _79 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb32, unwind: bb472];
    }

    bb32: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_72);
        StorageDead(_76);
        StorageDead(_73);
        goto -> bb453;
    }

    bb33: {
        StorageDead(_85);
        _83 = ((*_84).11: u128);
        _46 = move _83;
        StorageDead(_83);
        StorageDead(_84);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_49);
        _87 = <RefMut<'_, SpotMarket> as Deref>::deref(move _88) -> [return: bb34, unwind: bb472];
    }

    bb34: {
        StorageDead(_88);
        _86 = ((*_87).12: u128);
        _47 = move _86;
        StorageDead(_86);
        StorageDead(_87);
        _48 = const ();
        drop(_50) -> [return: bb35, unwind: bb474];
    }

    bb35: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_5);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_1;
        _93 = &(*_94);
        _91 = PerpMarketMap::<'_>::get_ref_mut(move _92, move _93) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_93);
        StorageDead(_92);
        _90 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _91) -> [return: bb37, unwind: bb474];
    }

    bb37: {
        StorageDead(_91);
        _95 = discriminant(_90);
        switchInt(move _95) -> [0: bb38, 1: bb39, otherwise: bb13];
    }

    bb38: {
        StorageLive(_99);
        _99 = move ((_90 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _958 = const true;
        _89 = move _99;
        StorageDead(_99);
        _965 = discriminant(_90);
        StorageDead(_94);
        StorageDead(_90);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &mut (*_7);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_89;
        _109 = <RefMut<'_, PerpMarket> as Deref>::deref(move _110) -> [return: bb41, unwind: bb479];
    }

    bb39: {
        StorageLive(_96);
        _96 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb40, unwind: bb480];
    }

    bb40: {
        StorageDead(_98);
        StorageDead(_96);
        _963 = discriminant(_90);
        StorageDead(_94);
        StorageDead(_90);
        goto -> bb452;
    }

    bb41: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = PerpMarket::oracle_id(move _108) -> [return: bb42, unwind: bb479];
    }

    bb42: {
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _103 = OracleMap::<'_>::get_price_data(move _104, move _105) -> [return: bb43, unwind: bb479];
    }

    bb43: {
        StorageDead(_105);
        StorageDead(_104);
        _102 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _103) -> [return: bb44, unwind: bb479];
    }

    bb44: {
        StorageDead(_103);
        _111 = discriminant(_102);
        switchInt(move _111) -> [0: bb45, 1: bb46, otherwise: bb13];
    }

    bb45: {
        StorageLive(_115);
        _115 = ((_102 as Continue).0: &state::oracle::OraclePriceData);
        _101 = _115;
        StorageDead(_115);
        _100 = ((*_101).0: i64);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_89;
        _121 = &(*_122);
        _120 = <RefMut<'_, PerpMarket> as Deref>::deref(move _121) -> [return: bb48, unwind: bb479];
    }

    bb46: {
        StorageLive(_112);
        _112 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb47, unwind: bb479];
    }

    bb47: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb451;
    }

    bb48: {
        _119 = &(*_120);
        StorageDead(_121);
        StorageLive(_123);
        _123 = &(*_9);
        StorageLive(_124);
        _124 = _100;
        _118 = validate_market_within_price_band(move _119, move _123, move _124) -> [return: bb49, unwind: bb479];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_119);
        _117 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _118) -> [return: bb50, unwind: bb479];
    }

    bb50: {
        StorageDead(_118);
        _125 = discriminant(_117);
        switchInt(move _125) -> [0: bb51, 1: bb52, otherwise: bb13];
    }

    bb51: {
        StorageLive(_129);
        _129 = ((_117 as Continue).0: bool);
        _116 = _129;
        StorageDead(_129);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &mut (*_2);
        StorageLive(_134);
        _134 = &(*_4);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &mut _89;
        _137 = &mut (*_138);
        _136 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _137) -> [return: bb54, unwind: bb479];
    }

    bb52: {
        StorageLive(_126);
        _126 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb53, unwind: bb479];
    }

    bb53: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb451;
    }

    bb54: {
        _135 = &mut (*_136);
        StorageDead(_137);
        StorageLive(_139);
        _139 = _44;
        _132 = controller::funding::settle_funding_payment(move _133, move _134, move _135, move _139) -> [return: bb55, unwind: bb479];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        _131 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _132) -> [return: bb56, unwind: bb479];
    }

    bb56: {
        StorageDead(_132);
        _140 = discriminant(_131);
        switchInt(move _140) -> [0: bb57, 1: bb58, otherwise: bb13];
    }

    bb57: {
        StorageLive(_144);
        _144 = ((_131 as Continue).0: ());
        _130 = _144;
        StorageDead(_144);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_145);
        StorageLive(_146);
        _958 = const false;
        _146 = move _89;
        _145 = std::mem::drop::<RefMut<'_, PerpMarket>>(move _146) -> [return: bb60, unwind: bb479];
    }

    bb58: {
        StorageLive(_141);
        _141 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb59, unwind: bb479];
    }

    bb59: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb451;
    }

    bb60: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &((*_2).4: [state::user::PerpPosition; 8]);
        _150 = &(*_151);
        StorageLive(_152);
        _152 = _1;
        _149 = get_position_index(move _150, move _152) -> [return: bb61, unwind: bb479];
    }

    bb61: {
        StorageDead(_152);
        StorageDead(_150);
        _148 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _149) -> [return: bb62, unwind: bb479];
    }

    bb62: {
        StorageDead(_149);
        _153 = discriminant(_148);
        switchInt(move _153) -> [0: bb63, 1: bb64, otherwise: bb13];
    }

    bb63: {
        StorageLive(_157);
        _157 = ((_148 as Continue).0: usize);
        _147 = _157;
        StorageDead(_157);
        StorageDead(_151);
        StorageDead(_148);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _147;
        _163 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _164 = Lt(_162, _163);
        assert(move _164, "index out of bounds: the length is {} but the index is {}", move _163, _162) -> [success: bb66, unwind: bb479];
    }

    bb64: {
        StorageLive(_154);
        _154 = ((_148 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb65, unwind: bb479];
    }

    bb65: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_148);
        goto -> bb450;
    }

    bb66: {
        _161 = &((*_2).4: [state::user::PerpPosition; 8])[_162];
        StorageLive(_165);
        _165 = _100;
        _160 = PerpPosition::get_unrealized_pnl(move _161, move _165) -> [return: bb67, unwind: bb479];
    }

    bb67: {
        StorageDead(_165);
        StorageDead(_161);
        _159 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _160) -> [return: bb68, unwind: bb479];
    }

    bb68: {
        StorageDead(_160);
        _166 = discriminant(_159);
        switchInt(move _166) -> [0: bb69, 1: bb70, otherwise: bb13];
    }

    bb69: {
        StorageLive(_170);
        _170 = ((_159 as Continue).0: i128);
        _158 = _170;
        StorageDead(_170);
        StorageDead(_162);
        StorageDead(_159);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _158;
        _172 = Lt(move _173, const 0_i128);
        switchInt(move _172) -> [0: bb73, otherwise: bb72];
    }

    bb70: {
        StorageLive(_167);
        _167 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb71, unwind: bb479];
    }

    bb71: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_162);
        StorageDead(_159);
        goto -> bb449;
    }

    bb72: {
        StorageDead(_173);
        StorageLive(_174);
        _175 = discriminant(_10);
        switchInt(move _175) -> [0: bb74, 1: bb75, otherwise: bb13];
    }

    bb73: {
        StorageDead(_173);
        _171 = const ();
        goto -> bb89;
    }

    bb74: {
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &(*_2);
        StorageLive(_180);
        _180 = &(*_5);
        StorageLive(_181);
        _181 = &(*_6);
        StorageLive(_182);
        _182 = &mut (*_7);
        _178 = meets_settle_pnl_maintenance_margin_requirement(move _179, move _180, move _181, move _182) -> [return: bb76, unwind: bb479];
    }

    bb75: {
        StorageLive(_176);
        _176 = ((_10 as Some).0: bool);
        _174 = _176;
        StorageDead(_176);
        goto -> bb81;
    }

    bb76: {
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        _177 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _178) -> [return: bb77, unwind: bb479];
    }

    bb77: {
        StorageDead(_178);
        _183 = discriminant(_177);
        switchInt(move _183) -> [0: bb78, 1: bb79, otherwise: bb13];
    }

    bb78: {
        StorageLive(_187);
        _187 = ((_177 as Continue).0: bool);
        _174 = _187;
        StorageDead(_187);
        StorageDead(_177);
        goto -> bb81;
    }

    bb79: {
        StorageLive(_184);
        _184 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_186);
        _186 = _184;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _186) -> [return: bb80, unwind: bb479];
    }

    bb80: {
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_177);
        goto -> bb448;
    }

    bb81: {
        StorageLive(_188);
        _188 = _174;
        switchInt(move _188) -> [0: bb82, otherwise: bb88];
    }

    bb82: {
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _956 = const _;
        _195 = &(*_956);
        _194 = &(*_195);
        _193 = move _194 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_194);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &_1;
        _202 = &(*_203);
        _201 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _202) -> [return: bb83, unwind: bb479];
    }

    bb83: {
        StorageDead(_202);
        _200 = [move _201];
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = move _198 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_198);
        _192 = Arguments::<'_>::new_v1(move _193, move _197) -> [return: bb84, unwind: bb479];
    }

    bb84: {
        StorageDead(_197);
        StorageDead(_193);
        _191 = format(move _192) -> [return: bb85, unwind: bb479];
    }

    bb85: {
        StorageDead(_192);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_195);
        _190 = move _191;
        StorageDead(_191);
        StorageLive(_204);
        _204 = _11;
        StorageLive(_205);
        _205 = error::ErrorCode::InsufficientCollateralForSettlingPNL;
        StorageLive(_206);
        _206 = _1;
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_190;
        _209 = &(*_210);
        _208 = <String as Deref>::deref(move _209) -> [return: bb86, unwind: bb471];
    }

    bb86: {
        _207 = &(*_208);
        StorageDead(_209);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _204, move _205, move _206, move _207) -> [return: bb87, unwind: bb471];
    }

    bb87: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_210);
        StorageDead(_208);
        drop(_190) -> [return: bb447, unwind: bb479];
    }

    bb88: {
        _171 = const ();
        StorageDead(_188);
        StorageDead(_174);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_172);
        StorageDead(_171);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &(*_6);
        _214 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _215) -> [return: bb90, unwind: bb479];
    }

    bb90: {
        StorageDead(_215);
        _213 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _214) -> [return: bb91, unwind: bb479];
    }

    bb91: {
        StorageDead(_214);
        _216 = discriminant(_213);
        switchInt(move _216) -> [0: bb92, 1: bb93, otherwise: bb13];
    }

    bb92: {
        StorageLive(_220);
        _220 = move ((_213 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _212 = move _220;
        StorageDead(_220);
        _211 = &mut _212;
        _969 = discriminant(_213);
        StorageDead(_213);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &(*_5);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_1;
        _226 = &(*_227);
        _224 = PerpMarketMap::<'_>::get_ref_mut(move _225, move _226) -> [return: bb95, unwind: bb470];
    }

    bb93: {
        StorageLive(_217);
        _217 = ((_213 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb94, unwind: bb477];
    }

    bb94: {
        StorageDead(_219);
        StorageDead(_217);
        _967 = discriminant(_213);
        StorageDead(_213);
        goto -> bb446;
    }

    bb95: {
        StorageDead(_226);
        StorageDead(_225);
        _223 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _224) -> [return: bb96, unwind: bb470];
    }

    bb96: {
        StorageDead(_224);
        _228 = discriminant(_223);
        switchInt(move _228) -> [0: bb97, 1: bb98, otherwise: bb13];
    }

    bb97: {
        StorageLive(_232);
        _232 = move ((_223 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _222 = move _232;
        StorageDead(_232);
        _221 = &mut _222;
        _973 = discriminant(_223);
        StorageDead(_227);
        StorageDead(_223);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &(*_221);
        _236 = <RefMut<'_, PerpMarket> as Deref>::deref(move _237) -> [return: bb100, unwind: bb469];
    }

    bb98: {
        StorageLive(_229);
        _229 = ((_223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_231);
        _231 = _229;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _231) -> [return: bb99, unwind: bb476];
    }

    bb99: {
        StorageDead(_231);
        StorageDead(_229);
        _971 = discriminant(_223);
        StorageDead(_227);
        StorageDead(_223);
        goto -> bb445;
    }

    bb100: {
        StorageDead(_237);
        _235 = (((*_236).1: state::perp_market::AMM).70: u8);
        _234 = Gt(move _235, const 0_u8);
        switchInt(move _234) -> [0: bb165, otherwise: bb101];
    }

    bb101: {
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &(*_221);
        _242 = <RefMut<'_, PerpMarket> as Deref>::deref(move _243) -> [return: bb102, unwind: bb469];
    }

    bb102: {
        StorageDead(_243);
        _241 = &((*_242).1: state::perp_market::AMM);
        StorageLive(_244);
        _244 = ((*_7).3: u64);
        _240 = AMM::is_recent_oracle_valid(move _241, move _244) -> [return: bb103, unwind: bb469];
    }

    bb103: {
        StorageDead(_244);
        StorageDead(_241);
        _239 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _240) -> [return: bb104, unwind: bb469];
    }

    bb104: {
        StorageDead(_240);
        _245 = discriminant(_239);
        switchInt(move _245) -> [0: bb105, 1: bb106, otherwise: bb13];
    }

    bb105: {
        StorageLive(_249);
        _249 = ((_239 as Continue).0: bool);
        _238 = _249;
        StorageDead(_249);
        StorageDead(_242);
        StorageDead(_239);
        StorageLive(_250);
        _250 = _238;
        switchInt(move _250) -> [0: bb109, otherwise: bb108];
    }

    bb106: {
        StorageLive(_246);
        _246 = ((_239 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_248);
        _248 = _246;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _248) -> [return: bb107, unwind: bb469];
    }

    bb107: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_242);
        StorageDead(_239);
        goto -> bb443;
    }

    bb108: {
        _233 = const ();
        goto -> bb164;
    }

    bb109: {
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &mut (*_7);
        StorageLive(_256);
        _256 = state::user::MarketType::Perp;
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &(*_221);
        _258 = <RefMut<'_, PerpMarket> as Deref>::deref(move _259) -> [return: bb110, unwind: bb469];
    }

    bb110: {
        StorageDead(_259);
        _257 = ((*_258).21: u16);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &(*_221);
        _264 = <RefMut<'_, PerpMarket> as Deref>::deref(move _265) -> [return: bb111, unwind: bb469];
    }

    bb111: {
        _263 = &(*_264);
        StorageDead(_265);
        _262 = PerpMarket::oracle_id(move _263) -> [return: bb112, unwind: bb469];
    }

    bb112: {
        StorageDead(_263);
        _261 = &_262;
        _260 = &(*_261);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &(*_221);
        _267 = <RefMut<'_, PerpMarket> as Deref>::deref(move _268) -> [return: bb113, unwind: bb469];
    }

    bb113: {
        StorageDead(_268);
        _266 = ((((*_267).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &(*_221);
        _273 = <RefMut<'_, PerpMarket> as Deref>::deref(move _274) -> [return: bb114, unwind: bb469];
    }

    bb114: {
        _272 = (*_273);
        StorageDead(_274);
        _271 = PerpMarket::get_max_confidence_interval_multiplier(move _272) -> [return: bb115, unwind: bb469];
    }

    bb115: {
        StorageDead(_272);
        _270 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _271) -> [return: bb116, unwind: bb469];
    }

    bb116: {
        StorageDead(_271);
        _275 = discriminant(_270);
        switchInt(move _275) -> [0: bb117, 1: bb118, otherwise: bb13];
    }

    bb117: {
        StorageLive(_279);
        _279 = ((_270 as Continue).0: u64);
        _269 = _279;
        StorageDead(_279);
        _254 = OracleMap::<'_>::get_price_data_and_validity(move _255, move _256, move _257, move _260, move _266, move _269, const 0_i8) -> [return: bb120, unwind: bb469];
    }

    bb118: {
        StorageLive(_276);
        _276 = ((_270 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_278);
        _278 = _276;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _278) -> [return: bb119, unwind: bb469];
    }

    bb119: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        goto -> bb441;
    }

    bb120: {
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        _253 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as Try>::branch(move _254) -> [return: bb121, unwind: bb469];
    }

    bb121: {
        StorageDead(_254);
        _280 = discriminant(_253);
        switchInt(move _280) -> [0: bb122, 1: bb123, otherwise: bb13];
    }

    bb122: {
        StorageLive(_284);
        _284 = ((_253 as Continue).0: (&state::oracle::OraclePriceData, math::oracle::OracleValidity));
        _252 = _284;
        StorageDead(_284);
        StorageLive(_251);
        _251 = (_252.1: math::oracle::OracleValidity);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = _251;
        StorageLive(_289);
        StorageLive(_290);
        _290 = DriftAction::SettlePnl;
        _289 = Option::<DriftAction>::Some(move _290);
        StorageDead(_290);
        _287 = is_oracle_valid_for_action(move _288, move _289) -> [return: bb125, unwind: bb469];
    }

    bb123: {
        StorageLive(_281);
        _281 = ((_253 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_283);
        _283 = _281;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _283) -> [return: bb124, unwind: bb469];
    }

    bb124: {
        StorageDead(_283);
        StorageDead(_281);
        goto -> bb441;
    }

    bb125: {
        StorageDead(_289);
        StorageDead(_288);
        _286 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _287) -> [return: bb126, unwind: bb469];
    }

    bb126: {
        StorageDead(_287);
        _291 = discriminant(_286);
        switchInt(move _291) -> [0: bb127, 1: bb128, otherwise: bb13];
    }

    bb127: {
        StorageLive(_295);
        _295 = ((_286 as Continue).0: bool);
        _285 = _295;
        StorageDead(_295);
        switchInt(move _285) -> [0: bb131, otherwise: bb130];
    }

    bb128: {
        StorageLive(_292);
        _292 = ((_286 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_294);
        _294 = _292;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _294) -> [return: bb129, unwind: bb469];
    }

    bb129: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_286);
        goto -> bb440;
    }

    bb130: {
        StorageDead(_286);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &(*_221);
        _300 = <RefMut<'_, PerpMarket> as Deref>::deref(move _301) -> [return: bb132, unwind: bb469];
    }

    bb131: {
        StorageDead(_286);
        goto -> bb139;
    }

    bb132: {
        _299 = &(*_300);
        StorageDead(_301);
        StorageLive(_302);
        _302 = _100;
        _298 = PerpMarket::is_price_divergence_ok_for_settle_pnl(move _299, move _302) -> [return: bb133, unwind: bb469];
    }

    bb133: {
        StorageDead(_302);
        StorageDead(_299);
        _297 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _298) -> [return: bb134, unwind: bb469];
    }

    bb134: {
        StorageDead(_298);
        _303 = discriminant(_297);
        switchInt(move _303) -> [0: bb135, 1: bb136, otherwise: bb13];
    }

    bb135: {
        StorageLive(_307);
        _307 = ((_297 as Continue).0: bool);
        _296 = _307;
        StorageDead(_307);
        switchInt(move _296) -> [0: bb139, otherwise: bb138];
    }

    bb136: {
        StorageLive(_304);
        _304 = ((_297 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_306);
        _306 = _304;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _306) -> [return: bb137, unwind: bb469];
    }

    bb137: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_300);
        StorageDead(_297);
        goto -> bb439;
    }

    bb138: {
        StorageDead(_300);
        StorageDead(_297);
        _233 = const ();
        goto -> bb163;
    }

    bb139: {
        StorageDead(_300);
        StorageDead(_297);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &(*_221);
        _310 = <RefMut<'_, PerpMarket> as Deref>::deref(move _311) -> [return: bb140, unwind: bb469];
    }

    bb140: {
        StorageDead(_311);
        _309 = (((*_310).1: state::perp_market::AMM).73: bool);
        switchInt(move _309) -> [0: bb141, otherwise: bb149];
    }

    bb141: {
        StorageDead(_310);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _955 = const _;
        _318 = &(*_955);
        _317 = &(*_318);
        _316 = move _317 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_317);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _326 = &_251;
        _325 = &(*_326);
        _324 = core::fmt::rt::Argument::<'_>::new_display::<OracleValidity>(move _325) -> [return: bb142, unwind: bb469];
    }

    bb142: {
        StorageDead(_325);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_1;
        _328 = &(*_329);
        _327 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _328) -> [return: bb143, unwind: bb469];
    }

    bb143: {
        StorageDead(_328);
        _323 = [move _324, move _327];
        StorageDead(_327);
        StorageDead(_324);
        _322 = &_323;
        _321 = &(*_322);
        _320 = move _321 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_321);
        _315 = Arguments::<'_>::new_v1(move _316, move _320) -> [return: bb144, unwind: bb469];
    }

    bb144: {
        StorageDead(_320);
        StorageDead(_316);
        _314 = format(move _315) -> [return: bb145, unwind: bb469];
    }

    bb145: {
        StorageDead(_315);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_318);
        _313 = move _314;
        StorageDead(_314);
        StorageLive(_330);
        _330 = _11;
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_251;
        _331 = OracleValidity::get_error_code(move _332) -> [return: bb146, unwind: bb468];
    }

    bb146: {
        StorageDead(_332);
        StorageLive(_333);
        _333 = _1;
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_313;
        _336 = &(*_337);
        _335 = <String as Deref>::deref(move _336) -> [return: bb147, unwind: bb468];
    }

    bb147: {
        _334 = &(*_335);
        StorageDead(_336);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _330, move _331, move _333, move _334) -> [return: bb148, unwind: bb468];
    }

    bb148: {
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_337);
        StorageDead(_335);
        drop(_313) -> [return: bb438, unwind: bb469];
    }

    bb149: {
        StorageDead(_310);
        _308 = const ();
        StorageDead(_309);
        StorageDead(_308);
        StorageLive(_338);
        StorageLive(_339);
        _339 = ((*_7).3: u64);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &(*_221);
        _341 = <RefMut<'_, PerpMarket> as Deref>::deref(move _342) -> [return: bb150, unwind: bb469];
    }

    bb150: {
        StorageDead(_342);
        _340 = (((*_341).1: state::perp_market::AMM).47: u64);
        _338 = Ne(move _339, move _340);
        switchInt(move _338) -> [0: bb162, otherwise: bb151];
    }

    bb151: {
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _954 = const _;
        _349 = &(*_954);
        _348 = &(*_349);
        _347 = move _348 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_348);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = &_1;
        _356 = &(*_357);
        _355 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _356) -> [return: bb152, unwind: bb469];
    }

    bb152: {
        StorageDead(_356);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = &((*_7).3: u64);
        _359 = &(*_360);
        _358 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _359) -> [return: bb153, unwind: bb469];
    }

    bb153: {
        StorageDead(_359);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &(*_221);
        _364 = <RefMut<'_, PerpMarket> as Deref>::deref(move _365) -> [return: bb154, unwind: bb469];
    }

    bb154: {
        StorageDead(_365);
        _363 = &(((*_364).1: state::perp_market::AMM).47: u64);
        _362 = &(*_363);
        _361 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _362) -> [return: bb155, unwind: bb469];
    }

    bb155: {
        StorageDead(_362);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &(*_221);
        _369 = <RefMut<'_, PerpMarket> as Deref>::deref(move _370) -> [return: bb156, unwind: bb469];
    }

    bb156: {
        StorageDead(_370);
        _368 = &(((*_369).1: state::perp_market::AMM).73: bool);
        _367 = &(*_368);
        _366 = core::fmt::rt::Argument::<'_>::new_display::<bool>(move _367) -> [return: bb157, unwind: bb469];
    }

    bb157: {
        StorageDead(_367);
        _354 = [move _355, move _358, move _361, move _366];
        StorageDead(_366);
        StorageDead(_361);
        StorageDead(_358);
        StorageDead(_355);
        _353 = &_354;
        _352 = &(*_353);
        _351 = move _352 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_352);
        _346 = Arguments::<'_>::new_v1(move _347, move _351) -> [return: bb158, unwind: bb469];
    }

    bb158: {
        StorageDead(_351);
        StorageDead(_347);
        _345 = format(move _346) -> [return: bb159, unwind: bb469];
    }

    bb159: {
        StorageDead(_346);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_349);
        _344 = move _345;
        StorageDead(_345);
        StorageLive(_371);
        _371 = _11;
        StorageLive(_372);
        _372 = error::ErrorCode::AMMNotUpdatedInSameSlot;
        StorageLive(_373);
        _373 = _1;
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &_344;
        _376 = &(*_377);
        _375 = <String as Deref>::deref(move _376) -> [return: bb160, unwind: bb467];
    }

    bb160: {
        _374 = &(*_375);
        StorageDead(_376);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _371, move _372, move _373, move _374) -> [return: bb161, unwind: bb467];
    }

    bb161: {
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_377);
        StorageDead(_375);
        drop(_344) -> [return: bb437, unwind: bb469];
    }

    bb162: {
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_339);
        _233 = const ();
        StorageDead(_338);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_296);
        StorageDead(_285);
        StorageDead(_251);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_250);
        StorageDead(_238);
        goto -> bb166;
    }

    bb165: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = const ();
        goto -> bb166;
    }

    bb166: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = &(*_221);
        _381 = <RefMut<'_, PerpMarket> as Deref>::deref(move _382) -> [return: bb167, unwind: bb469];
    }

    bb167: {
        _380 = &(*_381);
        StorageDead(_382);
        StorageLive(_383);
        _383 = PerpOperation::SettlePnl;
        _379 = PerpMarket::is_operation_paused(move _380, move _383) -> [return: bb168, unwind: bb469];
    }

    bb168: {
        switchInt(move _379) -> [0: bb175, otherwise: bb169];
    }

    bb169: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _939 = const _;
        _390 = &(*_939);
        _389 = &(*_390);
        _388 = move _389 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_389);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = &_1;
        _397 = &(*_398);
        _396 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _397) -> [return: bb170, unwind: bb469];
    }

    bb170: {
        StorageDead(_397);
        _395 = [move _396];
        StorageDead(_396);
        _394 = &_395;
        _393 = &(*_394);
        _392 = move _393 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_393);
        _387 = Arguments::<'_>::new_v1(move _388, move _392) -> [return: bb171, unwind: bb469];
    }

    bb171: {
        StorageDead(_392);
        StorageDead(_388);
        _386 = format(move _387) -> [return: bb172, unwind: bb469];
    }

    bb172: {
        StorageDead(_387);
        StorageDead(_398);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_390);
        _385 = move _386;
        StorageDead(_386);
        StorageLive(_399);
        _399 = _11;
        StorageLive(_400);
        _400 = error::ErrorCode::InvalidMarketStatusToSettlePnl;
        StorageLive(_401);
        _401 = _1;
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_385;
        _404 = &(*_405);
        _403 = <String as Deref>::deref(move _404) -> [return: bb173, unwind: bb466];
    }

    bb173: {
        _402 = &(*_403);
        StorageDead(_404);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _399, move _400, move _401, move _402) -> [return: bb174, unwind: bb466];
    }

    bb174: {
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_405);
        StorageDead(_403);
        drop(_385) -> [return: bb436, unwind: bb469];
    }

    bb175: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        _378 = const ();
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_406);
        StorageLive(_407);
        _407 = _147;
        _408 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _409 = Lt(_407, _408);
        assert(move _409, "index out of bounds: the length is {} but the index is {}", move _408, _407) -> [success: bb176, unwind: bb469];
    }

    bb176: {
        _406 = (((*_2).4: [state::user::PerpPosition; 8])[_407].1: i64);
        StorageDead(_407);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = _406;
        _411 = Ne(move _412, const 0_i64);
        switchInt(move _411) -> [0: bb196, otherwise: bb177];
    }

    bb177: {
        StorageDead(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = &(*_221);
        _416 = <RefMut<'_, PerpMarket> as Deref>::deref(move _417) -> [return: bb178, unwind: bb469];
    }

    bb178: {
        _415 = &(*_416);
        StorageDead(_417);
        StorageLive(_418);
        _418 = PerpOperation::SettlePnlWithPosition;
        _414 = PerpMarket::is_operation_paused(move _415, move _418) -> [return: bb179, unwind: bb469];
    }

    bb179: {
        switchInt(move _414) -> [0: bb186, otherwise: bb180];
    }

    bb180: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_415);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _940 = const _;
        _425 = &(*_940);
        _424 = &(*_425);
        _423 = move _424 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_424);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &_1;
        _432 = &(*_433);
        _431 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _432) -> [return: bb181, unwind: bb469];
    }

    bb181: {
        StorageDead(_432);
        _430 = [move _431];
        StorageDead(_431);
        _429 = &_430;
        _428 = &(*_429);
        _427 = move _428 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_428);
        _422 = Arguments::<'_>::new_v1(move _423, move _427) -> [return: bb182, unwind: bb469];
    }

    bb182: {
        StorageDead(_427);
        StorageDead(_423);
        _421 = format(move _422) -> [return: bb183, unwind: bb469];
    }

    bb183: {
        StorageDead(_422);
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_429);
        StorageDead(_425);
        _420 = move _421;
        StorageDead(_421);
        StorageLive(_434);
        _434 = _11;
        StorageLive(_435);
        _435 = error::ErrorCode::InvalidMarketStatusToSettlePnl;
        StorageLive(_436);
        _436 = _1;
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = &_420;
        _439 = &(*_440);
        _438 = <String as Deref>::deref(move _439) -> [return: bb184, unwind: bb465];
    }

    bb184: {
        _437 = &(*_438);
        StorageDead(_439);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _434, move _435, move _436, move _437) -> [return: bb185, unwind: bb465];
    }

    bb185: {
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_440);
        StorageDead(_438);
        drop(_420) -> [return: bb433, unwind: bb469];
    }

    bb186: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_415);
        _413 = const ();
        StorageDead(_414);
        StorageDead(_413);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &(*_221);
        _443 = <RefMut<'_, PerpMarket> as Deref>::deref(move _444) -> [return: bb187, unwind: bb469];
    }

    bb187: {
        StorageDead(_444);
        _442 = &((*_443).22: state::perp_market::MarketStatus);
        StorageLive(_445);
        _950 = const _;
        _445 = &(*_950);
        _441 = <state::perp_market::MarketStatus as PartialEq>::ne(move _442, move _445) -> [return: bb188, unwind: bb469];
    }

    bb188: {
        switchInt(move _441) -> [0: bb195, otherwise: bb189];
    }

    bb189: {
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_442);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _941 = const _;
        _453 = &(*_941);
        _452 = &(*_453);
        _451 = move _452 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_452);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = &_1;
        _460 = &(*_461);
        _459 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _460) -> [return: bb190, unwind: bb469];
    }

    bb190: {
        StorageDead(_460);
        _458 = [move _459];
        StorageDead(_459);
        _457 = &_458;
        _456 = &(*_457);
        _455 = move _456 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_456);
        _450 = Arguments::<'_>::new_v1(move _451, move _455) -> [return: bb191, unwind: bb469];
    }

    bb191: {
        StorageDead(_455);
        StorageDead(_451);
        _449 = format(move _450) -> [return: bb192, unwind: bb469];
    }

    bb192: {
        StorageDead(_450);
        StorageDead(_461);
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_453);
        _448 = move _449;
        StorageDead(_449);
        StorageLive(_462);
        _462 = _11;
        StorageLive(_463);
        _463 = error::ErrorCode::InvalidMarketStatusToSettlePnl;
        StorageLive(_464);
        _464 = _1;
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        _468 = &_448;
        _467 = &(*_468);
        _466 = <String as Deref>::deref(move _467) -> [return: bb193, unwind: bb464];
    }

    bb193: {
        _465 = &(*_466);
        StorageDead(_467);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _462, move _463, move _464, move _465) -> [return: bb194, unwind: bb464];
    }

    bb194: {
        StorageDead(_465);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_462);
        StorageDead(_468);
        StorageDead(_466);
        drop(_448) -> [return: bb432, unwind: bb469];
    }

    bb195: {
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_442);
        _410 = const ();
        StorageDead(_441);
        goto -> bb211;
    }

    bb196: {
        StorageDead(_412);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _472 = &(*_221);
        _471 = <RefMut<'_, PerpMarket> as Deref>::deref(move _472) -> [return: bb197, unwind: bb469];
    }

    bb197: {
        StorageDead(_472);
        _470 = &((*_471).22: state::perp_market::MarketStatus);
        StorageLive(_473);
        _953 = const _;
        _473 = &(*_953);
        _469 = <state::perp_market::MarketStatus as PartialEq>::ne(move _470, move _473) -> [return: bb198, unwind: bb469];
    }

    bb198: {
        switchInt(move _469) -> [0: bb209, otherwise: bb199];
    }

    bb199: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &(*_221);
        _477 = <RefMut<'_, PerpMarket> as Deref>::deref(move _478) -> [return: bb200, unwind: bb469];
    }

    bb200: {
        StorageDead(_478);
        _476 = &((*_477).22: state::perp_market::MarketStatus);
        StorageLive(_479);
        _952 = const _;
        _479 = &(*_952);
        _475 = <state::perp_market::MarketStatus as PartialEq>::ne(move _476, move _479) -> [return: bb201, unwind: bb469];
    }

    bb201: {
        switchInt(move _475) -> [0: bb208, otherwise: bb202];
    }

    bb202: {
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_476);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _951 = const _;
        _487 = &(*_951);
        _486 = &(*_487);
        _485 = move _486 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_486);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = &_1;
        _494 = &(*_495);
        _493 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _494) -> [return: bb203, unwind: bb469];
    }

    bb203: {
        StorageDead(_494);
        _492 = [move _493];
        StorageDead(_493);
        _491 = &_492;
        _490 = &(*_491);
        _489 = move _490 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_490);
        _484 = Arguments::<'_>::new_v1(move _485, move _489) -> [return: bb204, unwind: bb469];
    }

    bb204: {
        StorageDead(_489);
        StorageDead(_485);
        _483 = format(move _484) -> [return: bb205, unwind: bb469];
    }

    bb205: {
        StorageDead(_484);
        StorageDead(_495);
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_487);
        _482 = move _483;
        StorageDead(_483);
        StorageLive(_496);
        _496 = _11;
        StorageLive(_497);
        _497 = error::ErrorCode::InvalidMarketStatusToSettlePnl;
        StorageLive(_498);
        _498 = _1;
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &_482;
        _501 = &(*_502);
        _500 = <String as Deref>::deref(move _501) -> [return: bb206, unwind: bb463];
    }

    bb206: {
        _499 = &(*_500);
        StorageDead(_501);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _496, move _497, move _498, move _499) -> [return: bb207, unwind: bb463];
    }

    bb207: {
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_502);
        StorageDead(_500);
        drop(_482) -> [return: bb431, unwind: bb469];
    }

    bb208: {
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_476);
        goto -> bb210;
    }

    bb209: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_470);
        goto -> bb210;
    }

    bb210: {
        _410 = const ();
        StorageDead(_475);
        StorageDead(_469);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &(*_221);
        _507 = <RefMut<'_, PerpMarket> as Deref>::deref(move _508) -> [return: bb212, unwind: bb469];
    }

    bb212: {
        StorageDead(_508);
        _506 = (((*_507).2: state::perp_market::PoolBalance).0: u128);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &(*_211);
        _510 = <RefMut<'_, SpotMarket> as Deref>::deref(move _511) -> [return: bb213, unwind: bb469];
    }

    bb213: {
        _509 = &(*_510);
        StorageDead(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = &(*_221);
        _515 = <RefMut<'_, PerpMarket> as Deref>::deref(move _516) -> [return: bb214, unwind: bb469];
    }

    bb214: {
        StorageDead(_516);
        _514 = &((*_515).2: state::perp_market::PoolBalance);
        _513 = <PoolBalance as SpotBalance>::balance_type(move _514) -> [return: bb215, unwind: bb469];
    }

    bb215: {
        _512 = &(*_513);
        StorageDead(_514);
        _505 = get_token_amount(move _506, move _509, move _512) -> [return: bb216, unwind: bb469];
    }

    bb216: {
        StorageDead(_512);
        StorageDead(_509);
        StorageDead(_506);
        _504 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _505) -> [return: bb217, unwind: bb469];
    }

    bb217: {
        StorageDead(_505);
        _517 = discriminant(_504);
        switchInt(move _517) -> [0: bb218, 1: bb219, otherwise: bb13];
    }

    bb218: {
        StorageLive(_521);
        _521 = ((_504 as Continue).0: u128);
        _503 = _521;
        StorageDead(_521);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_504);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &(*_221);
        _529 = <RefMut<'_, PerpMarket> as Deref>::deref(move _530) -> [return: bb221, unwind: bb469];
    }

    bb219: {
        StorageLive(_518);
        _518 = ((_504 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_520);
        _520 = _518;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _520) -> [return: bb220, unwind: bb469];
    }

    bb220: {
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_504);
        goto -> bb430;
    }

    bb221: {
        StorageDead(_530);
        _528 = ((((*_529).1: state::perp_market::AMM).4: state::perp_market::PoolBalance).0: u128);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &(*_211);
        _532 = <RefMut<'_, SpotMarket> as Deref>::deref(move _533) -> [return: bb222, unwind: bb469];
    }

    bb222: {
        _531 = &(*_532);
        StorageDead(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = &(*_221);
        _537 = <RefMut<'_, PerpMarket> as Deref>::deref(move _538) -> [return: bb223, unwind: bb469];
    }

    bb223: {
        StorageDead(_538);
        _536 = &(((*_537).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _535 = <PoolBalance as SpotBalance>::balance_type(move _536) -> [return: bb224, unwind: bb469];
    }

    bb224: {
        _534 = &(*_535);
        StorageDead(_536);
        _527 = get_token_amount(move _528, move _531, move _534) -> [return: bb225, unwind: bb469];
    }

    bb225: {
        StorageDead(_534);
        StorageDead(_531);
        StorageDead(_528);
        _526 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _527) -> [return: bb226, unwind: bb469];
    }

    bb226: {
        StorageDead(_527);
        _539 = discriminant(_526);
        switchInt(move _539) -> [0: bb227, 1: bb228, otherwise: bb13];
    }

    bb227: {
        StorageLive(_543);
        _543 = ((_526 as Continue).0: u128);
        _525 = _543;
        StorageDead(_543);
        _524 = <u128 as SafeMath>::safe_div(move _525, const 5_u128) -> [return: bb230, unwind: bb469];
    }

    bb228: {
        StorageLive(_540);
        _540 = ((_526 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_542);
        _542 = _540;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _542) -> [return: bb229, unwind: bb469];
    }

    bb229: {
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_525);
        StorageDead(_524);
        goto -> bb428;
    }

    bb230: {
        StorageDead(_525);
        _523 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _524) -> [return: bb231, unwind: bb469];
    }

    bb231: {
        StorageDead(_524);
        _544 = discriminant(_523);
        switchInt(move _544) -> [0: bb232, 1: bb233, otherwise: bb13];
    }

    bb232: {
        StorageLive(_548);
        _548 = ((_523 as Continue).0: u128);
        _522 = _548;
        StorageDead(_548);
        StorageDead(_537);
        StorageDead(_535);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_523);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = _503;
        StorageLive(_556);
        _556 = _522;
        _554 = <u128 as SafeMath>::safe_add(move _555, move _556) -> [return: bb235, unwind: bb469];
    }

    bb233: {
        StorageLive(_545);
        _545 = ((_523 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_547);
        _547 = _545;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _547) -> [return: bb234, unwind: bb469];
    }

    bb234: {
        StorageDead(_547);
        StorageDead(_545);
        goto -> bb428;
    }

    bb235: {
        StorageDead(_556);
        StorageDead(_555);
        _553 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _554) -> [return: bb236, unwind: bb469];
    }

    bb236: {
        StorageDead(_554);
        _557 = discriminant(_553);
        switchInt(move _557) -> [0: bb237, 1: bb238, otherwise: bb13];
    }

    bb237: {
        StorageLive(_561);
        _561 = ((_553 as Continue).0: u128);
        _552 = _561;
        StorageDead(_561);
        _551 = <u128 as Cast>::cast::<i128>(move _552) -> [return: bb240, unwind: bb469];
    }

    bb238: {
        StorageLive(_558);
        _558 = ((_553 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_560);
        _560 = _558;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _560) -> [return: bb239, unwind: bb469];
    }

    bb239: {
        StorageDead(_560);
        StorageDead(_558);
        StorageDead(_552);
        StorageDead(_551);
        goto -> bb426;
    }

    bb240: {
        StorageDead(_552);
        _550 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _551) -> [return: bb241, unwind: bb469];
    }

    bb241: {
        StorageDead(_551);
        _562 = discriminant(_550);
        switchInt(move _562) -> [0: bb242, 1: bb243, otherwise: bb13];
    }

    bb242: {
        StorageLive(_566);
        _566 = ((_550 as Continue).0: i128);
        _549 = _566;
        StorageDead(_566);
        StorageDead(_553);
        StorageDead(_550);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        _573 = &(*_221);
        _572 = <RefMut<'_, PerpMarket> as Deref>::deref(move _573) -> [return: bb245, unwind: bb469];
    }

    bb243: {
        StorageLive(_563);
        _563 = ((_550 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_565);
        _565 = _563;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _565) -> [return: bb244, unwind: bb469];
    }

    bb244: {
        StorageDead(_565);
        StorageDead(_563);
        goto -> bb426;
    }

    bb245: {
        StorageDead(_573);
        _571 = &((*_572).1: state::perp_market::AMM);
        _570 = &(*_571);
        StorageLive(_574);
        _574 = _100;
        _569 = calculate_net_user_pnl(move _570, move _574) -> [return: bb246, unwind: bb469];
    }

    bb246: {
        StorageDead(_574);
        StorageDead(_570);
        _568 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _569) -> [return: bb247, unwind: bb469];
    }

    bb247: {
        StorageDead(_569);
        _575 = discriminant(_568);
        switchInt(move _575) -> [0: bb248, 1: bb249, otherwise: bb13];
    }

    bb248: {
        StorageLive(_579);
        _579 = ((_568 as Continue).0: i128);
        _567 = _579;
        StorageDead(_579);
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_568);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = _567;
        StorageLive(_583);
        _583 = _549;
        _581 = Lt(move _582, move _583);
        switchInt(move _581) -> [0: bb252, otherwise: bb251];
    }

    bb249: {
        StorageLive(_576);
        _576 = ((_568 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_578);
        _578 = _576;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _578) -> [return: bb250, unwind: bb469];
    }

    bb250: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_568);
        goto -> bb425;
    }

    bb251: {
        StorageDead(_583);
        StorageDead(_582);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = _549;
        StorageLive(_587);
        StorageLive(_588);
        _588 = _567;
        _587 = <i128 as Ord>::max(move _588, const 0_i128) -> [return: bb253, unwind: bb469];
    }

    bb252: {
        StorageDead(_583);
        StorageDead(_582);
        _580 = const 0_i128;
        goto -> bb259;
    }

    bb253: {
        StorageDead(_588);
        _585 = <i128 as SafeMath>::safe_sub(move _586, move _587) -> [return: bb254, unwind: bb469];
    }

    bb254: {
        StorageDead(_587);
        StorageDead(_586);
        _584 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _585) -> [return: bb255, unwind: bb469];
    }

    bb255: {
        StorageDead(_585);
        _589 = discriminant(_584);
        switchInt(move _589) -> [0: bb256, 1: bb257, otherwise: bb13];
    }

    bb256: {
        StorageLive(_593);
        _593 = ((_584 as Continue).0: i128);
        _580 = _593;
        StorageDead(_593);
        StorageDead(_584);
        goto -> bb259;
    }

    bb257: {
        StorageLive(_590);
        _590 = ((_584 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_592);
        _592 = _590;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _592) -> [return: bb258, unwind: bb469];
    }

    bb258: {
        StorageDead(_592);
        StorageDead(_590);
        StorageDead(_584);
        StorageDead(_581);
        goto -> bb424;
    }

    bb259: {
        StorageDead(_581);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        _598 = _147;
        _599 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _600 = Lt(_598, _599);
        assert(move _600, "index out of bounds: the length is {} but the index is {}", move _599, _598) -> [success: bb260, unwind: bb469];
    }

    bb260: {
        _597 = &((*_2).4: [state::user::PerpPosition; 8])[_598];
        StorageLive(_601);
        _601 = _100;
        StorageLive(_602);
        _602 = _580;
        _596 = PerpPosition::get_claimable_pnl(move _597, move _601, move _602) -> [return: bb261, unwind: bb469];
    }

    bb261: {
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_597);
        _595 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _596) -> [return: bb262, unwind: bb469];
    }

    bb262: {
        StorageDead(_596);
        _603 = discriminant(_595);
        switchInt(move _603) -> [0: bb263, 1: bb264, otherwise: bb13];
    }

    bb263: {
        StorageLive(_607);
        _607 = ((_595 as Continue).0: i128);
        _594 = _607;
        StorageDead(_607);
        StorageDead(_598);
        StorageDead(_595);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        _613 = &mut (*_221);
        _612 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _613) -> [return: bb266, unwind: bb469];
    }

    bb264: {
        StorageLive(_604);
        _604 = ((_595 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_606);
        _606 = _604;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _606) -> [return: bb265, unwind: bb469];
    }

    bb265: {
        StorageDead(_606);
        StorageDead(_604);
        StorageDead(_598);
        StorageDead(_595);
        goto -> bb423;
    }

    bb266: {
        _611 = &mut (*_612);
        StorageDead(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        _616 = &mut (*_211);
        _615 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _616) -> [return: bb267, unwind: bb469];
    }

    bb267: {
        _614 = &mut (*_615);
        StorageDead(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        _619 = &(*_2);
        _618 = User::get_quote_spot_position(move _619) -> [return: bb268, unwind: bb469];
    }

    bb268: {
        _617 = &(*_618);
        StorageDead(_619);
        StorageLive(_620);
        _620 = _594;
        StorageLive(_621);
        _621 = _44;
        _610 = update_pool_balances(move _611, move _614, move _617, move _620, move _621) -> [return: bb269, unwind: bb469];
    }

    bb269: {
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_617);
        StorageDead(_614);
        StorageDead(_611);
        _609 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _610) -> [return: bb270, unwind: bb469];
    }

    bb270: {
        StorageDead(_610);
        _622 = discriminant(_609);
        switchInt(move _622) -> [0: bb271, 1: bb272, otherwise: bb13];
    }

    bb271: {
        StorageLive(_626);
        _626 = ((_609 as Continue).0: i128);
        _608 = _626;
        StorageDead(_626);
        StorageDead(_618);
        StorageDead(_615);
        StorageDead(_612);
        StorageDead(_609);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _631 = &(*_211);
        _630 = <RefMut<'_, SpotMarket> as Deref>::deref(move _631) -> [return: bb274, unwind: bb469];
    }

    bb272: {
        StorageLive(_623);
        _623 = ((_609 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_625);
        _625 = _623;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _625) -> [return: bb273, unwind: bb469];
    }

    bb273: {
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_618);
        StorageDead(_615);
        StorageDead(_612);
        StorageDead(_609);
        goto -> bb422;
    }

    bb274: {
        StorageDead(_631);
        _629 = ((*_630).11: u128);
        StorageLive(_632);
        _632 = _46;
        _628 = Ne(move _629, move _632);
        switchInt(move _628) -> [0: bb276, otherwise: bb275];
    }

    bb275: {
        StorageDead(_632);
        StorageDead(_630);
        StorageDead(_629);
        goto -> bb278;
    }

    bb276: {
        StorageDead(_632);
        StorageDead(_630);
        StorageDead(_629);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _636 = &(*_211);
        _635 = <RefMut<'_, SpotMarket> as Deref>::deref(move _636) -> [return: bb277, unwind: bb469];
    }

    bb277: {
        StorageDead(_636);
        _634 = ((*_635).12: u128);
        StorageLive(_637);
        _637 = _47;
        _633 = Ne(move _634, move _637);
        switchInt(move _633) -> [0: bb283, otherwise: bb278];
    }

    bb278: {
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_634);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &_11;
        StorageLive(_640);
        _949 = const _;
        _640 = &(*_949);
        _638 = <settle_pnl_mode::SettlePnlMode as PartialEq>::eq(move _639, move _640) -> [return: bb279, unwind: bb469];
    }

    bb279: {
        switchInt(move _638) -> [0: bb282, otherwise: bb280];
    }

    bb280: {
        StorageDead(_640);
        StorageDead(_639);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        _644 = const "Spot market balance has changed, switch to MUST_SETTLE mode";
        _643 = &(*_644);
        _642 = solana_program::log::sol_log(move _643) -> [return: bb281, unwind: bb469];
    }

    bb281: {
        StorageDead(_643);
        StorageDead(_644);
        StorageDead(_642);
        StorageLive(_645);
        _645 = settle_pnl_mode::SettlePnlMode::MustSettle;
        _11 = move _645;
        StorageDead(_645);
        _627 = const ();
        goto -> bb285;
    }

    bb282: {
        StorageDead(_640);
        StorageDead(_639);
        goto -> bb284;
    }

    bb283: {
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_634);
        goto -> bb284;
    }

    bb284: {
        _627 = const ();
        goto -> bb285;
    }

    bb285: {
        StorageDead(_638);
        StorageDead(_633);
        StorageDead(_628);
        StorageDead(_627);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        _648 = _594;
        _647 = Eq(move _648, const 0_i128);
        switchInt(move _647) -> [0: bb292, otherwise: bb286];
    }

    bb286: {
        StorageDead(_648);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        _942 = const _;
        _655 = &(*_942);
        _654 = &(*_655);
        _653 = move _654 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_654);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        _663 = &_1;
        _662 = &(*_663);
        _661 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _662) -> [return: bb287, unwind: bb469];
    }

    bb287: {
        StorageDead(_662);
        _660 = [move _661];
        StorageDead(_661);
        _659 = &_660;
        _658 = &(*_659);
        _657 = move _658 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_658);
        _652 = Arguments::<'_>::new_v1(move _653, move _657) -> [return: bb288, unwind: bb469];
    }

    bb288: {
        StorageDead(_657);
        StorageDead(_653);
        _651 = format(move _652) -> [return: bb289, unwind: bb469];
    }

    bb289: {
        StorageDead(_652);
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_655);
        _650 = move _651;
        StorageDead(_651);
        StorageLive(_664);
        _664 = _11;
        StorageLive(_665);
        _665 = error::ErrorCode::NoUnsettledPnl;
        StorageLive(_666);
        _666 = _1;
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        _670 = &_650;
        _669 = &(*_670);
        _668 = <String as Deref>::deref(move _669) -> [return: bb290, unwind: bb462];
    }

    bb290: {
        _667 = &(*_668);
        StorageDead(_669);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _664, move _665, move _666, move _667) -> [return: bb291, unwind: bb462];
    }

    bb291: {
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_664);
        StorageDead(_670);
        StorageDead(_668);
        drop(_650) -> [return: bb420, unwind: bb469];
    }

    bb292: {
        StorageDead(_648);
        StorageLive(_671);
        StorageLive(_672);
        _672 = _608;
        _671 = Eq(move _672, const 0_i128);
        switchInt(move _671) -> [0: bb299, otherwise: bb293];
    }

    bb293: {
        StorageDead(_672);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _943 = const _;
        _679 = &(*_943);
        _678 = &(*_679);
        _677 = move _678 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_678);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        _687 = &_1;
        _686 = &(*_687);
        _685 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _686) -> [return: bb294, unwind: bb469];
    }

    bb294: {
        StorageDead(_686);
        _684 = [move _685];
        StorageDead(_685);
        _683 = &_684;
        _682 = &(*_683);
        _681 = move _682 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_682);
        _676 = Arguments::<'_>::new_v1(move _677, move _681) -> [return: bb295, unwind: bb469];
    }

    bb295: {
        StorageDead(_681);
        StorageDead(_677);
        _675 = format(move _676) -> [return: bb296, unwind: bb469];
    }

    bb296: {
        StorageDead(_676);
        StorageDead(_687);
        StorageDead(_684);
        StorageDead(_683);
        StorageDead(_679);
        _674 = move _675;
        StorageDead(_675);
        StorageLive(_688);
        _688 = _11;
        StorageLive(_689);
        _689 = error::ErrorCode::PnlPoolCantSettleUser;
        StorageLive(_690);
        _690 = _1;
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = &_674;
        _693 = &(*_694);
        _692 = <String as Deref>::deref(move _693) -> [return: bb297, unwind: bb461];
    }

    bb297: {
        _691 = &(*_692);
        StorageDead(_693);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _688, move _689, move _690, move _691) -> [return: bb298, unwind: bb461];
    }

    bb298: {
        StorageDead(_691);
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_694);
        StorageDead(_692);
        drop(_674) -> [return: bb419, unwind: bb469];
    }

    bb299: {
        StorageDead(_672);
        _646 = const ();
        StorageDead(_671);
        StorageDead(_647);
        StorageDead(_646);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        _697 = _608;
        _696 = Ge(move _697, const 0_i128);
        switchInt(move _696) -> [0: bb301, otherwise: bb300];
    }

    bb300: {
        StorageDead(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = _580;
        _698 = Le(move _699, const 0_i128);
        switchInt(move _698) -> [0: bb311, otherwise: bb302];
    }

    bb301: {
        StorageDead(_697);
        goto -> bb312;
    }

    bb302: {
        StorageDead(_699);
        StorageLive(_700);
        StorageLive(_701);
        _701 = _608;
        _700 = Gt(move _701, const 0_i128);
        switchInt(move _700) -> [0: bb309, otherwise: bb303];
    }

    bb303: {
        StorageDead(_701);
        StorageLive(_702);
        StorageLive(_703);
        _703 = _406;
        _702 = Eq(move _703, const 0_i64);
        switchInt(move _702) -> [0: bb308, otherwise: bb304];
    }

    bb304: {
        StorageDead(_703);
        StorageLive(_704);
        StorageLive(_705);
        _705 = &(*_2);
        _704 = User::is_being_liquidated(move _705) -> [return: bb305, unwind: bb469];
    }

    bb305: {
        switchInt(move _704) -> [0: bb307, otherwise: bb306];
    }

    bb306: {
        StorageDead(_705);
        goto -> bb312;
    }

    bb307: {
        StorageDead(_705);
        goto -> bb310;
    }

    bb308: {
        StorageDead(_703);
        goto -> bb310;
    }

    bb309: {
        StorageDead(_701);
        goto -> bb310;
    }

    bb310: {
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _708 = &((*_2).0: anchor_lang::prelude::Pubkey);
        StorageLive(_709);
        _709 = &(*_3);
        _707 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _708, move _709) -> [return: bb313, unwind: bb469];
    }

    bb311: {
        StorageDead(_699);
        goto -> bb312;
    }

    bb312: {
        _695 = const false;
        goto -> bb318;
    }

    bb313: {
        switchInt(move _707) -> [0: bb315, otherwise: bb314];
    }

    bb314: {
        StorageDead(_709);
        StorageDead(_708);
        _706 = const true;
        goto -> bb317;
    }

    bb315: {
        StorageDead(_709);
        StorageDead(_708);
        StorageLive(_710);
        _710 = &((*_2).1: anchor_lang::prelude::Pubkey);
        StorageLive(_711);
        _711 = &(*_3);
        _706 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _710, move _711) -> [return: bb316, unwind: bb469];
    }

    bb316: {
        StorageDead(_711);
        StorageDead(_710);
        goto -> bb317;
    }

    bb317: {
        StorageDead(_707);
        _695 = Not(move _706);
        StorageDead(_706);
        goto -> bb318;
    }

    bb318: {
        StorageDead(_704);
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_698);
        StorageDead(_696);
        StorageLive(_712);
        StorageLive(_713);
        _713 = _695;
        switchInt(move _713) -> [0: bb325, otherwise: bb319];
    }

    bb319: {
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        _944 = const _;
        _720 = &(*_944);
        _719 = &(*_720);
        _718 = move _719 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_719);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        _728 = &_1;
        _727 = &(*_728);
        _726 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _727) -> [return: bb320, unwind: bb469];
    }

    bb320: {
        StorageDead(_727);
        _725 = [move _726];
        StorageDead(_726);
        _724 = &_725;
        _723 = &(*_724);
        _722 = move _723 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_723);
        _717 = Arguments::<'_>::new_v1(move _718, move _722) -> [return: bb321, unwind: bb469];
    }

    bb321: {
        StorageDead(_722);
        StorageDead(_718);
        _716 = format(move _717) -> [return: bb322, unwind: bb469];
    }

    bb322: {
        StorageDead(_717);
        StorageDead(_728);
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_720);
        _715 = move _716;
        StorageDead(_716);
        StorageLive(_729);
        _729 = _11;
        StorageLive(_730);
        _730 = error::ErrorCode::UserMustSettleTheirOwnPositiveUnsettledPNL;
        StorageLive(_731);
        _731 = _1;
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _735 = &_715;
        _734 = &(*_735);
        _733 = <String as Deref>::deref(move _734) -> [return: bb323, unwind: bb460];
    }

    bb323: {
        _732 = &(*_733);
        StorageDead(_734);
        _0 = settle_pnl_mode::SettlePnlMode::result(move _729, move _730, move _731, move _732) -> [return: bb324, unwind: bb460];
    }

    bb324: {
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_735);
        StorageDead(_733);
        drop(_715) -> [return: bb417, unwind: bb469];
    }

    bb325: {
        _712 = const ();
        StorageDead(_713);
        StorageDead(_712);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        _740 = _608;
        _739 = core::num::<impl i128>::unsigned_abs(move _740) -> [return: bb326, unwind: bb469];
    }

    bb326: {
        StorageDead(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = _608;
        _742 = Gt(move _743, const 0_i128);
        switchInt(move _742) -> [0: bb328, otherwise: bb327];
    }

    bb327: {
        StorageDead(_743);
        StorageLive(_744);
        _947 = const _;
        _744 = &(*_947);
        _741 = &(*_744);
        StorageDead(_744);
        goto -> bb329;
    }

    bb328: {
        StorageDead(_743);
        StorageLive(_746);
        _948 = const _;
        _746 = &(*_948);
        _741 = &(*_746);
        StorageDead(_746);
        goto -> bb329;
    }

    bb329: {
        StorageDead(_742);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = &mut (*_211);
        _749 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _750) -> [return: bb330, unwind: bb469];
    }

    bb330: {
        _748 = &mut (*_749);
        StorageDead(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _754 = &mut (*_2);
        _753 = User::get_quote_spot_position_mut(move _754) -> [return: bb331, unwind: bb469];
    }

    bb331: {
        _752 = &mut (*_753);
        _751 = move _752 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_754);
        StorageDead(_752);
        _738 = update_spot_balances(move _739, move _741, move _748, move _751, const false) -> [return: bb332, unwind: bb469];
    }

    bb332: {
        StorageDead(_751);
        StorageDead(_748);
        StorageDead(_741);
        StorageDead(_739);
        _737 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _738) -> [return: bb333, unwind: bb469];
    }

    bb333: {
        StorageDead(_738);
        _755 = discriminant(_737);
        switchInt(move _755) -> [0: bb334, 1: bb335, otherwise: bb13];
    }

    bb334: {
        StorageLive(_759);
        _759 = ((_737 as Continue).0: ());
        _736 = _759;
        StorageDead(_759);
        StorageDead(_753);
        StorageDead(_749);
        StorageDead(_737);
        StorageDead(_736);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        _765 = _147;
        _766 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _767 = Lt(_765, _766);
        assert(move _767, "index out of bounds: the length is {} but the index is {}", move _766, _765) -> [success: bb337, unwind: bb469];
    }

    bb335: {
        StorageLive(_756);
        _756 = ((_737 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_758);
        _758 = _756;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _758) -> [return: bb336, unwind: bb469];
    }

    bb336: {
        StorageDead(_758);
        StorageDead(_756);
        StorageDead(_753);
        StorageDead(_749);
        StorageDead(_737);
        StorageDead(_736);
        goto -> bb418;
    }

    bb337: {
        _764 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_765];
        _763 = &mut (*_764);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _770 = &mut (*_221);
        _769 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _770) -> [return: bb338, unwind: bb469];
    }

    bb338: {
        _768 = &mut (*_769);
        StorageDead(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        _775 = _608;
        _774 = <i128 as Cast>::cast::<i64>(move _775) -> [return: bb339, unwind: bb469];
    }

    bb339: {
        StorageDead(_775);
        _773 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _774) -> [return: bb340, unwind: bb469];
    }

    bb340: {
        StorageDead(_774);
        _776 = discriminant(_773);
        switchInt(move _776) -> [0: bb341, 1: bb342, otherwise: bb13];
    }

    bb341: {
        StorageLive(_780);
        _780 = ((_773 as Continue).0: i64);
        _772 = _780;
        StorageDead(_780);
        _781 = Eq(_772, const i64::MIN);
        assert(!move _781, "attempt to negate `{}`, which would overflow", _772) -> [success: bb344, unwind: bb469];
    }

    bb342: {
        StorageLive(_777);
        _777 = ((_773 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_779);
        _779 = _777;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _779) -> [return: bb343, unwind: bb469];
    }

    bb343: {
        StorageDead(_779);
        StorageDead(_777);
        StorageDead(_772);
        StorageDead(_771);
        StorageDead(_768);
        StorageDead(_763);
        StorageDead(_762);
        goto -> bb416;
    }

    bb344: {
        _771 = Neg(move _772);
        StorageDead(_772);
        _762 = update_quote_asset_amount(move _763, move _768, move _771) -> [return: bb345, unwind: bb469];
    }

    bb345: {
        StorageDead(_771);
        StorageDead(_768);
        StorageDead(_763);
        _761 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _762) -> [return: bb346, unwind: bb469];
    }

    bb346: {
        StorageDead(_762);
        _782 = discriminant(_761);
        switchInt(move _782) -> [0: bb347, 1: bb348, otherwise: bb13];
    }

    bb347: {
        StorageLive(_786);
        _786 = ((_761 as Continue).0: ());
        _760 = _786;
        StorageDead(_786);
        StorageDead(_773);
        StorageDead(_769);
        StorageDead(_765);
        StorageDead(_764);
        StorageDead(_761);
        StorageDead(_760);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &mut (*_2);
        StorageLive(_791);
        _791 = _147;
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        _795 = _608;
        _794 = <i128 as Cast>::cast::<i64>(move _795) -> [return: bb350, unwind: bb469];
    }

    bb348: {
        StorageLive(_783);
        _783 = ((_761 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_785);
        _785 = _783;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _785) -> [return: bb349, unwind: bb469];
    }

    bb349: {
        StorageDead(_785);
        StorageDead(_783);
        goto -> bb416;
    }

    bb350: {
        StorageDead(_795);
        _793 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _794) -> [return: bb351, unwind: bb469];
    }

    bb351: {
        StorageDead(_794);
        _796 = discriminant(_793);
        switchInt(move _796) -> [0: bb352, 1: bb353, otherwise: bb13];
    }

    bb352: {
        StorageLive(_800);
        _800 = ((_793 as Continue).0: i64);
        _792 = _800;
        StorageDead(_800);
        _789 = update_settled_pnl(move _790, move _791, move _792) -> [return: bb355, unwind: bb469];
    }

    bb353: {
        StorageLive(_797);
        _797 = ((_793 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_799);
        _799 = _797;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _799) -> [return: bb354, unwind: bb469];
    }

    bb354: {
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_790);
        StorageDead(_789);
        goto -> bb415;
    }

    bb355: {
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_790);
        _788 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _789) -> [return: bb356, unwind: bb469];
    }

    bb356: {
        StorageDead(_789);
        _801 = discriminant(_788);
        switchInt(move _801) -> [0: bb357, 1: bb358, otherwise: bb13];
    }

    bb357: {
        StorageLive(_805);
        _805 = ((_788 as Continue).0: ());
        _787 = _805;
        StorageDead(_805);
        StorageDead(_793);
        StorageDead(_788);
        StorageDead(_787);
        StorageLive(_806);
        StorageLive(_807);
        _807 = _147;
        _808 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _809 = Lt(_807, _808);
        assert(move _809, "index out of bounds: the length is {} but the index is {}", move _808, _807) -> [success: bb360, unwind: bb469];
    }

    bb358: {
        StorageLive(_802);
        _802 = ((_788 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_804);
        _804 = _802;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _804) -> [return: bb359, unwind: bb469];
    }

    bb359: {
        StorageDead(_804);
        StorageDead(_802);
        goto -> bb415;
    }

    bb360: {
        _806 = (((*_2).4: [state::user::PerpPosition; 8])[_807].2: i64);
        StorageDead(_807);
        StorageLive(_810);
        StorageLive(_811);
        _811 = _147;
        _812 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _813 = Lt(_811, _812);
        assert(move _813, "index out of bounds: the length is {} but the index is {}", move _812, _811) -> [success: bb361, unwind: bb469];
    }

    bb361: {
        _810 = (((*_2).4: [state::user::PerpPosition; 8])[_811].4: i64);
        StorageDead(_811);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        _819 = &(*_221);
        _818 = <RefMut<'_, PerpMarket> as Deref>::deref(move _819) -> [return: bb362, unwind: bb469];
    }

    bb362: {
        _817 = &(*_818);
        StorageDead(_819);
        _816 = validate_perp_market(move _817) -> [return: bb363, unwind: bb469];
    }

    bb363: {
        StorageDead(_817);
        _815 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _816) -> [return: bb364, unwind: bb469];
    }

    bb364: {
        StorageDead(_816);
        _820 = discriminant(_815);
        switchInt(move _820) -> [0: bb365, 1: bb366, otherwise: bb13];
    }

    bb365: {
        StorageLive(_824);
        _824 = ((_815 as Continue).0: ());
        _814 = _824;
        StorageDead(_824);
        StorageDead(_818);
        StorageDead(_815);
        StorageDead(_814);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        _830 = _147;
        _831 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _832 = Lt(_830, _831);
        assert(move _832, "index out of bounds: the length is {} but the index is {}", move _831, _830) -> [success: bb368, unwind: bb469];
    }

    bb366: {
        StorageLive(_821);
        _821 = ((_815 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_823);
        _823 = _821;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _823) -> [return: bb367, unwind: bb469];
    }

    bb367: {
        StorageDead(_823);
        StorageDead(_821);
        StorageDead(_818);
        StorageDead(_815);
        StorageDead(_814);
        goto -> bb414;
    }

    bb368: {
        _829 = &((*_2).4: [state::user::PerpPosition; 8])[_830];
        _828 = &(*_829);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        _835 = &(*_221);
        _834 = <RefMut<'_, PerpMarket> as Deref>::deref(move _835) -> [return: bb369, unwind: bb469];
    }

    bb369: {
        _833 = &(*_834);
        StorageDead(_835);
        _827 = validate_perp_position_with_perp_market(move _828, move _833) -> [return: bb370, unwind: bb469];
    }

    bb370: {
        StorageDead(_833);
        StorageDead(_828);
        _826 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _827) -> [return: bb371, unwind: bb469];
    }

    bb371: {
        StorageDead(_827);
        _836 = discriminant(_826);
        switchInt(move _836) -> [0: bb372, 1: bb373, otherwise: bb13];
    }

    bb372: {
        StorageLive(_840);
        _840 = ((_826 as Continue).0: ());
        _825 = _840;
        StorageDead(_840);
        StorageDead(_834);
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_826);
        StorageDead(_825);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        _855 = _44;
        StorageLive(_856);
        _856 = (*_4);
        StorageLive(_857);
        _857 = _1;
        StorageLive(_858);
        _858 = _608;
        StorageLive(_859);
        _859 = _406;
        StorageLive(_860);
        _860 = _806;
        StorageLive(_861);
        _861 = _810;
        StorageLive(_862);
        _862 = _100;
        StorageLive(_863);
        _863 = SettlePnlExplanation::None;
        _854 = SettlePnlRecord { ts: move _855, user: move _856, market_index: move _857, pnl: move _858, base_asset_amount: move _859, quote_asset_amount_after: move _860, quote_entry_amount: move _861, settle_price: move _862, explanation: move _863 };
        StorageDead(_863);
        StorageDead(_862);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_859);
        StorageDead(_858);
        StorageDead(_857);
        StorageDead(_856);
        StorageDead(_855);
        _853 = &_854;
        _852 = &(*_853);
        _851 = <SettlePnlRecord as anchor_lang::Event>::data(move _852) -> [return: bb375, unwind: bb469];
    }

    bb373: {
        StorageLive(_837);
        _837 = ((_826 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_839);
        _839 = _837;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _839) -> [return: bb374, unwind: bb469];
    }

    bb374: {
        StorageDead(_839);
        StorageDead(_837);
        StorageDead(_834);
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_826);
        StorageDead(_825);
        goto -> bb414;
    }

    bb375: {
        StorageDead(_852);
        _850 = &_851;
        _849 = &(*_850);
        _848 = <Vec<u8> as Deref>::deref(move _849) -> [return: bb376, unwind: bb459];
    }

    bb376: {
        _847 = &(*_848);
        StorageDead(_849);
        _846 = [move _847];
        StorageDead(_847);
        _845 = &_846;
        _844 = &(*_845);
        _843 = move _844 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_844);
        _842 = solana_program::log::sol_log_data(move _843) -> [return: bb377, unwind: bb459];
    }

    bb377: {
        StorageDead(_843);
        drop(_851) -> [return: bb378, unwind: bb469];
    }

    bb378: {
        StorageDead(_854);
        StorageDead(_853);
        StorageDead(_851);
        StorageDead(_850);
        StorageDead(_848);
        StorageDead(_846);
        StorageDead(_845);
        StorageDead(_842);
        _841 = const ();
        StorageDead(_841);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        _869 = &(*_211);
        _868 = <RefMut<'_, SpotMarket> as Deref>::deref(move _869) -> [return: bb379, unwind: bb469];
    }

    bb379: {
        _867 = &(*_868);
        StorageDead(_869);
        _866 = SpotMarket::get_tvl(move _867) -> [return: bb380, unwind: bb469];
    }

    bb380: {
        StorageDead(_867);
        _865 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _866) -> [return: bb381, unwind: bb469];
    }

    bb381: {
        StorageDead(_866);
        _870 = discriminant(_865);
        switchInt(move _870) -> [0: bb382, 1: bb383, otherwise: bb13];
    }

    bb382: {
        StorageLive(_874);
        _874 = ((_865 as Continue).0: u128);
        _864 = _874;
        StorageDead(_874);
        StorageDead(_868);
        StorageDead(_865);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        _882 = _45;
        StorageLive(_883);
        _883 = _864;
        _881 = <u128 as SafeMath>::safe_sub(move _882, move _883) -> [return: bb385, unwind: bb469];
    }

    bb383: {
        StorageLive(_871);
        _871 = ((_865 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_873);
        _873 = _871;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _873) -> [return: bb384, unwind: bb469];
    }

    bb384: {
        StorageDead(_873);
        StorageDead(_871);
        StorageDead(_868);
        StorageDead(_865);
        goto -> bb413;
    }

    bb385: {
        StorageDead(_883);
        StorageDead(_882);
        _880 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _881) -> [return: bb386, unwind: bb469];
    }

    bb386: {
        StorageDead(_881);
        _884 = discriminant(_880);
        switchInt(move _884) -> [0: bb387, 1: bb388, otherwise: bb13];
    }

    bb387: {
        StorageLive(_888);
        _888 = ((_880 as Continue).0: u128);
        _879 = _888;
        StorageDead(_888);
        _878 = Le(move _879, const 10_u128);
        switchInt(move _878) -> [0: bb391, otherwise: bb390];
    }

    bb388: {
        StorageLive(_885);
        _885 = ((_880 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_887);
        _887 = _885;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _887) -> [return: bb389, unwind: bb469];
    }

    bb389: {
        StorageDead(_887);
        StorageDead(_885);
        StorageDead(_880);
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_877);
        goto -> bb412;
    }

    bb390: {
        StorageDead(_880);
        StorageDead(_879);
        StorageLive(_889);
        _889 = ();
        _877 = std::result::Result::<(), error::ErrorCode>::Ok(move _889);
        StorageDead(_889);
        goto -> bb405;
    }

    bb391: {
        StorageDead(_880);
        StorageDead(_879);
        StorageLive(_890);
        _890 = error::ErrorCode::DefaultError;
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        _946 = const _;
        _901 = &(*_946);
        _900 = &(*_901);
        _899 = move _900 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_900);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        _909 = &_890;
        _908 = &(*_909);
        _907 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _908) -> [return: bb392, unwind: bb469];
    }

    bb392: {
        StorageDead(_908);
        _906 = [move _907];
        StorageDead(_907);
        _905 = &_906;
        _904 = &(*_905);
        _903 = move _904 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_904);
        _898 = Arguments::<'_>::new_v1(move _899, move _903) -> [return: bb393, unwind: bb469];
    }

    bb393: {
        StorageDead(_903);
        StorageDead(_899);
        _897 = format(move _898) -> [return: bb394, unwind: bb469];
    }

    bb394: {
        StorageDead(_898);
        StorageDead(_909);
        StorageDead(_906);
        StorageDead(_905);
        StorageDead(_901);
        _896 = move _897;
        StorageDead(_897);
        _895 = &_896;
        _894 = &(*_895);
        _893 = <String as Deref>::deref(move _894) -> [return: bb395, unwind: bb458];
    }

    bb395: {
        _892 = &(*_893);
        StorageDead(_894);
        _891 = solana_program::log::sol_log(move _892) -> [return: bb396, unwind: bb458];
    }

    bb396: {
        StorageDead(_892);
        drop(_896) -> [return: bb397, unwind: bb469];
    }

    bb397: {
        StorageDead(_896);
        StorageDead(_895);
        StorageDead(_893);
        StorageDead(_891);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        _945 = const _;
        _920 = &(*_945);
        _919 = &(*_920);
        _918 = move _919 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_919);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        _928 = &_45;
        _927 = &(*_928);
        _926 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _927) -> [return: bb398, unwind: bb469];
    }

    bb398: {
        StorageDead(_927);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        _931 = &_864;
        _930 = &(*_931);
        _929 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _930) -> [return: bb399, unwind: bb469];
    }

    bb399: {
        StorageDead(_930);
        _925 = [move _926, move _929];
        StorageDead(_929);
        StorageDead(_926);
        _924 = &_925;
        _923 = &(*_924);
        _922 = move _923 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_923);
        _917 = Arguments::<'_>::new_v1(move _918, move _922) -> [return: bb400, unwind: bb469];
    }

    bb400: {
        StorageDead(_922);
        StorageDead(_918);
        _916 = format(move _917) -> [return: bb401, unwind: bb469];
    }

    bb401: {
        StorageDead(_917);
        StorageDead(_931);
        StorageDead(_928);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_920);
        _915 = move _916;
        StorageDead(_916);
        _914 = &_915;
        _913 = &(*_914);
        _912 = <String as Deref>::deref(move _913) -> [return: bb402, unwind: bb457];
    }

    bb402: {
        _911 = &(*_912);
        StorageDead(_913);
        _910 = solana_program::log::sol_log(move _911) -> [return: bb403, unwind: bb457];
    }

    bb403: {
        StorageDead(_911);
        drop(_915) -> [return: bb404, unwind: bb469];
    }

    bb404: {
        StorageDead(_915);
        StorageDead(_914);
        StorageDead(_912);
        StorageDead(_910);
        StorageLive(_932);
        _932 = _890;
        _877 = std::result::Result::<(), error::ErrorCode>::Err(move _932);
        StorageDead(_932);
        StorageDead(_890);
        goto -> bb405;
    }

    bb405: {
        StorageDead(_878);
        _876 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _877) -> [return: bb406, unwind: bb469];
    }

    bb406: {
        StorageDead(_877);
        _933 = discriminant(_876);
        switchInt(move _933) -> [0: bb407, 1: bb408, otherwise: bb13];
    }

    bb407: {
        StorageLive(_937);
        _937 = ((_876 as Continue).0: ());
        _875 = _937;
        StorageDead(_937);
        StorageDead(_876);
        StorageDead(_875);
        StorageLive(_938);
        _938 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _938);
        StorageDead(_938);
        StorageDead(_864);
        StorageDead(_810);
        StorageDead(_806);
        StorageDead(_695);
        StorageDead(_608);
        StorageDead(_594);
        StorageDead(_580);
        StorageDead(_567);
        StorageDead(_549);
        StorageDead(_522);
        StorageDead(_503);
        StorageDead(_406);
        drop(_222) -> [return: bb410, unwind: bb470];
    }

    bb408: {
        StorageLive(_934);
        _934 = ((_876 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_936);
        _936 = _934;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _936) -> [return: bb409, unwind: bb469];
    }

    bb409: {
        StorageDead(_936);
        StorageDead(_934);
        goto -> bb412;
    }

    bb410: {
        StorageDead(_222);
        StorageDead(_221);
        drop(_212) -> [return: bb411, unwind: bb479];
    }

    bb411: {
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_158);
        StorageDead(_147);
        StorageDead(_100);
        _958 = const false;
        StorageDead(_89);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb456;
    }

    bb412: {
        StorageDead(_876);
        StorageDead(_875);
        goto -> bb413;
    }

    bb413: {
        StorageDead(_864);
        goto -> bb414;
    }

    bb414: {
        StorageDead(_810);
        StorageDead(_806);
        goto -> bb418;
    }

    bb415: {
        StorageDead(_793);
        StorageDead(_788);
        StorageDead(_787);
        goto -> bb418;
    }

    bb416: {
        StorageDead(_773);
        StorageDead(_769);
        StorageDead(_765);
        StorageDead(_764);
        StorageDead(_761);
        StorageDead(_760);
        goto -> bb418;
    }

    bb417: {
        StorageDead(_715);
        StorageDead(_713);
        StorageDead(_712);
        goto -> bb418;
    }

    bb418: {
        StorageDead(_695);
        goto -> bb422;
    }

    bb419: {
        StorageDead(_674);
        StorageDead(_671);
        goto -> bb421;
    }

    bb420: {
        StorageDead(_650);
        goto -> bb421;
    }

    bb421: {
        StorageDead(_647);
        StorageDead(_646);
        goto -> bb422;
    }

    bb422: {
        StorageDead(_608);
        goto -> bb423;
    }

    bb423: {
        StorageDead(_594);
        goto -> bb424;
    }

    bb424: {
        StorageDead(_580);
        goto -> bb425;
    }

    bb425: {
        StorageDead(_567);
        goto -> bb427;
    }

    bb426: {
        StorageDead(_553);
        StorageDead(_550);
        goto -> bb427;
    }

    bb427: {
        StorageDead(_549);
        goto -> bb429;
    }

    bb428: {
        StorageDead(_537);
        StorageDead(_535);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_523);
        goto -> bb429;
    }

    bb429: {
        StorageDead(_522);
        goto -> bb430;
    }

    bb430: {
        StorageDead(_503);
        goto -> bb435;
    }

    bb431: {
        StorageDead(_482);
        StorageDead(_475);
        StorageDead(_469);
        goto -> bb434;
    }

    bb432: {
        StorageDead(_448);
        StorageDead(_441);
        goto -> bb434;
    }

    bb433: {
        StorageDead(_420);
        StorageDead(_414);
        StorageDead(_413);
        goto -> bb434;
    }

    bb434: {
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb435;
    }

    bb435: {
        StorageDead(_406);
        goto -> bb444;
    }

    bb436: {
        StorageDead(_385);
        StorageDead(_379);
        StorageDead(_378);
        goto -> bb444;
    }

    bb437: {
        StorageDead(_344);
        StorageDead(_338);
        goto -> bb439;
    }

    bb438: {
        StorageDead(_313);
        StorageDead(_309);
        StorageDead(_308);
        goto -> bb439;
    }

    bb439: {
        StorageDead(_296);
        goto -> bb440;
    }

    bb440: {
        StorageDead(_285);
        StorageDead(_251);
        goto -> bb442;
    }

    bb441: {
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb442;
    }

    bb442: {
        StorageDead(_250);
        goto -> bb443;
    }

    bb443: {
        StorageDead(_238);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb444;
    }

    bb444: {
        drop(_222) -> [return: bb445, unwind: bb470];
    }

    bb445: {
        StorageDead(_222);
        StorageDead(_221);
        drop(_212) -> [return: bb446, unwind: bb479];
    }

    bb446: {
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb449;
    }

    bb447: {
        StorageDead(_190);
        StorageDead(_188);
        goto -> bb448;
    }

    bb448: {
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_171);
        goto -> bb449;
    }

    bb449: {
        StorageDead(_158);
        goto -> bb450;
    }

    bb450: {
        StorageDead(_147);
        goto -> bb451;
    }

    bb451: {
        StorageDead(_100);
        switchInt(_958) -> [0: bb452, otherwise: bb475];
    }

    bb452: {
        _958 = const false;
        StorageDead(_89);
        goto -> bb455;
    }

    bb453: {
        drop(_50) -> [return: bb454, unwind: bb474];
    }

    bb454: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb455;
    }

    bb455: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb456;
    }

    bb456: {
        return;
    }

    bb457 (cleanup): {
        drop(_915) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb458 (cleanup): {
        drop(_896) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb459 (cleanup): {
        drop(_851) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb460 (cleanup): {
        drop(_715) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb461 (cleanup): {
        drop(_674) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb462 (cleanup): {
        drop(_650) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb463 (cleanup): {
        drop(_482) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb464 (cleanup): {
        drop(_448) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb465 (cleanup): {
        drop(_420) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb466 (cleanup): {
        drop(_385) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb467 (cleanup): {
        drop(_344) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb468 (cleanup): {
        drop(_313) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb469 (cleanup): {
        drop(_222) -> [return: bb470, unwind terminate(cleanup)];
    }

    bb470 (cleanup): {
        drop(_212) -> [return: bb479, unwind terminate(cleanup)];
    }

    bb471 (cleanup): {
        drop(_190) -> [return: bb479, unwind terminate(cleanup)];
    }

    bb472 (cleanup): {
        drop(_50) -> [return: bb474, unwind terminate(cleanup)];
    }

    bb473 (cleanup): {
        drop(_24) -> [return: bb474, unwind terminate(cleanup)];
    }

    bb474 (cleanup): {
        resume;
    }

    bb475: {
        drop(_89) -> [return: bb452, unwind: bb474];
    }

    bb476 (cleanup): {
        _975 = discriminant(_223);
        goto -> bb470;
    }

    bb477 (cleanup): {
        _976 = discriminant(_213);
        goto -> bb479;
    }

    bb478 (cleanup): {
        drop(_89) -> [return: bb474, unwind terminate(cleanup)];
    }

    bb479 (cleanup): {
        switchInt(_958) -> [0: bb474, otherwise: bb478];
    }

    bb480 (cleanup): {
        _977 = discriminant(_90);
        goto -> bb474;
    }

    bb481 (cleanup): {
        _978 = discriminant(_51);
        goto -> bb474;
    }
}
