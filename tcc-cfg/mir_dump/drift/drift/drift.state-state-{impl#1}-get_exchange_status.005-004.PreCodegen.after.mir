// MIR for `state::state::<impl at programs/drift/src/state/state.rs:68:1: 68:11>::get_exchange_status` after PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:68:1: 68:11>::get_exchange_status(_1: &state::state::State) -> std::result::Result<BitFlags<state::state::ExchangeStatus>, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<enumflags2::BitFlags<state::state::ExchangeStatus>, error::ErrorCode>;
    let mut _2: std::result::Result<enumflags2::BitFlags<state::state::ExchangeStatus>, enumflags2::FromBitsError<state::state::ExchangeStatus>>;
    let mut _3: usize;
    let mut _4: u8;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).19: u8);
        _3 = <usize as From<u8>>::from(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _2 = BitFlags::<state::state::ExchangeStatus>::from_bits(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        _0 = <std::result::Result<BitFlags<state::state::ExchangeStatus>, FromBitsError<state::state::ExchangeStatus>> as SafeUnwrap>::safe_unwrap(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_2);
        return;
    }
}
