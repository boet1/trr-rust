// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_fuel_overflow_status` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_fuel_overflow_status(_1: &mut UserStats, _2: bool) -> () {
    debug self => _1;
    debug has_overflow => _2;
    let mut _0: ();
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: (u8, bool);
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: u8;
    let mut _10: (u8, bool);

    bb0: {
        StorageLive(_3);
        _3 = _2;
        switchInt(move _3) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _6 = CheckedAdd(const _, const 0_u8);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_u8) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = move (_6.0: u8);
        _4 = move _5 as u8 (IntToInt);
        StorageDead(_5);
        ((*_1).16: u8) = BitOr(((*_1).16: u8), move _4);
        StorageDead(_4);
        _0 = const ();
        goto -> bb5;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _10 = CheckedAdd(const _, const 0_u8);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_u8) -> [success: bb4, unwind continue];
    }

    bb4: {
        _9 = move (_10.0: u8);
        _8 = move _9 as u8 (IntToInt);
        StorageDead(_9);
        _7 = Not(move _8);
        StorageDead(_8);
        ((*_1).16: u8) = BitAnd(((*_1).16: u8), move _7);
        StorageDead(_7);
        _0 = const ();
        goto -> bb5;
    }

    bb5: {
        StorageDead(_3);
        return;
    }
}
