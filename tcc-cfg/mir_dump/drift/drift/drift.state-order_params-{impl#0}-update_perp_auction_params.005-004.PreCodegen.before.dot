digraph Mir_0_3642 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_params::OrderParams::update_perp_auction_params(_1: &amp;ReErased mut state::order_params::OrderParams, _2: &amp;ReErased state::perp_market::PerpMarket, _3: i64, _4: bool) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _5: bool;<br align="left"/>let mut _6: isize;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _8: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _9: &amp;ReErased mut state::order_params::OrderParams;<br align="left"/>let mut _10: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _11: i64;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: bool;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _19: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _20: &amp;ReErased mut state::order_params::OrderParams;<br align="left"/>let mut _21: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _22: i64;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: &amp;ReErased state::user::OrderType;<br align="left"/>let mut _25: &amp;ReErased state::user::OrderType;<br align="left"/>let _26: state::user::OrderType;<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: bool;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: &amp;ReErased state::user::OrderType;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug perp_market =&gt; _2;<br align="left"/>debug oracle_price =&gt; _3;<br align="left"/>debug is_signed_msg =&gt; _4;<br align="left"/>debug sanitized =&gt; _5;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>>;
    bb0__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>_6 = discriminant(((*_1).0: state::user::OrderType))<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;mut (*_1)<br/>StorageLive(_10)<br/>_10 = &amp;(*_2)<br/>StorageLive(_11)<br/>_11 = _3<br/>StorageLive(_12)<br/>_12 = _4<br/></td></tr><tr><td align="left">_8 = order_params::OrderParams::update_perp_auction_params_limit_orders(move _9, move _10, move _11, move _12)</td></tr></table>>];
    bb3__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb4__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_13 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb5__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_7 as Continue).0: bool)<br/>_5 = _17<br/>StorageDead(_17)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb8__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;mut (*_1)<br/>StorageLive(_21)<br/>_21 = &amp;(*_2)<br/>StorageLive(_22)<br/>_22 = _3<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;((*_1).0: state::user::OrderType)<br/>StorageLive(_25)<br/>_34 = const _<br/>_25 = &amp;(*_34)<br/></td></tr><tr><td align="left">_23 = &lt;state::user::OrderType as PartialEq&gt;::eq(move _24, move _25)</td></tr></table>>];
    bb10__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_27)<br/>_27 = _4<br/></td></tr><tr><td align="left">_19 = order_params::OrderParams::update_perp_auction_params_market_and_oracle_orders(move _20, move _21, move _22, move _23, move _27)</td></tr></table>>];
    bb11__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb12__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_28 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb13__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_18 as Continue).0: bool)<br/>_5 = _32<br/>StorageDead(_32)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb15__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = _5<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _33)<br/>StorageDead(_33)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3642 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3642 -> bb9__0_3642 [label="0"];
    bb0__0_3642 -> bb2__0_3642 [label="1"];
    bb0__0_3642 -> bb9__0_3642 [label="4"];
    bb0__0_3642 -> bb1__0_3642 [label="otherwise"];
    bb1__0_3642 -> bb16__0_3642 [label=""];
    bb2__0_3642 -> bb3__0_3642 [label="return"];
    bb3__0_3642 -> bb4__0_3642 [label="return"];
    bb4__0_3642 -> bb5__0_3642 [label="0"];
    bb4__0_3642 -> bb7__0_3642 [label="1"];
    bb4__0_3642 -> bb6__0_3642 [label="otherwise"];
    bb5__0_3642 -> bb16__0_3642 [label=""];
    bb7__0_3642 -> bb8__0_3642 [label="return"];
    bb8__0_3642 -> bb17__0_3642 [label=""];
    bb9__0_3642 -> bb10__0_3642 [label="return"];
    bb10__0_3642 -> bb11__0_3642 [label="return"];
    bb11__0_3642 -> bb12__0_3642 [label="return"];
    bb12__0_3642 -> bb13__0_3642 [label="0"];
    bb12__0_3642 -> bb14__0_3642 [label="1"];
    bb12__0_3642 -> bb6__0_3642 [label="otherwise"];
    bb13__0_3642 -> bb16__0_3642 [label=""];
    bb14__0_3642 -> bb15__0_3642 [label="return"];
    bb15__0_3642 -> bb17__0_3642 [label=""];
    bb16__0_3642 -> bb18__0_3642 [label=""];
    bb17__0_3642 -> bb18__0_3642 [label=""];
}
