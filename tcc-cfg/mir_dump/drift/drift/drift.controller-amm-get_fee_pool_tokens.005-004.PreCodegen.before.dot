digraph Mir_0_90 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_fee_pool_tokens(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased mut state::spot_market::SpotMarket) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let mut _3: u128;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: &amp;ReErased state::perp_market::PoolBalance;<br align="left"/>let mut _8: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _9: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _10: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _11: &amp;ReErased state::perp_market::PoolBalance;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _16: u128;<br align="left"/>debug perp_market =&gt; _1;<br align="left"/>debug spot_market =&gt; _2;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>>;
    bb0__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(((*_1).1: state::perp_market::AMM).4: state::perp_market::PoolBalance)<br/></td></tr><tr><td align="left">_6 = &lt;PoolBalance as SpotBalance&gt;::balance(move _7)</td></tr></table>>];
    bb1__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_2)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;(((*_1).1: state::perp_market::AMM).4: state::perp_market::PoolBalance)<br/></td></tr><tr><td align="left">_10 = &lt;PoolBalance as SpotBalance&gt;::balance_type(move _11)</td></tr></table>>];
    bb2__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_9 = &amp;(*_10)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_5 = get_token_amount(move _6, move _8, move _9)</td></tr></table>>];
    bb3__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb4__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_12 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb5__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_4 as Continue).0: u128)<br/>_3 = _16<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_0 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _3)</td></tr></table>>];
    bb6__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_15)<br/>_15 = _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb8__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_3)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_90 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_90 -> bb1__0_90 [label="return"];
    bb1__0_90 -> bb2__0_90 [label="return"];
    bb2__0_90 -> bb3__0_90 [label="return"];
    bb3__0_90 -> bb4__0_90 [label="return"];
    bb4__0_90 -> bb5__0_90 [label="0"];
    bb4__0_90 -> bb7__0_90 [label="1"];
    bb4__0_90 -> bb6__0_90 [label="otherwise"];
    bb5__0_90 -> bb9__0_90 [label="return"];
    bb7__0_90 -> bb8__0_90 [label="return"];
    bb8__0_90 -> bb10__0_90 [label=""];
    bb9__0_90 -> bb10__0_90 [label=""];
}
