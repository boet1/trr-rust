// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_market_depth_for_funding_rate` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_market_depth_for_funding_rate(_1: &PerpMarket) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _2: u128;
    let mut _3: &state::perp_market::PerpMarket;
    let mut _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: isize;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: u64;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _24: std::result::Result<u64, error::ErrorCode>;
    let mut _25: u64;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: u64;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _33: std::result::Result<u64, error::ErrorCode>;
    let mut _34: u64;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: u64;
    scope 1 {
        debug open_interest => _2;
        let _4: u64;
        let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _16: u128;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: u64;
        let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _30: u64;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: u64;
        scope 2 {
            debug depth => _4;
        }
        scope 3 {
            debug residual => _13;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _27;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _30;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _36;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _39;
            scope 18 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = PerpMarket::get_open_interest(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        _10 = <u128 as SafeMath>::safe_div(move _11, const 1000_u128) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u128);
        _8 = _16;
        StorageDead(_16);
        _7 = <u128 as Cast>::cast::<u64>(move _8) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb25;
    }

    bb8: {
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_7);
        _17 = discriminant(_6);
        switchInt(move _17) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_6 as Continue).0: u64);
        _5 = _21;
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = (((*_1).1: state::perp_market::AMM).54: u64);
        _24 = <u64 as SafeMath>::safe_mul(move _25, const 100_u64) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_18);
        _18 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_18);
        goto -> bb25;
    }

    bb13: {
        StorageDead(_25);
        _23 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _24) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: u64);
        _22 = _30;
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = (((*_1).1: state::perp_market::AMM).54: u64);
        _33 = <u64 as SafeMath>::safe_mul(move _34, const 5000_u64) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_5);
        goto -> bb24;
    }

    bb18: {
        StorageDead(_34);
        _32 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_33);
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_32 as Continue).0: u64);
        _31 = _39;
        StorageDead(_39);
        _4 = <u64 as Ord>::clamp(move _5, move _22, move _31) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_36);
        _36 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_22);
        StorageDead(_5);
        StorageDead(_32);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_31);
        StorageDead(_22);
        StorageDead(_5);
        StorageDead(_32);
        StorageDead(_23);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_40);
        _40 = _4;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _40);
        StorageDead(_40);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb27;
    }

    bb24: {
        StorageDead(_23);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_5);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}
