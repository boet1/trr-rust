// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::validate_markets` after PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::validate_markets(_1: &SerumFulfillmentParams<'_, '_>, _2: &SpotMarket, _3: &SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug base_market => _2;
    debug quote_market => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: bool;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let _9: &anchor_spl::token::spl_token::state::Account;
    let mut _10: &anchor_spl::token::TokenAccount;
    let _11: &anchor_spl::token::TokenAccount;
    let mut _12: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let mut _14: ();
    let _15: error::ErrorCode;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 2];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &error::ErrorCode;
    let _34: &error::ErrorCode;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: error::ErrorCode;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: ();
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _46: std::result::Result<(), error::ErrorCode>;
    let mut _47: bool;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let _49: &anchor_spl::token::spl_token::state::Account;
    let mut _50: &anchor_spl::token::TokenAccount;
    let _51: &anchor_spl::token::TokenAccount;
    let mut _52: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: ();
    let _55: error::ErrorCode;
    let _56: ();
    let mut _57: &str;
    let _58: &str;
    let mut _59: &std::string::String;
    let _60: &std::string::String;
    let _61: std::string::String;
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[&str; 2];
    let _66: &[&str; 2];
    let _67: [&str; 2];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let mut _69: &[core::fmt::rt::Argument<'_>; 1];
    let _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: [core::fmt::rt::Argument<'_>; 1];
    let mut _72: core::fmt::rt::Argument<'_>;
    let mut _73: &error::ErrorCode;
    let _74: &error::ErrorCode;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: error::ErrorCode;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _83: ();
    let mut _84: ();
    let mut _87: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _88: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _89: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _90: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug error_code => _15;
        let _22: std::string::String;
        let mut _86: &[&str; 2];
        scope 2 {
            debug res => _22;
        }
    }
    scope 3 {
        debug residual => _40;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _43;
        scope 6 {
        }
    }
    scope 7 {
        debug error_code => _55;
        let _62: std::string::String;
        let mut _85: &[&str; 2];
        scope 8 {
            debug res => _62;
        }
    }
    scope 9 {
        debug residual => _80;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _83;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _87 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _89 = (((_87.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _12 = &(*_89);
        _11 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &(*_11);
        _9 = <anchor_spl::token::TokenAccount as Deref>::deref(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_10);
        _8 = &((*_9).0: anchor_lang::prelude::Pubkey);
        StorageLive(_13);
        _13 = &((*_2).2: anchor_lang::prelude::Pubkey);
        _7 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _8, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_14);
        _14 = ();
        _6 = std::result::Result::<(), error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        goto -> bb13;
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_15);
        _15 = error::ErrorCode::DefaultError;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _86 = const _;
        _26 = &(*_86);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_15;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _33) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb10, unwind: bb38];
    }

    bb10: {
        StorageDead(_17);
        drop(_21) -> [return: bb11, unwind: bb39];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = const "base mints dont match";
        _36 = &(*_37);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_38);
        _38 = _15;
        _6 = std::result::Result::<(), error::ErrorCode>::Err(move _38);
        StorageDead(_38);
        StorageDead(_15);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_6);
        _39 = discriminant(_5);
        switchInt(move _39) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_43);
        _43 = ((_5 as Continue).0: ());
        _4 = _43;
        StorageDead(_43);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _88 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _90 = (((_88.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _52 = &(*_90);
        _51 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _52) -> [return: bb19, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb36;
    }

    bb19: {
        _50 = &(*_51);
        _49 = <anchor_spl::token::TokenAccount as Deref>::deref(move _50) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = &((*_49).0: anchor_lang::prelude::Pubkey);
        StorageLive(_53);
        _53 = &((*_3).2: anchor_lang::prelude::Pubkey);
        _47 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _48, move _53) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _47) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_54);
        _54 = ();
        _46 = std::result::Result::<(), error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        goto -> bb31;
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_55);
        _55 = error::ErrorCode::DefaultError;
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _85 = const _;
        _66 = &(*_85);
        _65 = &(*_66);
        _64 = move _65 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_55;
        _73 = &(*_74);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _73) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_73);
        _71 = [move _72];
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = move _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_69);
        _63 = Arguments::<'_>::new_v1(move _64, move _68) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_68);
        StorageDead(_64);
        _62 = format(move _63) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_66);
        _61 = move _62;
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = <String as Deref>::deref(move _59) -> [return: bb27, unwind: bb37];
    }

    bb27: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = solana_program::log::sol_log(move _57) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        StorageDead(_57);
        drop(_61) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = const "base mints dont match";
        _76 = &(*_77);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_76);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_78);
        _78 = _55;
        _46 = std::result::Result::<(), error::ErrorCode>::Err(move _78);
        StorageDead(_78);
        StorageDead(_55);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_47);
        _45 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _46) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_46);
        _79 = discriminant(_45);
        switchInt(move _79) -> [0: bb33, 1: bb34, otherwise: bb16];
    }

    bb33: {
        StorageLive(_83);
        _83 = ((_45 as Continue).0: ());
        _44 = _83;
        StorageDead(_83);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_84);
        _84 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _84);
        StorageDead(_84);
        goto -> bb36;
    }

    bb34: {
        StorageLive(_80);
        _80 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_61) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_21) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }
}
