// MIR for `state::events::<impl at programs/drift/src/state/events.rs:495:46: 495:51>::clone` after PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:495:46: 495:51>::clone(_1: &PerpBankruptcyRecord) -> PerpBankruptcyRecord {
    debug self => _1;
    let mut _0: state::events::PerpBankruptcyRecord;
    let mut _2: u16;
    let mut _3: &u16;
    let _4: &u16;
    let mut _5: i128;
    let mut _6: &i128;
    let _7: &i128;
    let mut _8: u128;
    let mut _9: &u128;
    let _10: &u128;
    let mut _11: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _12: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let _13: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _14: std::option::Option<u128>;
    let mut _15: &std::option::Option<u128>;
    let _16: &std::option::Option<u128>;
    let mut _17: i128;
    let mut _18: &i128;
    let _19: &i128;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: u16);
        _3 = &(*_4);
        _2 = <u16 as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: i128);
        _6 = &(*_7);
        _5 = <i128 as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: u128);
        _9 = &(*_10);
        _8 = <u128 as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: std::option::Option<anchor_lang::prelude::Pubkey>);
        _12 = &(*_13);
        _11 = <Option<anchor_lang::prelude::Pubkey> as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: std::option::Option<u128>);
        _15 = &(*_16);
        _14 = <Option<u128> as Clone>::clone(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: i128);
        _18 = &(*_19);
        _17 = <i128 as Clone>::clone(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        _0 = PerpBankruptcyRecord { market_index: move _2, pnl: move _5, if_payment: move _8, clawback_user: move _11, clawback_user_payment: move _14, cumulative_funding_rate_delta: move _17 };
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
