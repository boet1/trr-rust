digraph Mir_0_89 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn formulaic_update_k(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased state::oracle::OraclePriceData, _3: i128, _4: i64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _5: u128;<br align="left"/>let _6: u128;<br align="left"/>let _7: u128;<br align="left"/>let _8: u128;<br align="left"/>let _9: i64;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _11: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _12: i128;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: i64;<br align="left"/>let _18: i64;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: i64;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: u32;<br align="left"/>let mut _24: u32;<br align="left"/>let mut _25: u32;<br align="left"/>let mut _26: i64;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _28: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _29: i64;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: i64;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: i64;<br align="left"/>let mut _37: i64;<br align="left"/>let mut _38: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _39: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _40: i64;<br align="left"/>let mut _41: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _42: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _43: i64;<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: i64;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: i64;<br align="left"/>let mut _51: isize;<br align="left"/>let _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _55: i64;<br align="left"/>let _56: ();<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: i64;<br align="left"/>let mut _59: bool;<br align="left"/>let mut _60: u128;<br align="left"/>let mut _61: bool;<br align="left"/>let mut _62: i64;<br align="left"/>let mut _63: bool;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _65: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _66: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _67: isize;<br align="left"/>let _68: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _69: !;<br align="left"/>let mut _70: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _71: bool;<br align="left"/>let _72: i128;<br align="left"/>let mut _73: i128;<br align="left"/>let mut _74: i128;<br align="left"/>let mut _75: i128;<br align="left"/>let mut _76: u8;<br align="left"/>let mut _77: (i128, bool);<br align="left"/>let mut _78: bool;<br align="left"/>let mut _79: bool;<br align="left"/>let mut _80: bool;<br align="left"/>let mut _81: bool;<br align="left"/>let mut _82: (i128, bool);<br align="left"/>let _83: i128;<br align="left"/>let mut _84: i128;<br align="left"/>let mut _85: i128;<br align="left"/>let mut _86: i128;<br align="left"/>let mut _87: u8;<br align="left"/>let mut _88: (i128, bool);<br align="left"/>let mut _89: bool;<br align="left"/>let mut _90: bool;<br align="left"/>let mut _91: bool;<br align="left"/>let mut _92: bool;<br align="left"/>let mut _93: (i128, bool);<br align="left"/>let _94: u128;<br align="left"/>let _95: u128;<br align="left"/>let mut _96: (u128, u128);<br align="left"/>let mut _97: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _98: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _99: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _100: i128;<br align="left"/>let mut _101: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _102: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _103: i64;<br align="left"/>let mut _104: isize;<br align="left"/>let _105: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _106: !;<br align="left"/>let mut _107: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _108: i128;<br align="left"/>let mut _109: i128;<br align="left"/>let mut _110: i128;<br align="left"/>let mut _111: isize;<br align="left"/>let _112: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _113: !;<br align="left"/>let mut _114: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _115: (u128, u128);<br align="left"/>let _116: math::bn::U192;<br align="left"/>let mut _117: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _118: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _119: math::bn::U192;<br align="left"/>let mut _120: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _121: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _122: math::bn::U192;<br align="left"/>let mut _123: u128;<br align="left"/>let mut _124: math::bn::U192;<br align="left"/>let mut _125: u128;<br align="left"/>let mut _126: isize;<br align="left"/>let _127: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _128: !;<br align="left"/>let mut _129: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _130: math::bn::U192;<br align="left"/>let mut _131: math::bn::U192;<br align="left"/>let mut _132: u128;<br align="left"/>let mut _133: isize;<br align="left"/>let _134: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _135: !;<br align="left"/>let mut _136: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _137: math::bn::U192;<br align="left"/>let _138: math::cp_curve::UpdateKResult;<br align="left"/>let mut _139: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::cp_curve::UpdateKResult&gt;;<br align="left"/>let mut _140: std::result::Result&lt;math::cp_curve::UpdateKResult, error::ErrorCode&gt;;<br align="left"/>let mut _141: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _142: math::bn::U192;<br align="left"/>let mut _143: isize;<br align="left"/>let _144: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _145: !;<br align="left"/>let mut _146: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _147: math::cp_curve::UpdateKResult;<br align="left"/>let _148: i128;<br align="left"/>let mut _149: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _150: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _151: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _152: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let _153: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let mut _154: isize;<br align="left"/>let _155: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _156: !;<br align="left"/>let mut _157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _158: i128;<br align="left"/>let _159: bool;<br align="left"/>let mut _160: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _161: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _162: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _163: i128;<br align="left"/>let mut _164: isize;<br align="left"/>let _165: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _166: !;<br align="left"/>let mut _167: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _168: bool;<br align="left"/>let mut _169: bool;<br align="left"/>let _170: ();<br align="left"/>let mut _171: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _172: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _173: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _174: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let _175: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let mut _176: isize;<br align="left"/>let _177: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _178: !;<br align="left"/>let mut _179: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _180: ();<br align="left"/>let _181: u128;<br align="left"/>let _182: u128;<br align="left"/>let _183: u128;<br align="left"/>let _184: u128;<br align="left"/>let _185: ();<br align="left"/>let _186: ();<br align="left"/>let mut _187: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _188: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _189: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _190: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _191: &amp;ReErased [u8];<br align="left"/>let _192: &amp;ReErased [u8];<br align="left"/>let mut _193: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _194: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _195: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _196: &amp;ReErased state::events::CurveRecord;<br align="left"/>let _197: &amp;ReErased state::events::CurveRecord;<br align="left"/>let _198: state::events::CurveRecord;<br align="left"/>let mut _199: i64;<br align="left"/>let mut _200: u64;<br align="left"/>let _201: u64;<br align="left"/>let mut _202: u64;<br align="left"/>let mut _203: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _204: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _205: u64;<br align="left"/>let mut _206: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _207: u16;<br align="left"/>let mut _208: u128;<br align="left"/>let mut _209: u128;<br align="left"/>let mut _210: u128;<br align="left"/>let mut _211: u128;<br align="left"/>let mut _212: u128;<br align="left"/>let mut _213: u128;<br align="left"/>let mut _214: u128;<br align="left"/>let mut _215: u128;<br align="left"/>let mut _216: u128;<br align="left"/>let mut _217: i128;<br align="left"/>let mut _218: u128;<br align="left"/>let mut _219: i128;<br align="left"/>let mut _220: i128;<br align="left"/>let mut _221: u32;<br align="left"/>let mut _222: i128;<br align="left"/>let mut _223: i128;<br align="left"/>let mut _224: i128;<br align="left"/>let mut _225: i64;<br align="left"/>let mut _226: u128;<br align="left"/>let mut _227: u64;<br align="left"/>let mut _228: ();<br align="left"/>debug market =&gt; _1;<br align="left"/>debug _oracle_price_data =&gt; _2;<br align="left"/>debug funding_imbalance_cost =&gt; _3;<br align="left"/>debug now =&gt; _4;<br align="left"/>debug peg_multiplier_before =&gt; _5;<br align="left"/>debug base_asset_reserve_before =&gt; _6;<br align="left"/>debug quote_asset_reserve_before =&gt; _7;<br align="left"/>debug sqrt_k_before =&gt; _8;<br align="left"/>debug funding_imbalance_cost_i64 =&gt; _9;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug budget =&gt; _18;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug residual =&gt; _52;<br align="left"/>debug val =&gt; _55;<br align="left"/>debug residual =&gt; _68;<br align="left"/>debug val =&gt; _71;<br align="left"/>debug k_pct_upper_bound =&gt; _72;<br align="left"/>debug k_pct_lower_bound =&gt; _83;<br align="left"/>debug k_scale_numerator =&gt; _94;<br align="left"/>debug k_scale_denominator =&gt; _95;<br align="left"/>debug residual =&gt; _105;<br align="left"/>debug val =&gt; _108;<br align="left"/>debug residual =&gt; _112;<br align="left"/>debug val =&gt; _115;<br align="left"/>debug new_sqrt_k =&gt; _116;<br align="left"/>debug residual =&gt; _127;<br align="left"/>debug val =&gt; _130;<br align="left"/>debug residual =&gt; _134;<br align="left"/>debug val =&gt; _137;<br align="left"/>debug update_k_result =&gt; _138;<br align="left"/>debug residual =&gt; _144;<br align="left"/>debug val =&gt; _147;<br align="left"/>debug adjustment_cost =&gt; _148;<br align="left"/>debug residual =&gt; _155;<br align="left"/>debug val =&gt; _158;<br align="left"/>debug cost_applied =&gt; _159;<br align="left"/>debug residual =&gt; _165;<br align="left"/>debug val =&gt; _168;<br align="left"/>debug residual =&gt; _177;<br align="left"/>debug val =&gt; _180;<br align="left"/>debug peg_multiplier_after =&gt; _181;<br align="left"/>debug base_asset_reserve_after =&gt; _182;<br align="left"/>debug quote_asset_reserve_after =&gt; _183;<br align="left"/>debug sqrt_k_after =&gt; _184;<br align="left"/>debug current_id =&gt; _201;<br align="left"/>>;
    bb0__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>_5 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>StorageLive(_6)<br/>_6 = (((*_1).1: state::perp_market::AMM).5: u128)<br/>StorageLive(_7)<br/>_7 = (((*_1).1: state::perp_market::AMM).6: u128)<br/>StorageLive(_8)<br/>_8 = (((*_1).1: state::perp_market::AMM).10: u128)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _3<br/></td></tr><tr><td align="left">_11 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _12)</td></tr></table>>];
    bb1__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb2__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_13 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb3__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_10 as Continue).0: i64)<br/>_9 = _17<br/>StorageDead(_17)<br/>StorageDead(_10)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _9<br/>_19 = Lt(move _20, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb4__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb6__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = (((*_1).1: state::perp_market::AMM).65: u32)<br/>StorageLive(_24)<br/>_24 = (((*_1).1: state::perp_market::AMM).66: u32)<br/></td></tr><tr><td align="left">_22 = std::cmp::max::&lt;u32&gt;(move _23, move _24)</td></tr></table>>];
    bb8__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = (((*_1).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_37)<br/>_37 = _9<br/>_35 = Lt(move _36, move _37)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb9__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_25)<br/>_25 = (((*_1).1: state::perp_market::AMM).63: u32)<br/>_21 = Le(move _22, move _25)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb10__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_22)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _9<br/></td></tr><tr><td align="left">_28 = &lt;i64 as SafeMath&gt;::safe_div(move _29, const 2_i64)</td></tr></table>>];
    bb11__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb12__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_30 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb13__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Continue).0: i64)<br/>_26 = _34<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_18 = core::num::&lt;impl i64&gt;::abs(move _26)</td></tr></table>>];
    bb14__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb15__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_26)<br/>StorageDead(_27)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_22)<br/>_18 = const 0_i64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = (((*_1).1: state::perp_market::AMM).49: i64)<br/></td></tr><tr><td align="left">_43 = std::cmp::max::&lt;i64&gt;(const 0_i64, move _44)</td></tr></table>>];
    bb20__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>_18 = const 0_i64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageLive(_45)<br/>_45 = _9<br/></td></tr><tr><td align="left">_42 = &lt;i64 as SafeMath&gt;::safe_sub(move _43, move _45)</td></tr></table>>];
    bb22__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_41 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _42)</td></tr></table>>];
    bb23__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>_46 = discriminant(_41)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb24__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_41 as Continue).0: i64)<br/>_40 = _50<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_39 = &lt;i64 as SafeMath&gt;::safe_div(move _40, const 2_i64)</td></tr></table>>];
    bb25__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_41 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb26__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _39)</td></tr></table>>];
    bb28__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_51 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _51)</td></tr></table>>];
    bb29__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_38 as Continue).0: i64)<br/>_18 = _55<br/>StorageDead(_55)<br/>StorageDead(_41)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_38 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_54)<br/>_54 = _52<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _54)</td></tr></table>>];
    bb31__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = _18<br/>_57 = Gt(move _58, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb34__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = (((*_1).1: state::perp_market::AMM).10: u128)<br/>_59 = Lt(move _60, const _)<br/></td></tr><tr><td align="left">switchInt(move _59)</td></tr></table>>];
    bb35__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = _18<br/>_61 = Lt(move _62, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb39__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = &amp;((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_65 = AMM::can_lower_k(move _66)</td></tr></table>>];
    bb40__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb41__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_67 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _67)</td></tr></table>>];
    bb42__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_71)<br/>_71 = ((_64 as Continue).0: bool)<br/>_63 = _71<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">switchInt(move _63)</td></tr></table>>];
    bb43__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_70)<br/>_70 = _68<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _70)</td></tr></table>>];
    bb44__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_68)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = (((*_1).1: state::perp_market::AMM).70: u8)<br/>_75 = move _76 as i128 (IntToInt)<br/>StorageDead(_76)<br/>_77 = CheckedMul(const _, _75)<br/></td></tr><tr><td align="left">assert(!move (_77.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, move _75)</td></tr></table>>];
    bb46__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_74 = move (_77.0: i128)<br/>StorageDead(_75)<br/>_78 = Eq(const 100_i128, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _78, &quot;attempt to divide `{}` by zero&quot;, _74)</td></tr></table>>];
    bb48__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_79 = Eq(const 100_i128, const -1_i128)<br/>_80 = Eq(_74, const i128::MIN)<br/>_81 = BitAnd(move _79, move _80)<br/></td></tr><tr><td align="left">assert(!move _81, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _74, const 100_i128)</td></tr></table>>];
    bb49__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_73 = Div(move _74, const 100_i128)<br/>StorageDead(_74)<br/>_82 = CheckedAdd(const _, _73)<br/></td></tr><tr><td align="left">assert(!move (_82.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, move _73)</td></tr></table>>];
    bb50__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_72 = move (_82.0: i128)<br/>StorageDead(_73)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = (((*_1).1: state::perp_market::AMM).70: u8)<br/>_86 = move _87 as i128 (IntToInt)<br/>StorageDead(_87)<br/>_88 = CheckedMul(const _, _86)<br/></td></tr><tr><td align="left">assert(!move (_88.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, move _86)</td></tr></table>>];
    bb51__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_85 = move (_88.0: i128)<br/>StorageDead(_86)<br/>_89 = Eq(const 100_i128, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _89, &quot;attempt to divide `{}` by zero&quot;, _85)</td></tr></table>>];
    bb52__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">_90 = Eq(const 100_i128, const -1_i128)<br/>_91 = Eq(_85, const i128::MIN)<br/>_92 = BitAnd(move _90, move _91)<br/></td></tr><tr><td align="left">assert(!move _92, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _85, const 100_i128)</td></tr></table>>];
    bb53__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">_84 = Div(move _85, const 100_i128)<br/>StorageDead(_85)<br/>_93 = CheckedSub(const _, _84)<br/></td></tr><tr><td align="left">assert(!move (_93.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const _, move _84)</td></tr></table>>];
    bb54__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_83 = move (_93.0: i128)<br/>StorageDead(_84)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = &amp;mut (*_1)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = _18<br/></td></tr><tr><td align="left">_102 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _103)</td></tr></table>>];
    bb55__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/></td></tr><tr><td align="left">_101 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _102)</td></tr></table>>];
    bb56__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>_104 = discriminant(_101)<br/></td></tr><tr><td align="left">switchInt(move _104)</td></tr></table>>];
    bb57__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageLive(_108)<br/>_108 = ((_101 as Continue).0: i128)<br/>_100 = _108<br/>StorageDead(_108)<br/>StorageLive(_109)<br/>_109 = _72<br/>StorageLive(_110)<br/>_110 = _83<br/></td></tr><tr><td align="left">_98 = calculate_budgeted_k_scale(move _99, move _100, move _109, move _110)</td></tr></table>>];
    bb58__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_101 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_107)<br/>_107 = _105<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _107)</td></tr></table>>];
    bb59__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageDead(_105)<br/>StorageDead(_100)<br/>StorageDead(_99)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_109)<br/>StorageDead(_100)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">_97 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _98)</td></tr></table>>];
    bb61__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_111 = discriminant(_97)<br/></td></tr><tr><td align="left">switchInt(move _111)</td></tr></table>>];
    bb62__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_115)<br/>_115 = ((_97 as Continue).0: (u128, u128))<br/>_96 = _115<br/>StorageDead(_115)<br/>StorageLive(_94)<br/>_94 = (_96.0: u128)<br/>StorageLive(_95)<br/>_95 = (_96.1: u128)<br/>StorageDead(_101)<br/>StorageDead(_97)<br/>StorageDead(_96)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = (((*_1).1: state::perp_market::AMM).10: u128)<br/></td></tr><tr><td align="left">_122 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _123)</td></tr></table>>];
    bb63__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_112)<br/>_112 = ((_97 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_114)<br/>_114 = _112<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _114)</td></tr></table>>];
    bb64__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_112)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>_125 = _94<br/></td></tr><tr><td align="left">_124 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _125)</td></tr></table>>];
    bb66__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/></td></tr><tr><td align="left">_121 = &lt;U192 as SafeMath&gt;::safe_mul(move _122, move _124)</td></tr></table>>];
    bb67__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_122)<br/></td></tr><tr><td align="left">_120 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _121)</td></tr></table>>];
    bb68__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>_126 = discriminant(_120)<br/></td></tr><tr><td align="left">switchInt(move _126)</td></tr></table>>];
    bb69__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageLive(_130)<br/>_130 = ((_120 as Continue).0: math::bn::U192)<br/>_119 = _130<br/>StorageDead(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_132 = _95<br/></td></tr><tr><td align="left">_131 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _132)</td></tr></table>>];
    bb70__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_127)<br/>_127 = ((_120 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_129)<br/>_129 = _127<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _129)</td></tr></table>>];
    bb71__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_127)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_132)<br/></td></tr><tr><td align="left">_118 = &lt;U192 as SafeMath&gt;::safe_div(move _119, move _131)</td></tr></table>>];
    bb73__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_117 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _118)</td></tr></table>>];
    bb74__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>_133 = discriminant(_117)<br/></td></tr><tr><td align="left">switchInt(move _133)</td></tr></table>>];
    bb75__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageLive(_137)<br/>_137 = ((_117 as Continue).0: math::bn::U192)<br/>_116 = _137<br/>StorageDead(_137)<br/>StorageDead(_120)<br/>StorageDead(_117)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>_141 = &amp;(*_1)<br/>StorageLive(_142)<br/>_142 = _116<br/></td></tr><tr><td align="left">_140 = get_update_k_result(move _141, move _142, const true)</td></tr></table>>];
    bb76__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_134)<br/>_134 = ((_117 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_136)<br/>_136 = _134<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _136)</td></tr></table>>];
    bb77__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_134)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_141)<br/></td></tr><tr><td align="left">_139 = &lt;std::result::Result&lt;UpdateKResult, error::ErrorCode&gt; as Try&gt;::branch(move _140)</td></tr></table>>];
    bb79__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>_143 = discriminant(_139)<br/></td></tr><tr><td align="left">switchInt(move _143)</td></tr></table>>];
    bb80__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_147)<br/>_147 = move ((_139 as Continue).0: math::cp_curve::UpdateKResult)<br/>_138 = move _147<br/>StorageDead(_147)<br/>StorageDead(_139)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>_151 = &amp;mut (*_1)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>_153 = &amp;_138<br/>_152 = &amp;(*_153)<br/></td></tr><tr><td align="left">_150 = adjust_k_cost(move _151, move _152)</td></tr></table>>];
    bb81__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_144)<br/>_144 = ((_139 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_146)<br/>_146 = _144<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _146)</td></tr></table>>];
    bb82__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>StorageDead(_144)<br/>StorageDead(_139)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">_149 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _150)</td></tr></table>>];
    bb84__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/>_154 = discriminant(_149)<br/></td></tr><tr><td align="left">switchInt(move _154)</td></tr></table>>];
    bb85__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageLive(_158)<br/>_158 = ((_149 as Continue).0: i128)<br/>_148 = _158<br/>StorageDead(_158)<br/>StorageDead(_153)<br/>StorageDead(_149)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>_162 = &amp;mut (*_1)<br/>StorageLive(_163)<br/>_163 = _148<br/></td></tr><tr><td align="left">_161 = apply_cost_to_market(move _162, move _163, const true)</td></tr></table>>];
    bb86__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageLive(_155)<br/>_155 = ((_149 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_157)<br/>_157 = _155<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _157)</td></tr></table>>];
    bb87__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/>StorageDead(_155)<br/>StorageDead(_153)<br/>StorageDead(_149)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">_160 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _161)</td></tr></table>>];
    bb89__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>_164 = discriminant(_160)<br/></td></tr><tr><td align="left">switchInt(move _164)</td></tr></table>>];
    bb90__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageLive(_168)<br/>_168 = ((_160 as Continue).0: bool)<br/>_159 = _168<br/>StorageDead(_168)<br/>StorageDead(_160)<br/>StorageLive(_169)<br/>_169 = _159<br/></td></tr><tr><td align="left">switchInt(move _169)</td></tr></table>>];
    bb91__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_165)<br/>_165 = ((_160 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_167)<br/>_167 = _165<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _167)</td></tr></table>>];
    bb92__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/>StorageDead(_165)<br/>StorageDead(_160)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>_173 = &amp;mut (*_1)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>_175 = &amp;_138<br/>_174 = &amp;(*_175)<br/></td></tr><tr><td align="left">_172 = cp_curve::update_k(move _173, move _174)</td></tr></table>>];
    bb94__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">_56 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb95__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_174)<br/>StorageDead(_173)<br/></td></tr><tr><td align="left">_171 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _172)</td></tr></table>>];
    bb96__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>_176 = discriminant(_171)<br/></td></tr><tr><td align="left">switchInt(move _176)</td></tr></table>>];
    bb97__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageLive(_180)<br/>_180 = ((_171 as Continue).0: ())<br/>_170 = _180<br/>StorageDead(_180)<br/>StorageDead(_175)<br/>StorageDead(_171)<br/>StorageDead(_170)<br/>StorageLive(_181)<br/>_181 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>StorageLive(_182)<br/>_182 = (((*_1).1: state::perp_market::AMM).5: u128)<br/>StorageLive(_183)<br/>_183 = (((*_1).1: state::perp_market::AMM).6: u128)<br/>StorageLive(_184)<br/>_184 = (((*_1).1: state::perp_market::AMM).10: u128)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>StorageLive(_187)<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>StorageLive(_191)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>_199 = _4<br/>StorageLive(_200)<br/>StorageLive(_201)<br/>_201 = ((*_1).10: u64)<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>_205 = _201<br/></td></tr><tr><td align="left">_204 = core::num::&lt;impl u64&gt;::checked_add(move _205, const 1_u64)</td></tr></table>>];
    bb98__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageLive(_177)<br/>_177 = ((_171 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_179)<br/>_179 = _177<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _179)</td></tr></table>>];
    bb99__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_179)<br/>StorageDead(_177)<br/>StorageDead(_175)<br/>StorageDead(_171)<br/>StorageDead(_170)<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb100__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_205)<br/>StorageLive(_206)<br/>_206 = Option::&lt;u64&gt;::Some(const 1_u64)<br/></td></tr><tr><td align="left">_203 = Option::&lt;u64&gt;::or(move _204, move _206)</td></tr></table>>];
    bb101__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_206)<br/>StorageDead(_204)<br/></td></tr><tr><td align="left">_202 = Option::&lt;u64&gt;::unwrap(move _203)</td></tr></table>>];
    bb102__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/>((*_1).10: u64) = move _202<br/>StorageDead(_202)<br/>_200 = _201<br/>StorageDead(_201)<br/>StorageLive(_207)<br/>_207 = ((*_1).21: u16)<br/>StorageLive(_208)<br/>_208 = _5<br/>StorageLive(_209)<br/>_209 = _6<br/>StorageLive(_210)<br/>_210 = _7<br/>StorageLive(_211)<br/>_211 = _8<br/>StorageLive(_212)<br/>_212 = _181<br/>StorageLive(_213)<br/>_213 = _182<br/>StorageLive(_214)<br/>_214 = _183<br/>StorageLive(_215)<br/>_215 = _184<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>_217 = (((*_1).1: state::perp_market::AMM).13: i128)<br/></td></tr><tr><td align="left">_216 = core::num::&lt;impl i128&gt;::unsigned_abs(move _217)</td></tr></table>>];
    bb103__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_217)<br/>StorageLive(_218)<br/>StorageLive(_219)<br/>_219 = (((*_1).1: state::perp_market::AMM).14: i128)<br/></td></tr><tr><td align="left">_218 = core::num::&lt;impl i128&gt;::unsigned_abs(move _219)</td></tr></table>>];
    bb104__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageLive(_220)<br/>_220 = (((*_1).1: state::perp_market::AMM).15: i128)<br/>StorageLive(_221)<br/>_221 = ((*_1).20: u32)<br/>StorageLive(_222)<br/>_222 = _148<br/>StorageLive(_223)<br/>_223 = (((*_1).1: state::perp_market::AMM).28: i128)<br/>StorageLive(_224)<br/>_224 = (((*_1).1: state::perp_market::AMM).31: i128)<br/>StorageLive(_225)<br/>_225 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).0: i64)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>_227 = ((*_1).8: u64)<br/>_226 = move _227 as u128 (IntToInt)<br/>StorageDead(_227)<br/>_198 = CurveRecord { ts: move _199, record_id: move _200, peg_multiplier_before: move _208, base_asset_reserve_before: move _209, quote_asset_reserve_before: move _210, sqrt_k_before: move _211, peg_multiplier_after: move _212, base_asset_reserve_after: move _213, quote_asset_reserve_after: move _214, sqrt_k_after: move _215, base_asset_amount_long: move _216, base_asset_amount_short: move _218, base_asset_amount_with_amm: move _220, total_fee: move _223, total_fee_minus_distributions: move _224, adjustment_cost: move _222, oracle_price: move _225, fill_record: move _226, number_of_users: move _221, market_index: move _207 }<br/>StorageDead(_226)<br/>StorageDead(_225)<br/>StorageDead(_224)<br/>StorageDead(_223)<br/>StorageDead(_222)<br/>StorageDead(_221)<br/>StorageDead(_220)<br/>StorageDead(_218)<br/>StorageDead(_216)<br/>StorageDead(_215)<br/>StorageDead(_214)<br/>StorageDead(_213)<br/>StorageDead(_212)<br/>StorageDead(_211)<br/>StorageDead(_210)<br/>StorageDead(_209)<br/>StorageDead(_208)<br/>StorageDead(_207)<br/>StorageDead(_200)<br/>StorageDead(_199)<br/>_197 = &amp;_198<br/>_196 = &amp;(*_197)<br/></td></tr><tr><td align="left">_195 = &lt;CurveRecord as anchor_lang::Event&gt;::data(move _196)</td></tr></table>>];
    bb105__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_196)<br/>_194 = &amp;_195<br/>_193 = &amp;(*_194)<br/></td></tr><tr><td align="left">_192 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _193)</td></tr></table>>];
    bb106__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">_191 = &amp;(*_192)<br/>StorageDead(_193)<br/>_190 = [move _191]<br/>StorageDead(_191)<br/>_189 = &amp;_190<br/>_188 = &amp;(*_189)<br/>_187 = move _188 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_188)<br/></td></tr><tr><td align="left">_186 = solana_program::log::sol_log_data(move _187)</td></tr></table>>];
    bb107__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/></td></tr><tr><td align="left">drop(_195)</td></tr></table>>];
    bb108__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_197)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/>StorageDead(_192)<br/>StorageDead(_190)<br/>StorageDead(_189)<br/>StorageDead(_186)<br/>_185 = const ()<br/>StorageDead(_185)<br/>_56 = const ()<br/>StorageDead(_184)<br/>StorageDead(_183)<br/>StorageDead(_182)<br/>StorageDead(_181)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb109__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_169)<br/>StorageDead(_159)<br/>StorageDead(_148)<br/>StorageDead(_138)<br/>StorageDead(_116)<br/>StorageDead(_95)<br/>StorageDead(_94)<br/>StorageDead(_83)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb110__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb111__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">_56 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageLive(_228)<br/>_228 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _228)<br/>StorageDead(_228)<br/>StorageDead(_18)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb116__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageDead(_117)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb117__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/>StorageDead(_95)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_101)<br/>StorageDead(_97)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb119__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb120__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_38)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left">return</td></tr></table>>];
    bb126__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">126 (cleanup)</td></tr><tr><td align="left">drop(_195)</td></tr></table>>];
    bb127__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">127 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_89 -> bb1__0_89 [label="return"];
    bb1__0_89 -> bb2__0_89 [label="return"];
    bb2__0_89 -> bb3__0_89 [label="0"];
    bb2__0_89 -> bb5__0_89 [label="1"];
    bb2__0_89 -> bb4__0_89 [label="otherwise"];
    bb3__0_89 -> bb8__0_89 [label="0"];
    bb3__0_89 -> bb7__0_89 [label="otherwise"];
    bb5__0_89 -> bb6__0_89 [label="return"];
    bb6__0_89 -> bb124__0_89 [label=""];
    bb7__0_89 -> bb9__0_89 [label="return"];
    bb8__0_89 -> bb20__0_89 [label="0"];
    bb8__0_89 -> bb19__0_89 [label="otherwise"];
    bb9__0_89 -> bb17__0_89 [label="0"];
    bb9__0_89 -> bb10__0_89 [label="otherwise"];
    bb10__0_89 -> bb11__0_89 [label="return"];
    bb11__0_89 -> bb12__0_89 [label="return"];
    bb12__0_89 -> bb13__0_89 [label="0"];
    bb12__0_89 -> bb14__0_89 [label="1"];
    bb12__0_89 -> bb4__0_89 [label="otherwise"];
    bb13__0_89 -> bb16__0_89 [label="return"];
    bb14__0_89 -> bb15__0_89 [label="return"];
    bb15__0_89 -> bb122__0_89 [label=""];
    bb16__0_89 -> bb18__0_89 [label=""];
    bb17__0_89 -> bb18__0_89 [label=""];
    bb18__0_89 -> bb33__0_89 [label=""];
    bb19__0_89 -> bb21__0_89 [label="return"];
    bb20__0_89 -> bb32__0_89 [label=""];
    bb21__0_89 -> bb22__0_89 [label="return"];
    bb22__0_89 -> bb23__0_89 [label="return"];
    bb23__0_89 -> bb24__0_89 [label="0"];
    bb23__0_89 -> bb25__0_89 [label="1"];
    bb23__0_89 -> bb4__0_89 [label="otherwise"];
    bb24__0_89 -> bb27__0_89 [label="return"];
    bb25__0_89 -> bb26__0_89 [label="return"];
    bb26__0_89 -> bb121__0_89 [label=""];
    bb27__0_89 -> bb28__0_89 [label="return"];
    bb28__0_89 -> bb29__0_89 [label="0"];
    bb28__0_89 -> bb30__0_89 [label="1"];
    bb28__0_89 -> bb4__0_89 [label="otherwise"];
    bb29__0_89 -> bb32__0_89 [label=""];
    bb30__0_89 -> bb31__0_89 [label="return"];
    bb31__0_89 -> bb121__0_89 [label=""];
    bb32__0_89 -> bb33__0_89 [label=""];
    bb33__0_89 -> bb37__0_89 [label="0"];
    bb33__0_89 -> bb34__0_89 [label="otherwise"];
    bb34__0_89 -> bb36__0_89 [label="0"];
    bb34__0_89 -> bb35__0_89 [label="otherwise"];
    bb35__0_89 -> bb45__0_89 [label=""];
    bb36__0_89 -> bb38__0_89 [label=""];
    bb37__0_89 -> bb38__0_89 [label=""];
    bb38__0_89 -> bb110__0_89 [label="0"];
    bb38__0_89 -> bb39__0_89 [label="otherwise"];
    bb39__0_89 -> bb40__0_89 [label="return"];
    bb40__0_89 -> bb41__0_89 [label="return"];
    bb41__0_89 -> bb42__0_89 [label="0"];
    bb41__0_89 -> bb43__0_89 [label="1"];
    bb41__0_89 -> bb4__0_89 [label="otherwise"];
    bb42__0_89 -> bb46__0_89 [label="0"];
    bb42__0_89 -> bb45__0_89 [label="otherwise"];
    bb43__0_89 -> bb44__0_89 [label="return"];
    bb44__0_89 -> bb120__0_89 [label=""];
    bb45__0_89 -> bb47__0_89 [label="success"];
    bb46__0_89 -> bb111__0_89 [label=""];
    bb47__0_89 -> bb48__0_89 [label="success"];
    bb48__0_89 -> bb49__0_89 [label="success"];
    bb49__0_89 -> bb50__0_89 [label="success"];
    bb50__0_89 -> bb51__0_89 [label="success"];
    bb51__0_89 -> bb52__0_89 [label="success"];
    bb52__0_89 -> bb53__0_89 [label="success"];
    bb53__0_89 -> bb54__0_89 [label="success"];
    bb54__0_89 -> bb55__0_89 [label="return"];
    bb55__0_89 -> bb56__0_89 [label="return"];
    bb56__0_89 -> bb57__0_89 [label="0"];
    bb56__0_89 -> bb58__0_89 [label="1"];
    bb56__0_89 -> bb4__0_89 [label="otherwise"];
    bb57__0_89 -> bb60__0_89 [label="return"];
    bb58__0_89 -> bb59__0_89 [label="return"];
    bb59__0_89 -> bb118__0_89 [label=""];
    bb60__0_89 -> bb61__0_89 [label="return"];
    bb61__0_89 -> bb62__0_89 [label="0"];
    bb61__0_89 -> bb63__0_89 [label="1"];
    bb61__0_89 -> bb4__0_89 [label="otherwise"];
    bb62__0_89 -> bb65__0_89 [label="return"];
    bb63__0_89 -> bb64__0_89 [label="return"];
    bb64__0_89 -> bb118__0_89 [label=""];
    bb65__0_89 -> bb66__0_89 [label="return"];
    bb66__0_89 -> bb67__0_89 [label="return"];
    bb67__0_89 -> bb68__0_89 [label="return"];
    bb68__0_89 -> bb69__0_89 [label="0"];
    bb68__0_89 -> bb70__0_89 [label="1"];
    bb68__0_89 -> bb4__0_89 [label="otherwise"];
    bb69__0_89 -> bb72__0_89 [label="return"];
    bb70__0_89 -> bb71__0_89 [label="return"];
    bb71__0_89 -> bb116__0_89 [label=""];
    bb72__0_89 -> bb73__0_89 [label="return"];
    bb73__0_89 -> bb74__0_89 [label="return"];
    bb74__0_89 -> bb75__0_89 [label="0"];
    bb74__0_89 -> bb76__0_89 [label="1"];
    bb74__0_89 -> bb4__0_89 [label="otherwise"];
    bb75__0_89 -> bb78__0_89 [label="return"];
    bb76__0_89 -> bb77__0_89 [label="return"];
    bb77__0_89 -> bb116__0_89 [label=""];
    bb78__0_89 -> bb79__0_89 [label="return"];
    bb79__0_89 -> bb80__0_89 [label="0"];
    bb79__0_89 -> bb81__0_89 [label="1"];
    bb79__0_89 -> bb4__0_89 [label="otherwise"];
    bb80__0_89 -> bb83__0_89 [label="return"];
    bb81__0_89 -> bb82__0_89 [label="return"];
    bb82__0_89 -> bb115__0_89 [label=""];
    bb83__0_89 -> bb84__0_89 [label="return"];
    bb84__0_89 -> bb85__0_89 [label="0"];
    bb84__0_89 -> bb86__0_89 [label="1"];
    bb84__0_89 -> bb4__0_89 [label="otherwise"];
    bb85__0_89 -> bb88__0_89 [label="return"];
    bb86__0_89 -> bb87__0_89 [label="return"];
    bb87__0_89 -> bb114__0_89 [label=""];
    bb88__0_89 -> bb89__0_89 [label="return"];
    bb89__0_89 -> bb90__0_89 [label="0"];
    bb89__0_89 -> bb91__0_89 [label="1"];
    bb89__0_89 -> bb4__0_89 [label="otherwise"];
    bb90__0_89 -> bb94__0_89 [label="0"];
    bb90__0_89 -> bb93__0_89 [label="otherwise"];
    bb91__0_89 -> bb92__0_89 [label="return"];
    bb92__0_89 -> bb113__0_89 [label=""];
    bb93__0_89 -> bb95__0_89 [label="return"];
    bb94__0_89 -> bb109__0_89 [label=""];
    bb95__0_89 -> bb96__0_89 [label="return"];
    bb96__0_89 -> bb97__0_89 [label="0"];
    bb96__0_89 -> bb98__0_89 [label="1"];
    bb96__0_89 -> bb4__0_89 [label="otherwise"];
    bb97__0_89 -> bb100__0_89 [label="return"];
    bb98__0_89 -> bb99__0_89 [label="return"];
    bb99__0_89 -> bb113__0_89 [label=""];
    bb100__0_89 -> bb101__0_89 [label="return"];
    bb101__0_89 -> bb102__0_89 [label="return"];
    bb102__0_89 -> bb103__0_89 [label="return"];
    bb103__0_89 -> bb104__0_89 [label="return"];
    bb104__0_89 -> bb105__0_89 [label="return"];
    bb105__0_89 -> bb106__0_89 [label="return"];
    bb105__0_89 -> bb126__0_89 [label="unwind"];
    bb106__0_89 -> bb107__0_89 [label="return"];
    bb106__0_89 -> bb126__0_89 [label="unwind"];
    bb107__0_89 -> bb108__0_89 [label="return"];
    bb107__0_89 -> bb127__0_89 [label="unwind"];
    bb108__0_89 -> bb109__0_89 [label=""];
    bb109__0_89 -> bb112__0_89 [label=""];
    bb110__0_89 -> bb111__0_89 [label=""];
    bb111__0_89 -> bb112__0_89 [label=""];
    bb112__0_89 -> bb125__0_89 [label=""];
    bb113__0_89 -> bb114__0_89 [label=""];
    bb114__0_89 -> bb115__0_89 [label=""];
    bb115__0_89 -> bb117__0_89 [label=""];
    bb116__0_89 -> bb117__0_89 [label=""];
    bb117__0_89 -> bb119__0_89 [label=""];
    bb118__0_89 -> bb119__0_89 [label=""];
    bb119__0_89 -> bb120__0_89 [label=""];
    bb120__0_89 -> bb123__0_89 [label=""];
    bb121__0_89 -> bb122__0_89 [label=""];
    bb122__0_89 -> bb123__0_89 [label=""];
    bb123__0_89 -> bb124__0_89 [label=""];
    bb124__0_89 -> bb125__0_89 [label=""];
    bb126__0_89 -> bb127__0_89 [label="return"];
}
