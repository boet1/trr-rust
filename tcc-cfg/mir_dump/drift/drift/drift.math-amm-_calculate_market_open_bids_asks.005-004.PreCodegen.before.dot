digraph Mir_0_1789 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn _calculate_market_open_bids_asks(_1: u128, _2: u128, _3: u128) -&gt; std::result::Result&lt;(i128, i128), error::ErrorCode&gt;<br align="left"/>let _4: i128;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: i128;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _10: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u128;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: i128;<br align="left"/>let mut _26: bool;<br align="left"/>let _27: i128;<br align="left"/>let mut _28: bool;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: u128;<br align="left"/>let mut _31: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _32: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _35: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _36: u128;<br align="left"/>let mut _37: u128;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: u128;<br align="left"/>let mut _43: isize;<br align="left"/>let _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _45: !;<br align="left"/>let mut _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _47: i128;<br align="left"/>let mut _48: (i128, i128);<br align="left"/>let mut _49: i128;<br align="left"/>let mut _50: i128;<br align="left"/>debug base_asset_reserve =&gt; _1;<br align="left"/>debug min_base_asset_reserve =&gt; _2;<br align="left"/>debug max_base_asset_reserve =&gt; _3;<br align="left"/>debug max_asks =&gt; _4;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug max_bids =&gt; _27;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>debug residual =&gt; _44;<br align="left"/>debug val =&gt; _47;<br align="left"/>>;
    bb0__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _1<br/>StorageLive(_7)<br/>_7 = _3<br/>_5 = Lt(move _6, move _7)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>_15 = _1<br/></td></tr><tr><td align="left">_13 = &lt;u128 as SafeMath&gt;::safe_sub(move _14, move _15)</td></tr></table>>];
    bb2__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb3__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_16 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Continue).0: u128)<br/>_11 = _20<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_10 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _11)</td></tr></table>>];
    bb5__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb7__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb9__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_21 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb10__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_9 as Continue).0: i128)<br/>_8 = _25<br/>StorageDead(_25)<br/>_26 = Eq(_8, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _26, &quot;attempt to negate `{}`, which would overflow&quot;, _8)</td></tr></table>>];
    bb11__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb12__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_4 = Neg(move _8)<br/>StorageDead(_8)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = const 0_i128<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _1<br/>StorageLive(_30)<br/>_30 = _2<br/>_28 = Gt(move _29, move _30)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb16__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = _1<br/>StorageLive(_37)<br/>_37 = _2<br/></td></tr><tr><td align="left">_35 = &lt;u128 as SafeMath&gt;::safe_sub(move _36, move _37)</td></tr></table>>];
    bb17__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _35)</td></tr></table>>];
    bb18__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>_38 = discriminant(_34)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb19__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_34 as Continue).0: u128)<br/>_33 = _42<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_32 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _33)</td></tr></table>>];
    bb20__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_34 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb21__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _32)</td></tr></table>>];
    bb23__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_43 = discriminant(_31)<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb24__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_31 as Continue).0: i128)<br/>_27 = _47<br/>StorageDead(_47)<br/>StorageDead(_34)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_31 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_46)<br/>_46 = _44<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _46)</td></tr></table>>];
    bb26__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>_27 = const 0_i128<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _27<br/>StorageLive(_50)<br/>_50 = _4<br/>_48 = (move _49, move _50)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>_0 = std::result::Result::&lt;(i128, i128), error::ErrorCode&gt;::Ok(move _48)<br/>StorageDead(_48)<br/>StorageDead(_27)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_1789 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1789 -> bb14__0_1789 [label="0"];
    bb0__0_1789 -> bb1__0_1789 [label="otherwise"];
    bb1__0_1789 -> bb2__0_1789 [label="return"];
    bb2__0_1789 -> bb3__0_1789 [label="return"];
    bb3__0_1789 -> bb4__0_1789 [label="0"];
    bb3__0_1789 -> bb6__0_1789 [label="1"];
    bb3__0_1789 -> bb5__0_1789 [label="otherwise"];
    bb4__0_1789 -> bb8__0_1789 [label="return"];
    bb6__0_1789 -> bb7__0_1789 [label="return"];
    bb7__0_1789 -> bb30__0_1789 [label=""];
    bb8__0_1789 -> bb9__0_1789 [label="return"];
    bb9__0_1789 -> bb10__0_1789 [label="0"];
    bb9__0_1789 -> bb11__0_1789 [label="1"];
    bb9__0_1789 -> bb5__0_1789 [label="otherwise"];
    bb10__0_1789 -> bb13__0_1789 [label="success"];
    bb11__0_1789 -> bb12__0_1789 [label="return"];
    bb12__0_1789 -> bb30__0_1789 [label=""];
    bb13__0_1789 -> bb15__0_1789 [label=""];
    bb14__0_1789 -> bb15__0_1789 [label=""];
    bb15__0_1789 -> bb27__0_1789 [label="0"];
    bb15__0_1789 -> bb16__0_1789 [label="otherwise"];
    bb16__0_1789 -> bb17__0_1789 [label="return"];
    bb17__0_1789 -> bb18__0_1789 [label="return"];
    bb18__0_1789 -> bb19__0_1789 [label="0"];
    bb18__0_1789 -> bb20__0_1789 [label="1"];
    bb18__0_1789 -> bb5__0_1789 [label="otherwise"];
    bb19__0_1789 -> bb22__0_1789 [label="return"];
    bb20__0_1789 -> bb21__0_1789 [label="return"];
    bb21__0_1789 -> bb29__0_1789 [label=""];
    bb22__0_1789 -> bb23__0_1789 [label="return"];
    bb23__0_1789 -> bb24__0_1789 [label="0"];
    bb23__0_1789 -> bb25__0_1789 [label="1"];
    bb23__0_1789 -> bb5__0_1789 [label="otherwise"];
    bb24__0_1789 -> bb28__0_1789 [label=""];
    bb25__0_1789 -> bb26__0_1789 [label="return"];
    bb26__0_1789 -> bb29__0_1789 [label=""];
    bb27__0_1789 -> bb28__0_1789 [label=""];
    bb28__0_1789 -> bb32__0_1789 [label=""];
    bb29__0_1789 -> bb31__0_1789 [label=""];
    bb30__0_1789 -> bb31__0_1789 [label=""];
    bb31__0_1789 -> bb32__0_1789 [label=""];
}
