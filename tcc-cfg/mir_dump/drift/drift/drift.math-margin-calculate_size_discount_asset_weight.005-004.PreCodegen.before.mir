// MIR for `calculate_size_discount_asset_weight` before PreCodegen

fn calculate_size_discount_asset_weight(_1: u128, _2: u32, _3: u32) -> std::result::Result<u32, error::ErrorCode> {
    debug size => _1;
    debug imf_factor => _2;
    debug asset_weight => _3;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: !;
    let mut _8: u32;
    let _9: u128;
    let mut _10: &u128;
    let _11: u128;
    let mut _12: u128;
    let mut _13: u128;
    let mut _14: (u128, bool);
    let mut _15: (u128, bool);
    let mut _17: u128;
    let mut _18: bool;
    let mut _19: (u128, bool);
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _22: std::result::Result<u32, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u128;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _43: std::result::Result<u128, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: u128;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _47: std::result::Result<u128, error::ErrorCode>;
    let mut _48: u32;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: u32;
    let mut _81: u32;
    let mut _82: u32;
    scope 1 {
        debug size_sqrt => _9;
        let _16: u128;
        scope 2 {
            debug imf_numerator => _16;
            let _20: u32;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: u128;
            let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _53: u128;
            let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _58: u128;
            let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _63: u128;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: u128;
            let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _73: u128;
            let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _78: u32;
            scope 3 {
                debug size_discount_asset_weight => _20;
                let _79: u32;
                scope 32 {
                    debug min_asset_weight => _79;
                }
            }
            scope 4 {
                debug residual => _31;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _34;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _50;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _53;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _55;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _58;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _60;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _63;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _65;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _68;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _70;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _73;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _75;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _78;
                scope 31 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Eq(move _6, const 0_u32);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = _3;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb51;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _1;
        _14 = CheckedMul(_13, const 10_u128);
        assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _13, const 10_u128) -> [success: bb3, unwind continue];
    }

    bb3: {
        _12 = move (_14.0: u128);
        StorageDead(_13);
        _15 = CheckedAdd(_12, const 1_u128);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_u128) -> [success: bb4, unwind continue];
    }

    bb4: {
        _11 = move (_15.0: u128);
        _10 = &_11;
        StorageDead(_12);
        _9 = <u128 as Roots>::nth_root(move _10, const 2_u32) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_11);
        StorageLive(_16);
        StorageLive(_17);
        _18 = Eq(const 10_u128, const 0_u128);
        assert(!move _18, "attempt to divide `{}` by zero", const _) -> [success: bb6, unwind continue];
    }

    bb6: {
        _17 = Div(const _, const 10_u128);
        _19 = CheckedAdd(const _, _17);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, move _17) -> [success: bb7, unwind continue];
    }

    bb7: {
        _16 = move (_19.0: u128);
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _16;
        _28 = <u128 as SafeMath>::safe_mul(move _29, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _9;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _2;
        _47 = <u32 as Cast>::cast::<u128>(move _48) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb50;
    }

    bb14: {
        StorageDead(_48);
        _46 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _47) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_47);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_53);
        _53 = ((_46 as Continue).0: u128);
        _45 = _53;
        StorageDead(_53);
        _43 = <u128 as SafeMath>::safe_mul(move _44, move _45) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_50);
        _50 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb45;
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_43);
        _54 = discriminant(_42);
        switchInt(move _54) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_58);
        _58 = ((_42 as Continue).0: u128);
        _41 = _58;
        StorageDead(_58);
        _40 = <u128 as SafeMath>::safe_div(move _41, const 100000_u128) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_55);
        _55 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_57);
        StorageDead(_55);
        goto -> bb45;
    }

    bb24: {
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_40);
        _59 = discriminant(_39);
        switchInt(move _59) -> [0: bb26, 1: bb27, otherwise: bb11];
    }

    bb26: {
        StorageLive(_63);
        _63 = ((_39 as Continue).0: u128);
        _38 = _63;
        StorageDead(_63);
        _37 = <u128 as SafeMath>::safe_add(const _, move _38) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_60);
        goto -> bb46;
    }

    bb29: {
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_37);
        _64 = discriminant(_36);
        switchInt(move _64) -> [0: bb31, 1: bb32, otherwise: bb11];
    }

    bb31: {
        StorageLive(_68);
        _68 = ((_36 as Continue).0: u128);
        _35 = _68;
        StorageDead(_68);
        _25 = <u128 as SafeMath>::safe_div(move _26, move _35) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_65);
        _65 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb47;
    }

    bb34: {
        StorageDead(_35);
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_25);
        _69 = discriminant(_24);
        switchInt(move _69) -> [0: bb36, 1: bb37, otherwise: bb11];
    }

    bb36: {
        StorageLive(_73);
        _73 = ((_24 as Continue).0: u128);
        _23 = _73;
        StorageDead(_73);
        _22 = <u128 as Cast>::cast::<u32>(move _23) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_70);
        _70 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_72);
        StorageDead(_70);
        goto -> bb48;
    }

    bb39: {
        StorageDead(_23);
        _21 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _22) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_22);
        _74 = discriminant(_21);
        switchInt(move _74) -> [0: bb41, 1: bb42, otherwise: bb11];
    }

    bb41: {
        StorageLive(_78);
        _78 = ((_21 as Continue).0: u32);
        _20 = _78;
        StorageDead(_78);
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _3;
        StorageLive(_81);
        _81 = _20;
        _79 = std::cmp::min::<u32>(move _80, move _81) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_75);
        _75 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb49;
    }

    bb44: {
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_82);
        _82 = _79;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _82);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_20);
        StorageDead(_16);
        StorageDead(_9);
        goto -> bb51;
    }

    bb45: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        StorageDead(_9);
        goto -> bb51;
    }

    bb51: {
        return;
    }
}
