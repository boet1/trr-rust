// MIR for `state::oracle::<impl at programs/drift/src/state/oracle.rs:594:1: 594:23>::validate` after PreCodegen

fn state::oracle::<impl at programs/drift/src/state/oracle.rs:594:1: 594:23>::validate(_1: &StrictOraclePrice) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: ();
    let _8: error::ErrorCode;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &error::ErrorCode;
    let _27: &error::ErrorCode;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 2];
    let _38: &[&str; 2];
    let _39: [&str; 2];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &i64;
    let _46: &i64;
    let mut _47: error::ErrorCode;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: ();
    let _53: ();
    let mut _54: isize;
    let _56: ();
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _58: std::result::Result<(), error::ErrorCode>;
    let mut _59: bool;
    let mut _60: i64;
    let mut _61: ();
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &error::ErrorCode;
    let _81: &error::ErrorCode;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: &std::string::String;
    let _86: &std::string::String;
    let _87: std::string::String;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[&str; 2];
    let _92: &[&str; 2];
    let _93: [&str; 2];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let mut _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: &[core::fmt::rt::Argument<'_>; 1];
    let _97: [core::fmt::rt::Argument<'_>; 1];
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: &i64;
    let _100: &i64;
    let mut _101: error::ErrorCode;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: ();
    scope 1 {
        debug error_code => _8;
        let _15: std::string::String;
        let _34: std::string::String;
        let mut _110: &[&str; 2];
        let mut _111: &[&str; 2];
        scope 2 {
            debug res => _15;
        }
        scope 3 {
            debug res => _34;
        }
    }
    scope 4 {
        debug residual => _49;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _52;
        scope 7 {
        }
    }
    scope 8 {
        debug twap => _55;
        let _55: i64;
        let _62: error::ErrorCode;
        let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _106: ();
        scope 9 {
            debug error_code => _62;
            let _69: std::string::String;
            let _88: std::string::String;
            let mut _108: &[&str; 2];
            let mut _109: &[&str; 2];
            scope 10 {
                debug res => _69;
            }
            scope 11 {
                debug res => _88;
            }
        }
        scope 12 {
            debug residual => _103;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _106;
            scope 15 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: i64);
        _5 = Gt(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb15;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = error::ErrorCode::InvalidOracle;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _111 = const _;
        _19 = &(*_111);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_8;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb47];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb48];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _110 = const _;
        _38 = &(*_110);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_1).0: i64);
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _45) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb12, unwind: bb46];
    }

    bb12: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb13, unwind: bb46];
    }

    bb13: {
        StorageDead(_29);
        drop(_33) -> [return: bb14, unwind: bb48];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_47);
        _47 = _8;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _47);
        StorageDead(_47);
        StorageDead(_8);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_4);
        _48 = discriminant(_3);
        switchInt(move _48) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_52);
        _52 = ((_3 as Continue).0: ());
        _2 = _52;
        StorageDead(_52);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_53);
        _54 = discriminant(((*_1).1: std::option::Option<i64>));
        switchInt(move _54) -> [1: bb22, otherwise: bb21];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_49);
        _49 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb43;
    }

    bb21: {
        _53 = const ();
        goto -> bb42;
    }

    bb22: {
        StorageLive(_55);
        _55 = ((((*_1).1: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _55;
        _59 = Gt(move _60, const 0_i64);
        switchInt(move _59) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_60);
        StorageLive(_61);
        _61 = ();
        _58 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb37;
    }

    bb24: {
        StorageDead(_60);
        StorageLive(_62);
        _62 = error::ErrorCode::InvalidOracle;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _109 = const _;
        _73 = &(*_109);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_62;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _80) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_70);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb28, unwind: bb45];
    }

    bb28: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb29, unwind: bb45];
    }

    bb29: {
        StorageDead(_64);
        drop(_68) -> [return: bb30, unwind: bb48];
    }

    bb30: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _108 = const _;
        _92 = &(*_108);
        _91 = &(*_92);
        _90 = move _91 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_55;
        _99 = &(*_100);
        _98 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _99) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_99);
        _97 = [move _98];
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_95);
        _89 = Arguments::<'_>::new_v1(move _90, move _94) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_94);
        StorageDead(_90);
        _88 = format(move _89) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        _87 = move _88;
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = <String as Deref>::deref(move _85) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        StorageDead(_83);
        drop(_87) -> [return: bb36, unwind: bb48];
    }

    bb36: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_101);
        _101 = _62;
        _58 = std::result::Result::<(), error::ErrorCode>::Err(move _101);
        StorageDead(_101);
        StorageDead(_62);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_59);
        _57 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _58) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_58);
        _102 = discriminant(_57);
        switchInt(move _102) -> [0: bb39, 1: bb40, otherwise: bb18];
    }

    bb39: {
        StorageLive(_106);
        _106 = ((_57 as Continue).0: ());
        _56 = _106;
        StorageDead(_106);
        StorageDead(_57);
        StorageDead(_56);
        _53 = const ();
        StorageDead(_55);
        goto -> bb42;
    }

    bb40: {
        StorageLive(_103);
        _103 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb43;
    }

    bb42: {
        StorageDead(_53);
        StorageLive(_107);
        _107 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _107);
        StorageDead(_107);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_87) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_68) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_33) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_14) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        resume;
    }
}
