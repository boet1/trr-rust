digraph Mir_0_540 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn fulfill_perp_order_with_match(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased mut state::user::User, _3: &amp;ReErased mut state::user::UserStats, _4: usize, _5: &amp;ReErased anchor_lang::prelude::Pubkey, _6: &amp;ReErased mut state::user::User, _7: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _8: usize, _9: &amp;ReErased anchor_lang::prelude::Pubkey, _10: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _11: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _12: &amp;ReErased anchor_lang::prelude::Pubkey, _13: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _14: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _15: u64, _16: std::option::Option&lt;i64&gt;, _17: std::option::Option&lt;u64&gt;, _18: u64, _19: i64, _20: u64, _21: &amp;ReErased state::state::FeeStructure, _22: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _23: bool) -&gt; std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt;<br align="left"/>let _24: ();<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: &amp;ReErased state::user::Order;<br align="left"/>let _27: &amp;ReErased state::user::Order;<br align="left"/>let _28: usize;<br align="left"/>let mut _29: usize;<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: &amp;ReErased state::user::Order;<br align="left"/>let _32: &amp;ReErased state::user::Order;<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: (u64, u64, u64);<br align="left"/>let _38: i64;<br align="left"/>let mut _39: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _41: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _42: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _43: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _44: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _45: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _46: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _47: isize;<br align="left"/>let _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _49: !;<br align="left"/>let mut _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _51: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _52: controller::position::PositionDirection;<br align="left"/>let _53: usize;<br align="left"/>let mut _54: usize;<br align="left"/>let mut _55: bool;<br align="left"/>let _56: u64;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: u64;<br align="left"/>let _59: u64;<br align="left"/>let mut _60: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _61: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _62: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _63: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _64: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _65: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _66: isize;<br align="left"/>let _67: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _68: !;<br align="left"/>let mut _69: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _70: u64;<br align="left"/>let mut _71: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _72: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _73: state::perp_market::AMM;<br align="left"/>let mut _74: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _75: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: i64;<br align="left"/>let mut _78: i64;<br align="left"/>let mut _79: state::user::Order;<br align="left"/>let _80: usize;<br align="left"/>let mut _81: usize;<br align="left"/>let mut _82: bool;<br align="left"/>let mut _83: i64;<br align="left"/>let mut _84: isize;<br align="left"/>let _85: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _86: !;<br align="left"/>let mut _87: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _88: u64;<br align="left"/>let _89: i64;<br align="left"/>let mut _90: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _91: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::PerpPosition&gt;;<br align="left"/>let mut _92: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _93: &amp;ReErased state::user::User;<br align="left"/>let mut _94: u16;<br align="left"/>let mut _95: isize;<br align="left"/>let _96: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _97: !;<br align="left"/>let mut _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _99: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _100: u64;<br align="left"/>let mut _101: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _102: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _103: &amp;ReErased state::user::Order;<br align="left"/>let _104: usize;<br align="left"/>let mut _105: usize;<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _108: i64;<br align="left"/>let mut _109: isize;<br align="left"/>let _110: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _111: !;<br align="left"/>let mut _112: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _113: u64;<br align="left"/>let _114: controller::position::PositionDirection;<br align="left"/>let _115: usize;<br align="left"/>let mut _116: usize;<br align="left"/>let mut _117: bool;<br align="left"/>let _118: i64;<br align="left"/>let _119: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _120: (i64, std::option::Option&lt;(u64, u64)&gt;);<br align="left"/>let _121: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _122: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::PerpPosition&gt;;<br align="left"/>let mut _123: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _124: &amp;ReErased state::user::User;<br align="left"/>let mut _125: u16;<br align="left"/>let mut _126: isize;<br align="left"/>let _127: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _128: !;<br align="left"/>let mut _129: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _130: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _131: i64;<br align="left"/>let mut _132: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _133: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _134: controller::position::PositionDirection;<br align="left"/>let _135: u64;<br align="left"/>let mut _136: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _137: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _138: &amp;ReErased state::user::Order;<br align="left"/>let _139: usize;<br align="left"/>let mut _140: usize;<br align="left"/>let mut _141: bool;<br align="left"/>let mut _142: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _143: i64;<br align="left"/>let mut _144: isize;<br align="left"/>let _145: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _146: !;<br align="left"/>let mut _147: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _148: u64;<br align="left"/>let _149: bool;<br align="left"/>let mut _150: controller::position::PositionDirection;<br align="left"/>let mut _151: u64;<br align="left"/>let mut _152: u64;<br align="left"/>let _153: ();<br align="left"/>let mut _154: bool;<br align="left"/>let mut _155: !;<br align="left"/>let _156: ();<br align="left"/>let mut _157: &amp;ReErased str;<br align="left"/>let _158: &amp;ReErased str;<br align="left"/>let mut _159: &amp;ReErased std::string::String;<br align="left"/>let _160: &amp;ReErased std::string::String;<br align="left"/>let _161: std::string::String;<br align="left"/>let _162: std::string::String;<br align="left"/>let mut _163: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _164: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _165: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _166: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _167: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _168: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _169: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _170: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _171: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _172: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _173: &amp;ReErased u64;<br align="left"/>let _174: &amp;ReErased u64;<br align="left"/>let mut _175: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _176: &amp;ReErased u64;<br align="left"/>let _177: &amp;ReErased u64;<br align="left"/>let mut _178: (u64, u64, u64);<br align="left"/>let _179: u64;<br align="left"/>let mut _180: (u64, u64);<br align="left"/>let mut _181: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _182: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _183: u64;<br align="left"/>let mut _184: u64;<br align="left"/>let mut _185: u64;<br align="left"/>let mut _186: controller::position::PositionDirection;<br align="left"/>let mut _187: isize;<br align="left"/>let _188: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _189: !;<br align="left"/>let mut _190: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _191: (u64, u64);<br align="left"/>let _192: ();<br align="left"/>let mut _193: bool;<br align="left"/>let mut _194: u64;<br align="left"/>let mut _195: !;<br align="left"/>let mut _196: (u64, u64, u64);<br align="left"/>let _197: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _198: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;i64&gt;&gt;;<br align="left"/>let mut _199: std::result::Result&lt;std::option::Option&lt;i64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _200: state::perp_market::PerpMarket;<br align="left"/>let mut _201: isize;<br align="left"/>let _202: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _203: !;<br align="left"/>let mut _204: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _205: std::option::Option&lt;i64&gt;;<br align="left"/>let _206: u64;<br align="left"/>let mut _207: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _208: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _209: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _210: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _211: i64;<br align="left"/>let mut _212: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _213: u64;<br align="left"/>let mut _214: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _215: controller::position::PositionDirection;<br align="left"/>let mut _216: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _217: isize;<br align="left"/>let _218: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _219: !;<br align="left"/>let mut _220: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _221: u64;<br align="left"/>let mut _222: u64;<br align="left"/>let mut _223: u64;<br align="left"/>let _224: u64;<br align="left"/>let mut _225: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _226: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _227: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _228: controller::position::PositionDirection;<br align="left"/>let mut _229: u64;<br align="left"/>let mut _230: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _231: u64;<br align="left"/>let mut _232: u64;<br align="left"/>let mut _233: u64;<br align="left"/>let mut _234: bool;<br align="left"/>let mut _235: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _236: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _237: state::user::Order;<br align="left"/>let _238: usize;<br align="left"/>let mut _239: usize;<br align="left"/>let mut _240: bool;<br align="left"/>let mut _241: u64;<br align="left"/>let mut _242: isize;<br align="left"/>let _243: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _244: !;<br align="left"/>let mut _245: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _246: bool;<br align="left"/>let mut _247: isize;<br align="left"/>let _248: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _249: !;<br align="left"/>let mut _250: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _251: u64;<br align="left"/>let _252: ();<br align="left"/>let mut _253: bool;<br align="left"/>let mut _254: u64;<br align="left"/>let _255: u64;<br align="left"/>let _256: u64;<br align="left"/>let mut _257: (u64, u64);<br align="left"/>let mut _258: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _259: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _260: &amp;ReErased mut state::user::User;<br align="left"/>let mut _261: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _262: usize;<br align="left"/>let mut _263: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _264: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _265: u64;<br align="left"/>let mut _266: i64;<br align="left"/>let mut _267: u64;<br align="left"/>let mut _268: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _269: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _270: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _271: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _272: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _273: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _274: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _275: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _276: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _277: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _278: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _279: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _280: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _281: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _282: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _283: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _284: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _285: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _286: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _287: u64;<br align="left"/>let mut _288: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _289: u64;<br align="left"/>let mut _290: bool;<br align="left"/>let mut _291: isize;<br align="left"/>let _292: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _293: !;<br align="left"/>let mut _294: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _295: (u64, u64);<br align="left"/>let mut _296: u64;<br align="left"/>let mut _297: u64;<br align="left"/>let _298: i64;<br align="left"/>let _299: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _300: (i64, std::option::Option&lt;(u64, u64)&gt;);<br align="left"/>let _301: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _302: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::PerpPosition&gt;;<br align="left"/>let mut _303: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _304: &amp;ReErased state::user::User;<br align="left"/>let mut _305: u16;<br align="left"/>let mut _306: isize;<br align="left"/>let _307: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _308: !;<br align="left"/>let mut _309: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _310: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _311: i64;<br align="left"/>let mut _312: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _313: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _314: controller::position::PositionDirection;<br align="left"/>let _315: u64;<br align="left"/>let mut _316: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _317: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _318: &amp;ReErased state::user::Order;<br align="left"/>let _319: usize;<br align="left"/>let mut _320: usize;<br align="left"/>let mut _321: bool;<br align="left"/>let mut _322: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _323: i64;<br align="left"/>let mut _324: isize;<br align="left"/>let _325: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _326: !;<br align="left"/>let mut _327: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _328: u64;<br align="left"/>let _329: u64;<br align="left"/>let _330: u64;<br align="left"/>let mut _331: (u64, u64);<br align="left"/>let mut _332: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _333: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _334: u64;<br align="left"/>let mut _335: u64;<br align="left"/>let mut _336: u64;<br align="left"/>let mut _337: controller::position::PositionDirection;<br align="left"/>let mut _338: isize;<br align="left"/>let _339: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _340: !;<br align="left"/>let mut _341: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _342: (u64, u64);<br align="left"/>let _343: ();<br align="left"/>let mut _344: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _345: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _346: u64;<br align="left"/>let mut _347: u64;<br align="left"/>let mut _348: controller::position::PositionDirection;<br align="left"/>let mut _349: u64;<br align="left"/>let mut _350: isize;<br align="left"/>let _351: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _352: !;<br align="left"/>let mut _353: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _354: ();<br align="left"/>let _355: ();<br align="left"/>let mut _356: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _357: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _358: u64;<br align="left"/>let mut _359: u64;<br align="left"/>let mut _360: controller::position::PositionDirection;<br align="left"/>let mut _361: u64;<br align="left"/>let mut _362: isize;<br align="left"/>let _363: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _364: !;<br align="left"/>let mut _365: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _366: ();<br align="left"/>let mut _367: u64;<br align="left"/>let mut _368: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _369: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _370: u64;<br align="left"/>let mut _371: u64;<br align="left"/>let mut _372: isize;<br align="left"/>let _373: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _374: !;<br align="left"/>let mut _375: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _376: u64;<br align="left"/>let mut _377: u64;<br align="left"/>let mut _378: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _379: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _380: u64;<br align="left"/>let mut _381: u64;<br align="left"/>let mut _382: isize;<br align="left"/>let _383: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _384: !;<br align="left"/>let mut _385: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _386: u64;<br align="left"/>let _387: usize;<br align="left"/>let mut _388: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _389: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _390: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _391: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _392: u16;<br align="left"/>let _393: usize;<br align="left"/>let mut _394: usize;<br align="left"/>let mut _395: bool;<br align="left"/>let mut _396: isize;<br align="left"/>let _397: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _398: !;<br align="left"/>let mut _399: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _400: usize;<br align="left"/>let _401: controller::position::PositionDelta;<br align="left"/>let mut _402: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, controller::position::PositionDelta&gt;;<br align="left"/>let mut _403: std::result::Result&lt;controller::position::PositionDelta, error::ErrorCode&gt;;<br align="left"/>let mut _404: u64;<br align="left"/>let mut _405: u64;<br align="left"/>let mut _406: controller::position::PositionDirection;<br align="left"/>let _407: usize;<br align="left"/>let mut _408: usize;<br align="left"/>let mut _409: bool;<br align="left"/>let mut _410: isize;<br align="left"/>let _411: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _412: !;<br align="left"/>let mut _413: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _414: controller::position::PositionDelta;<br align="left"/>let _415: i64;<br align="left"/>let mut _416: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _417: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _418: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _419: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _420: usize;<br align="left"/>let mut _421: usize;<br align="left"/>let mut _422: bool;<br align="left"/>let mut _423: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _424: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let _425: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let mut _426: isize;<br align="left"/>let _427: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _428: !;<br align="left"/>let mut _429: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _430: i64;<br align="left"/>let _431: ();<br align="left"/>let mut _432: isize;<br align="left"/>let _433: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let _434: ();<br align="left"/>let mut _435: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _436: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _437: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _438: u8;<br align="left"/>let mut _439: u64;<br align="left"/>let mut _440: i64;<br align="left"/>let mut _441: isize;<br align="left"/>let _442: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _443: !;<br align="left"/>let mut _444: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _445: ();<br align="left"/>let _446: ();<br align="left"/>let mut _447: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _448: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _449: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _450: u8;<br align="left"/>let mut _451: u64;<br align="left"/>let mut _452: i64;<br align="left"/>let mut _453: isize;<br align="left"/>let _454: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _455: !;<br align="left"/>let mut _456: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _457: ();<br align="left"/>let _458: usize;<br align="left"/>let mut _459: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _460: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _461: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _462: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _463: u16;<br align="left"/>let _464: usize;<br align="left"/>let mut _465: usize;<br align="left"/>let mut _466: bool;<br align="left"/>let mut _467: isize;<br align="left"/>let _468: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _469: !;<br align="left"/>let mut _470: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _471: usize;<br align="left"/>let _472: controller::position::PositionDelta;<br align="left"/>let mut _473: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, controller::position::PositionDelta&gt;;<br align="left"/>let mut _474: std::result::Result&lt;controller::position::PositionDelta, error::ErrorCode&gt;;<br align="left"/>let mut _475: u64;<br align="left"/>let mut _476: u64;<br align="left"/>let mut _477: controller::position::PositionDirection;<br align="left"/>let _478: usize;<br align="left"/>let mut _479: usize;<br align="left"/>let mut _480: bool;<br align="left"/>let mut _481: isize;<br align="left"/>let _482: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _483: !;<br align="left"/>let mut _484: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _485: controller::position::PositionDelta;<br align="left"/>let _486: i64;<br align="left"/>let mut _487: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _488: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _489: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _490: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _491: usize;<br align="left"/>let mut _492: usize;<br align="left"/>let mut _493: bool;<br align="left"/>let mut _494: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _495: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let _496: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let mut _497: isize;<br align="left"/>let _498: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _499: !;<br align="left"/>let mut _500: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _501: i64;<br align="left"/>let _502: ();<br align="left"/>let mut _503: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _504: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _505: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _506: u8;<br align="left"/>let mut _507: u64;<br align="left"/>let mut _508: i64;<br align="left"/>let mut _509: isize;<br align="left"/>let _510: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _511: !;<br align="left"/>let mut _512: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _513: ();<br align="left"/>let _514: bool;<br align="left"/>let mut _515: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _516: u16;<br align="left"/>let _517: bool;<br align="left"/>let mut _518: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _519: u16;<br align="left"/>let _520: u64;<br align="left"/>let mut _521: bool;<br align="left"/>let mut _522: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _523: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _524: u64;<br align="left"/>let mut _525: controller::position::PositionDirection;<br align="left"/>let mut _526: i64;<br align="left"/>let mut _527: isize;<br align="left"/>let _528: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _529: !;<br align="left"/>let mut _530: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _531: u64;<br align="left"/>let _532: u64;<br align="left"/>let _533: u64;<br align="left"/>let _534: i64;<br align="left"/>let _535: u64;<br align="left"/>let _536: u64;<br align="left"/>let _537: u64;<br align="left"/>let mut _538: math::fees::FillFees;<br align="left"/>let mut _539: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::fees::FillFees&gt;;<br align="left"/>let mut _540: std::result::Result&lt;math::fees::FillFees, error::ErrorCode&gt;;<br align="left"/>let mut _541: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _542: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _543: u64;<br align="left"/>let mut _544: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _545: u64;<br align="left"/>let _546: usize;<br align="left"/>let mut _547: usize;<br align="left"/>let mut _548: bool;<br align="left"/>let mut _549: u64;<br align="left"/>let mut _550: u64;<br align="left"/>let mut _551: bool;<br align="left"/>let mut _552: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _553: &amp;ReErased state::user::MarketType;<br align="left"/>let _554: &amp;ReErased state::user::MarketType;<br align="left"/>let _555: state::user::MarketType;<br align="left"/>let mut _556: i16;<br align="left"/>let mut _557: bool;<br align="left"/>let mut _558: &amp;ReErased state::user::User;<br align="left"/>let mut _559: math::margin::MarginRequirementType;<br align="left"/>let mut _560: isize;<br align="left"/>let _561: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _562: !;<br align="left"/>let mut _563: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _564: math::fees::FillFees;<br align="left"/>let mut _565: i128;<br align="left"/>let mut _566: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _567: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _568: i128;<br align="left"/>let mut _569: i128;<br align="left"/>let mut _570: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _571: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _572: i64;<br align="left"/>let mut _573: isize;<br align="left"/>let _574: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _575: !;<br align="left"/>let mut _576: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _577: i128;<br align="left"/>let mut _578: isize;<br align="left"/>let _579: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _580: !;<br align="left"/>let mut _581: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _582: i128;<br align="left"/>let mut _583: u128;<br align="left"/>let mut _584: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _585: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _586: u128;<br align="left"/>let mut _587: u128;<br align="left"/>let mut _588: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _589: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _590: i64;<br align="left"/>let mut _591: isize;<br align="left"/>let _592: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _593: !;<br align="left"/>let mut _594: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _595: u128;<br align="left"/>let mut _596: isize;<br align="left"/>let _597: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _598: !;<br align="left"/>let mut _599: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _600: u128;<br align="left"/>let mut _601: i128;<br align="left"/>let mut _602: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _603: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _604: i128;<br align="left"/>let mut _605: i128;<br align="left"/>let mut _606: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _607: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _608: i64;<br align="left"/>let mut _609: isize;<br align="left"/>let _610: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _611: !;<br align="left"/>let mut _612: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _613: i128;<br align="left"/>let mut _614: isize;<br align="left"/>let _615: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _616: !;<br align="left"/>let mut _617: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _618: i128;<br align="left"/>let mut _619: i64;<br align="left"/>let mut _620: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _621: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _622: i64;<br align="left"/>let mut _623: i64;<br align="left"/>let mut _624: isize;<br align="left"/>let _625: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _626: !;<br align="left"/>let mut _627: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _628: i64;<br align="left"/>let _629: ();<br align="left"/>let mut _630: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _631: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _632: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _633: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _634: usize;<br align="left"/>let mut _635: usize;<br align="left"/>let mut _636: bool;<br align="left"/>let mut _637: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _638: i64;<br align="left"/>let mut _639: i64;<br align="left"/>let mut _640: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _641: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _642: u64;<br align="left"/>let mut _643: isize;<br align="left"/>let _644: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _645: !;<br align="left"/>let mut _646: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _647: i64;<br align="left"/>let mut _648: bool;<br align="left"/>let mut _649: isize;<br align="left"/>let _650: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _651: !;<br align="left"/>let mut _652: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _653: ();<br align="left"/>let _654: ();<br align="left"/>let mut _655: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _656: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _657: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _658: u64;<br align="left"/>let mut _659: isize;<br align="left"/>let _660: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _661: !;<br align="left"/>let mut _662: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _663: ();<br align="left"/>let _664: ();<br align="left"/>let mut _665: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _666: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _667: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _668: u64;<br align="left"/>let mut _669: isize;<br align="left"/>let _670: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _671: !;<br align="left"/>let mut _672: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _673: ();<br align="left"/>let _674: ();<br align="left"/>let mut _675: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _676: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _677: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _678: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _679: usize;<br align="left"/>let mut _680: usize;<br align="left"/>let mut _681: bool;<br align="left"/>let mut _682: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _683: i64;<br align="left"/>let mut _684: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _685: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _686: u64;<br align="left"/>let mut _687: isize;<br align="left"/>let _688: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _689: !;<br align="left"/>let mut _690: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _691: i64;<br align="left"/>let mut _692: isize;<br align="left"/>let _693: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _694: !;<br align="left"/>let mut _695: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _696: ();<br align="left"/>let _697: ();<br align="left"/>let mut _698: isize;<br align="left"/>let _699: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let _700: ();<br align="left"/>let mut _701: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _702: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _703: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _704: u64;<br align="left"/>let mut _705: isize;<br align="left"/>let _706: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _707: !;<br align="left"/>let mut _708: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _709: ();<br align="left"/>let _710: ();<br align="left"/>let mut _711: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _712: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _713: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _714: u64;<br align="left"/>let mut _715: isize;<br align="left"/>let _716: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _717: !;<br align="left"/>let mut _718: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _719: ();<br align="left"/>let _720: ();<br align="left"/>let mut _721: isize;<br align="left"/>let _722: &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let _723: ();<br align="left"/>let mut _724: bool;<br align="left"/>let mut _725: u64;<br align="left"/>let _726: usize;<br align="left"/>let mut _727: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _728: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _729: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _730: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _731: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _732: u16;<br align="left"/>let mut _733: Closure(DefId(0:541 ~ drift[d311]::controller::orders::fulfill_perp_order_with_match::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((error::ErrorCode,)) -&gt; std::result::Result&lt;usize, error::ErrorCode&gt;, []), (&amp;ReErased mut &amp;ReErased mut &amp;ReErased mut state::user::User, &amp;ReErased &amp;ReErased mut state::perp_market::PerpMarket)]);<br align="left"/>let mut _734: &amp;ReErased mut &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let mut _735: &amp;ReErased &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _736: isize;<br align="left"/>let _737: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _738: !;<br align="left"/>let mut _739: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _740: usize;<br align="left"/>let _741: ();<br align="left"/>let mut _742: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _743: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _744: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _745: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _746: usize;<br align="left"/>let mut _747: usize;<br align="left"/>let mut _748: bool;<br align="left"/>let mut _749: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _750: i64;<br align="left"/>let mut _751: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _752: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _753: u64;<br align="left"/>let mut _754: isize;<br align="left"/>let _755: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _756: !;<br align="left"/>let mut _757: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _758: i64;<br align="left"/>let mut _759: isize;<br align="left"/>let _760: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _761: !;<br align="left"/>let mut _762: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _763: ();<br align="left"/>let _764: ();<br align="left"/>let mut _765: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _766: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _767: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _768: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _769: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut &amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _770: std::result::Result&lt;&amp;ReErased mut &amp;ReErased mut state::user::UserStats, error::ErrorCode&gt;;<br align="left"/>let mut _771: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _772: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _773: isize;<br align="left"/>let _774: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _775: !;<br align="left"/>let mut _776: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _777: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _778: u64;<br align="left"/>let mut _779: i64;<br align="left"/>let mut _780: isize;<br align="left"/>let _781: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _782: !;<br align="left"/>let mut _783: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _784: ();<br align="left"/>let _785: ();<br align="left"/>let mut _786: &amp;ReErased mut state::user::User;<br align="left"/>let mut _787: u64;<br align="left"/>let _788: ();<br align="left"/>let mut _789: (std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::User&gt;, std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::UserStats&gt;);<br align="left"/>let mut _790: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _791: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _792: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _793: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _794: isize;<br align="left"/>let mut _795: isize;<br align="left"/>let _796: &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let _797: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _798: std::result::Result&lt;&amp;ReErased mut state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _799: &amp;ReErased mut state::user::User;<br align="left"/>let mut _800: u16;<br align="left"/>let mut _801: isize;<br align="left"/>let _802: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _803: ();<br align="left"/>let mut _804: bool;<br align="left"/>let mut _805: u64;<br align="left"/>let _806: ();<br align="left"/>let mut _807: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _808: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _809: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _810: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _811: i64;<br align="left"/>let mut _812: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _813: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _814: u64;<br align="left"/>let mut _815: isize;<br align="left"/>let _816: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _817: !;<br align="left"/>let mut _818: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _819: i64;<br align="left"/>let mut _820: isize;<br align="left"/>let _821: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _822: !;<br align="left"/>let mut _823: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _824: ();<br align="left"/>let _825: ();<br align="left"/>let mut _826: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _827: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _828: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _829: u64;<br align="left"/>let mut _830: i64;<br align="left"/>let mut _831: isize;<br align="left"/>let _832: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _833: !;<br align="left"/>let mut _834: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _835: ();<br align="left"/>let _836: ();<br align="left"/>let mut _837: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _838: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _839: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _840: &amp;ReErased mut state::user::Order;<br align="left"/>let _841: usize;<br align="left"/>let mut _842: usize;<br align="left"/>let mut _843: bool;<br align="left"/>let mut _844: u64;<br align="left"/>let mut _845: u64;<br align="left"/>let mut _846: isize;<br align="left"/>let _847: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _848: !;<br align="left"/>let mut _849: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _850: ();<br align="left"/>let _851: ();<br align="left"/>let mut _852: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _853: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _854: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _855: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _856: usize;<br align="left"/>let mut _857: usize;<br align="left"/>let mut _858: bool;<br align="left"/>let mut _859: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _860: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _861: usize;<br align="left"/>let mut _862: usize;<br align="left"/>let mut _863: bool;<br align="left"/>let mut _864: u64;<br align="left"/>let mut _865: bool;<br align="left"/>let mut _866: &amp;ReErased state::user::Order;<br align="left"/>let _867: usize;<br align="left"/>let mut _868: usize;<br align="left"/>let mut _869: bool;<br align="left"/>let mut _870: isize;<br align="left"/>let _871: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _872: !;<br align="left"/>let mut _873: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _874: ();<br align="left"/>let _875: ();<br align="left"/>let mut _876: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _877: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _878: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _879: &amp;ReErased mut state::user::Order;<br align="left"/>let _880: usize;<br align="left"/>let mut _881: usize;<br align="left"/>let mut _882: bool;<br align="left"/>let mut _883: u64;<br align="left"/>let mut _884: u64;<br align="left"/>let mut _885: isize;<br align="left"/>let _886: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _887: !;<br align="left"/>let mut _888: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _889: ();<br align="left"/>let _890: ();<br align="left"/>let mut _891: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _892: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _893: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _894: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _895: usize;<br align="left"/>let mut _896: usize;<br align="left"/>let mut _897: bool;<br align="left"/>let mut _898: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _899: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _900: usize;<br align="left"/>let mut _901: usize;<br align="left"/>let mut _902: bool;<br align="left"/>let mut _903: u64;<br align="left"/>let mut _904: bool;<br align="left"/>let mut _905: &amp;ReErased state::user::Order;<br align="left"/>let _906: usize;<br align="left"/>let mut _907: usize;<br align="left"/>let mut _908: bool;<br align="left"/>let mut _909: isize;<br align="left"/>let _910: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _911: !;<br align="left"/>let mut _912: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _913: ();<br align="left"/>let _914: u64;<br align="left"/>let _915: u64;<br align="left"/>let mut _916: u64;<br align="left"/>let mut _917: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _918: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _919: u64;<br align="left"/>let mut _920: std::option::Option&lt;u64&gt;;<br align="left"/>let _921: state::events::OrderActionExplanation;<br align="left"/>let mut _922: bool;<br align="left"/>let mut _923: bool;<br align="left"/>let mut _924: &amp;ReErased state::user::Order;<br align="left"/>let _925: usize;<br align="left"/>let mut _926: usize;<br align="left"/>let mut _927: bool;<br align="left"/>let mut _928: u8;<br align="left"/>let mut _929: u8;<br align="left"/>let mut _930: u8;<br align="left"/>let mut _931: bool;<br align="left"/>let mut _932: &amp;ReErased state::user::Order;<br align="left"/>let _933: usize;<br align="left"/>let mut _934: usize;<br align="left"/>let mut _935: bool;<br align="left"/>let mut _936: state::user::OrderBitFlag;<br align="left"/>let _937: std::option::Option&lt;u64&gt;;<br align="left"/>let _938: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _939: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _940: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _941: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _942: u64;<br align="left"/>let mut _943: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _944: isize;<br align="left"/>let _945: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _946: !;<br align="left"/>let mut _947: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _948: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _949: std::option::Option&lt;u64&gt;;<br align="left"/>let _950: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _951: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _952: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _953: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _954: u64;<br align="left"/>let mut _955: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _956: isize;<br align="left"/>let _957: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _958: !;<br align="left"/>let mut _959: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _960: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _961: state::events::OrderActionRecord;<br align="left"/>let mut _962: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _963: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _964: i64;<br align="left"/>let mut _965: state::events::OrderAction;<br align="left"/>let mut _966: state::events::OrderActionExplanation;<br align="left"/>let mut _967: u16;<br align="left"/>let mut _968: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _969: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _970: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _971: u64;<br align="left"/>let mut _972: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _973: u64;<br align="left"/>let mut _974: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _975: u64;<br align="left"/>let mut _976: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _977: u64;<br align="left"/>let mut _978: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _979: u64;<br align="left"/>let mut _980: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _981: u64;<br align="left"/>let mut _982: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _983: u64;<br align="left"/>let mut _984: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _985: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _986: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _987: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _988: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _989: state::user::Order;<br align="left"/>let _990: usize;<br align="left"/>let mut _991: usize;<br align="left"/>let mut _992: bool;<br align="left"/>let mut _993: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _994: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _995: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _996: state::user::Order;<br align="left"/>let _997: usize;<br align="left"/>let mut _998: usize;<br align="left"/>let mut _999: bool;<br align="left"/>let mut _1000: i64;<br align="left"/>let mut _1001: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _1002: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _1003: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _1004: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1005: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _1006: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _1007: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _1008: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _1009: isize;<br align="left"/>let _1010: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1011: !;<br align="left"/>let mut _1012: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1013: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _1014: u8;<br align="left"/>let mut _1015: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1016: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1017: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1018: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1019: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1020: isize;<br align="left"/>let _1021: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1022: !;<br align="left"/>let mut _1023: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1024: state::events::OrderActionRecord;<br align="left"/>let _1025: ();<br align="left"/>let mut _1026: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1027: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1028: state::events::OrderActionRecord;<br align="left"/>let mut _1029: isize;<br align="left"/>let _1030: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1031: !;<br align="left"/>let mut _1032: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1033: ();<br align="left"/>let _1034: ();<br align="left"/>let mut _1035: bool;<br align="left"/>let mut _1036: u64;<br align="left"/>let mut _1037: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1038: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1039: &amp;ReErased state::user::Order;<br align="left"/>let _1040: usize;<br align="left"/>let mut _1041: usize;<br align="left"/>let mut _1042: bool;<br align="left"/>let mut _1043: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _1044: isize;<br align="left"/>let _1045: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1046: !;<br align="left"/>let mut _1047: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1048: u64;<br align="left"/>let _1049: ();<br align="left"/>let mut _1050: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1051: bool;<br align="left"/>let mut _1052: &amp;ReErased state::user::Order;<br align="left"/>let _1053: usize;<br align="left"/>let mut _1054: usize;<br align="left"/>let mut _1055: bool;<br align="left"/>let mut _1056: state::user::OrderStatus;<br align="left"/>let _1057: usize;<br align="left"/>let mut _1058: usize;<br align="left"/>let mut _1059: bool;<br align="left"/>let _1060: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _1061: usize;<br align="left"/>let mut _1062: usize;<br align="left"/>let mut _1063: bool;<br align="left"/>let mut _1064: (u8, bool);<br align="left"/>let _1065: ();<br align="left"/>let mut _1066: bool;<br align="left"/>let mut _1067: u64;<br align="left"/>let mut _1068: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1069: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1070: &amp;ReErased state::user::Order;<br align="left"/>let _1071: usize;<br align="left"/>let mut _1072: usize;<br align="left"/>let mut _1073: bool;<br align="left"/>let mut _1074: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _1075: isize;<br align="left"/>let _1076: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1077: !;<br align="left"/>let mut _1078: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1079: u64;<br align="left"/>let _1080: ();<br align="left"/>let mut _1081: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1082: bool;<br align="left"/>let mut _1083: &amp;ReErased state::user::Order;<br align="left"/>let _1084: usize;<br align="left"/>let mut _1085: usize;<br align="left"/>let mut _1086: bool;<br align="left"/>let mut _1087: state::user::OrderStatus;<br align="left"/>let _1088: usize;<br align="left"/>let mut _1089: usize;<br align="left"/>let mut _1090: bool;<br align="left"/>let _1091: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _1092: usize;<br align="left"/>let mut _1093: usize;<br align="left"/>let mut _1094: bool;<br align="left"/>let mut _1095: (u8, bool);<br align="left"/>let mut _1096: (u64, u64, u64);<br align="left"/>let mut _1097: u64;<br align="left"/>let mut _1098: u64;<br align="left"/>let mut _1099: u64;<br align="left"/>let mut _1100: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _1101: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1102: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _1103: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _1104: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1105: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1106: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1107: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _1108: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1109: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1110: &amp;ReErased mut state::user::UserStats;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug taker =&gt; _2;<br align="left"/>debug taker_stats =&gt; _3;<br align="left"/>debug taker_order_index =&gt; _4;<br align="left"/>debug taker_key =&gt; _5;<br align="left"/>debug maker =&gt; _6;<br align="left"/>debug maker_stats =&gt; _7;<br align="left"/>debug maker_order_index =&gt; _8;<br align="left"/>debug maker_key =&gt; _9;<br align="left"/>debug filler =&gt; _10;<br align="left"/>debug filler_stats =&gt; _11;<br align="left"/>debug filler_key =&gt; _12;<br align="left"/>debug referrer =&gt; _13;<br align="left"/>debug referrer_stats =&gt; _14;<br align="left"/>debug reserve_price_before =&gt; _15;<br align="left"/>debug valid_oracle_price =&gt; _16;<br align="left"/>debug taker_limit_price =&gt; _17;<br align="left"/>debug maker_price =&gt; _18;<br align="left"/>debug now =&gt; _19;<br align="left"/>debug slot =&gt; _20;<br align="left"/>debug fee_structure =&gt; _21;<br align="left"/>debug oracle_map =&gt; _22;<br align="left"/>debug is_liquidation =&gt; _23;<br align="left"/>debug oracle_price =&gt; _38;<br align="left"/>debug residual =&gt; _48;<br align="left"/>debug val =&gt; _51;<br align="left"/>debug taker_direction =&gt; _52;<br align="left"/>debug taker_price =&gt; _56;<br align="left"/>debug taker_limit_price =&gt; _58;<br align="left"/>debug amm_available_liquidity =&gt; _59;<br align="left"/>debug residual =&gt; _67;<br align="left"/>debug val =&gt; _70;<br align="left"/>debug residual =&gt; _85;<br align="left"/>debug val =&gt; _88;<br align="left"/>debug taker_existing_position =&gt; _89;<br align="left"/>debug residual =&gt; _96;<br align="left"/>debug val =&gt; _99;<br align="left"/>debug taker_base_asset_amount =&gt; _100;<br align="left"/>debug residual =&gt; _110;<br align="left"/>debug val =&gt; _113;<br align="left"/>debug maker_direction =&gt; _114;<br align="left"/>debug maker_existing_position =&gt; _118;<br align="left"/>debug maker_existing_position_params_for_order_action =&gt; _119;<br align="left"/>debug maker_position =&gt; _121;<br align="left"/>debug residual =&gt; _127;<br align="left"/>debug val =&gt; _130;<br align="left"/>debug maker_base_asset_amount =&gt; _135;<br align="left"/>debug residual =&gt; _145;<br align="left"/>debug val =&gt; _148;<br align="left"/>debug orders_cross =&gt; _149;<br align="left"/>debug res =&gt; _162;<br align="left"/>debug base_asset_amount =&gt; _179;<br align="left"/>debug residual =&gt; _188;<br align="left"/>debug val =&gt; _191;<br align="left"/>debug sanitize_clamp_denominator =&gt; _197;<br align="left"/>debug residual =&gt; _202;<br align="left"/>debug val =&gt; _205;<br align="left"/>debug residual =&gt; _218;<br align="left"/>debug val =&gt; _221;<br align="left"/>debug total_quote_asset_amount =&gt; _222;<br align="left"/>debug total_base_asset_amount =&gt; _223;<br align="left"/>debug jit_base_asset_amount =&gt; _224;<br align="left"/>debug residual =&gt; _243;<br align="left"/>debug val =&gt; _246;<br align="left"/>debug residual =&gt; _248;<br align="left"/>debug val =&gt; _251;<br align="left"/>debug base_asset_amount_filled_by_amm =&gt; _255;<br align="left"/>debug quote_asset_amount_filled_by_amm =&gt; _256;<br align="left"/>debug residual =&gt; _292;<br align="left"/>debug val =&gt; _295;<br align="left"/>debug taker_existing_position =&gt; _298;<br align="left"/>debug taker_existing_position_params_for_order_action =&gt; _299;<br align="left"/>debug taker_position =&gt; _301;<br align="left"/>debug residual =&gt; _307;<br align="left"/>debug val =&gt; _310;<br align="left"/>debug taker_base_asset_amount =&gt; _315;<br align="left"/>debug residual =&gt; _325;<br align="left"/>debug val =&gt; _328;<br align="left"/>debug base_asset_amount_fulfilled_by_maker =&gt; _329;<br align="left"/>debug quote_asset_amount =&gt; _330;<br align="left"/>debug residual =&gt; _339;<br align="left"/>debug val =&gt; _342;<br align="left"/>debug residual =&gt; _351;<br align="left"/>debug val =&gt; _354;<br align="left"/>debug residual =&gt; _363;<br align="left"/>debug val =&gt; _366;<br align="left"/>debug residual =&gt; _373;<br align="left"/>debug val =&gt; _376;<br align="left"/>debug residual =&gt; _383;<br align="left"/>debug val =&gt; _386;<br align="left"/>debug maker_position_index =&gt; _387;<br align="left"/>debug residual =&gt; _397;<br align="left"/>debug val =&gt; _400;<br align="left"/>debug maker_position_delta =&gt; _401;<br align="left"/>debug residual =&gt; _411;<br align="left"/>debug val =&gt; _414;<br align="left"/>debug residual =&gt; _427;<br align="left"/>debug val =&gt; _430;<br align="left"/>debug maker_stats =&gt; _433;<br align="left"/>debug residual =&gt; _442;<br align="left"/>debug val =&gt; _445;<br align="left"/>debug residual =&gt; _454;<br align="left"/>debug val =&gt; _457;<br align="left"/>debug taker_position_index =&gt; _458;<br align="left"/>debug residual =&gt; _468;<br align="left"/>debug val =&gt; _471;<br align="left"/>debug taker_position_delta =&gt; _472;<br align="left"/>debug residual =&gt; _482;<br align="left"/>debug val =&gt; _485;<br align="left"/>debug residual =&gt; _498;<br align="left"/>debug val =&gt; _501;<br align="left"/>debug residual =&gt; _510;<br align="left"/>debug val =&gt; _513;<br align="left"/>debug reward_referrer =&gt; _514;<br align="left"/>debug reward_filler =&gt; _517;<br align="left"/>debug filler_multiplier =&gt; _520;<br align="left"/>debug residual =&gt; _528;<br align="left"/>debug val =&gt; _531;<br align="left"/>debug taker_fee =&gt; _532;<br align="left"/>debug maker_rebate =&gt; _533;<br align="left"/>debug fee_to_market =&gt; _534;<br align="left"/>debug filler_reward =&gt; _535;<br align="left"/>debug referrer_reward =&gt; _536;<br align="left"/>debug referee_discount =&gt; _537;<br align="left"/>debug residual =&gt; _561;<br align="left"/>debug val =&gt; _564;<br align="left"/>debug residual =&gt; _574;<br align="left"/>debug val =&gt; _577;<br align="left"/>debug residual =&gt; _579;<br align="left"/>debug val =&gt; _582;<br align="left"/>debug residual =&gt; _592;<br align="left"/>debug val =&gt; _595;<br align="left"/>debug residual =&gt; _597;<br align="left"/>debug val =&gt; _600;<br align="left"/>debug residual =&gt; _610;<br align="left"/>debug val =&gt; _613;<br align="left"/>debug residual =&gt; _615;<br align="left"/>debug val =&gt; _618;<br align="left"/>debug residual =&gt; _625;<br align="left"/>debug val =&gt; _628;<br align="left"/>debug residual =&gt; _644;<br align="left"/>debug val =&gt; _647;<br align="left"/>debug residual =&gt; _650;<br align="left"/>debug val =&gt; _653;<br align="left"/>debug residual =&gt; _660;<br align="left"/>debug val =&gt; _663;<br align="left"/>debug residual =&gt; _670;<br align="left"/>debug val =&gt; _673;<br align="left"/>debug residual =&gt; _688;<br align="left"/>debug val =&gt; _691;<br align="left"/>debug residual =&gt; _693;<br align="left"/>debug val =&gt; _696;<br align="left"/>debug maker_stats =&gt; _699;<br align="left"/>debug residual =&gt; _706;<br align="left"/>debug val =&gt; _709;<br align="left"/>debug residual =&gt; _716;<br align="left"/>debug val =&gt; _719;<br align="left"/>debug filler =&gt; _722;<br align="left"/>debug filler_position_index =&gt; _726;<br align="left"/>debug residual =&gt; _737;<br align="left"/>debug val =&gt; _740;<br align="left"/>debug residual =&gt; _755;<br align="left"/>debug val =&gt; _758;<br align="left"/>debug residual =&gt; _760;<br align="left"/>debug val =&gt; _763;<br align="left"/>debug residual =&gt; _774;<br align="left"/>debug val =&gt; _777;<br align="left"/>debug residual =&gt; _781;<br align="left"/>debug val =&gt; _784;<br align="left"/>debug referrer =&gt; _796;<br align="left"/>debug referrer_stats =&gt; _797;<br align="left"/>debug referrer_position =&gt; _802;<br align="left"/>debug residual =&gt; _816;<br align="left"/>debug val =&gt; _819;<br align="left"/>debug residual =&gt; _821;<br align="left"/>debug val =&gt; _824;<br align="left"/>debug residual =&gt; _832;<br align="left"/>debug val =&gt; _835;<br align="left"/>debug residual =&gt; _847;<br align="left"/>debug val =&gt; _850;<br align="left"/>debug residual =&gt; _871;<br align="left"/>debug val =&gt; _874;<br align="left"/>debug residual =&gt; _886;<br align="left"/>debug val =&gt; _889;<br align="left"/>debug residual =&gt; _910;<br align="left"/>debug val =&gt; _913;<br align="left"/>debug fill_record_id =&gt; _914;<br align="left"/>debug current_id =&gt; _915;<br align="left"/>debug order_action_explanation =&gt; _921;<br align="left"/>debug order_action_bit_flags =&gt; _928;<br align="left"/>debug taker_existing_quote_entry_amount =&gt; _937;<br align="left"/>debug taker_existing_base_asset_amount =&gt; _938;<br align="left"/>debug residual =&gt; _945;<br align="left"/>debug val =&gt; _948;<br align="left"/>debug maker_existing_quote_entry_amount =&gt; _949;<br align="left"/>debug maker_existing_base_asset_amount =&gt; _950;<br align="left"/>debug residual =&gt; _957;<br align="left"/>debug val =&gt; _960;<br align="left"/>debug order_action_record =&gt; _961;<br align="left"/>debug residual =&gt; _1010;<br align="left"/>debug val =&gt; _1013;<br align="left"/>debug residual =&gt; _1021;<br align="left"/>debug val =&gt; _1024;<br align="left"/>debug residual =&gt; _1030;<br align="left"/>debug val =&gt; _1033;<br align="left"/>debug residual =&gt; _1045;<br align="left"/>debug val =&gt; _1048;<br align="left"/>debug market_position =&gt; _1060;<br align="left"/>debug residual =&gt; _1076;<br align="left"/>debug val =&gt; _1079;<br align="left"/>debug market_position =&gt; _1091;<br align="left"/>>;
    bb0__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _8<br/>_29 = Len(((*_6).5: [state::user::Order; 32]))<br/>_30 = Lt(_28, _29)<br/></td></tr><tr><td align="left">assert(move _30, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _29, _28)</td></tr></table>>];
    bb1__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_27 = &amp;((*_6).5: [state::user::Order; 32])[_28]<br/>_26 = &amp;(*_27)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _4<br/>_34 = Len(((*_2).5: [state::user::Order; 32]))<br/>_35 = Lt(_33, _34)<br/></td></tr><tr><td align="left">assert(move _35, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _34, _33)</td></tr></table>>];
    bb2__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_32 = &amp;((*_2).5: [state::user::Order; 32])[_33]<br/>_31 = &amp;(*_32)<br/></td></tr><tr><td align="left">_25 = are_orders_same_market_but_different_sides(move _26, move _31)</td></tr></table>>];
    bb3__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb4__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_26)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>_24 = const ()<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;mut (*_22)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = &amp;(*_1)<br/></td></tr><tr><td align="left">_45 = PerpMarket::oracle_id(move _46)</td></tr></table>>];
    bb5__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_26)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_37)<br/>_37 = (const 0_u64, const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64, u64), error::ErrorCode&gt;::Ok(move _37)<br/>StorageDead(_37)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>_44 = &amp;_45<br/>_43 = &amp;(*_44)<br/></td></tr><tr><td align="left">_41 = OracleMap::&lt;'_&gt;::get_price_data(move _42, move _43)</td></tr></table>>];
    bb7__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb8__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_47 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb9__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_40 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_39 = _51<br/>StorageDead(_51)<br/>_38 = ((*_39).0: i64)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = _4<br/>_54 = Len(((*_2).5: [state::user::Order; 32]))<br/>_55 = Lt(_53, _54)<br/></td></tr><tr><td align="left">assert(move _55, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _54, _53)</td></tr></table>>];
    bb10__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_50)<br/>_50 = _48<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _50)</td></tr></table>>];
    bb12__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_48)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_52 = (((*_2).5: [state::user::Order; 32])[_53].17: controller::position::PositionDirection)<br/>StorageDead(_53)<br/>StorageLive(_56)<br/>_57 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb14__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_17 as Some).0: u64)<br/>_56 = _58<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = &amp;((*_1).1: state::perp_market::AMM)<br/>_62 = &amp;(*_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_65 = &amp;_52<br/>_64 = &amp;(*_65)<br/></td></tr><tr><td align="left">_61 = calculate_amm_available_liquidity(move _62, move _64)</td></tr></table>>];
    bb16__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_60 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _61)</td></tr></table>>];
    bb17__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_66 = discriminant(_60)<br/></td></tr><tr><td align="left">switchInt(move _66)</td></tr></table>>];
    bb18__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_70)<br/>_70 = ((_60 as Continue).0: u64)<br/>_59 = _70<br/>StorageDead(_70)<br/>StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_60)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = ((*_1).1: state::perp_market::AMM)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = &amp;_52<br/>_74 = &amp;(*_75)<br/>StorageLive(_76)<br/>_76 = _59<br/>StorageLive(_77)<br/>_77 = _38<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>_80 = _4<br/>_81 = Len(((*_2).5: [state::user::Order; 32]))<br/>_82 = Lt(_80, _81)<br/></td></tr><tr><td align="left">assert(move _82, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _81, _80)</td></tr></table>>];
    bb19__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_67)<br/>_67 = ((_60 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_69)<br/>_69 = _67<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _69)</td></tr></table>>];
    bb20__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_67)<br/>StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_79 = ((*_2).5: [state::user::Order; 32])[_80]<br/>StorageLive(_83)<br/>_83 = _19<br/></td></tr><tr><td align="left">_78 = Order::seconds_til_expiry(move _79, move _83)</td></tr></table>>];
    bb22__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">_72 = AMM::get_fallback_price(move _73, move _74, move _76, move _77, move _78)</td></tr></table>>];
    bb23__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_74)<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">_71 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _72)</td></tr></table>>];
    bb24__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>_84 = discriminant(_71)<br/></td></tr><tr><td align="left">switchInt(move _84)</td></tr></table>>];
    bb25__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_88)<br/>_88 = ((_71 as Continue).0: u64)<br/>_56 = _88<br/>StorageDead(_88)<br/>StorageDead(_59)<br/>StorageDead(_80)<br/>StorageDead(_75)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_85)<br/>_85 = ((_71 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_87)<br/>_87 = _85<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _87)</td></tr></table>>];
    bb27__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>StorageDead(_85)<br/>StorageDead(_59)<br/>StorageDead(_80)<br/>StorageDead(_75)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = &amp;(*_2)<br/>StorageLive(_94)<br/>_94 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_92 = User::get_perp_position(move _93, move _94)</td></tr></table>>];
    bb29__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageDead(_93)<br/></td></tr><tr><td align="left">_91 = &lt;std::result::Result&lt;&amp;PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _92)</td></tr></table>>];
    bb30__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>_95 = discriminant(_91)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb31__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_91 as Continue).0: &amp;state::user::PerpPosition)<br/>_90 = _99<br/>StorageDead(_99)<br/>_89 = ((*_90).1: i64)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>_104 = _4<br/>_105 = Len(((*_2).5: [state::user::Order; 32]))<br/>_106 = Lt(_104, _105)<br/></td></tr><tr><td align="left">assert(move _106, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _105, _104)</td></tr></table>>];
    bb32__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_91 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_98)<br/>_98 = _96<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _98)</td></tr></table>>];
    bb33__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_103 = &amp;((*_2).5: [state::user::Order; 32])[_104]<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = _89<br/>_107 = Option::&lt;i64&gt;::Some(move _108)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">_102 = Order::get_base_asset_amount_unfilled(move _103, move _107)</td></tr></table>>];
    bb35__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageDead(_103)<br/></td></tr><tr><td align="left">_101 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _102)</td></tr></table>>];
    bb36__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>_109 = discriminant(_101)<br/></td></tr><tr><td align="left">switchInt(move _109)</td></tr></table>>];
    bb37__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_113)<br/>_113 = ((_101 as Continue).0: u64)<br/>_100 = _113<br/>StorageDead(_113)<br/>StorageDead(_104)<br/>StorageDead(_101)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>_115 = _8<br/>_116 = Len(((*_6).5: [state::user::Order; 32]))<br/>_117 = Lt(_115, _116)<br/></td></tr><tr><td align="left">assert(move _117, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _116, _115)</td></tr></table>>];
    bb38__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_110)<br/>_110 = ((_101 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_112)<br/>_112 = _110<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _112)</td></tr></table>>];
    bb39__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_110)<br/>StorageDead(_104)<br/>StorageDead(_101)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_114 = (((*_6).5: [state::user::Order; 32])[_115].17: controller::position::PositionDirection)<br/>StorageDead(_115)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>_124 = &amp;(*_6)<br/>StorageLive(_125)<br/>_125 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_123 = User::get_perp_position(move _124, move _125)</td></tr></table>>];
    bb41__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">_122 = &lt;std::result::Result&lt;&amp;PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _123)</td></tr></table>>];
    bb42__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>_126 = discriminant(_122)<br/></td></tr><tr><td align="left">switchInt(move _126)</td></tr></table>>];
    bb43__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_130)<br/>_130 = ((_122 as Continue).0: &amp;state::user::PerpPosition)<br/>_121 = _130<br/>StorageDead(_130)<br/>StorageDead(_122)<br/>StorageLive(_131)<br/>_131 = ((*_121).1: i64)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>_133 = &amp;(*_121)<br/>StorageLive(_134)<br/>_134 = _114<br/></td></tr><tr><td align="left">_132 = PerpPosition::get_existing_position_params_for_order_action(move _133, move _134)</td></tr></table>>];
    bb44__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_127)<br/>_127 = ((_122 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_129)<br/>_129 = _127<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _129)</td></tr></table>>];
    bb45__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_127)<br/>StorageDead(_122)<br/>StorageDead(_121)<br/>StorageDead(_120)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_133)<br/>_120 = (move _131, move _132)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/>StorageDead(_121)<br/>StorageLive(_118)<br/>_118 = (_120.0: i64)<br/>StorageLive(_119)<br/>_119 = (_120.1: std::option::Option&lt;(u64, u64)&gt;)<br/>StorageDead(_120)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>_139 = _8<br/>_140 = Len(((*_6).5: [state::user::Order; 32]))<br/>_141 = Lt(_139, _140)<br/></td></tr><tr><td align="left">assert(move _141, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _140, _139)</td></tr></table>>];
    bb47__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_138 = &amp;((*_6).5: [state::user::Order; 32])[_139]<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>_143 = _118<br/>_142 = Option::&lt;i64&gt;::Some(move _143)<br/>StorageDead(_143)<br/></td></tr><tr><td align="left">_137 = Order::get_base_asset_amount_unfilled(move _138, move _142)</td></tr></table>>];
    bb48__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_138)<br/></td></tr><tr><td align="left">_136 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _137)</td></tr></table>>];
    bb49__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_137)<br/>_144 = discriminant(_136)<br/></td></tr><tr><td align="left">switchInt(move _144)</td></tr></table>>];
    bb50__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_148)<br/>_148 = ((_136 as Continue).0: u64)<br/>_135 = _148<br/>StorageDead(_148)<br/>StorageDead(_139)<br/>StorageDead(_136)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>_150 = _114<br/>StorageLive(_151)<br/>_151 = _18<br/>StorageLive(_152)<br/>_152 = _56<br/></td></tr><tr><td align="left">_149 = do_orders_cross(move _150, move _151, move _152)</td></tr></table>>];
    bb51__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageLive(_145)<br/>_145 = ((_136 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_147)<br/>_147 = _145<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _147)</td></tr></table>>];
    bb52__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/>StorageDead(_145)<br/>StorageDead(_139)<br/>StorageDead(_136)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>StorageDead(_151)<br/>StorageDead(_150)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>_154 = _149<br/></td></tr><tr><td align="left">switchInt(move _154)</td></tr></table>>];
    bb54__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>StorageLive(_166)<br/>_1101 = const _<br/>_166 = &amp;(*_1101)<br/>_165 = &amp;(*_166)<br/>_164 = move _165 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_165)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>_174 = &amp;_18<br/>_173 = &amp;(*_174)<br/></td></tr><tr><td align="left">_172 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _173)</td></tr></table>>];
    bb55__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>_177 = &amp;_56<br/>_176 = &amp;(*_177)<br/></td></tr><tr><td align="left">_175 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _176)</td></tr></table>>];
    bb56__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_176)<br/>_171 = [move _172, move _175]<br/>StorageDead(_175)<br/>StorageDead(_172)<br/>_170 = &amp;_171<br/>_169 = &amp;(*_170)<br/>_168 = move _169 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">_163 = Arguments::&lt;'_&gt;::new_v1(move _164, move _168)</td></tr></table>>];
    bb57__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_168)<br/>StorageDead(_164)<br/></td></tr><tr><td align="left">_162 = format(move _163)</td></tr></table>>];
    bb58__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/>StorageDead(_177)<br/>StorageDead(_174)<br/>StorageDead(_171)<br/>StorageDead(_170)<br/>StorageDead(_166)<br/>_161 = move _162<br/>StorageDead(_162)<br/>_160 = &amp;_161<br/>_159 = &amp;(*_160)<br/></td></tr><tr><td align="left">_158 = &lt;String as Deref&gt;::deref(move _159)</td></tr></table>>];
    bb59__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_157 = &amp;(*_158)<br/>StorageDead(_159)<br/></td></tr><tr><td align="left">_156 = solana_program::log::sol_log(move _157)</td></tr></table>>];
    bb60__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/></td></tr><tr><td align="left">drop(_161)</td></tr></table>>];
    bb61__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>StorageDead(_160)<br/>StorageDead(_158)<br/>StorageDead(_156)<br/>StorageLive(_178)<br/>_178 = (const 0_u64, const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64, u64), error::ErrorCode&gt;::Ok(move _178)<br/>StorageDead(_178)<br/>StorageDead(_154)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">_153 = const ()<br/>StorageDead(_154)<br/>StorageDead(_153)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>_183 = _135<br/>StorageLive(_184)<br/>_184 = _18<br/>StorageLive(_185)<br/>_185 = _100<br/>StorageLive(_186)<br/>_186 = _114<br/></td></tr><tr><td align="left">_182 = calculate_fill_for_matched_orders(move _183, move _184, move _185, const _, move _186)</td></tr></table>>];
    bb63__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>StorageDead(_185)<br/>StorageDead(_184)<br/>StorageDead(_183)<br/></td></tr><tr><td align="left">_181 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _182)</td></tr></table>>];
    bb64__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_182)<br/>_187 = discriminant(_181)<br/></td></tr><tr><td align="left">switchInt(move _187)</td></tr></table>>];
    bb65__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageLive(_191)<br/>_191 = ((_181 as Continue).0: (u64, u64))<br/>_180 = _191<br/>StorageDead(_191)<br/>StorageLive(_179)<br/>_179 = (_180.0: u64)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>_194 = _179<br/>_193 = Eq(move _194, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _193)</td></tr></table>>];
    bb66__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageLive(_188)<br/>_188 = ((_181 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_190)<br/>_190 = _188<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _190)</td></tr></table>>];
    bb67__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_190)<br/>StorageDead(_188)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_194)<br/>StorageLive(_196)<br/>_196 = (const 0_u64, const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64, u64), error::ErrorCode&gt;::Ok(move _196)<br/>StorageDead(_196)<br/>StorageDead(_193)<br/>StorageDead(_192)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_194)<br/>_192 = const ()<br/>StorageDead(_193)<br/>StorageDead(_192)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>_200 = (*_1)<br/></td></tr><tr><td align="left">_199 = PerpMarket::get_sanitize_clamp_denominator(move _200)</td></tr></table>>];
    bb70__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/></td></tr><tr><td align="left">_198 = &lt;std::result::Result&lt;Option&lt;i64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _199)</td></tr></table>>];
    bb71__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_199)<br/>_201 = discriminant(_198)<br/></td></tr><tr><td align="left">switchInt(move _201)</td></tr></table>>];
    bb72__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_205)<br/>_205 = ((_198 as Continue).0: std::option::Option&lt;i64&gt;)<br/>_197 = _205<br/>StorageDead(_205)<br/>StorageDead(_198)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>_210 = &amp;mut ((*_1).1: state::perp_market::AMM)<br/>_209 = &amp;mut (*_210)<br/>StorageLive(_211)<br/>_211 = _19<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>_213 = _18<br/>_212 = Option::&lt;u64&gt;::Some(move _213)<br/>StorageDead(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>_215 = _52<br/>_214 = Option::&lt;controller::position::PositionDirection&gt;::Some(move _215)<br/>StorageDead(_215)<br/>StorageLive(_216)<br/>_216 = _197<br/></td></tr><tr><td align="left">_208 = update_mark_twap_from_estimates(move _209, move _211, move _212, move _214, move _216)</td></tr></table>>];
    bb73__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_202)<br/>_202 = ((_198 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_204)<br/>_204 = _202<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _204)</td></tr></table>>];
    bb74__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_204)<br/>StorageDead(_202)<br/>StorageDead(_198)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_216)<br/>StorageDead(_214)<br/>StorageDead(_212)<br/>StorageDead(_211)<br/>StorageDead(_209)<br/></td></tr><tr><td align="left">_207 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _208)</td></tr></table>>];
    bb76__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_208)<br/>_217 = discriminant(_207)<br/></td></tr><tr><td align="left">switchInt(move _217)</td></tr></table>>];
    bb77__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageLive(_221)<br/>_221 = ((_207 as Continue).0: u64)<br/>_206 = _221<br/>StorageDead(_221)<br/>StorageDead(_210)<br/>StorageDead(_207)<br/>StorageDead(_206)<br/>StorageLive(_222)<br/>_222 = const 0_u64<br/>StorageLive(_223)<br/>_223 = const 0_u64<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>_227 = &amp;mut (*_1)<br/>StorageLive(_228)<br/>_228 = _52<br/>StorageLive(_229)<br/>_229 = _18<br/>StorageLive(_230)<br/>_230 = _16<br/>StorageLive(_231)<br/>_231 = _179<br/>StorageLive(_232)<br/>_232 = _100<br/>StorageLive(_233)<br/>_233 = _135<br/>StorageLive(_234)<br/>StorageLive(_235)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>_238 = _4<br/>_239 = Len(((*_2).5: [state::user::Order; 32]))<br/>_240 = Lt(_238, _239)<br/></td></tr><tr><td align="left">assert(move _240, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _239, _238)</td></tr></table>>];
    bb78__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageLive(_218)<br/>_218 = ((_207 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_220)<br/>_220 = _218<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _220)</td></tr></table>>];
    bb79__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_220)<br/>StorageDead(_218)<br/>StorageDead(_210)<br/>StorageDead(_207)<br/>StorageDead(_206)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">_237 = ((*_2).5: [state::user::Order; 32])[_238]<br/>StorageLive(_241)<br/>_241 = _20<br/></td></tr><tr><td align="left">_236 = Order::has_limit_price(move _237, move _241)</td></tr></table>>];
    bb81__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_241)<br/>StorageDead(_237)<br/></td></tr><tr><td align="left">_235 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _236)</td></tr></table>>];
    bb82__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/>_242 = discriminant(_235)<br/></td></tr><tr><td align="left">switchInt(move _242)</td></tr></table>>];
    bb83__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageLive(_246)<br/>_246 = ((_235 as Continue).0: bool)<br/>_234 = _246<br/>StorageDead(_246)<br/></td></tr><tr><td align="left">_226 = calculate_amm_jit_liquidity(move _227, move _228, move _229, move _230, move _231, move _232, move _233, move _234)</td></tr></table>>];
    bb84__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageLive(_243)<br/>_243 = ((_235 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_245)<br/>_245 = _243<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _245)</td></tr></table>>];
    bb85__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/>StorageDead(_243)<br/>StorageDead(_234)<br/>StorageDead(_233)<br/>StorageDead(_232)<br/>StorageDead(_231)<br/>StorageDead(_230)<br/>StorageDead(_229)<br/>StorageDead(_228)<br/>StorageDead(_227)<br/>StorageDead(_226)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb86__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_234)<br/>StorageDead(_233)<br/>StorageDead(_232)<br/>StorageDead(_231)<br/>StorageDead(_230)<br/>StorageDead(_229)<br/>StorageDead(_228)<br/>StorageDead(_227)<br/></td></tr><tr><td align="left">_225 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _226)</td></tr></table>>];
    bb87__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_226)<br/>_247 = discriminant(_225)<br/></td></tr><tr><td align="left">switchInt(move _247)</td></tr></table>>];
    bb88__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_251)<br/>_251 = ((_225 as Continue).0: u64)<br/>_224 = _251<br/>StorageDead(_251)<br/>StorageDead(_238)<br/>StorageDead(_235)<br/>StorageDead(_225)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>_254 = _224<br/>_253 = Gt(move _254, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _253)</td></tr></table>>];
    bb89__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageLive(_248)<br/>_248 = ((_225 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_250)<br/>_250 = _248<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _250)</td></tr></table>>];
    bb90__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_250)<br/>StorageDead(_248)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb91__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_254)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>StorageLive(_260)<br/>_260 = &amp;mut (*_2)<br/>StorageLive(_261)<br/>_261 = &amp;mut (*_3)<br/>StorageLive(_262)<br/>_262 = _4<br/>StorageLive(_263)<br/>_263 = &amp;mut (*_1)<br/>StorageLive(_264)<br/>_264 = &amp;mut (*_22)<br/>StorageLive(_265)<br/>_265 = _15<br/>StorageLive(_266)<br/>_266 = _19<br/>StorageLive(_267)<br/>_267 = _20<br/>StorageLive(_268)<br/>_268 = &amp;(*_5)<br/>StorageLive(_269)<br/>_269 = &amp;(*_12)<br/>StorageLive(_270)<br/>_270 = &amp;mut (*_10)<br/>StorageLive(_271)<br/>_271 = &amp;mut (*_11)<br/>StorageLive(_272)<br/>StorageLive(_273)<br/>StorageLive(_274)<br/>_274 = Option::&lt;&amp;mut User&gt;::None<br/>_273 = &amp;mut _274<br/>_272 = &amp;mut (*_273)<br/>StorageLive(_275)<br/>StorageLive(_276)<br/>StorageLive(_277)<br/>_277 = Option::&lt;&amp;mut UserStats&gt;::None<br/>_276 = &amp;mut _277<br/>_275 = &amp;mut (*_276)<br/>StorageLive(_278)<br/>StorageLive(_279)<br/>StorageLive(_280)<br/>_280 = Option::&lt;&amp;mut User&gt;::None<br/>_279 = &amp;mut _280<br/>_278 = &amp;mut (*_279)<br/>StorageLive(_281)<br/>StorageLive(_282)<br/>StorageLive(_283)<br/>_283 = Option::&lt;&amp;mut UserStats&gt;::None<br/>_282 = &amp;mut _283<br/>_281 = &amp;mut (*_282)<br/>StorageLive(_284)<br/>_284 = &amp;(*_21)<br/>StorageLive(_285)<br/>_285 = _17<br/>StorageLive(_286)<br/>StorageLive(_287)<br/>_287 = _224<br/>_286 = Option::&lt;u64&gt;::Some(move _287)<br/>StorageDead(_287)<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>_289 = _18<br/>_288 = Option::&lt;u64&gt;::Some(move _289)<br/>StorageDead(_289)<br/>StorageLive(_290)<br/>_290 = _23<br/></td></tr><tr><td align="left">_259 = fulfill_perp_order_with_amm(move _260, move _261, move _262, move _263, move _264, move _265, move _266, move _267, move _268, move _269, move _270, move _271, move _272, move _275, move _278, move _281, move _284, move _285, move _286, move _288, move _290)</td></tr></table>>];
    bb92__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_254)<br/>_252 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_290)<br/>StorageDead(_288)<br/>StorageDead(_286)<br/>StorageDead(_285)<br/>StorageDead(_284)<br/>StorageDead(_281)<br/>StorageDead(_278)<br/>StorageDead(_275)<br/>StorageDead(_272)<br/>StorageDead(_271)<br/>StorageDead(_270)<br/>StorageDead(_269)<br/>StorageDead(_268)<br/>StorageDead(_267)<br/>StorageDead(_266)<br/>StorageDead(_265)<br/>StorageDead(_264)<br/>StorageDead(_263)<br/>StorageDead(_262)<br/>StorageDead(_261)<br/>StorageDead(_260)<br/></td></tr><tr><td align="left">_258 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _259)</td></tr></table>>];
    bb94__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_259)<br/>_291 = discriminant(_258)<br/></td></tr><tr><td align="left">switchInt(move _291)</td></tr></table>>];
    bb95__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageLive(_295)<br/>_295 = ((_258 as Continue).0: (u64, u64))<br/>_257 = _295<br/>StorageDead(_295)<br/>StorageLive(_255)<br/>_255 = (_257.0: u64)<br/>StorageLive(_256)<br/>_256 = (_257.1: u64)<br/>StorageDead(_283)<br/>StorageDead(_282)<br/>StorageDead(_280)<br/>StorageDead(_279)<br/>StorageDead(_277)<br/>StorageDead(_276)<br/>StorageDead(_274)<br/>StorageDead(_273)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageLive(_296)<br/>_296 = _255<br/>_223 = move _296<br/>StorageDead(_296)<br/>StorageLive(_297)<br/>_297 = _256<br/>_222 = move _297<br/>_252 = const ()<br/>StorageDead(_297)<br/>StorageDead(_256)<br/>StorageDead(_255)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageLive(_292)<br/>_292 = ((_258 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_294)<br/>_294 = _292<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _294)</td></tr></table>>];
    bb97__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_294)<br/>StorageDead(_292)<br/>StorageDead(_283)<br/>StorageDead(_282)<br/>StorageDead(_280)<br/>StorageDead(_279)<br/>StorageDead(_277)<br/>StorageDead(_276)<br/>StorageDead(_274)<br/>StorageDead(_273)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageDead(_253)<br/>StorageDead(_252)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb98__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_253)<br/>StorageDead(_252)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>_304 = &amp;(*_2)<br/>StorageLive(_305)<br/>_305 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_303 = User::get_perp_position(move _304, move _305)</td></tr></table>>];
    bb99__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_305)<br/>StorageDead(_304)<br/></td></tr><tr><td align="left">_302 = &lt;std::result::Result&lt;&amp;PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _303)</td></tr></table>>];
    bb100__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_303)<br/>_306 = discriminant(_302)<br/></td></tr><tr><td align="left">switchInt(move _306)</td></tr></table>>];
    bb101__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_310)<br/>_310 = ((_302 as Continue).0: &amp;state::user::PerpPosition)<br/>_301 = _310<br/>StorageDead(_310)<br/>StorageDead(_302)<br/>StorageLive(_311)<br/>_311 = ((*_301).1: i64)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>_313 = &amp;(*_301)<br/>StorageLive(_314)<br/>_314 = _52<br/></td></tr><tr><td align="left">_312 = PerpPosition::get_existing_position_params_for_order_action(move _313, move _314)</td></tr></table>>];
    bb102__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageLive(_307)<br/>_307 = ((_302 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_309)<br/>_309 = _307<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _309)</td></tr></table>>];
    bb103__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_309)<br/>StorageDead(_307)<br/>StorageDead(_302)<br/>StorageDead(_301)<br/>StorageDead(_300)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb104__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/>StorageDead(_313)<br/>_300 = (move _311, move _312)<br/>StorageDead(_312)<br/>StorageDead(_311)<br/>StorageDead(_301)<br/>StorageLive(_298)<br/>_298 = (_300.0: i64)<br/>StorageLive(_299)<br/>_299 = (_300.1: std::option::Option&lt;(u64, u64)&gt;)<br/>StorageDead(_300)<br/>StorageLive(_315)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>_319 = _4<br/>_320 = Len(((*_2).5: [state::user::Order; 32]))<br/>_321 = Lt(_319, _320)<br/></td></tr><tr><td align="left">assert(move _321, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _320, _319)</td></tr></table>>];
    bb105__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">_318 = &amp;((*_2).5: [state::user::Order; 32])[_319]<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>_323 = _298<br/>_322 = Option::&lt;i64&gt;::Some(move _323)<br/>StorageDead(_323)<br/></td></tr><tr><td align="left">_317 = Order::get_base_asset_amount_unfilled(move _318, move _322)</td></tr></table>>];
    bb106__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_322)<br/>StorageDead(_318)<br/></td></tr><tr><td align="left">_316 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _317)</td></tr></table>>];
    bb107__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_317)<br/>_324 = discriminant(_316)<br/></td></tr><tr><td align="left">switchInt(move _324)</td></tr></table>>];
    bb108__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageLive(_328)<br/>_328 = ((_316 as Continue).0: u64)<br/>_315 = _328<br/>StorageDead(_328)<br/>StorageDead(_319)<br/>StorageDead(_316)<br/>StorageLive(_331)<br/>StorageLive(_332)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>_334 = _135<br/>StorageLive(_335)<br/>_335 = _18<br/>StorageLive(_336)<br/>_336 = _315<br/>StorageLive(_337)<br/>_337 = _114<br/></td></tr><tr><td align="left">_333 = calculate_fill_for_matched_orders(move _334, move _335, move _336, const _, move _337)</td></tr></table>>];
    bb109__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageLive(_325)<br/>_325 = ((_316 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_327)<br/>_327 = _325<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _327)</td></tr></table>>];
    bb110__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_327)<br/>StorageDead(_325)<br/>StorageDead(_319)<br/>StorageDead(_316)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb111__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_337)<br/>StorageDead(_336)<br/>StorageDead(_335)<br/>StorageDead(_334)<br/></td></tr><tr><td align="left">_332 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _333)</td></tr></table>>];
    bb112__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_333)<br/>_338 = discriminant(_332)<br/></td></tr><tr><td align="left">switchInt(move _338)</td></tr></table>>];
    bb113__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageLive(_342)<br/>_342 = ((_332 as Continue).0: (u64, u64))<br/>_331 = _342<br/>StorageDead(_342)<br/>StorageLive(_329)<br/>_329 = (_331.0: u64)<br/>StorageLive(_330)<br/>_330 = (_331.1: u64)<br/>StorageDead(_332)<br/>StorageDead(_331)<br/>StorageLive(_343)<br/>StorageLive(_344)<br/>StorageLive(_345)<br/>StorageLive(_346)<br/>_346 = _330<br/>StorageLive(_347)<br/>_347 = _329<br/>StorageLive(_348)<br/>_348 = _52<br/>StorageLive(_349)<br/>_349 = _56<br/></td></tr><tr><td align="left">_345 = math::orders::validate_fill_price(move _346, move _347, const _, move _348, move _349, const true)</td></tr></table>>];
    bb114__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageLive(_339)<br/>_339 = ((_332 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_341)<br/>_341 = _339<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _341)</td></tr></table>>];
    bb115__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_341)<br/>StorageDead(_339)<br/>StorageDead(_332)<br/>StorageDead(_331)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb116__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_349)<br/>StorageDead(_348)<br/>StorageDead(_347)<br/>StorageDead(_346)<br/></td></tr><tr><td align="left">_344 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _345)</td></tr></table>>];
    bb117__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_345)<br/>_350 = discriminant(_344)<br/></td></tr><tr><td align="left">switchInt(move _350)</td></tr></table>>];
    bb118__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageLive(_354)<br/>_354 = ((_344 as Continue).0: ())<br/>_343 = _354<br/>StorageDead(_354)<br/>StorageDead(_344)<br/>StorageDead(_343)<br/>StorageLive(_355)<br/>StorageLive(_356)<br/>StorageLive(_357)<br/>StorageLive(_358)<br/>_358 = _330<br/>StorageLive(_359)<br/>_359 = _329<br/>StorageLive(_360)<br/>_360 = _114<br/>StorageLive(_361)<br/>_361 = _18<br/></td></tr><tr><td align="left">_357 = math::orders::validate_fill_price(move _358, move _359, const _, move _360, move _361, const false)</td></tr></table>>];
    bb119__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageLive(_351)<br/>_351 = ((_344 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_353)<br/>_353 = _351<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _353)</td></tr></table>>];
    bb120__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_353)<br/>StorageDead(_351)<br/>StorageDead(_344)<br/>StorageDead(_343)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/>StorageDead(_360)<br/>StorageDead(_359)<br/>StorageDead(_358)<br/></td></tr><tr><td align="left">_356 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _357)</td></tr></table>>];
    bb122__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_357)<br/>_362 = discriminant(_356)<br/></td></tr><tr><td align="left">switchInt(move _362)</td></tr></table>>];
    bb123__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageLive(_366)<br/>_366 = ((_356 as Continue).0: ())<br/>_355 = _366<br/>StorageDead(_366)<br/>StorageDead(_356)<br/>StorageDead(_355)<br/>StorageLive(_367)<br/>StorageLive(_368)<br/>StorageLive(_369)<br/>StorageLive(_370)<br/>_370 = _223<br/>StorageLive(_371)<br/>_371 = _329<br/></td></tr><tr><td align="left">_369 = &lt;u64 as SafeMath&gt;::safe_add(move _370, move _371)</td></tr></table>>];
    bb124__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_363)<br/>_363 = ((_356 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_365)<br/>_365 = _363<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _365)</td></tr></table>>];
    bb125__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_365)<br/>StorageDead(_363)<br/>StorageDead(_356)<br/>StorageDead(_355)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb126__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_371)<br/>StorageDead(_370)<br/></td></tr><tr><td align="left">_368 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _369)</td></tr></table>>];
    bb127__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_369)<br/>_372 = discriminant(_368)<br/></td></tr><tr><td align="left">switchInt(move _372)</td></tr></table>>];
    bb128__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageLive(_376)<br/>_376 = ((_368 as Continue).0: u64)<br/>_367 = _376<br/>StorageDead(_376)<br/>_223 = move _367<br/>StorageDead(_367)<br/>StorageDead(_368)<br/>StorageLive(_377)<br/>StorageLive(_378)<br/>StorageLive(_379)<br/>StorageLive(_380)<br/>_380 = _222<br/>StorageLive(_381)<br/>_381 = _330<br/></td></tr><tr><td align="left">_379 = &lt;u64 as SafeMath&gt;::safe_add(move _380, move _381)</td></tr></table>>];
    bb129__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageLive(_373)<br/>_373 = ((_368 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_375)<br/>_375 = _373<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _375)</td></tr></table>>];
    bb130__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_375)<br/>StorageDead(_373)<br/>StorageDead(_367)<br/>StorageDead(_368)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb131__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_381)<br/>StorageDead(_380)<br/></td></tr><tr><td align="left">_378 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _379)</td></tr></table>>];
    bb132__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_379)<br/>_382 = discriminant(_378)<br/></td></tr><tr><td align="left">switchInt(move _382)</td></tr></table>>];
    bb133__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageLive(_386)<br/>_386 = ((_378 as Continue).0: u64)<br/>_377 = _386<br/>StorageDead(_386)<br/>_222 = move _377<br/>StorageDead(_377)<br/>StorageDead(_378)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>_391 = &amp;((*_6).4: [state::user::PerpPosition; 8])<br/>_390 = &amp;(*_391)<br/>StorageLive(_392)<br/>StorageLive(_393)<br/>_393 = _8<br/>_394 = Len(((*_6).5: [state::user::Order; 32]))<br/>_395 = Lt(_393, _394)<br/></td></tr><tr><td align="left">assert(move _395, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _394, _393)</td></tr></table>>];
    bb134__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageLive(_383)<br/>_383 = ((_378 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_385)<br/>_385 = _383<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _385)</td></tr></table>>];
    bb135__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_385)<br/>StorageDead(_383)<br/>StorageDead(_377)<br/>StorageDead(_378)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb136__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">_392 = (((*_6).5: [state::user::Order; 32])[_393].11: u16)<br/></td></tr><tr><td align="left">_389 = get_position_index(move _390, move _392)</td></tr></table>>];
    bb137__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>StorageDead(_390)<br/></td></tr><tr><td align="left">_388 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _389)</td></tr></table>>];
    bb138__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_389)<br/>_396 = discriminant(_388)<br/></td></tr><tr><td align="left">switchInt(move _396)</td></tr></table>>];
    bb139__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_400)<br/>_400 = ((_388 as Continue).0: usize)<br/>_387 = _400<br/>StorageDead(_400)<br/>StorageDead(_393)<br/>StorageDead(_391)<br/>StorageDead(_388)<br/>StorageLive(_401)<br/>StorageLive(_402)<br/>StorageLive(_403)<br/>StorageLive(_404)<br/>_404 = _329<br/>StorageLive(_405)<br/>_405 = _330<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>_407 = _8<br/>_408 = Len(((*_6).5: [state::user::Order; 32]))<br/>_409 = Lt(_407, _408)<br/></td></tr><tr><td align="left">assert(move _409, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _408, _407)</td></tr></table>>];
    bb140__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageLive(_397)<br/>_397 = ((_388 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_399)<br/>_399 = _397<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _399)</td></tr></table>>];
    bb141__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_399)<br/>StorageDead(_397)<br/>StorageDead(_393)<br/>StorageDead(_391)<br/>StorageDead(_388)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">_406 = (((*_6).5: [state::user::Order; 32])[_407].17: controller::position::PositionDirection)<br/></td></tr><tr><td align="left">_403 = math::orders::get_position_delta_for_fill(move _404, move _405, move _406)</td></tr></table>>];
    bb143__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_406)<br/>StorageDead(_405)<br/>StorageDead(_404)<br/></td></tr><tr><td align="left">_402 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as Try&gt;::branch(move _403)</td></tr></table>>];
    bb144__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_403)<br/>_410 = discriminant(_402)<br/></td></tr><tr><td align="left">switchInt(move _410)</td></tr></table>>];
    bb145__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageLive(_414)<br/>_414 = move ((_402 as Continue).0: controller::position::PositionDelta)<br/>_401 = move _414<br/>StorageDead(_414)<br/>StorageDead(_407)<br/>StorageDead(_402)<br/>StorageLive(_415)<br/>StorageLive(_416)<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>StorageLive(_419)<br/>StorageLive(_420)<br/>_420 = _387<br/>_421 = Len(((*_6).4: [state::user::PerpPosition; 8]))<br/>_422 = Lt(_420, _421)<br/></td></tr><tr><td align="left">assert(move _422, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _421, _420)</td></tr></table>>];
    bb146__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageLive(_411)<br/>_411 = ((_402 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_413)<br/>_413 = _411<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _413)</td></tr></table>>];
    bb147__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_413)<br/>StorageDead(_411)<br/>StorageDead(_407)<br/>StorageDead(_402)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb148__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">_419 = &amp;mut ((*_6).4: [state::user::PerpPosition; 8])[_420]<br/>_418 = &amp;mut (*_419)<br/>StorageLive(_423)<br/>_423 = &amp;mut (*_1)<br/>StorageLive(_424)<br/>StorageLive(_425)<br/>_425 = &amp;_401<br/>_424 = &amp;(*_425)<br/></td></tr><tr><td align="left">_417 = update_position_and_market(move _418, move _423, move _424)</td></tr></table>>];
    bb149__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_424)<br/>StorageDead(_423)<br/>StorageDead(_418)<br/></td></tr><tr><td align="left">_416 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _417)</td></tr></table>>];
    bb150__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_417)<br/>_426 = discriminant(_416)<br/></td></tr><tr><td align="left">switchInt(move _426)</td></tr></table>>];
    bb151__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageLive(_430)<br/>_430 = ((_416 as Continue).0: i64)<br/>_415 = _430<br/>StorageDead(_430)<br/>StorageDead(_425)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/>StorageDead(_416)<br/>StorageDead(_415)<br/>StorageLive(_431)<br/>_432 = discriminant((*_7))<br/></td></tr><tr><td align="left">switchInt(move _432)</td></tr></table>>];
    bb152__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageLive(_427)<br/>_427 = ((_416 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_429)<br/>_429 = _427<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _429)</td></tr></table>>];
    bb153__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageDead(_429)<br/>StorageDead(_427)<br/>StorageDead(_425)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/>StorageDead(_416)<br/>StorageDead(_415)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb154__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageLive(_446)<br/>StorageLive(_447)<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>_449 = &amp;mut (*_3)<br/>StorageLive(_450)<br/>_450 = ((*_1).30: u8)<br/>StorageLive(_451)<br/>_451 = _330<br/>StorageLive(_452)<br/>_452 = _19<br/></td></tr><tr><td align="left">_448 = UserStats::update_maker_volume_30d(move _449, move _450, move _451, move _452)</td></tr></table>>];
    bb155__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageLive(_433)<br/>_433 = &amp;mut (((*_7) as Some).0: &amp;mut state::user::UserStats)<br/>StorageLive(_434)<br/>StorageLive(_435)<br/>StorageLive(_436)<br/>StorageLive(_437)<br/>_1102 = deref_copy (*_433)<br/>_437 = &amp;mut (*_1102)<br/>StorageLive(_438)<br/>_438 = ((*_1).30: u8)<br/>StorageLive(_439)<br/>_439 = _330<br/>StorageLive(_440)<br/>_440 = _19<br/></td></tr><tr><td align="left">_436 = UserStats::update_maker_volume_30d(move _437, move _438, move _439, move _440)</td></tr></table>>];
    bb156__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_440)<br/>StorageDead(_439)<br/>StorageDead(_438)<br/>StorageDead(_437)<br/></td></tr><tr><td align="left">_435 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _436)</td></tr></table>>];
    bb157__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_436)<br/>_441 = discriminant(_435)<br/></td></tr><tr><td align="left">switchInt(move _441)</td></tr></table>>];
    bb158__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageLive(_445)<br/>_445 = ((_435 as Continue).0: ())<br/>_434 = _445<br/>StorageDead(_445)<br/>StorageDead(_435)<br/>StorageDead(_434)<br/>_431 = const ()<br/>StorageDead(_433)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb159__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_442)<br/>_442 = ((_435 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_444)<br/>_444 = _442<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _444)</td></tr></table>>];
    bb160__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageDead(_444)<br/>StorageDead(_442)<br/>StorageDead(_435)<br/>StorageDead(_434)<br/>StorageDead(_433)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb161__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_451)<br/>StorageDead(_450)<br/>StorageDead(_449)<br/></td></tr><tr><td align="left">_447 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _448)</td></tr></table>>];
    bb162__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_448)<br/>_453 = discriminant(_447)<br/></td></tr><tr><td align="left">switchInt(move _453)</td></tr></table>>];
    bb163__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageLive(_457)<br/>_457 = ((_447 as Continue).0: ())<br/>_446 = _457<br/>StorageDead(_457)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/>_431 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb164__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageLive(_454)<br/>_454 = ((_447 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_456)<br/>_456 = _454<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _456)</td></tr></table>>];
    bb165__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_456)<br/>StorageDead(_454)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb166__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_431)<br/>StorageLive(_458)<br/>StorageLive(_459)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>StorageLive(_462)<br/>_462 = &amp;((*_2).4: [state::user::PerpPosition; 8])<br/>_461 = &amp;(*_462)<br/>StorageLive(_463)<br/>StorageLive(_464)<br/>_464 = _4<br/>_465 = Len(((*_2).5: [state::user::Order; 32]))<br/>_466 = Lt(_464, _465)<br/></td></tr><tr><td align="left">assert(move _466, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _465, _464)</td></tr></table>>];
    bb167__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">_463 = (((*_2).5: [state::user::Order; 32])[_464].11: u16)<br/></td></tr><tr><td align="left">_460 = get_position_index(move _461, move _463)</td></tr></table>>];
    bb168__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_463)<br/>StorageDead(_461)<br/></td></tr><tr><td align="left">_459 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _460)</td></tr></table>>];
    bb169__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageDead(_460)<br/>_467 = discriminant(_459)<br/></td></tr><tr><td align="left">switchInt(move _467)</td></tr></table>>];
    bb170__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageLive(_471)<br/>_471 = ((_459 as Continue).0: usize)<br/>_458 = _471<br/>StorageDead(_471)<br/>StorageDead(_464)<br/>StorageDead(_462)<br/>StorageDead(_459)<br/>StorageLive(_472)<br/>StorageLive(_473)<br/>StorageLive(_474)<br/>StorageLive(_475)<br/>_475 = _329<br/>StorageLive(_476)<br/>_476 = _330<br/>StorageLive(_477)<br/>StorageLive(_478)<br/>_478 = _4<br/>_479 = Len(((*_2).5: [state::user::Order; 32]))<br/>_480 = Lt(_478, _479)<br/></td></tr><tr><td align="left">assert(move _480, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _479, _478)</td></tr></table>>];
    bb171__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageLive(_468)<br/>_468 = ((_459 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_470)<br/>_470 = _468<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _470)</td></tr></table>>];
    bb172__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_470)<br/>StorageDead(_468)<br/>StorageDead(_464)<br/>StorageDead(_462)<br/>StorageDead(_459)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb173__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">_477 = (((*_2).5: [state::user::Order; 32])[_478].17: controller::position::PositionDirection)<br/></td></tr><tr><td align="left">_474 = math::orders::get_position_delta_for_fill(move _475, move _476, move _477)</td></tr></table>>];
    bb174__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_475)<br/></td></tr><tr><td align="left">_473 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as Try&gt;::branch(move _474)</td></tr></table>>];
    bb175__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageDead(_474)<br/>_481 = discriminant(_473)<br/></td></tr><tr><td align="left">switchInt(move _481)</td></tr></table>>];
    bb176__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageLive(_485)<br/>_485 = move ((_473 as Continue).0: controller::position::PositionDelta)<br/>_472 = move _485<br/>StorageDead(_485)<br/>StorageDead(_478)<br/>StorageDead(_473)<br/>StorageLive(_486)<br/>StorageLive(_487)<br/>StorageLive(_488)<br/>StorageLive(_489)<br/>StorageLive(_490)<br/>StorageLive(_491)<br/>_491 = _458<br/>_492 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_493 = Lt(_491, _492)<br/></td></tr><tr><td align="left">assert(move _493, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _492, _491)</td></tr></table>>];
    bb177__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageLive(_482)<br/>_482 = ((_473 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_484)<br/>_484 = _482<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _484)</td></tr></table>>];
    bb178__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageDead(_484)<br/>StorageDead(_482)<br/>StorageDead(_478)<br/>StorageDead(_473)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb179__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">_490 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_491]<br/>_489 = &amp;mut (*_490)<br/>StorageLive(_494)<br/>_494 = &amp;mut (*_1)<br/>StorageLive(_495)<br/>StorageLive(_496)<br/>_496 = &amp;_472<br/>_495 = &amp;(*_496)<br/></td></tr><tr><td align="left">_488 = update_position_and_market(move _489, move _494, move _495)</td></tr></table>>];
    bb180__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_495)<br/>StorageDead(_494)<br/>StorageDead(_489)<br/></td></tr><tr><td align="left">_487 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _488)</td></tr></table>>];
    bb181__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_488)<br/>_497 = discriminant(_487)<br/></td></tr><tr><td align="left">switchInt(move _497)</td></tr></table>>];
    bb182__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageLive(_501)<br/>_501 = ((_487 as Continue).0: i64)<br/>_486 = _501<br/>StorageDead(_501)<br/>StorageDead(_496)<br/>StorageDead(_491)<br/>StorageDead(_490)<br/>StorageDead(_487)<br/>StorageDead(_486)<br/>StorageLive(_502)<br/>StorageLive(_503)<br/>StorageLive(_504)<br/>StorageLive(_505)<br/>_505 = &amp;mut (*_3)<br/>StorageLive(_506)<br/>_506 = ((*_1).29: u8)<br/>StorageLive(_507)<br/>_507 = _330<br/>StorageLive(_508)<br/>_508 = _19<br/></td></tr><tr><td align="left">_504 = UserStats::update_taker_volume_30d(move _505, move _506, move _507, move _508)</td></tr></table>>];
    bb183__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageLive(_498)<br/>_498 = ((_487 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_500)<br/>_500 = _498<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _500)</td></tr></table>>];
    bb184__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageDead(_500)<br/>StorageDead(_498)<br/>StorageDead(_496)<br/>StorageDead(_491)<br/>StorageDead(_490)<br/>StorageDead(_487)<br/>StorageDead(_486)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb185__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_508)<br/>StorageDead(_507)<br/>StorageDead(_506)<br/>StorageDead(_505)<br/></td></tr><tr><td align="left">_503 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _504)</td></tr></table>>];
    bb186__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_504)<br/>_509 = discriminant(_503)<br/></td></tr><tr><td align="left">switchInt(move _509)</td></tr></table>>];
    bb187__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageLive(_513)<br/>_513 = ((_503 as Continue).0: ())<br/>_502 = _513<br/>StorageDead(_513)<br/>StorageDead(_503)<br/>StorageDead(_502)<br/>StorageLive(_514)<br/>StorageLive(_515)<br/>_515 = &amp;mut (*_13)<br/>StorageLive(_516)<br/>_516 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_514 = can_reward_user_with_perp_pnl(move _515, move _516)</td></tr></table>>];
    bb188__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageLive(_510)<br/>_510 = ((_503 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_512)<br/>_512 = _510<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _512)</td></tr></table>>];
    bb189__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_512)<br/>StorageDead(_510)<br/>StorageDead(_503)<br/>StorageDead(_502)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb190__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_516)<br/>StorageDead(_515)<br/>StorageLive(_517)<br/>StorageLive(_518)<br/>_518 = &amp;mut (*_10)<br/>StorageLive(_519)<br/>_519 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_517 = can_reward_user_with_perp_pnl(move _518, move _519)</td></tr></table>>];
    bb191__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_519)<br/>StorageDead(_518)<br/>StorageLive(_520)<br/>StorageLive(_521)<br/>_521 = _517<br/></td></tr><tr><td align="left">switchInt(move _521)</td></tr></table>>];
    bb192__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageLive(_522)<br/>StorageLive(_523)<br/>StorageLive(_524)<br/>_524 = _18<br/>StorageLive(_525)<br/>_525 = _114<br/>StorageLive(_526)<br/>_526 = _38<br/></td></tr><tr><td align="left">_523 = calculate_filler_multiplier_for_matched_orders(move _524, move _525, move _526)</td></tr></table>>];
    bb193__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageDead(_526)<br/>StorageDead(_525)<br/>StorageDead(_524)<br/></td></tr><tr><td align="left">_522 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _523)</td></tr></table>>];
    bb194__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageDead(_523)<br/>_527 = discriminant(_522)<br/></td></tr><tr><td align="left">switchInt(move _527)</td></tr></table>>];
    bb195__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageLive(_531)<br/>_531 = ((_522 as Continue).0: u64)<br/>_520 = _531<br/>StorageDead(_531)<br/>StorageDead(_522)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb196__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageLive(_528)<br/>_528 = ((_522 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_530)<br/>_530 = _528<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _530)</td></tr></table>>];
    bb197__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_530)<br/>StorageDead(_528)<br/>StorageDead(_522)<br/>StorageDead(_521)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb198__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">_520 = const 0_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb199__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageDead(_521)<br/>StorageLive(_538)<br/>StorageLive(_539)<br/>StorageLive(_540)<br/>StorageLive(_541)<br/>_541 = &amp;(*_3)<br/>StorageLive(_542)<br/>_542 = &amp;(*_7)<br/>StorageLive(_543)<br/>_543 = _330<br/>StorageLive(_544)<br/>_544 = &amp;(*_21)<br/>StorageLive(_545)<br/>StorageLive(_546)<br/>_546 = _4<br/>_547 = Len(((*_2).5: [state::user::Order; 32]))<br/>_548 = Lt(_546, _547)<br/></td></tr><tr><td align="left">assert(move _548, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _547, _546)</td></tr></table>>];
    bb200__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">_545 = (((*_2).5: [state::user::Order; 32])[_546].0: u64)<br/>StorageLive(_549)<br/>_549 = _20<br/>StorageLive(_550)<br/>_550 = _520<br/>StorageLive(_551)<br/>_551 = _514<br/>StorageLive(_552)<br/>_552 = &amp;(*_14)<br/>StorageLive(_553)<br/>StorageLive(_554)<br/>_1100 = const _<br/>_554 = &amp;(*_1100)<br/>_553 = &amp;(*_554)<br/>StorageLive(_556)<br/>_556 = ((*_1).27: i16)<br/>StorageLive(_557)<br/>StorageLive(_558)<br/>_558 = &amp;(*_2)<br/>StorageLive(_559)<br/>_559 = math::margin::MarginRequirementType::Initial<br/></td></tr><tr><td align="left">_557 = User::is_high_leverage_mode(move _558, move _559)</td></tr></table>>];
    bb201__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_559)<br/>StorageDead(_558)<br/></td></tr><tr><td align="left">_540 = calculate_fee_for_fulfillment_with_match(move _541, move _542, move _543, move _544, move _545, move _549, move _550, move _551, move _552, move _553, move _556, move _557)</td></tr></table>>];
    bb202__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_557)<br/>StorageDead(_556)<br/>StorageDead(_553)<br/>StorageDead(_552)<br/>StorageDead(_551)<br/>StorageDead(_550)<br/>StorageDead(_549)<br/>StorageDead(_545)<br/>StorageDead(_544)<br/>StorageDead(_543)<br/>StorageDead(_542)<br/>StorageDead(_541)<br/></td></tr><tr><td align="left">_539 = &lt;std::result::Result&lt;FillFees, error::ErrorCode&gt; as Try&gt;::branch(move _540)</td></tr></table>>];
    bb203__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_540)<br/>_560 = discriminant(_539)<br/></td></tr><tr><td align="left">switchInt(move _560)</td></tr></table>>];
    bb204__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageLive(_564)<br/>_564 = move ((_539 as Continue).0: math::fees::FillFees)<br/>_538 = move _564<br/>StorageDead(_564)<br/>StorageLive(_532)<br/>_532 = (_538.0: u64)<br/>StorageLive(_533)<br/>_533 = (_538.1: u64)<br/>StorageLive(_534)<br/>_534 = (_538.2: i64)<br/>StorageLive(_535)<br/>_535 = (_538.4: u64)<br/>StorageLive(_536)<br/>_536 = (_538.5: u64)<br/>StorageLive(_537)<br/>_537 = (_538.6: u64)<br/>StorageDead(_554)<br/>StorageDead(_546)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/>StorageLive(_565)<br/>StorageLive(_566)<br/>StorageLive(_567)<br/>StorageLive(_568)<br/>_568 = (((*_1).1: state::perp_market::AMM).28: i128)<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>StorageLive(_572)<br/>_572 = _534<br/></td></tr><tr><td align="left">_571 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _572)</td></tr></table>>];
    bb205__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_561)<br/>_561 = ((_539 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_563)<br/>_563 = _561<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _563)</td></tr></table>>];
    bb206__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_563)<br/>StorageDead(_561)<br/>StorageDead(_554)<br/>StorageDead(_546)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_572)<br/></td></tr><tr><td align="left">_570 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _571)</td></tr></table>>];
    bb208__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_571)<br/>_573 = discriminant(_570)<br/></td></tr><tr><td align="left">switchInt(move _573)</td></tr></table>>];
    bb209__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageLive(_577)<br/>_577 = ((_570 as Continue).0: i128)<br/>_569 = _577<br/>StorageDead(_577)<br/></td></tr><tr><td align="left">_567 = &lt;i128 as SafeMath&gt;::safe_add(move _568, move _569)</td></tr></table>>];
    bb210__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_574)<br/>_574 = ((_570 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_576)<br/>_576 = _574<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _576)</td></tr></table>>];
    bb211__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageDead(_576)<br/>StorageDead(_574)<br/>StorageDead(_569)<br/>StorageDead(_568)<br/>StorageDead(_567)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb212__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_569)<br/>StorageDead(_568)<br/></td></tr><tr><td align="left">_566 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _567)</td></tr></table>>];
    bb213__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_567)<br/>_578 = discriminant(_566)<br/></td></tr><tr><td align="left">switchInt(move _578)</td></tr></table>>];
    bb214__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageLive(_582)<br/>_582 = ((_566 as Continue).0: i128)<br/>_565 = _582<br/>StorageDead(_582)<br/>(((*_1).1: state::perp_market::AMM).28: i128) = move _565<br/>StorageDead(_565)<br/>StorageDead(_570)<br/>StorageDead(_566)<br/>StorageLive(_583)<br/>StorageLive(_584)<br/>StorageLive(_585)<br/>StorageLive(_586)<br/>_586 = (((*_1).1: state::perp_market::AMM).30: u128)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>StorageLive(_589)<br/>StorageLive(_590)<br/>_590 = _534<br/></td></tr><tr><td align="left">_589 = &lt;i64 as Cast&gt;::cast::&lt;u128&gt;(move _590)</td></tr></table>>];
    bb215__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageLive(_579)<br/>_579 = ((_566 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_581)<br/>_581 = _579<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _581)</td></tr></table>>];
    bb216__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_581)<br/>StorageDead(_579)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb217__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_590)<br/></td></tr><tr><td align="left">_588 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _589)</td></tr></table>>];
    bb218__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageDead(_589)<br/>_591 = discriminant(_588)<br/></td></tr><tr><td align="left">switchInt(move _591)</td></tr></table>>];
    bb219__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageLive(_595)<br/>_595 = ((_588 as Continue).0: u128)<br/>_587 = _595<br/>StorageDead(_595)<br/></td></tr><tr><td align="left">_585 = &lt;u128 as SafeMath&gt;::safe_add(move _586, move _587)</td></tr></table>>];
    bb220__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageLive(_592)<br/>_592 = ((_588 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_594)<br/>_594 = _592<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _594)</td></tr></table>>];
    bb221__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_594)<br/>StorageDead(_592)<br/>StorageDead(_587)<br/>StorageDead(_586)<br/>StorageDead(_585)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb222__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageDead(_587)<br/>StorageDead(_586)<br/></td></tr><tr><td align="left">_584 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _585)</td></tr></table>>];
    bb223__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageDead(_585)<br/>_596 = discriminant(_584)<br/></td></tr><tr><td align="left">switchInt(move _596)</td></tr></table>>];
    bb224__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageLive(_600)<br/>_600 = ((_584 as Continue).0: u128)<br/>_583 = _600<br/>StorageDead(_600)<br/>(((*_1).1: state::perp_market::AMM).30: u128) = move _583<br/>StorageDead(_583)<br/>StorageDead(_588)<br/>StorageDead(_584)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>_604 = (((*_1).1: state::perp_market::AMM).31: i128)<br/>StorageLive(_605)<br/>StorageLive(_606)<br/>StorageLive(_607)<br/>StorageLive(_608)<br/>_608 = _534<br/></td></tr><tr><td align="left">_607 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _608)</td></tr></table>>];
    bb225__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageLive(_597)<br/>_597 = ((_584 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_599)<br/>_599 = _597<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _599)</td></tr></table>>];
    bb226__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_599)<br/>StorageDead(_597)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb227__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_608)<br/></td></tr><tr><td align="left">_606 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _607)</td></tr></table>>];
    bb228__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_607)<br/>_609 = discriminant(_606)<br/></td></tr><tr><td align="left">switchInt(move _609)</td></tr></table>>];
    bb229__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageLive(_613)<br/>_613 = ((_606 as Continue).0: i128)<br/>_605 = _613<br/>StorageDead(_613)<br/></td></tr><tr><td align="left">_603 = &lt;i128 as SafeMath&gt;::safe_add(move _604, move _605)</td></tr></table>>];
    bb230__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageLive(_610)<br/>_610 = ((_606 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_612)<br/>_612 = _610<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _612)</td></tr></table>>];
    bb231__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_612)<br/>StorageDead(_610)<br/>StorageDead(_605)<br/>StorageDead(_604)<br/>StorageDead(_603)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb232__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_605)<br/>StorageDead(_604)<br/></td></tr><tr><td align="left">_602 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _603)</td></tr></table>>];
    bb233__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_603)<br/>_614 = discriminant(_602)<br/></td></tr><tr><td align="left">switchInt(move _614)</td></tr></table>>];
    bb234__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageLive(_618)<br/>_618 = ((_602 as Continue).0: i128)<br/>_601 = _618<br/>StorageDead(_618)<br/>(((*_1).1: state::perp_market::AMM).31: i128) = move _601<br/>StorageDead(_601)<br/>StorageDead(_606)<br/>StorageDead(_602)<br/>StorageLive(_619)<br/>StorageLive(_620)<br/>StorageLive(_621)<br/>StorageLive(_622)<br/>_622 = (((*_1).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_623)<br/>_623 = _534<br/></td></tr><tr><td align="left">_621 = &lt;i64 as SafeMath&gt;::safe_add(move _622, move _623)</td></tr></table>>];
    bb235__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageLive(_615)<br/>_615 = ((_602 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_617)<br/>_617 = _615<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _617)</td></tr></table>>];
    bb236__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_617)<br/>StorageDead(_615)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb237__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageDead(_623)<br/>StorageDead(_622)<br/></td></tr><tr><td align="left">_620 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _621)</td></tr></table>>];
    bb238__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/>_624 = discriminant(_620)<br/></td></tr><tr><td align="left">switchInt(move _624)</td></tr></table>>];
    bb239__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageLive(_628)<br/>_628 = ((_620 as Continue).0: i64)<br/>_619 = _628<br/>StorageDead(_628)<br/>(((*_1).1: state::perp_market::AMM).49: i64) = move _619<br/>StorageDead(_619)<br/>StorageDead(_620)<br/>StorageLive(_629)<br/>StorageLive(_630)<br/>StorageLive(_631)<br/>StorageLive(_632)<br/>StorageLive(_633)<br/>StorageLive(_634)<br/>_634 = _458<br/>_635 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_636 = Lt(_634, _635)<br/></td></tr><tr><td align="left">assert(move _636, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _635, _634)</td></tr></table>>];
    bb240__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageLive(_625)<br/>_625 = ((_620 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_627)<br/>_627 = _625<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _627)</td></tr></table>>];
    bb241__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_627)<br/>StorageDead(_625)<br/>StorageDead(_619)<br/>StorageDead(_620)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb242__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">_633 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_634]<br/>_632 = &amp;mut (*_633)<br/>StorageLive(_637)<br/>_637 = &amp;mut (*_1)<br/>StorageLive(_638)<br/>StorageLive(_639)<br/>StorageLive(_640)<br/>StorageLive(_641)<br/>StorageLive(_642)<br/>_642 = _532<br/></td></tr><tr><td align="left">_641 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _642)</td></tr></table>>];
    bb243__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_642)<br/></td></tr><tr><td align="left">_640 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _641)</td></tr></table>>];
    bb244__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageDead(_641)<br/>_643 = discriminant(_640)<br/></td></tr><tr><td align="left">switchInt(move _643)</td></tr></table>>];
    bb245__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageLive(_647)<br/>_647 = ((_640 as Continue).0: i64)<br/>_639 = _647<br/>StorageDead(_647)<br/>_648 = Eq(_639, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _648, &quot;attempt to negate `{}`, which would overflow&quot;, _639)</td></tr></table>>];
    bb246__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageLive(_644)<br/>_644 = ((_640 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_646)<br/>_646 = _644<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _646)</td></tr></table>>];
    bb247__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_646)<br/>StorageDead(_644)<br/>StorageDead(_639)<br/>StorageDead(_638)<br/>StorageDead(_637)<br/>StorageDead(_632)<br/>StorageDead(_631)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb248__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">_638 = Neg(move _639)<br/>StorageDead(_639)<br/></td></tr><tr><td align="left">_631 = update_quote_asset_and_break_even_amount(move _632, move _637, move _638)</td></tr></table>>];
    bb249__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_638)<br/>StorageDead(_637)<br/>StorageDead(_632)<br/></td></tr><tr><td align="left">_630 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _631)</td></tr></table>>];
    bb250__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_631)<br/>_649 = discriminant(_630)<br/></td></tr><tr><td align="left">switchInt(move _649)</td></tr></table>>];
    bb251__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageLive(_653)<br/>_653 = ((_630 as Continue).0: ())<br/>_629 = _653<br/>StorageDead(_653)<br/>StorageDead(_640)<br/>StorageDead(_634)<br/>StorageDead(_633)<br/>StorageDead(_630)<br/>StorageDead(_629)<br/>StorageLive(_654)<br/>StorageLive(_655)<br/>StorageLive(_656)<br/>StorageLive(_657)<br/>_657 = &amp;mut (*_3)<br/>StorageLive(_658)<br/>_658 = _532<br/></td></tr><tr><td align="left">_656 = UserStats::increment_total_fees(move _657, move _658)</td></tr></table>>];
    bb252__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageLive(_650)<br/>_650 = ((_630 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_652)<br/>_652 = _650<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _652)</td></tr></table>>];
    bb253__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_652)<br/>StorageDead(_650)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb254__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_658)<br/>StorageDead(_657)<br/></td></tr><tr><td align="left">_655 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _656)</td></tr></table>>];
    bb255__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageDead(_656)<br/>_659 = discriminant(_655)<br/></td></tr><tr><td align="left">switchInt(move _659)</td></tr></table>>];
    bb256__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageLive(_663)<br/>_663 = ((_655 as Continue).0: ())<br/>_654 = _663<br/>StorageDead(_663)<br/>StorageDead(_655)<br/>StorageDead(_654)<br/>StorageLive(_664)<br/>StorageLive(_665)<br/>StorageLive(_666)<br/>StorageLive(_667)<br/>_667 = &amp;mut (*_3)<br/>StorageLive(_668)<br/>_668 = _537<br/></td></tr><tr><td align="left">_666 = UserStats::increment_total_referee_discount(move _667, move _668)</td></tr></table>>];
    bb257__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageLive(_660)<br/>_660 = ((_655 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_662)<br/>_662 = _660<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _662)</td></tr></table>>];
    bb258__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_662)<br/>StorageDead(_660)<br/>StorageDead(_655)<br/>StorageDead(_654)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb259__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageDead(_668)<br/>StorageDead(_667)<br/></td></tr><tr><td align="left">_665 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _666)</td></tr></table>>];
    bb260__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageDead(_666)<br/>_669 = discriminant(_665)<br/></td></tr><tr><td align="left">switchInt(move _669)</td></tr></table>>];
    bb261__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageLive(_673)<br/>_673 = ((_665 as Continue).0: ())<br/>_664 = _673<br/>StorageDead(_673)<br/>StorageDead(_665)<br/>StorageDead(_664)<br/>StorageLive(_674)<br/>StorageLive(_675)<br/>StorageLive(_676)<br/>StorageLive(_677)<br/>StorageLive(_678)<br/>StorageLive(_679)<br/>_679 = _387<br/>_680 = Len(((*_6).4: [state::user::PerpPosition; 8]))<br/>_681 = Lt(_679, _680)<br/></td></tr><tr><td align="left">assert(move _681, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _680, _679)</td></tr></table>>];
    bb262__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageLive(_670)<br/>_670 = ((_665 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_672)<br/>_672 = _670<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _672)</td></tr></table>>];
    bb263__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageDead(_672)<br/>StorageDead(_670)<br/>StorageDead(_665)<br/>StorageDead(_664)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb264__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">_678 = &amp;mut ((*_6).4: [state::user::PerpPosition; 8])[_679]<br/>_677 = &amp;mut (*_678)<br/>StorageLive(_682)<br/>_682 = &amp;mut (*_1)<br/>StorageLive(_683)<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>StorageLive(_686)<br/>_686 = _533<br/></td></tr><tr><td align="left">_685 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _686)</td></tr></table>>];
    bb265__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageDead(_686)<br/></td></tr><tr><td align="left">_684 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _685)</td></tr></table>>];
    bb266__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageDead(_685)<br/>_687 = discriminant(_684)<br/></td></tr><tr><td align="left">switchInt(move _687)</td></tr></table>>];
    bb267__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageLive(_691)<br/>_691 = ((_684 as Continue).0: i64)<br/>_683 = _691<br/>StorageDead(_691)<br/></td></tr><tr><td align="left">_676 = update_quote_asset_and_break_even_amount(move _677, move _682, move _683)</td></tr></table>>];
    bb268__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageLive(_688)<br/>_688 = ((_684 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_690)<br/>_690 = _688<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _690)</td></tr></table>>];
    bb269__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageDead(_690)<br/>StorageDead(_688)<br/>StorageDead(_683)<br/>StorageDead(_682)<br/>StorageDead(_677)<br/>StorageDead(_676)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb270__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageDead(_683)<br/>StorageDead(_682)<br/>StorageDead(_677)<br/></td></tr><tr><td align="left">_675 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _676)</td></tr></table>>];
    bb271__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_676)<br/>_692 = discriminant(_675)<br/></td></tr><tr><td align="left">switchInt(move _692)</td></tr></table>>];
    bb272__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageLive(_696)<br/>_696 = ((_675 as Continue).0: ())<br/>_674 = _696<br/>StorageDead(_696)<br/>StorageDead(_684)<br/>StorageDead(_679)<br/>StorageDead(_678)<br/>StorageDead(_675)<br/>StorageDead(_674)<br/>StorageLive(_697)<br/>_698 = discriminant((*_7))<br/></td></tr><tr><td align="left">switchInt(move _698)</td></tr></table>>];
    bb273__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageLive(_693)<br/>_693 = ((_675 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_695)<br/>_695 = _693<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _695)</td></tr></table>>];
    bb274__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_695)<br/>StorageDead(_693)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb275__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">StorageLive(_710)<br/>StorageLive(_711)<br/>StorageLive(_712)<br/>StorageLive(_713)<br/>_713 = &amp;mut (*_3)<br/>StorageLive(_714)<br/>_714 = _533<br/></td></tr><tr><td align="left">_712 = UserStats::increment_total_rebate(move _713, move _714)</td></tr></table>>];
    bb276__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageLive(_699)<br/>_699 = &amp;mut (((*_7) as Some).0: &amp;mut state::user::UserStats)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>StorageLive(_702)<br/>StorageLive(_703)<br/>_1103 = deref_copy (*_699)<br/>_703 = &amp;mut (*_1103)<br/>StorageLive(_704)<br/>_704 = _533<br/></td></tr><tr><td align="left">_702 = UserStats::increment_total_rebate(move _703, move _704)</td></tr></table>>];
    bb277__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_704)<br/>StorageDead(_703)<br/></td></tr><tr><td align="left">_701 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _702)</td></tr></table>>];
    bb278__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_702)<br/>_705 = discriminant(_701)<br/></td></tr><tr><td align="left">switchInt(move _705)</td></tr></table>>];
    bb279__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageLive(_709)<br/>_709 = ((_701 as Continue).0: ())<br/>_700 = _709<br/>StorageDead(_709)<br/>StorageDead(_701)<br/>StorageDead(_700)<br/>_697 = const ()<br/>StorageDead(_699)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb280__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageLive(_706)<br/>_706 = ((_701 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_708)<br/>_708 = _706<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _708)</td></tr></table>>];
    bb281__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageDead(_708)<br/>StorageDead(_706)<br/>StorageDead(_701)<br/>StorageDead(_700)<br/>StorageDead(_699)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb282__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageDead(_714)<br/>StorageDead(_713)<br/></td></tr><tr><td align="left">_711 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _712)</td></tr></table>>];
    bb283__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_712)<br/>_715 = discriminant(_711)<br/></td></tr><tr><td align="left">switchInt(move _715)</td></tr></table>>];
    bb284__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageLive(_719)<br/>_719 = ((_711 as Continue).0: ())<br/>_710 = _719<br/>StorageDead(_719)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>_697 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb285__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageLive(_716)<br/>_716 = ((_711 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_718)<br/>_718 = _716<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _718)</td></tr></table>>];
    bb286__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageDead(_718)<br/>StorageDead(_716)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb287__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageDead(_697)<br/>StorageLive(_720)<br/>_721 = discriminant((*_10))<br/></td></tr><tr><td align="left">switchInt(move _721)</td></tr></table>>];
    bb288__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageLive(_722)<br/>_722 = &amp;mut (((*_10) as Some).0: &amp;mut state::user::User)<br/>StorageLive(_723)<br/>StorageLive(_724)<br/>StorageLive(_725)<br/>_725 = _535<br/>_724 = Gt(move _725, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _724)</td></tr></table>>];
    bb289__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageDead(_725)<br/>StorageLive(_726)<br/>StorageLive(_727)<br/>StorageLive(_728)<br/>StorageLive(_729)<br/>StorageLive(_730)<br/>StorageLive(_731)<br/>_1104 = deref_copy (*_722)<br/>_731 = &amp;((*_1104).4: [state::user::PerpPosition; 8])<br/>_730 = &amp;(*_731)<br/>StorageLive(_732)<br/>_732 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_729 = get_position_index(move _730, move _732)</td></tr></table>>];
    bb290__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageDead(_732)<br/>StorageDead(_730)<br/>StorageLive(_733)<br/>StorageLive(_734)<br/>_734 = &amp;mut _722<br/>StorageLive(_735)<br/>_735 = &amp;_1<br/>_733 = {closure@programs/drift/src/controller/orders.rs:2773:89: 2773:92} { filler: move _734, market: move _735 }<br/>StorageDead(_735)<br/>StorageDead(_734)<br/></td></tr><tr><td align="left">_728 = std::result::Result::&lt;usize, error::ErrorCode&gt;::or_else::&lt;error::ErrorCode, {closure@programs/drift/src/controller/orders.rs:2773:89: 2773:92}&gt;(move _729, move _733)</td></tr></table>>];
    bb291__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">StorageDead(_733)<br/>StorageDead(_729)<br/></td></tr><tr><td align="left">_727 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _728)</td></tr></table>>];
    bb292__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_728)<br/>_736 = discriminant(_727)<br/></td></tr><tr><td align="left">switchInt(move _736)</td></tr></table>>];
    bb293__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageLive(_740)<br/>_740 = ((_727 as Continue).0: usize)<br/>_726 = _740<br/>StorageDead(_740)<br/>StorageDead(_731)<br/>StorageDead(_727)<br/>StorageLive(_741)<br/>StorageLive(_742)<br/>StorageLive(_743)<br/>StorageLive(_744)<br/>StorageLive(_745)<br/>StorageLive(_746)<br/>_746 = _726<br/>_1105 = deref_copy (*_722)<br/>_747 = Len(((*_1105).4: [state::user::PerpPosition; 8]))<br/>_748 = Lt(_746, _747)<br/></td></tr><tr><td align="left">assert(move _748, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _747, _746)</td></tr></table>>];
    bb294__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageLive(_737)<br/>_737 = ((_727 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_739)<br/>_739 = _737<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _739)</td></tr></table>>];
    bb295__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageDead(_739)<br/>StorageDead(_737)<br/>StorageDead(_731)<br/>StorageDead(_727)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb296__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">_1106 = deref_copy (*_722)<br/>_745 = &amp;mut ((*_1106).4: [state::user::PerpPosition; 8])[_746]<br/>_744 = &amp;mut (*_745)<br/>StorageLive(_749)<br/>_749 = &amp;mut (*_1)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>_753 = _535<br/></td></tr><tr><td align="left">_752 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _753)</td></tr></table>>];
    bb297__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageDead(_753)<br/></td></tr><tr><td align="left">_751 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _752)</td></tr></table>>];
    bb298__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageDead(_752)<br/>_754 = discriminant(_751)<br/></td></tr><tr><td align="left">switchInt(move _754)</td></tr></table>>];
    bb299__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">StorageLive(_758)<br/>_758 = ((_751 as Continue).0: i64)<br/>_750 = _758<br/>StorageDead(_758)<br/></td></tr><tr><td align="left">_743 = update_quote_asset_amount(move _744, move _749, move _750)</td></tr></table>>];
    bb300__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageLive(_755)<br/>_755 = ((_751 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_757)<br/>_757 = _755<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _757)</td></tr></table>>];
    bb301__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">StorageDead(_757)<br/>StorageDead(_755)<br/>StorageDead(_750)<br/>StorageDead(_749)<br/>StorageDead(_744)<br/>StorageDead(_743)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb302__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_750)<br/>StorageDead(_749)<br/>StorageDead(_744)<br/></td></tr><tr><td align="left">_742 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _743)</td></tr></table>>];
    bb303__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_743)<br/>_759 = discriminant(_742)<br/></td></tr><tr><td align="left">switchInt(move _759)</td></tr></table>>];
    bb304__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageLive(_763)<br/>_763 = ((_742 as Continue).0: ())<br/>_741 = _763<br/>StorageDead(_763)<br/>StorageDead(_751)<br/>StorageDead(_746)<br/>StorageDead(_745)<br/>StorageDead(_742)<br/>StorageDead(_741)<br/>StorageLive(_764)<br/>StorageLive(_765)<br/>StorageLive(_766)<br/>StorageLive(_767)<br/>StorageLive(_768)<br/>StorageLive(_769)<br/>StorageLive(_770)<br/>StorageLive(_771)<br/>StorageLive(_772)<br/>_772 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_771 = Option::&lt;&amp;mut UserStats&gt;::as_mut(move _772)</td></tr></table>>];
    bb305__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageLive(_760)<br/>_760 = ((_742 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_762)<br/>_762 = _760<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _762)</td></tr></table>>];
    bb306__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageDead(_762)<br/>StorageDead(_760)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb307__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_772)<br/></td></tr><tr><td align="left">_770 = &lt;Option&lt;&amp;mut &amp;mut UserStats&gt; as SafeUnwrap&gt;::safe_unwrap(move _771)</td></tr></table>>];
    bb308__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageDead(_771)<br/></td></tr><tr><td align="left">_769 = &lt;std::result::Result&lt;&amp;mut &amp;mut UserStats, error::ErrorCode&gt; as Try&gt;::branch(move _770)</td></tr></table>>];
    bb309__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageDead(_770)<br/>_773 = discriminant(_769)<br/></td></tr><tr><td align="left">switchInt(move _773)</td></tr></table>>];
    bb310__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageLive(_777)<br/>_777 = move ((_769 as Continue).0: &amp;mut &amp;mut state::user::UserStats)<br/>_768 = move _777<br/>StorageDead(_777)<br/>_1107 = deref_copy (*_768)<br/>_767 = &amp;mut (*_1107)<br/>StorageLive(_778)<br/>_778 = _330<br/>StorageLive(_779)<br/>_779 = _19<br/></td></tr><tr><td align="left">_766 = UserStats::update_filler_volume(move _767, move _778, move _779)</td></tr></table>>];
    bb311__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageLive(_774)<br/>_774 = ((_769 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_776)<br/>_776 = _774<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _776)</td></tr></table>>];
    bb312__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageDead(_776)<br/>StorageDead(_774)<br/>StorageDead(_767)<br/>StorageDead(_766)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb313__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_779)<br/>StorageDead(_778)<br/>StorageDead(_767)<br/></td></tr><tr><td align="left">_765 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _766)</td></tr></table>>];
    bb314__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_766)<br/>_780 = discriminant(_765)<br/></td></tr><tr><td align="left">switchInt(move _780)</td></tr></table>>];
    bb315__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageLive(_784)<br/>_784 = ((_765 as Continue).0: ())<br/>_764 = _784<br/>StorageDead(_784)<br/>StorageDead(_769)<br/>StorageDead(_768)<br/>StorageDead(_765)<br/>StorageDead(_764)<br/>_723 = const ()<br/>StorageDead(_726)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb316__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageLive(_781)<br/>_781 = ((_765 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_783)<br/>_783 = _781<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _783)</td></tr></table>>];
    bb317__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageDead(_783)<br/>StorageDead(_781)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb318__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageDead(_725)<br/>_723 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb319__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageDead(_724)<br/>StorageDead(_723)<br/>StorageLive(_785)<br/>StorageLive(_786)<br/>_1108 = deref_copy (*_722)<br/>_786 = &amp;mut (*_1108)<br/>StorageLive(_787)<br/>_787 = _20<br/></td></tr><tr><td align="left">_785 = User::update_last_active_slot(move _786, move _787)</td></tr></table>>];
    bb320__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_787)<br/>StorageDead(_786)<br/>StorageDead(_785)<br/>_720 = const ()<br/>StorageDead(_722)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb321__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">_720 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb322__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_720)<br/>StorageLive(_788)<br/>StorageLive(_789)<br/>StorageLive(_790)<br/>StorageLive(_791)<br/>_791 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_790 = Option::&lt;&amp;mut User&gt;::as_mut(move _791)</td></tr></table>>];
    bb323__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageDead(_791)<br/>StorageLive(_792)<br/>StorageLive(_793)<br/>_793 = &amp;mut (*_14)<br/></td></tr><tr><td align="left">_792 = Option::&lt;&amp;mut UserStats&gt;::as_mut(move _793)</td></tr></table>>];
    bb324__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageDead(_793)<br/>_789 = (move _790, move _792)<br/>StorageDead(_792)<br/>StorageDead(_790)<br/>_795 = discriminant((_789.0: std::option::Option&lt;&amp;mut &amp;mut state::user::User&gt;))<br/></td></tr><tr><td align="left">switchInt(move _795)</td></tr></table>>];
    bb325__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">_794 = discriminant((_789.1: std::option::Option&lt;&amp;mut &amp;mut state::user::UserStats&gt;))<br/></td></tr><tr><td align="left">switchInt(move _794)</td></tr></table>>];
    bb326__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageLive(_796)<br/>_796 = move (((_789.0: std::option::Option&lt;&amp;mut &amp;mut state::user::User&gt;) as Some).0: &amp;mut &amp;mut state::user::User)<br/>StorageLive(_797)<br/>_797 = move (((_789.1: std::option::Option&lt;&amp;mut &amp;mut state::user::UserStats&gt;) as Some).0: &amp;mut &amp;mut state::user::UserStats)<br/>StorageLive(_798)<br/>StorageLive(_799)<br/>_1109 = deref_copy (*_796)<br/>_799 = &amp;mut (*_1109)<br/>StorageLive(_800)<br/>_800 = ((*_1).21: u16)<br/></td></tr><tr><td align="left">_798 = User::force_get_perp_position_mut(move _799, move _800)</td></tr></table>>];
    bb327__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageDead(_800)<br/>StorageDead(_799)<br/>_801 = discriminant(_798)<br/></td></tr><tr><td align="left">switchInt(move _801)</td></tr></table>>];
    bb328__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageLive(_802)<br/>_802 = move ((_798 as Ok).0: &amp;mut state::user::PerpPosition)<br/>StorageLive(_803)<br/>StorageLive(_804)<br/>StorageLive(_805)<br/>_805 = _536<br/>_804 = Gt(move _805, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _804)</td></tr></table>>];
    bb329__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageDead(_805)<br/>StorageLive(_806)<br/>StorageLive(_807)<br/>StorageLive(_808)<br/>StorageLive(_809)<br/>_809 = &amp;mut (*_802)<br/>StorageLive(_810)<br/>_810 = &amp;mut (*_1)<br/>StorageLive(_811)<br/>StorageLive(_812)<br/>StorageLive(_813)<br/>StorageLive(_814)<br/>_814 = _536<br/></td></tr><tr><td align="left">_813 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _814)</td></tr></table>>];
    bb330__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_814)<br/></td></tr><tr><td align="left">_812 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _813)</td></tr></table>>];
    bb331__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageDead(_813)<br/>_815 = discriminant(_812)<br/></td></tr><tr><td align="left">switchInt(move _815)</td></tr></table>>];
    bb332__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageLive(_819)<br/>_819 = ((_812 as Continue).0: i64)<br/>_811 = _819<br/>StorageDead(_819)<br/></td></tr><tr><td align="left">_808 = update_quote_asset_amount(move _809, move _810, move _811)</td></tr></table>>];
    bb333__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageLive(_816)<br/>_816 = ((_812 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_818)<br/>_818 = _816<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _818)</td></tr></table>>];
    bb334__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageDead(_818)<br/>StorageDead(_816)<br/>StorageDead(_811)<br/>StorageDead(_810)<br/>StorageDead(_809)<br/>StorageDead(_808)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb335__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_811)<br/>StorageDead(_810)<br/>StorageDead(_809)<br/></td></tr><tr><td align="left">_807 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _808)</td></tr></table>>];
    bb336__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageDead(_808)<br/>_820 = discriminant(_807)<br/></td></tr><tr><td align="left">switchInt(move _820)</td></tr></table>>];
    bb337__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">StorageLive(_824)<br/>_824 = ((_807 as Continue).0: ())<br/>_806 = _824<br/>StorageDead(_824)<br/>StorageDead(_812)<br/>StorageDead(_807)<br/>StorageDead(_806)<br/>_803 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb338__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageLive(_821)<br/>_821 = ((_807 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_823)<br/>_823 = _821<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _823)</td></tr></table>>];
    bb339__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageDead(_823)<br/>StorageDead(_821)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb340__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageDead(_805)<br/>_803 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb341__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageDead(_804)<br/>StorageDead(_803)<br/>StorageLive(_825)<br/>StorageLive(_826)<br/>StorageLive(_827)<br/>StorageLive(_828)<br/>_1110 = deref_copy (*_797)<br/>_828 = &amp;mut (*_1110)<br/>StorageLive(_829)<br/>_829 = _536<br/>StorageLive(_830)<br/>_830 = _19<br/></td></tr><tr><td align="left">_827 = UserStats::increment_total_referrer_reward(move _828, move _829, move _830)</td></tr></table>>];
    bb342__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageDead(_830)<br/>StorageDead(_829)<br/>StorageDead(_828)<br/></td></tr><tr><td align="left">_826 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _827)</td></tr></table>>];
    bb343__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_827)<br/>_831 = discriminant(_826)<br/></td></tr><tr><td align="left">switchInt(move _831)</td></tr></table>>];
    bb344__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageLive(_835)<br/>_835 = ((_826 as Continue).0: ())<br/>_825 = _835<br/>StorageDead(_835)<br/>StorageDead(_826)<br/>StorageDead(_825)<br/>_788 = const ()<br/>StorageDead(_802)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb345__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">StorageLive(_832)<br/>_832 = ((_826 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_834)<br/>_834 = _832<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _834)</td></tr></table>>];
    bb346__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageDead(_834)<br/>StorageDead(_832)<br/>StorageDead(_826)<br/>StorageDead(_825)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb347__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">_788 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb348__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">StorageDead(_798)<br/>StorageDead(_797)<br/>StorageDead(_796)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb349__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">_788 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb350__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageDead(_789)<br/>StorageDead(_788)<br/>StorageLive(_836)<br/>StorageLive(_837)<br/>StorageLive(_838)<br/>StorageLive(_839)<br/>StorageLive(_840)<br/>StorageLive(_841)<br/>_841 = _4<br/>_842 = Len(((*_2).5: [state::user::Order; 32]))<br/>_843 = Lt(_841, _842)<br/></td></tr><tr><td align="left">assert(move _843, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _842, _841)</td></tr></table>>];
    bb351__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">_840 = &amp;mut ((*_2).5: [state::user::Order; 32])[_841]<br/>_839 = &amp;mut (*_840)<br/>StorageLive(_844)<br/>_844 = _329<br/>StorageLive(_845)<br/>_845 = _330<br/></td></tr><tr><td align="left">_838 = update_order_after_fill(move _839, move _844, move _845)</td></tr></table>>];
    bb352__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageDead(_845)<br/>StorageDead(_844)<br/>StorageDead(_839)<br/></td></tr><tr><td align="left">_837 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _838)</td></tr></table>>];
    bb353__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageDead(_838)<br/>_846 = discriminant(_837)<br/></td></tr><tr><td align="left">switchInt(move _846)</td></tr></table>>];
    bb354__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageLive(_850)<br/>_850 = ((_837 as Continue).0: ())<br/>_836 = _850<br/>StorageDead(_850)<br/>StorageDead(_841)<br/>StorageDead(_840)<br/>StorageDead(_837)<br/>StorageDead(_836)<br/>StorageLive(_851)<br/>StorageLive(_852)<br/>StorageLive(_853)<br/>StorageLive(_854)<br/>StorageLive(_855)<br/>StorageLive(_856)<br/>_856 = _458<br/>_857 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_858 = Lt(_856, _857)<br/></td></tr><tr><td align="left">assert(move _858, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _857, _856)</td></tr></table>>];
    bb355__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">StorageLive(_847)<br/>_847 = ((_837 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_849)<br/>_849 = _847<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _849)</td></tr></table>>];
    bb356__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_849)<br/>StorageDead(_847)<br/>StorageDead(_841)<br/>StorageDead(_840)<br/>StorageDead(_837)<br/>StorageDead(_836)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb357__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">_855 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_856]<br/>_854 = &amp;mut (*_855)<br/>StorageLive(_859)<br/>StorageLive(_860)<br/>StorageLive(_861)<br/>_861 = _4<br/>_862 = Len(((*_2).5: [state::user::Order; 32]))<br/>_863 = Lt(_861, _862)<br/></td></tr><tr><td align="left">assert(move _863, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _862, _861)</td></tr></table>>];
    bb358__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">_860 = &amp;(((*_2).5: [state::user::Order; 32])[_861].17: controller::position::PositionDirection)<br/>_859 = &amp;(*_860)<br/>StorageLive(_864)<br/>_864 = _329<br/>StorageLive(_865)<br/>StorageLive(_866)<br/>StorageLive(_867)<br/>_867 = _4<br/>_868 = Len(((*_2).5: [state::user::Order; 32]))<br/>_869 = Lt(_867, _868)<br/></td></tr><tr><td align="left">assert(move _869, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _868, _867)</td></tr></table>>];
    bb359__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">_866 = &amp;((*_2).5: [state::user::Order; 32])[_867]<br/></td></tr><tr><td align="left">_865 = Order::update_open_bids_and_asks(move _866)</td></tr></table>>];
    bb360__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">StorageDead(_866)<br/></td></tr><tr><td align="left">_853 = decrease_open_bids_and_asks(move _854, move _859, move _864, move _865)</td></tr></table>>];
    bb361__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageDead(_865)<br/>StorageDead(_864)<br/>StorageDead(_859)<br/>StorageDead(_854)<br/></td></tr><tr><td align="left">_852 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _853)</td></tr></table>>];
    bb362__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageDead(_853)<br/>_870 = discriminant(_852)<br/></td></tr><tr><td align="left">switchInt(move _870)</td></tr></table>>];
    bb363__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">StorageLive(_874)<br/>_874 = ((_852 as Continue).0: ())<br/>_851 = _874<br/>StorageDead(_874)<br/>StorageDead(_867)<br/>StorageDead(_861)<br/>StorageDead(_860)<br/>StorageDead(_856)<br/>StorageDead(_855)<br/>StorageDead(_852)<br/>StorageDead(_851)<br/>StorageLive(_875)<br/>StorageLive(_876)<br/>StorageLive(_877)<br/>StorageLive(_878)<br/>StorageLive(_879)<br/>StorageLive(_880)<br/>_880 = _8<br/>_881 = Len(((*_6).5: [state::user::Order; 32]))<br/>_882 = Lt(_880, _881)<br/></td></tr><tr><td align="left">assert(move _882, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _881, _880)</td></tr></table>>];
    bb364__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageLive(_871)<br/>_871 = ((_852 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_873)<br/>_873 = _871<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _873)</td></tr></table>>];
    bb365__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageDead(_873)<br/>StorageDead(_871)<br/>StorageDead(_867)<br/>StorageDead(_861)<br/>StorageDead(_860)<br/>StorageDead(_856)<br/>StorageDead(_855)<br/>StorageDead(_852)<br/>StorageDead(_851)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb366__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">_879 = &amp;mut ((*_6).5: [state::user::Order; 32])[_880]<br/>_878 = &amp;mut (*_879)<br/>StorageLive(_883)<br/>_883 = _329<br/>StorageLive(_884)<br/>_884 = _330<br/></td></tr><tr><td align="left">_877 = update_order_after_fill(move _878, move _883, move _884)</td></tr></table>>];
    bb367__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left" balign="left">StorageDead(_884)<br/>StorageDead(_883)<br/>StorageDead(_878)<br/></td></tr><tr><td align="left">_876 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _877)</td></tr></table>>];
    bb368__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">368</td></tr><tr><td align="left" balign="left">StorageDead(_877)<br/>_885 = discriminant(_876)<br/></td></tr><tr><td align="left">switchInt(move _885)</td></tr></table>>];
    bb369__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">369</td></tr><tr><td align="left" balign="left">StorageLive(_889)<br/>_889 = ((_876 as Continue).0: ())<br/>_875 = _889<br/>StorageDead(_889)<br/>StorageDead(_880)<br/>StorageDead(_879)<br/>StorageDead(_876)<br/>StorageDead(_875)<br/>StorageLive(_890)<br/>StorageLive(_891)<br/>StorageLive(_892)<br/>StorageLive(_893)<br/>StorageLive(_894)<br/>StorageLive(_895)<br/>_895 = _387<br/>_896 = Len(((*_6).4: [state::user::PerpPosition; 8]))<br/>_897 = Lt(_895, _896)<br/></td></tr><tr><td align="left">assert(move _897, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _896, _895)</td></tr></table>>];
    bb370__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">370</td></tr><tr><td align="left" balign="left">StorageLive(_886)<br/>_886 = ((_876 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_888)<br/>_888 = _886<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _888)</td></tr></table>>];
    bb371__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">371</td></tr><tr><td align="left" balign="left">StorageDead(_888)<br/>StorageDead(_886)<br/>StorageDead(_880)<br/>StorageDead(_879)<br/>StorageDead(_876)<br/>StorageDead(_875)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb372__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">372</td></tr><tr><td align="left" balign="left">_894 = &amp;mut ((*_6).4: [state::user::PerpPosition; 8])[_895]<br/>_893 = &amp;mut (*_894)<br/>StorageLive(_898)<br/>StorageLive(_899)<br/>StorageLive(_900)<br/>_900 = _8<br/>_901 = Len(((*_6).5: [state::user::Order; 32]))<br/>_902 = Lt(_900, _901)<br/></td></tr><tr><td align="left">assert(move _902, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _901, _900)</td></tr></table>>];
    bb373__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">373</td></tr><tr><td align="left" balign="left">_899 = &amp;(((*_6).5: [state::user::Order; 32])[_900].17: controller::position::PositionDirection)<br/>_898 = &amp;(*_899)<br/>StorageLive(_903)<br/>_903 = _329<br/>StorageLive(_904)<br/>StorageLive(_905)<br/>StorageLive(_906)<br/>_906 = _8<br/>_907 = Len(((*_6).5: [state::user::Order; 32]))<br/>_908 = Lt(_906, _907)<br/></td></tr><tr><td align="left">assert(move _908, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _907, _906)</td></tr></table>>];
    bb374__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">374</td></tr><tr><td align="left" balign="left">_905 = &amp;((*_6).5: [state::user::Order; 32])[_906]<br/></td></tr><tr><td align="left">_904 = Order::update_open_bids_and_asks(move _905)</td></tr></table>>];
    bb375__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">375</td></tr><tr><td align="left" balign="left">StorageDead(_905)<br/></td></tr><tr><td align="left">_892 = decrease_open_bids_and_asks(move _893, move _898, move _903, move _904)</td></tr></table>>];
    bb376__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">376</td></tr><tr><td align="left" balign="left">StorageDead(_904)<br/>StorageDead(_903)<br/>StorageDead(_898)<br/>StorageDead(_893)<br/></td></tr><tr><td align="left">_891 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _892)</td></tr></table>>];
    bb377__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">377</td></tr><tr><td align="left" balign="left">StorageDead(_892)<br/>_909 = discriminant(_891)<br/></td></tr><tr><td align="left">switchInt(move _909)</td></tr></table>>];
    bb378__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">378</td></tr><tr><td align="left" balign="left">StorageLive(_913)<br/>_913 = ((_891 as Continue).0: ())<br/>_890 = _913<br/>StorageDead(_913)<br/>StorageDead(_906)<br/>StorageDead(_900)<br/>StorageDead(_899)<br/>StorageDead(_895)<br/>StorageDead(_894)<br/>StorageDead(_891)<br/>StorageDead(_890)<br/>StorageLive(_914)<br/>StorageLive(_915)<br/>_915 = ((*_1).8: u64)<br/>StorageLive(_916)<br/>StorageLive(_917)<br/>StorageLive(_918)<br/>StorageLive(_919)<br/>_919 = _915<br/></td></tr><tr><td align="left">_918 = core::num::&lt;impl u64&gt;::checked_add(move _919, const 1_u64)</td></tr></table>>];
    bb379__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">379</td></tr><tr><td align="left" balign="left">StorageLive(_910)<br/>_910 = ((_891 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_912)<br/>_912 = _910<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _912)</td></tr></table>>];
    bb380__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">380</td></tr><tr><td align="left" balign="left">StorageDead(_912)<br/>StorageDead(_910)<br/>StorageDead(_906)<br/>StorageDead(_900)<br/>StorageDead(_899)<br/>StorageDead(_895)<br/>StorageDead(_894)<br/>StorageDead(_891)<br/>StorageDead(_890)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb381__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">381</td></tr><tr><td align="left" balign="left">StorageDead(_919)<br/>StorageLive(_920)<br/>_920 = Option::&lt;u64&gt;::Some(const 1_u64)<br/></td></tr><tr><td align="left">_917 = Option::&lt;u64&gt;::or(move _918, move _920)</td></tr></table>>];
    bb382__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">382</td></tr><tr><td align="left" balign="left">StorageDead(_920)<br/>StorageDead(_918)<br/></td></tr><tr><td align="left">_916 = Option::&lt;u64&gt;::unwrap(move _917)</td></tr></table>>];
    bb383__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">383</td></tr><tr><td align="left" balign="left">StorageDead(_917)<br/>((*_1).8: u64) = move _916<br/>StorageDead(_916)<br/>_914 = _915<br/>StorageDead(_915)<br/>StorageLive(_921)<br/>StorageLive(_922)<br/>_922 = _23<br/></td></tr><tr><td align="left">switchInt(move _922)</td></tr></table>>];
    bb384__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">384</td></tr><tr><td align="left" balign="left">_921 = OrderActionExplanation::Liquidation<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb385__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">385</td></tr><tr><td align="left" balign="left">StorageLive(_923)<br/>StorageLive(_924)<br/>StorageLive(_925)<br/>_925 = _8<br/>_926 = Len(((*_6).5: [state::user::Order; 32]))<br/>_927 = Lt(_925, _926)<br/></td></tr><tr><td align="left">assert(move _927, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _926, _925)</td></tr></table>>];
    bb386__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">386</td></tr><tr><td align="left" balign="left">_924 = &amp;((*_6).5: [state::user::Order; 32])[_925]<br/></td></tr><tr><td align="left">_923 = Order::is_jit_maker(move _924)</td></tr></table>>];
    bb387__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">387</td></tr><tr><td align="left">switchInt(move _923)</td></tr></table>>];
    bb388__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">388</td></tr><tr><td align="left" balign="left">StorageDead(_925)<br/>StorageDead(_924)<br/>_921 = OrderActionExplanation::OrderFilledWithMatchJit<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb389__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">389</td></tr><tr><td align="left" balign="left">StorageDead(_925)<br/>StorageDead(_924)<br/>_921 = OrderActionExplanation::OrderFilledWithMatch<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb390__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">390</td></tr><tr><td align="left" balign="left">StorageDead(_923)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb391__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">391</td></tr><tr><td align="left" balign="left">StorageDead(_922)<br/>StorageLive(_928)<br/>_928 = const 0_u8<br/>StorageLive(_929)<br/>StorageLive(_930)<br/>_930 = _928<br/>StorageLive(_931)<br/>StorageLive(_932)<br/>StorageLive(_933)<br/>_933 = _4<br/>_934 = Len(((*_2).5: [state::user::Order; 32]))<br/>_935 = Lt(_933, _934)<br/></td></tr><tr><td align="left">assert(move _935, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _934, _933)</td></tr></table>>];
    bb392__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">392</td></tr><tr><td align="left" balign="left">_932 = &amp;((*_2).5: [state::user::Order; 32])[_933]<br/></td></tr><tr><td align="left">_931 = Order::is_signed_msg(move _932)</td></tr></table>>];
    bb393__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">393</td></tr><tr><td align="left" balign="left">StorageDead(_932)<br/>StorageLive(_936)<br/>_936 = OrderBitFlag::SignedMessage<br/></td></tr><tr><td align="left">_929 = math::orders::set_order_bit_flag(move _930, move _931, move _936)</td></tr></table>>];
    bb394__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">394</td></tr><tr><td align="left" balign="left">StorageDead(_936)<br/>StorageDead(_931)<br/>StorageDead(_930)<br/>_928 = move _929<br/>StorageDead(_929)<br/>StorageDead(_933)<br/>StorageLive(_939)<br/>StorageLive(_940)<br/>StorageLive(_941)<br/>StorageLive(_942)<br/>_942 = _329<br/>StorageLive(_943)<br/>_943 = _299<br/></td></tr><tr><td align="left">_941 = math::orders::calculate_existing_position_fields_for_order_action(move _942, move _943)</td></tr></table>>];
    bb395__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">395</td></tr><tr><td align="left" balign="left">StorageDead(_943)<br/>StorageDead(_942)<br/></td></tr><tr><td align="left">_940 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _941)</td></tr></table>>];
    bb396__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">396</td></tr><tr><td align="left" balign="left">StorageDead(_941)<br/>_944 = discriminant(_940)<br/></td></tr><tr><td align="left">switchInt(move _944)</td></tr></table>>];
    bb397__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">397</td></tr><tr><td align="left" balign="left">StorageLive(_948)<br/>_948 = ((_940 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_939 = _948<br/>StorageDead(_948)<br/>StorageLive(_937)<br/>_937 = (_939.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_938)<br/>_938 = (_939.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_940)<br/>StorageDead(_939)<br/>StorageLive(_951)<br/>StorageLive(_952)<br/>StorageLive(_953)<br/>StorageLive(_954)<br/>_954 = _329<br/>StorageLive(_955)<br/>_955 = _119<br/></td></tr><tr><td align="left">_953 = math::orders::calculate_existing_position_fields_for_order_action(move _954, move _955)</td></tr></table>>];
    bb398__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">398</td></tr><tr><td align="left" balign="left">StorageLive(_945)<br/>_945 = ((_940 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_947)<br/>_947 = _945<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _947)</td></tr></table>>];
    bb399__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">399</td></tr><tr><td align="left" balign="left">StorageDead(_947)<br/>StorageDead(_945)<br/>StorageDead(_940)<br/>StorageDead(_939)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb400__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">400</td></tr><tr><td align="left" balign="left">StorageDead(_955)<br/>StorageDead(_954)<br/></td></tr><tr><td align="left">_952 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _953)</td></tr></table>>];
    bb401__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">401</td></tr><tr><td align="left" balign="left">StorageDead(_953)<br/>_956 = discriminant(_952)<br/></td></tr><tr><td align="left">switchInt(move _956)</td></tr></table>>];
    bb402__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">402</td></tr><tr><td align="left" balign="left">StorageLive(_960)<br/>_960 = ((_952 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_951 = _960<br/>StorageDead(_960)<br/>StorageLive(_949)<br/>_949 = (_951.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_950)<br/>_950 = (_951.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_952)<br/>StorageDead(_951)<br/>StorageLive(_961)<br/>StorageLive(_962)<br/>StorageLive(_963)<br/>StorageLive(_964)<br/>_964 = _19<br/>StorageLive(_965)<br/>_965 = OrderAction::Fill<br/>StorageLive(_966)<br/>_966 = _921<br/>StorageLive(_967)<br/>_967 = ((*_1).21: u16)<br/>StorageLive(_968)<br/>StorageLive(_969)<br/>_969 = (*_12)<br/>_968 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _969)<br/>StorageDead(_969)<br/>StorageLive(_970)<br/>StorageLive(_971)<br/>_971 = _914<br/>_970 = Option::&lt;u64&gt;::Some(move _971)<br/>StorageDead(_971)<br/>StorageLive(_972)<br/>StorageLive(_973)<br/>_973 = _535<br/>_972 = Option::&lt;u64&gt;::Some(move _973)<br/>StorageDead(_973)<br/>StorageLive(_974)<br/>StorageLive(_975)<br/>_975 = _329<br/>_974 = Option::&lt;u64&gt;::Some(move _975)<br/>StorageDead(_975)<br/>StorageLive(_976)<br/>StorageLive(_977)<br/>_977 = _330<br/>_976 = Option::&lt;u64&gt;::Some(move _977)<br/>StorageDead(_977)<br/>StorageLive(_978)<br/>StorageLive(_979)<br/>_979 = _532<br/>_978 = Option::&lt;u64&gt;::Some(move _979)<br/>StorageDead(_979)<br/>StorageLive(_980)<br/>StorageLive(_981)<br/>_981 = _533<br/>_980 = Option::&lt;u64&gt;::Some(move _981)<br/>StorageDead(_981)<br/>StorageLive(_982)<br/>StorageLive(_983)<br/>_983 = _536<br/>_982 = Option::&lt;u64&gt;::Some(move _983)<br/>StorageDead(_983)<br/>StorageLive(_984)<br/>_984 = Option::&lt;i64&gt;::None<br/>StorageLive(_985)<br/>_985 = Option::&lt;u64&gt;::None<br/>StorageLive(_986)<br/>StorageLive(_987)<br/>_987 = (*_5)<br/>_986 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _987)<br/>StorageDead(_987)<br/>StorageLive(_988)<br/>StorageLive(_989)<br/>StorageLive(_990)<br/>_990 = _4<br/>_991 = Len(((*_2).5: [state::user::Order; 32]))<br/>_992 = Lt(_990, _991)<br/></td></tr><tr><td align="left">assert(move _992, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _991, _990)</td></tr></table>>];
    bb403__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">403</td></tr><tr><td align="left" balign="left">StorageLive(_957)<br/>_957 = ((_952 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_959)<br/>_959 = _957<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _959)</td></tr></table>>];
    bb404__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">404</td></tr><tr><td align="left" balign="left">StorageDead(_959)<br/>StorageDead(_957)<br/>StorageDead(_952)<br/>StorageDead(_951)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb405__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">405</td></tr><tr><td align="left" balign="left">_989 = ((*_2).5: [state::user::Order; 32])[_990]<br/>_988 = Option::&lt;Order&gt;::Some(move _989)<br/>StorageDead(_989)<br/>StorageLive(_993)<br/>StorageLive(_994)<br/>_994 = (*_9)<br/>_993 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _994)<br/>StorageDead(_994)<br/>StorageLive(_995)<br/>StorageLive(_996)<br/>StorageLive(_997)<br/>_997 = _8<br/>_998 = Len(((*_6).5: [state::user::Order; 32]))<br/>_999 = Lt(_997, _998)<br/></td></tr><tr><td align="left">assert(move _999, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _998, _997)</td></tr></table>>];
    bb406__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">406</td></tr><tr><td align="left" balign="left">_996 = ((*_6).5: [state::user::Order; 32])[_997]<br/>_995 = Option::&lt;Order&gt;::Some(move _996)<br/>StorageDead(_996)<br/>StorageLive(_1000)<br/>StorageLive(_1001)<br/>StorageLive(_1002)<br/>StorageLive(_1003)<br/>StorageLive(_1004)<br/>_1004 = &amp;mut (*_22)<br/>StorageLive(_1005)<br/>StorageLive(_1006)<br/>StorageLive(_1007)<br/>StorageLive(_1008)<br/>_1008 = &amp;(*_1)<br/></td></tr><tr><td align="left">_1007 = PerpMarket::oracle_id(move _1008)</td></tr></table>>];
    bb407__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">407</td></tr><tr><td align="left" balign="left">StorageDead(_1008)<br/>_1006 = &amp;_1007<br/>_1005 = &amp;(*_1006)<br/></td></tr><tr><td align="left">_1003 = OracleMap::&lt;'_&gt;::get_price_data(move _1004, move _1005)</td></tr></table>>];
    bb408__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">408</td></tr><tr><td align="left" balign="left">StorageDead(_1005)<br/>StorageDead(_1004)<br/></td></tr><tr><td align="left">_1002 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _1003)</td></tr></table>>];
    bb409__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">409</td></tr><tr><td align="left" balign="left">StorageDead(_1003)<br/>_1009 = discriminant(_1002)<br/></td></tr><tr><td align="left">switchInt(move _1009)</td></tr></table>>];
    bb410__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">410</td></tr><tr><td align="left" balign="left">StorageLive(_1013)<br/>_1013 = ((_1002 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_1001 = _1013<br/>StorageDead(_1013)<br/>_1000 = ((*_1001).0: i64)<br/>StorageLive(_1014)<br/>_1014 = _928<br/>StorageLive(_1015)<br/>_1015 = _937<br/>StorageLive(_1016)<br/>_1016 = _938<br/>StorageLive(_1017)<br/>_1017 = _949<br/>StorageLive(_1018)<br/>_1018 = _950<br/>StorageLive(_1019)<br/>_1019 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_963 = get_order_action_record(move _964, move _965, move _966, move _967, move _968, move _970, move _972, move _974, move _976, move _978, move _980, move _982, move _984, move _985, move _986, move _988, move _993, move _995, move _1000, move _1014, move _1015, move _1016, move _1017, move _1018, move _1019)</td></tr></table>>];
    bb411__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">411</td></tr><tr><td align="left" balign="left">StorageLive(_1010)<br/>_1010 = ((_1002 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1012)<br/>_1012 = _1010<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1012)</td></tr></table>>];
    bb412__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">412</td></tr><tr><td align="left" balign="left">StorageDead(_1012)<br/>StorageDead(_1010)<br/>StorageDead(_1000)<br/>StorageDead(_995)<br/>StorageDead(_993)<br/>StorageDead(_988)<br/>StorageDead(_986)<br/>StorageDead(_985)<br/>StorageDead(_984)<br/>StorageDead(_982)<br/>StorageDead(_980)<br/>StorageDead(_978)<br/>StorageDead(_976)<br/>StorageDead(_974)<br/>StorageDead(_972)<br/>StorageDead(_970)<br/>StorageDead(_968)<br/>StorageDead(_967)<br/>StorageDead(_966)<br/>StorageDead(_965)<br/>StorageDead(_964)<br/>StorageDead(_963)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb413__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">413</td></tr><tr><td align="left" balign="left">StorageDead(_1019)<br/>StorageDead(_1018)<br/>StorageDead(_1017)<br/>StorageDead(_1016)<br/>StorageDead(_1015)<br/>StorageDead(_1014)<br/>StorageDead(_1000)<br/>StorageDead(_995)<br/>StorageDead(_993)<br/>StorageDead(_988)<br/>StorageDead(_986)<br/>StorageDead(_985)<br/>StorageDead(_984)<br/>StorageDead(_982)<br/>StorageDead(_980)<br/>StorageDead(_978)<br/>StorageDead(_976)<br/>StorageDead(_974)<br/>StorageDead(_972)<br/>StorageDead(_970)<br/>StorageDead(_968)<br/>StorageDead(_967)<br/>StorageDead(_966)<br/>StorageDead(_965)<br/>StorageDead(_964)<br/></td></tr><tr><td align="left">_962 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _963)</td></tr></table>>];
    bb414__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">414</td></tr><tr><td align="left" balign="left">StorageDead(_963)<br/>_1020 = discriminant(_962)<br/></td></tr><tr><td align="left">switchInt(move _1020)</td></tr></table>>];
    bb415__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">415</td></tr><tr><td align="left" balign="left">StorageLive(_1024)<br/>_1024 = move ((_962 as Continue).0: state::events::OrderActionRecord)<br/>_961 = move _1024<br/>StorageDead(_1024)<br/>StorageDead(_1007)<br/>StorageDead(_1006)<br/>StorageDead(_1002)<br/>StorageDead(_1001)<br/>StorageDead(_997)<br/>StorageDead(_990)<br/>StorageDead(_962)<br/>StorageLive(_1025)<br/>StorageLive(_1026)<br/>StorageLive(_1027)<br/>StorageLive(_1028)<br/>_1028 = move _961<br/></td></tr><tr><td align="left">_1027 = emit_stack::&lt;OrderActionRecord, 464&gt;(move _1028)</td></tr></table>>];
    bb416__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">416</td></tr><tr><td align="left" balign="left">StorageLive(_1021)<br/>_1021 = ((_962 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1023)<br/>_1023 = _1021<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1023)</td></tr></table>>];
    bb417__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">417</td></tr><tr><td align="left" balign="left">StorageDead(_1023)<br/>StorageDead(_1021)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb418__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">418</td></tr><tr><td align="left" balign="left">StorageDead(_1028)<br/></td></tr><tr><td align="left">_1026 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1027)</td></tr></table>>];
    bb419__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">419</td></tr><tr><td align="left" balign="left">StorageDead(_1027)<br/>_1029 = discriminant(_1026)<br/></td></tr><tr><td align="left">switchInt(move _1029)</td></tr></table>>];
    bb420__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">420</td></tr><tr><td align="left" balign="left">StorageLive(_1033)<br/>_1033 = ((_1026 as Continue).0: ())<br/>_1025 = _1033<br/>StorageDead(_1033)<br/>StorageDead(_1026)<br/>StorageDead(_1025)<br/>StorageLive(_1034)<br/>StorageLive(_1035)<br/>StorageLive(_1036)<br/>StorageLive(_1037)<br/>StorageLive(_1038)<br/>StorageLive(_1039)<br/>StorageLive(_1040)<br/>_1040 = _4<br/>_1041 = Len(((*_2).5: [state::user::Order; 32]))<br/>_1042 = Lt(_1040, _1041)<br/></td></tr><tr><td align="left">assert(move _1042, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1041, _1040)</td></tr></table>>];
    bb421__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">421</td></tr><tr><td align="left" balign="left">StorageLive(_1030)<br/>_1030 = ((_1026 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1032)<br/>_1032 = _1030<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1032)</td></tr></table>>];
    bb422__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">422</td></tr><tr><td align="left" balign="left">StorageDead(_1032)<br/>StorageDead(_1030)<br/>StorageDead(_1026)<br/>StorageDead(_1025)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb423__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">423</td></tr><tr><td align="left" balign="left">_1039 = &amp;((*_2).5: [state::user::Order; 32])[_1040]<br/>StorageLive(_1043)<br/>_1043 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_1038 = Order::get_base_asset_amount_unfilled(move _1039, move _1043)</td></tr></table>>];
    bb424__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">424</td></tr><tr><td align="left" balign="left">StorageDead(_1043)<br/>StorageDead(_1039)<br/></td></tr><tr><td align="left">_1037 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1038)</td></tr></table>>];
    bb425__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">425</td></tr><tr><td align="left" balign="left">StorageDead(_1038)<br/>_1044 = discriminant(_1037)<br/></td></tr><tr><td align="left">switchInt(move _1044)</td></tr></table>>];
    bb426__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">426</td></tr><tr><td align="left" balign="left">StorageLive(_1048)<br/>_1048 = ((_1037 as Continue).0: u64)<br/>_1036 = _1048<br/>StorageDead(_1048)<br/>_1035 = Eq(move _1036, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1035)</td></tr></table>>];
    bb427__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">427</td></tr><tr><td align="left" balign="left">StorageLive(_1045)<br/>_1045 = ((_1037 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1047)<br/>_1047 = _1045<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1047)</td></tr></table>>];
    bb428__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">428</td></tr><tr><td align="left" balign="left">StorageDead(_1047)<br/>StorageDead(_1045)<br/>StorageDead(_1040)<br/>StorageDead(_1037)<br/>StorageDead(_1036)<br/>StorageDead(_1035)<br/>StorageDead(_1034)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb429__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">429</td></tr><tr><td align="left" balign="left">StorageDead(_1040)<br/>StorageDead(_1037)<br/>StorageDead(_1036)<br/>StorageLive(_1049)<br/>StorageLive(_1050)<br/>_1050 = &amp;mut (*_2)<br/>StorageLive(_1051)<br/>StorageLive(_1052)<br/>StorageLive(_1053)<br/>_1053 = _4<br/>_1054 = Len(((*_2).5: [state::user::Order; 32]))<br/>_1055 = Lt(_1053, _1054)<br/></td></tr><tr><td align="left">assert(move _1055, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1054, _1053)</td></tr></table>>];
    bb430__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">430</td></tr><tr><td align="left" balign="left">StorageDead(_1040)<br/>StorageDead(_1037)<br/>StorageDead(_1036)<br/>_1034 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb431__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">431</td></tr><tr><td align="left" balign="left">_1052 = &amp;((*_2).5: [state::user::Order; 32])[_1053]<br/></td></tr><tr><td align="left">_1051 = Order::has_auction(move _1052)</td></tr></table>>];
    bb432__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">432</td></tr><tr><td align="left" balign="left">StorageDead(_1052)<br/></td></tr><tr><td align="left">_1049 = User::decrement_open_orders(move _1050, move _1051)</td></tr></table>>];
    bb433__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">433</td></tr><tr><td align="left" balign="left">StorageDead(_1051)<br/>StorageDead(_1050)<br/>StorageDead(_1053)<br/>StorageDead(_1049)<br/>StorageLive(_1056)<br/>_1056 = OrderStatus::Filled<br/>StorageLive(_1057)<br/>_1057 = _4<br/>_1058 = Len(((*_2).5: [state::user::Order; 32]))<br/>_1059 = Lt(_1057, _1058)<br/></td></tr><tr><td align="left">assert(move _1059, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1058, _1057)</td></tr></table>>];
    bb434__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">434</td></tr><tr><td align="left" balign="left">(((*_2).5: [state::user::Order; 32])[_1057].12: state::user::OrderStatus) = move _1056<br/>StorageDead(_1056)<br/>StorageDead(_1057)<br/>StorageLive(_1060)<br/>StorageLive(_1061)<br/>_1061 = _458<br/>_1062 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_1063 = Lt(_1061, _1062)<br/></td></tr><tr><td align="left">assert(move _1063, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1062, _1061)</td></tr></table>>];
    bb435__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">435</td></tr><tr><td align="left" balign="left">_1060 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_1061]<br/>_1064 = CheckedSub(((*_1060).14: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_1064.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, ((*_1060).14: u8), const 1_u8)</td></tr></table>>];
    bb436__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">436</td></tr><tr><td align="left" balign="left">((*_1060).14: u8) = move (_1064.0: u8)<br/>_1034 = const ()<br/>StorageDead(_1061)<br/>StorageDead(_1060)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb437__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">437</td></tr><tr><td align="left" balign="left">StorageDead(_1035)<br/>StorageDead(_1034)<br/>StorageLive(_1065)<br/>StorageLive(_1066)<br/>StorageLive(_1067)<br/>StorageLive(_1068)<br/>StorageLive(_1069)<br/>StorageLive(_1070)<br/>StorageLive(_1071)<br/>_1071 = _8<br/>_1072 = Len(((*_6).5: [state::user::Order; 32]))<br/>_1073 = Lt(_1071, _1072)<br/></td></tr><tr><td align="left">assert(move _1073, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1072, _1071)</td></tr></table>>];
    bb438__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">438</td></tr><tr><td align="left" balign="left">_1070 = &amp;((*_6).5: [state::user::Order; 32])[_1071]<br/>StorageLive(_1074)<br/>_1074 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_1069 = Order::get_base_asset_amount_unfilled(move _1070, move _1074)</td></tr></table>>];
    bb439__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">439</td></tr><tr><td align="left" balign="left">StorageDead(_1074)<br/>StorageDead(_1070)<br/></td></tr><tr><td align="left">_1068 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1069)</td></tr></table>>];
    bb440__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">440</td></tr><tr><td align="left" balign="left">StorageDead(_1069)<br/>_1075 = discriminant(_1068)<br/></td></tr><tr><td align="left">switchInt(move _1075)</td></tr></table>>];
    bb441__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">441</td></tr><tr><td align="left" balign="left">StorageLive(_1079)<br/>_1079 = ((_1068 as Continue).0: u64)<br/>_1067 = _1079<br/>StorageDead(_1079)<br/>_1066 = Eq(move _1067, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1066)</td></tr></table>>];
    bb442__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">442</td></tr><tr><td align="left" balign="left">StorageLive(_1076)<br/>_1076 = ((_1068 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1078)<br/>_1078 = _1076<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1078)</td></tr></table>>];
    bb443__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">443</td></tr><tr><td align="left" balign="left">StorageDead(_1078)<br/>StorageDead(_1076)<br/>StorageDead(_1071)<br/>StorageDead(_1068)<br/>StorageDead(_1067)<br/>StorageDead(_1066)<br/>StorageDead(_1065)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb444__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">444</td></tr><tr><td align="left" balign="left">StorageDead(_1071)<br/>StorageDead(_1068)<br/>StorageDead(_1067)<br/>StorageLive(_1080)<br/>StorageLive(_1081)<br/>_1081 = &amp;mut (*_6)<br/>StorageLive(_1082)<br/>StorageLive(_1083)<br/>StorageLive(_1084)<br/>_1084 = _8<br/>_1085 = Len(((*_6).5: [state::user::Order; 32]))<br/>_1086 = Lt(_1084, _1085)<br/></td></tr><tr><td align="left">assert(move _1086, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1085, _1084)</td></tr></table>>];
    bb445__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">445</td></tr><tr><td align="left" balign="left">StorageDead(_1071)<br/>StorageDead(_1068)<br/>StorageDead(_1067)<br/>_1065 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb446__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">446</td></tr><tr><td align="left" balign="left">_1083 = &amp;((*_6).5: [state::user::Order; 32])[_1084]<br/></td></tr><tr><td align="left">_1082 = Order::has_auction(move _1083)</td></tr></table>>];
    bb447__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">447</td></tr><tr><td align="left" balign="left">StorageDead(_1083)<br/></td></tr><tr><td align="left">_1080 = User::decrement_open_orders(move _1081, move _1082)</td></tr></table>>];
    bb448__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">448</td></tr><tr><td align="left" balign="left">StorageDead(_1082)<br/>StorageDead(_1081)<br/>StorageDead(_1084)<br/>StorageDead(_1080)<br/>StorageLive(_1087)<br/>_1087 = OrderStatus::Filled<br/>StorageLive(_1088)<br/>_1088 = _8<br/>_1089 = Len(((*_6).5: [state::user::Order; 32]))<br/>_1090 = Lt(_1088, _1089)<br/></td></tr><tr><td align="left">assert(move _1090, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1089, _1088)</td></tr></table>>];
    bb449__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">449</td></tr><tr><td align="left" balign="left">(((*_6).5: [state::user::Order; 32])[_1088].12: state::user::OrderStatus) = move _1087<br/>StorageDead(_1087)<br/>StorageDead(_1088)<br/>StorageLive(_1091)<br/>StorageLive(_1092)<br/>_1092 = _387<br/>_1093 = Len(((*_6).4: [state::user::PerpPosition; 8]))<br/>_1094 = Lt(_1092, _1093)<br/></td></tr><tr><td align="left">assert(move _1094, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1093, _1092)</td></tr></table>>];
    bb450__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">450</td></tr><tr><td align="left" balign="left">_1091 = &amp;mut ((*_6).4: [state::user::PerpPosition; 8])[_1092]<br/>_1095 = CheckedSub(((*_1091).14: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_1095.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, ((*_1091).14: u8), const 1_u8)</td></tr></table>>];
    bb451__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">451</td></tr><tr><td align="left" balign="left">((*_1091).14: u8) = move (_1095.0: u8)<br/>_1065 = const ()<br/>StorageDead(_1092)<br/>StorageDead(_1091)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb452__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">452</td></tr><tr><td align="left" balign="left">StorageDead(_1066)<br/>StorageDead(_1065)<br/>StorageLive(_1096)<br/>StorageLive(_1097)<br/>_1097 = _223<br/>StorageLive(_1098)<br/>_1098 = _222<br/>StorageLive(_1099)<br/>_1099 = _329<br/>_1096 = (move _1097, move _1098, move _1099)<br/>StorageDead(_1099)<br/>StorageDead(_1098)<br/>StorageDead(_1097)<br/>_0 = std::result::Result::&lt;(u64, u64, u64), error::ErrorCode&gt;::Ok(move _1096)<br/>StorageDead(_1096)<br/>StorageDead(_961)<br/>StorageDead(_950)<br/>StorageDead(_949)<br/>StorageDead(_938)<br/>StorageDead(_937)<br/>StorageDead(_928)<br/>StorageDead(_921)<br/>StorageDead(_914)<br/>StorageDead(_537)<br/>StorageDead(_536)<br/>StorageDead(_535)<br/>StorageDead(_534)<br/>StorageDead(_533)<br/>StorageDead(_532)<br/>StorageDead(_520)<br/>StorageDead(_517)<br/>StorageDead(_514)<br/>StorageDead(_472)<br/>StorageDead(_458)<br/>StorageDead(_401)<br/>StorageDead(_387)<br/>StorageDead(_330)<br/>StorageDead(_329)<br/>StorageDead(_315)<br/>StorageDead(_299)<br/>StorageDead(_298)<br/>StorageDead(_224)<br/>StorageDead(_223)<br/>StorageDead(_222)<br/>StorageDead(_197)<br/>StorageDead(_179)<br/>StorageDead(_149)<br/>StorageDead(_135)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/>StorageDead(_114)<br/>StorageDead(_100)<br/>StorageDead(_89)<br/>StorageDead(_56)<br/>StorageDead(_52)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb453__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">453</td></tr><tr><td align="left" balign="left">StorageDead(_1007)<br/>StorageDead(_1006)<br/>StorageDead(_1002)<br/>StorageDead(_1001)<br/>StorageDead(_997)<br/>StorageDead(_990)<br/>StorageDead(_962)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb454__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">454</td></tr><tr><td align="left" balign="left">StorageDead(_961)<br/>StorageDead(_950)<br/>StorageDead(_949)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb455__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">455</td></tr><tr><td align="left" balign="left">StorageDead(_938)<br/>StorageDead(_937)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb456__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">456</td></tr><tr><td align="left" balign="left">StorageDead(_928)<br/>StorageDead(_921)<br/>StorageDead(_914)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb457__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">457</td></tr><tr><td align="left" balign="left">StorageDead(_812)<br/>StorageDead(_807)<br/>StorageDead(_806)<br/>StorageDead(_804)<br/>StorageDead(_803)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb458__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">458</td></tr><tr><td align="left" balign="left">StorageDead(_802)<br/>StorageDead(_798)<br/>StorageDead(_797)<br/>StorageDead(_796)<br/>StorageDead(_789)<br/>StorageDead(_788)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb459__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">459</td></tr><tr><td align="left" balign="left">StorageDead(_769)<br/>StorageDead(_768)<br/>StorageDead(_765)<br/>StorageDead(_764)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb460__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">460</td></tr><tr><td align="left" balign="left">StorageDead(_751)<br/>StorageDead(_746)<br/>StorageDead(_745)<br/>StorageDead(_742)<br/>StorageDead(_741)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb461__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">461</td></tr><tr><td align="left" balign="left">StorageDead(_726)<br/>StorageDead(_724)<br/>StorageDead(_723)<br/>StorageDead(_722)<br/>StorageDead(_720)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb462__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">462</td></tr><tr><td align="left" balign="left">StorageDead(_697)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb463__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">463</td></tr><tr><td align="left" balign="left">StorageDead(_684)<br/>StorageDead(_679)<br/>StorageDead(_678)<br/>StorageDead(_675)<br/>StorageDead(_674)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb464__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">464</td></tr><tr><td align="left" balign="left">StorageDead(_640)<br/>StorageDead(_634)<br/>StorageDead(_633)<br/>StorageDead(_630)<br/>StorageDead(_629)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb465__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">465</td></tr><tr><td align="left" balign="left">StorageDead(_601)<br/>StorageDead(_606)<br/>StorageDead(_602)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb466__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">466</td></tr><tr><td align="left" balign="left">StorageDead(_583)<br/>StorageDead(_588)<br/>StorageDead(_584)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb467__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">467</td></tr><tr><td align="left" balign="left">StorageDead(_565)<br/>StorageDead(_570)<br/>StorageDead(_566)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb468__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">468</td></tr><tr><td align="left" balign="left">StorageDead(_537)<br/>StorageDead(_536)<br/>StorageDead(_535)<br/>StorageDead(_534)<br/>StorageDead(_533)<br/>StorageDead(_532)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb469__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">469</td></tr><tr><td align="left" balign="left">StorageDead(_520)<br/>StorageDead(_517)<br/>StorageDead(_514)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb470__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">470</td></tr><tr><td align="left" balign="left">StorageDead(_472)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb471__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">471</td></tr><tr><td align="left" balign="left">StorageDead(_458)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb472__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">472</td></tr><tr><td align="left" balign="left">StorageDead(_431)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb473__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">473</td></tr><tr><td align="left" balign="left">StorageDead(_401)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb474__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">474</td></tr><tr><td align="left" balign="left">StorageDead(_387)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb475__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">475</td></tr><tr><td align="left" balign="left">StorageDead(_330)<br/>StorageDead(_329)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb476__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">476</td></tr><tr><td align="left" balign="left">StorageDead(_315)<br/>StorageDead(_299)<br/>StorageDead(_298)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb477__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">477</td></tr><tr><td align="left" balign="left">StorageDead(_238)<br/>StorageDead(_235)<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb478__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">478</td></tr><tr><td align="left" balign="left">StorageDead(_224)<br/>StorageDead(_223)<br/>StorageDead(_222)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb479__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">479</td></tr><tr><td align="left" balign="left">StorageDead(_197)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb480__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">480</td></tr><tr><td align="left" balign="left">StorageDead(_179)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb481__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">481</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb482__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">482</td></tr><tr><td align="left" balign="left">StorageDead(_135)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb483__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">483</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb484__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">484</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb485__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">485</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb486__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">486</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb487__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">487</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb488__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">488</td></tr><tr><td align="left">return</td></tr></table>>];
    bb489__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">489 (cleanup)</td></tr><tr><td align="left">drop(_161)</td></tr></table>>];
    bb490__0_540 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">490 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_540 -> bb1__0_540 [label="success"];
    bb1__0_540 -> bb2__0_540 [label="success"];
    bb2__0_540 -> bb3__0_540 [label="return"];
    bb3__0_540 -> bb5__0_540 [label="0"];
    bb3__0_540 -> bb4__0_540 [label="otherwise"];
    bb4__0_540 -> bb6__0_540 [label="return"];
    bb5__0_540 -> bb488__0_540 [label=""];
    bb6__0_540 -> bb7__0_540 [label="return"];
    bb7__0_540 -> bb8__0_540 [label="return"];
    bb8__0_540 -> bb9__0_540 [label="0"];
    bb8__0_540 -> bb11__0_540 [label="1"];
    bb8__0_540 -> bb10__0_540 [label="otherwise"];
    bb9__0_540 -> bb13__0_540 [label="success"];
    bb11__0_540 -> bb12__0_540 [label="return"];
    bb12__0_540 -> bb487__0_540 [label=""];
    bb13__0_540 -> bb14__0_540 [label="1"];
    bb13__0_540 -> bb15__0_540 [label="otherwise"];
    bb14__0_540 -> bb28__0_540 [label=""];
    bb15__0_540 -> bb16__0_540 [label="return"];
    bb16__0_540 -> bb17__0_540 [label="return"];
    bb17__0_540 -> bb18__0_540 [label="0"];
    bb17__0_540 -> bb19__0_540 [label="1"];
    bb17__0_540 -> bb10__0_540 [label="otherwise"];
    bb18__0_540 -> bb21__0_540 [label="success"];
    bb19__0_540 -> bb20__0_540 [label="return"];
    bb20__0_540 -> bb486__0_540 [label=""];
    bb21__0_540 -> bb22__0_540 [label="return"];
    bb22__0_540 -> bb23__0_540 [label="return"];
    bb23__0_540 -> bb24__0_540 [label="return"];
    bb24__0_540 -> bb25__0_540 [label="0"];
    bb24__0_540 -> bb26__0_540 [label="1"];
    bb24__0_540 -> bb10__0_540 [label="otherwise"];
    bb25__0_540 -> bb28__0_540 [label=""];
    bb26__0_540 -> bb27__0_540 [label="return"];
    bb27__0_540 -> bb486__0_540 [label=""];
    bb28__0_540 -> bb29__0_540 [label="return"];
    bb29__0_540 -> bb30__0_540 [label="return"];
    bb30__0_540 -> bb31__0_540 [label="0"];
    bb30__0_540 -> bb32__0_540 [label="1"];
    bb30__0_540 -> bb10__0_540 [label="otherwise"];
    bb31__0_540 -> bb34__0_540 [label="success"];
    bb32__0_540 -> bb33__0_540 [label="return"];
    bb33__0_540 -> bb485__0_540 [label=""];
    bb34__0_540 -> bb35__0_540 [label="return"];
    bb35__0_540 -> bb36__0_540 [label="return"];
    bb36__0_540 -> bb37__0_540 [label="0"];
    bb36__0_540 -> bb38__0_540 [label="1"];
    bb36__0_540 -> bb10__0_540 [label="otherwise"];
    bb37__0_540 -> bb40__0_540 [label="success"];
    bb38__0_540 -> bb39__0_540 [label="return"];
    bb39__0_540 -> bb484__0_540 [label=""];
    bb40__0_540 -> bb41__0_540 [label="return"];
    bb41__0_540 -> bb42__0_540 [label="return"];
    bb42__0_540 -> bb43__0_540 [label="0"];
    bb42__0_540 -> bb44__0_540 [label="1"];
    bb42__0_540 -> bb10__0_540 [label="otherwise"];
    bb43__0_540 -> bb46__0_540 [label="return"];
    bb44__0_540 -> bb45__0_540 [label="return"];
    bb45__0_540 -> bb483__0_540 [label=""];
    bb46__0_540 -> bb47__0_540 [label="success"];
    bb47__0_540 -> bb48__0_540 [label="return"];
    bb48__0_540 -> bb49__0_540 [label="return"];
    bb49__0_540 -> bb50__0_540 [label="0"];
    bb49__0_540 -> bb51__0_540 [label="1"];
    bb49__0_540 -> bb10__0_540 [label="otherwise"];
    bb50__0_540 -> bb53__0_540 [label="return"];
    bb51__0_540 -> bb52__0_540 [label="return"];
    bb52__0_540 -> bb482__0_540 [label=""];
    bb53__0_540 -> bb54__0_540 [label="0"];
    bb53__0_540 -> bb62__0_540 [label="otherwise"];
    bb54__0_540 -> bb55__0_540 [label="return"];
    bb55__0_540 -> bb56__0_540 [label="return"];
    bb56__0_540 -> bb57__0_540 [label="return"];
    bb57__0_540 -> bb58__0_540 [label="return"];
    bb58__0_540 -> bb59__0_540 [label="return"];
    bb58__0_540 -> bb489__0_540 [label="unwind"];
    bb59__0_540 -> bb60__0_540 [label="return"];
    bb59__0_540 -> bb489__0_540 [label="unwind"];
    bb60__0_540 -> bb61__0_540 [label="return"];
    bb60__0_540 -> bb490__0_540 [label="unwind"];
    bb61__0_540 -> bb481__0_540 [label=""];
    bb62__0_540 -> bb63__0_540 [label="return"];
    bb63__0_540 -> bb64__0_540 [label="return"];
    bb64__0_540 -> bb65__0_540 [label="0"];
    bb64__0_540 -> bb66__0_540 [label="1"];
    bb64__0_540 -> bb10__0_540 [label="otherwise"];
    bb65__0_540 -> bb69__0_540 [label="0"];
    bb65__0_540 -> bb68__0_540 [label="otherwise"];
    bb66__0_540 -> bb67__0_540 [label="return"];
    bb67__0_540 -> bb481__0_540 [label=""];
    bb68__0_540 -> bb480__0_540 [label=""];
    bb69__0_540 -> bb70__0_540 [label="return"];
    bb70__0_540 -> bb71__0_540 [label="return"];
    bb71__0_540 -> bb72__0_540 [label="0"];
    bb71__0_540 -> bb73__0_540 [label="1"];
    bb71__0_540 -> bb10__0_540 [label="otherwise"];
    bb72__0_540 -> bb75__0_540 [label="return"];
    bb73__0_540 -> bb74__0_540 [label="return"];
    bb74__0_540 -> bb479__0_540 [label=""];
    bb75__0_540 -> bb76__0_540 [label="return"];
    bb76__0_540 -> bb77__0_540 [label="0"];
    bb76__0_540 -> bb78__0_540 [label="1"];
    bb76__0_540 -> bb10__0_540 [label="otherwise"];
    bb77__0_540 -> bb80__0_540 [label="success"];
    bb78__0_540 -> bb79__0_540 [label="return"];
    bb79__0_540 -> bb479__0_540 [label=""];
    bb80__0_540 -> bb81__0_540 [label="return"];
    bb81__0_540 -> bb82__0_540 [label="return"];
    bb82__0_540 -> bb83__0_540 [label="0"];
    bb82__0_540 -> bb84__0_540 [label="1"];
    bb82__0_540 -> bb10__0_540 [label="otherwise"];
    bb83__0_540 -> bb86__0_540 [label="return"];
    bb84__0_540 -> bb85__0_540 [label="return"];
    bb85__0_540 -> bb477__0_540 [label=""];
    bb86__0_540 -> bb87__0_540 [label="return"];
    bb87__0_540 -> bb88__0_540 [label="0"];
    bb87__0_540 -> bb89__0_540 [label="1"];
    bb87__0_540 -> bb10__0_540 [label="otherwise"];
    bb88__0_540 -> bb92__0_540 [label="0"];
    bb88__0_540 -> bb91__0_540 [label="otherwise"];
    bb89__0_540 -> bb90__0_540 [label="return"];
    bb90__0_540 -> bb477__0_540 [label=""];
    bb91__0_540 -> bb93__0_540 [label="return"];
    bb92__0_540 -> bb98__0_540 [label=""];
    bb93__0_540 -> bb94__0_540 [label="return"];
    bb94__0_540 -> bb95__0_540 [label="0"];
    bb94__0_540 -> bb96__0_540 [label="1"];
    bb94__0_540 -> bb10__0_540 [label="otherwise"];
    bb95__0_540 -> bb98__0_540 [label=""];
    bb96__0_540 -> bb97__0_540 [label="return"];
    bb97__0_540 -> bb478__0_540 [label=""];
    bb98__0_540 -> bb99__0_540 [label="return"];
    bb99__0_540 -> bb100__0_540 [label="return"];
    bb100__0_540 -> bb101__0_540 [label="0"];
    bb100__0_540 -> bb102__0_540 [label="1"];
    bb100__0_540 -> bb10__0_540 [label="otherwise"];
    bb101__0_540 -> bb104__0_540 [label="return"];
    bb102__0_540 -> bb103__0_540 [label="return"];
    bb103__0_540 -> bb478__0_540 [label=""];
    bb104__0_540 -> bb105__0_540 [label="success"];
    bb105__0_540 -> bb106__0_540 [label="return"];
    bb106__0_540 -> bb107__0_540 [label="return"];
    bb107__0_540 -> bb108__0_540 [label="0"];
    bb107__0_540 -> bb109__0_540 [label="1"];
    bb107__0_540 -> bb10__0_540 [label="otherwise"];
    bb108__0_540 -> bb111__0_540 [label="return"];
    bb109__0_540 -> bb110__0_540 [label="return"];
    bb110__0_540 -> bb476__0_540 [label=""];
    bb111__0_540 -> bb112__0_540 [label="return"];
    bb112__0_540 -> bb113__0_540 [label="0"];
    bb112__0_540 -> bb114__0_540 [label="1"];
    bb112__0_540 -> bb10__0_540 [label="otherwise"];
    bb113__0_540 -> bb116__0_540 [label="return"];
    bb114__0_540 -> bb115__0_540 [label="return"];
    bb115__0_540 -> bb476__0_540 [label=""];
    bb116__0_540 -> bb117__0_540 [label="return"];
    bb117__0_540 -> bb118__0_540 [label="0"];
    bb117__0_540 -> bb119__0_540 [label="1"];
    bb117__0_540 -> bb10__0_540 [label="otherwise"];
    bb118__0_540 -> bb121__0_540 [label="return"];
    bb119__0_540 -> bb120__0_540 [label="return"];
    bb120__0_540 -> bb475__0_540 [label=""];
    bb121__0_540 -> bb122__0_540 [label="return"];
    bb122__0_540 -> bb123__0_540 [label="0"];
    bb122__0_540 -> bb124__0_540 [label="1"];
    bb122__0_540 -> bb10__0_540 [label="otherwise"];
    bb123__0_540 -> bb126__0_540 [label="return"];
    bb124__0_540 -> bb125__0_540 [label="return"];
    bb125__0_540 -> bb475__0_540 [label=""];
    bb126__0_540 -> bb127__0_540 [label="return"];
    bb127__0_540 -> bb128__0_540 [label="0"];
    bb127__0_540 -> bb129__0_540 [label="1"];
    bb127__0_540 -> bb10__0_540 [label="otherwise"];
    bb128__0_540 -> bb131__0_540 [label="return"];
    bb129__0_540 -> bb130__0_540 [label="return"];
    bb130__0_540 -> bb475__0_540 [label=""];
    bb131__0_540 -> bb132__0_540 [label="return"];
    bb132__0_540 -> bb133__0_540 [label="0"];
    bb132__0_540 -> bb134__0_540 [label="1"];
    bb132__0_540 -> bb10__0_540 [label="otherwise"];
    bb133__0_540 -> bb136__0_540 [label="success"];
    bb134__0_540 -> bb135__0_540 [label="return"];
    bb135__0_540 -> bb475__0_540 [label=""];
    bb136__0_540 -> bb137__0_540 [label="return"];
    bb137__0_540 -> bb138__0_540 [label="return"];
    bb138__0_540 -> bb139__0_540 [label="0"];
    bb138__0_540 -> bb140__0_540 [label="1"];
    bb138__0_540 -> bb10__0_540 [label="otherwise"];
    bb139__0_540 -> bb142__0_540 [label="success"];
    bb140__0_540 -> bb141__0_540 [label="return"];
    bb141__0_540 -> bb474__0_540 [label=""];
    bb142__0_540 -> bb143__0_540 [label="return"];
    bb143__0_540 -> bb144__0_540 [label="return"];
    bb144__0_540 -> bb145__0_540 [label="0"];
    bb144__0_540 -> bb146__0_540 [label="1"];
    bb144__0_540 -> bb10__0_540 [label="otherwise"];
    bb145__0_540 -> bb148__0_540 [label="success"];
    bb146__0_540 -> bb147__0_540 [label="return"];
    bb147__0_540 -> bb473__0_540 [label=""];
    bb148__0_540 -> bb149__0_540 [label="return"];
    bb149__0_540 -> bb150__0_540 [label="return"];
    bb150__0_540 -> bb151__0_540 [label="0"];
    bb150__0_540 -> bb152__0_540 [label="1"];
    bb150__0_540 -> bb10__0_540 [label="otherwise"];
    bb151__0_540 -> bb155__0_540 [label="1"];
    bb151__0_540 -> bb154__0_540 [label="otherwise"];
    bb152__0_540 -> bb153__0_540 [label="return"];
    bb153__0_540 -> bb473__0_540 [label=""];
    bb154__0_540 -> bb161__0_540 [label="return"];
    bb155__0_540 -> bb156__0_540 [label="return"];
    bb156__0_540 -> bb157__0_540 [label="return"];
    bb157__0_540 -> bb158__0_540 [label="0"];
    bb157__0_540 -> bb159__0_540 [label="1"];
    bb157__0_540 -> bb10__0_540 [label="otherwise"];
    bb158__0_540 -> bb166__0_540 [label=""];
    bb159__0_540 -> bb160__0_540 [label="return"];
    bb160__0_540 -> bb472__0_540 [label=""];
    bb161__0_540 -> bb162__0_540 [label="return"];
    bb162__0_540 -> bb163__0_540 [label="0"];
    bb162__0_540 -> bb164__0_540 [label="1"];
    bb162__0_540 -> bb10__0_540 [label="otherwise"];
    bb163__0_540 -> bb166__0_540 [label=""];
    bb164__0_540 -> bb165__0_540 [label="return"];
    bb165__0_540 -> bb472__0_540 [label=""];
    bb166__0_540 -> bb167__0_540 [label="success"];
    bb167__0_540 -> bb168__0_540 [label="return"];
    bb168__0_540 -> bb169__0_540 [label="return"];
    bb169__0_540 -> bb170__0_540 [label="0"];
    bb169__0_540 -> bb171__0_540 [label="1"];
    bb169__0_540 -> bb10__0_540 [label="otherwise"];
    bb170__0_540 -> bb173__0_540 [label="success"];
    bb171__0_540 -> bb172__0_540 [label="return"];
    bb172__0_540 -> bb471__0_540 [label=""];
    bb173__0_540 -> bb174__0_540 [label="return"];
    bb174__0_540 -> bb175__0_540 [label="return"];
    bb175__0_540 -> bb176__0_540 [label="0"];
    bb175__0_540 -> bb177__0_540 [label="1"];
    bb175__0_540 -> bb10__0_540 [label="otherwise"];
    bb176__0_540 -> bb179__0_540 [label="success"];
    bb177__0_540 -> bb178__0_540 [label="return"];
    bb178__0_540 -> bb470__0_540 [label=""];
    bb179__0_540 -> bb180__0_540 [label="return"];
    bb180__0_540 -> bb181__0_540 [label="return"];
    bb181__0_540 -> bb182__0_540 [label="0"];
    bb181__0_540 -> bb183__0_540 [label="1"];
    bb181__0_540 -> bb10__0_540 [label="otherwise"];
    bb182__0_540 -> bb185__0_540 [label="return"];
    bb183__0_540 -> bb184__0_540 [label="return"];
    bb184__0_540 -> bb470__0_540 [label=""];
    bb185__0_540 -> bb186__0_540 [label="return"];
    bb186__0_540 -> bb187__0_540 [label="0"];
    bb186__0_540 -> bb188__0_540 [label="1"];
    bb186__0_540 -> bb10__0_540 [label="otherwise"];
    bb187__0_540 -> bb190__0_540 [label="return"];
    bb188__0_540 -> bb189__0_540 [label="return"];
    bb189__0_540 -> bb470__0_540 [label=""];
    bb190__0_540 -> bb191__0_540 [label="return"];
    bb191__0_540 -> bb198__0_540 [label="0"];
    bb191__0_540 -> bb192__0_540 [label="otherwise"];
    bb192__0_540 -> bb193__0_540 [label="return"];
    bb193__0_540 -> bb194__0_540 [label="return"];
    bb194__0_540 -> bb195__0_540 [label="0"];
    bb194__0_540 -> bb196__0_540 [label="1"];
    bb194__0_540 -> bb10__0_540 [label="otherwise"];
    bb195__0_540 -> bb199__0_540 [label=""];
    bb196__0_540 -> bb197__0_540 [label="return"];
    bb197__0_540 -> bb469__0_540 [label=""];
    bb198__0_540 -> bb199__0_540 [label=""];
    bb199__0_540 -> bb200__0_540 [label="success"];
    bb200__0_540 -> bb201__0_540 [label="return"];
    bb201__0_540 -> bb202__0_540 [label="return"];
    bb202__0_540 -> bb203__0_540 [label="return"];
    bb203__0_540 -> bb204__0_540 [label="0"];
    bb203__0_540 -> bb205__0_540 [label="1"];
    bb203__0_540 -> bb10__0_540 [label="otherwise"];
    bb204__0_540 -> bb207__0_540 [label="return"];
    bb205__0_540 -> bb206__0_540 [label="return"];
    bb206__0_540 -> bb469__0_540 [label=""];
    bb207__0_540 -> bb208__0_540 [label="return"];
    bb208__0_540 -> bb209__0_540 [label="0"];
    bb208__0_540 -> bb210__0_540 [label="1"];
    bb208__0_540 -> bb10__0_540 [label="otherwise"];
    bb209__0_540 -> bb212__0_540 [label="return"];
    bb210__0_540 -> bb211__0_540 [label="return"];
    bb211__0_540 -> bb467__0_540 [label=""];
    bb212__0_540 -> bb213__0_540 [label="return"];
    bb213__0_540 -> bb214__0_540 [label="0"];
    bb213__0_540 -> bb215__0_540 [label="1"];
    bb213__0_540 -> bb10__0_540 [label="otherwise"];
    bb214__0_540 -> bb217__0_540 [label="return"];
    bb215__0_540 -> bb216__0_540 [label="return"];
    bb216__0_540 -> bb467__0_540 [label=""];
    bb217__0_540 -> bb218__0_540 [label="return"];
    bb218__0_540 -> bb219__0_540 [label="0"];
    bb218__0_540 -> bb220__0_540 [label="1"];
    bb218__0_540 -> bb10__0_540 [label="otherwise"];
    bb219__0_540 -> bb222__0_540 [label="return"];
    bb220__0_540 -> bb221__0_540 [label="return"];
    bb221__0_540 -> bb466__0_540 [label=""];
    bb222__0_540 -> bb223__0_540 [label="return"];
    bb223__0_540 -> bb224__0_540 [label="0"];
    bb223__0_540 -> bb225__0_540 [label="1"];
    bb223__0_540 -> bb10__0_540 [label="otherwise"];
    bb224__0_540 -> bb227__0_540 [label="return"];
    bb225__0_540 -> bb226__0_540 [label="return"];
    bb226__0_540 -> bb466__0_540 [label=""];
    bb227__0_540 -> bb228__0_540 [label="return"];
    bb228__0_540 -> bb229__0_540 [label="0"];
    bb228__0_540 -> bb230__0_540 [label="1"];
    bb228__0_540 -> bb10__0_540 [label="otherwise"];
    bb229__0_540 -> bb232__0_540 [label="return"];
    bb230__0_540 -> bb231__0_540 [label="return"];
    bb231__0_540 -> bb465__0_540 [label=""];
    bb232__0_540 -> bb233__0_540 [label="return"];
    bb233__0_540 -> bb234__0_540 [label="0"];
    bb233__0_540 -> bb235__0_540 [label="1"];
    bb233__0_540 -> bb10__0_540 [label="otherwise"];
    bb234__0_540 -> bb237__0_540 [label="return"];
    bb235__0_540 -> bb236__0_540 [label="return"];
    bb236__0_540 -> bb465__0_540 [label=""];
    bb237__0_540 -> bb238__0_540 [label="return"];
    bb238__0_540 -> bb239__0_540 [label="0"];
    bb238__0_540 -> bb240__0_540 [label="1"];
    bb238__0_540 -> bb10__0_540 [label="otherwise"];
    bb239__0_540 -> bb242__0_540 [label="success"];
    bb240__0_540 -> bb241__0_540 [label="return"];
    bb241__0_540 -> bb468__0_540 [label=""];
    bb242__0_540 -> bb243__0_540 [label="return"];
    bb243__0_540 -> bb244__0_540 [label="return"];
    bb244__0_540 -> bb245__0_540 [label="0"];
    bb244__0_540 -> bb246__0_540 [label="1"];
    bb244__0_540 -> bb10__0_540 [label="otherwise"];
    bb245__0_540 -> bb248__0_540 [label="success"];
    bb246__0_540 -> bb247__0_540 [label="return"];
    bb247__0_540 -> bb464__0_540 [label=""];
    bb248__0_540 -> bb249__0_540 [label="return"];
    bb249__0_540 -> bb250__0_540 [label="return"];
    bb250__0_540 -> bb251__0_540 [label="0"];
    bb250__0_540 -> bb252__0_540 [label="1"];
    bb250__0_540 -> bb10__0_540 [label="otherwise"];
    bb251__0_540 -> bb254__0_540 [label="return"];
    bb252__0_540 -> bb253__0_540 [label="return"];
    bb253__0_540 -> bb464__0_540 [label=""];
    bb254__0_540 -> bb255__0_540 [label="return"];
    bb255__0_540 -> bb256__0_540 [label="0"];
    bb255__0_540 -> bb257__0_540 [label="1"];
    bb255__0_540 -> bb10__0_540 [label="otherwise"];
    bb256__0_540 -> bb259__0_540 [label="return"];
    bb257__0_540 -> bb258__0_540 [label="return"];
    bb258__0_540 -> bb468__0_540 [label=""];
    bb259__0_540 -> bb260__0_540 [label="return"];
    bb260__0_540 -> bb261__0_540 [label="0"];
    bb260__0_540 -> bb262__0_540 [label="1"];
    bb260__0_540 -> bb10__0_540 [label="otherwise"];
    bb261__0_540 -> bb264__0_540 [label="success"];
    bb262__0_540 -> bb263__0_540 [label="return"];
    bb263__0_540 -> bb468__0_540 [label=""];
    bb264__0_540 -> bb265__0_540 [label="return"];
    bb265__0_540 -> bb266__0_540 [label="return"];
    bb266__0_540 -> bb267__0_540 [label="0"];
    bb266__0_540 -> bb268__0_540 [label="1"];
    bb266__0_540 -> bb10__0_540 [label="otherwise"];
    bb267__0_540 -> bb270__0_540 [label="return"];
    bb268__0_540 -> bb269__0_540 [label="return"];
    bb269__0_540 -> bb463__0_540 [label=""];
    bb270__0_540 -> bb271__0_540 [label="return"];
    bb271__0_540 -> bb272__0_540 [label="0"];
    bb271__0_540 -> bb273__0_540 [label="1"];
    bb271__0_540 -> bb10__0_540 [label="otherwise"];
    bb272__0_540 -> bb276__0_540 [label="1"];
    bb272__0_540 -> bb275__0_540 [label="otherwise"];
    bb273__0_540 -> bb274__0_540 [label="return"];
    bb274__0_540 -> bb463__0_540 [label=""];
    bb275__0_540 -> bb282__0_540 [label="return"];
    bb276__0_540 -> bb277__0_540 [label="return"];
    bb277__0_540 -> bb278__0_540 [label="return"];
    bb278__0_540 -> bb279__0_540 [label="0"];
    bb278__0_540 -> bb280__0_540 [label="1"];
    bb278__0_540 -> bb10__0_540 [label="otherwise"];
    bb279__0_540 -> bb287__0_540 [label=""];
    bb280__0_540 -> bb281__0_540 [label="return"];
    bb281__0_540 -> bb462__0_540 [label=""];
    bb282__0_540 -> bb283__0_540 [label="return"];
    bb283__0_540 -> bb284__0_540 [label="0"];
    bb283__0_540 -> bb285__0_540 [label="1"];
    bb283__0_540 -> bb10__0_540 [label="otherwise"];
    bb284__0_540 -> bb287__0_540 [label=""];
    bb285__0_540 -> bb286__0_540 [label="return"];
    bb286__0_540 -> bb462__0_540 [label=""];
    bb287__0_540 -> bb288__0_540 [label="1"];
    bb287__0_540 -> bb321__0_540 [label="otherwise"];
    bb288__0_540 -> bb318__0_540 [label="0"];
    bb288__0_540 -> bb289__0_540 [label="otherwise"];
    bb289__0_540 -> bb290__0_540 [label="return"];
    bb290__0_540 -> bb291__0_540 [label="return"];
    bb291__0_540 -> bb292__0_540 [label="return"];
    bb292__0_540 -> bb293__0_540 [label="0"];
    bb292__0_540 -> bb294__0_540 [label="1"];
    bb292__0_540 -> bb10__0_540 [label="otherwise"];
    bb293__0_540 -> bb296__0_540 [label="success"];
    bb294__0_540 -> bb295__0_540 [label="return"];
    bb295__0_540 -> bb461__0_540 [label=""];
    bb296__0_540 -> bb297__0_540 [label="return"];
    bb297__0_540 -> bb298__0_540 [label="return"];
    bb298__0_540 -> bb299__0_540 [label="0"];
    bb298__0_540 -> bb300__0_540 [label="1"];
    bb298__0_540 -> bb10__0_540 [label="otherwise"];
    bb299__0_540 -> bb302__0_540 [label="return"];
    bb300__0_540 -> bb301__0_540 [label="return"];
    bb301__0_540 -> bb460__0_540 [label=""];
    bb302__0_540 -> bb303__0_540 [label="return"];
    bb303__0_540 -> bb304__0_540 [label="0"];
    bb303__0_540 -> bb305__0_540 [label="1"];
    bb303__0_540 -> bb10__0_540 [label="otherwise"];
    bb304__0_540 -> bb307__0_540 [label="return"];
    bb305__0_540 -> bb306__0_540 [label="return"];
    bb306__0_540 -> bb460__0_540 [label=""];
    bb307__0_540 -> bb308__0_540 [label="return"];
    bb308__0_540 -> bb309__0_540 [label="return"];
    bb309__0_540 -> bb310__0_540 [label="0"];
    bb309__0_540 -> bb311__0_540 [label="1"];
    bb309__0_540 -> bb10__0_540 [label="otherwise"];
    bb310__0_540 -> bb313__0_540 [label="return"];
    bb311__0_540 -> bb312__0_540 [label="return"];
    bb312__0_540 -> bb459__0_540 [label=""];
    bb313__0_540 -> bb314__0_540 [label="return"];
    bb314__0_540 -> bb315__0_540 [label="0"];
    bb314__0_540 -> bb316__0_540 [label="1"];
    bb314__0_540 -> bb10__0_540 [label="otherwise"];
    bb315__0_540 -> bb319__0_540 [label=""];
    bb316__0_540 -> bb317__0_540 [label="return"];
    bb317__0_540 -> bb459__0_540 [label=""];
    bb318__0_540 -> bb319__0_540 [label=""];
    bb319__0_540 -> bb320__0_540 [label="return"];
    bb320__0_540 -> bb322__0_540 [label=""];
    bb321__0_540 -> bb322__0_540 [label=""];
    bb322__0_540 -> bb323__0_540 [label="return"];
    bb323__0_540 -> bb324__0_540 [label="return"];
    bb324__0_540 -> bb325__0_540 [label="1"];
    bb324__0_540 -> bb349__0_540 [label="otherwise"];
    bb325__0_540 -> bb326__0_540 [label="1"];
    bb325__0_540 -> bb349__0_540 [label="otherwise"];
    bb326__0_540 -> bb327__0_540 [label="return"];
    bb327__0_540 -> bb328__0_540 [label="0"];
    bb327__0_540 -> bb347__0_540 [label="otherwise"];
    bb328__0_540 -> bb340__0_540 [label="0"];
    bb328__0_540 -> bb329__0_540 [label="otherwise"];
    bb329__0_540 -> bb330__0_540 [label="return"];
    bb330__0_540 -> bb331__0_540 [label="return"];
    bb331__0_540 -> bb332__0_540 [label="0"];
    bb331__0_540 -> bb333__0_540 [label="1"];
    bb331__0_540 -> bb10__0_540 [label="otherwise"];
    bb332__0_540 -> bb335__0_540 [label="return"];
    bb333__0_540 -> bb334__0_540 [label="return"];
    bb334__0_540 -> bb457__0_540 [label=""];
    bb335__0_540 -> bb336__0_540 [label="return"];
    bb336__0_540 -> bb337__0_540 [label="0"];
    bb336__0_540 -> bb338__0_540 [label="1"];
    bb336__0_540 -> bb10__0_540 [label="otherwise"];
    bb337__0_540 -> bb341__0_540 [label=""];
    bb338__0_540 -> bb339__0_540 [label="return"];
    bb339__0_540 -> bb457__0_540 [label=""];
    bb340__0_540 -> bb341__0_540 [label=""];
    bb341__0_540 -> bb342__0_540 [label="return"];
    bb342__0_540 -> bb343__0_540 [label="return"];
    bb343__0_540 -> bb344__0_540 [label="0"];
    bb343__0_540 -> bb345__0_540 [label="1"];
    bb343__0_540 -> bb10__0_540 [label="otherwise"];
    bb344__0_540 -> bb348__0_540 [label=""];
    bb345__0_540 -> bb346__0_540 [label="return"];
    bb346__0_540 -> bb458__0_540 [label=""];
    bb347__0_540 -> bb348__0_540 [label=""];
    bb348__0_540 -> bb350__0_540 [label=""];
    bb349__0_540 -> bb350__0_540 [label=""];
    bb350__0_540 -> bb351__0_540 [label="success"];
    bb351__0_540 -> bb352__0_540 [label="return"];
    bb352__0_540 -> bb353__0_540 [label="return"];
    bb353__0_540 -> bb354__0_540 [label="0"];
    bb353__0_540 -> bb355__0_540 [label="1"];
    bb353__0_540 -> bb10__0_540 [label="otherwise"];
    bb354__0_540 -> bb357__0_540 [label="success"];
    bb355__0_540 -> bb356__0_540 [label="return"];
    bb356__0_540 -> bb468__0_540 [label=""];
    bb357__0_540 -> bb358__0_540 [label="success"];
    bb358__0_540 -> bb359__0_540 [label="success"];
    bb359__0_540 -> bb360__0_540 [label="return"];
    bb360__0_540 -> bb361__0_540 [label="return"];
    bb361__0_540 -> bb362__0_540 [label="return"];
    bb362__0_540 -> bb363__0_540 [label="0"];
    bb362__0_540 -> bb364__0_540 [label="1"];
    bb362__0_540 -> bb10__0_540 [label="otherwise"];
    bb363__0_540 -> bb366__0_540 [label="success"];
    bb364__0_540 -> bb365__0_540 [label="return"];
    bb365__0_540 -> bb468__0_540 [label=""];
    bb366__0_540 -> bb367__0_540 [label="return"];
    bb367__0_540 -> bb368__0_540 [label="return"];
    bb368__0_540 -> bb369__0_540 [label="0"];
    bb368__0_540 -> bb370__0_540 [label="1"];
    bb368__0_540 -> bb10__0_540 [label="otherwise"];
    bb369__0_540 -> bb372__0_540 [label="success"];
    bb370__0_540 -> bb371__0_540 [label="return"];
    bb371__0_540 -> bb468__0_540 [label=""];
    bb372__0_540 -> bb373__0_540 [label="success"];
    bb373__0_540 -> bb374__0_540 [label="success"];
    bb374__0_540 -> bb375__0_540 [label="return"];
    bb375__0_540 -> bb376__0_540 [label="return"];
    bb376__0_540 -> bb377__0_540 [label="return"];
    bb377__0_540 -> bb378__0_540 [label="0"];
    bb377__0_540 -> bb379__0_540 [label="1"];
    bb377__0_540 -> bb10__0_540 [label="otherwise"];
    bb378__0_540 -> bb381__0_540 [label="return"];
    bb379__0_540 -> bb380__0_540 [label="return"];
    bb380__0_540 -> bb468__0_540 [label=""];
    bb381__0_540 -> bb382__0_540 [label="return"];
    bb382__0_540 -> bb383__0_540 [label="return"];
    bb383__0_540 -> bb385__0_540 [label="0"];
    bb383__0_540 -> bb384__0_540 [label="otherwise"];
    bb384__0_540 -> bb391__0_540 [label=""];
    bb385__0_540 -> bb386__0_540 [label="success"];
    bb386__0_540 -> bb387__0_540 [label="return"];
    bb387__0_540 -> bb389__0_540 [label="0"];
    bb387__0_540 -> bb388__0_540 [label="otherwise"];
    bb388__0_540 -> bb390__0_540 [label=""];
    bb389__0_540 -> bb390__0_540 [label=""];
    bb390__0_540 -> bb391__0_540 [label=""];
    bb391__0_540 -> bb392__0_540 [label="success"];
    bb392__0_540 -> bb393__0_540 [label="return"];
    bb393__0_540 -> bb394__0_540 [label="return"];
    bb394__0_540 -> bb395__0_540 [label="return"];
    bb395__0_540 -> bb396__0_540 [label="return"];
    bb396__0_540 -> bb397__0_540 [label="0"];
    bb396__0_540 -> bb398__0_540 [label="1"];
    bb396__0_540 -> bb10__0_540 [label="otherwise"];
    bb397__0_540 -> bb400__0_540 [label="return"];
    bb398__0_540 -> bb399__0_540 [label="return"];
    bb399__0_540 -> bb456__0_540 [label=""];
    bb400__0_540 -> bb401__0_540 [label="return"];
    bb401__0_540 -> bb402__0_540 [label="0"];
    bb401__0_540 -> bb403__0_540 [label="1"];
    bb401__0_540 -> bb10__0_540 [label="otherwise"];
    bb402__0_540 -> bb405__0_540 [label="success"];
    bb403__0_540 -> bb404__0_540 [label="return"];
    bb404__0_540 -> bb455__0_540 [label=""];
    bb405__0_540 -> bb406__0_540 [label="success"];
    bb406__0_540 -> bb407__0_540 [label="return"];
    bb407__0_540 -> bb408__0_540 [label="return"];
    bb408__0_540 -> bb409__0_540 [label="return"];
    bb409__0_540 -> bb410__0_540 [label="0"];
    bb409__0_540 -> bb411__0_540 [label="1"];
    bb409__0_540 -> bb10__0_540 [label="otherwise"];
    bb410__0_540 -> bb413__0_540 [label="return"];
    bb411__0_540 -> bb412__0_540 [label="return"];
    bb412__0_540 -> bb453__0_540 [label=""];
    bb413__0_540 -> bb414__0_540 [label="return"];
    bb414__0_540 -> bb415__0_540 [label="0"];
    bb414__0_540 -> bb416__0_540 [label="1"];
    bb414__0_540 -> bb10__0_540 [label="otherwise"];
    bb415__0_540 -> bb418__0_540 [label="return"];
    bb416__0_540 -> bb417__0_540 [label="return"];
    bb417__0_540 -> bb453__0_540 [label=""];
    bb418__0_540 -> bb419__0_540 [label="return"];
    bb419__0_540 -> bb420__0_540 [label="0"];
    bb419__0_540 -> bb421__0_540 [label="1"];
    bb419__0_540 -> bb10__0_540 [label="otherwise"];
    bb420__0_540 -> bb423__0_540 [label="success"];
    bb421__0_540 -> bb422__0_540 [label="return"];
    bb422__0_540 -> bb454__0_540 [label=""];
    bb423__0_540 -> bb424__0_540 [label="return"];
    bb424__0_540 -> bb425__0_540 [label="return"];
    bb425__0_540 -> bb426__0_540 [label="0"];
    bb425__0_540 -> bb427__0_540 [label="1"];
    bb425__0_540 -> bb10__0_540 [label="otherwise"];
    bb426__0_540 -> bb430__0_540 [label="0"];
    bb426__0_540 -> bb429__0_540 [label="otherwise"];
    bb427__0_540 -> bb428__0_540 [label="return"];
    bb428__0_540 -> bb454__0_540 [label=""];
    bb429__0_540 -> bb431__0_540 [label="success"];
    bb430__0_540 -> bb437__0_540 [label=""];
    bb431__0_540 -> bb432__0_540 [label="return"];
    bb432__0_540 -> bb433__0_540 [label="return"];
    bb433__0_540 -> bb434__0_540 [label="success"];
    bb434__0_540 -> bb435__0_540 [label="success"];
    bb435__0_540 -> bb436__0_540 [label="success"];
    bb436__0_540 -> bb437__0_540 [label=""];
    bb437__0_540 -> bb438__0_540 [label="success"];
    bb438__0_540 -> bb439__0_540 [label="return"];
    bb439__0_540 -> bb440__0_540 [label="return"];
    bb440__0_540 -> bb441__0_540 [label="0"];
    bb440__0_540 -> bb442__0_540 [label="1"];
    bb440__0_540 -> bb10__0_540 [label="otherwise"];
    bb441__0_540 -> bb445__0_540 [label="0"];
    bb441__0_540 -> bb444__0_540 [label="otherwise"];
    bb442__0_540 -> bb443__0_540 [label="return"];
    bb443__0_540 -> bb454__0_540 [label=""];
    bb444__0_540 -> bb446__0_540 [label="success"];
    bb445__0_540 -> bb452__0_540 [label=""];
    bb446__0_540 -> bb447__0_540 [label="return"];
    bb447__0_540 -> bb448__0_540 [label="return"];
    bb448__0_540 -> bb449__0_540 [label="success"];
    bb449__0_540 -> bb450__0_540 [label="success"];
    bb450__0_540 -> bb451__0_540 [label="success"];
    bb451__0_540 -> bb452__0_540 [label=""];
    bb452__0_540 -> bb488__0_540 [label=""];
    bb453__0_540 -> bb454__0_540 [label=""];
    bb454__0_540 -> bb455__0_540 [label=""];
    bb455__0_540 -> bb456__0_540 [label=""];
    bb456__0_540 -> bb468__0_540 [label=""];
    bb457__0_540 -> bb458__0_540 [label=""];
    bb458__0_540 -> bb468__0_540 [label=""];
    bb459__0_540 -> bb461__0_540 [label=""];
    bb460__0_540 -> bb461__0_540 [label=""];
    bb461__0_540 -> bb468__0_540 [label=""];
    bb462__0_540 -> bb468__0_540 [label=""];
    bb463__0_540 -> bb468__0_540 [label=""];
    bb464__0_540 -> bb468__0_540 [label=""];
    bb465__0_540 -> bb468__0_540 [label=""];
    bb466__0_540 -> bb468__0_540 [label=""];
    bb467__0_540 -> bb468__0_540 [label=""];
    bb468__0_540 -> bb469__0_540 [label=""];
    bb469__0_540 -> bb470__0_540 [label=""];
    bb470__0_540 -> bb471__0_540 [label=""];
    bb471__0_540 -> bb473__0_540 [label=""];
    bb472__0_540 -> bb473__0_540 [label=""];
    bb473__0_540 -> bb474__0_540 [label=""];
    bb474__0_540 -> bb475__0_540 [label=""];
    bb475__0_540 -> bb476__0_540 [label=""];
    bb476__0_540 -> bb478__0_540 [label=""];
    bb477__0_540 -> bb478__0_540 [label=""];
    bb478__0_540 -> bb479__0_540 [label=""];
    bb479__0_540 -> bb480__0_540 [label=""];
    bb480__0_540 -> bb481__0_540 [label=""];
    bb481__0_540 -> bb482__0_540 [label=""];
    bb482__0_540 -> bb483__0_540 [label=""];
    bb483__0_540 -> bb484__0_540 [label=""];
    bb484__0_540 -> bb485__0_540 [label=""];
    bb485__0_540 -> bb486__0_540 [label=""];
    bb486__0_540 -> bb487__0_540 [label=""];
    bb487__0_540 -> bb488__0_540 [label=""];
    bb489__0_540 -> bb490__0_540 [label="return"];
}
