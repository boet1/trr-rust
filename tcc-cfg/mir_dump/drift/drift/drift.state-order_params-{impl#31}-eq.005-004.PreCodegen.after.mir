// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:859:66: 859:75>::eq` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:859:66: 859:75>::eq(_1: &SignedMsgOrderParamsMessage, _2: &SignedMsgOrderParamsMessage) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &state::order_params::OrderParams;
    let mut _5: &state::order_params::OrderParams;
    let mut _6: bool;
    let mut _7: u16;
    let mut _8: u16;
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: bool;
    let mut _13: &[u8; 8];
    let mut _14: &[u8; 8];
    let mut _15: bool;
    let mut _16: &std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _17: &std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _18: &std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _19: &std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: state::order_params::OrderParams);
        StorageLive(_5);
        _5 = &((*_2).0: state::order_params::OrderParams);
        _3 = <order_params::OrderParams as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb13, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u16);
        StorageLive(_8);
        _8 = ((*_2).1: u16);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb12, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: u64);
        StorageLive(_11);
        _11 = ((*_2).2: u64);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb11, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: [u8; 8]);
        StorageLive(_14);
        _14 = &((*_2).3: [u8; 8]);
        _12 = <[u8; 8] as PartialEq>::eq(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _12) -> [0: bb10, otherwise: bb6];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        StorageLive(_17);
        _17 = &((*_2).4: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        _15 = <Option<SignedMsgTriggerOrderParams> as PartialEq>::eq(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        _18 = &((*_1).5: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        StorageLive(_19);
        _19 = &((*_2).5: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        _0 = <Option<SignedMsgTriggerOrderParams> as PartialEq>::eq(move _18, move _19) -> [return: bb15, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb14;
    }

    bb10: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb14;
    }

    bb11: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb14;
    }

    bb12: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb14;
    }

    bb14: {
        _0 = const false;
        goto -> bb16;
    }

    bb15: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
