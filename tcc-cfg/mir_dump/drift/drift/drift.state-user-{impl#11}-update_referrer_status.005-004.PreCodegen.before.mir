// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_referrer_status` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_referrer_status(_1: &mut UserStats) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: (u8, bool);
    let mut _10: u8;
    let mut _11: u8;
    let mut _12: u8;
    let mut _13: (u8, bool);

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = &(*_5);
        _2 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _13 = CheckedAdd(const _, const 0_u8);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_u8) -> [success: bb6, unwind continue];
    }

    bb4: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _9 = CheckedAdd(const _, const 0_u8);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_u8) -> [success: bb5, unwind continue];
    }

    bb5: {
        _8 = move (_9.0: u8);
        _7 = move _8 as u8 (IntToInt);
        StorageDead(_8);
        ((*_1).13: u8) = BitOr(((*_1).13: u8), move _7);
        StorageDead(_7);
        _0 = const ();
        goto -> bb7;
    }

    bb6: {
        _12 = move (_13.0: u8);
        _11 = move _12 as u8 (IntToInt);
        StorageDead(_12);
        _10 = Not(move _11);
        StorageDead(_11);
        ((*_1).13: u8) = BitAnd(((*_1).13: u8), move _10);
        StorageDead(_10);
        _0 = const ();
        goto -> bb7;
    }

    bb7: {
        StorageDead(_2);
        return;
    }
}
