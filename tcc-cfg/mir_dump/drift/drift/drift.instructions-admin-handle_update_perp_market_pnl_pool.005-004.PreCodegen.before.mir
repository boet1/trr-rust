// MIR for `admin::handle_update_perp_market_pnl_pool` before PreCodegen

fn admin::handle_update_perp_market_pnl_pool(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdatePerpMarketPnlPool<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _26: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _31: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _39: std::result::Result<(), error::ErrorCode>;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: &state::spot_market::SpotBalanceType;
    let _50: &state::spot_market::SpotBalanceType;
    let _51: state::spot_market::SpotBalanceType;
    let mut _52: &mut state::spot_market::SpotMarket;
    let mut _53: &mut state::spot_market::SpotMarket;
    let mut _54: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _55: &mut dyn state::spot_market::SpotBalance;
    let mut _56: &mut state::perp_market::PoolBalance;
    let mut _57: &mut state::perp_market::PoolBalance;
    let mut _58: &mut state::perp_market::PerpMarket;
    let mut _59: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: i64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _67: std::result::Result<i64, error::ErrorCode>;
    let mut _68: &state::spot_market::SpotMarket;
    let _69: &state::spot_market::SpotMarket;
    let mut _70: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _71: u64;
    let mut _72: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _73: &anchor_spl::token_interface::TokenAccount;
    let _74: &anchor_spl::token_interface::TokenAccount;
    let mut _75: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 2];
    let _95: &[core::fmt::rt::Argument<'_>; 2];
    let _96: [core::fmt::rt::Argument<'_>; 2];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &u16;
    let _99: &u16;
    let _100: &state::perp_market::PerpMarket;
    let mut _101: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &u64;
    let _104: &u64;
    let mut _105: ();
    let mut _108: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>;
    let mut _109: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>;
    let mut _110: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>;
    let mut _111: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>;
    let mut _112: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _13;
        let _25: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
        scope 10 {
            debug spot_market => _25;
            let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _48: u128;
            let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _64: ();
            let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _80: i64;
            let _87: std::string::String;
            let mut _106: &[&str; 2];
            let mut _107: &state::spot_market::SpotBalanceType;
            scope 15 {
                debug residual => _45;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _48;
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _61;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _64;
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _77;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _80;
                scope 26 {
                }
            }
            scope 27 {
                debug res => _87;
            }
        }
        scope 11 {
            debug residual => _33;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _36;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _108 = deref_copy (_1.1: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>);
        _7 = &((*_108).4: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _113 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _109 = deref_copy (_1.1: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>);
        _18 = &((*_109).4: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb60];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _123 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb53;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb57];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb57];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _117 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _110 = deref_copy (_1.1: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>);
        _30 = &((*_110).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _29 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _30) -> [return: bb13, unwind: bb56];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _115 = discriminant(_15);
        StorageDead(_15);
        goto -> bb52;
    }

    bb13: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _28 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _29, move _31) -> [return: bb14, unwind: bb56];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb15, unwind: bb56];
    }

    bb15: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = move ((_27 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _26 = move _36;
        StorageDead(_36);
        _25 = &mut _26;
        _121 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _2;
        _42 = <u64 as Cast>::cast::<u128>(move _43) -> [return: bb19, unwind: bb55];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb18, unwind: bb58];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        _119 = discriminant(_27);
        StorageDead(_27);
        goto -> bb51;
    }

    bb19: {
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_41 as Continue).0: u128);
        _40 = _48;
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _107 = const _;
        _50 = &(*_107);
        _49 = &(*_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut (*_25);
        _53 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _54) -> [return: bb24, unwind: bb55];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb49;
    }

    bb24: {
        _52 = &mut (*_53);
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut (*_13);
        _58 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _59) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        StorageDead(_59);
        _57 = &mut ((*_58).2: state::perp_market::PoolBalance);
        _56 = &mut (*_57);
        _55 = move _56 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_56);
        _39 = update_spot_balances(move _40, move _49, move _52, move _55, const false) -> [return: bb26, unwind: bb55];
    }

    bb26: {
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_40);
        _38 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _39) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        StorageDead(_39);
        _60 = discriminant(_38);
        switchInt(move _60) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_64);
        _64 = ((_38 as Continue).0: ());
        _37 = _64;
        StorageDead(_64);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_25);
        _69 = <RefMut<'_, SpotMarket> as Deref>::deref(move _70) -> [return: bb31, unwind: bb55];
    }

    bb29: {
        StorageLive(_61);
        _61 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_50);
        goto -> bb49;
    }

    bb31: {
        _68 = &(*_69);
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _111 = deref_copy (_1.1: &mut instructions::admin::UpdatePerpMarketPnlPool<'_>);
        _112 = deref_copy ((*_111).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _128 = (((_112.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _75 = &(*_128);
        _74 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _75) -> [return: bb32, unwind: bb55];
    }

    bb32: {
        _73 = &(*_74);
        _72 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _73) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_73);
        _71 = ((*_72).2: u64);
        _67 = validate_spot_market_vault_amount(move _68, move _71) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        StorageDead(_71);
        StorageDead(_68);
        _66 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        StorageDead(_67);
        _76 = discriminant(_66);
        switchInt(move _76) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_80);
        _80 = ((_66 as Continue).0: i64);
        _65 = _80;
        StorageDead(_80);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _106 = const _;
        _91 = &(*_106);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &(*_13);
        _100 = <RefMut<'_, PerpMarket> as Deref>::deref(move _101) -> [return: bb39, unwind: bb55];
    }

    bb37: {
        StorageLive(_77);
        _77 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb38, unwind: bb55];
    }

    bb38: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb50;
    }

    bb39: {
        StorageDead(_101);
        _99 = &((*_100).21: u16);
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _98) -> [return: bb40, unwind: bb55];
    }

    bb40: {
        StorageDead(_98);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_2;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _103) -> [return: bb41, unwind: bb55];
    }

    bb41: {
        StorageDead(_103);
        _96 = [move _97, move _102];
        StorageDead(_102);
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb42, unwind: bb55];
    }

    bb42: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        StorageDead(_88);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb44, unwind: bb54];
    }

    bb44: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb45, unwind: bb54];
    }

    bb45: {
        StorageDead(_82);
        drop(_86) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_105);
        _105 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _105);
        StorageDead(_105);
        drop(_26) -> [return: bb47, unwind: bb56];
    }

    bb47: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_14) -> [return: bb48, unwind: bb57];
    }

    bb48: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb53;
    }

    bb49: {
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb50;
    }

    bb50: {
        drop(_26) -> [return: bb51, unwind: bb56];
    }

    bb51: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_14) -> [return: bb52, unwind: bb57];
    }

    bb52: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb53;
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_86) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_26) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_14) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58 (cleanup): {
        _125 = discriminant(_27);
        goto -> bb56;
    }

    bb59 (cleanup): {
        _126 = discriminant(_15);
        goto -> bb57;
    }

    bb60 (cleanup): {
        _127 = discriminant(_4);
        goto -> bb57;
    }
}
