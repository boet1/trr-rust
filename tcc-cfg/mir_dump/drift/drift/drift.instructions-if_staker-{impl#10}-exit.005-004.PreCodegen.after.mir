// MIR for `if_staker::<impl at programs/drift/src/instructions/if_staker.rs:858:10: 858:18>::exit` after PreCodegen

fn if_staker::<impl at programs/drift/src/instructions/if_staker.rs:858:10: 858:18>::exit(_1: &if_staker::AddInsuranceFundStake<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _18: std::result::Result<(), anchor_lang::error::Error>;
    let mut _19: std::result::Result<(), anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _21: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _28: ();
    let _29: ();
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _31: std::result::Result<(), anchor_lang::error::Error>;
    let mut _32: std::result::Result<(), anchor_lang::error::Error>;
    let mut _33: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _34: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let mut _36: {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _41: ();
    let _42: ();
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _44: std::result::Result<(), anchor_lang::error::Error>;
    let mut _45: std::result::Result<(), anchor_lang::error::Error>;
    let mut _46: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _47: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let mut _49: {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _54: ();
    let _55: ();
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _57: std::result::Result<(), anchor_lang::error::Error>;
    let mut _58: std::result::Result<(), anchor_lang::error::Error>;
    let mut _59: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _60: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let mut _62: {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
    let mut _63: isize;
    let _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _67: ();
    let _68: ();
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _70: std::result::Result<(), anchor_lang::error::Error>;
    let mut _71: std::result::Result<(), anchor_lang::error::Error>;
    let mut _72: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _73: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _74: &anchor_lang::prelude::Pubkey;
    let mut _75: {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
    let mut _76: isize;
    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _80: ();
    let mut _81: ();
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _25;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _28;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _38;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _41;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _51;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _54;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _64;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _67;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _77;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _80;
        scope 24 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _7 = &(*_8);
        StorageLive(_9);
        _9 = &(*_2);
        _6 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::AccountsExit<'_>>::exit(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
        _5 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18}>(move _6, move _10) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb39];
    }

    bb3: {
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_4 as Continue).0: ());
        _3 = _15;
        StorageDead(_15);
        _82 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _20 = &(*_21);
        StorageLive(_22);
        _22 = &(*_2);
        _19 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::AccountsExit<'_>>::exit(move _20, move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _104 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb38;
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
        _18 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18}>(move _19, move _23) -> [return: bb9, unwind: bb39];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _18) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: ());
        _16 = _28;
        StorageDead(_28);
        _84 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _33 = &(*_34);
        StorageLive(_35);
        _35 = &(*_2);
        _32 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::AccountsExit<'_>>::exit(move _33, move _35) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_25);
        _25 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb13, unwind: bb44];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _102 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb38;
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
        _31 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18}>(move _32, move _36) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _31) -> [return: bb16, unwind: bb39];
    }

    bb16: {
        StorageDead(_31);
        _37 = discriminant(_30);
        switchInt(move _37) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_41);
        _41 = ((_30 as Continue).0: ());
        _29 = _41;
        StorageDead(_41);
        _86 = discriminant(_30);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _46 = &(*_47);
        StorageLive(_48);
        _48 = &(*_2);
        _45 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::AccountsExit<'_>>::exit(move _46, move _48) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_38);
        _38 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _40) -> [return: bb19, unwind: bb43];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_38);
        _100 = discriminant(_30);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb38;
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_49);
        _49 = {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
        _44 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18}>(move _45, move _49) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_45);
        _43 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _44) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        StorageDead(_44);
        _50 = discriminant(_43);
        switchInt(move _50) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_54);
        _54 = ((_43 as Continue).0: ());
        _42 = _54;
        StorageDead(_54);
        _88 = discriminant(_43);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _59 = &(*_60);
        StorageLive(_61);
        _61 = &(*_2);
        _58 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::AccountsExit<'_>>::exit(move _59, move _61) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_51);
        _51 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb25, unwind: bb42];
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_51);
        _98 = discriminant(_43);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb38;
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_62);
        _62 = {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
        _57 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18}>(move _58, move _62) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        StorageDead(_62);
        StorageDead(_58);
        _56 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _57) -> [return: bb28, unwind: bb39];
    }

    bb28: {
        StorageDead(_57);
        _63 = discriminant(_56);
        switchInt(move _63) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_67);
        _67 = ((_56 as Continue).0: ());
        _55 = _67;
        StorageDead(_67);
        _90 = discriminant(_56);
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _72 = &(*_73);
        StorageLive(_74);
        _74 = &(*_2);
        _71 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::AccountsExit<'_>>::exit(move _72, move _74) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_64);
        _64 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_66);
        _66 = move _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _66) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        StorageDead(_66);
        StorageDead(_64);
        _96 = discriminant(_56);
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb38;
    }

    bb32: {
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18};
        _70 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:858:10: 858:18}>(move _71, move _75) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _70) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        StorageDead(_70);
        _76 = discriminant(_69);
        switchInt(move _76) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_80);
        _80 = ((_69 as Continue).0: ());
        _68 = _80;
        StorageDead(_80);
        _92 = discriminant(_69);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_81);
        _81 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _81);
        StorageDead(_81);
        goto -> bb38;
    }

    bb36: {
        StorageLive(_77);
        _77 = move ((_69 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb37, unwind: bb40];
    }

    bb37: {
        StorageDead(_79);
        StorageDead(_77);
        _94 = discriminant(_69);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        resume;
    }

    bb40 (cleanup): {
        _106 = discriminant(_69);
        goto -> bb39;
    }

    bb41 (cleanup): {
        _107 = discriminant(_56);
        goto -> bb39;
    }

    bb42 (cleanup): {
        _108 = discriminant(_43);
        goto -> bb39;
    }

    bb43 (cleanup): {
        _109 = discriminant(_30);
        goto -> bb39;
    }

    bb44 (cleanup): {
        _110 = discriminant(_17);
        goto -> bb39;
    }

    bb45 (cleanup): {
        _111 = discriminant(_4);
        goto -> bb39;
    }
}
