// MIR for `get_prelaunch_price` after PreCodegen

fn get_prelaunch_price(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: u64) -> std::result::Result<OraclePriceData, error::ErrorCode> {
    debug price_oracle => _1;
    debug slot => _2;
    let mut _0: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let _3: std::cell::Ref<'_, state::oracle::PrelaunchOracle>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::oracle::PrelaunchOracle>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, state::oracle::PrelaunchOracle>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: std::result::Result<std::cell::Ref<'_, state::oracle::PrelaunchOracle>, error::ErrorCode>;
    let mut _9: error::ErrorCode;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: std::cell::Ref<'_, state::oracle::PrelaunchOracle>;
    let mut _15: state::oracle::OraclePriceData;
    let mut _16: i64;
    let mut _17: &state::oracle::PrelaunchOracle;
    let mut _18: &std::cell::Ref<'_, state::oracle::PrelaunchOracle>;
    let mut _19: u64;
    let mut _20: &state::oracle::PrelaunchOracle;
    let mut _21: &std::cell::Ref<'_, state::oracle::PrelaunchOracle>;
    let mut _22: i64;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _24: std::result::Result<i64, error::ErrorCode>;
    let mut _25: u64;
    let mut _26: u64;
    let mut _27: &state::oracle::PrelaunchOracle;
    let mut _28: &std::cell::Ref<'_, state::oracle::PrelaunchOracle>;
    let mut _29: u64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: std::option::Option<u64>;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    scope 1 {
        debug oracle => _3;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: i64;
        scope 6 {
            debug residual => _31;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _34;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = load_ref::<PrelaunchOracle>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = error::ErrorCode::UnableToLoadOracle;
        _8 = std::result::Result::<Ref<'_, PrelaunchOracle>, error::ErrorCode>::Err(move _9);
        StorageDead(_9);
        _5 = std::result::Result::<Ref<'_, PrelaunchOracle>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _6, move _8) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, PrelaunchOracle>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_4 as Continue).0: std::cell::Ref<'_, state::oracle::PrelaunchOracle>);
        _3 = move _14;
        StorageDead(_14);
        _38 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_3;
        _17 = <Ref<'_, PrelaunchOracle> as Deref>::deref(move _18) -> [return: bb8, unwind: bb20];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _36 = discriminant(_4);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb19;
    }

    bb8: {
        StorageDead(_18);
        _16 = ((*_17).0: i64);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_3;
        _20 = <Ref<'_, PrelaunchOracle> as Deref>::deref(move _21) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        StorageDead(_21);
        _19 = ((*_20).2: u64);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_3;
        _27 = <Ref<'_, PrelaunchOracle> as Deref>::deref(move _28) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        StorageDead(_28);
        _26 = ((*_27).4: u64);
        StorageLive(_29);
        _29 = _2;
        _25 = core::num::<impl u64>::saturating_sub(move _26, move _29) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_26);
        _24 = <u64 as Cast>::cast::<i64>(move _25) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        StorageDead(_25);
        _23 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _24) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_24);
        _30 = discriminant(_23);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_23 as Continue).0: i64);
        _22 = _34;
        StorageDead(_34);
        StorageLive(_35);
        _35 = Option::<u64>::None;
        _15 = OraclePriceData { price: move _16, confidence: move _19, delay: move _22, has_sufficient_number_of_data_points: const true, sequence_id: move _35 };
        StorageDead(_35);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        _0 = std::result::Result::<OraclePriceData, error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        drop(_3) -> [return: bb17, unwind: bb21];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        drop(_3) -> [return: bb18, unwind: bb21];
    }

    bb17: {
        StorageDead(_3);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_3);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _40 = discriminant(_4);
        goto -> bb21;
    }
}
