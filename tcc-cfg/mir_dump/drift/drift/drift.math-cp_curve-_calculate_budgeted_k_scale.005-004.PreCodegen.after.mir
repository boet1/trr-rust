// MIR for `_calculate_budgeted_k_scale` after PreCodegen

fn _calculate_budgeted_k_scale(_1: u128, _2: u128, _3: i128, _4: u128, _5: i128, _6: i128, _7: i128) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug x => _1;
    debug y => _2;
    debug budget => _3;
    debug q => _4;
    debug d => _5;
    debug k_pct_upper_bound => _6;
    debug k_pct_lower_bound => _7;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _8: i128;
    let mut _9: i128;
    let mut _10: bool;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _13: std::result::Result<i128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: bool;
    let mut _22: i128;
    let mut _24: bool;
    let mut _25: i128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _28: std::result::Result<i128, error::ErrorCode>;
    let mut _29: i128;
    let mut _30: i128;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _38: std::result::Result<i128, error::ErrorCode>;
    let mut _39: i128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _41: std::result::Result<i128, error::ErrorCode>;
    let mut _42: u128;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: i128;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _57: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _58: math::bn::U192;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _60: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _61: math::bn::U192;
    let mut _62: u128;
    let mut _63: math::bn::U192;
    let mut _64: i128;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: math::bn::U192;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _79: std::result::Result<u128, error::ErrorCode>;
    let mut _80: math::bn::U192;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _82: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _83: math::bn::U192;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _85: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _86: math::bn::U192;
    let mut _87: math::bn::U192;
    let mut _88: u128;
    let mut _89: i128;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: math::bn::U192;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _108: std::result::Result<u128, error::ErrorCode>;
    let mut _109: math::bn::U192;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _111: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _112: math::bn::U192;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _114: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _115: math::bn::U192;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _117: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _118: math::bn::U192;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _120: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _121: math::bn::U192;
    let mut _122: u128;
    let mut _123: i128;
    let mut _124: math::bn::U192;
    let mut _125: u128;
    let mut _126: i128;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: math::bn::U192;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _138: math::bn::U192;
    let mut _139: u128;
    let mut _140: i128;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: math::bn::U192;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _159: std::result::Result<i128, error::ErrorCode>;
    let mut _160: u128;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _162: std::result::Result<u128, error::ErrorCode>;
    let mut _163: math::bn::U192;
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _165: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _166: math::bn::U192;
    let mut _167: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _168: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _169: math::bn::U192;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _171: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _172: math::bn::U192;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _174: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _175: math::bn::U192;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _177: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _178: math::bn::U192;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _180: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _181: math::bn::U192;
    let mut _182: u128;
    let mut _183: math::bn::U192;
    let mut _184: u128;
    let mut _185: i128;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _191: math::bn::U192;
    let mut _192: isize;
    let mut _194: !;
    let mut _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _197: math::bn::U192;
    let mut _198: u128;
    let mut _199: i128;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _205: math::bn::U192;
    let mut _206: isize;
    let mut _208: !;
    let mut _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _211: math::bn::U192;
    let mut _212: i128;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _218: math::bn::U192;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _237: std::result::Result<i128, error::ErrorCode>;
    let mut _238: i128;
    let mut _239: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _240: std::result::Result<i128, error::ErrorCode>;
    let mut _241: u128;
    let mut _242: isize;
    let mut _244: !;
    let mut _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _247: i128;
    let mut _248: isize;
    let mut _250: !;
    let mut _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _255: std::result::Result<i128, error::ErrorCode>;
    let mut _256: i128;
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _258: std::result::Result<i128, error::ErrorCode>;
    let mut _259: u128;
    let mut _260: isize;
    let mut _262: !;
    let mut _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _265: i128;
    let mut _266: isize;
    let mut _268: !;
    let mut _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _272: ();
    let mut _273: bool;
    let mut _274: i128;
    let mut _275: bool;
    let mut _276: u128;
    let mut _277: u128;
    let mut _278: i128;
    let mut _279: !;
    let _280: ();
    let mut _281: &str;
    let _282: &str;
    let _283: ();
    let mut _284: &str;
    let _285: &str;
    let mut _286: &std::string::String;
    let _287: &std::string::String;
    let _288: std::string::String;
    let mut _290: std::fmt::Arguments<'_>;
    let mut _291: &[&str];
    let mut _292: &[&str; 2];
    let _293: &[&str; 2];
    let _294: [&str; 2];
    let mut _295: &[core::fmt::rt::Argument<'_>];
    let mut _296: &[core::fmt::rt::Argument<'_>; 2];
    let _297: &[core::fmt::rt::Argument<'_>; 2];
    let _298: [core::fmt::rt::Argument<'_>; 2];
    let mut _299: core::fmt::rt::Argument<'_>;
    let mut _300: &i128;
    let _301: &i128;
    let mut _302: core::fmt::rt::Argument<'_>;
    let mut _303: &i128;
    let _304: &i128;
    let _305: i128;
    let mut _306: (u128, u128);
    let mut _307: u128;
    let mut _308: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _309: std::result::Result<u128, error::ErrorCode>;
    let mut _310: i128;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _316: u128;
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _318: std::result::Result<u128, error::ErrorCode>;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _326: std::result::Result<i128, error::ErrorCode>;
    let mut _327: i128;
    let mut _328: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _329: std::result::Result<i128, error::ErrorCode>;
    let mut _330: i128;
    let mut _331: i128;
    let mut _332: isize;
    let mut _334: !;
    let mut _335: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _343: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _344: std::result::Result<i128, error::ErrorCode>;
    let mut _345: i128;
    let mut _346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _347: std::result::Result<i128, error::ErrorCode>;
    let mut _348: i128;
    let mut _349: i128;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _360: ();
    let mut _361: bool;
    let mut _362: i128;
    let mut _363: bool;
    let mut _364: i128;
    let mut _365: i128;
    let mut _366: i128;
    let mut _367: i128;
    let mut _368: i128;
    let _369: ();
    let mut _370: bool;
    let mut _371: i128;
    let mut _372: bool;
    let mut _373: i128;
    let mut _374: !;
    let mut _377: (i128, i128);
    let mut _378: bool;
    let mut _379: i128;
    let mut _380: i128;
    let mut _382: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _383: std::result::Result<i128, error::ErrorCode>;
    let mut _384: i128;
    let mut _385: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _386: std::result::Result<i128, error::ErrorCode>;
    let mut _387: i128;
    let mut _388: isize;
    let mut _390: !;
    let mut _391: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _393: i128;
    let mut _394: isize;
    let mut _396: !;
    let mut _397: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _400: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _401: std::result::Result<i128, error::ErrorCode>;
    let mut _402: i128;
    let mut _403: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _404: std::result::Result<i128, error::ErrorCode>;
    let mut _405: i128;
    let mut _406: isize;
    let mut _408: !;
    let mut _409: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _411: isize;
    let mut _413: !;
    let mut _414: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _416: bool;
    let mut _417: i128;
    let mut _418: i128;
    let mut _419: i128;
    let mut _420: i128;
    let mut _422: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _423: std::result::Result<i128, error::ErrorCode>;
    let mut _424: i128;
    let mut _425: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _426: std::result::Result<i128, error::ErrorCode>;
    let mut _427: i128;
    let mut _428: isize;
    let mut _430: !;
    let mut _431: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _433: i128;
    let mut _434: isize;
    let mut _436: !;
    let mut _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _440: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _441: std::result::Result<i128, error::ErrorCode>;
    let mut _442: i128;
    let mut _443: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _444: std::result::Result<i128, error::ErrorCode>;
    let mut _445: i128;
    let mut _446: isize;
    let mut _448: !;
    let mut _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _451: isize;
    let mut _453: !;
    let mut _454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _456: bool;
    let mut _457: i128;
    let mut _458: i128;
    let mut _459: i128;
    let mut _460: i128;
    let mut _461: (u128, u128);
    let mut _462: u128;
    let mut _463: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _464: std::result::Result<u128, error::ErrorCode>;
    let mut _465: i128;
    let mut _466: isize;
    let mut _468: !;
    let mut _469: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _471: u128;
    let mut _472: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _473: std::result::Result<u128, error::ErrorCode>;
    let mut _474: i128;
    let mut _475: isize;
    let mut _477: !;
    let mut _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug c => _8;
        let _11: i128;
        let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _19: i128;
        scope 2 {
            debug q => _11;
            let _20: i128;
            scope 7 {
                debug c_sign => _20;
                let _23: i128;
                scope 8 {
                    debug d_sign => _23;
                    let _26: i128;
                    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _35: i128;
                    scope 9 {
                        debug rounding_bias => _26;
                        let _36: i128;
                        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _47: i128;
                        let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _53: i128;
                        scope 14 {
                            debug x_d => _36;
                            let _54: math::bn::U192;
                            scope 23 {
                                debug amm_reserve_precision_u192 => _54;
                                let _55: math::bn::U192;
                                let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _69: math::bn::U192;
                                let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _75: math::bn::U192;
                                scope 24 {
                                    debug x_times_x_d_u192 => _55;
                                    let _76: math::bn::U192;
                                    scope 33 {
                                        debug quote_precision_u192 => _76;
                                        let _77: u128;
                                        let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _94: math::bn::U192;
                                        let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _100: math::bn::U192;
                                        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _105: u128;
                                        scope 34 {
                                            debug x_times_x_d_c => _77;
                                            let _106: u128;
                                            let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _131: math::bn::U192;
                                            let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _137: math::bn::U192;
                                            let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _145: math::bn::U192;
                                            let _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _151: math::bn::U192;
                                            let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _156: u128;
                                            scope 47 {
                                                debug c_times_x_d_d => _106;
                                                let _157: i128;
                                                let _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _190: math::bn::U192;
                                                let _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _196: math::bn::U192;
                                                let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _204: math::bn::U192;
                                                let _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _210: math::bn::U192;
                                                let _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _217: math::bn::U192;
                                                let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _223: math::bn::U192;
                                                let _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _228: u128;
                                                let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _233: i128;
                                                scope 68 {
                                                    debug pegged_quote_times_dd => _157;
                                                    let _234: i128;
                                                    scope 101 {
                                                        debug numer1 => _234;
                                                        let _235: i128;
                                                        let _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _246: i128;
                                                        let _249: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _252: i128;
                                                        scope 102 {
                                                            debug numer2 => _235;
                                                            let _253: i128;
                                                            let _261: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _264: i128;
                                                            let _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _270: i128;
                                                            scope 111 {
                                                                debug denom1 => _253;
                                                                let _271: i128;
                                                                scope 120 {
                                                                    debug denom2 => _271;
                                                                    let _289: std::string::String;
                                                                    let _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _315: u128;
                                                                    let _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _323: u128;
                                                                    let mut _324: i128;
                                                                    let _333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _336: i128;
                                                                    let _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _341: i128;
                                                                    let mut _480: &i128;
                                                                    let mut _481: &[&str; 2];
                                                                    scope 121 {
                                                                        debug res => _289;
                                                                    }
                                                                    scope 122 {
                                                                        debug residual => _312;
                                                                        scope 123 {
                                                                        }
                                                                    }
                                                                    scope 124 {
                                                                        debug val => _315;
                                                                        scope 125 {
                                                                        }
                                                                    }
                                                                    scope 126 {
                                                                        debug residual => _320;
                                                                        scope 127 {
                                                                        }
                                                                    }
                                                                    scope 128 {
                                                                        debug val => _323;
                                                                        scope 129 {
                                                                        }
                                                                    }
                                                                    scope 130 {
                                                                        debug numerator => _324;
                                                                        let mut _342: i128;
                                                                        let _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _354: i128;
                                                                        let _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _359: i128;
                                                                        scope 139 {
                                                                            debug denominator => _342;
                                                                            let _375: i128;
                                                                            let _376: i128;
                                                                            let _381: i128;
                                                                            let _389: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _392: i128;
                                                                            let _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _398: i128;
                                                                            let _421: i128;
                                                                            let _429: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _432: i128;
                                                                            let _435: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _438: i128;
                                                                            scope 148 {
                                                                                debug numerator => _375;
                                                                                debug denominator => _376;
                                                                                let _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _470: u128;
                                                                                let _476: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _479: u128;
                                                                                scope 185 {
                                                                                    debug residual => _467;
                                                                                    scope 186 {
                                                                                    }
                                                                                }
                                                                                scope 187 {
                                                                                    debug val => _470;
                                                                                    scope 188 {
                                                                                    }
                                                                                }
                                                                                scope 189 {
                                                                                    debug residual => _476;
                                                                                    scope 190 {
                                                                                    }
                                                                                }
                                                                                scope 191 {
                                                                                    debug val => _479;
                                                                                    scope 192 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 149 {
                                                                                debug current_pct_change => _381;
                                                                                let _399: i128;
                                                                                let _407: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _410: i128;
                                                                                let _412: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _415: i128;
                                                                                scope 158 {
                                                                                    debug maximum_pct_change => _399;
                                                                                }
                                                                                scope 159 {
                                                                                    debug residual => _407;
                                                                                    scope 160 {
                                                                                    }
                                                                                }
                                                                                scope 161 {
                                                                                    debug val => _410;
                                                                                    scope 162 {
                                                                                    }
                                                                                }
                                                                                scope 163 {
                                                                                    debug residual => _412;
                                                                                    scope 164 {
                                                                                    }
                                                                                }
                                                                                scope 165 {
                                                                                    debug val => _415;
                                                                                    scope 166 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 150 {
                                                                                debug residual => _389;
                                                                                scope 151 {
                                                                                }
                                                                            }
                                                                            scope 152 {
                                                                                debug val => _392;
                                                                                scope 153 {
                                                                                }
                                                                            }
                                                                            scope 154 {
                                                                                debug residual => _395;
                                                                                scope 155 {
                                                                                }
                                                                            }
                                                                            scope 156 {
                                                                                debug val => _398;
                                                                                scope 157 {
                                                                                }
                                                                            }
                                                                            scope 167 {
                                                                                debug current_pct_change => _421;
                                                                                let _439: i128;
                                                                                let _447: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _450: i128;
                                                                                let _452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _455: i128;
                                                                                scope 176 {
                                                                                    debug maximum_pct_change => _439;
                                                                                }
                                                                                scope 177 {
                                                                                    debug residual => _447;
                                                                                    scope 178 {
                                                                                    }
                                                                                }
                                                                                scope 179 {
                                                                                    debug val => _450;
                                                                                    scope 180 {
                                                                                    }
                                                                                }
                                                                                scope 181 {
                                                                                    debug residual => _452;
                                                                                    scope 182 {
                                                                                    }
                                                                                }
                                                                                scope 183 {
                                                                                    debug val => _455;
                                                                                    scope 184 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 168 {
                                                                                debug residual => _429;
                                                                                scope 169 {
                                                                                }
                                                                            }
                                                                            scope 170 {
                                                                                debug val => _432;
                                                                                scope 171 {
                                                                                }
                                                                            }
                                                                            scope 172 {
                                                                                debug residual => _435;
                                                                                scope 173 {
                                                                                }
                                                                            }
                                                                            scope 174 {
                                                                                debug val => _438;
                                                                                scope 175 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 140 {
                                                                            debug residual => _351;
                                                                            scope 141 {
                                                                            }
                                                                        }
                                                                        scope 142 {
                                                                            debug val => _354;
                                                                            scope 143 {
                                                                            }
                                                                        }
                                                                        scope 144 {
                                                                            debug residual => _356;
                                                                            scope 145 {
                                                                            }
                                                                        }
                                                                        scope 146 {
                                                                            debug val => _359;
                                                                            scope 147 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 131 {
                                                                        debug residual => _333;
                                                                        scope 132 {
                                                                        }
                                                                    }
                                                                    scope 133 {
                                                                        debug val => _336;
                                                                        scope 134 {
                                                                        }
                                                                    }
                                                                    scope 135 {
                                                                        debug residual => _338;
                                                                        scope 136 {
                                                                        }
                                                                    }
                                                                    scope 137 {
                                                                        debug val => _341;
                                                                        scope 138 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 112 {
                                                                debug residual => _261;
                                                                scope 113 {
                                                                }
                                                            }
                                                            scope 114 {
                                                                debug val => _264;
                                                                scope 115 {
                                                                }
                                                            }
                                                            scope 116 {
                                                                debug residual => _267;
                                                                scope 117 {
                                                                }
                                                            }
                                                            scope 118 {
                                                                debug val => _270;
                                                                scope 119 {
                                                                }
                                                            }
                                                        }
                                                        scope 103 {
                                                            debug residual => _243;
                                                            scope 104 {
                                                            }
                                                        }
                                                        scope 105 {
                                                            debug val => _246;
                                                            scope 106 {
                                                            }
                                                        }
                                                        scope 107 {
                                                            debug residual => _249;
                                                            scope 108 {
                                                            }
                                                        }
                                                        scope 109 {
                                                            debug val => _252;
                                                            scope 110 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 69 {
                                                    debug residual => _187;
                                                    scope 70 {
                                                    }
                                                }
                                                scope 71 {
                                                    debug val => _190;
                                                    scope 72 {
                                                    }
                                                }
                                                scope 73 {
                                                    debug residual => _193;
                                                    scope 74 {
                                                    }
                                                }
                                                scope 75 {
                                                    debug val => _196;
                                                    scope 76 {
                                                    }
                                                }
                                                scope 77 {
                                                    debug residual => _201;
                                                    scope 78 {
                                                    }
                                                }
                                                scope 79 {
                                                    debug val => _204;
                                                    scope 80 {
                                                    }
                                                }
                                                scope 81 {
                                                    debug residual => _207;
                                                    scope 82 {
                                                    }
                                                }
                                                scope 83 {
                                                    debug val => _210;
                                                    scope 84 {
                                                    }
                                                }
                                                scope 85 {
                                                    debug residual => _214;
                                                    scope 86 {
                                                    }
                                                }
                                                scope 87 {
                                                    debug val => _217;
                                                    scope 88 {
                                                    }
                                                }
                                                scope 89 {
                                                    debug residual => _220;
                                                    scope 90 {
                                                    }
                                                }
                                                scope 91 {
                                                    debug val => _223;
                                                    scope 92 {
                                                    }
                                                }
                                                scope 93 {
                                                    debug residual => _225;
                                                    scope 94 {
                                                    }
                                                }
                                                scope 95 {
                                                    debug val => _228;
                                                    scope 96 {
                                                    }
                                                }
                                                scope 97 {
                                                    debug residual => _230;
                                                    scope 98 {
                                                    }
                                                }
                                                scope 99 {
                                                    debug val => _233;
                                                    scope 100 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _128;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _131;
                                                scope 51 {
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _134;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _137;
                                                scope 55 {
                                                }
                                            }
                                            scope 56 {
                                                debug residual => _142;
                                                scope 57 {
                                                }
                                            }
                                            scope 58 {
                                                debug val => _145;
                                                scope 59 {
                                                }
                                            }
                                            scope 60 {
                                                debug residual => _148;
                                                scope 61 {
                                                }
                                            }
                                            scope 62 {
                                                debug val => _151;
                                                scope 63 {
                                                }
                                            }
                                            scope 64 {
                                                debug residual => _153;
                                                scope 65 {
                                                }
                                            }
                                            scope 66 {
                                                debug val => _156;
                                                scope 67 {
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _91;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _94;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _97;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _100;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _102;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _105;
                                            scope 46 {
                                            }
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _66;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _69;
                                    scope 28 {
                                    }
                                }
                                scope 29 {
                                    debug residual => _72;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _75;
                                    scope 32 {
                                    }
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _44;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _47;
                            scope 18 {
                            }
                        }
                        scope 19 {
                            debug residual => _50;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _53;
                            scope 22 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _32;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _35;
                        scope 13 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        _10 = Eq(_9, const i128::MIN);
        assert(!move _10, "attempt to negate `{}`, which would overflow", _9) -> [success: bb1, unwind continue];
    }

    bb1: {
        _8 = Neg(move _9);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _4;
        _13 = <u128 as Cast>::cast::<i128>(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        _12 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: i128);
        _11 = _19;
        StorageDead(_19);
        StorageDead(_12);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _8;
        _21 = Gt(move _22, const 0_i128);
        switchInt(move _21) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb314;
    }

    bb8: {
        StorageDead(_22);
        _20 = const 1_i128;
        goto -> bb10;
    }

    bb9: {
        StorageDead(_22);
        _20 = const -1_i128;
        goto -> bb10;
    }

    bb10: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _5;
        _24 = Gt(move _25, const 0_i128);
        switchInt(move _24) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_25);
        _23 = const 1_i128;
        goto -> bb13;
    }

    bb12: {
        StorageDead(_25);
        _23 = const -1_i128;
        goto -> bb13;
    }

    bb13: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _20;
        StorageLive(_30);
        _30 = _23;
        _28 = <i128 as SafeMath>::safe_mul(move _29, move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: i128);
        _26 = _35;
        StorageDead(_35);
        StorageDead(_27);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _1;
        _41 = <u128 as Cast>::cast::<i128>(move _42) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        goto -> bb313;
    }

    bb19: {
        StorageDead(_42);
        _40 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: i128);
        _39 = _47;
        StorageDead(_47);
        StorageLive(_48);
        _48 = _5;
        _38 = <i128 as SafeMath>::safe_add(move _39, move _48) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb311;
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_39);
        _37 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _38) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_38);
        _49 = discriminant(_37);
        switchInt(move _49) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_37 as Continue).0: i128);
        _36 = _53;
        StorageDead(_53);
        StorageDead(_40);
        StorageDead(_37);
        StorageLive(_54);
        _54 = <U192 as From<u128>>::from(const _) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_50);
        _50 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb311;
    }

    bb29: {
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _1;
        _61 = <U192 as From<u128>>::from(move _62) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _36;
        _63 = <U192 as From<i128>>::from(move _64) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_64);
        _60 = <U192 as SafeMath>::safe_mul(move _61, move _63) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_63);
        StorageDead(_61);
        _59 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _60) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_60);
        _65 = discriminant(_59);
        switchInt(move _65) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_69);
        _69 = ((_59 as Continue).0: math::bn::U192);
        _58 = _69;
        StorageDead(_69);
        StorageLive(_70);
        _70 = _54;
        _57 = <U192 as SafeMath>::safe_div(move _58, move _70) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_66);
        _66 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb309;
    }

    bb37: {
        StorageDead(_70);
        StorageDead(_58);
        _56 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _57) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_57);
        _71 = discriminant(_56);
        switchInt(move _71) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_75);
        _75 = ((_56 as Continue).0: math::bn::U192);
        _55 = _75;
        StorageDead(_75);
        StorageDead(_59);
        StorageDead(_56);
        StorageLive(_76);
        _76 = <U192 as From<u128>>::from(const _) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_72);
        _72 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb309;
    }

    bb42: {
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _55;
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _8;
        _88 = core::num::<impl i128>::unsigned_abs(move _89) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_89);
        _87 = <U192 as From<u128>>::from(move _88) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_88);
        _85 = <U192 as SafeMath>::safe_mul(move _86, move _87) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_87);
        StorageDead(_86);
        _84 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _85) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_85);
        _90 = discriminant(_84);
        switchInt(move _90) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_94);
        _94 = ((_84 as Continue).0: math::bn::U192);
        _83 = _94;
        StorageDead(_94);
        StorageLive(_95);
        _95 = _76;
        _82 = <U192 as SafeMath>::safe_div(move _83, move _95) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_91);
        _91 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb306;
    }

    bb50: {
        StorageDead(_95);
        StorageDead(_83);
        _81 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _82) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_82);
        _96 = discriminant(_81);
        switchInt(move _96) -> [0: bb52, 1: bb53, otherwise: bb5];
    }

    bb52: {
        StorageLive(_100);
        _100 = ((_81 as Continue).0: math::bn::U192);
        _80 = _100;
        StorageDead(_100);
        _79 = U192::try_to_u128(move _80) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_97);
        _97 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_99);
        StorageDead(_97);
        goto -> bb306;
    }

    bb55: {
        StorageDead(_80);
        _78 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_79);
        _101 = discriminant(_78);
        switchInt(move _101) -> [0: bb57, 1: bb58, otherwise: bb5];
    }

    bb57: {
        StorageLive(_105);
        _105 = ((_78 as Continue).0: u128);
        _77 = _105;
        StorageDead(_105);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _8;
        _122 = core::num::<impl i128>::unsigned_abs(move _123) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_102);
        _102 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb307;
    }

    bb60: {
        StorageDead(_123);
        _121 = <U192 as From<u128>>::from(move _122) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _36;
        _125 = core::num::<impl i128>::unsigned_abs(move _126) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_126);
        _124 = <U192 as From<u128>>::from(move _125) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_125);
        _120 = <U192 as SafeMath>::safe_mul(move _121, move _124) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_124);
        StorageDead(_121);
        _119 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _120) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_120);
        _127 = discriminant(_119);
        switchInt(move _127) -> [0: bb66, 1: bb67, otherwise: bb5];
    }

    bb66: {
        StorageLive(_131);
        _131 = ((_119 as Continue).0: math::bn::U192);
        _118 = _131;
        StorageDead(_131);
        StorageLive(_132);
        _132 = _76;
        _117 = <U192 as SafeMath>::safe_div(move _118, move _132) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_128);
        _128 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb301;
    }

    bb69: {
        StorageDead(_132);
        StorageDead(_118);
        _116 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _117) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_117);
        _133 = discriminant(_116);
        switchInt(move _133) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_137);
        _137 = ((_116 as Continue).0: math::bn::U192);
        _115 = _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = _5;
        _139 = core::num::<impl i128>::unsigned_abs(move _140) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_134);
        _134 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_136);
        StorageDead(_134);
        goto -> bb301;
    }

    bb74: {
        StorageDead(_140);
        _138 = <U192 as From<u128>>::from(move _139) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_139);
        _114 = <U192 as SafeMath>::safe_mul(move _115, move _138) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_138);
        StorageDead(_115);
        _113 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _114) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_114);
        _141 = discriminant(_113);
        switchInt(move _141) -> [0: bb78, 1: bb79, otherwise: bb5];
    }

    bb78: {
        StorageLive(_145);
        _145 = ((_113 as Continue).0: math::bn::U192);
        _112 = _145;
        StorageDead(_145);
        StorageLive(_146);
        _146 = _54;
        _111 = <U192 as SafeMath>::safe_div(move _112, move _146) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_142);
        _142 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_144);
        StorageDead(_142);
        goto -> bb302;
    }

    bb81: {
        StorageDead(_146);
        StorageDead(_112);
        _110 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _111) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_111);
        _147 = discriminant(_110);
        switchInt(move _147) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_151);
        _151 = ((_110 as Continue).0: math::bn::U192);
        _109 = _151;
        StorageDead(_151);
        _108 = U192::try_to_u128(move _109) -> [return: bb86, unwind continue];
    }

    bb84: {
        StorageLive(_148);
        _148 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_150);
        _150 = _148;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _150) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_150);
        StorageDead(_148);
        goto -> bb303;
    }

    bb86: {
        StorageDead(_109);
        _107 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _108) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_108);
        _152 = discriminant(_107);
        switchInt(move _152) -> [0: bb88, 1: bb89, otherwise: bb5];
    }

    bb88: {
        StorageLive(_156);
        _156 = ((_107 as Continue).0: u128);
        _106 = _156;
        StorageDead(_156);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _2;
        _181 = <U192 as From<u128>>::from(move _182) -> [return: bb91, unwind continue];
    }

    bb89: {
        StorageLive(_153);
        _153 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_155);
        StorageDead(_153);
        goto -> bb304;
    }

    bb91: {
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = _5;
        _184 = core::num::<impl i128>::unsigned_abs(move _185) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_185);
        _183 = <U192 as From<u128>>::from(move _184) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_184);
        _180 = <U192 as SafeMath>::safe_mul(move _181, move _183) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_183);
        StorageDead(_181);
        _179 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _180) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_180);
        _186 = discriminant(_179);
        switchInt(move _186) -> [0: bb96, 1: bb97, otherwise: bb5];
    }

    bb96: {
        StorageLive(_190);
        _190 = ((_179 as Continue).0: math::bn::U192);
        _178 = _190;
        StorageDead(_190);
        StorageLive(_191);
        _191 = _54;
        _177 = <U192 as SafeMath>::safe_div(move _178, move _191) -> [return: bb99, unwind continue];
    }

    bb97: {
        StorageLive(_187);
        _187 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_189);
        _189 = _187;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _189) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_178);
        StorageDead(_177);
        goto -> bb293;
    }

    bb99: {
        StorageDead(_191);
        StorageDead(_178);
        _176 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _177) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_177);
        _192 = discriminant(_176);
        switchInt(move _192) -> [0: bb101, 1: bb102, otherwise: bb5];
    }

    bb101: {
        StorageLive(_196);
        _196 = ((_176 as Continue).0: math::bn::U192);
        _175 = _196;
        StorageDead(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = _5;
        _198 = core::num::<impl i128>::unsigned_abs(move _199) -> [return: bb104, unwind continue];
    }

    bb102: {
        StorageLive(_193);
        _193 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_195);
        _195 = _193;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _195) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_195);
        StorageDead(_193);
        goto -> bb293;
    }

    bb104: {
        StorageDead(_199);
        _197 = <U192 as From<u128>>::from(move _198) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_198);
        _174 = <U192 as SafeMath>::safe_mul(move _175, move _197) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_197);
        StorageDead(_175);
        _173 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _174) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_174);
        _200 = discriminant(_173);
        switchInt(move _200) -> [0: bb108, 1: bb109, otherwise: bb5];
    }

    bb108: {
        StorageLive(_204);
        _204 = ((_173 as Continue).0: math::bn::U192);
        _172 = _204;
        StorageDead(_204);
        StorageLive(_205);
        _205 = _54;
        _171 = <U192 as SafeMath>::safe_div(move _172, move _205) -> [return: bb111, unwind continue];
    }

    bb109: {
        StorageLive(_201);
        _201 = ((_173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_203);
        StorageDead(_201);
        goto -> bb294;
    }

    bb111: {
        StorageDead(_205);
        StorageDead(_172);
        _170 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _171) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_171);
        _206 = discriminant(_170);
        switchInt(move _206) -> [0: bb113, 1: bb114, otherwise: bb5];
    }

    bb113: {
        StorageLive(_210);
        _210 = ((_170 as Continue).0: math::bn::U192);
        _169 = _210;
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = _11;
        _211 = <U192 as From<i128>>::from(move _212) -> [return: bb116, unwind continue];
    }

    bb114: {
        StorageLive(_207);
        _207 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_209);
        _209 = _207;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _209) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_209);
        StorageDead(_207);
        goto -> bb295;
    }

    bb116: {
        StorageDead(_212);
        _168 = <U192 as SafeMath>::safe_mul(move _169, move _211) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_211);
        StorageDead(_169);
        _167 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _168) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_168);
        _213 = discriminant(_167);
        switchInt(move _213) -> [0: bb119, 1: bb120, otherwise: bb5];
    }

    bb119: {
        StorageLive(_217);
        _217 = ((_167 as Continue).0: math::bn::U192);
        _166 = _217;
        StorageDead(_217);
        StorageLive(_218);
        _218 = <U192 as From<u128>>::from(const _) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_214);
        _214 = ((_167 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_216);
        _216 = _214;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _216) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_216);
        StorageDead(_214);
        goto -> bb296;
    }

    bb122: {
        _165 = <U192 as SafeMath>::safe_div(move _166, move _218) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_218);
        StorageDead(_166);
        _164 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _165) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_165);
        _219 = discriminant(_164);
        switchInt(move _219) -> [0: bb125, 1: bb126, otherwise: bb5];
    }

    bb125: {
        StorageLive(_223);
        _223 = ((_164 as Continue).0: math::bn::U192);
        _163 = _223;
        StorageDead(_223);
        _162 = U192::try_to_u128(move _163) -> [return: bb128, unwind continue];
    }

    bb126: {
        StorageLive(_220);
        _220 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_222);
        StorageDead(_220);
        goto -> bb297;
    }

    bb128: {
        StorageDead(_163);
        _161 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _162) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_162);
        _224 = discriminant(_161);
        switchInt(move _224) -> [0: bb130, 1: bb131, otherwise: bb5];
    }

    bb130: {
        StorageLive(_228);
        _228 = ((_161 as Continue).0: u128);
        _160 = _228;
        StorageDead(_228);
        _159 = <u128 as Cast>::cast::<i128>(move _160) -> [return: bb133, unwind continue];
    }

    bb131: {
        StorageLive(_225);
        _225 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_227);
        _227 = _225;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _227) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_227);
        StorageDead(_225);
        goto -> bb298;
    }

    bb133: {
        StorageDead(_160);
        _158 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _159) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_159);
        _229 = discriminant(_158);
        switchInt(move _229) -> [0: bb135, 1: bb136, otherwise: bb5];
    }

    bb135: {
        StorageLive(_233);
        _233 = ((_158 as Continue).0: i128);
        _157 = _233;
        StorageDead(_233);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_158);
        StorageLive(_234);
        _234 = _157;
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _106;
        _240 = <u128 as Cast>::cast::<i128>(move _241) -> [return: bb138, unwind continue];
    }

    bb136: {
        StorageLive(_230);
        _230 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_232);
        StorageDead(_230);
        goto -> bb299;
    }

    bb138: {
        StorageDead(_241);
        _239 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _240) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_240);
        _242 = discriminant(_239);
        switchInt(move _242) -> [0: bb140, 1: bb141, otherwise: bb5];
    }

    bb140: {
        StorageLive(_246);
        _246 = ((_239 as Continue).0: i128);
        _238 = _246;
        StorageDead(_246);
        StorageLive(_247);
        _247 = _26;
        _237 = <i128 as SafeMath>::safe_mul(move _238, move _247) -> [return: bb143, unwind continue];
    }

    bb141: {
        StorageLive(_243);
        _243 = ((_239 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_245);
        _245 = _243;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _245) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_238);
        StorageDead(_237);
        goto -> bb291;
    }

    bb143: {
        StorageDead(_247);
        StorageDead(_238);
        _236 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _237) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_237);
        _248 = discriminant(_236);
        switchInt(move _248) -> [0: bb145, 1: bb146, otherwise: bb5];
    }

    bb145: {
        StorageLive(_252);
        _252 = ((_236 as Continue).0: i128);
        _235 = _252;
        StorageDead(_252);
        StorageDead(_239);
        StorageDead(_236);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = _77;
        _258 = <u128 as Cast>::cast::<i128>(move _259) -> [return: bb148, unwind continue];
    }

    bb146: {
        StorageLive(_249);
        _249 = ((_236 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_251);
        _251 = _249;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _251) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_251);
        StorageDead(_249);
        goto -> bb291;
    }

    bb148: {
        StorageDead(_259);
        _257 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _258) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_258);
        _260 = discriminant(_257);
        switchInt(move _260) -> [0: bb150, 1: bb151, otherwise: bb5];
    }

    bb150: {
        StorageLive(_264);
        _264 = ((_257 as Continue).0: i128);
        _256 = _264;
        StorageDead(_264);
        StorageLive(_265);
        _265 = _20;
        _255 = <i128 as SafeMath>::safe_mul(move _256, move _265) -> [return: bb153, unwind continue];
    }

    bb151: {
        StorageLive(_261);
        _261 = ((_257 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_263);
        _263 = _261;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _263) -> [return: bb152, unwind continue];
    }

    bb152: {
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_256);
        StorageDead(_255);
        goto -> bb289;
    }

    bb153: {
        StorageDead(_265);
        StorageDead(_256);
        _254 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _255) -> [return: bb154, unwind continue];
    }

    bb154: {
        StorageDead(_255);
        _266 = discriminant(_254);
        switchInt(move _266) -> [0: bb155, 1: bb156, otherwise: bb5];
    }

    bb155: {
        StorageLive(_270);
        _270 = ((_254 as Continue).0: i128);
        _253 = _270;
        StorageDead(_270);
        StorageDead(_257);
        StorageDead(_254);
        StorageLive(_271);
        _271 = _157;
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = _20;
        _273 = Lt(move _274, const 0_i128);
        switchInt(move _273) -> [0: bb159, otherwise: bb158];
    }

    bb156: {
        StorageLive(_267);
        _267 = ((_254 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_269);
        _269 = _267;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _269) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_269);
        StorageDead(_267);
        goto -> bb289;
    }

    bb158: {
        StorageDead(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = _77;
        StorageLive(_277);
        StorageLive(_278);
        _278 = _157;
        _277 = core::num::<impl i128>::unsigned_abs(move _278) -> [return: bb160, unwind continue];
    }

    bb159: {
        StorageDead(_274);
        _272 = const ();
        goto -> bb181;
    }

    bb160: {
        StorageDead(_278);
        _275 = Gt(move _276, move _277);
        switchInt(move _275) -> [0: bb180, otherwise: bb161];
    }

    bb161: {
        StorageDead(_277);
        StorageDead(_276);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = const "cost exceeds possible amount to spend";
        _281 = &(*_282);
        _280 = solana_program::log::sol_log(move _281) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_281);
        StorageDead(_282);
        StorageDead(_280);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _481 = const _;
        _293 = &(*_481);
        _292 = &(*_293);
        _291 = move _292 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_292);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &_6;
        _300 = &(*_301);
        _299 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _300) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_300);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _480 = const _;
        _304 = &(*_480);
        _303 = &(*_304);
        _302 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _303) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_303);
        _298 = [move _299, move _302];
        StorageDead(_302);
        StorageDead(_299);
        _297 = &_298;
        _296 = &(*_297);
        _295 = move _296 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_296);
        _290 = Arguments::<'_>::new_v1(move _291, move _295) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_295);
        StorageDead(_291);
        _289 = format(move _290) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_290);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_293);
        _288 = move _289;
        StorageDead(_289);
        _287 = &_288;
        _286 = &(*_287);
        _285 = <String as Deref>::deref(move _286) -> [return: bb167, unwind: bb316];
    }

    bb167: {
        _284 = &(*_285);
        StorageDead(_286);
        _283 = solana_program::log::sol_log(move _284) -> [return: bb168, unwind: bb316];
    }

    bb168: {
        StorageDead(_284);
        drop(_288) -> [return: bb169, unwind: bb317];
    }

    bb169: {
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_283);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = _6;
        _309 = <i128 as Cast>::cast::<u128>(move _310) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_310);
        _308 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _309) -> [return: bb171, unwind continue];
    }

    bb171: {
        StorageDead(_309);
        _311 = discriminant(_308);
        switchInt(move _311) -> [0: bb172, 1: bb173, otherwise: bb5];
    }

    bb172: {
        StorageLive(_315);
        _315 = ((_308 as Continue).0: u128);
        _307 = _315;
        StorageDead(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = <i128 as Cast>::cast::<u128>(const _) -> [return: bb175, unwind continue];
    }

    bb173: {
        StorageLive(_312);
        _312 = ((_308 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_314);
        _314 = _312;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _314) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb287;
    }

    bb175: {
        _317 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _318) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_318);
        _319 = discriminant(_317);
        switchInt(move _319) -> [0: bb177, 1: bb178, otherwise: bb5];
    }

    bb177: {
        StorageLive(_323);
        _323 = ((_317 as Continue).0: u128);
        _316 = _323;
        StorageDead(_323);
        _306 = (move _307, move _316);
        StorageDead(_316);
        StorageDead(_307);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _306);
        StorageDead(_306);
        goto -> bb286;
    }

    bb178: {
        StorageLive(_320);
        _320 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_322);
        _322 = _320;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _322) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_316);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb286;
    }

    bb180: {
        StorageDead(_277);
        StorageDead(_276);
        _272 = const ();
        StorageDead(_275);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_273);
        StorageDead(_272);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = _234;
        StorageLive(_331);
        _331 = _235;
        _329 = <i128 as SafeMath>::safe_sub(move _330, move _331) -> [return: bb182, unwind continue];
    }

    bb182: {
        StorageDead(_331);
        StorageDead(_330);
        _328 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _329) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_329);
        _332 = discriminant(_328);
        switchInt(move _332) -> [0: bb184, 1: bb185, otherwise: bb5];
    }

    bb184: {
        StorageLive(_336);
        _336 = ((_328 as Continue).0: i128);
        _327 = _336;
        StorageDead(_336);
        _326 = <i128 as SafeMath>::safe_div(move _327, const _) -> [return: bb187, unwind continue];
    }

    bb185: {
        StorageLive(_333);
        _333 = ((_328 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_335);
        _335 = _333;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _335) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_327);
        StorageDead(_326);
        goto -> bb284;
    }

    bb187: {
        StorageDead(_327);
        _325 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _326) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_326);
        _337 = discriminant(_325);
        switchInt(move _337) -> [0: bb189, 1: bb190, otherwise: bb5];
    }

    bb189: {
        StorageLive(_341);
        _341 = ((_325 as Continue).0: i128);
        _324 = _341;
        StorageDead(_341);
        StorageDead(_328);
        StorageDead(_325);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = _253;
        StorageLive(_349);
        _349 = _271;
        _347 = <i128 as SafeMath>::safe_add(move _348, move _349) -> [return: bb192, unwind continue];
    }

    bb190: {
        StorageLive(_338);
        _338 = ((_325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_340);
        _340 = _338;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _340) -> [return: bb191, unwind continue];
    }

    bb191: {
        StorageDead(_340);
        StorageDead(_338);
        goto -> bb284;
    }

    bb192: {
        StorageDead(_349);
        StorageDead(_348);
        _346 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _347) -> [return: bb193, unwind continue];
    }

    bb193: {
        StorageDead(_347);
        _350 = discriminant(_346);
        switchInt(move _350) -> [0: bb194, 1: bb195, otherwise: bb5];
    }

    bb194: {
        StorageLive(_354);
        _354 = ((_346 as Continue).0: i128);
        _345 = _354;
        StorageDead(_354);
        _344 = <i128 as SafeMath>::safe_div(move _345, const _) -> [return: bb197, unwind continue];
    }

    bb195: {
        StorageLive(_351);
        _351 = ((_346 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_353);
        _353 = _351;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _353) -> [return: bb196, unwind continue];
    }

    bb196: {
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_345);
        StorageDead(_344);
        goto -> bb282;
    }

    bb197: {
        StorageDead(_345);
        _343 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _344) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_344);
        _355 = discriminant(_343);
        switchInt(move _355) -> [0: bb199, 1: bb200, otherwise: bb5];
    }

    bb199: {
        StorageLive(_359);
        _359 = ((_343 as Continue).0: i128);
        _342 = _359;
        StorageDead(_359);
        StorageDead(_346);
        StorageDead(_343);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = _324;
        _361 = Lt(move _362, const 0_i128);
        switchInt(move _361) -> [0: bb203, otherwise: bb202];
    }

    bb200: {
        StorageLive(_356);
        _356 = ((_343 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_358);
        _358 = _356;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _358) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_358);
        StorageDead(_356);
        goto -> bb282;
    }

    bb202: {
        StorageDead(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = _342;
        _363 = Lt(move _364, const 0_i128);
        switchInt(move _363) -> [0: bb207, otherwise: bb204];
    }

    bb203: {
        StorageDead(_362);
        goto -> bb208;
    }

    bb204: {
        StorageDead(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = _324;
        _365 = core::num::<impl i128>::abs(move _366) -> [return: bb205, unwind continue];
    }

    bb205: {
        StorageDead(_366);
        _324 = move _365;
        StorageDead(_365);
        StorageLive(_367);
        StorageLive(_368);
        _368 = _342;
        _367 = core::num::<impl i128>::abs(move _368) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_368);
        _342 = move _367;
        StorageDead(_367);
        _360 = const ();
        goto -> bb209;
    }

    bb207: {
        StorageDead(_364);
        goto -> bb208;
    }

    bb208: {
        _360 = const ();
        goto -> bb209;
    }

    bb209: {
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_360);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = _324;
        _370 = Gt(move _371, const 0_i128);
        switchInt(move _370) -> [0: bb213, otherwise: bb210];
    }

    bb210: {
        StorageDead(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = _342;
        _372 = Gt(move _373, const 0_i128);
        switchInt(move _372) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        StorageDead(_373);
        _369 = const ();
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = _324;
        StorageLive(_380);
        _380 = _342;
        _378 = Gt(move _379, move _380);
        switchInt(move _378) -> [0: bb216, otherwise: bb215];
    }

    bb212: {
        StorageDead(_373);
        goto -> bb214;
    }

    bb213: {
        StorageDead(_371);
        goto -> bb214;
    }

    bb214: {
        StorageLive(_374);
        _374 = panic(const "assertion failed: (numerator > 0 && denominator > 0)") -> unwind continue;
    }

    bb215: {
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = _324;
        _386 = <i128 as SafeMath>::safe_mul(move _387, const _) -> [return: bb217, unwind continue];
    }

    bb216: {
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = _324;
        _426 = <i128 as SafeMath>::safe_mul(move _427, const _) -> [return: bb240, unwind continue];
    }

    bb217: {
        StorageDead(_387);
        _385 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _386) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_386);
        _388 = discriminant(_385);
        switchInt(move _388) -> [0: bb219, 1: bb220, otherwise: bb5];
    }

    bb219: {
        StorageLive(_392);
        _392 = ((_385 as Continue).0: i128);
        _384 = _392;
        StorageDead(_392);
        StorageLive(_393);
        _393 = _342;
        _383 = <i128 as SafeMath>::safe_div(move _384, move _393) -> [return: bb222, unwind continue];
    }

    bb220: {
        StorageLive(_389);
        _389 = ((_385 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_391);
        _391 = _389;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _391) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_384);
        StorageDead(_383);
        goto -> bb279;
    }

    bb222: {
        StorageDead(_393);
        StorageDead(_384);
        _382 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _383) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_383);
        _394 = discriminant(_382);
        switchInt(move _394) -> [0: bb224, 1: bb225, otherwise: bb5];
    }

    bb224: {
        StorageLive(_398);
        _398 = ((_382 as Continue).0: i128);
        _381 = _398;
        StorageDead(_398);
        StorageDead(_385);
        StorageDead(_382);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = _6;
        _404 = <i128 as SafeMath>::safe_mul(move _405, const _) -> [return: bb227, unwind continue];
    }

    bb225: {
        StorageLive(_395);
        _395 = ((_382 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_397);
        _397 = _395;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _397) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_397);
        StorageDead(_395);
        goto -> bb279;
    }

    bb227: {
        StorageDead(_405);
        _403 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _404) -> [return: bb228, unwind continue];
    }

    bb228: {
        StorageDead(_404);
        _406 = discriminant(_403);
        switchInt(move _406) -> [0: bb229, 1: bb230, otherwise: bb5];
    }

    bb229: {
        StorageLive(_410);
        _410 = ((_403 as Continue).0: i128);
        _402 = _410;
        StorageDead(_410);
        _401 = <i128 as SafeMath>::safe_div(move _402, const _) -> [return: bb232, unwind continue];
    }

    bb230: {
        StorageLive(_407);
        _407 = ((_403 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_409);
        _409 = _407;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _409) -> [return: bb231, unwind continue];
    }

    bb231: {
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_402);
        StorageDead(_401);
        goto -> bb278;
    }

    bb232: {
        StorageDead(_402);
        _400 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _401) -> [return: bb233, unwind continue];
    }

    bb233: {
        StorageDead(_401);
        _411 = discriminant(_400);
        switchInt(move _411) -> [0: bb234, 1: bb235, otherwise: bb5];
    }

    bb234: {
        StorageLive(_415);
        _415 = ((_400 as Continue).0: i128);
        _399 = _415;
        StorageDead(_415);
        StorageDead(_403);
        StorageDead(_400);
        StorageLive(_416);
        StorageLive(_417);
        _417 = _381;
        StorageLive(_418);
        _418 = _399;
        _416 = Gt(move _417, move _418);
        switchInt(move _416) -> [0: bb238, otherwise: bb237];
    }

    bb235: {
        StorageLive(_412);
        _412 = ((_400 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_414);
        _414 = _412;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _414) -> [return: bb236, unwind continue];
    }

    bb236: {
        StorageDead(_414);
        StorageDead(_412);
        goto -> bb278;
    }

    bb237: {
        StorageDead(_418);
        StorageDead(_417);
        StorageLive(_419);
        _419 = _6;
        _377 = (move _419, const _);
        StorageDead(_419);
        goto -> bb239;
    }

    bb238: {
        StorageDead(_418);
        StorageDead(_417);
        StorageLive(_420);
        _420 = _381;
        _377 = (move _420, const _);
        StorageDead(_420);
        goto -> bb239;
    }

    bb239: {
        StorageDead(_416);
        StorageDead(_399);
        StorageDead(_381);
        goto -> bb263;
    }

    bb240: {
        StorageDead(_427);
        _425 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _426) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_426);
        _428 = discriminant(_425);
        switchInt(move _428) -> [0: bb242, 1: bb243, otherwise: bb5];
    }

    bb242: {
        StorageLive(_432);
        _432 = ((_425 as Continue).0: i128);
        _424 = _432;
        StorageDead(_432);
        StorageLive(_433);
        _433 = _342;
        _423 = <i128 as SafeMath>::safe_div(move _424, move _433) -> [return: bb245, unwind continue];
    }

    bb243: {
        StorageLive(_429);
        _429 = ((_425 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_431);
        _431 = _429;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _431) -> [return: bb244, unwind continue];
    }

    bb244: {
        StorageDead(_431);
        StorageDead(_429);
        StorageDead(_424);
        StorageDead(_423);
        goto -> bb276;
    }

    bb245: {
        StorageDead(_433);
        StorageDead(_424);
        _422 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _423) -> [return: bb246, unwind continue];
    }

    bb246: {
        StorageDead(_423);
        _434 = discriminant(_422);
        switchInt(move _434) -> [0: bb247, 1: bb248, otherwise: bb5];
    }

    bb247: {
        StorageLive(_438);
        _438 = ((_422 as Continue).0: i128);
        _421 = _438;
        StorageDead(_438);
        StorageDead(_425);
        StorageDead(_422);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = _7;
        _444 = <i128 as SafeMath>::safe_mul(move _445, const _) -> [return: bb250, unwind continue];
    }

    bb248: {
        StorageLive(_435);
        _435 = ((_422 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_437);
        _437 = _435;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _437) -> [return: bb249, unwind continue];
    }

    bb249: {
        StorageDead(_437);
        StorageDead(_435);
        goto -> bb276;
    }

    bb250: {
        StorageDead(_445);
        _443 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _444) -> [return: bb251, unwind continue];
    }

    bb251: {
        StorageDead(_444);
        _446 = discriminant(_443);
        switchInt(move _446) -> [0: bb252, 1: bb253, otherwise: bb5];
    }

    bb252: {
        StorageLive(_450);
        _450 = ((_443 as Continue).0: i128);
        _442 = _450;
        StorageDead(_450);
        _441 = <i128 as SafeMath>::safe_div(move _442, const _) -> [return: bb255, unwind continue];
    }

    bb253: {
        StorageLive(_447);
        _447 = ((_443 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_449);
        _449 = _447;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _449) -> [return: bb254, unwind continue];
    }

    bb254: {
        StorageDead(_449);
        StorageDead(_447);
        StorageDead(_442);
        StorageDead(_441);
        goto -> bb275;
    }

    bb255: {
        StorageDead(_442);
        _440 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _441) -> [return: bb256, unwind continue];
    }

    bb256: {
        StorageDead(_441);
        _451 = discriminant(_440);
        switchInt(move _451) -> [0: bb257, 1: bb258, otherwise: bb5];
    }

    bb257: {
        StorageLive(_455);
        _455 = ((_440 as Continue).0: i128);
        _439 = _455;
        StorageDead(_455);
        StorageDead(_443);
        StorageDead(_440);
        StorageLive(_456);
        StorageLive(_457);
        _457 = _421;
        StorageLive(_458);
        _458 = _439;
        _456 = Lt(move _457, move _458);
        switchInt(move _456) -> [0: bb261, otherwise: bb260];
    }

    bb258: {
        StorageLive(_452);
        _452 = ((_440 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_454);
        _454 = _452;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _454) -> [return: bb259, unwind continue];
    }

    bb259: {
        StorageDead(_454);
        StorageDead(_452);
        goto -> bb275;
    }

    bb260: {
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_459);
        _459 = _7;
        _377 = (move _459, const _);
        StorageDead(_459);
        goto -> bb262;
    }

    bb261: {
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_460);
        _460 = _421;
        _377 = (move _460, const _);
        StorageDead(_460);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_456);
        StorageDead(_439);
        StorageDead(_421);
        goto -> bb263;
    }

    bb263: {
        StorageDead(_378);
        StorageLive(_375);
        _375 = (_377.0: i128);
        StorageLive(_376);
        _376 = (_377.1: i128);
        StorageDead(_377);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = _375;
        _464 = <i128 as Cast>::cast::<u128>(move _465) -> [return: bb264, unwind continue];
    }

    bb264: {
        StorageDead(_465);
        _463 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _464) -> [return: bb265, unwind continue];
    }

    bb265: {
        StorageDead(_464);
        _466 = discriminant(_463);
        switchInt(move _466) -> [0: bb266, 1: bb267, otherwise: bb5];
    }

    bb266: {
        StorageLive(_470);
        _470 = ((_463 as Continue).0: u128);
        _462 = _470;
        StorageDead(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _474 = _376;
        _473 = <i128 as Cast>::cast::<u128>(move _474) -> [return: bb269, unwind continue];
    }

    bb267: {
        StorageLive(_467);
        _467 = ((_463 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_469);
        _469 = _467;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _469) -> [return: bb268, unwind continue];
    }

    bb268: {
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_342);
        StorageDead(_324);
        StorageDead(_271);
        StorageDead(_253);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_157);
        StorageDead(_106);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb274;
    }

    bb269: {
        StorageDead(_474);
        _472 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _473) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_473);
        _475 = discriminant(_472);
        switchInt(move _475) -> [0: bb271, 1: bb272, otherwise: bb5];
    }

    bb271: {
        StorageLive(_479);
        _479 = ((_472 as Continue).0: u128);
        _471 = _479;
        StorageDead(_479);
        _461 = (move _462, move _471);
        StorageDead(_471);
        StorageDead(_462);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _461);
        StorageDead(_461);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_342);
        StorageDead(_324);
        StorageDead(_271);
        StorageDead(_253);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_157);
        StorageDead(_106);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_472);
        StorageDead(_463);
        goto -> bb315;
    }

    bb272: {
        StorageLive(_476);
        _476 = ((_472 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_478);
        _478 = _476;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _478) -> [return: bb273, unwind continue];
    }

    bb273: {
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_471);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_342);
        StorageDead(_324);
        StorageDead(_271);
        StorageDead(_253);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_157);
        StorageDead(_106);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_472);
        goto -> bb274;
    }

    bb274: {
        StorageDead(_463);
        goto -> bb315;
    }

    bb275: {
        StorageDead(_443);
        StorageDead(_440);
        StorageDead(_439);
        goto -> bb277;
    }

    bb276: {
        StorageDead(_425);
        StorageDead(_422);
        goto -> bb277;
    }

    bb277: {
        StorageDead(_421);
        goto -> bb281;
    }

    bb278: {
        StorageDead(_403);
        StorageDead(_400);
        StorageDead(_399);
        goto -> bb280;
    }

    bb279: {
        StorageDead(_385);
        StorageDead(_382);
        goto -> bb280;
    }

    bb280: {
        StorageDead(_381);
        goto -> bb281;
    }

    bb281: {
        StorageDead(_378);
        StorageDead(_377);
        goto -> bb283;
    }

    bb282: {
        StorageDead(_346);
        StorageDead(_343);
        goto -> bb283;
    }

    bb283: {
        StorageDead(_342);
        goto -> bb285;
    }

    bb284: {
        StorageDead(_328);
        StorageDead(_325);
        goto -> bb285;
    }

    bb285: {
        StorageDead(_324);
        goto -> bb288;
    }

    bb286: {
        StorageDead(_317);
        goto -> bb287;
    }

    bb287: {
        StorageDead(_308);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_272);
        goto -> bb288;
    }

    bb288: {
        StorageDead(_271);
        goto -> bb290;
    }

    bb289: {
        StorageDead(_257);
        StorageDead(_254);
        goto -> bb290;
    }

    bb290: {
        StorageDead(_253);
        goto -> bb292;
    }

    bb291: {
        StorageDead(_239);
        StorageDead(_236);
        goto -> bb292;
    }

    bb292: {
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb300;
    }

    bb293: {
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb294;
    }

    bb294: {
        StorageDead(_172);
        StorageDead(_171);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb296;
    }

    bb296: {
        StorageDead(_166);
        StorageDead(_165);
        goto -> bb297;
    }

    bb297: {
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb298;
    }

    bb298: {
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb299;
    }

    bb299: {
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_158);
        goto -> bb300;
    }

    bb300: {
        StorageDead(_157);
        goto -> bb305;
    }

    bb301: {
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb302;
    }

    bb302: {
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb303;
    }

    bb303: {
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb304;
    }

    bb304: {
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb305;
    }

    bb305: {
        StorageDead(_106);
        goto -> bb308;
    }

    bb306: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb307;
    }

    bb307: {
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        goto -> bb308;
    }

    bb308: {
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb310;
    }

    bb309: {
        StorageDead(_59);
        StorageDead(_56);
        goto -> bb310;
    }

    bb310: {
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb312;
    }

    bb311: {
        StorageDead(_40);
        StorageDead(_37);
        goto -> bb312;
    }

    bb312: {
        StorageDead(_36);
        goto -> bb313;
    }

    bb313: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb314;
    }

    bb314: {
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb315;
    }

    bb315: {
        return;
    }

    bb316 (cleanup): {
        drop(_288) -> [return: bb317, unwind terminate(cleanup)];
    }

    bb317 (cleanup): {
        resume;
    }
}
