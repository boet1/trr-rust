digraph Mir_0_2790 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_interest_token_amount(_1: u128, _2: &amp;ReErased state::spot_market::SpotMarket, _3: u128) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: u32;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: u32;<br align="left"/>let _14: u128;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _19: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: u128;<br align="left"/>let mut _27: u128;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: u128;<br align="left"/>let mut _33: u128;<br align="left"/>debug balance =&gt; _1;<br align="left"/>debug spot_market =&gt; _2;<br align="left"/>debug interest =&gt; _3;<br align="left"/>debug precision_decrease =&gt; _4;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug token_amount =&gt; _14;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>>;
    bb0__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_2).41: u32)<br/></td></tr><tr><td align="left">_7 = &lt;u32 as SafeMath&gt;::safe_sub(const 19_u32, move _8)</td></tr></table>>];
    bb1__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_9 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_6 as Continue).0: u32)<br/>_5 = _13<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_4 = core::num::&lt;impl u128&gt;::pow(const 10_u128, move _5)</td></tr></table>>];
    bb4__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_6)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _1<br/>StorageLive(_21)<br/>_21 = _3<br/></td></tr><tr><td align="left">_19 = &lt;u128 as SafeMath&gt;::safe_mul(move _20, move _21)</td></tr></table>>];
    bb8__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb9__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_22 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb10__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_18 as Continue).0: u128)<br/>_17 = _26<br/>StorageDead(_26)<br/>StorageLive(_27)<br/>_27 = _4<br/></td></tr><tr><td align="left">_16 = &lt;u128 as SafeMath&gt;::safe_div(move _17, move _27)</td></tr></table>>];
    bb11__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb12__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb14__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_28 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb15__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_15 as Continue).0: u128)<br/>_14 = _32<br/>StorageDead(_32)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageLive(_33)<br/>_33 = _14<br/>_0 = std::result::Result::&lt;u128, error::ErrorCode&gt;::Ok(move _33)<br/>StorageDead(_33)<br/>StorageDead(_14)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb17__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2790 -> bb1__0_2790 [label="return"];
    bb1__0_2790 -> bb2__0_2790 [label="return"];
    bb2__0_2790 -> bb3__0_2790 [label="0"];
    bb2__0_2790 -> bb5__0_2790 [label="1"];
    bb2__0_2790 -> bb4__0_2790 [label="otherwise"];
    bb3__0_2790 -> bb7__0_2790 [label="return"];
    bb5__0_2790 -> bb6__0_2790 [label="return"];
    bb6__0_2790 -> bb19__0_2790 [label=""];
    bb7__0_2790 -> bb8__0_2790 [label="return"];
    bb8__0_2790 -> bb9__0_2790 [label="return"];
    bb9__0_2790 -> bb10__0_2790 [label="0"];
    bb9__0_2790 -> bb11__0_2790 [label="1"];
    bb9__0_2790 -> bb4__0_2790 [label="otherwise"];
    bb10__0_2790 -> bb13__0_2790 [label="return"];
    bb11__0_2790 -> bb12__0_2790 [label="return"];
    bb12__0_2790 -> bb18__0_2790 [label=""];
    bb13__0_2790 -> bb14__0_2790 [label="return"];
    bb14__0_2790 -> bb15__0_2790 [label="0"];
    bb14__0_2790 -> bb16__0_2790 [label="1"];
    bb14__0_2790 -> bb4__0_2790 [label="otherwise"];
    bb15__0_2790 -> bb20__0_2790 [label=""];
    bb16__0_2790 -> bb17__0_2790 [label="return"];
    bb17__0_2790 -> bb18__0_2790 [label=""];
    bb18__0_2790 -> bb19__0_2790 [label=""];
    bb19__0_2790 -> bb20__0_2790 [label=""];
}
