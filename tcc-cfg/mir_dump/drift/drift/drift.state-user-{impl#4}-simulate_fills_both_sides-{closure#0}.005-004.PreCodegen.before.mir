// MIR for `state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::simulate_fills_both_sides::{closure#0}` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::simulate_fills_both_sides::{closure#0}(_1: &{closure@programs/drift/src/state/user.rs:862:46: 862:85}, _2: i128, _3: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug token_amount => _2;
    debug token_value => _3;
    debug spot_market => (*((*_1).0: &&state::spot_market::SpotMarket));
    debug strict_oracle_price => (*((*_1).1: &&state::oracle::StrictOraclePrice));
    debug margin_type => (*((*_1).2: &math::margin::MarginRequirementType));
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _4: bool;
    let mut _5: i128;
    let _6: u32;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _8: std::result::Result<u32, error::ErrorCode>;
    let mut _9: &state::spot_market::SpotMarket;
    let mut _10: u128;
    let mut _11: i128;
    let mut _12: i64;
    let mut _13: &math::margin::MarginRequirementType;
    let _14: &math::margin::MarginRequirementType;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: u32;
    let mut _20: i128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _22: std::result::Result<i128, error::ErrorCode>;
    let mut _23: i128;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: u32;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: bool;
    let mut _39: i128;
    let _40: u32;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _42: std::result::Result<u32, error::ErrorCode>;
    let mut _43: &state::spot_market::SpotMarket;
    let mut _44: u128;
    let mut _45: i128;
    let mut _46: &math::margin::MarginRequirementType;
    let _47: &math::margin::MarginRequirementType;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: u32;
    let mut _53: i128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _55: std::result::Result<i128, error::ErrorCode>;
    let mut _56: i128;
    let mut _57: i128;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _59: std::result::Result<i128, error::ErrorCode>;
    let mut _60: u32;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: &&state::spot_market::SpotMarket;
    let mut _72: &state::spot_market::SpotMarket;
    let mut _73: &&state::oracle::StrictOraclePrice;
    let mut _74: &state::oracle::StrictOraclePrice;
    let mut _75: &math::margin::MarginRequirementType;
    let mut _76: &&state::spot_market::SpotMarket;
    let mut _77: &state::spot_market::SpotMarket;
    let mut _78: &math::margin::MarginRequirementType;
    scope 1 {
        debug asset_weight => _6;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: i128;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: i128;
        scope 6 {
            debug residual => _29;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _32;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _34;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _37;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }
    scope 14 {
        debug liability_weight => _40;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: i128;
        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _70: i128;
        scope 19 {
            debug residual => _62;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _65;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _67;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _70;
            scope 26 {
            }
        }
    }
    scope 15 {
        debug residual => _49;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _52;
        scope 18 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _4 = Gt(move _5, const 0_i128);
        switchInt(move _4) -> [0: bb20, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _71 = deref_copy ((*_1).0: &&state::spot_market::SpotMarket);
        _72 = deref_copy (*_71);
        _9 = &(*_72);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        _10 = core::num::<impl i128>::unsigned_abs(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        _73 = deref_copy ((*_1).1: &&state::oracle::StrictOraclePrice);
        _74 = deref_copy (*_73);
        _12 = ((*_74).0: i64);
        StorageLive(_13);
        StorageLive(_14);
        _75 = deref_copy ((*_1).2: &math::margin::MarginRequirementType);
        _14 = &(*_75);
        _13 = &(*_14);
        _8 = SpotMarket::get_asset_weight(move _9, move _10, move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_7 as Continue).0: u32);
        _6 = _19;
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_7);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _3;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _6;
        _26 = <u32 as Cast>::cast::<i128>(move _27) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_16);
        _16 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb45;
    }

    bb9: {
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: i128);
        _24 = _32;
        StorageDead(_32);
        _22 = <i128 as SafeMath>::safe_mul(move _23, move _24) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb44;
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_22);
        _33 = discriminant(_21);
        switchInt(move _33) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_37);
        _37 = ((_21 as Continue).0: i128);
        _20 = _37;
        StorageDead(_37);
        _0 = <i128 as SafeMath>::safe_div(move _20, const _) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_34);
        _34 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_34);
        goto -> bb44;
    }

    bb19: {
        StorageDead(_20);
        StorageDead(_6);
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb41;
    }

    bb20: {
        StorageDead(_5);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _3;
        _38 = Lt(move _39, const 0_i128);
        switchInt(move _38) -> [0: bb39, otherwise: bb21];
    }

    bb21: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _76 = deref_copy ((*_1).0: &&state::spot_market::SpotMarket);
        _77 = deref_copy (*_76);
        _43 = &(*_77);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _2;
        _44 = core::num::<impl i128>::unsigned_abs(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _78 = deref_copy ((*_1).2: &math::margin::MarginRequirementType);
        _47 = &(*_78);
        _46 = &(*_47);
        _42 = SpotMarket::get_liability_weight(move _43, move _44, move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        _48 = discriminant(_41);
        switchInt(move _48) -> [0: bb25, 1: bb26, otherwise: bb6];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_41 as Continue).0: u32);
        _40 = _52;
        StorageDead(_52);
        StorageDead(_47);
        StorageDead(_41);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _3;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _40;
        _59 = <u32 as Cast>::cast::<i128>(move _60) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_49);
        _49 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb43;
    }

    bb28: {
        StorageDead(_60);
        _58 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb30, 1: bb31, otherwise: bb6];
    }

    bb30: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: i128);
        _57 = _65;
        StorageDead(_65);
        _55 = <i128 as SafeMath>::safe_mul(move _56, move _57) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_62);
        _62 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb42;
    }

    bb33: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_55);
        _66 = discriminant(_54);
        switchInt(move _66) -> [0: bb35, 1: bb36, otherwise: bb6];
    }

    bb35: {
        StorageLive(_70);
        _70 = ((_54 as Continue).0: i128);
        _53 = _70;
        StorageDead(_70);
        _0 = <i128 as SafeMath>::safe_div(move _53, const _) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_67);
        _67 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_69);
        StorageDead(_67);
        goto -> bb42;
    }

    bb38: {
        StorageDead(_53);
        StorageDead(_40);
        StorageDead(_58);
        StorageDead(_54);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_39);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_38);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_4);
        goto -> bb46;
    }

    bb42: {
        StorageDead(_53);
        StorageDead(_40);
        StorageDead(_58);
        StorageDead(_54);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_38);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_20);
        StorageDead(_6);
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_4);
        goto -> bb46;
    }

    bb46: {
        return;
    }
}
