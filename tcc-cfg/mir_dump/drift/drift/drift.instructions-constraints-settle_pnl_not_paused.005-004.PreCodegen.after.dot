digraph Mir_0_1167 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn constraints::settle_pnl_not_paused(_1: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: enumflags2::BitFlags&lt;state::state::ExchangeStatus&gt;;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, enumflags2::BitFlags&lt;state::state::ExchangeStatus&gt;&gt;;<br align="left"/>let mut _6: std::result::Result&lt;enumflags2::BitFlags&lt;state::state::ExchangeStatus&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::state::State;<br align="left"/>let _8: &amp;ReErased state::state::State;<br align="left"/>let mut _9: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: enumflags2::BitFlags&lt;state::state::ExchangeStatus&gt;;<br align="left"/>let mut _15: state::state::ExchangeStatus;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: anchor_lang::error::Error;<br align="left"/>let mut _18: error::ErrorCode;<br align="left"/>let mut _19: ();<br align="left"/>debug state =&gt; _1;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>>;
    bb0__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/></td></tr><tr><td align="left">_8 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _9)</td></tr></table>>];
    bb1__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;(*_8)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_6 = state::state::State::get_exchange_status(move _7)</td></tr></table>>];
    bb2__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;BitFlags&lt;state::state::ExchangeStatus&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_10 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb4__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_5 as Continue).0: enumflags2::BitFlags&lt;state::state::ExchangeStatus&gt;)<br/>_4 = _14<br/>StorageDead(_14)<br/>StorageLive(_15)<br/>_15 = state::state::ExchangeStatus::SettlePnlPaused<br/></td></tr><tr><td align="left">_3 = BitFlags::&lt;state::state::ExchangeStatus&gt;::contains::&lt;state::state::ExchangeStatus&gt;(move _4, move _15)</td></tr></table>>];
    bb5__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb7__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb9__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = error::ErrorCode::ExchangePaused<br/></td></tr><tr><td align="left">_17 = &lt;error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _18)</td></tr></table>>];
    bb10__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _17)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_19)<br/>_19 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _19)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1167 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1167 -> bb1__0_1167 [label="return"];
    bb1__0_1167 -> bb2__0_1167 [label="return"];
    bb2__0_1167 -> bb3__0_1167 [label="return"];
    bb3__0_1167 -> bb4__0_1167 [label="0"];
    bb3__0_1167 -> bb6__0_1167 [label="1"];
    bb3__0_1167 -> bb5__0_1167 [label="otherwise"];
    bb4__0_1167 -> bb8__0_1167 [label="return"];
    bb6__0_1167 -> bb7__0_1167 [label="return"];
    bb7__0_1167 -> bb12__0_1167 [label=""];
    bb8__0_1167 -> bb11__0_1167 [label="0"];
    bb8__0_1167 -> bb9__0_1167 [label="otherwise"];
    bb9__0_1167 -> bb10__0_1167 [label="return"];
    bb10__0_1167 -> bb12__0_1167 [label=""];
    bb11__0_1167 -> bb13__0_1167 [label=""];
    bb12__0_1167 -> bb13__0_1167 [label=""];
}
