// MIR for `compute_base_lot_size` after PreCodegen

fn compute_base_lot_size(_1: u64, _2: u64, _3: u64, _4: &MarketHeader) -> std::result::Result<BaseLots, error::ErrorCode> {
    debug taker_base_asset_amount => _1;
    debug taker_max_quote_asset_amount => _2;
    debug taker_price => _3;
    debug header => _4;
    let mut _0: std::result::Result<phoenix::quantities::BaseLots, error::ErrorCode>;
    let mut _5: phoenix::quantities::BaseLots;
    let mut _6: phoenix::quantities::BaseLots;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::quantities::BaseLots>;
    let mut _8: std::result::Result<phoenix::quantities::BaseLots, error::ErrorCode>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: &phoenix::quantities::BaseAtomsPerBaseLot;
    let _13: phoenix::quantities::BaseAtomsPerBaseLot;
    let mut _14: &phoenix::program::MarketHeader;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: phoenix::quantities::BaseLots;
    let mut _20: phoenix::quantities::BaseLots;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::quantities::BaseLots>;
    let mut _22: std::result::Result<phoenix::quantities::BaseLots, error::ErrorCode>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: u128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _26: std::result::Result<u128, error::ErrorCode>;
    let mut _27: u128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u64;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: u128;
    let mut _39: u128;
    let mut _40: u32;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: u128;
    let mut _46: u128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _51: std::result::Result<u128, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: u128;
    let mut _58: u128;
    let mut _59: &phoenix::quantities::BaseAtomsPerBaseLot;
    let _60: phoenix::quantities::BaseAtomsPerBaseLot;
    let mut _61: &phoenix::program::MarketHeader;
    let mut _62: isize;
    let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: u128;
    let mut _67: isize;
    let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: u128;
    let mut _72: isize;
    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: phoenix::quantities::BaseLots;
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _35;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _38;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _42;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _45;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _54;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _57;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _63;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _66;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _68;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _71;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _73;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _76;
        scope 28 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_4);
        _13 = MarketHeader::get_base_lot_size(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = &_13;
        StorageDead(_14);
        _11 = <BaseAtomsPerBaseLot as phoenix::quantities::WrapperU64>::as_u64(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _9 = <u64 as SafeMath>::safe_div(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = std::result::Result::<u64, error::ErrorCode>::map::<BaseLots, fn(u64) -> BaseLots {<BaseLots as phoenix::quantities::WrapperU64>::new}>(move _9, <BaseLots as phoenix::quantities::WrapperU64>::new) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_9);
        _7 = <std::result::Result<BaseLots, error::ErrorCode> as Try>::branch(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_7 as Continue).0: phoenix::quantities::BaseLots);
        _6 = _19;
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _2;
        _32 = <u64 as Cast>::cast::<u128>(move _33) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_16);
        _16 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb50;
    }

    bb10: {
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: u128);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (((*_4).3: phoenix::program::TokenParams).0: u32);
        _39 = core::num::<impl u128>::pow(const 10_u128, move _40) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb48;
    }

    bb15: {
        StorageDead(_40);
        _29 = <u128 as SafeMath>::safe_mul(move _30, move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        _41 = discriminant(_28);
        switchInt(move _41) -> [0: bb18, 1: bb19, otherwise: bb7];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_28 as Continue).0: u128);
        _27 = _45;
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _3;
        _51 = <u64 as Cast>::cast::<u128>(move _52) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb48;
    }

    bb21: {
        StorageDead(_52);
        _50 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb23, 1: bb24, otherwise: bb7];
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: u128);
        _49 = _57;
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_4);
        _60 = MarketHeader::get_base_lot_size(move _61) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb47;
    }

    bb26: {
        _59 = &_60;
        StorageDead(_61);
        _58 = BaseAtomsPerBaseLot::as_u128(move _59) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_59);
        _48 = <u128 as SafeMath>::safe_mul(move _49, move _58) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_48);
        _62 = discriminant(_47);
        switchInt(move _62) -> [0: bb30, 1: bb31, otherwise: bb7];
    }

    bb30: {
        StorageLive(_66);
        _66 = ((_47 as Continue).0: u128);
        _46 = _66;
        StorageDead(_66);
        _26 = <u128 as SafeMath>::safe_div(move _27, move _46) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_46);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb45;
    }

    bb33: {
        StorageDead(_46);
        StorageDead(_27);
        _25 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_26);
        _67 = discriminant(_25);
        switchInt(move _67) -> [0: bb35, 1: bb36, otherwise: bb7];
    }

    bb35: {
        StorageLive(_71);
        _71 = ((_25 as Continue).0: u128);
        _24 = _71;
        StorageDead(_71);
        _23 = <u128 as Cast>::cast::<u64>(move _24) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_68);
        _68 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb45;
    }

    bb38: {
        StorageDead(_24);
        _22 = std::result::Result::<u64, error::ErrorCode>::map::<BaseLots, fn(u64) -> BaseLots {<BaseLots as phoenix::quantities::WrapperU64>::new}>(move _23, <BaseLots as phoenix::quantities::WrapperU64>::new) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_23);
        _21 = <std::result::Result<BaseLots, error::ErrorCode> as Try>::branch(move _22) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_22);
        _72 = discriminant(_21);
        switchInt(move _72) -> [0: bb41, 1: bb42, otherwise: bb7];
    }

    bb41: {
        StorageLive(_76);
        _76 = ((_21 as Continue).0: phoenix::quantities::BaseLots);
        _20 = _76;
        StorageDead(_76);
        _5 = <BaseLots as Ord>::min(move _6, move _20) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_73);
        _73 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<BaseLots, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb46;
    }

    bb44: {
        StorageDead(_20);
        StorageDead(_6);
        _0 = std::result::Result::<BaseLots, error::ErrorCode>::Ok(move _5);
        StorageDead(_5);
        StorageDead(_60);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb51;
    }

    bb45: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_20);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_60);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_50);
        StorageDead(_47);
        goto -> bb49;
    }

    bb48: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_21);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb51;
    }

    bb51: {
        return;
    }
}
