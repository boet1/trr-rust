// MIR for `update_mark_twap_crank` after PreCodegen

fn update_mark_twap_crank(_1: &mut AMM, _2: i64, _3: &OraclePriceData, _4: Option<u64>, _5: Option<u64>, _6: Option<i64>) -> std::result::Result<(), error::ErrorCode> {
    debug amm => _1;
    debug now => _2;
    debug oracle_price_data => _3;
    debug best_dlob_bid_price => _4;
    debug best_dlob_ask_price => _5;
    debug sanitize_clamp => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: &state::perp_market::AMM;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u64;
    let mut _18: (u64, u64);
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _20: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _21: &state::perp_market::AMM;
    let mut _22: u64;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: isize;
    let mut _31: u64;
    let mut _32: u64;
    let mut _34: isize;
    let mut _36: u64;
    let mut _37: u64;
    let _38: ();
    let mut _39: bool;
    let mut _40: u64;
    let mut _41: u64;
    let mut _43: i64;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _45: std::result::Result<i64, error::ErrorCode>;
    let mut _46: i64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _48: std::result::Result<i64, error::ErrorCode>;
    let mut _49: u64;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: i64;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: i64;
    let mut _62: i64;
    let mut _63: i64;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _79: std::result::Result<u64, error::ErrorCode>;
    let mut _80: i64;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _82: std::result::Result<i64, error::ErrorCode>;
    let mut _83: i64;
    let mut _84: i64;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: u64;
    let mut _96: u64;
    let _97: u64;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _99: std::result::Result<u64, error::ErrorCode>;
    let mut _100: &mut state::perp_market::AMM;
    let mut _101: i64;
    let mut _102: u64;
    let mut _103: u64;
    let mut _104: std::option::Option<u64>;
    let mut _105: std::option::Option<i64>;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: ();
    scope 1 {
        debug amm_reserve_price => _7;
        let _16: u64;
        let _17: u64;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: (u64, u64);
        scope 6 {
            debug amm_bid_price => _16;
            debug amm_ask_price => _17;
            let mut _28: u64;
            let _30: u64;
            scope 11 {
                debug best_bid_price => _28;
                let mut _33: u64;
                let _35: u64;
                scope 13 {
                    debug best_ask_price => _33;
                    let _42: i64;
                    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _54: i64;
                    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _60: i64;
                    let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _110: u64;
                    scope 15 {
                        debug market_basis => _42;
                        let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _89: i64;
                        let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _94: u64;
                        scope 24 {
                            debug residual => _86;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _89;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug residual => _91;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _94;
                            scope 31 {
                            }
                        }
                    }
                    scope 16 {
                        debug residual => _51;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug val => _54;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug residual => _57;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _60;
                        scope 23 {
                        }
                    }
                    scope 32 {
                        debug residual => _107;
                        scope 33 {
                        }
                    }
                    scope 34 {
                        debug val => _110;
                        scope 35 {
                        }
                    }
                }
                scope 14 {
                    debug best_dlob_ask_price => _35;
                }
            }
            scope 12 {
                debug best_dlob_bid_price => _30;
            }
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        _9 = AMM::reserve_price(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u64);
        _7 = _15;
        StorageDead(_15);
        StorageDead(_8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_1);
        StorageLive(_22);
        _22 = _7;
        _20 = AMM::bid_ask_price(move _21, move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb61;
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: (u64, u64));
        _18 = _27;
        StorageDead(_27);
        StorageLive(_16);
        _16 = (_18.0: u64);
        StorageLive(_17);
        _17 = (_18.1: u64);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_28);
        _29 = discriminant(_4);
        switchInt(move _29) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb61;
    }

    bb12: {
        _28 = _16;
        goto -> bb15;
    }

    bb13: {
        StorageLive(_30);
        _30 = ((_4 as Some).0: u64);
        StorageLive(_31);
        _31 = _30;
        StorageLive(_32);
        _32 = _16;
        _28 = <u64 as Ord>::max(move _31, move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb15;
    }

    bb15: {
        StorageLive(_33);
        _34 = discriminant(_5);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _33 = _17;
        goto -> bb19;
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_5 as Some).0: u64);
        StorageLive(_36);
        _36 = _35;
        StorageLive(_37);
        _37 = _17;
        _33 = <u64 as Ord>::min(move _36, move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb19;
    }

    bb19: {
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _28;
        StorageLive(_41);
        _41 = _33;
        _39 = Gt(move _40, move _41);
        switchInt(move _39) -> [0: bb50, otherwise: bb20];
    }

    bb20: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).46: u64);
        _48 = <u64 as Cast>::cast::<i64>(move _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_49);
        _47 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_48);
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_54);
        _54 = ((_47 as Continue).0: i64);
        _46 = _54;
        StorageDead(_54);
        StorageLive(_55);
        _55 = (((*_1).1: state::oracle::HistoricalOracleData).4: i64);
        _45 = <i64 as SafeMath>::safe_sub(move _46, move _55) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb58;
    }

    bb26: {
        StorageDead(_55);
        StorageDead(_46);
        _44 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _45) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_45);
        _56 = discriminant(_44);
        switchInt(move _56) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_60);
        _60 = ((_44 as Continue).0: i64);
        _43 = _60;
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = ((*_3).0: i64);
        _64 = Eq(_63, const i64::MIN);
        assert(!move _64, "attempt to negate `{}`, which would overflow", _63) -> [success: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb58;
    }

    bb31: {
        _62 = Neg(move _63);
        StorageDead(_63);
        _65 = Eq(const 100_i64, const 0_i64);
        assert(!move _65, "attempt to divide `{}` by zero", _62) -> [success: bb32, unwind continue];
    }

    bb32: {
        _66 = Eq(const 100_i64, const -1_i64);
        _67 = Eq(_62, const i64::MIN);
        _68 = BitAnd(move _66, move _67);
        assert(!move _68, "attempt to compute `{} / {}`, which would overflow", _62, const 100_i64) -> [success: bb33, unwind continue];
    }

    bb33: {
        _61 = Div(move _62, const 100_i64);
        StorageDead(_62);
        StorageLive(_69);
        StorageLive(_70);
        _70 = ((*_3).0: i64);
        _71 = Eq(const 100_i64, const 0_i64);
        assert(!move _71, "attempt to divide `{}` by zero", _70) -> [success: bb34, unwind continue];
    }

    bb34: {
        _72 = Eq(const 100_i64, const -1_i64);
        _73 = Eq(_70, const i64::MIN);
        _74 = BitAnd(move _72, move _73);
        assert(!move _74, "attempt to compute `{} / {}`, which would overflow", _70, const 100_i64) -> [success: bb35, unwind continue];
    }

    bb35: {
        _69 = Div(move _70, const 100_i64);
        StorageDead(_70);
        _42 = <i64 as Ord>::clamp(move _43, move _61, move _69) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_61);
        StorageDead(_43);
        StorageDead(_47);
        StorageDead(_44);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _28;
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ((*_3).0: i64);
        StorageLive(_84);
        _84 = _42;
        _82 = <i64 as SafeMath>::safe_add(move _83, move _84) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_84);
        StorageDead(_83);
        _81 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_82);
        _85 = discriminant(_81);
        switchInt(move _85) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_89);
        _89 = ((_81 as Continue).0: i64);
        _80 = _89;
        StorageDead(_89);
        _79 = <i64 as Cast>::cast::<u64>(move _80) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_86);
        _86 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb57;
    }

    bb42: {
        StorageDead(_80);
        _78 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _79) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_79);
        _90 = discriminant(_78);
        switchInt(move _90) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_94);
        _94 = ((_78 as Continue).0: u64);
        _77 = _94;
        StorageDead(_94);
        _75 = Ge(move _76, move _77);
        switchInt(move _75) -> [0: bb48, otherwise: bb47];
    }

    bb45: {
        StorageLive(_91);
        _91 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_93);
        StorageDead(_91);
        goto -> bb57;
    }

    bb47: {
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_95);
        _95 = _33;
        _28 = move _95;
        StorageDead(_95);
        _38 = const ();
        goto -> bb49;
    }

    bb48: {
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_96);
        _96 = _28;
        _33 = move _96;
        StorageDead(_96);
        _38 = const ();
        goto -> bb49;
    }

    bb49: {
        StorageDead(_75);
        StorageDead(_42);
        goto -> bb51;
    }

    bb50: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = const ();
        goto -> bb51;
    }

    bb51: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut (*_1);
        StorageLive(_101);
        _101 = _2;
        StorageLive(_102);
        _102 = _28;
        StorageLive(_103);
        _103 = _33;
        StorageLive(_104);
        _104 = Option::<u64>::None;
        StorageLive(_105);
        _105 = _6;
        _99 = update_mark_twap(move _100, move _101, move _102, move _103, move _104, move _105) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        _98 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _99) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_99);
        _106 = discriminant(_98);
        switchInt(move _106) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_110);
        _110 = ((_98 as Continue).0: u64);
        _97 = _110;
        StorageDead(_110);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_111);
        _111 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _111);
        StorageDead(_111);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_7);
        goto -> bb62;
    }

    bb55: {
        StorageLive(_107);
        _107 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb60;
    }

    bb57: {
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb59;
    }

    bb58: {
        StorageDead(_43);
        StorageDead(_47);
        StorageDead(_44);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_7);
        goto -> bb62;
    }

    bb62: {
        return;
    }
}
