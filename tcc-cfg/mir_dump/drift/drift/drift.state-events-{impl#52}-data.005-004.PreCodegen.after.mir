// MIR for `state::events::<impl at programs/drift/src/state/events.rs:180:1: 180:9>::data` after PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:180:1: 180:9>::data(_1: &OrderRecord) -> Vec<u8> {
    debug self => _1;
    let mut _0: std::vec::Vec<u8>;
    let mut _2: std::vec::Vec<u8>;
    let mut _3: &[u8];
    let mut _4: &[u8; 8];
    let _5: [u8; 8];
    let _6: ();
    let mut _7: &mut std::vec::Vec<u8>;
    let mut _8: &mut std::vec::Vec<u8>;
    let mut _9: &mut std::vec::Vec<u8>;
    let mut _10: std::vec::Vec<u8>;
    let mut _11: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _12: &state::events::OrderRecord;
    let mut _13: &[u8; 8];
    scope 1 {
        debug d => _2;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _13 = const _;
        _4 = &(*_13);
        _3 = move _4 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_4);
        _2 = std::slice::<impl [u8]>::to_vec(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut _2;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_1);
        _11 = <OrderRecord as BorshSerialize>::try_to_vec(move _12) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        StorageDead(_12);
        _10 = std::result::Result::<Vec<u8>, std::io::Error>::unwrap(move _11) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        StorageDead(_11);
        _9 = &mut _10;
        _8 = &mut (*_9);
        _6 = Vec::<u8>::append(move _7, move _8) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        drop(_10) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        _0 = move _2;
        StorageDead(_2);
        return;
    }

    bb6 (cleanup): {
        drop(_10) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}
