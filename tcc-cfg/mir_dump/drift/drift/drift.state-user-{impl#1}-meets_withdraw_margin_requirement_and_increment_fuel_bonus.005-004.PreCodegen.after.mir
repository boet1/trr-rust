// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::meets_withdraw_margin_requirement_and_increment_fuel_bonus` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::meets_withdraw_margin_requirement_and_increment_fuel_bonus(_1: &mut User, _2: &PerpMarketMap<'_>, _3: &SpotMarketMap<'_>, _4: &mut OracleMap<'_>, _5: math::margin::MarginRequirementType, _6: u16, _7: u128, _8: &mut UserStats, _9: i64) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug perp_market_map => _2;
    debug spot_market_map => _3;
    debug oracle_map => _4;
    debug margin_requirement_type => _5;
    debug withdraw_market_index => _6;
    debug withdraw_amount => _7;
    debug user_stats => _8;
    debug now => _9;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _10: bool;
    let mut _11: &math::margin::MarginRequirementType;
    let mut _12: &math::margin::MarginRequirementType;
    let _13: math::margin::MarginRequirementType;
    let mut _15: state::margin_calculation::MarginContext;
    let mut _16: state::margin_calculation::MarginContext;
    let mut _17: state::margin_calculation::MarginContext;
    let mut _18: state::margin_calculation::MarginContext;
    let mut _19: math::margin::MarginRequirementType;
    let mut _20: bool;
    let mut _21: u16;
    let mut _22: i128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _24: std::result::Result<i128, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: &state::user::User;
    let mut _32: i64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _35: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _36: &state::user::User;
    let mut _37: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _38: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _39: &mut state::oracle_map::OracleMap<'_>;
    let mut _40: state::margin_calculation::MarginContext;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: ();
    let mut _47: bool;
    let mut _48: u128;
    let mut _49: bool;
    let mut _50: u8;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _52: std::result::Result<u8, error::ErrorCode>;
    let mut _53: &state::margin_calculation::MarginCalculation;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _61: std::result::Result<(), error::ErrorCode>;
    let mut _62: bool;
    let mut _63: ();
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 2];
    let _75: &[&str; 2];
    let _76: [&str; 2];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: [core::fmt::rt::Argument<'_>; 1];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &error::ErrorCode;
    let _83: &error::ErrorCode;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: error::ErrorCode;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _93: ();
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _95: std::result::Result<(), error::ErrorCode>;
    let mut _96: &state::user::User;
    let mut _97: state::margin_calculation::MarginCalculation;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _103: ();
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _105: std::result::Result<(), error::ErrorCode>;
    let mut _106: bool;
    let mut _107: &state::margin_calculation::MarginCalculation;
    let mut _108: ();
    let _110: ();
    let mut _111: &str;
    let _112: &str;
    let mut _113: &std::string::String;
    let _114: &std::string::String;
    let _115: std::string::String;
    let mut _117: std::fmt::Arguments<'_>;
    let mut _118: &[&str];
    let mut _119: &[&str; 2];
    let _120: &[&str; 2];
    let _121: [&str; 2];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let mut _123: &[core::fmt::rt::Argument<'_>; 1];
    let _124: &[core::fmt::rt::Argument<'_>; 1];
    let _125: [core::fmt::rt::Argument<'_>; 1];
    let mut _126: core::fmt::rt::Argument<'_>;
    let mut _127: &error::ErrorCode;
    let _128: &error::ErrorCode;
    let _129: ();
    let mut _130: &str;
    let _131: &str;
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let _134: std::string::String;
    let mut _136: std::fmt::Arguments<'_>;
    let mut _137: &[&str];
    let mut _138: &[&str; 2];
    let _139: &[&str; 2];
    let _140: [&str; 2];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let mut _142: &[core::fmt::rt::Argument<'_>; 2];
    let _143: &[core::fmt::rt::Argument<'_>; 2];
    let _144: [core::fmt::rt::Argument<'_>; 2];
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &i128;
    let _147: &i128;
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &u128;
    let _150: &u128;
    let mut _151: error::ErrorCode;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _157: ();
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _159: std::result::Result<(), error::ErrorCode>;
    let mut _160: &mut state::user::UserStats;
    let mut _161: &mut state::user::User;
    let mut _162: u32;
    let mut _163: u32;
    let mut _164: u32;
    let mut _165: i64;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _174: &math::margin::MarginRequirementType;
    scope 1 {
        debug strict => _10;
        let _14: state::margin_calculation::MarginContext;
        let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _30: i128;
        scope 2 {
            debug context => _14;
            let _33: state::margin_calculation::MarginCalculation;
            let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _45: state::margin_calculation::MarginCalculation;
            scope 7 {
                debug calculation => _33;
                let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _58: u8;
                let _64: error::ErrorCode;
                let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _92: ();
                let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _102: ();
                let _109: error::ErrorCode;
                let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _156: ();
                let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _170: ();
                scope 12 {
                    debug residual => _55;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _58;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug error_code => _64;
                    let _71: std::string::String;
                    let mut _173: &[&str; 2];
                    scope 17 {
                        debug res => _71;
                    }
                }
                scope 18 {
                    debug residual => _89;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _92;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug residual => _99;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _102;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug error_code => _109;
                    let _116: std::string::String;
                    let _135: std::string::String;
                    let mut _171: &[&str; 2];
                    let mut _172: &[&str; 2];
                    scope 27 {
                        debug res => _116;
                    }
                    scope 28 {
                        debug res => _135;
                    }
                }
                scope 29 {
                    debug residual => _153;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _156;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _167;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _170;
                    scope 36 {
                    }
                }
            }
            scope 8 {
                debug residual => _42;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _45;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _27;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _30;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_5;
        StorageLive(_12);
        _174 = const _;
        _12 = &(*_174);
        _10 = <math::margin::MarginRequirementType as PartialEq>::eq(move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _5;
        _18 = MarginContext::standard(move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = _10;
        _17 = MarginContext::strict(move _18, move _20) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = MarginContext::ignore_invalid_deposit_oracles(move _17, const true) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_17);
        StorageLive(_21);
        _21 = _6;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _7;
        _24 = <u128 as Cast>::cast::<i128>(move _25) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_25);
        _23 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: i128);
        _22 = _30;
        StorageDead(_30);
        _15 = MarginContext::fuel_spot_delta(move _16, move _21, move _22) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_23);
        goto -> bb75;
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_16);
        StorageLive(_31);
        _31 = &(*_1);
        StorageLive(_32);
        _32 = _9;
        _14 = MarginContext::fuel_numerator(move _15, move _31, move _32) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_15);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_1);
        StorageLive(_37);
        _37 = &(*_2);
        StorageLive(_38);
        _38 = &(*_3);
        StorageLive(_39);
        _39 = &mut (*_4);
        StorageLive(_40);
        _40 = _14;
        _35 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _36, move _37, move _38, move _39, move _40) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _41 = discriminant(_34);
        switchInt(move _41) -> [0: bb15, 1: bb16, otherwise: bb8];
    }

    bb15: {
        StorageLive(_45);
        _45 = ((_34 as Continue).0: state::margin_calculation::MarginCalculation);
        _33 = _45;
        StorageDead(_45);
        StorageDead(_34);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = (_33.3: u128);
        _47 = Gt(move _48, const 0_u128);
        switchInt(move _47) -> [0: bb19, otherwise: bb18];
    }

    bb16: {
        StorageLive(_42);
        _42 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_34);
        goto -> bb74;
    }

    bb18: {
        StorageDead(_48);
        goto -> bb25;
    }

    bb19: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_33;
        _52 = MarginCalculation::get_num_of_liabilities(move _53) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_53);
        _51 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _52) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb22, 1: bb23, otherwise: bb8];
    }

    bb22: {
        StorageLive(_58);
        _58 = ((_51 as Continue).0: u8);
        _50 = _58;
        StorageDead(_58);
        _49 = Gt(move _50, const 0_u8);
        switchInt(move _49) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_55);
        _55 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb73;
    }

    bb25: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = (_33.8: bool);
        switchInt(move _62) -> [0: bb28, otherwise: bb27];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_50);
        _46 = const ();
        goto -> bb41;
    }

    bb27: {
        StorageLive(_63);
        _63 = ();
        _61 = std::result::Result::<(), error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        goto -> bb36;
    }

    bb28: {
        StorageLive(_64);
        _64 = error::ErrorCode::InvalidOracle;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _173 = const _;
        _75 = &(*_173);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_64;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _82) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_82);
        _80 = [move _81];
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_72);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb32, unwind: bb79];
    }

    bb32: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb33, unwind: bb79];
    }

    bb33: {
        StorageDead(_66);
        drop(_70) -> [return: bb34, unwind: bb80];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = const "User attempting to withdraw with outstanding liabilities when an oracle is invalid";
        _85 = &(*_86);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_85);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_87);
        _87 = _64;
        _61 = std::result::Result::<(), error::ErrorCode>::Err(move _87);
        StorageDead(_87);
        StorageDead(_64);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_62);
        _60 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _61) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_61);
        _88 = discriminant(_60);
        switchInt(move _88) -> [0: bb38, 1: bb39, otherwise: bb8];
    }

    bb38: {
        StorageLive(_92);
        _92 = ((_60 as Continue).0: ());
        _59 = _92;
        StorageDead(_92);
        StorageDead(_60);
        StorageDead(_59);
        _46 = const ();
        goto -> bb41;
    }

    bb39: {
        StorageLive(_89);
        _89 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb73;
    }

    bb41: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_1);
        StorageLive(_97);
        _97 = _33;
        _95 = validate_any_isolated_tier_requirements(move _96, move _97) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_96);
        _94 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _95) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_95);
        _98 = discriminant(_94);
        switchInt(move _98) -> [0: bb44, 1: bb45, otherwise: bb8];
    }

    bb44: {
        StorageLive(_102);
        _102 = ((_94 as Continue).0: ());
        _93 = _102;
        StorageDead(_102);
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_33;
        _106 = MarginCalculation::meets_margin_requirement(move _107) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_99);
        _99 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb74;
    }

    bb47: {
        switchInt(move _106) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        StorageDead(_107);
        StorageLive(_108);
        _108 = ();
        _105 = std::result::Result::<(), error::ErrorCode>::Ok(move _108);
        StorageDead(_108);
        goto -> bb63;
    }

    bb49: {
        StorageDead(_107);
        StorageLive(_109);
        _109 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _172 = const _;
        _120 = &(*_172);
        _119 = &(*_120);
        _118 = move _119 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_109;
        _127 = &(*_128);
        _126 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _127) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_127);
        _125 = [move _126];
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = move _123 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_123);
        _117 = Arguments::<'_>::new_v1(move _118, move _122) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_122);
        StorageDead(_118);
        _116 = format(move _117) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_117);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_120);
        _115 = move _116;
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = <String as Deref>::deref(move _113) -> [return: bb53, unwind: bb78];
    }

    bb53: {
        _111 = &(*_112);
        StorageDead(_113);
        _110 = solana_program::log::sol_log(move _111) -> [return: bb54, unwind: bb78];
    }

    bb54: {
        StorageDead(_111);
        drop(_115) -> [return: bb55, unwind: bb80];
    }

    bb55: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_110);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _171 = const _;
        _139 = &(*_171);
        _138 = &(*_139);
        _137 = move _138 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(_33.1: i128);
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _146) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(_33.3: u128);
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _149) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_149);
        _144 = [move _145, move _148];
        StorageDead(_148);
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_142);
        _136 = Arguments::<'_>::new_v1(move _137, move _141) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_141);
        StorageDead(_137);
        _135 = format(move _136) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_136);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_139);
        _134 = move _135;
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = <String as Deref>::deref(move _132) -> [return: bb60, unwind: bb77];
    }

    bb60: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = solana_program::log::sol_log(move _130) -> [return: bb61, unwind: bb77];
    }

    bb61: {
        StorageDead(_130);
        drop(_134) -> [return: bb62, unwind: bb80];
    }

    bb62: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_151);
        _151 = _109;
        _105 = std::result::Result::<(), error::ErrorCode>::Err(move _151);
        StorageDead(_151);
        StorageDead(_109);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_106);
        _104 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _105) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_105);
        _152 = discriminant(_104);
        switchInt(move _152) -> [0: bb65, 1: bb66, otherwise: bb8];
    }

    bb65: {
        StorageLive(_156);
        _156 = ((_104 as Continue).0: ());
        _103 = _156;
        StorageDead(_156);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &mut (*_8);
        StorageLive(_161);
        _161 = &mut (*_1);
        StorageLive(_162);
        _162 = (_33.17: u32);
        StorageLive(_163);
        _163 = (_33.18: u32);
        StorageLive(_164);
        _164 = (_33.19: u32);
        StorageLive(_165);
        _165 = _9;
        _159 = UserStats::update_fuel_bonus(move _160, move _161, move _162, move _163, move _164, move _165) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_153);
        _153 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb74;
    }

    bb68: {
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        _158 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _159) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_159);
        _166 = discriminant(_158);
        switchInt(move _166) -> [0: bb70, 1: bb71, otherwise: bb8];
    }

    bb70: {
        StorageLive(_170);
        _170 = ((_158 as Continue).0: ());
        _157 = _170;
        StorageDead(_170);
        StorageDead(_158);
        StorageDead(_157);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_33);
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb76;
    }

    bb71: {
        StorageLive(_167);
        _167 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb74;
    }

    bb73: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_33);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb76;
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_134) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_115) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_70) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        resume;
    }
}
