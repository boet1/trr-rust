// MIR for `get_max_fill_amounts_for_market` after PreCodegen

fn get_max_fill_amounts_for_market(_1: &User, _2: &SpotMarket, _3: bool) -> std::result::Result<u128, error::ErrorCode> {
    debug user => _1;
    debug market => _2;
    debug is_leaving_drift => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: usize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _6: std::result::Result<usize, error::ErrorCode>;
    let mut _7: &state::user::User;
    let mut _8: u16;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: usize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _16: std::result::Result<i128, error::ErrorCode>;
    let mut _17: &state::user::SpotPosition;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: &state::spot_market::SpotMarket;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: &state::spot_market::SpotMarket;
    let mut _28: i128;
    let mut _29: bool;
    scope 1 {
        debug position_index => _4;
        let _14: i128;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: i128;
        scope 6 {
            debug token_amount => _14;
        }
        scope 7 {
            debug residual => _23;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _26;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = ((*_2).42: u16);
        _6 = User::get_spot_position_index(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: usize);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _4;
        _19 = Len(((*_1).3: [state::user::SpotPosition; 8]));
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb14;
    }

    bb7: {
        _17 = &((*_1).3: [state::user::SpotPosition; 8])[_18];
        StorageLive(_21);
        _21 = &(*_2);
        _16 = SpotPosition::get_signed_token_amount(move _17, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_16);
        _22 = discriminant(_15);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_15 as Continue).0: i128);
        _14 = _26;
        StorageDead(_26);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_27);
        _27 = &(*_2);
        StorageLive(_28);
        _28 = _14;
        StorageLive(_29);
        _29 = _3;
        _0 = get_max_withdraw_for_market_with_token_amount(move _27, move _28, move _29) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_4);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
