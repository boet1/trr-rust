digraph Mir_0_132 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::funding::settle_funding_payment(_1: &amp;ReErased mut state::user::User, _2: &amp;ReErased anchor_lang::prelude::Pubkey, _3: &amp;ReErased mut state::perp_market::PerpMarket, _4: i64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _8: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _9: u16;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: usize;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: ();<br align="left"/>let _14: ();<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: i64;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: ();<br align="left"/>let _22: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _23: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _24: i128;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: i64;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let _30: ();<br align="left"/>let mut _31: bool;<br align="left"/>let mut _32: i128;<br align="left"/>let mut _33: i128;<br align="left"/>let mut _34: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _35: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _36: i64;<br align="left"/>let _37: usize;<br align="left"/>let mut _38: usize;<br align="left"/>let mut _39: bool;<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _44: i128;<br align="left"/>let _45: i64;<br align="left"/>let mut _46: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _47: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _48: i128;<br align="left"/>let mut _49: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _50: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _51: usize;<br align="left"/>let mut _52: usize;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: isize;<br align="left"/>let _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _56: !;<br align="left"/>let mut _57: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _58: i64;<br align="left"/>let _59: ();<br align="left"/>let mut _60: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _61: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _62: &amp;ReErased mut state::user::User;<br align="left"/>let mut _63: i64;<br align="left"/>let mut _64: isize;<br align="left"/>let _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _66: !;<br align="left"/>let mut _67: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _68: ();<br align="left"/>let _69: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _70: usize;<br align="left"/>let mut _71: usize;<br align="left"/>let mut _72: bool;<br align="left"/>let _73: ();<br align="left"/>let _74: ();<br align="left"/>let mut _75: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _76: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _77: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _78: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _79: &amp;ReErased [u8];<br align="left"/>let _80: &amp;ReErased [u8];<br align="left"/>let mut _81: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _82: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _83: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _84: &amp;ReErased state::events::FundingPaymentRecord;<br align="left"/>let _85: &amp;ReErased state::events::FundingPaymentRecord;<br align="left"/>let _86: state::events::FundingPaymentRecord;<br align="left"/>let mut _87: i64;<br align="left"/>let mut _88: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _89: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _90: u16;<br align="left"/>let mut _91: i64;<br align="left"/>let mut _92: i64;<br align="left"/>let mut _93: i128;<br align="left"/>let mut _94: i128;<br align="left"/>let mut _95: i64;<br align="left"/>let mut _96: i64;<br align="left"/>let mut _97: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _98: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _99: i128;<br align="left"/>let mut _100: isize;<br align="left"/>let _101: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _102: !;<br align="left"/>let mut _103: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _104: i64;<br align="left"/>let _105: ();<br align="left"/>let mut _106: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _107: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _108: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _109: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _110: i64;<br align="left"/>let mut _111: isize;<br align="left"/>let _112: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _113: !;<br align="left"/>let mut _114: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _115: ();<br align="left"/>let mut _116: i64;<br align="left"/>let mut _117: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _118: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _119: i64;<br align="left"/>let mut _120: i64;<br align="left"/>let mut _121: isize;<br align="left"/>let _122: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _123: !;<br align="left"/>let mut _124: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _125: i64;<br align="left"/>let mut _126: ();<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_key =&gt; _2;<br align="left"/>debug market =&gt; _3;<br align="left"/>debug now =&gt; _4;<br align="left"/>debug position_index =&gt; _5;<br align="left"/>debug position_index =&gt; _11;<br align="left"/>debug amm =&gt; _22;<br align="left"/>debug amm_cumulative_funding_rate =&gt; _24;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug market_funding_payment =&gt; _45;<br align="left"/>debug residual =&gt; _55;<br align="left"/>debug val =&gt; _58;<br align="left"/>debug residual =&gt; _65;<br align="left"/>debug val =&gt; _68;<br align="left"/>debug market_position =&gt; _69;<br align="left"/>debug residual =&gt; _101;<br align="left"/>debug val =&gt; _104;<br align="left"/>debug residual =&gt; _112;<br align="left"/>debug val =&gt; _115;<br align="left"/>debug residual =&gt; _122;<br align="left"/>debug val =&gt; _125;<br align="left"/>>;
    bb0__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_7 = &amp;(*_8)<br/>StorageLive(_9)<br/>_9 = ((*_3).21: u16)<br/></td></tr><tr><td align="left">_6 = get_position_index(move _7, move _9)</td></tr></table>>];
    bb1__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_10 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb2__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _13)<br/>StorageDead(_13)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb4__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_6 as Ok).0: usize)<br/>_5 = _11<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _5<br/>_18 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb5__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_16 = (((*_1).4: [state::user::PerpPosition; 8])[_17].1: i64)<br/>_15 = Eq(move _16, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb6__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_21)<br/>_21 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>_14 = const ()<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;((*_3).1: state::perp_market::AMM)<br/>_22 = &amp;(*_23)<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _5<br/>_28 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb8__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_26 = (((*_1).4: [state::user::PerpPosition; 8])[_27].1: i64)<br/>_25 = Gt(move _26, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb9__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>_24 = ((*_22).34: i128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>_24 = ((*_22).35: i128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _24<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = _5<br/>_38 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_39 = Lt(_37, _38)<br/></td></tr><tr><td align="left">assert(move _39, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _38, _37)</td></tr></table>>];
    bb12__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_36 = (((*_1).4: [state::user::PerpPosition; 8])[_37].0: i64)<br/></td></tr><tr><td align="left">_35 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _36)</td></tr></table>>];
    bb13__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _35)</td></tr></table>>];
    bb14__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>_40 = discriminant(_34)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb15__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_34 as Continue).0: i128)<br/>_33 = _44<br/>StorageDead(_44)<br/>_31 = Ne(move _32, move _33)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb16__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_34 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_43)<br/>_43 = _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb17__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = _24<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = _5<br/>_52 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_53 = Lt(_51, _52)<br/></td></tr><tr><td align="left">assert(move _53, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _52, _51)</td></tr></table>>];
    bb19__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>_30 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_50 = &amp;((*_1).4: [state::user::PerpPosition; 8])[_51]<br/>_49 = &amp;(*_50)<br/></td></tr><tr><td align="left">_47 = calculate_funding_payment(move _48, move _49)</td></tr></table>>];
    bb21__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_46 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _47)</td></tr></table>>];
    bb22__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>_54 = discriminant(_46)<br/></td></tr><tr><td align="left">switchInt(move _54)</td></tr></table>>];
    bb23__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_46 as Continue).0: i64)<br/>_45 = _58<br/>StorageDead(_58)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_46)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = &amp;mut (*_1)<br/>StorageLive(_63)<br/>_63 = _45<br/></td></tr><tr><td align="left">_61 = User::update_cumulative_perp_funding(move _62, move _63)</td></tr></table>>];
    bb24__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_46 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_57)<br/>_57 = _55<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _57)</td></tr></table>>];
    bb25__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_55)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_60 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _61)</td></tr></table>>];
    bb27__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_64 = discriminant(_60)<br/></td></tr><tr><td align="left">switchInt(move _64)</td></tr></table>>];
    bb28__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_60 as Continue).0: ())<br/>_59 = _68<br/>StorageDead(_68)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = _5<br/>_71 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_72 = Lt(_70, _71)<br/></td></tr><tr><td align="left">assert(move _72, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _71, _70)</td></tr></table>>];
    bb29__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = ((_60 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_67)<br/>_67 = _65<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _67)</td></tr></table>>];
    bb30__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_65)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_69 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_70]<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = _4<br/>StorageLive(_88)<br/>_88 = ((*_1).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_89)<br/>_89 = (*_2)<br/>StorageLive(_90)<br/>_90 = ((*_69).13: u16)<br/>StorageLive(_91)<br/>_91 = _45<br/>StorageLive(_92)<br/>_92 = ((*_69).0: i64)<br/>StorageLive(_93)<br/>_93 = ((*_22).34: i128)<br/>StorageLive(_94)<br/>_94 = ((*_22).35: i128)<br/>StorageLive(_95)<br/>_95 = ((*_69).1: i64)<br/>_86 = FundingPaymentRecord { ts: move _87, user_authority: move _88, user: move _89, market_index: move _90, funding_payment: move _91, base_asset_amount: move _95, user_last_cumulative_funding: move _92, amm_cumulative_funding_long: move _93, amm_cumulative_funding_short: move _94 }<br/>StorageDead(_95)<br/>StorageDead(_94)<br/>StorageDead(_93)<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>_85 = &amp;_86<br/>_84 = &amp;(*_85)<br/></td></tr><tr><td align="left">_83 = &lt;FundingPaymentRecord as anchor_lang::Event&gt;::data(move _84)</td></tr></table>>];
    bb32__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>_82 = &amp;_83<br/>_81 = &amp;(*_82)<br/></td></tr><tr><td align="left">_80 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _81)</td></tr></table>>];
    bb33__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_79 = &amp;(*_80)<br/>StorageDead(_81)<br/>_78 = [move _79]<br/>StorageDead(_79)<br/>_77 = &amp;_78<br/>_76 = &amp;(*_77)<br/>_75 = move _76 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_74 = solana_program::log::sol_log_data(move _75)</td></tr></table>>];
    bb34__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/></td></tr><tr><td align="left">drop(_83)</td></tr></table>>];
    bb35__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_83)<br/>StorageDead(_82)<br/>StorageDead(_80)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_74)<br/>_73 = const ()<br/>StorageDead(_73)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = _24<br/></td></tr><tr><td align="left">_98 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _99)</td></tr></table>>];
    bb36__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/></td></tr><tr><td align="left">_97 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _98)</td></tr></table>>];
    bb37__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_100 = discriminant(_97)<br/></td></tr><tr><td align="left">switchInt(move _100)</td></tr></table>>];
    bb38__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_104)<br/>_104 = ((_97 as Continue).0: i64)<br/>_96 = _104<br/>StorageDead(_104)<br/>((*_69).0: i64) = move _96<br/>StorageDead(_96)<br/>StorageDead(_97)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = &amp;mut (*_69)<br/>StorageLive(_109)<br/>_109 = &amp;mut (*_3)<br/>StorageLive(_110)<br/>_110 = _45<br/></td></tr><tr><td align="left">_107 = update_quote_asset_and_break_even_amount(move _108, move _109, move _110)</td></tr></table>>];
    bb39__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>_101 = ((_97 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_103)<br/>_103 = _101<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _103)</td></tr></table>>];
    bb40__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_101)<br/>StorageDead(_96)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">_106 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _107)</td></tr></table>>];
    bb42__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>_111 = discriminant(_106)<br/></td></tr><tr><td align="left">switchInt(move _111)</td></tr></table>>];
    bb43__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_115)<br/>_115 = ((_106 as Continue).0: ())<br/>_105 = _115<br/>StorageDead(_115)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>_119 = (((*_3).1: state::perp_market::AMM).80: i64)<br/>StorageLive(_120)<br/>_120 = _45<br/></td></tr><tr><td align="left">_118 = &lt;i64 as SafeMath&gt;::safe_sub(move _119, move _120)</td></tr></table>>];
    bb44__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_112)<br/>_112 = ((_106 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_114)<br/>_114 = _112<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _114)</td></tr></table>>];
    bb45__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_112)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_117 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _118)</td></tr></table>>];
    bb47__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>_121 = discriminant(_117)<br/></td></tr><tr><td align="left">switchInt(move _121)</td></tr></table>>];
    bb48__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_125)<br/>_125 = ((_117 as Continue).0: i64)<br/>_116 = _125<br/>StorageDead(_125)<br/>(((*_3).1: state::perp_market::AMM).80: i64) = move _116<br/>StorageDead(_116)<br/>StorageDead(_117)<br/>_30 = const ()<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = ((_117 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_124)<br/>_124 = _122<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _124)</td></tr></table>>];
    bb50__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_116)<br/>StorageDead(_117)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageLive(_126)<br/>_126 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _126)<br/>StorageDead(_126)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left">return</td></tr></table>>];
    bb57__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">57 (cleanup)</td></tr><tr><td align="left">drop(_83)</td></tr></table>>];
    bb58__0_132 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">58 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_132 -> bb1__0_132 [label="return"];
    bb1__0_132 -> bb4__0_132 [label="0"];
    bb1__0_132 -> bb2__0_132 [label="1"];
    bb1__0_132 -> bb3__0_132 [label="otherwise"];
    bb2__0_132 -> bb55__0_132 [label=""];
    bb4__0_132 -> bb5__0_132 [label="success"];
    bb5__0_132 -> bb7__0_132 [label="0"];
    bb5__0_132 -> bb6__0_132 [label="otherwise"];
    bb6__0_132 -> bb55__0_132 [label=""];
    bb7__0_132 -> bb8__0_132 [label="success"];
    bb8__0_132 -> bb10__0_132 [label="0"];
    bb8__0_132 -> bb9__0_132 [label="otherwise"];
    bb9__0_132 -> bb11__0_132 [label=""];
    bb10__0_132 -> bb11__0_132 [label=""];
    bb11__0_132 -> bb12__0_132 [label="success"];
    bb12__0_132 -> bb13__0_132 [label="return"];
    bb13__0_132 -> bb14__0_132 [label="return"];
    bb14__0_132 -> bb15__0_132 [label="0"];
    bb14__0_132 -> bb16__0_132 [label="1"];
    bb14__0_132 -> bb3__0_132 [label="otherwise"];
    bb15__0_132 -> bb19__0_132 [label="0"];
    bb15__0_132 -> bb18__0_132 [label="otherwise"];
    bb16__0_132 -> bb17__0_132 [label="return"];
    bb17__0_132 -> bb54__0_132 [label=""];
    bb18__0_132 -> bb20__0_132 [label="success"];
    bb19__0_132 -> bb51__0_132 [label=""];
    bb20__0_132 -> bb21__0_132 [label="return"];
    bb21__0_132 -> bb22__0_132 [label="return"];
    bb22__0_132 -> bb23__0_132 [label="0"];
    bb22__0_132 -> bb24__0_132 [label="1"];
    bb22__0_132 -> bb3__0_132 [label="otherwise"];
    bb23__0_132 -> bb26__0_132 [label="return"];
    bb24__0_132 -> bb25__0_132 [label="return"];
    bb25__0_132 -> bb53__0_132 [label=""];
    bb26__0_132 -> bb27__0_132 [label="return"];
    bb27__0_132 -> bb28__0_132 [label="0"];
    bb27__0_132 -> bb29__0_132 [label="1"];
    bb27__0_132 -> bb3__0_132 [label="otherwise"];
    bb28__0_132 -> bb31__0_132 [label="success"];
    bb29__0_132 -> bb30__0_132 [label="return"];
    bb30__0_132 -> bb53__0_132 [label=""];
    bb31__0_132 -> bb32__0_132 [label="return"];
    bb32__0_132 -> bb33__0_132 [label="return"];
    bb32__0_132 -> bb57__0_132 [label="unwind"];
    bb33__0_132 -> bb34__0_132 [label="return"];
    bb33__0_132 -> bb57__0_132 [label="unwind"];
    bb34__0_132 -> bb35__0_132 [label="return"];
    bb34__0_132 -> bb58__0_132 [label="unwind"];
    bb35__0_132 -> bb36__0_132 [label="return"];
    bb36__0_132 -> bb37__0_132 [label="return"];
    bb37__0_132 -> bb38__0_132 [label="0"];
    bb37__0_132 -> bb39__0_132 [label="1"];
    bb37__0_132 -> bb3__0_132 [label="otherwise"];
    bb38__0_132 -> bb41__0_132 [label="return"];
    bb39__0_132 -> bb40__0_132 [label="return"];
    bb40__0_132 -> bb52__0_132 [label=""];
    bb41__0_132 -> bb42__0_132 [label="return"];
    bb42__0_132 -> bb43__0_132 [label="0"];
    bb42__0_132 -> bb44__0_132 [label="1"];
    bb42__0_132 -> bb3__0_132 [label="otherwise"];
    bb43__0_132 -> bb46__0_132 [label="return"];
    bb44__0_132 -> bb45__0_132 [label="return"];
    bb45__0_132 -> bb52__0_132 [label=""];
    bb46__0_132 -> bb47__0_132 [label="return"];
    bb47__0_132 -> bb48__0_132 [label="0"];
    bb47__0_132 -> bb49__0_132 [label="1"];
    bb47__0_132 -> bb3__0_132 [label="otherwise"];
    bb48__0_132 -> bb51__0_132 [label=""];
    bb49__0_132 -> bb50__0_132 [label="return"];
    bb50__0_132 -> bb52__0_132 [label=""];
    bb51__0_132 -> bb56__0_132 [label=""];
    bb52__0_132 -> bb53__0_132 [label=""];
    bb53__0_132 -> bb54__0_132 [label=""];
    bb54__0_132 -> bb55__0_132 [label=""];
    bb55__0_132 -> bb56__0_132 [label=""];
    bb57__0_132 -> bb58__0_132 [label="return"];
}
