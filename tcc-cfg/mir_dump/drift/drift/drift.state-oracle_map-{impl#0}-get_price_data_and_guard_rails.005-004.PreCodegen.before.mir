// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::get_price_data_and_guard_rails` before PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::get_price_data_and_guard_rails(_1: &mut OracleMap<'_>, _2: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)) -> std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> {
    debug self => _1;
    debug oracle_id => _2;
    let mut _0: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &state::oracle_map::OracleMap<'_>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::Pubkey;
    let mut _8: !;
    let _9: &state::state::ValidityGuardRails;
    let mut _10: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _11: &state::oracle::OraclePriceData;
    let _12: &state::oracle::OraclePriceData;
    let mut _13: &state::state::ValidityGuardRails;
    let _14: ();
    let mut _15: bool;
    let mut _16: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _17: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _18: !;
    let _19: &state::oracle::OraclePriceData;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _21: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _22: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _23: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _24: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: &state::oracle::OraclePriceData;
    let mut _31: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _32: &state::oracle::OraclePriceData;
    let mut _33: &state::state::ValidityGuardRails;
    let _34: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _35: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _36: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let _38: &anchor_lang::prelude::Pubkey;
    let mut _39: isize;
    let _40: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: !;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: &std::string::String;
    let _46: &std::string::String;
    let _47: std::string::String;
    let _48: std::string::String;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[&str; 1];
    let _52: &[&str; 1];
    let _53: [&str; 1];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let mut _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let mut _59: &anchor_lang::prelude::Pubkey;
    let _60: &anchor_lang::prelude::Pubkey;
    let mut _61: error::ErrorCode;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _64: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _65: &state::oracle::OracleSource;
    let _66: &state::oracle::OracleSource;
    let mut _67: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _68: u64;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _74: std::option::Option<state::oracle::OraclePriceData>;
    let mut _75: &mut std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _76: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _77: state::oracle::OraclePriceData;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _80: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _81: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _82: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _83: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _91: &state::oracle::OraclePriceData;
    let mut _92: &state::state::ValidityGuardRails;
    let mut _93: &[&str; 1];
    scope 1 {
        debug validity_guard_rails => _9;
    }
    scope 2 {
        debug oracle_price_data => _19;
        let _30: &state::state::ValidityGuardRails;
        scope 7 {
            debug validity_guard_rails => _30;
        }
    }
    scope 3 {
        debug residual => _26;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _29;
        scope 6 {
        }
    }
    scope 8 {
        debug account_info => _34;
        let _62: state::oracle::OraclePriceData;
        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _73: state::oracle::OraclePriceData;
        scope 11 {
            debug price_data => _62;
            let _78: &state::oracle::OraclePriceData;
            let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _88: &state::oracle::OraclePriceData;
            scope 16 {
                debug oracle_price_data => _78;
                let _89: &state::state::ValidityGuardRails;
                scope 21 {
                    debug validity_guard_rails => _89;
                }
            }
            scope 17 {
                debug residual => _85;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _88;
                scope 20 {
                }
            }
        }
        scope 12 {
            debug residual => _70;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _73;
            scope 15 {
            }
        }
    }
    scope 9 {
        debug account_info => _40;
    }
    scope 10 {
        debug res => _48;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _6 = &(*_7);
        _4 = OracleMap::<'_>::should_get_quote_asset_price_data(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        _9 = &(((*_1).4: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).5: state::oracle::OraclePriceData);
        _11 = &(*_12);
        StorageLive(_13);
        _13 = &(*_9);
        _10 = (move _11, move _13);
        StorageDead(_13);
        StorageDead(_11);
        _0 = std::result::Result::<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb38;
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_17);
        _17 = &(*_2);
        _15 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::contains_key::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _16, move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _15) -> [0: bb13, otherwise: bb5];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_24);
        _24 = &(*_2);
        _22 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _23, move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <Option<&OraclePriceData> as SafeUnwrap>::safe_unwrap(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_22);
        _20 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_20 as Continue).0: &state::oracle::OraclePriceData);
        _19 = _29;
        StorageDead(_29);
        StorageDead(_20);
        StorageLive(_30);
        _30 = &(((*_1).4: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_19);
        StorageLive(_33);
        _33 = &(*_30);
        _31 = (move _32, move _33);
        StorageDead(_33);
        StorageDead(_32);
        _0 = std::result::Result::<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode>::Ok(move _31);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb37;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_20);
        goto -> bb37;
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _37 = &(*_38);
        _35 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::get::<anchor_lang::prelude::Pubkey>(move _36, move _37) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _93 = const _;
        _52 = &(*_93);
        _51 = &(*_52);
        _50 = move _51 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _59 = &(*_60);
        _58 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _59) -> [return: bb17, unwind continue];
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_35 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _34 = _40;
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_35);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &((*_2).1: state::oracle::OracleSource);
        _65 = &(*_66);
        StorageLive(_67);
        _67 = &(*_34);
        StorageLive(_68);
        _68 = ((*_1).3: u64);
        _64 = get_oracle_price(move _65, move _67, move _68) -> [return: bb23, unwind continue];
    }

    bb17: {
        StorageDead(_59);
        _57 = [move _58];
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = move _55 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_55);
        _49 = Arguments::<'_>::new_v1(move _50, move _54) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_54);
        StorageDead(_50);
        _48 = format(move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        _47 = move _48;
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = <String as Deref>::deref(move _45) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        _43 = &(*_44);
        StorageDead(_45);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        StorageDead(_43);
        drop(_47) -> [return: bb22, unwind: bb40];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_61);
        _61 = error::ErrorCode::OracleNotFound;
        _0 = std::result::Result::<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode>::Err(move _61);
        StorageDead(_61);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb36;
    }

    bb23: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        _63 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_64);
        _69 = discriminant(_63);
        switchInt(move _69) -> [0: bb25, 1: bb26, otherwise: bb10];
    }

    bb25: {
        StorageLive(_73);
        _73 = ((_63 as Continue).0: state::oracle::OraclePriceData);
        _62 = _73;
        StorageDead(_73);
        StorageDead(_66);
        StorageDead(_63);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut ((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_76);
        _76 = (*_2);
        StorageLive(_77);
        _77 = _62;
        _74 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::insert(move _75, move _76, move _77) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_70);
        _70 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_66);
        StorageDead(_63);
        goto -> bb35;
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_83);
        _83 = &(*_2);
        _81 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _82, move _83) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_83);
        StorageDead(_82);
        _80 = <Option<&OraclePriceData> as SafeUnwrap>::safe_unwrap(move _81) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_81);
        _79 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _80) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_80);
        _84 = discriminant(_79);
        switchInt(move _84) -> [0: bb32, 1: bb33, otherwise: bb10];
    }

    bb32: {
        StorageLive(_88);
        _88 = ((_79 as Continue).0: &state::oracle::OraclePriceData);
        _78 = _88;
        StorageDead(_88);
        StorageDead(_79);
        StorageLive(_89);
        _89 = &(((*_1).4: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_78);
        StorageLive(_92);
        _92 = &(*_89);
        _90 = (move _91, move _92);
        StorageDead(_92);
        StorageDead(_91);
        _0 = std::result::Result::<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_78);
        StorageDead(_62);
        StorageDead(_34);
        goto -> bb38;
    }

    bb33: {
        StorageLive(_85);
        _85 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_62);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_34);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_47) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }
}
