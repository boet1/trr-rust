// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5725:10: 5725:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5725:10: 5725:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeIfRebalanceConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeIfRebalanceConfigBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeIfRebalanceConfigBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeIfRebalanceConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeIfRebalanceConfigBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::InitializeIfRebalanceConfigBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _35: ();
    let mut _36: bool;
    let mut _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: !;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::ErrorCode;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: &[anchor_lang::prelude::AccountInfo<'_>];
    let _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: std::ops::RangeFrom<usize>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::InitializeIfRebalanceConfigBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::InitializeIfRebalanceConfigBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::admin::InitializeIfRebalanceConfigBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _97: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _105: (anchor_lang::prelude::Pubkey, u8);
    let mut _106: &[&[u8]];
    let mut _107: &[&[u8]; 3];
    let _108: &[&[u8]; 3];
    let _109: [&[u8]; 3];
    let mut _110: &[u8];
    let _111: &[u8];
    let mut _112: &[u8; 19];
    let _113: &[u8; 19];
    let mut _114: &[u8];
    let _115: &[u8];
    let mut _116: &[u8; 2];
    let _117: [u8; 2];
    let mut _118: u16;
    let mut _119: &[u8];
    let _120: &[u8];
    let mut _121: &[u8; 2];
    let _122: [u8; 2];
    let mut _123: u16;
    let mut _124: &anchor_lang::prelude::Pubkey;
    let mut _125: u8;
    let _126: ();
    let mut _127: bool;
    let mut _128: &anchor_lang::prelude::Pubkey;
    let _129: anchor_lang::prelude::Pubkey;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: &anchor_lang::prelude::Pubkey;
    let mut _132: !;
    let mut _133: anchor_lang::error::Error;
    let mut _134: anchor_lang::error::Error;
    let mut _135: anchor_lang::error::Error;
    let mut _136: anchor_lang::error::ErrorCode;
    let mut _137: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _138: anchor_lang::prelude::Pubkey;
    let mut _139: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: anchor_lang::prelude::Pubkey;
    let mut _143: &&anchor_lang::prelude::AccountInfo<'_>;
    let _144: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: &&anchor_lang::prelude::Pubkey;
    let mut _151: &&anchor_lang::prelude::Pubkey;
    let _152: &anchor_lang::prelude::Pubkey;
    let _153: anchor_lang::prelude::Pubkey;
    let mut _155: &anchor_lang::prelude::AccountInfo<'_>;
    let _156: ();
    let mut _157: bool;
    let mut _158: u64;
    let mut _161: &anchor_lang::prelude::Rent;
    let mut _162: usize;
    let mut _164: anchor_lang::prelude::AccountInfo<'_>;
    let mut _165: &anchor_lang::prelude::Signer<'_>;
    let mut _166: anchor_lang::prelude::AccountInfo<'_>;
    let mut _167: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _169: anchor_lang::prelude::AccountInfo<'_>;
    let mut _170: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _171: anchor_lang::system_program::CreateAccount<'_>;
    let _172: ();
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _174: std::result::Result<(), anchor_lang::error::Error>;
    let mut _175: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _176: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _177: &[&[&[u8]]];
    let mut _178: &[&[&[u8]]; 1];
    let _179: &[&[&[u8]]; 1];
    let _180: [&[&[u8]]; 1];
    let mut _181: &[&[u8]];
    let _182: &[&[u8]];
    let _183: &[&[u8]];
    let mut _184: &[&[u8]; 4];
    let _185: [&[u8]; 4];
    let mut _186: &[u8];
    let mut _187: &[u8; 19];
    let _188: &[u8; 19];
    let mut _189: &[u8];
    let _190: &[u8];
    let mut _191: &[u8; 2];
    let _192: [u8; 2];
    let mut _193: u16;
    let mut _194: &[u8];
    let _195: &[u8];
    let mut _196: &[u8; 2];
    let _197: [u8; 2];
    let mut _198: u16;
    let mut _199: &[u8];
    let _200: &[u8];
    let _201: &[u8];
    let mut _202: &[u8; 1];
    let _203: [u8; 1];
    let mut _204: u8;
    let mut _205: std::ops::RangeFull;
    let mut _206: std::ops::RangeFull;
    let mut _207: u64;
    let mut _208: u64;
    let mut _209: usize;
    let mut _210: &anchor_lang::prelude::Pubkey;
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _216: ();
    let mut _217: bool;
    let mut _218: &anchor_lang::prelude::Pubkey;
    let _219: anchor_lang::prelude::Pubkey;
    let mut _220: &anchor_lang::prelude::Signer<'_>;
    let mut _221: &anchor_lang::prelude::Pubkey;
    let _222: anchor_lang::prelude::Pubkey;
    let mut _223: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _224: !;
    let mut _225: anchor_lang::error::Error;
    let mut _226: anchor_lang::error::Error;
    let mut _227: anchor_lang::error::AnchorError;
    let mut _228: std::string::String;
    let mut _229: &anchor_lang::error::ErrorCode;
    let _230: anchor_lang::error::ErrorCode;
    let mut _231: u32;
    let mut _232: anchor_lang::error::ErrorCode;
    let mut _233: std::string::String;
    let mut _234: &anchor_lang::error::ErrorCode;
    let _235: anchor_lang::error::ErrorCode;
    let mut _236: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _237: anchor_lang::error::ErrorOrigin;
    let mut _238: anchor_lang::error::Source;
    let mut _239: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _240: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _241: anchor_lang::prelude::Pubkey;
    let mut _242: &anchor_lang::prelude::Signer<'_>;
    let mut _243: anchor_lang::prelude::Pubkey;
    let mut _244: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _246: u64;
    let mut _247: u64;
    let mut _248: &anchor_lang::prelude::Rent;
    let mut _249: usize;
    let mut _250: u64;
    let _251: ();
    let mut _252: bool;
    let mut _253: u64;
    let mut _255: anchor_lang::prelude::AccountInfo<'_>;
    let mut _256: &anchor_lang::prelude::Signer<'_>;
    let mut _257: anchor_lang::prelude::AccountInfo<'_>;
    let mut _258: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _260: anchor_lang::prelude::AccountInfo<'_>;
    let mut _261: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _262: anchor_lang::system_program::Transfer<'_>;
    let _263: ();
    let mut _264: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _265: std::result::Result<(), anchor_lang::error::Error>;
    let mut _266: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _267: u64;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _274: anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _277: anchor_lang::prelude::AccountInfo<'_>;
    let mut _278: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _279: anchor_lang::system_program::Allocate<'_>;
    let _280: ();
    let mut _281: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _282: std::result::Result<(), anchor_lang::error::Error>;
    let mut _283: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _284: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _285: &[&[&[u8]]];
    let mut _286: &[&[&[u8]]; 1];
    let _287: &[&[&[u8]]; 1];
    let _288: [&[&[u8]]; 1];
    let mut _289: &[&[u8]];
    let _290: &[&[u8]];
    let _291: &[&[u8]];
    let mut _292: &[&[u8]; 4];
    let _293: [&[u8]; 4];
    let mut _294: &[u8];
    let mut _295: &[u8; 19];
    let _296: &[u8; 19];
    let mut _297: &[u8];
    let _298: &[u8];
    let mut _299: &[u8; 2];
    let _300: [u8; 2];
    let mut _301: u16;
    let mut _302: &[u8];
    let _303: &[u8];
    let mut _304: &[u8; 2];
    let _305: [u8; 2];
    let mut _306: u16;
    let mut _307: &[u8];
    let _308: &[u8];
    let _309: &[u8];
    let mut _310: &[u8; 1];
    let _311: [u8; 1];
    let mut _312: u8;
    let mut _313: std::ops::RangeFull;
    let mut _314: std::ops::RangeFull;
    let mut _315: u64;
    let mut _316: usize;
    let mut _317: isize;
    let mut _319: !;
    let mut _320: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _323: anchor_lang::prelude::AccountInfo<'_>;
    let mut _324: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _326: anchor_lang::prelude::AccountInfo<'_>;
    let mut _327: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _328: anchor_lang::system_program::Assign<'_>;
    let _329: ();
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _331: std::result::Result<(), anchor_lang::error::Error>;
    let mut _332: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _333: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _334: &[&[&[u8]]];
    let mut _335: &[&[&[u8]]; 1];
    let _336: &[&[&[u8]]; 1];
    let _337: [&[&[u8]]; 1];
    let mut _338: &[&[u8]];
    let _339: &[&[u8]];
    let _340: &[&[u8]];
    let mut _341: &[&[u8]; 4];
    let _342: [&[u8]; 4];
    let mut _343: &[u8];
    let mut _344: &[u8; 19];
    let _345: &[u8; 19];
    let mut _346: &[u8];
    let _347: &[u8];
    let mut _348: &[u8; 2];
    let _349: [u8; 2];
    let mut _350: u16;
    let mut _351: &[u8];
    let _352: &[u8];
    let mut _353: &[u8; 2];
    let _354: [u8; 2];
    let mut _355: u16;
    let mut _356: &[u8];
    let _357: &[u8];
    let _358: &[u8];
    let mut _359: &[u8; 1];
    let _360: [u8; 1];
    let mut _361: u8;
    let mut _362: std::ops::RangeFull;
    let mut _363: std::ops::RangeFull;
    let mut _364: &anchor_lang::prelude::Pubkey;
    let mut _365: isize;
    let mut _367: !;
    let mut _368: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _370: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>, anchor_lang::error::Error>;
    let mut _371: &anchor_lang::prelude::Pubkey;
    let mut _372: &anchor_lang::prelude::AccountInfo<'_>;
    let _373: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _374: isize;
    let mut _377: !;
    let mut _378: anchor_lang::error::Error;
    let mut _379: anchor_lang::error::Error;
    let mut _380: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>, anchor_lang::error::Error>;
    let mut _381: &anchor_lang::prelude::AccountInfo<'_>;
    let _382: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _383: isize;
    let mut _386: !;
    let mut _387: anchor_lang::error::Error;
    let mut _388: anchor_lang::error::Error;
    let _389: ();
    let mut _390: bool;
    let _391: ();
    let mut _392: bool;
    let mut _393: usize;
    let mut _394: usize;
    let mut _395: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _396: !;
    let mut _397: anchor_lang::error::Error;
    let mut _398: anchor_lang::error::Error;
    let mut _399: anchor_lang::error::Error;
    let mut _400: anchor_lang::error::ErrorCode;
    let mut _401: (usize, usize);
    let mut _402: usize;
    let mut _403: usize;
    let mut _404: &anchor_lang::prelude::AccountInfo<'_>;
    let _405: ();
    let mut _406: bool;
    let mut _407: &&anchor_lang::prelude::Pubkey;
    let mut _408: &&anchor_lang::prelude::Pubkey;
    let mut _409: !;
    let mut _410: anchor_lang::error::Error;
    let mut _411: anchor_lang::error::Error;
    let mut _412: anchor_lang::error::Error;
    let mut _413: anchor_lang::error::ErrorCode;
    let mut _414: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _415: anchor_lang::prelude::Pubkey;
    let mut _416: anchor_lang::prelude::Pubkey;
    let mut _418: &anchor_lang::prelude::Rent;
    let mut _419: usize;
    let mut _420: bool;
    let mut _421: u64;
    let mut _422: &anchor_lang::prelude::AccountInfo<'_>;
    let _423: anchor_lang::prelude::AccountInfo<'_>;
    let mut _424: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _425: u64;
    let mut _426: !;
    let mut _427: anchor_lang::error::Error;
    let mut _428: anchor_lang::error::Error;
    let mut _429: anchor_lang::error::ErrorCode;
    let _430: ();
    let mut _431: bool;
    let mut _432: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let _434: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _435: !;
    let mut _436: anchor_lang::error::Error;
    let mut _437: anchor_lang::error::Error;
    let mut _438: anchor_lang::error::ErrorCode;
    let _439: ();
    let mut _440: bool;
    let mut _441: &anchor_lang::prelude::Rent;
    let mut _442: u64;
    let mut _443: &anchor_lang::prelude::AccountInfo<'_>;
    let _444: anchor_lang::prelude::AccountInfo<'_>;
    let mut _445: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _446: usize;
    let mut _447: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _448: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _449: &anchor_lang::prelude::AccountInfo<'_>;
    let _450: anchor_lang::prelude::AccountInfo<'_>;
    let mut _451: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _452: isize;
    let mut _454: !;
    let mut _455: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _457: !;
    let mut _458: anchor_lang::error::Error;
    let mut _459: anchor_lang::error::Error;
    let mut _460: anchor_lang::error::ErrorCode;
    let _461: ();
    let mut _462: bool;
    let mut _463: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _464: &anchor_lang::prelude::Signer<'_>;
    let _465: &anchor_lang::prelude::Signer<'_>;
    let mut _466: !;
    let mut _467: anchor_lang::error::Error;
    let mut _468: anchor_lang::error::Error;
    let mut _469: anchor_lang::error::ErrorCode;
    let _470: ();
    let mut _472: &state::state::State;
    let mut _473: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _475: &anchor_lang::prelude::Signer<'_>;
    let mut _476: bool;
    let mut _477: &anchor_lang::prelude::Pubkey;
    let mut _478: &anchor_lang::prelude::Pubkey;
    let mut _479: !;
    let mut _480: anchor_lang::error::Error;
    let mut _481: anchor_lang::error::Error;
    let mut _482: anchor_lang::error::Error;
    let mut _483: anchor_lang::error::ErrorCode;
    let mut _484: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _485: anchor_lang::prelude::Pubkey;
    let mut _486: anchor_lang::prelude::Pubkey;
    let mut _487: instructions::admin::InitializeIfRebalanceConfig<'_>;
    let mut _488: anchor_lang::prelude::Signer<'_>;
    let mut _489: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _490: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _491: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _492: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _496: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _497: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _498: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _499: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _500: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _501: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _502: bool;
    let mut _503: bool;
    let mut _504: bool;
    let mut _505: bool;
    let mut _506: bool;
    let mut _507: bool;
    let mut _508: bool;
    let mut _509: bool;
    let mut _510: bool;
    let mut _511: bool;
    let mut _512: bool;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: state::if_rebalance_config::IfRebalanceConfigParams;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeIfRebalanceConfigBumps>>::try_accounts::__Args;
        scope 2 {
            debug params => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug admin => _20;
                let _41: &anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug if_rebalance_config => _41;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 13 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        scope 18 {
                            debug rent => _65;
                            let _80: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            scope 23 {
                                debug system_program => _80;
                                let _95: anchor_lang::prelude::Rent;
                                let _99: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _102: anchor_lang::prelude::Rent;
                                scope 28 {
                                    debug __anchor_rent => _95;
                                    let _103: anchor_lang::prelude::Pubkey;
                                    let _104: u8;
                                    scope 33 {
                                        debug __pda_address => _103;
                                        debug __bump => _104;
                                        let _141: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                        let _142: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 34 {
                                            debug if_rebalance_config => _141;
                                            let _453: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _456: usize;
                                            let _471: anchor_lang::prelude::Pubkey;
                                            scope 72 {
                                                debug residual => _453;
                                                scope 73 {
                                                }
                                            }
                                            scope 74 {
                                                debug val => _456;
                                                scope 75 {
                                                }
                                            }
                                            scope 76 {
                                                debug my_key => _471;
                                                let _474: anchor_lang::prelude::Pubkey;
                                                scope 77 {
                                                    debug target_key => _474;
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug actual_field => _142;
                                            let _145: &anchor_lang::prelude::Pubkey;
                                            scope 36 {
                                                debug actual_owner => _145;
                                                let _146: usize;
                                                scope 37 {
                                                    debug space => _146;
                                                    let _147: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                                    let _154: u64;
                                                    let _384: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                                    let _385: anchor_lang::error::Error;
                                                    let mut _495: &&anchor_lang::prelude::Pubkey;
                                                    scope 38 {
                                                        debug pa => _147;
                                                        let _417: u64;
                                                        scope 71 {
                                                            debug required_lamports => _417;
                                                        }
                                                    }
                                                    scope 39 {
                                                        debug __current_lamports => _154;
                                                        let _159: usize;
                                                        let _245: u64;
                                                        let _375: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
                                                        let _376: anchor_lang::error::Error;
                                                        let mut _493: &anchor_lang::error::ErrorCode;
                                                        let mut _494: &anchor_lang::error::ErrorCode;
                                                        scope 40 {
                                                            debug space => _159;
                                                            let _160: u64;
                                                            scope 41 {
                                                                debug lamports => _160;
                                                                let _163: anchor_lang::system_program::CreateAccount<'_>;
                                                                scope 42 {
                                                                    debug cpi_accounts => _163;
                                                                    let _168: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                    scope 43 {
                                                                        debug cpi_context => _168;
                                                                        let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _215: ();
                                                                        scope 44 {
                                                                            debug residual => _212;
                                                                            scope 45 {
                                                                            }
                                                                        }
                                                                        scope 46 {
                                                                            debug val => _215;
                                                                            scope 47 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 48 {
                                                            debug required_lamports => _245;
                                                            let _254: anchor_lang::system_program::Transfer<'_>;
                                                            let _273: anchor_lang::system_program::Allocate<'_>;
                                                            scope 49 {
                                                                debug cpi_accounts => _254;
                                                                let _259: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                scope 50 {
                                                                    debug cpi_context => _259;
                                                                    let _269: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _272: ();
                                                                    scope 51 {
                                                                        debug residual => _269;
                                                                        scope 52 {
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug val => _272;
                                                                        scope 54 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug cpi_accounts => _273;
                                                                let _276: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                scope 56 {
                                                                    debug cpi_context => _276;
                                                                    let _318: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _321: ();
                                                                    let _322: anchor_lang::system_program::Assign<'_>;
                                                                    scope 57 {
                                                                        debug residual => _318;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug val => _321;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                    scope 61 {
                                                                        debug cpi_accounts => _322;
                                                                        let _325: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                        scope 62 {
                                                                            debug cpi_context => _325;
                                                                            let _366: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _369: ();
                                                                            scope 63 {
                                                                                debug residual => _366;
                                                                                scope 64 {
                                                                                }
                                                                            }
                                                                            scope 65 {
                                                                                debug val => _369;
                                                                                scope 66 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug val => _375;
                                                        }
                                                        scope 68 {
                                                            debug e => _376;
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug val => _384;
                                                    }
                                                    scope 70 {
                                                        debug e => _385;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _99;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _102;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _512 = const false;
        _511 = const false;
        _510 = const false;
        _509 = const false;
        _508 = const false;
        _507 = const false;
        _506 = const false;
        _505 = const false;
        _504 = const false;
        _503 = const false;
        _502 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, InitializeIfRebalanceConfigBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
        _10 = std::result::Result::<<admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, InitializeIfRebalanceConfigBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18}>(move _11, move _14) -> [return: bb2, unwind: bb237];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, InitializeIfRebalanceConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::InitializeIfRebalanceConfig<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializeIfRebalanceConfigBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: state::if_rebalance_config::IfRebalanceConfigParams);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeIfRebalanceConfigBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb228;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18}>(move _23, move _29) -> [return: bb9, unwind: bb237];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb237];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _513 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _496 = deref_copy (*_2);
        _37 = &(*_496);
        _36 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _37) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb269];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _561 = discriminant(_21);
        StorageDead(_21);
        goto -> bb227;
    }

    bb14: {
        switchInt(move _36) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = AccountNotEnoughKeys;
        _39 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _39);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb227;
    }

    bb17: {
        StorageDead(_37);
        _35 = const ();
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _497 = deref_copy (*_2);
        _43 = Len((*_497));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb18, unwind continue];
    }

    bb18: {
        _498 = deref_copy (*_2);
        _41 = &(*_498)[_42];
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _499 = deref_copy (*_2);
        _48 = &(*_499);
        StorageLive(_49);
        _49 = RangeFrom::<usize> { start: const 1_usize };
        _47 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _48, move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = &(*_47);
        _45 = &(*_46);
        (*_2) = move _45;
        StorageDead(_45);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeIfRebalanceConfigBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18}>(move _53, move _59) -> [return: bb21, unwind: bb237];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb237];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _515 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeIfRebalanceConfigBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb236];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb268];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _559 = discriminant(_51);
        StorageDead(_51);
        goto -> bb226;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
        _67 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18}>(move _68, move _74) -> [return: bb27, unwind: bb236];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb236];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _65 = move _79;
        StorageDead(_79);
        _517 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeIfRebalanceConfigBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb236];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb267];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _557 = discriminant(_66);
        StorageDead(_66);
        goto -> bb225;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18};
        _82 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5725:10: 5725:18}>(move _83, move _89) -> [return: bb33, unwind: bb236];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb236];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _80 = move _94;
        StorageDead(_94);
        _519 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb236];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb266];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _555 = discriminant(_81);
        StorageDead(_81);
        goto -> bb224;
    }

    bb38: {
        _96 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _97) -> [return: bb39, unwind: bb236];
    }

    bb39: {
        StorageDead(_97);
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_102);
        _102 = ((_96 as Continue).0: anchor_lang::prelude::Rent);
        _95 = _102;
        StorageDead(_102);
        _521 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = const b"if_rebalance_config";
        _112 = &(*_113);
        _111 = <[u8; 19] as AsRef<[u8]>>::as_ref(move _112) -> [return: bb43, unwind: bb236];
    }

    bb41: {
        StorageLive(_99);
        _99 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _101) -> [return: bb42, unwind: bb265];
    }

    bb42: {
        StorageDead(_101);
        StorageDead(_99);
        _553 = discriminant(_96);
        StorageDead(_96);
        goto -> bb223;
    }

    bb43: {
        _110 = &(*_111);
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = (_7.4: u16);
        _117 = core::num::<impl u16>::to_le_bytes(move _118) -> [return: bb44, unwind: bb236];
    }

    bb44: {
        _116 = &_117;
        StorageDead(_118);
        _115 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _116) -> [return: bb45, unwind: bb236];
    }

    bb45: {
        _114 = &(*_115);
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = (_7.3: u16);
        _122 = core::num::<impl u16>::to_le_bytes(move _123) -> [return: bb46, unwind: bb236];
    }

    bb46: {
        _121 = &_122;
        StorageDead(_123);
        _120 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _121) -> [return: bb47, unwind: bb236];
    }

    bb47: {
        _119 = &(*_120);
        StorageDead(_121);
        _109 = [move _110, move _114, move _119];
        StorageDead(_119);
        StorageDead(_114);
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = move _107 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_124);
        _124 = &(*_1);
        _105 = anchor_lang::prelude::Pubkey::find_program_address(move _106, move _124) -> [return: bb48, unwind: bb236];
    }

    bb48: {
        StorageDead(_124);
        StorageDead(_106);
        StorageLive(_103);
        _103 = (_105.0: anchor_lang::prelude::Pubkey);
        StorageLive(_104);
        _104 = (_105.1: u8);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageLive(_125);
        _125 = _104;
        ((*_4).0: u8) = move _125;
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_41);
        _129 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _130) -> [return: bb49, unwind: bb236];
    }

    bb49: {
        _128 = &_129;
        StorageDead(_130);
        StorageLive(_131);
        _131 = &_103;
        _127 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _128, move _131) -> [return: bb50, unwind: bb236];
    }

    bb50: {
        switchInt(move _127) -> [0: bb56, otherwise: bb51];
    }

    bb51: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = ConstraintSeeds;
        _135 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _136) -> [return: bb52, unwind: bb236];
    }

    bb52: {
        StorageDead(_136);
        _134 = anchor_lang::error::Error::with_account_name::<&str>(move _135, const "if_rebalance_config") -> [return: bb53, unwind: bb236];
    }

    bb53: {
        _512 = const true;
        StorageDead(_135);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &(*_41);
        _138 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _139) -> [return: bb54, unwind: bb264];
    }

    bb54: {
        StorageDead(_139);
        StorageLive(_140);
        _140 = _103;
        _137 = (move _138, move _140);
        StorageDead(_140);
        StorageDead(_138);
        _512 = const false;
        _133 = anchor_lang::error::Error::with_pubkeys(move _134, move _137) -> [return: bb55, unwind: bb264];
    }

    bb55: {
        StorageDead(_137);
        _512 = const false;
        StorageDead(_134);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _133);
        StorageDead(_133);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb222;
    }

    bb56: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_128);
        _126 = const ();
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_41;
        _143 = &(*_144);
        _142 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _143) -> [return: bb57, unwind: bb236];
    }

    bb57: {
        StorageDead(_143);
        StorageDead(_144);
        StorageLive(_145);
        _145 = ((*_142).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_146);
        _146 = const _;
        StorageLive(_147);
        StorageLive(_148);
        _148 = const false;
        switchInt(move _148) -> [0: bb60, otherwise: bb58];
    }

    bb58: {
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_145;
        StorageLive(_151);
        _495 = const _;
        _151 = &(*_495);
        _149 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _150, move _151) -> [return: bb59, unwind: bb236];
    }

    bb59: {
        switchInt(move _149) -> [0: bb146, otherwise: bb60];
    }

    bb60: {
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &(*_41);
        _154 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _155) -> [return: bb61, unwind: bb236];
    }

    bb61: {
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = _154;
        _157 = Eq(move _158, const 0_u64);
        switchInt(move _157) -> [0: bb81, otherwise: bb62];
    }

    bb62: {
        StorageDead(_158);
        StorageLive(_159);
        _159 = _146;
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_95;
        StorageLive(_162);
        _162 = _159;
        _160 = anchor_lang::prelude::Rent::minimum_balance(move _161, move _162) -> [return: bb63, unwind: bb236];
    }

    bb63: {
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_20;
        _164 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _165) -> [return: bb64, unwind: bb236];
    }

    bb64: {
        StorageDead(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &(*_41);
        _166 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _167) -> [return: bb65, unwind: bb235];
    }

    bb65: {
        StorageDead(_167);
        _511 = const true;
        _163 = anchor_lang::system_program::CreateAccount::<'_> { from: move _164, to: move _166 };
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_80;
        _169 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _170) -> [return: bb66, unwind: bb262];
    }

    bb66: {
        StorageDead(_170);
        StorageLive(_171);
        _511 = const false;
        _171 = move _163;
        _168 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _169, move _171) -> [return: bb67, unwind: bb262];
    }

    bb67: {
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _510 = const true;
        _176 = move _168;
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = const b"if_rebalance_config";
        _187 = &(*_188);
        _186 = <[u8; 19] as AsRef<[u8]>>::as_ref(move _187) -> [return: bb68, unwind: bb260];
    }

    bb68: {
        StorageDead(_187);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = (_7.4: u16);
        _192 = core::num::<impl u16>::to_le_bytes(move _193) -> [return: bb69, unwind: bb260];
    }

    bb69: {
        _191 = &_192;
        StorageDead(_193);
        _190 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _191) -> [return: bb70, unwind: bb260];
    }

    bb70: {
        _189 = &(*_190);
        StorageDead(_191);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = (_7.3: u16);
        _197 = core::num::<impl u16>::to_le_bytes(move _198) -> [return: bb71, unwind: bb260];
    }

    bb71: {
        _196 = &_197;
        StorageDead(_198);
        _195 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _196) -> [return: bb72, unwind: bb260];
    }

    bb72: {
        _194 = &(*_195);
        StorageDead(_196);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = _104;
        _203 = [move _204];
        _202 = &_203;
        StorageDead(_204);
        StorageLive(_205);
        _205 = RangeFull;
        _201 = <[u8; 1] as Index<RangeFull>>::index(move _202, move _205) -> [return: bb73, unwind: bb260];
    }

    bb73: {
        StorageDead(_205);
        StorageDead(_202);
        _200 = &(*_201);
        _199 = &(*_200);
        _185 = [move _186, move _189, move _194, move _199];
        _184 = &_185;
        StorageDead(_199);
        StorageDead(_194);
        StorageDead(_189);
        StorageDead(_186);
        StorageLive(_206);
        _206 = RangeFull;
        _183 = <[&[u8]; 4] as Index<RangeFull>>::index(move _184, move _206) -> [return: bb74, unwind: bb260];
    }

    bb74: {
        StorageDead(_206);
        StorageDead(_184);
        _182 = &(*_183);
        _181 = &(*_182);
        _180 = [move _181];
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = move _178 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_178);
        _510 = const false;
        _175 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _176, move _177) -> [return: bb75, unwind: bb260];
    }

    bb75: {
        StorageDead(_177);
        _510 = const false;
        StorageDead(_176);
        StorageLive(_207);
        _207 = _160;
        StorageLive(_208);
        StorageLive(_209);
        _209 = _159;
        _208 = move _209 as u64 (IntToInt);
        StorageDead(_209);
        StorageLive(_210);
        _210 = &(*_1);
        _174 = anchor_lang::system_program::create_account(move _175, move _207, move _208, move _210) -> [return: bb76, unwind: bb262];
    }

    bb76: {
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_175);
        _173 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _174) -> [return: bb77, unwind: bb262];
    }

    bb77: {
        StorageDead(_174);
        _211 = discriminant(_173);
        switchInt(move _211) -> [0: bb78, 1: bb79, otherwise: bb5];
    }

    bb78: {
        StorageLive(_215);
        _215 = ((_173 as Continue).0: ());
        _172 = _215;
        StorageDead(_215);
        _523 = discriminant(_173);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_173);
        StorageDead(_172);
        _156 = const ();
        StorageDead(_168);
        _511 = const false;
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb141;
    }

    bb79: {
        StorageLive(_212);
        _212 = move ((_173 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb80, unwind: bb258];
    }

    bb80: {
        StorageDead(_214);
        StorageDead(_212);
        _551 = discriminant(_173);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_168);
        _511 = const false;
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb218;
    }

    bb81: {
        StorageDead(_158);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_20;
        _219 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _220) -> [return: bb82, unwind: bb236];
    }

    bb82: {
        _218 = &_219;
        StorageDead(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &(*_41);
        _222 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _223) -> [return: bb83, unwind: bb236];
    }

    bb83: {
        _221 = &_222;
        StorageDead(_223);
        _217 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _218, move _221) -> [return: bb84, unwind: bb236];
    }

    bb84: {
        switchInt(move _217) -> [0: bb93, otherwise: bb85];
    }

    bb85: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _494 = const _;
        _229 = &(*_494);
        _228 = anchor_lang::error::ErrorCode::name(move _229) -> [return: bb86, unwind: bb236];
    }

    bb86: {
        StorageDead(_229);
        StorageLive(_231);
        StorageLive(_232);
        _232 = TryingToInitPayerAsProgramAccount;
        _231 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _232) -> [return: bb87, unwind: bb234];
    }

    bb87: {
        StorageDead(_232);
        StorageLive(_233);
        StorageLive(_234);
        _493 = const _;
        _234 = &(*_493);
        _233 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _234) -> [return: bb88, unwind: bb234];
    }

    bb88: {
        StorageDead(_234);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5725_u32 };
        _237 = anchor_lang::error::ErrorOrigin::Source(move _238);
        StorageDead(_238);
        _236 = Option::<ErrorOrigin>::Some(move _237);
        StorageDead(_237);
        StorageLive(_239);
        _239 = Option::<ComparedValues>::None;
        _227 = anchor_lang::error::AnchorError { error_name: move _228, error_code_number: move _231, error_msg: move _233, error_origin: move _236, compared_values: move _239 };
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_228);
        _226 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _227) -> [return: bb89, unwind: bb236];
    }

    bb89: {
        _509 = const true;
        StorageDead(_227);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_20;
        _241 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _242) -> [return: bb90, unwind: bb257];
    }

    bb90: {
        StorageDead(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &(*_41);
        _243 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _244) -> [return: bb91, unwind: bb257];
    }

    bb91: {
        StorageDead(_244);
        _240 = (move _241, move _243);
        StorageDead(_243);
        StorageDead(_241);
        _509 = const false;
        _225 = anchor_lang::error::Error::with_pubkeys(move _226, move _240) -> [return: bb92, unwind: bb257];
    }

    bb92: {
        StorageDead(_240);
        _509 = const false;
        StorageDead(_226);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _225);
        StorageDead(_225);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb218;
    }

    bb93: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_95;
        StorageLive(_249);
        _249 = _146;
        _247 = anchor_lang::prelude::Rent::minimum_balance(move _248, move _249) -> [return: bb94, unwind: bb236];
    }

    bb94: {
        StorageDead(_249);
        StorageDead(_248);
        _246 = <u64 as Ord>::max(move _247, const 1_u64) -> [return: bb95, unwind: bb236];
    }

    bb95: {
        StorageDead(_247);
        StorageLive(_250);
        _250 = _154;
        _245 = core::num::<impl u64>::saturating_sub(move _246, move _250) -> [return: bb96, unwind: bb236];
    }

    bb96: {
        StorageDead(_250);
        StorageDead(_246);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = _245;
        _252 = Gt(move _253, const 0_u64);
        switchInt(move _252) -> [0: bb107, otherwise: bb97];
    }

    bb97: {
        StorageDead(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_20;
        _255 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _256) -> [return: bb98, unwind: bb236];
    }

    bb98: {
        StorageDead(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &(*_41);
        _257 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _258) -> [return: bb99, unwind: bb233];
    }

    bb99: {
        StorageDead(_258);
        _508 = const true;
        _254 = anchor_lang::system_program::Transfer::<'_> { from: move _255, to: move _257 };
        StorageDead(_257);
        StorageDead(_255);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_80;
        _260 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _261) -> [return: bb100, unwind: bb255];
    }

    bb100: {
        StorageDead(_261);
        StorageLive(_262);
        _508 = const false;
        _262 = move _254;
        _259 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _260, move _262) -> [return: bb101, unwind: bb255];
    }

    bb101: {
        StorageDead(_262);
        StorageDead(_260);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = move _259;
        StorageLive(_267);
        _267 = _245;
        _265 = anchor_lang::system_program::transfer(move _266, move _267) -> [return: bb102, unwind: bb255];
    }

    bb102: {
        StorageDead(_267);
        StorageDead(_266);
        _264 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _265) -> [return: bb103, unwind: bb255];
    }

    bb103: {
        StorageDead(_265);
        _268 = discriminant(_264);
        switchInt(move _268) -> [0: bb104, 1: bb105, otherwise: bb5];
    }

    bb104: {
        StorageLive(_272);
        _272 = ((_264 as Continue).0: ());
        _263 = _272;
        StorageDead(_272);
        _525 = discriminant(_264);
        StorageDead(_264);
        StorageDead(_263);
        _251 = const ();
        StorageDead(_259);
        _508 = const false;
        StorageDead(_254);
        goto -> bb108;
    }

    bb105: {
        StorageLive(_269);
        _269 = move ((_264 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_271);
        _271 = move _269;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _271) -> [return: bb106, unwind: bb253];
    }

    bb106: {
        StorageDead(_271);
        StorageDead(_269);
        _549 = discriminant(_264);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_259);
        _508 = const false;
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_251);
        goto -> bb217;
    }

    bb107: {
        StorageDead(_253);
        _251 = const ();
        goto -> bb108;
    }

    bb108: {
        StorageDead(_252);
        StorageDead(_251);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &(*_41);
        _274 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _275) -> [return: bb109, unwind: bb236];
    }

    bb109: {
        StorageDead(_275);
        _507 = const true;
        _273 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _274 };
        StorageDead(_274);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_80;
        _277 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _278) -> [return: bb110, unwind: bb252];
    }

    bb110: {
        StorageDead(_278);
        StorageLive(_279);
        _507 = const false;
        _279 = move _273;
        _276 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _277, move _279) -> [return: bb111, unwind: bb252];
    }

    bb111: {
        StorageDead(_279);
        StorageDead(_277);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _506 = const true;
        _284 = move _276;
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = const b"if_rebalance_config";
        _295 = &(*_296);
        _294 = <[u8; 19] as AsRef<[u8]>>::as_ref(move _295) -> [return: bb112, unwind: bb250];
    }

    bb112: {
        StorageDead(_295);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = (_7.4: u16);
        _300 = core::num::<impl u16>::to_le_bytes(move _301) -> [return: bb113, unwind: bb250];
    }

    bb113: {
        _299 = &_300;
        StorageDead(_301);
        _298 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _299) -> [return: bb114, unwind: bb250];
    }

    bb114: {
        _297 = &(*_298);
        StorageDead(_299);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = (_7.3: u16);
        _305 = core::num::<impl u16>::to_le_bytes(move _306) -> [return: bb115, unwind: bb250];
    }

    bb115: {
        _304 = &_305;
        StorageDead(_306);
        _303 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _304) -> [return: bb116, unwind: bb250];
    }

    bb116: {
        _302 = &(*_303);
        StorageDead(_304);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = _104;
        _311 = [move _312];
        _310 = &_311;
        StorageDead(_312);
        StorageLive(_313);
        _313 = RangeFull;
        _309 = <[u8; 1] as Index<RangeFull>>::index(move _310, move _313) -> [return: bb117, unwind: bb250];
    }

    bb117: {
        StorageDead(_313);
        StorageDead(_310);
        _308 = &(*_309);
        _307 = &(*_308);
        _293 = [move _294, move _297, move _302, move _307];
        _292 = &_293;
        StorageDead(_307);
        StorageDead(_302);
        StorageDead(_297);
        StorageDead(_294);
        StorageLive(_314);
        _314 = RangeFull;
        _291 = <[&[u8]; 4] as Index<RangeFull>>::index(move _292, move _314) -> [return: bb118, unwind: bb250];
    }

    bb118: {
        StorageDead(_314);
        StorageDead(_292);
        _290 = &(*_291);
        _289 = &(*_290);
        _288 = [move _289];
        StorageDead(_289);
        _287 = &_288;
        _286 = &(*_287);
        _285 = move _286 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_286);
        _506 = const false;
        _283 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _284, move _285) -> [return: bb119, unwind: bb250];
    }

    bb119: {
        StorageDead(_285);
        _506 = const false;
        StorageDead(_284);
        StorageLive(_315);
        StorageLive(_316);
        _316 = _146;
        _315 = move _316 as u64 (IntToInt);
        StorageDead(_316);
        _282 = anchor_lang::system_program::allocate(move _283, move _315) -> [return: bb120, unwind: bb252];
    }

    bb120: {
        StorageDead(_315);
        StorageDead(_283);
        _281 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _282) -> [return: bb121, unwind: bb252];
    }

    bb121: {
        StorageDead(_282);
        _317 = discriminant(_281);
        switchInt(move _317) -> [0: bb122, 1: bb123, otherwise: bb5];
    }

    bb122: {
        StorageLive(_321);
        _321 = ((_281 as Continue).0: ());
        _280 = _321;
        StorageDead(_321);
        _527 = discriminant(_281);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_281);
        StorageDead(_280);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &(*_41);
        _323 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _324) -> [return: bb125, unwind: bb252];
    }

    bb123: {
        StorageLive(_318);
        _318 = move ((_281 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_320);
        _320 = move _318;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _320) -> [return: bb124, unwind: bb248];
    }

    bb124: {
        StorageDead(_320);
        StorageDead(_318);
        _547 = discriminant(_281);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_281);
        StorageDead(_280);
        goto -> bb216;
    }

    bb125: {
        StorageDead(_324);
        _505 = const true;
        _322 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _323 };
        StorageDead(_323);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &_80;
        _326 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _327) -> [return: bb126, unwind: bb247];
    }

    bb126: {
        StorageDead(_327);
        StorageLive(_328);
        _505 = const false;
        _328 = move _322;
        _325 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _326, move _328) -> [return: bb127, unwind: bb247];
    }

    bb127: {
        StorageDead(_328);
        StorageDead(_326);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _504 = const true;
        _333 = move _325;
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = const b"if_rebalance_config";
        _344 = &(*_345);
        _343 = <[u8; 19] as AsRef<[u8]>>::as_ref(move _344) -> [return: bb128, unwind: bb245];
    }

    bb128: {
        StorageDead(_344);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = (_7.4: u16);
        _349 = core::num::<impl u16>::to_le_bytes(move _350) -> [return: bb129, unwind: bb245];
    }

    bb129: {
        _348 = &_349;
        StorageDead(_350);
        _347 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _348) -> [return: bb130, unwind: bb245];
    }

    bb130: {
        _346 = &(*_347);
        StorageDead(_348);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = (_7.3: u16);
        _354 = core::num::<impl u16>::to_le_bytes(move _355) -> [return: bb131, unwind: bb245];
    }

    bb131: {
        _353 = &_354;
        StorageDead(_355);
        _352 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _353) -> [return: bb132, unwind: bb245];
    }

    bb132: {
        _351 = &(*_352);
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = _104;
        _360 = [move _361];
        _359 = &_360;
        StorageDead(_361);
        StorageLive(_362);
        _362 = RangeFull;
        _358 = <[u8; 1] as Index<RangeFull>>::index(move _359, move _362) -> [return: bb133, unwind: bb245];
    }

    bb133: {
        StorageDead(_362);
        StorageDead(_359);
        _357 = &(*_358);
        _356 = &(*_357);
        _342 = [move _343, move _346, move _351, move _356];
        _341 = &_342;
        StorageDead(_356);
        StorageDead(_351);
        StorageDead(_346);
        StorageDead(_343);
        StorageLive(_363);
        _363 = RangeFull;
        _340 = <[&[u8]; 4] as Index<RangeFull>>::index(move _341, move _363) -> [return: bb134, unwind: bb245];
    }

    bb134: {
        StorageDead(_363);
        StorageDead(_341);
        _339 = &(*_340);
        _338 = &(*_339);
        _337 = [move _338];
        StorageDead(_338);
        _336 = &_337;
        _335 = &(*_336);
        _334 = move _335 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_335);
        _504 = const false;
        _332 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _333, move _334) -> [return: bb135, unwind: bb245];
    }

    bb135: {
        StorageDead(_334);
        _504 = const false;
        StorageDead(_333);
        StorageLive(_364);
        _364 = &(*_1);
        _331 = anchor_lang::system_program::assign(move _332, move _364) -> [return: bb136, unwind: bb247];
    }

    bb136: {
        StorageDead(_364);
        StorageDead(_332);
        _330 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _331) -> [return: bb137, unwind: bb247];
    }

    bb137: {
        StorageDead(_331);
        _365 = discriminant(_330);
        switchInt(move _365) -> [0: bb138, 1: bb139, otherwise: bb5];
    }

    bb138: {
        StorageLive(_369);
        _369 = ((_330 as Continue).0: ());
        _329 = _369;
        StorageDead(_369);
        _529 = discriminant(_330);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_330);
        StorageDead(_329);
        _156 = const ();
        StorageDead(_325);
        _505 = const false;
        StorageDead(_322);
        StorageDead(_276);
        _507 = const false;
        StorageDead(_273);
        StorageDead(_245);
        goto -> bb141;
    }

    bb139: {
        StorageLive(_366);
        _366 = move ((_330 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_368);
        _368 = move _366;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _368) -> [return: bb140, unwind: bb243];
    }

    bb140: {
        StorageDead(_368);
        StorageDead(_366);
        _545 = discriminant(_330);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_325);
        _505 = const false;
        StorageDead(_322);
        goto -> bb216;
    }

    bb141: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &(*_1);
        StorageLive(_372);
        StorageLive(_373);
        _373 = &_41;
        _500 = deref_copy (*_373);
        _372 = &(*_500);
        _370 = anchor_lang::prelude::AccountLoader::<'_, IfRebalanceConfig>::try_from_unchecked(move _371, move _372) -> [return: bb142, unwind: bb236];
    }

    bb142: {
        StorageDead(_372);
        StorageDead(_371);
        _374 = discriminant(_370);
        switchInt(move _374) -> [0: bb144, 1: bb143, otherwise: bb5];
    }

    bb143: {
        StorageLive(_376);
        _376 = move ((_370 as Err).0: anchor_lang::error::Error);
        StorageLive(_378);
        StorageLive(_379);
        _379 = move _376;
        _378 = anchor_lang::error::Error::with_account_name::<&str>(move _379, const "if_rebalance_config") -> [return: bb145, unwind: bb242];
    }

    bb144: {
        StorageLive(_375);
        _375 = move ((_370 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _147 = move _375;
        StorageDead(_375);
        StorageDead(_154);
        _531 = discriminant(_370);
        StorageDead(_373);
        StorageDead(_370);
        goto -> bb151;
    }

    bb145: {
        StorageDead(_379);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _378);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_154);
        _543 = discriminant(_370);
        StorageDead(_373);
        StorageDead(_370);
        goto -> bb219;
    }

    bb146: {
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = &_41;
        _501 = deref_copy (*_382);
        _381 = &(*_501);
        _380 = anchor_lang::prelude::AccountLoader::<'_, IfRebalanceConfig>::try_from(move _381) -> [return: bb147, unwind: bb236];
    }

    bb147: {
        StorageDead(_381);
        _383 = discriminant(_380);
        switchInt(move _383) -> [0: bb149, 1: bb148, otherwise: bb5];
    }

    bb148: {
        StorageLive(_385);
        _385 = move ((_380 as Err).0: anchor_lang::error::Error);
        StorageLive(_387);
        StorageLive(_388);
        _388 = move _385;
        _387 = anchor_lang::error::Error::with_account_name::<&str>(move _388, const "if_rebalance_config") -> [return: bb150, unwind: bb241];
    }

    bb149: {
        StorageLive(_384);
        _384 = move ((_380 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _147 = move _384;
        StorageDead(_384);
        _533 = discriminant(_380);
        StorageDead(_382);
        StorageDead(_380);
        goto -> bb151;
    }

    bb150: {
        StorageDead(_388);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _387);
        StorageDead(_387);
        StorageDead(_385);
        _541 = discriminant(_380);
        StorageDead(_382);
        StorageDead(_380);
        goto -> bb219;
    }

    bb151: {
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_389);
        StorageLive(_390);
        _390 = const false;
        switchInt(move _390) -> [0: bb175, otherwise: bb152];
    }

    bb152: {
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _146;
        StorageLive(_394);
        StorageLive(_395);
        _395 = &(*_142);
        _394 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _395) -> [return: bb153, unwind: bb236];
    }

    bb153: {
        StorageDead(_395);
        _392 = Ne(move _393, move _394);
        switchInt(move _392) -> [0: bb159, otherwise: bb154];
    }

    bb154: {
        StorageDead(_394);
        StorageDead(_393);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = ConstraintSpace;
        _399 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _400) -> [return: bb155, unwind: bb236];
    }

    bb155: {
        StorageDead(_400);
        _398 = anchor_lang::error::Error::with_account_name::<&str>(move _399, const "if_rebalance_config") -> [return: bb156, unwind: bb236];
    }

    bb156: {
        _503 = const true;
        StorageDead(_399);
        StorageLive(_401);
        StorageLive(_402);
        _402 = _146;
        StorageLive(_403);
        StorageLive(_404);
        _404 = &(*_142);
        _403 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _404) -> [return: bb157, unwind: bb240];
    }

    bb157: {
        StorageDead(_404);
        _401 = (move _402, move _403);
        StorageDead(_403);
        StorageDead(_402);
        _503 = const false;
        _397 = anchor_lang::error::Error::with_values::<usize, usize>(move _398, move _401) -> [return: bb158, unwind: bb240];
    }

    bb158: {
        StorageDead(_401);
        _503 = const false;
        StorageDead(_398);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _397);
        StorageDead(_397);
        StorageDead(_392);
        StorageDead(_391);
        goto -> bb215;
    }

    bb159: {
        StorageDead(_394);
        StorageDead(_393);
        _391 = const ();
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = &_145;
        StorageLive(_408);
        _408 = &_1;
        _406 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _407, move _408) -> [return: bb160, unwind: bb236];
    }

    bb160: {
        switchInt(move _406) -> [0: bb165, otherwise: bb161];
    }

    bb161: {
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = ConstraintOwner;
        _412 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _413) -> [return: bb162, unwind: bb236];
    }

    bb162: {
        StorageDead(_413);
        _411 = anchor_lang::error::Error::with_account_name::<&str>(move _412, const "if_rebalance_config") -> [return: bb163, unwind: bb236];
    }

    bb163: {
        StorageDead(_412);
        StorageLive(_414);
        StorageLive(_415);
        _415 = (*_145);
        StorageLive(_416);
        _416 = (*_1);
        _414 = (move _415, move _416);
        StorageDead(_416);
        StorageDead(_415);
        _410 = anchor_lang::error::Error::with_pubkeys(move _411, move _414) -> [return: bb164, unwind: bb236];
    }

    bb164: {
        StorageDead(_414);
        StorageDead(_411);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _410);
        StorageDead(_410);
        StorageDead(_406);
        StorageDead(_405);
        goto -> bb215;
    }

    bb165: {
        StorageDead(_408);
        StorageDead(_407);
        _405 = const ();
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &_95;
        StorageLive(_419);
        _419 = _146;
        _417 = anchor_lang::prelude::Rent::minimum_balance(move _418, move _419) -> [return: bb166, unwind: bb236];
    }

    bb166: {
        StorageDead(_419);
        StorageDead(_418);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &_147;
        _423 = <anchor_lang::prelude::AccountLoader<'_, IfRebalanceConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _424) -> [return: bb167, unwind: bb236];
    }

    bb167: {
        _422 = &_423;
        StorageDead(_424);
        _421 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _422) -> [return: bb168, unwind: bb232];
    }

    bb168: {
        StorageDead(_422);
        StorageLive(_425);
        _425 = _417;
        _420 = Lt(move _421, move _425);
        switchInt(move _420) -> [0: bb173, otherwise: bb169];
    }

    bb169: {
        StorageDead(_425);
        drop(_423) -> [return: bb170, unwind: bb236];
    }

    bb170: {
        StorageDead(_423);
        StorageDead(_421);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = ConstraintRentExempt;
        _428 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _429) -> [return: bb171, unwind: bb236];
    }

    bb171: {
        StorageDead(_429);
        _427 = anchor_lang::error::Error::with_account_name::<&str>(move _428, const "if_rebalance_config") -> [return: bb172, unwind: bb236];
    }

    bb172: {
        StorageDead(_428);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _427);
        StorageDead(_427);
        StorageDead(_420);
        StorageDead(_417);
        goto -> bb215;
    }

    bb173: {
        StorageDead(_425);
        drop(_423) -> [return: bb174, unwind: bb236];
    }

    bb174: {
        StorageDead(_423);
        StorageDead(_421);
        _389 = const ();
        StorageDead(_420);
        StorageDead(_417);
        goto -> bb176;
    }

    bb175: {
        _389 = const ();
        goto -> bb176;
    }

    bb176: {
        StorageDead(_390);
        StorageDead(_389);
        _141 = move _147;
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_142);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &_141;
        _433 = &(*_434);
        _432 = <anchor_lang::prelude::AccountLoader<'_, IfRebalanceConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _433) -> [return: bb177, unwind: bb236];
    }

    bb177: {
        StorageDead(_433);
        _431 = ((*_432).6: bool);
        switchInt(move _431) -> [0: bb178, otherwise: bb181];
    }

    bb178: {
        StorageDead(_434);
        StorageDead(_432);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        _438 = ConstraintMut;
        _437 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _438) -> [return: bb179, unwind: bb236];
    }

    bb179: {
        StorageDead(_438);
        _436 = anchor_lang::error::Error::with_account_name::<&str>(move _437, const "if_rebalance_config") -> [return: bb180, unwind: bb236];
    }

    bb180: {
        StorageDead(_437);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _436);
        StorageDead(_436);
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb221;
    }

    bb181: {
        StorageDead(_434);
        StorageDead(_432);
        _430 = const ();
        StorageDead(_431);
        StorageDead(_430);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = &_95;
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = &_141;
        _444 = <anchor_lang::prelude::AccountLoader<'_, IfRebalanceConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _445) -> [return: bb182, unwind: bb236];
    }

    bb182: {
        _443 = &_444;
        StorageDead(_445);
        _442 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _443) -> [return: bb183, unwind: bb231];
    }

    bb183: {
        StorageDead(_443);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = &_141;
        _450 = <anchor_lang::prelude::AccountLoader<'_, IfRebalanceConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _451) -> [return: bb184, unwind: bb231];
    }

    bb184: {
        _449 = &_450;
        StorageDead(_451);
        _448 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _449) -> [return: bb185, unwind: bb230];
    }

    bb185: {
        StorageDead(_449);
        _447 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _448) -> [return: bb186, unwind: bb230];
    }

    bb186: {
        _502 = const true;
        StorageDead(_448);
        _452 = discriminant(_447);
        switchInt(move _452) -> [0: bb187, 1: bb188, otherwise: bb5];
    }

    bb187: {
        StorageLive(_456);
        _456 = ((_447 as Continue).0: usize);
        _446 = _456;
        StorageDead(_456);
        _440 = anchor_lang::prelude::Rent::is_exempt(move _441, move _442, move _446) -> [return: bb190, unwind: bb238];
    }

    bb188: {
        StorageLive(_453);
        _453 = move ((_447 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_455);
        _455 = move _453;
        _0 = <std::result::Result<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _455) -> [return: bb189, unwind: bb238];
    }

    bb189: {
        StorageDead(_455);
        StorageDead(_453);
        StorageDead(_446);
        StorageDead(_442);
        StorageDead(_441);
        _539 = discriminant(_447);
        drop(_450) -> [return: bb212, unwind: bb231];
    }

    bb190: {
        switchInt(move _440) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        StorageDead(_446);
        StorageDead(_442);
        StorageDead(_441);
        _535 = discriminant(_447);
        drop(_450) -> [return: bb197, unwind: bb231];
    }

    bb192: {
        StorageDead(_446);
        StorageDead(_442);
        StorageDead(_441);
        _537 = discriminant(_447);
        drop(_450) -> [return: bb193, unwind: bb231];
    }

    bb193: {
        StorageDead(_450);
        _502 = const false;
        StorageDead(_447);
        drop(_444) -> [return: bb194, unwind: bb236];
    }

    bb194: {
        StorageDead(_444);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = ConstraintRentExempt;
        _459 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _460) -> [return: bb195, unwind: bb236];
    }

    bb195: {
        StorageDead(_460);
        _458 = anchor_lang::error::Error::with_account_name::<&str>(move _459, const "if_rebalance_config") -> [return: bb196, unwind: bb236];
    }

    bb196: {
        StorageDead(_459);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _458);
        StorageDead(_458);
        goto -> bb214;
    }

    bb197: {
        StorageDead(_450);
        _502 = const false;
        StorageDead(_447);
        drop(_444) -> [return: bb198, unwind: bb236];
    }

    bb198: {
        StorageDead(_444);
        _439 = const ();
        StorageDead(_440);
        StorageDead(_439);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_20;
        _464 = &(*_465);
        _463 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _464) -> [return: bb199, unwind: bb236];
    }

    bb199: {
        StorageDead(_464);
        _462 = ((*_463).6: bool);
        switchInt(move _462) -> [0: bb200, otherwise: bb203];
    }

    bb200: {
        StorageDead(_465);
        StorageDead(_463);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = ConstraintMut;
        _468 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _469) -> [return: bb201, unwind: bb236];
    }

    bb201: {
        StorageDead(_469);
        _467 = anchor_lang::error::Error::with_account_name::<&str>(move _468, const "admin") -> [return: bb202, unwind: bb236];
    }

    bb202: {
        StorageDead(_468);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _467);
        StorageDead(_467);
        StorageDead(_462);
        StorageDead(_461);
        goto -> bb221;
    }

    bb203: {
        StorageDead(_465);
        StorageDead(_463);
        _461 = const ();
        StorageDead(_462);
        StorageDead(_461);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _575 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _473 = &(*_575);
        _472 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _473) -> [return: bb204, unwind: bb236];
    }

    bb204: {
        StorageDead(_473);
        _471 = ((*_472).0: anchor_lang::prelude::Pubkey);
        StorageDead(_472);
        StorageLive(_474);
        StorageLive(_475);
        _475 = &_20;
        _474 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _475) -> [return: bb205, unwind: bb236];
    }

    bb205: {
        StorageDead(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = &_471;
        StorageLive(_478);
        _478 = &_474;
        _476 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _477, move _478) -> [return: bb206, unwind: bb236];
    }

    bb206: {
        switchInt(move _476) -> [0: bb211, otherwise: bb207];
    }

    bb207: {
        StorageDead(_478);
        StorageDead(_477);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = ConstraintHasOne;
        _482 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _483) -> [return: bb208, unwind: bb236];
    }

    bb208: {
        StorageDead(_483);
        _481 = anchor_lang::error::Error::with_account_name::<&str>(move _482, const "state") -> [return: bb209, unwind: bb236];
    }

    bb209: {
        StorageDead(_482);
        StorageLive(_484);
        StorageLive(_485);
        _485 = _471;
        StorageLive(_486);
        _486 = _474;
        _484 = (move _485, move _486);
        StorageDead(_486);
        StorageDead(_485);
        _480 = anchor_lang::error::Error::with_pubkeys(move _481, move _484) -> [return: bb210, unwind: bb236];
    }

    bb210: {
        StorageDead(_484);
        StorageDead(_481);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Err(move _480);
        StorageDead(_480);
        StorageDead(_476);
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_470);
        goto -> bb221;
    }

    bb211: {
        StorageDead(_478);
        StorageDead(_477);
        _470 = const ();
        StorageDead(_476);
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_487);
        StorageLive(_488);
        _488 = move _20;
        StorageLive(_489);
        _489 = move _141;
        StorageLive(_490);
        _490 = move _50;
        StorageLive(_491);
        _491 = move _65;
        StorageLive(_492);
        _492 = move _80;
        _487 = admin::InitializeIfRebalanceConfig::<'_> { admin: move _488, if_rebalance_config: move _489, state: move _490, rent: move _491, system_program: move _492 };
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_488);
        _0 = std::result::Result::<admin::InitializeIfRebalanceConfig<'_>, anchor_lang::error::Error>::Ok(move _487);
        StorageDead(_487);
        StorageDead(_141);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb229;
    }

    bb212: {
        StorageDead(_450);
        _502 = const false;
        StorageDead(_447);
        drop(_444) -> [return: bb213, unwind: bb236];
    }

    bb213: {
        StorageDead(_444);
        goto -> bb214;
    }

    bb214: {
        StorageDead(_440);
        StorageDead(_439);
        goto -> bb221;
    }

    bb215: {
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb220;
    }

    bb216: {
        StorageDead(_276);
        _507 = const false;
        StorageDead(_273);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_245);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_142);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_141);
        goto -> bb222;
    }

    bb222: {
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_95);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_80);
        goto -> bb225;
    }

    bb225: {
        StorageDead(_65);
        drop(_50) -> [return: bb226, unwind: bb237];
    }

    bb226: {
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_6);
        goto -> bb229;
    }

    bb229: {
        return;
    }

    bb230 (cleanup): {
        drop(_450) -> [return: bb231, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        drop(_444) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        drop(_423) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        drop(_255) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_228) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_164) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_50) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        resume;
    }

    bb238 (cleanup): {
        _563 = discriminant(_447);
        goto -> bb230;
    }

    bb239 (cleanup): {
        drop(_398) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        switchInt(_503) -> [0: bb236, otherwise: bb239];
    }

    bb241 (cleanup): {
        _564 = discriminant(_380);
        goto -> bb236;
    }

    bb242 (cleanup): {
        _565 = discriminant(_370);
        goto -> bb236;
    }

    bb243 (cleanup): {
        _566 = discriminant(_330);
        goto -> bb247;
    }

    bb244 (cleanup): {
        drop(_333) -> [return: bb247, unwind terminate(cleanup)];
    }

    bb245 (cleanup): {
        switchInt(_504) -> [0: bb247, otherwise: bb244];
    }

    bb246 (cleanup): {
        drop(_322) -> [return: bb252, unwind terminate(cleanup)];
    }

    bb247 (cleanup): {
        switchInt(_505) -> [0: bb252, otherwise: bb246];
    }

    bb248 (cleanup): {
        _567 = discriminant(_281);
        goto -> bb252;
    }

    bb249 (cleanup): {
        drop(_284) -> [return: bb252, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        switchInt(_506) -> [0: bb252, otherwise: bb249];
    }

    bb251 (cleanup): {
        drop(_273) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        switchInt(_507) -> [0: bb236, otherwise: bb251];
    }

    bb253 (cleanup): {
        _568 = discriminant(_264);
        goto -> bb255;
    }

    bb254 (cleanup): {
        drop(_254) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        switchInt(_508) -> [0: bb236, otherwise: bb254];
    }

    bb256 (cleanup): {
        drop(_226) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        switchInt(_509) -> [0: bb236, otherwise: bb256];
    }

    bb258 (cleanup): {
        _569 = discriminant(_173);
        goto -> bb262;
    }

    bb259 (cleanup): {
        drop(_176) -> [return: bb262, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        switchInt(_510) -> [0: bb262, otherwise: bb259];
    }

    bb261 (cleanup): {
        drop(_163) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        switchInt(_511) -> [0: bb236, otherwise: bb261];
    }

    bb263 (cleanup): {
        drop(_134) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        switchInt(_512) -> [0: bb236, otherwise: bb263];
    }

    bb265 (cleanup): {
        _570 = discriminant(_96);
        goto -> bb236;
    }

    bb266 (cleanup): {
        _571 = discriminant(_81);
        goto -> bb236;
    }

    bb267 (cleanup): {
        _572 = discriminant(_66);
        goto -> bb236;
    }

    bb268 (cleanup): {
        _573 = discriminant(_51);
        goto -> bb237;
    }

    bb269 (cleanup): {
        _574 = discriminant(_21);
        goto -> bb237;
    }
}

alloc246 (size: 19, align: 1) {
    0x00 │ 69 66 5f 72 65 62 61 6c 61 6e 63 65 5f 63 6f 6e │ if_rebalance_con
    0x10 │ 66 69 67                                        │ fig
}

alloc245 (size: 19, align: 1) {
    0x00 │ 69 66 5f 72 65 62 61 6c 61 6e 63 65 5f 63 6f 6e │ if_rebalance_con
    0x10 │ 66 69 67                                        │ fig
}

alloc244 (size: 19, align: 1) {
    0x00 │ 69 66 5f 72 65 62 61 6c 61 6e 63 65 5f 63 6f 6e │ if_rebalance_con
    0x10 │ 66 69 67                                        │ fig
}

alloc243 (size: 19, align: 1) {
    0x00 │ 69 66 5f 72 65 62 61 6c 61 6e 63 65 5f 63 6f 6e │ if_rebalance_con
    0x10 │ 66 69 67                                        │ fig
}
