// MIR for `controller::orders::fill_perp_order` after PreCodegen

fn controller::orders::fill_perp_order(_1: u32, _2: &state::state::State, _3: &anchor_lang::prelude::AccountLoader<'_, User>, _4: &anchor_lang::prelude::AccountLoader<'_, UserStats>, _5: &SpotMarketMap<'_>, _6: &PerpMarketMap<'_>, _7: &mut OracleMap<'_>, _8: &anchor_lang::prelude::AccountLoader<'_, User>, _9: &anchor_lang::prelude::AccountLoader<'_, UserStats>, _10: &UserMap<'_>, _11: &UserStatsMap<'_>, _12: Option<u32>, _13: &anchor_lang::prelude::Clock, _14: FillMode) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug order_id => _1;
    debug state => _2;
    debug user => _3;
    debug user_stats => _4;
    debug spot_market_map => _5;
    debug perp_market_map => _6;
    debug oracle_map => _7;
    debug filler => _8;
    debug filler_stats => _9;
    debug makers_and_referrer => _10;
    debug makers_and_referrer_stats => _11;
    debug jit_maker_order_id => _12;
    debug clock => _13;
    debug fill_mode => _14;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _15: i64;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _22: std::cell::RefMut<'_, state::user::User>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _24: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _27: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _36: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _39: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _47: std::result::Result<usize, error::ErrorCode>;
    let mut _48: std::option::Option<usize>;
    let mut _49: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _50: std::slice::Iter<'_, state::user::Order>;
    let mut _51: &[state::user::Order];
    let mut _52: &[state::user::Order; 32];
    let _53: &state::user::User;
    let mut _54: &std::cell::RefMut<'_, state::user::User>;
    let mut _55: {closure@programs/drift/src/controller/orders.rs:985:19: 985:26};
    let mut _56: &u32;
    let mut _57: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: (state::user::OrderStatus, u16, state::user::MarketType, u64, i32, controller::position::PositionDirection, u8);
    let mut _71: state::user::OrderStatus;
    let mut _72: &state::user::User;
    let mut _73: &std::cell::RefMut<'_, state::user::User>;
    let _74: usize;
    let mut _75: usize;
    let mut _76: bool;
    let mut _77: u16;
    let mut _78: &state::user::User;
    let mut _79: &std::cell::RefMut<'_, state::user::User>;
    let _80: usize;
    let mut _81: usize;
    let mut _82: bool;
    let mut _83: state::user::MarketType;
    let mut _84: &state::user::User;
    let mut _85: &std::cell::RefMut<'_, state::user::User>;
    let _86: usize;
    let mut _87: usize;
    let mut _88: bool;
    let mut _89: u64;
    let mut _90: &state::user::User;
    let mut _91: &std::cell::RefMut<'_, state::user::User>;
    let _92: usize;
    let mut _93: usize;
    let mut _94: bool;
    let mut _95: i32;
    let mut _96: &state::user::User;
    let mut _97: &std::cell::RefMut<'_, state::user::User>;
    let _98: usize;
    let mut _99: usize;
    let mut _100: bool;
    let mut _101: controller::position::PositionDirection;
    let mut _102: &state::user::User;
    let mut _103: &std::cell::RefMut<'_, state::user::User>;
    let _104: usize;
    let mut _105: usize;
    let mut _106: bool;
    let mut _107: u8;
    let mut _108: &state::user::User;
    let mut _109: &std::cell::RefMut<'_, state::user::User>;
    let _110: usize;
    let mut _111: usize;
    let mut _112: bool;
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _115: std::result::Result<(), error::ErrorCode>;
    let mut _116: bool;
    let mut _117: &state::user::MarketType;
    let mut _118: &state::user::MarketType;
    let _119: state::user::MarketType;
    let mut _120: ();
    let _122: ();
    let mut _123: &str;
    let _124: &str;
    let mut _125: &std::string::String;
    let _126: &std::string::String;
    let _127: std::string::String;
    let mut _129: std::fmt::Arguments<'_>;
    let mut _130: &[&str];
    let mut _131: &[&str; 2];
    let _132: &[&str; 2];
    let _133: [&str; 2];
    let mut _134: &[core::fmt::rt::Argument<'_>];
    let mut _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: &[core::fmt::rt::Argument<'_>; 1];
    let _137: [core::fmt::rt::Argument<'_>; 1];
    let mut _138: core::fmt::rt::Argument<'_>;
    let mut _139: &error::ErrorCode;
    let _140: &error::ErrorCode;
    let _141: ();
    let mut _142: &str;
    let _143: &str;
    let mut _144: error::ErrorCode;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _152: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _153: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _154: &u16;
    let _155: &u16;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _161: ();
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _163: std::result::Result<(), error::ErrorCode>;
    let mut _164: &mut state::user::User;
    let mut _165: &mut state::user::User;
    let mut _166: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _167: &anchor_lang::prelude::Pubkey;
    let _168: &anchor_lang::prelude::Pubkey;
    let mut _169: &mut state::perp_market::PerpMarket;
    let mut _170: &mut state::perp_market::PerpMarket;
    let mut _171: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _172: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _173: i64;
    let mut _174: isize;
    let mut _176: !;
    let mut _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _179: ();
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _181: std::result::Result<(), error::ErrorCode>;
    let mut _182: bool;
    let mut _183: &state::perp_market::PerpMarket;
    let mut _184: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _185: isize;
    let mut _186: ();
    let _188: ();
    let mut _189: &str;
    let _190: &str;
    let mut _191: &std::string::String;
    let _192: &std::string::String;
    let _193: std::string::String;
    let mut _195: std::fmt::Arguments<'_>;
    let mut _196: &[&str];
    let mut _197: &[&str; 2];
    let _198: &[&str; 2];
    let _199: [&str; 2];
    let mut _200: &[core::fmt::rt::Argument<'_>];
    let mut _201: &[core::fmt::rt::Argument<'_>; 1];
    let _202: &[core::fmt::rt::Argument<'_>; 1];
    let _203: [core::fmt::rt::Argument<'_>; 1];
    let mut _204: core::fmt::rt::Argument<'_>;
    let mut _205: &error::ErrorCode;
    let _206: &error::ErrorCode;
    let _207: ();
    let mut _208: &str;
    let _209: &str;
    let mut _210: &std::string::String;
    let _211: &std::string::String;
    let _212: std::string::String;
    let mut _214: std::fmt::Arguments<'_>;
    let mut _215: &[&str];
    let mut _216: &[&str; 1];
    let _217: &[&str; 1];
    let _218: [&str; 1];
    let mut _219: error::ErrorCode;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _225: ();
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _227: std::result::Result<(), error::ErrorCode>;
    let mut _228: bool;
    let mut _229: &state::perp_market::PerpMarket;
    let _230: &state::perp_market::PerpMarket;
    let mut _231: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _232: state::paused_operations::PerpOperation;
    let mut _233: ();
    let _235: ();
    let mut _236: &str;
    let _237: &str;
    let mut _238: &std::string::String;
    let _239: &std::string::String;
    let _240: std::string::String;
    let mut _242: std::fmt::Arguments<'_>;
    let mut _243: &[&str];
    let mut _244: &[&str; 2];
    let _245: &[&str; 2];
    let _246: [&str; 2];
    let mut _247: &[core::fmt::rt::Argument<'_>];
    let mut _248: &[core::fmt::rt::Argument<'_>; 1];
    let _249: &[core::fmt::rt::Argument<'_>; 1];
    let _250: [core::fmt::rt::Argument<'_>; 1];
    let mut _251: core::fmt::rt::Argument<'_>;
    let mut _252: &error::ErrorCode;
    let _253: &error::ErrorCode;
    let _254: ();
    let mut _255: &str;
    let _256: &str;
    let mut _257: &std::string::String;
    let _258: &std::string::String;
    let _259: std::string::String;
    let mut _261: std::fmt::Arguments<'_>;
    let mut _262: &[&str];
    let mut _263: &[&str; 1];
    let _264: &[&str; 1];
    let _265: [&str; 1];
    let mut _266: error::ErrorCode;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _272: ();
    let mut _273: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _274: ();
    let mut _275: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _276: std::result::Result<(), error::ErrorCode>;
    let mut _277: bool;
    let mut _278: &state::user::OrderStatus;
    let mut _279: &state::user::OrderStatus;
    let _280: state::user::OrderStatus;
    let mut _281: ();
    let _283: ();
    let mut _284: &str;
    let _285: &str;
    let mut _286: &std::string::String;
    let _287: &std::string::String;
    let _288: std::string::String;
    let mut _290: std::fmt::Arguments<'_>;
    let mut _291: &[&str];
    let mut _292: &[&str; 2];
    let _293: &[&str; 2];
    let _294: [&str; 2];
    let mut _295: &[core::fmt::rt::Argument<'_>];
    let mut _296: &[core::fmt::rt::Argument<'_>; 1];
    let _297: &[core::fmt::rt::Argument<'_>; 1];
    let _298: [core::fmt::rt::Argument<'_>; 1];
    let mut _299: core::fmt::rt::Argument<'_>;
    let mut _300: &error::ErrorCode;
    let _301: &error::ErrorCode;
    let _302: ();
    let mut _303: &str;
    let _304: &str;
    let mut _305: error::ErrorCode;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _311: ();
    let mut _312: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _313: std::result::Result<(), error::ErrorCode>;
    let mut _314: bool;
    let mut _315: &state::user::Order;
    let _316: &state::user::User;
    let mut _317: &std::cell::RefMut<'_, state::user::User>;
    let _318: usize;
    let mut _319: usize;
    let mut _320: bool;
    let mut _321: bool;
    let mut _322: &state::user::Order;
    let _323: &state::user::User;
    let mut _324: &std::cell::RefMut<'_, state::user::User>;
    let _325: usize;
    let mut _326: usize;
    let mut _327: bool;
    let mut _328: ();
    let _330: ();
    let mut _331: &str;
    let _332: &str;
    let mut _333: &std::string::String;
    let _334: &std::string::String;
    let _335: std::string::String;
    let mut _337: std::fmt::Arguments<'_>;
    let mut _338: &[&str];
    let mut _339: &[&str; 2];
    let _340: &[&str; 2];
    let _341: [&str; 2];
    let mut _342: &[core::fmt::rt::Argument<'_>];
    let mut _343: &[core::fmt::rt::Argument<'_>; 1];
    let _344: &[core::fmt::rt::Argument<'_>; 1];
    let _345: [core::fmt::rt::Argument<'_>; 1];
    let mut _346: core::fmt::rt::Argument<'_>;
    let mut _347: &error::ErrorCode;
    let _348: &error::ErrorCode;
    let _349: ();
    let mut _350: &str;
    let _351: &str;
    let mut _352: error::ErrorCode;
    let mut _353: isize;
    let mut _355: !;
    let mut _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _358: ();
    let mut _359: bool;
    let mut _360: &state::user::User;
    let _361: &state::user::User;
    let mut _362: &std::cell::RefMut<'_, state::user::User>;
    let mut _363: !;
    let _364: ();
    let mut _365: &str;
    let _366: &str;
    let mut _367: (u64, u64);
    let _368: ();
    let mut _369: bool;
    let mut _370: &state::fill_mode::FillMode;
    let mut _371: std::result::Result<(), error::ErrorCode>;
    let mut _372: &mut state::user::User;
    let mut _373: &mut state::user::User;
    let mut _374: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _375: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _376: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _377: &mut state::oracle_map::OracleMap<'_>;
    let mut _378: u32;
    let mut _379: isize;
    let mut _380: !;
    let _381: ();
    let mut _382: &str;
    let _383: &str;
    let mut _384: (u64, u64);
    let mut _397: bool;
    let mut _398: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _399: std::result::Result<bool, error::ErrorCode>;
    let mut _400: &state::state::State;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _406: ();
    let mut _408: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _409: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _410: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _411: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _412: &u16;
    let _413: &u16;
    let mut _414: isize;
    let mut _416: !;
    let mut _417: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _419: ();
    let mut _420: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _421: std::result::Result<(), error::ErrorCode>;
    let mut _422: &state::perp_market::PerpMarket;
    let _423: &state::perp_market::PerpMarket;
    let mut _424: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _425: isize;
    let mut _427: !;
    let mut _428: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _430: ();
    let mut _431: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _432: std::result::Result<(), error::ErrorCode>;
    let mut _433: bool;
    let mut _434: &state::perp_market::PerpMarket;
    let _435: &state::perp_market::PerpMarket;
    let mut _436: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _437: i64;
    let mut _438: ();
    let _440: ();
    let mut _441: &str;
    let _442: &str;
    let mut _443: &std::string::String;
    let _444: &std::string::String;
    let _445: std::string::String;
    let mut _447: std::fmt::Arguments<'_>;
    let mut _448: &[&str];
    let mut _449: &[&str; 2];
    let _450: &[&str; 2];
    let _451: [&str; 2];
    let mut _452: &[core::fmt::rt::Argument<'_>];
    let mut _453: &[core::fmt::rt::Argument<'_>; 1];
    let _454: &[core::fmt::rt::Argument<'_>; 1];
    let _455: [core::fmt::rt::Argument<'_>; 1];
    let mut _456: core::fmt::rt::Argument<'_>;
    let mut _457: &error::ErrorCode;
    let _458: &error::ErrorCode;
    let _459: ();
    let mut _460: &str;
    let _461: &str;
    let mut _462: &std::string::String;
    let _463: &std::string::String;
    let _464: std::string::String;
    let mut _466: std::fmt::Arguments<'_>;
    let mut _467: &[&str];
    let mut _468: &[&str; 1];
    let _469: &[&str; 1];
    let _470: [&str; 1];
    let mut _471: error::ErrorCode;
    let mut _472: isize;
    let mut _474: !;
    let mut _475: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _478: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _479: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _480: &mut state::oracle_map::OracleMap<'_>;
    let mut _481: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _482: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _483: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _484: &state::perp_market::PerpMarket;
    let _485: &state::perp_market::PerpMarket;
    let mut _486: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _487: isize;
    let mut _489: !;
    let mut _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _493: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::MMOraclePriceData>;
    let mut _494: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let mut _495: &state::perp_market::PerpMarket;
    let _496: &state::perp_market::PerpMarket;
    let mut _497: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _498: state::oracle::OraclePriceData;
    let mut _499: u64;
    let mut _500: &state::state::ValidityGuardRails;
    let _501: &state::state::ValidityGuardRails;
    let mut _502: isize;
    let mut _504: !;
    let mut _505: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _508: &state::oracle::MMOraclePriceData;
    let mut _509: math::oracle::OracleValidity;
    let mut _510: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::oracle::OracleValidity>;
    let mut _511: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let mut _512: state::user::MarketType;
    let mut _513: u16;
    let mut _514: &state::perp_market::PerpMarket;
    let mut _515: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _516: i64;
    let mut _517: &state::perp_market::PerpMarket;
    let mut _518: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _519: &state::oracle::OraclePriceData;
    let _520: &state::oracle::OraclePriceData;
    let mut _521: &state::state::ValidityGuardRails;
    let _522: &state::state::ValidityGuardRails;
    let mut _523: u64;
    let mut _524: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _525: std::result::Result<u64, error::ErrorCode>;
    let mut _526: state::perp_market::PerpMarket;
    let mut _527: &state::perp_market::PerpMarket;
    let mut _528: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _529: isize;
    let mut _531: !;
    let mut _532: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _534: &state::oracle::OracleSource;
    let _535: &state::oracle::OracleSource;
    let _536: &state::perp_market::PerpMarket;
    let mut _537: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _538: math::oracle::LogMode;
    let mut _539: i8;
    let mut _540: &state::perp_market::PerpMarket;
    let mut _541: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _542: isize;
    let mut _544: !;
    let mut _545: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _547: bool;
    let mut _548: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _549: std::result::Result<bool, error::ErrorCode>;
    let mut _550: math::oracle::OracleValidity;
    let mut _551: std::option::Option<math::oracle::DriftAction>;
    let mut _552: math::oracle::DriftAction;
    let mut _553: isize;
    let mut _555: !;
    let mut _556: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _558: i64;
    let mut _559: &state::oracle::MMOraclePriceData;
    let mut _560: i64;
    let mut _561: bool;
    let mut _562: bool;
    let mut _563: bool;
    let mut _564: &state::perp_market::PerpMarket;
    let _565: &state::perp_market::PerpMarket;
    let mut _566: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _567: state::paused_operations::PerpOperation;
    let mut _568: bool;
    let mut _569: bool;
    let mut _570: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _571: std::result::Result<bool, error::ErrorCode>;
    let mut _572: &state::perp_market::PerpMarket;
    let _573: &state::perp_market::PerpMarket;
    let mut _574: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _575: isize;
    let mut _577: !;
    let mut _578: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _581: bool;
    let mut _582: &state::oracle::MMOraclePriceData;
    let mut _583: bool;
    let mut _584: &state::oracle::MMOraclePriceData;
    let mut _586: bool;
    let mut _587: &state::oracle::MMOraclePriceData;
    let mut _588: bool;
    let mut _590: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _591: std::result::Result<bool, error::ErrorCode>;
    let mut _592: &state::perp_market::AMM;
    let _593: &state::perp_market::PerpMarket;
    let mut _594: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _595: controller::position::PositionDirection;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _601: bool;
    let mut _602: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _603: std::result::Result<bool, error::ErrorCode>;
    let mut _604: &state::perp_market::AMM;
    let _605: &state::perp_market::PerpMarket;
    let mut _606: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _607: bool;
    let mut _608: isize;
    let mut _610: !;
    let mut _611: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _613: bool;
    let mut _614: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _615: std::result::Result<bool, error::ErrorCode>;
    let mut _616: &state::perp_market::PerpMarket;
    let _617: &state::perp_market::PerpMarket;
    let mut _618: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _619: &state::state::State;
    let _620: &&state::state::State;
    let mut _621: bool;
    let mut _622: isize;
    let mut _624: !;
    let mut _625: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _627: bool;
    let mut _628: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _629: std::result::Result<bool, error::ErrorCode>;
    let mut _630: &state::user::User;
    let _631: &state::user::User;
    let mut _632: &std::cell::RefMut<'_, state::user::User>;
    let mut _633: &state::user::UserStats;
    let _634: &state::user::UserStats;
    let mut _635: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _636: isize;
    let mut _638: !;
    let mut _639: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _641: u64;
    let mut _642: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _643: std::result::Result<u64, error::ErrorCode>;
    let mut _644: &state::perp_market::AMM;
    let _645: &state::perp_market::PerpMarket;
    let mut _646: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _647: isize;
    let mut _649: !;
    let mut _650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _652: i64;
    let mut _653: &state::oracle::MMOraclePriceData;
    let mut _654: i64;
    let mut _655: &state::perp_market::PerpMarket;
    let mut _656: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _657: u16;
    let mut _658: &state::perp_market::PerpMarket;
    let mut _659: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _660: u8;
    let mut _661: &state::perp_market::PerpMarket;
    let _662: &state::perp_market::PerpMarket;
    let mut _663: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _664: u8;
    let mut _666: bool;
    let mut _667: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _668: std::result::Result<bool, error::ErrorCode>;
    let mut _669: math::oracle::OracleValidity;
    let mut _670: std::option::Option<math::oracle::DriftAction>;
    let mut _671: math::oracle::DriftAction;
    let mut _672: isize;
    let mut _674: !;
    let mut _675: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _677: i64;
    let _678: ();
    let mut _679: &str;
    let _680: &str;
    let mut _681: &std::string::String;
    let _682: &std::string::String;
    let _683: std::string::String;
    let mut _685: std::fmt::Arguments<'_>;
    let mut _686: &[&str];
    let mut _687: &[&str; 2];
    let _688: &[&str; 2];
    let _689: [&str; 2];
    let mut _690: &[core::fmt::rt::Argument<'_>];
    let mut _691: &[core::fmt::rt::Argument<'_>; 1];
    let _692: &[core::fmt::rt::Argument<'_>; 1];
    let _693: [core::fmt::rt::Argument<'_>; 1];
    let mut _694: core::fmt::rt::Argument<'_>;
    let mut _695: &u16;
    let _696: &u16;
    let mut _698: &anchor_lang::prelude::Pubkey;
    let mut _699: &anchor_lang::prelude::Pubkey;
    let mut _701: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _702: &anchor_lang::prelude::Pubkey;
    let _703: &anchor_lang::prelude::Pubkey;
    let mut _706: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _707: bool;
    let mut _708: bool;
    let mut _710: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _711: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _712: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _713: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _714: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _715: isize;
    let mut _717: !;
    let mut _718: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _720: ();
    let mut _721: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _722: std::result::Result<(), error::ErrorCode>;
    let mut _723: bool;
    let mut _724: u8;
    let mut _725: &state::user::User;
    let mut _726: &std::cell::RefMut<'_, state::user::User>;
    let mut _727: ();
    let _729: ();
    let mut _730: &str;
    let _731: &str;
    let mut _732: &std::string::String;
    let _733: &std::string::String;
    let _734: std::string::String;
    let mut _736: std::fmt::Arguments<'_>;
    let mut _737: &[&str];
    let mut _738: &[&str; 2];
    let _739: &[&str; 2];
    let _740: [&str; 2];
    let mut _741: &[core::fmt::rt::Argument<'_>];
    let mut _742: &[core::fmt::rt::Argument<'_>; 1];
    let _743: &[core::fmt::rt::Argument<'_>; 1];
    let _744: [core::fmt::rt::Argument<'_>; 1];
    let mut _745: core::fmt::rt::Argument<'_>;
    let mut _746: &error::ErrorCode;
    let _747: &error::ErrorCode;
    let _748: ();
    let mut _749: &str;
    let _750: &str;
    let mut _751: &std::string::String;
    let _752: &std::string::String;
    let _753: std::string::String;
    let mut _755: std::fmt::Arguments<'_>;
    let mut _756: &[&str];
    let mut _757: &[&str; 2];
    let _758: &[&str; 2];
    let _759: [&str; 2];
    let mut _760: &[core::fmt::rt::Argument<'_>];
    let mut _761: &[core::fmt::rt::Argument<'_>; 1];
    let _762: &[core::fmt::rt::Argument<'_>; 1];
    let _763: [core::fmt::rt::Argument<'_>; 1];
    let mut _764: core::fmt::rt::Argument<'_>;
    let mut _765: &u8;
    let _766: &u8;
    let _767: &state::user::User;
    let mut _768: &std::cell::RefMut<'_, state::user::User>;
    let mut _769: error::ErrorCode;
    let mut _770: isize;
    let mut _772: !;
    let mut _773: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _775: bool;
    let mut _776: &anchor_lang::prelude::Pubkey;
    let _777: &state::user::User;
    let mut _778: &std::cell::RefMut<'_, state::user::User>;
    let mut _779: &anchor_lang::prelude::Pubkey;
    let _780: &state::user::User;
    let mut _781: &std::cell::RefMut<'_, state::user::User>;
    let mut _782: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _783: std::cell::RefMut<'_, state::user::User>;
    let mut _784: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _785: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _786: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _787: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _788: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _789: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _790: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _791: isize;
    let mut _793: !;
    let mut _794: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _796: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _797: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _798: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _799: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _801: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>>;
    let mut _802: std::result::Result<std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode>;
    let mut _803: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _804: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _805: &mut state::oracle_map::OracleMap<'_>;
    let mut _806: &state::user_map::UserMap<'_>;
    let mut _807: &anchor_lang::prelude::Pubkey;
    let _808: &anchor_lang::prelude::Pubkey;
    let mut _809: &state::user::Order;
    let _810: &state::user::Order;
    let _811: &state::user::User;
    let mut _812: &std::cell::RefMut<'_, state::user::User>;
    let _813: usize;
    let mut _814: usize;
    let mut _815: bool;
    let mut _816: &mut std::option::Option<&mut state::user::User>;
    let mut _817: &mut std::option::Option<&mut state::user::User>;
    let mut _818: std::option::Option<&mut state::user::User>;
    let mut _819: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _820: &anchor_lang::prelude::Pubkey;
    let _821: &anchor_lang::prelude::Pubkey;
    let mut _822: u64;
    let mut _823: i64;
    let mut _824: std::option::Option<u32>;
    let mut _825: i64;
    let mut _826: u64;
    let mut _827: bool;
    let mut _828: u64;
    let mut _829: u8;
    let mut _830: isize;
    let mut _832: !;
    let mut _833: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _836: bool;
    let mut _837: &state::fill_mode::FillMode;
    let mut _838: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>>;
    let mut _839: std::result::Result<std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode>;
    let mut _840: &state::user::UserStats;
    let _841: &state::user::UserStats;
    let mut _842: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _843: &anchor_lang::prelude::Pubkey;
    let _844: &anchor_lang::prelude::Pubkey;
    let mut _845: &state::user_map::UserMap<'_>;
    let mut _846: &state::user_map::UserStatsMap<'_>;
    let mut _847: u64;
    let mut _848: isize;
    let mut _850: !;
    let mut _851: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _854: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _855: std::result::Result<bool, error::ErrorCode>;
    let mut _856: i64;
    let mut _857: i64;
    let mut _858: i64;
    let mut _859: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _860: std::result::Result<i64, error::ErrorCode>;
    let mut _861: u64;
    let mut _862: &state::state::OracleGuardRails;
    let mut _863: isize;
    let mut _865: !;
    let mut _866: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _868: isize;
    let mut _870: !;
    let mut _871: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _873: ();
    let mut _874: bool;
    let _875: ();
    let mut _876: std::option::Option<&mut state::user::User>;
    let mut _877: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _878: isize;
    let _880: ();
    let mut _881: &mut state::user::User;
    let mut _882: u64;
    let mut _883: bool;
    let mut _884: &state::perp_market::PerpMarket;
    let _885: &state::perp_market::PerpMarket;
    let mut _886: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _887: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _888: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _889: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _890: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _891: &u16;
    let _892: &u16;
    let mut _893: isize;
    let mut _895: !;
    let mut _896: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _898: !;
    let mut _899: (u64, u64);
    let mut _901: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _902: std::result::Result<bool, error::ErrorCode>;
    let mut _903: &state::user::User;
    let _904: &state::user::User;
    let mut _905: &std::cell::RefMut<'_, state::user::User>;
    let mut _906: usize;
    let mut _907: i64;
    let mut _908: isize;
    let mut _910: !;
    let mut _911: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _914: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _915: std::result::Result<usize, error::ErrorCode>;
    let mut _916: &[state::user::PerpPosition; 8];
    let _917: &[state::user::PerpPosition; 8];
    let _918: &state::user::User;
    let mut _919: &std::cell::RefMut<'_, state::user::User>;
    let mut _920: u16;
    let mut _921: &state::user::User;
    let mut _922: &std::cell::RefMut<'_, state::user::User>;
    let _923: usize;
    let mut _924: usize;
    let mut _925: bool;
    let mut _926: isize;
    let mut _928: !;
    let mut _929: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _932: &state::user::User;
    let mut _933: &std::cell::RefMut<'_, state::user::User>;
    let _934: usize;
    let mut _935: usize;
    let mut _936: bool;
    let mut _938: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _939: std::result::Result<bool, error::ErrorCode>;
    let mut _940: &state::user::Order;
    let _941: &state::user::Order;
    let _942: &state::user::User;
    let mut _943: &std::cell::RefMut<'_, state::user::User>;
    let _944: usize;
    let mut _945: usize;
    let mut _946: bool;
    let mut _947: i64;
    let mut _948: u64;
    let mut _949: &state::perp_market::PerpMarket;
    let mut _950: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _951: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _952: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _953: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _954: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _955: &u16;
    let _956: &u16;
    let mut _957: isize;
    let mut _959: !;
    let mut _960: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _962: isize;
    let mut _964: !;
    let mut _965: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _967: ();
    let mut _968: bool;
    let mut _969: bool;
    let mut _970: !;
    let mut _973: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _974: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _975: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _976: &u16;
    let _977: &u16;
    let mut _978: isize;
    let mut _980: !;
    let mut _981: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _983: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _984: std::result::Result<u64, error::ErrorCode>;
    let mut _985: &mut state::user::User;
    let mut _986: &mut state::user::User;
    let mut _987: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _988: std::option::Option<&mut state::user::User>;
    let mut _989: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _990: &mut state::perp_market::PerpMarket;
    let mut _991: &mut state::perp_market::PerpMarket;
    let mut _992: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _993: u64;
    let mut _994: u64;
    let mut _995: isize;
    let mut _997: !;
    let mut _998: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1001: bool;
    let _1002: ();
    let mut _1003: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1004: std::result::Result<(), error::ErrorCode>;
    let mut _1005: usize;
    let mut _1006: &mut state::user::User;
    let mut _1007: &mut state::user::User;
    let mut _1008: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1009: &anchor_lang::prelude::Pubkey;
    let _1010: &anchor_lang::prelude::Pubkey;
    let mut _1011: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1012: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1013: &mut state::oracle_map::OracleMap<'_>;
    let mut _1014: i64;
    let mut _1015: u64;
    let mut _1016: state::events::OrderActionExplanation;
    let mut _1017: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1018: &anchor_lang::prelude::Pubkey;
    let _1019: &anchor_lang::prelude::Pubkey;
    let mut _1020: u64;
    let mut _1021: isize;
    let mut _1023: !;
    let mut _1024: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1026: (u64, u64);
    let mut _1028: bool;
    let mut _1029: bool;
    let mut _1030: bool;
    let mut _1033: (u64, u64);
    let mut _1034: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _1035: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _1036: &mut state::user::User;
    let mut _1037: &mut state::user::User;
    let mut _1038: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1039: usize;
    let mut _1040: &anchor_lang::prelude::Pubkey;
    let _1041: &anchor_lang::prelude::Pubkey;
    let mut _1042: &mut state::user::UserStats;
    let mut _1043: &mut state::user::UserStats;
    let mut _1044: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1045: &state::user_map::UserMap<'_>;
    let mut _1046: &state::user_map::UserStatsMap<'_>;
    let mut _1047: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let _1048: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let mut _1049: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let _1050: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _1051: &mut std::option::Option<&mut state::user::User>;
    let mut _1052: &mut std::option::Option<&mut state::user::User>;
    let mut _1053: std::option::Option<&mut state::user::User>;
    let mut _1054: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _1055: &anchor_lang::prelude::Pubkey;
    let _1056: &anchor_lang::prelude::Pubkey;
    let mut _1057: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _1058: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _1059: std::option::Option<&mut state::user::UserStats>;
    let mut _1060: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _1061: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let mut _1062: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1063: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1064: &mut state::oracle_map::OracleMap<'_>;
    let mut _1065: &state::state::FeeStructure;
    let _1066: &state::state::FeeStructure;
    let mut _1067: u64;
    let mut _1068: std::option::Option<i64>;
    let mut _1069: i64;
    let mut _1070: u64;
    let mut _1071: u8;
    let mut _1072: state::perp_market::AMMAvailability;
    let mut _1073: state::fill_mode::FillMode;
    let mut _1074: bool;
    let mut _1075: isize;
    let mut _1077: !;
    let mut _1078: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1080: ();
    let mut _1081: bool;
    let mut _1082: u64;
    let mut _1084: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1085: std::result::Result<u64, error::ErrorCode>;
    let mut _1086: u64;
    let mut _1087: u64;
    let mut _1088: isize;
    let mut _1090: !;
    let mut _1091: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1094: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1095: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1096: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1097: &u16;
    let _1098: &u16;
    let mut _1099: isize;
    let mut _1101: !;
    let mut _1102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1104: ();
    let mut _1105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1106: std::result::Result<(), error::ErrorCode>;
    let mut _1107: u64;
    let mut _1108: i64;
    let mut _1109: i64;
    let mut _1110: u32;
    let mut _1111: &state::perp_market::PerpMarket;
    let mut _1112: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1113: u64;
    let mut _1114: &state::state::OracleGuardRails;
    let mut _1115: bool;
    let mut _1116: &state::perp_market::PerpMarket;
    let _1117: &state::perp_market::PerpMarket;
    let mut _1118: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1119: std::option::Option<controller::position::PositionDirection>;
    let mut _1120: isize;
    let mut _1122: !;
    let mut _1123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1125: u64;
    let mut _1126: &mut state::perp_market::PerpMarket;
    let mut _1127: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1129: &state::user::User;
    let mut _1130: &std::cell::RefMut<'_, state::user::User>;
    let _1131: usize;
    let mut _1132: usize;
    let mut _1133: bool;
    let mut _1135: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1136: std::result::Result<bool, error::ErrorCode>;
    let mut _1137: &state::user::Order;
    let _1138: &state::user::Order;
    let _1139: &state::user::User;
    let mut _1140: &std::cell::RefMut<'_, state::user::User>;
    let _1141: usize;
    let mut _1142: usize;
    let mut _1143: bool;
    let mut _1144: i64;
    let mut _1145: u64;
    let mut _1146: &state::perp_market::PerpMarket;
    let mut _1147: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _1148: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1150: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1151: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1152: &u16;
    let _1153: &u16;
    let mut _1154: isize;
    let mut _1156: !;
    let mut _1157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1159: isize;
    let mut _1161: !;
    let mut _1162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1164: ();
    let mut _1165: bool;
    let mut _1168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1169: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1170: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1171: &u16;
    let _1172: &u16;
    let mut _1173: isize;
    let mut _1175: !;
    let mut _1176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1179: std::result::Result<u64, error::ErrorCode>;
    let mut _1180: &mut state::user::User;
    let mut _1181: &mut state::user::User;
    let mut _1182: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1183: std::option::Option<&mut state::user::User>;
    let mut _1184: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _1185: &mut state::perp_market::PerpMarket;
    let mut _1186: &mut state::perp_market::PerpMarket;
    let mut _1187: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1188: u64;
    let mut _1189: u64;
    let mut _1190: isize;
    let mut _1192: !;
    let mut _1193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1197: std::result::Result<(), error::ErrorCode>;
    let mut _1198: usize;
    let mut _1199: &mut state::user::User;
    let mut _1200: &mut state::user::User;
    let mut _1201: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1202: &anchor_lang::prelude::Pubkey;
    let _1203: &anchor_lang::prelude::Pubkey;
    let mut _1204: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1205: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1206: &mut state::oracle_map::OracleMap<'_>;
    let mut _1207: i64;
    let mut _1208: u64;
    let mut _1209: state::events::OrderActionExplanation;
    let mut _1210: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1211: &anchor_lang::prelude::Pubkey;
    let _1212: &anchor_lang::prelude::Pubkey;
    let mut _1213: u64;
    let mut _1214: isize;
    let mut _1216: !;
    let mut _1217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1219: ();
    let mut _1220: bool;
    let mut _1221: u64;
    let mut _1222: !;
    let mut _1223: (u64, u64);
    let mut _1224: u64;
    let mut _1225: u64;
    let _1226: ();
    let mut _1228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1229: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1230: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1231: &u16;
    let _1232: &u16;
    let mut _1233: isize;
    let mut _1235: !;
    let mut _1236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1239: &state::perp_market::PerpMarket;
    let _1240: &state::perp_market::PerpMarket;
    let mut _1241: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1243: &state::perp_market::PerpMarket;
    let mut _1244: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1245: ();
    let mut _1246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1247: std::result::Result<(), error::ErrorCode>;
    let mut _1248: bool;
    let mut _1249: u128;
    let mut _1250: bool;
    let mut _1251: u128;
    let mut _1252: u128;
    let mut _1253: ();
    let _1255: ();
    let mut _1256: &str;
    let _1257: &str;
    let mut _1258: &std::string::String;
    let _1259: &std::string::String;
    let _1260: std::string::String;
    let mut _1262: std::fmt::Arguments<'_>;
    let mut _1263: &[&str];
    let mut _1264: &[&str; 2];
    let _1265: &[&str; 2];
    let _1266: [&str; 2];
    let mut _1267: &[core::fmt::rt::Argument<'_>];
    let mut _1268: &[core::fmt::rt::Argument<'_>; 1];
    let _1269: &[core::fmt::rt::Argument<'_>; 1];
    let _1270: [core::fmt::rt::Argument<'_>; 1];
    let mut _1271: core::fmt::rt::Argument<'_>;
    let mut _1272: &error::ErrorCode;
    let _1273: &error::ErrorCode;
    let _1274: ();
    let mut _1275: &str;
    let _1276: &str;
    let mut _1277: &std::string::String;
    let _1278: &std::string::String;
    let _1279: std::string::String;
    let mut _1281: std::fmt::Arguments<'_>;
    let mut _1282: &[&str];
    let mut _1283: &[&str; 3];
    let _1284: &[&str; 3];
    let _1285: [&str; 3];
    let mut _1286: &[core::fmt::rt::Argument<'_>];
    let mut _1287: &[core::fmt::rt::Argument<'_>; 2];
    let _1288: &[core::fmt::rt::Argument<'_>; 2];
    let _1289: [core::fmt::rt::Argument<'_>; 2];
    let mut _1290: core::fmt::rt::Argument<'_>;
    let mut _1291: &u128;
    let _1292: &u128;
    let mut _1293: core::fmt::rt::Argument<'_>;
    let mut _1294: &u128;
    let _1295: &u128;
    let mut _1296: error::ErrorCode;
    let mut _1297: isize;
    let mut _1299: !;
    let mut _1300: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1302: ();
    let mut _1304: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1306: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1307: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1308: &u16;
    let _1309: &u16;
    let mut _1310: isize;
    let mut _1312: !;
    let mut _1313: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1316: bool;
    let mut _1317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1318: std::result::Result<bool, error::ErrorCode>;
    let mut _1319: &state::state::State;
    let mut _1320: isize;
    let mut _1322: !;
    let mut _1323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1325: &state::perp_market::PerpMarket;
    let _1326: &state::perp_market::PerpMarket;
    let mut _1327: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1328: state::paused_operations::PerpOperation;
    let _1329: bool;
    let mut _1330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1331: std::result::Result<bool, error::ErrorCode>;
    let mut _1332: u16;
    let mut _1333: &mut state::perp_market::PerpMarket;
    let mut _1334: &mut state::perp_market::PerpMarket;
    let mut _1335: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1336: &mut state::oracle_map::OracleMap<'_>;
    let mut _1337: i64;
    let mut _1338: u64;
    let mut _1339: &state::state::OracleGuardRails;
    let _1340: &state::state::OracleGuardRails;
    let mut _1341: bool;
    let mut _1342: std::option::Option<u64>;
    let mut _1343: u64;
    let mut _1344: isize;
    let mut _1346: !;
    let mut _1347: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1349: ();
    let mut _1350: &mut state::user::User;
    let mut _1351: &mut state::user::User;
    let mut _1352: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1353: u64;
    let mut _1354: (u64, u64);
    let mut _1355: u64;
    let mut _1356: u64;
    let mut _1373: &state::state::State;
    let mut _1374: bool;
    let mut _1375: bool;
    let mut _1376: bool;
    let mut _1377: bool;
    let mut _1378: bool;
    let mut _1379: isize;
    let mut _1380: isize;
    let mut _1381: isize;
    let mut _1382: isize;
    let mut _1383: isize;
    let mut _1384: isize;
    let mut _1385: isize;
    let mut _1386: isize;
    let mut _1387: isize;
    let mut _1388: isize;
    let mut _1389: isize;
    let mut _1390: isize;
    let mut _1391: isize;
    let mut _1392: isize;
    let mut _1393: isize;
    let mut _1394: isize;
    let mut _1395: isize;
    let mut _1396: isize;
    let mut _1397: isize;
    let mut _1398: isize;
    let mut _1399: isize;
    let mut _1400: isize;
    let mut _1401: isize;
    let mut _1402: isize;
    let mut _1403: isize;
    let mut _1404: isize;
    let mut _1405: isize;
    let mut _1406: isize;
    let mut _1407: isize;
    let mut _1408: isize;
    let mut _1409: isize;
    let mut _1410: isize;
    let mut _1411: isize;
    let mut _1412: isize;
    let mut _1413: isize;
    let mut _1414: isize;
    let mut _1415: isize;
    let mut _1416: isize;
    let mut _1417: isize;
    let mut _1418: isize;
    let mut _1419: isize;
    let mut _1420: isize;
    let mut _1421: isize;
    let mut _1422: isize;
    let mut _1423: isize;
    let mut _1424: isize;
    let mut _1425: isize;
    let mut _1426: isize;
    let mut _1427: isize;
    let mut _1428: isize;
    let mut _1429: isize;
    let mut _1430: isize;
    let mut _1431: isize;
    let mut _1432: isize;
    let mut _1433: isize;
    let mut _1434: isize;
    let mut _1435: isize;
    let mut _1436: isize;
    let mut _1437: isize;
    let mut _1438: isize;
    let mut _1439: isize;
    let mut _1440: isize;
    let mut _1441: isize;
    let mut _1442: isize;
    let mut _1443: isize;
    let mut _1444: isize;
    let mut _1445: isize;
    let mut _1446: isize;
    let mut _1447: isize;
    let mut _1448: isize;
    let mut _1449: isize;
    let mut _1450: isize;
    let mut _1451: isize;
    let mut _1452: isize;
    let mut _1453: isize;
    let mut _1454: isize;
    let mut _1455: isize;
    scope 1 {
        debug now => _15;
        let _16: u64;
        scope 2 {
            debug slot => _16;
            let _17: anchor_lang::prelude::Pubkey;
            scope 3 {
                debug filler_key => _17;
                let _19: anchor_lang::prelude::Pubkey;
                scope 4 {
                    debug user_key => _19;
                    let _21: &mut std::cell::RefMut<'_, state::user::User>;
                    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _32: std::cell::RefMut<'_, state::user::User>;
                    scope 5 {
                        debug user => _21;
                        let _33: &mut std::cell::RefMut<'_, state::user::UserStats>;
                        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _44: std::cell::RefMut<'_, state::user::UserStats>;
                        scope 10 {
                            debug user_stats => _33;
                            let _45: usize;
                            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _62: usize;
                            scope 15 {
                                debug order_index => _45;
                                let _63: state::user::OrderStatus;
                                let _64: u16;
                                let _65: state::user::MarketType;
                                let _66: u64;
                                let _67: i32;
                                let _68: controller::position::PositionDirection;
                                let _69: u8;
                                scope 20 {
                                    debug order_status => _63;
                                    debug market_index => _64;
                                    debug order_market_type => _65;
                                    debug order_price => _66;
                                    debug order_oracle_price_offset => _67;
                                    debug order_direction => _68;
                                    debug order_auction_duration => _69;
                                    let _121: error::ErrorCode;
                                    let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _149: ();
                                    let mut _150: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                    let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _160: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                    let mut _1372: &state::user::MarketType;
                                    scope 21 {
                                        debug error_code => _121;
                                        let _128: std::string::String;
                                        let mut _1371: &[&str; 2];
                                        scope 22 {
                                            debug res => _128;
                                        }
                                    }
                                    scope 23 {
                                        debug residual => _146;
                                        scope 24 {
                                        }
                                    }
                                    scope 25 {
                                        debug val => _149;
                                        scope 26 {
                                        }
                                    }
                                    scope 27 {
                                        debug market => _150;
                                        let _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _178: ();
                                        let _187: error::ErrorCode;
                                        let _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _224: ();
                                        let _234: error::ErrorCode;
                                        let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _271: ();
                                        let _282: error::ErrorCode;
                                        let _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _310: ();
                                        let _329: error::ErrorCode;
                                        let _354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _357: ();
                                        let _385: u64;
                                        let mut _1366: &state::user::OrderStatus;
                                        scope 32 {
                                            debug residual => _175;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug val => _178;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug error_code => _187;
                                            let _194: std::string::String;
                                            let _213: std::string::String;
                                            let mut _1369: &[&str; 1];
                                            let mut _1370: &[&str; 2];
                                            scope 37 {
                                                debug res => _194;
                                            }
                                            scope 38 {
                                                debug res => _213;
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _221;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _224;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug error_code => _234;
                                            let _241: std::string::String;
                                            let _260: std::string::String;
                                            let mut _1367: &[&str; 1];
                                            let mut _1368: &[&str; 2];
                                            scope 44 {
                                                debug res => _241;
                                            }
                                            scope 45 {
                                                debug res => _260;
                                            }
                                        }
                                        scope 46 {
                                            debug residual => _268;
                                            scope 47 {
                                            }
                                        }
                                        scope 48 {
                                            debug val => _271;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug error_code => _282;
                                            let _289: std::string::String;
                                            let mut _1365: &[&str; 2];
                                            scope 51 {
                                                debug res => _289;
                                            }
                                        }
                                        scope 52 {
                                            debug residual => _307;
                                            scope 53 {
                                            }
                                        }
                                        scope 54 {
                                            debug val => _310;
                                            scope 55 {
                                            }
                                        }
                                        scope 56 {
                                            debug error_code => _329;
                                            let _336: std::string::String;
                                            let mut _1364: &[&str; 2];
                                            scope 57 {
                                                debug res => _336;
                                            }
                                        }
                                        scope 58 {
                                            debug residual => _354;
                                            scope 59 {
                                            }
                                        }
                                        scope 60 {
                                            debug val => _357;
                                            scope 61 {
                                            }
                                        }
                                        scope 62 {
                                            debug reserve_price_before => _385;
                                            let _386: math::oracle::OracleValidity;
                                            scope 63 {
                                                debug safe_oracle_validity => _386;
                                                let _387: i64;
                                                scope 64 {
                                                    debug oracle_price => _387;
                                                    let _388: i64;
                                                    scope 65 {
                                                        debug oracle_twap_5min => _388;
                                                        let _389: u16;
                                                        scope 66 {
                                                            debug perp_market_index => _389;
                                                            let _390: bool;
                                                            scope 67 {
                                                                debug user_can_skip_duration => _390;
                                                                let _391: bool;
                                                                scope 68 {
                                                                    debug amm_can_skip_duration => _391;
                                                                    let _392: bool;
                                                                    scope 69 {
                                                                        debug amm_has_low_enough_inventory => _392;
                                                                        let _393: bool;
                                                                        scope 70 {
                                                                            debug oracle_valid_for_amm_fill => _393;
                                                                            let _394: bool;
                                                                            scope 71 {
                                                                                debug oracle_stale_for_margin => _394;
                                                                                let _395: u8;
                                                                                scope 72 {
                                                                                    debug min_auction_duration => _395;
                                                                                    let mut _396: bool;
                                                                                    let _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _405: bool;
                                                                                    scope 73 {
                                                                                        debug amm_is_available => _396;
                                                                                        let _407: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                        let _415: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _418: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                        let _665: std::option::Option<i64>;
                                                                                        let _673: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _676: bool;
                                                                                        let _684: std::string::String;
                                                                                        let mut _1361: &[&str; 2];
                                                                                        scope 78 {
                                                                                            debug market => _407;
                                                                                            let _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _429: ();
                                                                                            let _439: error::ErrorCode;
                                                                                            let _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _476: ();
                                                                                            let _477: &state::oracle::OraclePriceData;
                                                                                            let _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _491: &state::oracle::OraclePriceData;
                                                                                            scope 83 {
                                                                                                debug residual => _426;
                                                                                                scope 84 {
                                                                                                }
                                                                                            }
                                                                                            scope 85 {
                                                                                                debug val => _429;
                                                                                                scope 86 {
                                                                                                }
                                                                                            }
                                                                                            scope 87 {
                                                                                                debug error_code => _439;
                                                                                                let _446: std::string::String;
                                                                                                let _465: std::string::String;
                                                                                                let mut _1362: &[&str; 1];
                                                                                                let mut _1363: &[&str; 2];
                                                                                                scope 88 {
                                                                                                    debug res => _446;
                                                                                                }
                                                                                                scope 89 {
                                                                                                    debug res => _465;
                                                                                                }
                                                                                            }
                                                                                            scope 90 {
                                                                                                debug residual => _473;
                                                                                                scope 91 {
                                                                                                }
                                                                                            }
                                                                                            scope 92 {
                                                                                                debug val => _476;
                                                                                                scope 93 {
                                                                                                }
                                                                                            }
                                                                                            scope 94 {
                                                                                                debug oracle_price_data => _477;
                                                                                                let _492: state::oracle::MMOraclePriceData;
                                                                                                let _503: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _506: state::oracle::MMOraclePriceData;
                                                                                                scope 99 {
                                                                                                    debug mm_oracle_price_data => _492;
                                                                                                    let _507: state::oracle::OraclePriceData;
                                                                                                    scope 104 {
                                                                                                        debug safe_oracle_price_data => _507;
                                                                                                        let _530: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _533: u64;
                                                                                                        let _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _546: math::oracle::OracleValidity;
                                                                                                        let _554: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _557: bool;
                                                                                                        let _576: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _579: bool;
                                                                                                        let _580: bool;
                                                                                                        let _585: bool;
                                                                                                        scope 105 {
                                                                                                            debug residual => _530;
                                                                                                            scope 106 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 107 {
                                                                                                            debug val => _533;
                                                                                                            scope 108 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 109 {
                                                                                                            debug residual => _543;
                                                                                                            scope 110 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 111 {
                                                                                                            debug val => _546;
                                                                                                            scope 112 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 113 {
                                                                                                            debug residual => _554;
                                                                                                            scope 114 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 115 {
                                                                                                            debug val => _557;
                                                                                                            scope 116 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 117 {
                                                                                                            debug residual => _576;
                                                                                                            scope 118 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 119 {
                                                                                                            debug val => _579;
                                                                                                            scope 120 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 121 {
                                                                                                            debug amm_available_mm_oracle_recent_but_volatile => _580;
                                                                                                            let _589: bool;
                                                                                                            let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _600: bool;
                                                                                                            scope 123 {
                                                                                                                debug amm_wants_to_jit_make => _589;
                                                                                                                let _609: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _612: bool;
                                                                                                                let _623: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _626: bool;
                                                                                                                let _637: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _640: bool;
                                                                                                                let _648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _651: u64;
                                                                                                                scope 128 {
                                                                                                                    debug residual => _609;
                                                                                                                    scope 129 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 130 {
                                                                                                                    debug val => _612;
                                                                                                                    scope 131 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 132 {
                                                                                                                    debug residual => _623;
                                                                                                                    scope 133 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 134 {
                                                                                                                    debug val => _626;
                                                                                                                    scope 135 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 136 {
                                                                                                                    debug residual => _637;
                                                                                                                    scope 137 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 138 {
                                                                                                                    debug val => _640;
                                                                                                                    scope 139 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 140 {
                                                                                                                    debug residual => _648;
                                                                                                                    scope 141 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 142 {
                                                                                                                    debug val => _651;
                                                                                                                    scope 143 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 124 {
                                                                                                                debug residual => _597;
                                                                                                                scope 125 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 126 {
                                                                                                                debug val => _600;
                                                                                                                scope 127 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 122 {
                                                                                                            debug amm_available => _585;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 100 {
                                                                                                    debug residual => _503;
                                                                                                    scope 101 {
                                                                                                    }
                                                                                                }
                                                                                                scope 102 {
                                                                                                    debug val => _506;
                                                                                                    scope 103 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 95 {
                                                                                                debug residual => _488;
                                                                                                scope 96 {
                                                                                                }
                                                                                            }
                                                                                            scope 97 {
                                                                                                debug val => _491;
                                                                                                scope 98 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 79 {
                                                                                            debug residual => _415;
                                                                                            scope 80 {
                                                                                            }
                                                                                        }
                                                                                        scope 81 {
                                                                                            debug val => _418;
                                                                                            scope 82 {
                                                                                            }
                                                                                        }
                                                                                        scope 144 {
                                                                                            debug valid_oracle_price => _665;
                                                                                            let _697: bool;
                                                                                            scope 150 {
                                                                                                debug is_filler_taker => _697;
                                                                                                let _700: bool;
                                                                                                scope 151 {
                                                                                                    debug is_filler_maker => _700;
                                                                                                    let mut _704: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
                                                                                                    let mut _705: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                                                                                    let _709: std::cell::RefMut<'_, state::user::User>;
                                                                                                    let _716: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _719: std::cell::RefMut<'_, state::user::User>;
                                                                                                    scope 152 {
                                                                                                        debug filler => _704;
                                                                                                        debug filler_stats => _705;
                                                                                                        let _800: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
                                                                                                        let _831: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _834: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
                                                                                                        scope 169 {
                                                                                                            debug maker_orders_info => _800;
                                                                                                            let _835: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
                                                                                                            let _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _852: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
                                                                                                            scope 174 {
                                                                                                                debug referrer_info => _835;
                                                                                                                let _853: bool;
                                                                                                                let _864: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _867: i64;
                                                                                                                let _869: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _872: bool;
                                                                                                                scope 179 {
                                                                                                                    debug oracle_too_divergent_with_twap_5min => _853;
                                                                                                                    let _894: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _897: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                    let _900: bool;
                                                                                                                    let _909: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _912: bool;
                                                                                                                    scope 188 {
                                                                                                                        debug filler => _879;
                                                                                                                        let _879: &mut state::user::User;
                                                                                                                    }
                                                                                                                    scope 189 {
                                                                                                                        debug residual => _894;
                                                                                                                        scope 190 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 191 {
                                                                                                                        debug val => _897;
                                                                                                                        scope 192 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 193 {
                                                                                                                        debug should_expire_order => _900;
                                                                                                                        let _913: usize;
                                                                                                                        let _927: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _930: usize;
                                                                                                                        scope 198 {
                                                                                                                            debug position_index => _913;
                                                                                                                            let _931: i64;
                                                                                                                            scope 203 {
                                                                                                                                debug existing_base_asset_amount => _931;
                                                                                                                                let _937: bool;
                                                                                                                                let _958: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _961: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                let _963: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _966: bool;
                                                                                                                                scope 204 {
                                                                                                                                    debug should_cancel_reduce_only => _937;
                                                                                                                                    let _971: u64;
                                                                                                                                    let mut _972: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                    let _979: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _982: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                    let _1027: state::perp_market::AMMAvailability;
                                                                                                                                    scope 213 {
                                                                                                                                        debug filler_reward => _971;
                                                                                                                                        let _1000: state::events::OrderActionExplanation;
                                                                                                                                        scope 223 {
                                                                                                                                            debug explanation => _1000;
                                                                                                                                            let _1022: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1025: ();
                                                                                                                                            scope 224 {
                                                                                                                                                debug residual => _1022;
                                                                                                                                                scope 225 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 226 {
                                                                                                                                                debug val => _1025;
                                                                                                                                                scope 227 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 214 {
                                                                                                                                        debug market => _972;
                                                                                                                                        let _996: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _999: u64;
                                                                                                                                        scope 219 {
                                                                                                                                            debug residual => _996;
                                                                                                                                            scope 220 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 221 {
                                                                                                                                            debug val => _999;
                                                                                                                                            scope 222 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 215 {
                                                                                                                                        debug residual => _979;
                                                                                                                                        scope 216 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 217 {
                                                                                                                                        debug val => _982;
                                                                                                                                        scope 218 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 228 {
                                                                                                                                        debug amm_availability => _1027;
                                                                                                                                        let _1031: u64;
                                                                                                                                        let _1032: u64;
                                                                                                                                        let _1076: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1079: (u64, u64);
                                                                                                                                        scope 229 {
                                                                                                                                            debug base_asset_amount => _1031;
                                                                                                                                            debug quote_asset_amount => _1032;
                                                                                                                                            let _1083: u64;
                                                                                                                                            let _1089: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1092: u64;
                                                                                                                                            let _1128: i64;
                                                                                                                                            scope 234 {
                                                                                                                                                debug fill_price => _1083;
                                                                                                                                                let mut _1093: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                let _1100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1103: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                scope 239 {
                                                                                                                                                    debug perp_market => _1093;
                                                                                                                                                    let _1121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1124: ();
                                                                                                                                                    scope 244 {
                                                                                                                                                        debug residual => _1121;
                                                                                                                                                        scope 245 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 246 {
                                                                                                                                                        debug val => _1124;
                                                                                                                                                        scope 247 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 240 {
                                                                                                                                                    debug residual => _1100;
                                                                                                                                                    scope 241 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 242 {
                                                                                                                                                    debug val => _1103;
                                                                                                                                                    scope 243 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 235 {
                                                                                                                                                debug residual => _1089;
                                                                                                                                                scope 236 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 237 {
                                                                                                                                                debug val => _1092;
                                                                                                                                                scope 238 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 248 {
                                                                                                                                                debug base_asset_amount_after => _1128;
                                                                                                                                                let _1134: bool;
                                                                                                                                                let _1155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1158: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                let _1160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1163: bool;
                                                                                                                                                scope 249 {
                                                                                                                                                    debug should_cancel_reduce_only => _1134;
                                                                                                                                                    let _1166: u64;
                                                                                                                                                    let mut _1167: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                    let _1174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1177: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                    let _1227: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                    let _1234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1237: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                    let _1303: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                    let _1311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1314: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                    scope 258 {
                                                                                                                                                        debug filler_reward => _1166;
                                                                                                                                                        let _1195: state::events::OrderActionExplanation;
                                                                                                                                                        scope 268 {
                                                                                                                                                            debug explanation => _1195;
                                                                                                                                                            let _1215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                            let _1218: ();
                                                                                                                                                            scope 269 {
                                                                                                                                                                debug residual => _1215;
                                                                                                                                                                scope 270 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 271 {
                                                                                                                                                                debug val => _1218;
                                                                                                                                                                scope 272 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 259 {
                                                                                                                                                        debug market => _1167;
                                                                                                                                                        let _1191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1194: u64;
                                                                                                                                                        scope 264 {
                                                                                                                                                            debug residual => _1191;
                                                                                                                                                            scope 265 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 266 {
                                                                                                                                                            debug val => _1194;
                                                                                                                                                            scope 267 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 260 {
                                                                                                                                                        debug residual => _1174;
                                                                                                                                                        scope 261 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 262 {
                                                                                                                                                        debug val => _1177;
                                                                                                                                                        scope 263 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 273 {
                                                                                                                                                        debug market => _1227;
                                                                                                                                                        let _1238: u128;
                                                                                                                                                        scope 278 {
                                                                                                                                                            debug open_interest => _1238;
                                                                                                                                                            let _1242: u128;
                                                                                                                                                            scope 279 {
                                                                                                                                                                debug max_open_interest => _1242;
                                                                                                                                                                let _1254: error::ErrorCode;
                                                                                                                                                                let _1298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1301: ();
                                                                                                                                                                scope 280 {
                                                                                                                                                                    debug error_code => _1254;
                                                                                                                                                                    let _1261: std::string::String;
                                                                                                                                                                    let _1280: std::string::String;
                                                                                                                                                                    let mut _1357: &[&str; 3];
                                                                                                                                                                    let mut _1358: &[&str; 2];
                                                                                                                                                                    scope 281 {
                                                                                                                                                                        debug res => _1261;
                                                                                                                                                                    }
                                                                                                                                                                    scope 282 {
                                                                                                                                                                        debug res => _1280;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 283 {
                                                                                                                                                                    debug residual => _1298;
                                                                                                                                                                    scope 284 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 285 {
                                                                                                                                                                    debug val => _1301;
                                                                                                                                                                    scope 286 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 274 {
                                                                                                                                                        debug residual => _1234;
                                                                                                                                                        scope 275 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 276 {
                                                                                                                                                        debug val => _1237;
                                                                                                                                                        scope 277 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 287 {
                                                                                                                                                        debug market => _1303;
                                                                                                                                                        let _1315: bool;
                                                                                                                                                        let _1321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1324: bool;
                                                                                                                                                        scope 292 {
                                                                                                                                                            debug funding_paused => _1315;
                                                                                                                                                            let _1345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                            let _1348: bool;
                                                                                                                                                            scope 297 {
                                                                                                                                                                debug residual => _1345;
                                                                                                                                                                scope 298 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 299 {
                                                                                                                                                                debug val => _1348;
                                                                                                                                                                scope 300 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 293 {
                                                                                                                                                            debug residual => _1321;
                                                                                                                                                            scope 294 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 295 {
                                                                                                                                                            debug val => _1324;
                                                                                                                                                            scope 296 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 288 {
                                                                                                                                                        debug residual => _1311;
                                                                                                                                                        scope 289 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 290 {
                                                                                                                                                        debug val => _1314;
                                                                                                                                                        scope 291 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 250 {
                                                                                                                                                    debug residual => _1155;
                                                                                                                                                    scope 251 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 252 {
                                                                                                                                                    debug val => _1158;
                                                                                                                                                    scope 253 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 254 {
                                                                                                                                                    debug residual => _1160;
                                                                                                                                                    scope 255 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 256 {
                                                                                                                                                    debug val => _1163;
                                                                                                                                                    scope 257 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 230 {
                                                                                                                                            debug residual => _1076;
                                                                                                                                            scope 231 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 232 {
                                                                                                                                            debug val => _1079;
                                                                                                                                            scope 233 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 205 {
                                                                                                                                    debug residual => _958;
                                                                                                                                    scope 206 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 207 {
                                                                                                                                    debug val => _961;
                                                                                                                                    scope 208 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 209 {
                                                                                                                                    debug residual => _963;
                                                                                                                                    scope 210 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 211 {
                                                                                                                                    debug val => _966;
                                                                                                                                    scope 212 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 199 {
                                                                                                                            debug residual => _927;
                                                                                                                            scope 200 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 201 {
                                                                                                                            debug val => _930;
                                                                                                                            scope 202 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 194 {
                                                                                                                        debug residual => _909;
                                                                                                                        scope 195 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 196 {
                                                                                                                        debug val => _912;
                                                                                                                        scope 197 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 180 {
                                                                                                                    debug residual => _864;
                                                                                                                    scope 181 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 182 {
                                                                                                                    debug val => _867;
                                                                                                                    scope 183 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 184 {
                                                                                                                    debug residual => _869;
                                                                                                                    scope 185 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 186 {
                                                                                                                    debug val => _872;
                                                                                                                    scope 187 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 175 {
                                                                                                                debug residual => _849;
                                                                                                                scope 176 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 177 {
                                                                                                                debug val => _852;
                                                                                                                scope 178 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 170 {
                                                                                                            debug residual => _831;
                                                                                                            scope 171 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 172 {
                                                                                                            debug val => _834;
                                                                                                            scope 173 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 153 {
                                                                                                        debug filler => _709;
                                                                                                        let _728: error::ErrorCode;
                                                                                                        let _771: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _774: ();
                                                                                                        let _792: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _795: std::cell::RefMut<'_, state::user::UserStats>;
                                                                                                        scope 158 {
                                                                                                            debug error_code => _728;
                                                                                                            let _735: std::string::String;
                                                                                                            let _754: std::string::String;
                                                                                                            let mut _1359: &[&str; 2];
                                                                                                            let mut _1360: &[&str; 2];
                                                                                                            scope 159 {
                                                                                                                debug res => _735;
                                                                                                            }
                                                                                                            scope 160 {
                                                                                                                debug res => _754;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 161 {
                                                                                                            debug residual => _771;
                                                                                                            scope 162 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 163 {
                                                                                                            debug val => _774;
                                                                                                            scope 164 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 165 {
                                                                                                            debug residual => _792;
                                                                                                            scope 166 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 167 {
                                                                                                            debug val => _795;
                                                                                                            scope 168 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 154 {
                                                                                                        debug residual => _716;
                                                                                                        scope 155 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 156 {
                                                                                                        debug val => _719;
                                                                                                        scope 157 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 145 {
                                                                                            debug residual => _673;
                                                                                            scope 146 {
                                                                                            }
                                                                                        }
                                                                                        scope 147 {
                                                                                            debug val => _676;
                                                                                            scope 148 {
                                                                                            }
                                                                                        }
                                                                                        scope 149 {
                                                                                            debug res => _684;
                                                                                        }
                                                                                    }
                                                                                    scope 74 {
                                                                                        debug residual => _402;
                                                                                        scope 75 {
                                                                                        }
                                                                                    }
                                                                                    scope 76 {
                                                                                        debug val => _405;
                                                                                        scope 77 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 28 {
                                        debug residual => _157;
                                        scope 29 {
                                        }
                                    }
                                    scope 30 {
                                        debug val => _160;
                                        scope 31 {
                                        }
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _59;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _62;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _41;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _44;
                            scope 14 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _29;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _32;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1377 = const false;
        _1374 = const false;
        _1378 = const false;
        _1376 = const false;
        _1375 = const false;
        StorageLive(_15);
        _15 = ((*_13).4: i64);
        StorageLive(_16);
        _16 = ((*_13).0: u64);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_8);
        _17 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_3);
        _19 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_3);
        _25 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        StorageLive(_27);
        _27 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _24 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _25, move _27) -> [return: bb4, unwind: bb658];
    }

    bb4: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _24) -> [return: bb5, unwind: bb658];
    }

    bb5: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_32);
        _32 = move ((_23 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _22 = move _32;
        StorageDead(_32);
        _21 = &mut _22;
        _1381 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_4);
        _37 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _38) -> [return: bb10, unwind: bb657];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_29);
        _29 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb9, unwind: bb688];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_29);
        _1379 = discriminant(_23);
        StorageDead(_23);
        goto -> bb626;
    }

    bb10: {
        StorageDead(_38);
        StorageLive(_39);
        _39 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _36 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _37, move _39) -> [return: bb11, unwind: bb657];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_37);
        _35 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _36) -> [return: bb12, unwind: bb657];
    }

    bb12: {
        StorageDead(_36);
        _40 = discriminant(_35);
        switchInt(move _40) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_44);
        _44 = move ((_35 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _34 = move _44;
        StorageDead(_44);
        _33 = &mut _34;
        _1385 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_21);
        _53 = <RefMut<'_, User> as Deref>::deref(move _54) -> [return: bb16, unwind: bb656];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb15, unwind: bb687];
    }

    bb15: {
        StorageDead(_43);
        StorageDead(_41);
        _1383 = discriminant(_35);
        StorageDead(_35);
        goto -> bb625;
    }

    bb16: {
        StorageDead(_54);
        _52 = &((*_53).5: [state::user::Order; 32]);
        _51 = move _52 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_52);
        _50 = core::slice::<impl [Order]>::iter(move _51) -> [return: bb17, unwind: bb656];
    }

    bb17: {
        _49 = &mut _50;
        StorageDead(_51);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_1;
        _55 = {closure@programs/drift/src/controller/orders.rs:985:19: 985:26} { order_id: move _56 };
        StorageDead(_56);
        _48 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:985:19: 985:26}>(move _49, move _55) -> [return: bb18, unwind: bb656];
    }

    bb18: {
        StorageDead(_55);
        StorageDead(_49);
        StorageLive(_57);
        _57 = {closure@programs/drift/src/error.rs:647:9: 647:11};
        _47 = Option::<usize>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:647:9: 647:11}>(move _48, move _57) -> [return: bb19, unwind: bb656];
    }

    bb19: {
        StorageDead(_57);
        StorageDead(_48);
        _46 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _47) -> [return: bb20, unwind: bb656];
    }

    bb20: {
        StorageDead(_47);
        _58 = discriminant(_46);
        switchInt(move _58) -> [0: bb21, 1: bb22, otherwise: bb7];
    }

    bb21: {
        StorageLive(_62);
        _62 = ((_46 as Continue).0: usize);
        _45 = _62;
        StorageDead(_62);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_21);
        _72 = <RefMut<'_, User> as Deref>::deref(move _73) -> [return: bb24, unwind: bb656];
    }

    bb22: {
        StorageLive(_59);
        _59 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb23, unwind: bb656];
    }

    bb23: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_46);
        goto -> bb624;
    }

    bb24: {
        StorageDead(_73);
        StorageLive(_74);
        _74 = _45;
        _75 = Len(((*_72).5: [state::user::Order; 32]));
        _76 = Lt(_74, _75);
        assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _74) -> [success: bb25, unwind: bb656];
    }

    bb25: {
        _71 = (((*_72).5: [state::user::Order; 32])[_74].12: state::user::OrderStatus);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &(*_21);
        _78 = <RefMut<'_, User> as Deref>::deref(move _79) -> [return: bb26, unwind: bb656];
    }

    bb26: {
        StorageDead(_79);
        StorageLive(_80);
        _80 = _45;
        _81 = Len(((*_78).5: [state::user::Order; 32]));
        _82 = Lt(_80, _81);
        assert(move _82, "index out of bounds: the length is {} but the index is {}", move _81, _80) -> [success: bb27, unwind: bb656];
    }

    bb27: {
        _77 = (((*_78).5: [state::user::Order; 32])[_80].11: u16);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_21);
        _84 = <RefMut<'_, User> as Deref>::deref(move _85) -> [return: bb28, unwind: bb656];
    }

    bb28: {
        StorageDead(_85);
        StorageLive(_86);
        _86 = _45;
        _87 = Len(((*_84).5: [state::user::Order; 32]));
        _88 = Lt(_86, _87);
        assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _86) -> [success: bb29, unwind: bb656];
    }

    bb29: {
        _83 = (((*_84).5: [state::user::Order; 32])[_86].14: state::user::MarketType);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_21);
        _90 = <RefMut<'_, User> as Deref>::deref(move _91) -> [return: bb30, unwind: bb656];
    }

    bb30: {
        StorageDead(_91);
        StorageLive(_92);
        _92 = _45;
        _93 = Len(((*_90).5: [state::user::Order; 32]));
        _94 = Lt(_92, _93);
        assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _92) -> [success: bb31, unwind: bb656];
    }

    bb31: {
        _89 = (((*_90).5: [state::user::Order; 32])[_92].1: u64);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_21);
        _96 = <RefMut<'_, User> as Deref>::deref(move _97) -> [return: bb32, unwind: bb656];
    }

    bb32: {
        StorageDead(_97);
        StorageLive(_98);
        _98 = _45;
        _99 = Len(((*_96).5: [state::user::Order; 32]));
        _100 = Lt(_98, _99);
        assert(move _100, "index out of bounds: the length is {} but the index is {}", move _99, _98) -> [success: bb33, unwind: bb656];
    }

    bb33: {
        _95 = (((*_96).5: [state::user::Order; 32])[_98].9: i32);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_21);
        _102 = <RefMut<'_, User> as Deref>::deref(move _103) -> [return: bb34, unwind: bb656];
    }

    bb34: {
        StorageDead(_103);
        StorageLive(_104);
        _104 = _45;
        _105 = Len(((*_102).5: [state::user::Order; 32]));
        _106 = Lt(_104, _105);
        assert(move _106, "index out of bounds: the length is {} but the index is {}", move _105, _104) -> [success: bb35, unwind: bb656];
    }

    bb35: {
        _101 = (((*_102).5: [state::user::Order; 32])[_104].17: controller::position::PositionDirection);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_21);
        _108 = <RefMut<'_, User> as Deref>::deref(move _109) -> [return: bb36, unwind: bb656];
    }

    bb36: {
        StorageDead(_109);
        StorageLive(_110);
        _110 = _45;
        _111 = Len(((*_108).5: [state::user::Order; 32]));
        _112 = Lt(_110, _111);
        assert(move _112, "index out of bounds: the length is {} but the index is {}", move _111, _110) -> [success: bb37, unwind: bb656];
    }

    bb37: {
        _107 = (((*_108).5: [state::user::Order; 32])[_110].22: u8);
        _70 = (move _71, move _77, move _83, move _89, move _95, move _101, move _107);
        StorageDead(_107);
        StorageDead(_101);
        StorageDead(_95);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_71);
        StorageLive(_63);
        _63 = (_70.0: state::user::OrderStatus);
        StorageLive(_64);
        _64 = (_70.1: u16);
        StorageLive(_65);
        _65 = (_70.2: state::user::MarketType);
        StorageLive(_66);
        _66 = (_70.3: u64);
        StorageLive(_67);
        _67 = (_70.4: i32);
        StorageLive(_68);
        _68 = (_70.5: controller::position::PositionDirection);
        StorageLive(_69);
        _69 = (_70.6: u8);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_65;
        StorageLive(_118);
        _1372 = const _;
        _118 = &(*_1372);
        _116 = <state::user::MarketType as PartialEq>::eq(move _117, move _118) -> [return: bb38, unwind: bb656];
    }

    bb38: {
        switchInt(move _116) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_120);
        _120 = ();
        _115 = std::result::Result::<(), error::ErrorCode>::Ok(move _120);
        StorageDead(_120);
        goto -> bb48;
    }

    bb40: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_121);
        _121 = error::ErrorCode::InvalidOrderMarketType;
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _1371 = const _;
        _132 = &(*_1371);
        _131 = &(*_132);
        _130 = move _131 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_131);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_121;
        _139 = &(*_140);
        _138 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _139) -> [return: bb41, unwind: bb656];
    }

    bb41: {
        StorageDead(_139);
        _137 = [move _138];
        StorageDead(_138);
        _136 = &_137;
        _135 = &(*_136);
        _134 = move _135 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_135);
        _129 = Arguments::<'_>::new_v1(move _130, move _134) -> [return: bb42, unwind: bb656];
    }

    bb42: {
        StorageDead(_134);
        StorageDead(_130);
        _128 = format(move _129) -> [return: bb43, unwind: bb656];
    }

    bb43: {
        StorageDead(_129);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_132);
        _127 = move _128;
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = <String as Deref>::deref(move _125) -> [return: bb44, unwind: bb655];
    }

    bb44: {
        _123 = &(*_124);
        StorageDead(_125);
        _122 = solana_program::log::sol_log(move _123) -> [return: bb45, unwind: bb655];
    }

    bb45: {
        StorageDead(_123);
        drop(_127) -> [return: bb46, unwind: bb656];
    }

    bb46: {
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_122);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = const "must be perp order";
        _142 = &(*_143);
        _141 = solana_program::log::sol_log(move _142) -> [return: bb47, unwind: bb656];
    }

    bb47: {
        StorageDead(_142);
        StorageDead(_143);
        StorageDead(_141);
        StorageLive(_144);
        _144 = _121;
        _115 = std::result::Result::<(), error::ErrorCode>::Err(move _144);
        StorageDead(_144);
        StorageDead(_121);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_116);
        _114 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _115) -> [return: bb49, unwind: bb656];
    }

    bb49: {
        StorageDead(_115);
        _145 = discriminant(_114);
        switchInt(move _145) -> [0: bb50, 1: bb51, otherwise: bb7];
    }

    bb50: {
        StorageLive(_149);
        _149 = ((_114 as Continue).0: ());
        _113 = _149;
        StorageDead(_149);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &(*_6);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_64;
        _154 = &(*_155);
        _152 = PerpMarketMap::<'_>::get_ref_mut(move _153, move _154) -> [return: bb53, unwind: bb656];
    }

    bb51: {
        StorageLive(_146);
        _146 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb52, unwind: bb656];
    }

    bb52: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb623;
    }

    bb53: {
        StorageDead(_154);
        StorageDead(_153);
        _151 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _152) -> [return: bb54, unwind: bb656];
    }

    bb54: {
        StorageDead(_152);
        _156 = discriminant(_151);
        switchInt(move _156) -> [0: bb55, 1: bb56, otherwise: bb7];
    }

    bb55: {
        StorageLive(_160);
        _160 = move ((_151 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1377 = const true;
        _150 = move _160;
        StorageDead(_160);
        _1389 = discriminant(_151);
        StorageDead(_155);
        StorageDead(_151);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &mut (*_21);
        _165 = <RefMut<'_, User> as DerefMut>::deref_mut(move _166) -> [return: bb58, unwind: bb685];
    }

    bb56: {
        StorageLive(_157);
        _157 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb57, unwind: bb686];
    }

    bb57: {
        StorageDead(_159);
        StorageDead(_157);
        _1387 = discriminant(_151);
        StorageDead(_155);
        StorageDead(_151);
        goto -> bb622;
    }

    bb58: {
        _164 = &mut (*_165);
        StorageDead(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_19;
        _167 = &(*_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &mut _150;
        _171 = &mut (*_172);
        _170 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _171) -> [return: bb59, unwind: bb685];
    }

    bb59: {
        _169 = &mut (*_170);
        StorageDead(_171);
        StorageLive(_173);
        _173 = _15;
        _163 = controller::funding::settle_funding_payment(move _164, move _167, move _169, move _173) -> [return: bb60, unwind: bb685];
    }

    bb60: {
        StorageDead(_173);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_164);
        _162 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _163) -> [return: bb61, unwind: bb685];
    }

    bb61: {
        StorageDead(_163);
        _174 = discriminant(_162);
        switchInt(move _174) -> [0: bb62, 1: bb63, otherwise: bb7];
    }

    bb62: {
        StorageLive(_178);
        _178 = ((_162 as Continue).0: ());
        _161 = _178;
        StorageDead(_178);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_150;
        _183 = <RefMut<'_, PerpMarket> as Deref>::deref(move _184) -> [return: bb65, unwind: bb685];
    }

    bb63: {
        StorageLive(_175);
        _175 = ((_162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_177);
        _177 = _175;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _177) -> [return: bb64, unwind: bb685];
    }

    bb64: {
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb669;
    }

    bb65: {
        StorageDead(_184);
        _185 = discriminant(((*_183).22: state::perp_market::MarketStatus));
        switchInt(move _185) -> [1: bb67, 6: bb67, otherwise: bb66];
    }

    bb66: {
        _182 = const false;
        goto -> bb68;
    }

    bb67: {
        _182 = const true;
        goto -> bb68;
    }

    bb68: {
        switchInt(move _182) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        StorageDead(_183);
        StorageLive(_186);
        _186 = ();
        _181 = std::result::Result::<(), error::ErrorCode>::Ok(move _186);
        StorageDead(_186);
        goto -> bb82;
    }

    bb70: {
        StorageDead(_183);
        StorageLive(_187);
        _187 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _1370 = const _;
        _198 = &(*_1370);
        _197 = &(*_198);
        _196 = move _197 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_197);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_187;
        _205 = &(*_206);
        _204 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _205) -> [return: bb71, unwind: bb685];
    }

    bb71: {
        StorageDead(_205);
        _203 = [move _204];
        StorageDead(_204);
        _202 = &_203;
        _201 = &(*_202);
        _200 = move _201 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_201);
        _195 = Arguments::<'_>::new_v1(move _196, move _200) -> [return: bb72, unwind: bb685];
    }

    bb72: {
        StorageDead(_200);
        StorageDead(_196);
        _194 = format(move _195) -> [return: bb73, unwind: bb685];
    }

    bb73: {
        StorageDead(_195);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_198);
        _193 = move _194;
        StorageDead(_194);
        _192 = &_193;
        _191 = &(*_192);
        _190 = <String as Deref>::deref(move _191) -> [return: bb74, unwind: bb654];
    }

    bb74: {
        _189 = &(*_190);
        StorageDead(_191);
        _188 = solana_program::log::sol_log(move _189) -> [return: bb75, unwind: bb654];
    }

    bb75: {
        StorageDead(_189);
        drop(_193) -> [return: bb76, unwind: bb685];
    }

    bb76: {
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _1369 = const _;
        _217 = &(*_1369);
        _216 = &(*_217);
        _215 = move _216 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_216);
        _214 = Arguments::<'_>::new_const(move _215) -> [return: bb77, unwind: bb685];
    }

    bb77: {
        StorageDead(_215);
        _213 = format(move _214) -> [return: bb78, unwind: bb685];
    }

    bb78: {
        StorageDead(_214);
        StorageDead(_217);
        _212 = move _213;
        StorageDead(_213);
        _211 = &_212;
        _210 = &(*_211);
        _209 = <String as Deref>::deref(move _210) -> [return: bb79, unwind: bb653];
    }

    bb79: {
        _208 = &(*_209);
        StorageDead(_210);
        _207 = solana_program::log::sol_log(move _208) -> [return: bb80, unwind: bb653];
    }

    bb80: {
        StorageDead(_208);
        drop(_212) -> [return: bb81, unwind: bb685];
    }

    bb81: {
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_207);
        StorageLive(_219);
        _219 = _187;
        _181 = std::result::Result::<(), error::ErrorCode>::Err(move _219);
        StorageDead(_219);
        StorageDead(_187);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_182);
        _180 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _181) -> [return: bb83, unwind: bb685];
    }

    bb83: {
        StorageDead(_181);
        _220 = discriminant(_180);
        switchInt(move _220) -> [0: bb84, 1: bb85, otherwise: bb7];
    }

    bb84: {
        StorageLive(_224);
        _224 = ((_180 as Continue).0: ());
        _179 = _224;
        StorageDead(_224);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_150;
        _230 = <RefMut<'_, PerpMarket> as Deref>::deref(move _231) -> [return: bb87, unwind: bb685];
    }

    bb85: {
        StorageLive(_221);
        _221 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_223);
        _223 = _221;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _223) -> [return: bb86, unwind: bb685];
    }

    bb86: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb669;
    }

    bb87: {
        _229 = &(*_230);
        StorageDead(_231);
        StorageLive(_232);
        _232 = PerpOperation::Fill;
        _228 = PerpMarket::is_operation_paused(move _229, move _232) -> [return: bb88, unwind: bb685];
    }

    bb88: {
        switchInt(move _228) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_230);
        StorageLive(_234);
        _234 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _1368 = const _;
        _245 = &(*_1368);
        _244 = &(*_245);
        _243 = move _244 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_244);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_234;
        _252 = &(*_253);
        _251 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _252) -> [return: bb91, unwind: bb685];
    }

    bb90: {
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_230);
        StorageLive(_233);
        _233 = ();
        _227 = std::result::Result::<(), error::ErrorCode>::Ok(move _233);
        StorageDead(_233);
        goto -> bb102;
    }

    bb91: {
        StorageDead(_252);
        _250 = [move _251];
        StorageDead(_251);
        _249 = &_250;
        _248 = &(*_249);
        _247 = move _248 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_248);
        _242 = Arguments::<'_>::new_v1(move _243, move _247) -> [return: bb92, unwind: bb685];
    }

    bb92: {
        StorageDead(_247);
        StorageDead(_243);
        _241 = format(move _242) -> [return: bb93, unwind: bb685];
    }

    bb93: {
        StorageDead(_242);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_245);
        _240 = move _241;
        StorageDead(_241);
        _239 = &_240;
        _238 = &(*_239);
        _237 = <String as Deref>::deref(move _238) -> [return: bb94, unwind: bb652];
    }

    bb94: {
        _236 = &(*_237);
        StorageDead(_238);
        _235 = solana_program::log::sol_log(move _236) -> [return: bb95, unwind: bb652];
    }

    bb95: {
        StorageDead(_236);
        drop(_240) -> [return: bb96, unwind: bb685];
    }

    bb96: {
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_235);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _1367 = const _;
        _264 = &(*_1367);
        _263 = &(*_264);
        _262 = move _263 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_263);
        _261 = Arguments::<'_>::new_const(move _262) -> [return: bb97, unwind: bb685];
    }

    bb97: {
        StorageDead(_262);
        _260 = format(move _261) -> [return: bb98, unwind: bb685];
    }

    bb98: {
        StorageDead(_261);
        StorageDead(_264);
        _259 = move _260;
        StorageDead(_260);
        _258 = &_259;
        _257 = &(*_258);
        _256 = <String as Deref>::deref(move _257) -> [return: bb99, unwind: bb651];
    }

    bb99: {
        _255 = &(*_256);
        StorageDead(_257);
        _254 = solana_program::log::sol_log(move _255) -> [return: bb100, unwind: bb651];
    }

    bb100: {
        StorageDead(_255);
        drop(_259) -> [return: bb101, unwind: bb685];
    }

    bb101: {
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_254);
        StorageLive(_266);
        _266 = _234;
        _227 = std::result::Result::<(), error::ErrorCode>::Err(move _266);
        StorageDead(_266);
        StorageDead(_234);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_228);
        _226 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _227) -> [return: bb103, unwind: bb685];
    }

    bb103: {
        StorageDead(_227);
        _267 = discriminant(_226);
        switchInt(move _267) -> [0: bb104, 1: bb105, otherwise: bb7];
    }

    bb104: {
        StorageLive(_271);
        _271 = ((_226 as Continue).0: ());
        _225 = _271;
        StorageDead(_271);
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_272);
        StorageLive(_273);
        _1377 = const false;
        _273 = move _150;
        _272 = std::mem::drop::<RefMut<'_, PerpMarket>>(move _273) -> [return: bb107, unwind: bb685];
    }

    bb105: {
        StorageLive(_268);
        _268 = ((_226 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb106, unwind: bb685];
    }

    bb106: {
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb669;
    }

    bb107: {
        StorageDead(_273);
        StorageDead(_272);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_63;
        StorageLive(_279);
        _1366 = const _;
        _279 = &(*_1366);
        _277 = <OrderStatus as PartialEq>::eq(move _278, move _279) -> [return: bb108, unwind: bb685];
    }

    bb108: {
        switchInt(move _277) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_281);
        _281 = ();
        _276 = std::result::Result::<(), error::ErrorCode>::Ok(move _281);
        StorageDead(_281);
        goto -> bb118;
    }

    bb110: {
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_282);
        _282 = error::ErrorCode::OrderNotOpen;
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _1365 = const _;
        _293 = &(*_1365);
        _292 = &(*_293);
        _291 = move _292 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_292);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &_282;
        _300 = &(*_301);
        _299 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _300) -> [return: bb111, unwind: bb685];
    }

    bb111: {
        StorageDead(_300);
        _298 = [move _299];
        StorageDead(_299);
        _297 = &_298;
        _296 = &(*_297);
        _295 = move _296 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_296);
        _290 = Arguments::<'_>::new_v1(move _291, move _295) -> [return: bb112, unwind: bb685];
    }

    bb112: {
        StorageDead(_295);
        StorageDead(_291);
        _289 = format(move _290) -> [return: bb113, unwind: bb685];
    }

    bb113: {
        StorageDead(_290);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_293);
        _288 = move _289;
        StorageDead(_289);
        _287 = &_288;
        _286 = &(*_287);
        _285 = <String as Deref>::deref(move _286) -> [return: bb114, unwind: bb650];
    }

    bb114: {
        _284 = &(*_285);
        StorageDead(_286);
        _283 = solana_program::log::sol_log(move _284) -> [return: bb115, unwind: bb650];
    }

    bb115: {
        StorageDead(_284);
        drop(_288) -> [return: bb116, unwind: bb685];
    }

    bb116: {
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_283);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = const "Order not open";
        _303 = &(*_304);
        _302 = solana_program::log::sol_log(move _303) -> [return: bb117, unwind: bb685];
    }

    bb117: {
        StorageDead(_303);
        StorageDead(_304);
        StorageDead(_302);
        StorageLive(_305);
        _305 = _282;
        _276 = std::result::Result::<(), error::ErrorCode>::Err(move _305);
        StorageDead(_305);
        StorageDead(_282);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_277);
        _275 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _276) -> [return: bb119, unwind: bb685];
    }

    bb119: {
        StorageDead(_276);
        _306 = discriminant(_275);
        switchInt(move _306) -> [0: bb120, 1: bb121, otherwise: bb7];
    }

    bb120: {
        StorageLive(_310);
        _310 = ((_275 as Continue).0: ());
        _274 = _310;
        StorageDead(_310);
        StorageDead(_275);
        StorageDead(_274);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &(*_21);
        _316 = <RefMut<'_, User> as Deref>::deref(move _317) -> [return: bb123, unwind: bb685];
    }

    bb121: {
        StorageLive(_307);
        _307 = ((_275 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_309);
        _309 = _307;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _309) -> [return: bb122, unwind: bb685];
    }

    bb122: {
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_275);
        StorageDead(_274);
        goto -> bb669;
    }

    bb123: {
        StorageDead(_317);
        StorageLive(_318);
        _318 = _45;
        _319 = Len(((*_316).5: [state::user::Order; 32]));
        _320 = Lt(_318, _319);
        assert(move _320, "index out of bounds: the length is {} but the index is {}", move _319, _318) -> [success: bb124, unwind: bb685];
    }

    bb124: {
        _315 = &((*_316).5: [state::user::Order; 32])[_318];
        _314 = Order::must_be_triggered(move _315) -> [return: bb125, unwind: bb685];
    }

    bb125: {
        switchInt(move _314) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        StorageDead(_315);
        StorageDead(_318);
        StorageDead(_316);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &(*_21);
        _323 = <RefMut<'_, User> as Deref>::deref(move _324) -> [return: bb128, unwind: bb685];
    }

    bb127: {
        StorageDead(_315);
        StorageDead(_318);
        StorageDead(_316);
        goto -> bb131;
    }

    bb128: {
        StorageDead(_324);
        StorageLive(_325);
        _325 = _45;
        _326 = Len(((*_323).5: [state::user::Order; 32]));
        _327 = Lt(_325, _326);
        assert(move _327, "index out of bounds: the length is {} but the index is {}", move _326, _325) -> [success: bb129, unwind: bb685];
    }

    bb129: {
        _322 = &((*_323).5: [state::user::Order; 32])[_325];
        _321 = Order::triggered(move _322) -> [return: bb130, unwind: bb685];
    }

    bb130: {
        switchInt(move _321) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_328);
        _328 = ();
        _313 = std::result::Result::<(), error::ErrorCode>::Ok(move _328);
        StorageDead(_328);
        goto -> bb140;
    }

    bb132: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_329);
        _329 = error::ErrorCode::OrderMustBeTriggeredFirst;
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _1364 = const _;
        _340 = &(*_1364);
        _339 = &(*_340);
        _338 = move _339 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_339);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &_329;
        _347 = &(*_348);
        _346 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _347) -> [return: bb133, unwind: bb685];
    }

    bb133: {
        StorageDead(_347);
        _345 = [move _346];
        StorageDead(_346);
        _344 = &_345;
        _343 = &(*_344);
        _342 = move _343 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_343);
        _337 = Arguments::<'_>::new_v1(move _338, move _342) -> [return: bb134, unwind: bb685];
    }

    bb134: {
        StorageDead(_342);
        StorageDead(_338);
        _336 = format(move _337) -> [return: bb135, unwind: bb685];
    }

    bb135: {
        StorageDead(_337);
        StorageDead(_348);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_340);
        _335 = move _336;
        StorageDead(_336);
        _334 = &_335;
        _333 = &(*_334);
        _332 = <String as Deref>::deref(move _333) -> [return: bb136, unwind: bb649];
    }

    bb136: {
        _331 = &(*_332);
        StorageDead(_333);
        _330 = solana_program::log::sol_log(move _331) -> [return: bb137, unwind: bb649];
    }

    bb137: {
        StorageDead(_331);
        drop(_335) -> [return: bb138, unwind: bb685];
    }

    bb138: {
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = const "Order must be triggered first";
        _350 = &(*_351);
        _349 = solana_program::log::sol_log(move _350) -> [return: bb139, unwind: bb685];
    }

    bb139: {
        StorageDead(_350);
        StorageDead(_351);
        StorageDead(_349);
        StorageLive(_352);
        _352 = _329;
        _313 = std::result::Result::<(), error::ErrorCode>::Err(move _352);
        StorageDead(_352);
        StorageDead(_329);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_321);
        StorageDead(_314);
        _312 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _313) -> [return: bb141, unwind: bb685];
    }

    bb141: {
        StorageDead(_313);
        _353 = discriminant(_312);
        switchInt(move _353) -> [0: bb142, 1: bb143, otherwise: bb7];
    }

    bb142: {
        StorageLive(_357);
        _357 = ((_312 as Continue).0: ());
        _311 = _357;
        StorageDead(_357);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &(*_21);
        _361 = <RefMut<'_, User> as Deref>::deref(move _362) -> [return: bb145, unwind: bb685];
    }

    bb143: {
        StorageLive(_354);
        _354 = ((_312 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_356);
        _356 = _354;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _356) -> [return: bb144, unwind: bb685];
    }

    bb144: {
        StorageDead(_356);
        StorageDead(_354);
        StorageDead(_312);
        StorageDead(_311);
        goto -> bb669;
    }

    bb145: {
        _360 = &(*_361);
        StorageDead(_362);
        _359 = User::is_bankrupt(move _360) -> [return: bb146, unwind: bb685];
    }

    bb146: {
        switchInt(move _359) -> [0: bb149, otherwise: bb147];
    }

    bb147: {
        StorageDead(_361);
        StorageDead(_360);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = const "user is bankrupt";
        _365 = &(*_366);
        _364 = solana_program::log::sol_log(move _365) -> [return: bb148, unwind: bb685];
    }

    bb148: {
        StorageDead(_365);
        StorageDead(_366);
        StorageDead(_364);
        StorageLive(_367);
        _367 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _367);
        StorageDead(_367);
        StorageDead(_359);
        StorageDead(_358);
        goto -> bb669;
    }

    bb149: {
        StorageDead(_361);
        StorageDead(_360);
        _358 = const ();
        StorageDead(_359);
        StorageDead(_358);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &_14;
        _369 = FillMode::is_liquidation(move _370) -> [return: bb150, unwind: bb685];
    }

    bb150: {
        switchInt(move _369) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        StorageDead(_370);
        _368 = const ();
        goto -> bb158;
    }

    bb152: {
        StorageDead(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _374 = &mut (*_21);
        _373 = <RefMut<'_, User> as DerefMut>::deref_mut(move _374) -> [return: bb153, unwind: bb685];
    }

    bb153: {
        _372 = &mut (*_373);
        StorageDead(_374);
        StorageLive(_375);
        _375 = &(*_6);
        StorageLive(_376);
        _376 = &(*_5);
        StorageLive(_377);
        _377 = &mut (*_7);
        StorageLive(_378);
        _378 = ((*_2).11: u32);
        _371 = validate_user_not_being_liquidated(move _372, move _375, move _376, move _377, move _378) -> [return: bb154, unwind: bb685];
    }

    bb154: {
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_372);
        _379 = discriminant(_371);
        switchInt(move _379) -> [0: bb156, 1: bb155, otherwise: bb7];
    }

    bb155: {
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = const "user is being liquidated";
        _382 = &(*_383);
        _381 = solana_program::log::sol_log(move _382) -> [return: bb157, unwind: bb685];
    }

    bb156: {
        _368 = const ();
        StorageDead(_373);
        StorageDead(_371);
        goto -> bb158;
    }

    bb157: {
        StorageDead(_382);
        StorageDead(_383);
        StorageDead(_381);
        StorageLive(_384);
        _384 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _384);
        StorageDead(_384);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        goto -> bb669;
    }

    bb158: {
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &(*_2);
        _399 = state::state::State::amm_paused(move _400) -> [return: bb159, unwind: bb685];
    }

    bb159: {
        StorageDead(_400);
        _398 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _399) -> [return: bb160, unwind: bb685];
    }

    bb160: {
        StorageDead(_399);
        _401 = discriminant(_398);
        switchInt(move _401) -> [0: bb161, 1: bb162, otherwise: bb7];
    }

    bb161: {
        StorageLive(_405);
        _405 = ((_398 as Continue).0: bool);
        _397 = _405;
        StorageDead(_405);
        _396 = Not(move _397);
        StorageDead(_397);
        StorageDead(_398);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &(*_6);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &_64;
        _412 = &(*_413);
        _410 = PerpMarketMap::<'_>::get_ref_mut(move _411, move _412) -> [return: bb164, unwind: bb685];
    }

    bb162: {
        StorageLive(_402);
        _402 = ((_398 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_404);
        _404 = _402;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _404) -> [return: bb163, unwind: bb685];
    }

    bb163: {
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_397);
        StorageDead(_398);
        goto -> bb621;
    }

    bb164: {
        StorageDead(_412);
        StorageDead(_411);
        _409 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _410) -> [return: bb165, unwind: bb685];
    }

    bb165: {
        StorageDead(_410);
        _414 = discriminant(_409);
        switchInt(move _414) -> [0: bb166, 1: bb167, otherwise: bb7];
    }

    bb166: {
        StorageLive(_418);
        _418 = move ((_409 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _408 = move _418;
        StorageDead(_418);
        _407 = &mut _408;
        _1393 = discriminant(_409);
        StorageDead(_413);
        StorageDead(_409);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &(*_407);
        _423 = <RefMut<'_, PerpMarket> as Deref>::deref(move _424) -> [return: bb169, unwind: bb648];
    }

    bb167: {
        StorageLive(_415);
        _415 = ((_409 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_417);
        _417 = _415;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _417) -> [return: bb168, unwind: bb683];
    }

    bb168: {
        StorageDead(_417);
        StorageDead(_415);
        _1391 = discriminant(_409);
        StorageDead(_413);
        StorageDead(_409);
        goto -> bb620;
    }

    bb169: {
        _422 = &(*_423);
        StorageDead(_424);
        _421 = validate_perp_market(move _422) -> [return: bb170, unwind: bb648];
    }

    bb170: {
        StorageDead(_422);
        _420 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _421) -> [return: bb171, unwind: bb648];
    }

    bb171: {
        StorageDead(_421);
        _425 = discriminant(_420);
        switchInt(move _425) -> [0: bb172, 1: bb173, otherwise: bb7];
    }

    bb172: {
        StorageLive(_429);
        _429 = ((_420 as Continue).0: ());
        _419 = _429;
        StorageDead(_429);
        StorageDead(_423);
        StorageDead(_420);
        StorageDead(_419);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &(*_407);
        _435 = <RefMut<'_, PerpMarket> as Deref>::deref(move _436) -> [return: bb175, unwind: bb648];
    }

    bb173: {
        StorageLive(_426);
        _426 = ((_420 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_428);
        _428 = _426;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _428) -> [return: bb174, unwind: bb648];
    }

    bb174: {
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_423);
        StorageDead(_420);
        StorageDead(_419);
        goto -> bb619;
    }

    bb175: {
        _434 = &(*_435);
        StorageDead(_436);
        StorageLive(_437);
        _437 = _15;
        _433 = PerpMarket::is_in_settlement(move _434, move _437) -> [return: bb176, unwind: bb648];
    }

    bb176: {
        switchInt(move _433) -> [0: bb178, otherwise: bb177];
    }

    bb177: {
        StorageDead(_437);
        StorageDead(_434);
        StorageDead(_435);
        StorageLive(_439);
        _439 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _1363 = const _;
        _450 = &(*_1363);
        _449 = &(*_450);
        _448 = move _449 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_449);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &_439;
        _457 = &(*_458);
        _456 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _457) -> [return: bb179, unwind: bb648];
    }

    bb178: {
        StorageDead(_437);
        StorageDead(_434);
        StorageDead(_435);
        StorageLive(_438);
        _438 = ();
        _432 = std::result::Result::<(), error::ErrorCode>::Ok(move _438);
        StorageDead(_438);
        goto -> bb190;
    }

    bb179: {
        StorageDead(_457);
        _455 = [move _456];
        StorageDead(_456);
        _454 = &_455;
        _453 = &(*_454);
        _452 = move _453 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_453);
        _447 = Arguments::<'_>::new_v1(move _448, move _452) -> [return: bb180, unwind: bb648];
    }

    bb180: {
        StorageDead(_452);
        StorageDead(_448);
        _446 = format(move _447) -> [return: bb181, unwind: bb648];
    }

    bb181: {
        StorageDead(_447);
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_450);
        _445 = move _446;
        StorageDead(_446);
        _444 = &_445;
        _443 = &(*_444);
        _442 = <String as Deref>::deref(move _443) -> [return: bb182, unwind: bb647];
    }

    bb182: {
        _441 = &(*_442);
        StorageDead(_443);
        _440 = solana_program::log::sol_log(move _441) -> [return: bb183, unwind: bb647];
    }

    bb183: {
        StorageDead(_441);
        drop(_445) -> [return: bb184, unwind: bb648];
    }

    bb184: {
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_440);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _1362 = const _;
        _469 = &(*_1362);
        _468 = &(*_469);
        _467 = move _468 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_468);
        _466 = Arguments::<'_>::new_const(move _467) -> [return: bb185, unwind: bb648];
    }

    bb185: {
        StorageDead(_467);
        _465 = format(move _466) -> [return: bb186, unwind: bb648];
    }

    bb186: {
        StorageDead(_466);
        StorageDead(_469);
        _464 = move _465;
        StorageDead(_465);
        _463 = &_464;
        _462 = &(*_463);
        _461 = <String as Deref>::deref(move _462) -> [return: bb187, unwind: bb646];
    }

    bb187: {
        _460 = &(*_461);
        StorageDead(_462);
        _459 = solana_program::log::sol_log(move _460) -> [return: bb188, unwind: bb646];
    }

    bb188: {
        StorageDead(_460);
        drop(_464) -> [return: bb189, unwind: bb648];
    }

    bb189: {
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_459);
        StorageLive(_471);
        _471 = _439;
        _432 = std::result::Result::<(), error::ErrorCode>::Err(move _471);
        StorageDead(_471);
        StorageDead(_439);
        goto -> bb190;
    }

    bb190: {
        StorageDead(_433);
        _431 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _432) -> [return: bb191, unwind: bb648];
    }

    bb191: {
        StorageDead(_432);
        _472 = discriminant(_431);
        switchInt(move _472) -> [0: bb192, 1: bb193, otherwise: bb7];
    }

    bb192: {
        StorageLive(_476);
        _476 = ((_431 as Continue).0: ());
        _430 = _476;
        StorageDead(_476);
        StorageDead(_431);
        StorageDead(_430);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &mut (*_7);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &(*_407);
        _485 = <RefMut<'_, PerpMarket> as Deref>::deref(move _486) -> [return: bb195, unwind: bb648];
    }

    bb193: {
        StorageLive(_473);
        _473 = ((_431 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_475);
        _475 = _473;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _475) -> [return: bb194, unwind: bb648];
    }

    bb194: {
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb619;
    }

    bb195: {
        _484 = &(*_485);
        StorageDead(_486);
        _483 = PerpMarket::oracle_id(move _484) -> [return: bb196, unwind: bb648];
    }

    bb196: {
        StorageDead(_484);
        _482 = &_483;
        _481 = &(*_482);
        _479 = OracleMap::<'_>::get_price_data(move _480, move _481) -> [return: bb197, unwind: bb648];
    }

    bb197: {
        StorageDead(_481);
        StorageDead(_480);
        _478 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _479) -> [return: bb198, unwind: bb648];
    }

    bb198: {
        StorageDead(_479);
        _487 = discriminant(_478);
        switchInt(move _487) -> [0: bb199, 1: bb200, otherwise: bb7];
    }

    bb199: {
        StorageLive(_491);
        _491 = ((_478 as Continue).0: &state::oracle::OraclePriceData);
        _477 = _491;
        StorageDead(_491);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_478);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        _497 = &(*_407);
        _496 = <RefMut<'_, PerpMarket> as Deref>::deref(move _497) -> [return: bb202, unwind: bb648];
    }

    bb200: {
        StorageLive(_488);
        _488 = ((_478 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_490);
        _490 = _488;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _490) -> [return: bb201, unwind: bb648];
    }

    bb201: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_478);
        goto -> bb618;
    }

    bb202: {
        _495 = &(*_496);
        StorageDead(_497);
        StorageLive(_498);
        _498 = (*_477);
        StorageLive(_499);
        _499 = _16;
        StorageLive(_500);
        StorageLive(_501);
        _501 = &(((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _500 = &(*_501);
        _494 = PerpMarket::get_mm_oracle_price_data(move _495, move _498, move _499, move _500) -> [return: bb203, unwind: bb648];
    }

    bb203: {
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_495);
        _493 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as Try>::branch(move _494) -> [return: bb204, unwind: bb648];
    }

    bb204: {
        StorageDead(_494);
        _502 = discriminant(_493);
        switchInt(move _502) -> [0: bb205, 1: bb206, otherwise: bb7];
    }

    bb205: {
        StorageLive(_506);
        _506 = ((_493 as Continue).0: state::oracle::MMOraclePriceData);
        _492 = _506;
        StorageDead(_506);
        StorageDead(_501);
        StorageDead(_496);
        StorageDead(_493);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_492;
        _507 = MMOraclePriceData::get_safe_oracle_price_data(move _508) -> [return: bb208, unwind: bb648];
    }

    bb206: {
        StorageLive(_503);
        _503 = ((_493 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_505);
        _505 = _503;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _505) -> [return: bb207, unwind: bb648];
    }

    bb207: {
        StorageDead(_505);
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_496);
        StorageDead(_493);
        goto -> bb617;
    }

    bb208: {
        StorageDead(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        _512 = state::user::MarketType::Perp;
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &(*_407);
        _514 = <RefMut<'_, PerpMarket> as Deref>::deref(move _515) -> [return: bb209, unwind: bb648];
    }

    bb209: {
        StorageDead(_515);
        _513 = ((*_514).21: u16);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &(*_407);
        _517 = <RefMut<'_, PerpMarket> as Deref>::deref(move _518) -> [return: bb210, unwind: bb648];
    }

    bb210: {
        StorageDead(_518);
        _516 = ((((*_517).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_519);
        StorageLive(_520);
        _520 = &_507;
        _519 = &(*_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = &(((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _521 = &(*_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = &(*_407);
        _527 = <RefMut<'_, PerpMarket> as Deref>::deref(move _528) -> [return: bb211, unwind: bb648];
    }

    bb211: {
        _526 = (*_527);
        StorageDead(_528);
        _525 = PerpMarket::get_max_confidence_interval_multiplier(move _526) -> [return: bb212, unwind: bb648];
    }

    bb212: {
        StorageDead(_526);
        _524 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _525) -> [return: bb213, unwind: bb648];
    }

    bb213: {
        StorageDead(_525);
        _529 = discriminant(_524);
        switchInt(move _529) -> [0: bb214, 1: bb215, otherwise: bb7];
    }

    bb214: {
        StorageLive(_533);
        _533 = ((_524 as Continue).0: u64);
        _523 = _533;
        StorageDead(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = &(*_407);
        _536 = <RefMut<'_, PerpMarket> as Deref>::deref(move _537) -> [return: bb217, unwind: bb648];
    }

    bb215: {
        StorageLive(_530);
        _530 = ((_524 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_532);
        _532 = _530;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _532) -> [return: bb216, unwind: bb648];
    }

    bb216: {
        StorageDead(_532);
        StorageDead(_530);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_511);
        StorageDead(_509);
        goto -> bb615;
    }

    bb217: {
        StorageDead(_537);
        _535 = &(((*_536).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _534 = &(*_535);
        StorageLive(_538);
        _538 = LogMode::SafeMMOracle;
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = &(*_407);
        _540 = <RefMut<'_, PerpMarket> as Deref>::deref(move _541) -> [return: bb218, unwind: bb648];
    }

    bb218: {
        StorageDead(_541);
        _539 = (((*_540).1: state::perp_market::AMM).78: i8);
        _511 = oracle_validity(move _512, move _513, move _516, move _519, move _521, move _523, move _534, move _538, move _539) -> [return: bb219, unwind: bb648];
    }

    bb219: {
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_534);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        _510 = <std::result::Result<OracleValidity, error::ErrorCode> as Try>::branch(move _511) -> [return: bb220, unwind: bb648];
    }

    bb220: {
        StorageDead(_511);
        _542 = discriminant(_510);
        switchInt(move _542) -> [0: bb221, 1: bb222, otherwise: bb7];
    }

    bb221: {
        StorageLive(_546);
        _546 = ((_510 as Continue).0: math::oracle::OracleValidity);
        _509 = _546;
        StorageDead(_546);
        _386 = move _509;
        StorageDead(_509);
        StorageDead(_540);
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_527);
        StorageDead(_524);
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_510);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        _550 = _386;
        StorageLive(_551);
        StorageLive(_552);
        _552 = DriftAction::FillOrderAmm;
        _551 = Option::<DriftAction>::Some(move _552);
        StorageDead(_552);
        _549 = is_oracle_valid_for_action(move _550, move _551) -> [return: bb224, unwind: bb648];
    }

    bb222: {
        StorageLive(_543);
        _543 = ((_510 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_545);
        _545 = _543;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _545) -> [return: bb223, unwind: bb648];
    }

    bb223: {
        StorageDead(_545);
        StorageDead(_543);
        StorageDead(_509);
        StorageDead(_540);
        StorageDead(_536);
        StorageDead(_535);
        goto -> bb615;
    }

    bb224: {
        StorageDead(_551);
        StorageDead(_550);
        _548 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _549) -> [return: bb225, unwind: bb648];
    }

    bb225: {
        StorageDead(_549);
        _553 = discriminant(_548);
        switchInt(move _553) -> [0: bb226, 1: bb227, otherwise: bb7];
    }

    bb226: {
        StorageLive(_557);
        _557 = ((_548 as Continue).0: bool);
        _547 = _557;
        StorageDead(_557);
        _393 = move _547;
        StorageDead(_547);
        StorageDead(_548);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &_492;
        _558 = MMOraclePriceData::get_delay(move _559) -> [return: bb229, unwind: bb648];
    }

    bb227: {
        StorageLive(_554);
        _554 = ((_548 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_556);
        _556 = _554;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _556) -> [return: bb228, unwind: bb648];
    }

    bb228: {
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_547);
        StorageDead(_548);
        goto -> bb616;
    }

    bb229: {
        StorageDead(_559);
        StorageLive(_560);
        _560 = ((((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails).1: i64);
        _394 = Gt(move _558, move _560);
        StorageDead(_560);
        StorageDead(_558);
        StorageLive(_561);
        _561 = _393;
        _396 = BitAnd(_396, move _561);
        StorageDead(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &(*_407);
        _565 = <RefMut<'_, PerpMarket> as Deref>::deref(move _566) -> [return: bb230, unwind: bb648];
    }

    bb230: {
        _564 = &(*_565);
        StorageDead(_566);
        StorageLive(_567);
        _567 = PerpOperation::AmmFill;
        _563 = PerpMarket::is_operation_paused(move _564, move _567) -> [return: bb231, unwind: bb648];
    }

    bb231: {
        StorageDead(_567);
        StorageDead(_564);
        _562 = Not(move _563);
        StorageDead(_563);
        _396 = BitAnd(_396, move _562);
        StorageDead(_562);
        StorageDead(_565);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = &(*_407);
        _573 = <RefMut<'_, PerpMarket> as Deref>::deref(move _574) -> [return: bb232, unwind: bb648];
    }

    bb232: {
        _572 = &(*_573);
        StorageDead(_574);
        _571 = PerpMarket::has_too_much_drawdown(move _572) -> [return: bb233, unwind: bb648];
    }

    bb233: {
        StorageDead(_572);
        _570 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _571) -> [return: bb234, unwind: bb648];
    }

    bb234: {
        StorageDead(_571);
        _575 = discriminant(_570);
        switchInt(move _575) -> [0: bb235, 1: bb236, otherwise: bb7];
    }

    bb235: {
        StorageLive(_579);
        _579 = ((_570 as Continue).0: bool);
        _569 = _579;
        StorageDead(_579);
        _568 = Not(move _569);
        StorageDead(_569);
        _396 = BitAnd(_396, move _568);
        StorageDead(_568);
        StorageDead(_573);
        StorageDead(_570);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = &_492;
        _581 = MMOraclePriceData::is_enabled(move _582) -> [return: bb238, unwind: bb648];
    }

    bb236: {
        StorageLive(_576);
        _576 = ((_570 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_578);
        _578 = _576;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _578) -> [return: bb237, unwind: bb648];
    }

    bb237: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_573);
        StorageDead(_570);
        goto -> bb616;
    }

    bb238: {
        switchInt(move _581) -> [0: bb244, otherwise: bb239];
    }

    bb239: {
        StorageDead(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = &_492;
        _583 = MMOraclePriceData::is_mm_oracle_as_recent(move _584) -> [return: bb240, unwind: bb648];
    }

    bb240: {
        switchInt(move _583) -> [0: bb243, otherwise: bb241];
    }

    bb241: {
        StorageDead(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        _587 = &_492;
        _586 = MMOraclePriceData::is_mm_exchange_diff_bps_high(move _587) -> [return: bb242, unwind: bb648];
    }

    bb242: {
        StorageDead(_587);
        _585 = Not(move _586);
        StorageDead(_586);
        _580 = _585;
        StorageDead(_585);
        goto -> bb246;
    }

    bb243: {
        StorageDead(_584);
        goto -> bb245;
    }

    bb244: {
        StorageDead(_582);
        goto -> bb245;
    }

    bb245: {
        _580 = const true;
        goto -> bb246;
    }

    bb246: {
        StorageDead(_583);
        StorageDead(_581);
        StorageLive(_588);
        _588 = _580;
        _396 = BitAnd(_396, move _588);
        StorageDead(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = &(*_407);
        _593 = <RefMut<'_, PerpMarket> as Deref>::deref(move _594) -> [return: bb247, unwind: bb648];
    }

    bb247: {
        StorageDead(_594);
        _592 = &((*_593).1: state::perp_market::AMM);
        StorageLive(_595);
        _595 = _68;
        _591 = AMM::amm_wants_to_jit_make(move _592, move _595) -> [return: bb248, unwind: bb648];
    }

    bb248: {
        StorageDead(_595);
        StorageDead(_592);
        _590 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _591) -> [return: bb249, unwind: bb648];
    }

    bb249: {
        StorageDead(_591);
        _596 = discriminant(_590);
        switchInt(move _596) -> [0: bb250, 1: bb251, otherwise: bb7];
    }

    bb250: {
        StorageLive(_600);
        _600 = ((_590 as Continue).0: bool);
        _589 = _600;
        StorageDead(_600);
        StorageDead(_593);
        StorageDead(_590);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = &(*_407);
        _605 = <RefMut<'_, PerpMarket> as Deref>::deref(move _606) -> [return: bb253, unwind: bb648];
    }

    bb251: {
        StorageLive(_597);
        _597 = ((_590 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb252, unwind: bb648];
    }

    bb252: {
        StorageDead(_599);
        StorageDead(_597);
        StorageDead(_593);
        StorageDead(_590);
        goto -> bb614;
    }

    bb253: {
        StorageDead(_606);
        _604 = &((*_605).1: state::perp_market::AMM);
        StorageLive(_607);
        _607 = _589;
        _603 = AMM::amm_has_low_enough_inventory(move _604, move _607) -> [return: bb254, unwind: bb648];
    }

    bb254: {
        StorageDead(_607);
        StorageDead(_604);
        _602 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _603) -> [return: bb255, unwind: bb648];
    }

    bb255: {
        StorageDead(_603);
        _608 = discriminant(_602);
        switchInt(move _608) -> [0: bb256, 1: bb257, otherwise: bb7];
    }

    bb256: {
        StorageLive(_612);
        _612 = ((_602 as Continue).0: bool);
        _601 = _612;
        StorageDead(_612);
        _392 = move _601;
        StorageDead(_601);
        StorageDead(_605);
        StorageDead(_602);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        _618 = &(*_407);
        _617 = <RefMut<'_, PerpMarket> as Deref>::deref(move _618) -> [return: bb259, unwind: bb648];
    }

    bb257: {
        StorageLive(_609);
        _609 = ((_602 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_611);
        _611 = _609;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _611) -> [return: bb258, unwind: bb648];
    }

    bb258: {
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_601);
        StorageDead(_605);
        StorageDead(_602);
        goto -> bb614;
    }

    bb259: {
        _616 = &(*_617);
        StorageDead(_618);
        StorageLive(_619);
        StorageLive(_620);
        _620 = &_2;
        _1373 = deref_copy (*_620);
        _619 = &(*_1373);
        StorageLive(_621);
        _621 = _392;
        _615 = PerpMarket::can_skip_auction_duration(move _616, move _619, move _621) -> [return: bb260, unwind: bb648];
    }

    bb260: {
        StorageDead(_621);
        StorageDead(_619);
        StorageDead(_616);
        _614 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _615) -> [return: bb261, unwind: bb648];
    }

    bb261: {
        StorageDead(_615);
        _622 = discriminant(_614);
        switchInt(move _622) -> [0: bb262, 1: bb263, otherwise: bb7];
    }

    bb262: {
        StorageLive(_626);
        _626 = ((_614 as Continue).0: bool);
        _613 = _626;
        StorageDead(_626);
        _391 = move _613;
        StorageDead(_613);
        StorageDead(_620);
        StorageDead(_617);
        StorageDead(_614);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        _632 = &(*_21);
        _631 = <RefMut<'_, User> as Deref>::deref(move _632) -> [return: bb265, unwind: bb648];
    }

    bb263: {
        StorageLive(_623);
        _623 = ((_614 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_625);
        _625 = _623;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _625) -> [return: bb264, unwind: bb648];
    }

    bb264: {
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_613);
        StorageDead(_620);
        StorageDead(_617);
        StorageDead(_614);
        goto -> bb614;
    }

    bb265: {
        _630 = &(*_631);
        StorageDead(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        _635 = &(*_33);
        _634 = <RefMut<'_, UserStats> as Deref>::deref(move _635) -> [return: bb266, unwind: bb648];
    }

    bb266: {
        _633 = &(*_634);
        StorageDead(_635);
        _629 = User::can_skip_auction_duration(move _630, move _633) -> [return: bb267, unwind: bb648];
    }

    bb267: {
        StorageDead(_633);
        StorageDead(_630);
        _628 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _629) -> [return: bb268, unwind: bb648];
    }

    bb268: {
        StorageDead(_629);
        _636 = discriminant(_628);
        switchInt(move _636) -> [0: bb269, 1: bb270, otherwise: bb7];
    }

    bb269: {
        StorageLive(_640);
        _640 = ((_628 as Continue).0: bool);
        _627 = _640;
        StorageDead(_640);
        _390 = move _627;
        StorageDead(_627);
        StorageDead(_634);
        StorageDead(_631);
        StorageDead(_628);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        _646 = &(*_407);
        _645 = <RefMut<'_, PerpMarket> as Deref>::deref(move _646) -> [return: bb272, unwind: bb648];
    }

    bb270: {
        StorageLive(_637);
        _637 = ((_628 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_639);
        _639 = _637;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _639) -> [return: bb271, unwind: bb648];
    }

    bb271: {
        StorageDead(_639);
        StorageDead(_637);
        StorageDead(_627);
        StorageDead(_634);
        StorageDead(_631);
        StorageDead(_628);
        goto -> bb614;
    }

    bb272: {
        StorageDead(_646);
        _644 = &((*_645).1: state::perp_market::AMM);
        _643 = AMM::reserve_price(move _644) -> [return: bb273, unwind: bb648];
    }

    bb273: {
        StorageDead(_644);
        _642 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _643) -> [return: bb274, unwind: bb648];
    }

    bb274: {
        StorageDead(_643);
        _647 = discriminant(_642);
        switchInt(move _647) -> [0: bb275, 1: bb276, otherwise: bb7];
    }

    bb275: {
        StorageLive(_651);
        _651 = ((_642 as Continue).0: u64);
        _641 = _651;
        StorageDead(_651);
        _385 = move _641;
        StorageDead(_641);
        StorageDead(_645);
        StorageDead(_642);
        StorageLive(_652);
        StorageLive(_653);
        _653 = &_492;
        _652 = MMOraclePriceData::get_price(move _653) -> [return: bb278, unwind: bb648];
    }

    bb276: {
        StorageLive(_648);
        _648 = ((_642 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_650);
        _650 = _648;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _650) -> [return: bb277, unwind: bb648];
    }

    bb277: {
        StorageDead(_650);
        StorageDead(_648);
        StorageDead(_641);
        StorageDead(_645);
        StorageDead(_642);
        goto -> bb614;
    }

    bb278: {
        StorageDead(_653);
        _387 = move _652;
        StorageDead(_652);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        _656 = &(*_407);
        _655 = <RefMut<'_, PerpMarket> as Deref>::deref(move _656) -> [return: bb279, unwind: bb648];
    }

    bb279: {
        StorageDead(_656);
        _654 = ((((*_655).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        _388 = move _654;
        StorageDead(_654);
        StorageDead(_655);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &(*_407);
        _658 = <RefMut<'_, PerpMarket> as Deref>::deref(move _659) -> [return: bb280, unwind: bb648];
    }

    bb280: {
        StorageDead(_659);
        _657 = ((*_658).21: u16);
        _389 = move _657;
        StorageDead(_657);
        StorageDead(_658);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        _663 = &(*_407);
        _662 = <RefMut<'_, PerpMarket> as Deref>::deref(move _663) -> [return: bb281, unwind: bb648];
    }

    bb281: {
        _661 = &(*_662);
        StorageDead(_663);
        StorageLive(_664);
        _664 = ((*_2).16: u8);
        _660 = PerpMarket::get_min_perp_auction_duration(move _661, move _664) -> [return: bb282, unwind: bb648];
    }

    bb282: {
        StorageDead(_664);
        StorageDead(_661);
        _395 = move _660;
        StorageDead(_660);
        StorageDead(_662);
        _406 = const ();
        StorageDead(_589);
        StorageDead(_580);
        StorageDead(_507);
        StorageDead(_492);
        StorageDead(_477);
        drop(_408) -> [return: bb283, unwind: bb685];
    }

    bb283: {
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        _669 = _386;
        StorageLive(_670);
        StorageLive(_671);
        _671 = DriftAction::OracleOrderPrice;
        _670 = Option::<DriftAction>::Some(move _671);
        StorageDead(_671);
        _668 = is_oracle_valid_for_action(move _669, move _670) -> [return: bb284, unwind: bb685];
    }

    bb284: {
        StorageDead(_670);
        StorageDead(_669);
        _667 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _668) -> [return: bb285, unwind: bb685];
    }

    bb285: {
        StorageDead(_668);
        _672 = discriminant(_667);
        switchInt(move _672) -> [0: bb286, 1: bb287, otherwise: bb7];
    }

    bb286: {
        StorageLive(_676);
        _676 = ((_667 as Continue).0: bool);
        _666 = _676;
        StorageDead(_676);
        switchInt(move _666) -> [0: bb290, otherwise: bb289];
    }

    bb287: {
        StorageLive(_673);
        _673 = ((_667 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_675);
        _675 = _673;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _675) -> [return: bb288, unwind: bb685];
    }

    bb288: {
        StorageDead(_675);
        StorageDead(_673);
        StorageDead(_667);
        StorageDead(_666);
        goto -> bb613;
    }

    bb289: {
        StorageDead(_667);
        StorageLive(_677);
        _677 = _387;
        _665 = Option::<i64>::Some(move _677);
        StorageDead(_677);
        goto -> bb297;
    }

    bb290: {
        StorageDead(_667);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        _1361 = const _;
        _688 = &(*_1361);
        _687 = &(*_688);
        _686 = move _687 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_687);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        _696 = &_389;
        _695 = &(*_696);
        _694 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _695) -> [return: bb291, unwind: bb685];
    }

    bb291: {
        StorageDead(_695);
        _693 = [move _694];
        StorageDead(_694);
        _692 = &_693;
        _691 = &(*_692);
        _690 = move _691 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_691);
        _685 = Arguments::<'_>::new_v1(move _686, move _690) -> [return: bb292, unwind: bb685];
    }

    bb292: {
        StorageDead(_690);
        StorageDead(_686);
        _684 = format(move _685) -> [return: bb293, unwind: bb685];
    }

    bb293: {
        StorageDead(_685);
        StorageDead(_696);
        StorageDead(_693);
        StorageDead(_692);
        StorageDead(_688);
        _683 = move _684;
        StorageDead(_684);
        _682 = &_683;
        _681 = &(*_682);
        _680 = <String as Deref>::deref(move _681) -> [return: bb294, unwind: bb645];
    }

    bb294: {
        _679 = &(*_680);
        StorageDead(_681);
        _678 = solana_program::log::sol_log(move _679) -> [return: bb295, unwind: bb645];
    }

    bb295: {
        StorageDead(_679);
        drop(_683) -> [return: bb296, unwind: bb685];
    }

    bb296: {
        StorageDead(_683);
        StorageDead(_682);
        StorageDead(_680);
        StorageDead(_678);
        _665 = Option::<i64>::None;
        goto -> bb297;
    }

    bb297: {
        StorageDead(_666);
        StorageLive(_697);
        StorageLive(_698);
        _698 = &_19;
        StorageLive(_699);
        _699 = &_17;
        _697 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _698, move _699) -> [return: bb298, unwind: bb685];
    }

    bb298: {
        StorageDead(_699);
        StorageDead(_698);
        StorageLive(_700);
        StorageLive(_701);
        _701 = &((*_10).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        StorageLive(_702);
        StorageLive(_703);
        _703 = &_17;
        _702 = &(*_703);
        _700 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::contains_key::<anchor_lang::prelude::Pubkey>(move _701, move _702) -> [return: bb299, unwind: bb685];
    }

    bb299: {
        StorageDead(_702);
        StorageDead(_701);
        StorageDead(_703);
        StorageLive(_706);
        StorageLive(_707);
        _707 = _700;
        switchInt(move _707) -> [0: bb300, otherwise: bb342];
    }

    bb300: {
        StorageLive(_708);
        _708 = _697;
        switchInt(move _708) -> [0: bb301, otherwise: bb342];
    }

    bb301: {
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        _713 = &(*_8);
        _712 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _713) -> [return: bb302, unwind: bb685];
    }

    bb302: {
        StorageDead(_713);
        StorageLive(_714);
        _714 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _711 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _712, move _714) -> [return: bb303, unwind: bb685];
    }

    bb303: {
        StorageDead(_714);
        StorageDead(_712);
        _710 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _711) -> [return: bb304, unwind: bb685];
    }

    bb304: {
        StorageDead(_711);
        _715 = discriminant(_710);
        switchInt(move _715) -> [0: bb305, 1: bb306, otherwise: bb7];
    }

    bb305: {
        StorageLive(_719);
        _719 = move ((_710 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _1374 = const true;
        _709 = move _719;
        StorageDead(_719);
        _1397 = discriminant(_710);
        StorageDead(_710);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = &_709;
        _725 = <RefMut<'_, User> as Deref>::deref(move _726) -> [return: bb308, unwind: bb681];
    }

    bb306: {
        StorageLive(_716);
        _716 = ((_710 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_718);
        _718 = _716;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _718) -> [return: bb307, unwind: bb682];
    }

    bb307: {
        StorageDead(_718);
        StorageDead(_716);
        _1395 = discriminant(_710);
        StorageDead(_710);
        goto -> bb611;
    }

    bb308: {
        StorageDead(_726);
        _724 = ((*_725).27: u8);
        _723 = Eq(move _724, const 0_u8);
        switchInt(move _723) -> [0: bb310, otherwise: bb309];
    }

    bb309: {
        StorageDead(_725);
        StorageDead(_724);
        StorageLive(_727);
        _727 = ();
        _722 = std::result::Result::<(), error::ErrorCode>::Ok(move _727);
        StorageDead(_727);
        goto -> bb324;
    }

    bb310: {
        StorageDead(_725);
        StorageDead(_724);
        StorageLive(_728);
        _728 = error::ErrorCode::InvalidPoolId;
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        _1360 = const _;
        _739 = &(*_1360);
        _738 = &(*_739);
        _737 = move _738 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_738);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        _747 = &_728;
        _746 = &(*_747);
        _745 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _746) -> [return: bb311, unwind: bb681];
    }

    bb311: {
        StorageDead(_746);
        _744 = [move _745];
        StorageDead(_745);
        _743 = &_744;
        _742 = &(*_743);
        _741 = move _742 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_742);
        _736 = Arguments::<'_>::new_v1(move _737, move _741) -> [return: bb312, unwind: bb681];
    }

    bb312: {
        StorageDead(_741);
        StorageDead(_737);
        _735 = format(move _736) -> [return: bb313, unwind: bb681];
    }

    bb313: {
        StorageDead(_736);
        StorageDead(_747);
        StorageDead(_744);
        StorageDead(_743);
        StorageDead(_739);
        _734 = move _735;
        StorageDead(_735);
        _733 = &_734;
        _732 = &(*_733);
        _731 = <String as Deref>::deref(move _732) -> [return: bb314, unwind: bb644];
    }

    bb314: {
        _730 = &(*_731);
        StorageDead(_732);
        _729 = solana_program::log::sol_log(move _730) -> [return: bb315, unwind: bb644];
    }

    bb315: {
        StorageDead(_730);
        drop(_734) -> [return: bb316, unwind: bb681];
    }

    bb316: {
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_731);
        StorageDead(_729);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        _1359 = const _;
        _758 = &(*_1359);
        _757 = &(*_758);
        _756 = move _757 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_757);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        _768 = &_709;
        _767 = <RefMut<'_, User> as Deref>::deref(move _768) -> [return: bb317, unwind: bb681];
    }

    bb317: {
        StorageDead(_768);
        _766 = &((*_767).27: u8);
        _765 = &(*_766);
        _764 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _765) -> [return: bb318, unwind: bb681];
    }

    bb318: {
        StorageDead(_765);
        _763 = [move _764];
        StorageDead(_764);
        _762 = &_763;
        _761 = &(*_762);
        _760 = move _761 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_761);
        _755 = Arguments::<'_>::new_v1(move _756, move _760) -> [return: bb319, unwind: bb681];
    }

    bb319: {
        StorageDead(_760);
        StorageDead(_756);
        _754 = format(move _755) -> [return: bb320, unwind: bb681];
    }

    bb320: {
        StorageDead(_755);
        StorageDead(_767);
        StorageDead(_766);
        StorageDead(_763);
        StorageDead(_762);
        StorageDead(_758);
        _753 = move _754;
        StorageDead(_754);
        _752 = &_753;
        _751 = &(*_752);
        _750 = <String as Deref>::deref(move _751) -> [return: bb321, unwind: bb643];
    }

    bb321: {
        _749 = &(*_750);
        StorageDead(_751);
        _748 = solana_program::log::sol_log(move _749) -> [return: bb322, unwind: bb643];
    }

    bb322: {
        StorageDead(_749);
        drop(_753) -> [return: bb323, unwind: bb681];
    }

    bb323: {
        StorageDead(_753);
        StorageDead(_752);
        StorageDead(_750);
        StorageDead(_748);
        StorageLive(_769);
        _769 = _728;
        _722 = std::result::Result::<(), error::ErrorCode>::Err(move _769);
        StorageDead(_769);
        StorageDead(_728);
        goto -> bb324;
    }

    bb324: {
        StorageDead(_723);
        _721 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _722) -> [return: bb325, unwind: bb681];
    }

    bb325: {
        StorageDead(_722);
        _770 = discriminant(_721);
        switchInt(move _770) -> [0: bb326, 1: bb327, otherwise: bb7];
    }

    bb326: {
        StorageLive(_774);
        _774 = ((_721 as Continue).0: ());
        _720 = _774;
        StorageDead(_774);
        StorageDead(_721);
        StorageDead(_720);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        _778 = &_709;
        _777 = <RefMut<'_, User> as Deref>::deref(move _778) -> [return: bb329, unwind: bb681];
    }

    bb327: {
        StorageLive(_771);
        _771 = ((_721 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_773);
        _773 = _771;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _773) -> [return: bb328, unwind: bb681];
    }

    bb328: {
        StorageDead(_773);
        StorageDead(_771);
        StorageDead(_721);
        StorageDead(_720);
        goto -> bb667;
    }

    bb329: {
        StorageDead(_778);
        _776 = &((*_777).0: anchor_lang::prelude::Pubkey);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        _781 = &(*_21);
        _780 = <RefMut<'_, User> as Deref>::deref(move _781) -> [return: bb330, unwind: bb681];
    }

    bb330: {
        StorageDead(_781);
        _779 = &((*_780).0: anchor_lang::prelude::Pubkey);
        _775 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _776, move _779) -> [return: bb331, unwind: bb681];
    }

    bb331: {
        switchInt(move _775) -> [0: bb339, otherwise: bb332];
    }

    bb332: {
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_777);
        StorageDead(_776);
        StorageLive(_782);
        StorageLive(_783);
        _1374 = const false;
        _783 = move _709;
        _782 = Option::<RefMut<'_, User>>::Some(move _783);
        StorageDead(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        _789 = &(*_9);
        _788 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _789) -> [return: bb333, unwind: bb642];
    }

    bb333: {
        StorageDead(_789);
        StorageLive(_790);
        _790 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _787 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _788, move _790) -> [return: bb334, unwind: bb642];
    }

    bb334: {
        StorageDead(_790);
        StorageDead(_788);
        _786 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _787) -> [return: bb335, unwind: bb642];
    }

    bb335: {
        StorageDead(_787);
        _791 = discriminant(_786);
        switchInt(move _791) -> [0: bb336, 1: bb337, otherwise: bb7];
    }

    bb336: {
        StorageLive(_795);
        _795 = move ((_786 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _785 = move _795;
        StorageDead(_795);
        _784 = Option::<RefMut<'_, UserStats>>::Some(move _785);
        StorageDead(_785);
        _706 = (move _782, move _784);
        StorageDead(_784);
        StorageDead(_782);
        _1399 = discriminant(_786);
        StorageDead(_786);
        goto -> bb340;
    }

    bb337: {
        StorageLive(_792);
        _792 = ((_786 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_794);
        _794 = _792;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _794) -> [return: bb338, unwind: bb641];
    }

    bb338: {
        StorageDead(_794);
        StorageDead(_792);
        StorageDead(_785);
        StorageDead(_784);
        drop(_782) -> [return: bb610, unwind: bb679];
    }

    bb339: {
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_777);
        StorageDead(_776);
        StorageLive(_796);
        _796 = Option::<RefMut<'_, User>>::None;
        StorageLive(_797);
        _797 = Option::<RefMut<'_, UserStats>>::None;
        _706 = (move _796, move _797);
        StorageDead(_797);
        StorageDead(_796);
        goto -> bb340;
    }

    bb340: {
        StorageDead(_775);
        switchInt(_1374) -> [0: bb341, otherwise: bb659];
    }

    bb341: {
        _1374 = const false;
        StorageDead(_709);
        goto -> bb343;
    }

    bb342: {
        StorageLive(_798);
        _798 = Option::<RefMut<'_, User>>::None;
        StorageLive(_799);
        _799 = Option::<RefMut<'_, UserStats>>::None;
        _706 = (move _798, move _799);
        StorageDead(_799);
        StorageDead(_798);
        goto -> bb343;
    }

    bb343: {
        StorageDead(_708);
        StorageDead(_707);
        StorageLive(_704);
        _704 = move (_706.0: std::option::Option<std::cell::RefMut<'_, state::user::User>>);
        StorageLive(_705);
        _705 = move (_706.1: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
        StorageDead(_706);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        _803 = &(*_6);
        StorageLive(_804);
        _804 = &(*_5);
        StorageLive(_805);
        _805 = &mut (*_7);
        StorageLive(_806);
        _806 = &(*_10);
        StorageLive(_807);
        StorageLive(_808);
        _808 = &_19;
        _807 = &(*_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        _812 = &(*_21);
        _811 = <RefMut<'_, User> as Deref>::deref(move _812) -> [return: bb344, unwind: bb639];
    }

    bb344: {
        StorageDead(_812);
        StorageLive(_813);
        _813 = _45;
        _814 = Len(((*_811).5: [state::user::Order; 32]));
        _815 = Lt(_813, _814);
        assert(move _815, "index out of bounds: the length is {} but the index is {}", move _814, _813) -> [success: bb345, unwind: bb639];
    }

    bb345: {
        _810 = &((*_811).5: [state::user::Order; 32])[_813];
        _809 = &(*_810);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        _819 = &mut _704;
        _818 = Option::<RefMut<'_, User>>::as_deref_mut(move _819) -> [return: bb346, unwind: bb639];
    }

    bb346: {
        StorageDead(_819);
        _817 = &mut _818;
        _816 = &mut (*_817);
        StorageLive(_820);
        StorageLive(_821);
        _821 = &_17;
        _820 = &(*_821);
        StorageLive(_822);
        _822 = (((*_2).5: state::state::FeeStructure).3: u64);
        StorageLive(_823);
        _823 = _387;
        StorageLive(_824);
        _824 = _12;
        StorageLive(_825);
        _825 = _15;
        StorageLive(_826);
        _826 = _16;
        StorageLive(_827);
        _827 = _390;
        StorageLive(_828);
        StorageLive(_829);
        _829 = ((*_2).16: u8);
        _828 = move _829 as u64 (IntToInt);
        StorageDead(_829);
        _802 = get_maker_orders_info(move _803, move _804, move _805, move _806, move _807, move _809, move _816, move _820, move _822, move _823, move _824, move _825, move _826, move _827, move _828) -> [return: bb347, unwind: bb639];
    }

    bb347: {
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_826);
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_820);
        StorageDead(_816);
        StorageDead(_809);
        StorageDead(_807);
        StorageDead(_806);
        StorageDead(_805);
        StorageDead(_804);
        StorageDead(_803);
        _801 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as Try>::branch(move _802) -> [return: bb348, unwind: bb639];
    }

    bb348: {
        StorageDead(_802);
        _830 = discriminant(_801);
        switchInt(move _830) -> [0: bb349, 1: bb350, otherwise: bb7];
    }

    bb349: {
        StorageLive(_834);
        _834 = move ((_801 as Continue).0: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>);
        _800 = move _834;
        StorageDead(_834);
        _1403 = discriminant(_801);
        StorageDead(_821);
        StorageDead(_818);
        StorageDead(_817);
        StorageDead(_813);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_808);
        StorageDead(_801);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        _837 = &_14;
        _836 = FillMode::is_liquidation(move _837) -> [return: bb352, unwind: bb638];
    }

    bb350: {
        StorageLive(_831);
        _831 = ((_801 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_833);
        _833 = _831;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _833) -> [return: bb351, unwind: bb678];
    }

    bb351: {
        StorageDead(_833);
        StorageDead(_831);
        _1401 = discriminant(_801);
        StorageDead(_821);
        StorageDead(_818);
        StorageDead(_817);
        StorageDead(_813);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_808);
        StorageDead(_801);
        goto -> bb607;
    }

    bb352: {
        switchInt(move _836) -> [0: bb354, otherwise: bb353];
    }

    bb353: {
        StorageDead(_837);
        _835 = Option::<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>::None;
        goto -> bb361;
    }

    bb354: {
        StorageDead(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _842 = &(*_33);
        _841 = <RefMut<'_, UserStats> as Deref>::deref(move _842) -> [return: bb355, unwind: bb638];
    }

    bb355: {
        _840 = &(*_841);
        StorageDead(_842);
        StorageLive(_843);
        StorageLive(_844);
        _844 = &_19;
        _843 = &(*_844);
        StorageLive(_845);
        _845 = &(*_10);
        StorageLive(_846);
        _846 = &(*_11);
        StorageLive(_847);
        _847 = _16;
        _839 = get_referrer_info(move _840, move _843, move _845, move _846, move _847) -> [return: bb356, unwind: bb638];
    }

    bb356: {
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_845);
        StorageDead(_843);
        StorageDead(_840);
        _838 = <std::result::Result<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode> as Try>::branch(move _839) -> [return: bb357, unwind: bb638];
    }

    bb357: {
        StorageDead(_839);
        _848 = discriminant(_838);
        switchInt(move _848) -> [0: bb358, 1: bb359, otherwise: bb7];
    }

    bb358: {
        StorageLive(_852);
        _852 = ((_838 as Continue).0: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>);
        _835 = _852;
        StorageDead(_852);
        StorageDead(_844);
        StorageDead(_841);
        StorageDead(_838);
        goto -> bb361;
    }

    bb359: {
        StorageLive(_849);
        _849 = ((_838 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_851);
        _851 = _849;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _851) -> [return: bb360, unwind: bb638];
    }

    bb360: {
        StorageDead(_851);
        StorageDead(_849);
        StorageDead(_844);
        StorageDead(_841);
        StorageDead(_838);
        StorageDead(_836);
        goto -> bb606;
    }

    bb361: {
        StorageDead(_836);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        _856 = _387;
        StorageLive(_857);
        _857 = _388;
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        _862 = &((*_2).7: state::state::OracleGuardRails);
        _861 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _862) -> [return: bb362, unwind: bb638];
    }

    bb362: {
        StorageDead(_862);
        _860 = <u64 as Cast>::cast::<i64>(move _861) -> [return: bb363, unwind: bb638];
    }

    bb363: {
        StorageDead(_861);
        _859 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _860) -> [return: bb364, unwind: bb638];
    }

    bb364: {
        StorageDead(_860);
        _863 = discriminant(_859);
        switchInt(move _863) -> [0: bb365, 1: bb366, otherwise: bb7];
    }

    bb365: {
        StorageLive(_867);
        _867 = ((_859 as Continue).0: i64);
        _858 = _867;
        StorageDead(_867);
        _855 = math::orders::is_oracle_too_divergent_with_twap_5min(move _856, move _857, move _858) -> [return: bb368, unwind: bb638];
    }

    bb366: {
        StorageLive(_864);
        _864 = ((_859 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_866);
        _866 = _864;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _866) -> [return: bb367, unwind: bb638];
    }

    bb367: {
        StorageDead(_866);
        StorageDead(_864);
        StorageDead(_858);
        StorageDead(_857);
        StorageDead(_856);
        StorageDead(_855);
        goto -> bb604;
    }

    bb368: {
        StorageDead(_858);
        StorageDead(_857);
        StorageDead(_856);
        _854 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _855) -> [return: bb369, unwind: bb638];
    }

    bb369: {
        StorageDead(_855);
        _868 = discriminant(_854);
        switchInt(move _868) -> [0: bb370, 1: bb371, otherwise: bb7];
    }

    bb370: {
        StorageLive(_872);
        _872 = ((_854 as Continue).0: bool);
        _853 = _872;
        StorageDead(_872);
        StorageDead(_859);
        StorageDead(_854);
        StorageLive(_873);
        StorageLive(_874);
        _874 = _853;
        switchInt(move _874) -> [0: bb374, otherwise: bb373];
    }

    bb371: {
        StorageLive(_869);
        _869 = ((_854 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_871);
        _871 = _869;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _871) -> [return: bb372, unwind: bb638];
    }

    bb372: {
        StorageDead(_871);
        StorageDead(_869);
        goto -> bb604;
    }

    bb373: {
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        _877 = &mut _704;
        _876 = Option::<RefMut<'_, User>>::as_deref_mut(move _877) -> [return: bb375, unwind: bb638];
    }

    bb374: {
        _873 = const ();
        goto -> bb389;
    }

    bb375: {
        StorageDead(_877);
        _878 = discriminant(_876);
        switchInt(move _878) -> [1: bb376, otherwise: bb378];
    }

    bb376: {
        StorageLive(_879);
        _879 = move ((_876 as Some).0: &mut state::user::User);
        StorageLive(_880);
        StorageLive(_881);
        _881 = &mut (*_879);
        StorageLive(_882);
        _882 = _16;
        _880 = User::update_last_active_slot(move _881, move _882) -> [return: bb377, unwind: bb638];
    }

    bb377: {
        StorageDead(_882);
        StorageDead(_881);
        StorageDead(_880);
        _875 = const ();
        StorageDead(_879);
        goto -> bb379;
    }

    bb378: {
        _875 = const ();
        goto -> bb379;
    }

    bb379: {
        StorageDead(_876);
        StorageDead(_875);
        StorageLive(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        _890 = &(*_6);
        StorageLive(_891);
        StorageLive(_892);
        _892 = &_64;
        _891 = &(*_892);
        _889 = PerpMarketMap::<'_>::get_ref_mut(move _890, move _891) -> [return: bb380, unwind: bb638];
    }

    bb380: {
        StorageDead(_891);
        StorageDead(_890);
        _888 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _889) -> [return: bb381, unwind: bb638];
    }

    bb381: {
        _1378 = const true;
        StorageDead(_889);
        _893 = discriminant(_888);
        switchInt(move _893) -> [0: bb382, 1: bb383, otherwise: bb7];
    }

    bb382: {
        StorageLive(_897);
        _897 = move ((_888 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _887 = move _897;
        StorageDead(_897);
        _886 = &_887;
        _885 = <RefMut<'_, PerpMarket> as Deref>::deref(move _886) -> [return: bb385, unwind: bb637];
    }

    bb383: {
        StorageLive(_894);
        _894 = ((_888 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_896);
        _896 = _894;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _896) -> [return: bb384, unwind: bb677];
    }

    bb384: {
        StorageDead(_896);
        StorageDead(_894);
        StorageDead(_886);
        StorageDead(_884);
        _1405 = discriminant(_888);
        StorageDead(_892);
        _1378 = const false;
        StorageDead(_888);
        StorageDead(_887);
        StorageDead(_885);
        goto -> bb603;
    }

    bb385: {
        _884 = &(*_885);
        StorageDead(_886);
        _883 = PerpMarket::is_prediction_market(move _884) -> [return: bb386, unwind: bb637];
    }

    bb386: {
        switchInt(move _883) -> [0: bb388, otherwise: bb387];
    }

    bb387: {
        StorageDead(_884);
        drop(_887) -> [return: bb661, unwind: bb677];
    }

    bb388: {
        StorageDead(_884);
        drop(_887) -> [return: bb660, unwind: bb677];
    }

    bb389: {
        StorageDead(_874);
        StorageDead(_873);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        _905 = &(*_21);
        _904 = <RefMut<'_, User> as Deref>::deref(move _905) -> [return: bb390, unwind: bb638];
    }

    bb390: {
        _903 = &(*_904);
        StorageDead(_905);
        StorageLive(_906);
        _906 = _45;
        StorageLive(_907);
        _907 = _15;
        _902 = math::orders::should_expire_order_before_fill(move _903, move _906, move _907) -> [return: bb391, unwind: bb638];
    }

    bb391: {
        StorageDead(_907);
        StorageDead(_906);
        StorageDead(_903);
        _901 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _902) -> [return: bb392, unwind: bb638];
    }

    bb392: {
        StorageDead(_902);
        _908 = discriminant(_901);
        switchInt(move _908) -> [0: bb393, 1: bb394, otherwise: bb7];
    }

    bb393: {
        StorageLive(_912);
        _912 = ((_901 as Continue).0: bool);
        _900 = _912;
        StorageDead(_912);
        StorageDead(_904);
        StorageDead(_901);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _919 = &(*_21);
        _918 = <RefMut<'_, User> as Deref>::deref(move _919) -> [return: bb396, unwind: bb638];
    }

    bb394: {
        StorageLive(_909);
        _909 = ((_901 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_911);
        _911 = _909;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _911) -> [return: bb395, unwind: bb638];
    }

    bb395: {
        StorageDead(_911);
        StorageDead(_909);
        StorageDead(_904);
        StorageDead(_901);
        goto -> bb602;
    }

    bb396: {
        StorageDead(_919);
        _917 = &((*_918).4: [state::user::PerpPosition; 8]);
        _916 = &(*_917);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        _922 = &(*_21);
        _921 = <RefMut<'_, User> as Deref>::deref(move _922) -> [return: bb397, unwind: bb638];
    }

    bb397: {
        StorageDead(_922);
        StorageLive(_923);
        _923 = _45;
        _924 = Len(((*_921).5: [state::user::Order; 32]));
        _925 = Lt(_923, _924);
        assert(move _925, "index out of bounds: the length is {} but the index is {}", move _924, _923) -> [success: bb398, unwind: bb638];
    }

    bb398: {
        _920 = (((*_921).5: [state::user::Order; 32])[_923].11: u16);
        _915 = get_position_index(move _916, move _920) -> [return: bb399, unwind: bb638];
    }

    bb399: {
        StorageDead(_920);
        StorageDead(_916);
        _914 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _915) -> [return: bb400, unwind: bb638];
    }

    bb400: {
        StorageDead(_915);
        _926 = discriminant(_914);
        switchInt(move _926) -> [0: bb401, 1: bb402, otherwise: bb7];
    }

    bb401: {
        StorageLive(_930);
        _930 = ((_914 as Continue).0: usize);
        _913 = _930;
        StorageDead(_930);
        StorageDead(_923);
        StorageDead(_921);
        StorageDead(_918);
        StorageDead(_917);
        StorageDead(_914);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        _933 = &(*_21);
        _932 = <RefMut<'_, User> as Deref>::deref(move _933) -> [return: bb404, unwind: bb638];
    }

    bb402: {
        StorageLive(_927);
        _927 = ((_914 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_929);
        _929 = _927;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _929) -> [return: bb403, unwind: bb638];
    }

    bb403: {
        StorageDead(_929);
        StorageDead(_927);
        StorageDead(_923);
        StorageDead(_921);
        StorageDead(_918);
        StorageDead(_917);
        StorageDead(_914);
        goto -> bb601;
    }

    bb404: {
        StorageDead(_933);
        StorageLive(_934);
        _934 = _913;
        _935 = Len(((*_932).4: [state::user::PerpPosition; 8]));
        _936 = Lt(_934, _935);
        assert(move _936, "index out of bounds: the length is {} but the index is {}", move _935, _934) -> [success: bb405, unwind: bb638];
    }

    bb405: {
        _931 = (((*_932).4: [state::user::PerpPosition; 8])[_934].1: i64);
        StorageDead(_934);
        StorageDead(_932);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        _943 = &(*_21);
        _942 = <RefMut<'_, User> as Deref>::deref(move _943) -> [return: bb406, unwind: bb638];
    }

    bb406: {
        StorageDead(_943);
        StorageLive(_944);
        _944 = _45;
        _945 = Len(((*_942).5: [state::user::Order; 32]));
        _946 = Lt(_944, _945);
        assert(move _946, "index out of bounds: the length is {} but the index is {}", move _945, _944) -> [success: bb407, unwind: bb638];
    }

    bb407: {
        _941 = &((*_942).5: [state::user::Order; 32])[_944];
        _940 = &(*_941);
        StorageLive(_947);
        _947 = _931;
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        _954 = &(*_6);
        StorageLive(_955);
        StorageLive(_956);
        _956 = &_64;
        _955 = &(*_956);
        _953 = PerpMarketMap::<'_>::get_ref_mut(move _954, move _955) -> [return: bb408, unwind: bb638];
    }

    bb408: {
        StorageDead(_955);
        StorageDead(_954);
        _952 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _953) -> [return: bb409, unwind: bb638];
    }

    bb409: {
        _1376 = const true;
        StorageDead(_953);
        _957 = discriminant(_952);
        switchInt(move _957) -> [0: bb410, 1: bb411, otherwise: bb7];
    }

    bb410: {
        StorageLive(_961);
        _961 = move ((_952 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _951 = move _961;
        StorageDead(_961);
        _950 = &_951;
        _949 = <RefMut<'_, PerpMarket> as Deref>::deref(move _950) -> [return: bb413, unwind: bb636];
    }

    bb411: {
        StorageLive(_958);
        _958 = ((_952 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_960);
        _960 = _958;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _960) -> [return: bb412, unwind: bb676];
    }

    bb412: {
        StorageDead(_960);
        StorageDead(_958);
        StorageDead(_950);
        StorageDead(_948);
        StorageDead(_947);
        StorageDead(_940);
        StorageDead(_939);
        goto -> bb665;
    }

    bb413: {
        StorageDead(_950);
        _948 = (((*_949).1: state::perp_market::AMM).52: u64);
        _939 = math::orders::should_cancel_reduce_only_order(move _940, move _947, move _948) -> [return: bb414, unwind: bb636];
    }

    bb414: {
        StorageDead(_948);
        StorageDead(_947);
        StorageDead(_940);
        _938 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _939) -> [return: bb415, unwind: bb636];
    }

    bb415: {
        StorageDead(_939);
        _962 = discriminant(_938);
        switchInt(move _962) -> [0: bb416, 1: bb417, otherwise: bb7];
    }

    bb416: {
        StorageLive(_966);
        _966 = ((_938 as Continue).0: bool);
        _937 = _966;
        StorageDead(_966);
        drop(_951) -> [return: bb662, unwind: bb676];
    }

    bb417: {
        StorageLive(_963);
        _963 = ((_938 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_965);
        _965 = _963;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _965) -> [return: bb418, unwind: bb636];
    }

    bb418: {
        StorageDead(_965);
        StorageDead(_963);
        drop(_951) -> [return: bb665, unwind: bb676];
    }

    bb419: {
        StorageLive(_969);
        _969 = _937;
        switchInt(move _969) -> [0: bb444, otherwise: bb420];
    }

    bb420: {
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        _975 = &(*_6);
        StorageLive(_976);
        StorageLive(_977);
        _977 = &_64;
        _976 = &(*_977);
        _974 = PerpMarketMap::<'_>::get_ref_mut(move _975, move _976) -> [return: bb421, unwind: bb638];
    }

    bb421: {
        StorageDead(_976);
        StorageDead(_975);
        _973 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _974) -> [return: bb422, unwind: bb638];
    }

    bb422: {
        StorageDead(_974);
        _978 = discriminant(_973);
        switchInt(move _978) -> [0: bb423, 1: bb424, otherwise: bb7];
    }

    bb423: {
        StorageLive(_982);
        _982 = move ((_973 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _972 = move _982;
        StorageDead(_982);
        _1415 = discriminant(_973);
        StorageDead(_977);
        StorageDead(_973);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        _987 = &mut (*_21);
        _986 = <RefMut<'_, User> as DerefMut>::deref_mut(move _987) -> [return: bb426, unwind: bb635];
    }

    bb424: {
        StorageLive(_979);
        _979 = ((_973 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_981);
        _981 = _979;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _981) -> [return: bb425, unwind: bb675];
    }

    bb425: {
        StorageDead(_981);
        StorageDead(_979);
        _1413 = discriminant(_973);
        StorageDead(_977);
        StorageDead(_973);
        StorageDead(_972);
        goto -> bb599;
    }

    bb426: {
        _985 = &mut (*_986);
        StorageDead(_987);
        StorageLive(_988);
        StorageLive(_989);
        _989 = &mut _704;
        _988 = Option::<RefMut<'_, User>>::as_deref_mut(move _989) -> [return: bb427, unwind: bb635];
    }

    bb427: {
        StorageDead(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        _992 = &mut _972;
        _991 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _992) -> [return: bb428, unwind: bb635];
    }

    bb428: {
        _990 = &mut (*_991);
        StorageDead(_992);
        StorageLive(_993);
        _993 = (((*_2).5: state::state::FeeStructure).3: u64);
        StorageLive(_994);
        _994 = _16;
        _984 = pay_keeper_flat_reward_for_perps(move _985, move _988, move _990, move _993, move _994) -> [return: bb429, unwind: bb635];
    }

    bb429: {
        StorageDead(_994);
        StorageDead(_993);
        StorageDead(_990);
        StorageDead(_988);
        StorageDead(_985);
        _983 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _984) -> [return: bb430, unwind: bb635];
    }

    bb430: {
        StorageDead(_984);
        _995 = discriminant(_983);
        switchInt(move _995) -> [0: bb431, 1: bb432, otherwise: bb7];
    }

    bb431: {
        StorageLive(_999);
        _999 = ((_983 as Continue).0: u64);
        _971 = _999;
        StorageDead(_999);
        drop(_972) -> [return: bb434, unwind: bb638];
    }

    bb432: {
        StorageLive(_996);
        _996 = ((_983 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_998);
        _998 = _996;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _998) -> [return: bb433, unwind: bb635];
    }

    bb433: {
        StorageDead(_998);
        StorageDead(_996);
        drop(_972) -> [return: bb598, unwind: bb638];
    }

    bb434: {
        StorageDead(_972);
        StorageDead(_991);
        StorageDead(_986);
        StorageDead(_983);
        StorageLive(_1000);
        StorageLive(_1001);
        _1001 = _900;
        switchInt(move _1001) -> [0: bb436, otherwise: bb435];
    }

    bb435: {
        _1000 = OrderActionExplanation::OrderExpired;
        goto -> bb437;
    }

    bb436: {
        _1000 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition;
        goto -> bb437;
    }

    bb437: {
        StorageDead(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1005 = _45;
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        _1008 = &mut (*_21);
        _1007 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1008) -> [return: bb438, unwind: bb638];
    }

    bb438: {
        _1006 = &mut (*_1007);
        StorageDead(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        _1010 = &_19;
        _1009 = &(*_1010);
        StorageLive(_1011);
        _1011 = &(*_6);
        StorageLive(_1012);
        _1012 = &(*_5);
        StorageLive(_1013);
        _1013 = &mut (*_7);
        StorageLive(_1014);
        _1014 = _15;
        StorageLive(_1015);
        _1015 = _16;
        StorageLive(_1016);
        _1016 = _1000;
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        _1019 = &_17;
        _1018 = &(*_1019);
        _1017 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _1018);
        StorageDead(_1018);
        StorageLive(_1020);
        _1020 = _971;
        _1004 = controller::orders::cancel_order(move _1005, move _1006, move _1009, move _1011, move _1012, move _1013, move _1014, move _1015, move _1016, move _1017, move _1020, const false) -> [return: bb439, unwind: bb638];
    }

    bb439: {
        StorageDead(_1020);
        StorageDead(_1017);
        StorageDead(_1016);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1013);
        StorageDead(_1012);
        StorageDead(_1011);
        StorageDead(_1009);
        StorageDead(_1006);
        StorageDead(_1005);
        _1003 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1004) -> [return: bb440, unwind: bb638];
    }

    bb440: {
        StorageDead(_1004);
        _1021 = discriminant(_1003);
        switchInt(move _1021) -> [0: bb441, 1: bb442, otherwise: bb7];
    }

    bb441: {
        StorageLive(_1025);
        _1025 = ((_1003 as Continue).0: ());
        _1002 = _1025;
        StorageDead(_1025);
        StorageDead(_1019);
        StorageDead(_1010);
        StorageDead(_1007);
        StorageDead(_1003);
        StorageDead(_1002);
        StorageLive(_1026);
        _1026 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _1026);
        StorageDead(_1026);
        goto -> bb597;
    }

    bb442: {
        StorageLive(_1022);
        _1022 = ((_1003 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1024);
        _1024 = _1022;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1024) -> [return: bb443, unwind: bb638];
    }

    bb443: {
        StorageDead(_1024);
        StorageDead(_1022);
        StorageDead(_1019);
        StorageDead(_1010);
        StorageDead(_1007);
        StorageDead(_1003);
        StorageDead(_1002);
        goto -> bb597;
    }

    bb444: {
        _967 = const ();
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_967);
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = _396;
        switchInt(move _1028) -> [0: bb446, otherwise: bb445];
    }

    bb445: {
        StorageLive(_1029);
        _1029 = _391;
        switchInt(move _1029) -> [0: bb449, otherwise: bb447];
    }

    bb446: {
        _1027 = AMMAvailability::Unavailable;
        goto -> bb451;
    }

    bb447: {
        StorageLive(_1030);
        _1030 = _390;
        switchInt(move _1030) -> [0: bb449, otherwise: bb448];
    }

    bb448: {
        _1027 = AMMAvailability::Immediate;
        goto -> bb450;
    }

    bb449: {
        _1027 = AMMAvailability::AfterMinDuration;
        goto -> bb450;
    }

    bb450: {
        StorageDead(_1030);
        StorageDead(_1029);
        goto -> bb451;
    }

    bb451: {
        StorageDead(_1028);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        _1038 = &mut (*_21);
        _1037 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1038) -> [return: bb452, unwind: bb638];
    }

    bb452: {
        _1036 = &mut (*_1037);
        StorageDead(_1038);
        StorageLive(_1039);
        _1039 = _45;
        StorageLive(_1040);
        StorageLive(_1041);
        _1041 = &_19;
        _1040 = &(*_1041);
        StorageLive(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        _1044 = &mut (*_33);
        _1043 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1044) -> [return: bb453, unwind: bb638];
    }

    bb453: {
        _1042 = &mut (*_1043);
        StorageDead(_1044);
        StorageLive(_1045);
        _1045 = &(*_10);
        StorageLive(_1046);
        _1046 = &(*_11);
        StorageLive(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        _1050 = &_800;
        _1049 = &(*_1050);
        _1048 = <Vec<(anchor_lang::prelude::Pubkey, usize, u64)> as Deref>::deref(move _1049) -> [return: bb454, unwind: bb638];
    }

    bb454: {
        _1047 = &(*_1048);
        StorageDead(_1049);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        _1054 = &mut _704;
        _1053 = Option::<RefMut<'_, User>>::as_deref_mut(move _1054) -> [return: bb455, unwind: bb638];
    }

    bb455: {
        StorageDead(_1054);
        _1052 = &mut _1053;
        _1051 = &mut (*_1052);
        StorageLive(_1055);
        StorageLive(_1056);
        _1056 = &_17;
        _1055 = &(*_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        StorageLive(_1059);
        StorageLive(_1060);
        _1060 = &mut _705;
        _1059 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _1060) -> [return: bb456, unwind: bb638];
    }

    bb456: {
        StorageDead(_1060);
        _1058 = &mut _1059;
        _1057 = &mut (*_1058);
        StorageLive(_1061);
        _1061 = _835;
        StorageLive(_1062);
        _1062 = &(*_5);
        StorageLive(_1063);
        _1063 = &(*_6);
        StorageLive(_1064);
        _1064 = &mut (*_7);
        StorageLive(_1065);
        StorageLive(_1066);
        _1066 = &((*_2).5: state::state::FeeStructure);
        _1065 = &(*_1066);
        StorageLive(_1067);
        _1067 = _385;
        StorageLive(_1068);
        _1068 = _665;
        StorageLive(_1069);
        _1069 = _15;
        StorageLive(_1070);
        _1070 = _16;
        StorageLive(_1071);
        _1071 = _395;
        StorageLive(_1072);
        _1072 = _1027;
        StorageLive(_1073);
        _1073 = _14;
        StorageLive(_1074);
        _1074 = _394;
        _1035 = fulfill_perp_order(move _1036, move _1039, move _1040, move _1042, move _1045, move _1046, move _1047, move _1051, move _1055, move _1057, move _1061, move _1062, move _1063, move _1064, move _1065, move _1067, move _1068, move _1069, move _1070, move _1071, move _1072, move _1073, move _1074) -> [return: bb457, unwind: bb638];
    }

    bb457: {
        StorageDead(_1074);
        StorageDead(_1073);
        StorageDead(_1072);
        StorageDead(_1071);
        StorageDead(_1070);
        StorageDead(_1069);
        StorageDead(_1068);
        StorageDead(_1067);
        StorageDead(_1065);
        StorageDead(_1064);
        StorageDead(_1063);
        StorageDead(_1062);
        StorageDead(_1061);
        StorageDead(_1057);
        StorageDead(_1055);
        StorageDead(_1051);
        StorageDead(_1047);
        StorageDead(_1046);
        StorageDead(_1045);
        StorageDead(_1042);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1036);
        _1034 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _1035) -> [return: bb458, unwind: bb638];
    }

    bb458: {
        StorageDead(_1035);
        _1075 = discriminant(_1034);
        switchInt(move _1075) -> [0: bb459, 1: bb460, otherwise: bb7];
    }

    bb459: {
        StorageLive(_1079);
        _1079 = ((_1034 as Continue).0: (u64, u64));
        _1033 = _1079;
        StorageDead(_1079);
        StorageLive(_1031);
        _1031 = (_1033.0: u64);
        StorageLive(_1032);
        _1032 = (_1033.1: u64);
        StorageDead(_1066);
        StorageDead(_1059);
        StorageDead(_1058);
        StorageDead(_1056);
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1050);
        StorageDead(_1048);
        StorageDead(_1043);
        StorageDead(_1041);
        StorageDead(_1037);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        _1082 = _1031;
        _1081 = Ne(move _1082, const 0_u64);
        switchInt(move _1081) -> [0: bb463, otherwise: bb462];
    }

    bb460: {
        StorageLive(_1076);
        _1076 = ((_1034 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1078);
        _1078 = _1076;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1078) -> [return: bb461, unwind: bb638];
    }

    bb461: {
        StorageDead(_1078);
        StorageDead(_1076);
        StorageDead(_1066);
        StorageDead(_1059);
        StorageDead(_1058);
        StorageDead(_1056);
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1050);
        StorageDead(_1048);
        StorageDead(_1043);
        StorageDead(_1041);
        StorageDead(_1037);
        StorageDead(_1034);
        StorageDead(_1033);
        goto -> bb596;
    }

    bb462: {
        StorageDead(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        _1086 = _1032;
        StorageLive(_1087);
        _1087 = _1031;
        _1085 = math::orders::calculate_fill_price(move _1086, move _1087, const _) -> [return: bb464, unwind: bb638];
    }

    bb463: {
        StorageDead(_1082);
        _1080 = const ();
        goto -> bb485;
    }

    bb464: {
        StorageDead(_1087);
        StorageDead(_1086);
        _1084 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1085) -> [return: bb465, unwind: bb638];
    }

    bb465: {
        StorageDead(_1085);
        _1088 = discriminant(_1084);
        switchInt(move _1088) -> [0: bb466, 1: bb467, otherwise: bb7];
    }

    bb466: {
        StorageLive(_1092);
        _1092 = ((_1084 as Continue).0: u64);
        _1083 = _1092;
        StorageDead(_1092);
        StorageDead(_1084);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        StorageLive(_1096);
        _1096 = &(*_6);
        StorageLive(_1097);
        StorageLive(_1098);
        _1098 = &_64;
        _1097 = &(*_1098);
        _1095 = PerpMarketMap::<'_>::get_ref_mut(move _1096, move _1097) -> [return: bb469, unwind: bb638];
    }

    bb467: {
        StorageLive(_1089);
        _1089 = ((_1084 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1091);
        _1091 = _1089;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1091) -> [return: bb468, unwind: bb638];
    }

    bb468: {
        StorageDead(_1091);
        StorageDead(_1089);
        StorageDead(_1084);
        goto -> bb594;
    }

    bb469: {
        StorageDead(_1097);
        StorageDead(_1096);
        _1094 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1095) -> [return: bb470, unwind: bb638];
    }

    bb470: {
        StorageDead(_1095);
        _1099 = discriminant(_1094);
        switchInt(move _1099) -> [0: bb471, 1: bb472, otherwise: bb7];
    }

    bb471: {
        StorageLive(_1103);
        _1103 = move ((_1094 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1093 = move _1103;
        StorageDead(_1103);
        _1419 = discriminant(_1094);
        StorageDead(_1098);
        StorageDead(_1094);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        StorageLive(_1107);
        _1107 = _1083;
        StorageLive(_1108);
        _1108 = _387;
        StorageLive(_1109);
        _1109 = _388;
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        _1112 = &_1093;
        _1111 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1112) -> [return: bb474, unwind: bb634];
    }

    bb472: {
        StorageLive(_1100);
        _1100 = ((_1094 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1102);
        _1102 = _1100;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1102) -> [return: bb473, unwind: bb674];
    }

    bb473: {
        StorageDead(_1102);
        StorageDead(_1100);
        _1417 = discriminant(_1094);
        StorageDead(_1098);
        StorageDead(_1094);
        goto -> bb593;
    }

    bb474: {
        StorageDead(_1112);
        _1110 = ((*_1111).15: u32);
        StorageLive(_1113);
        StorageLive(_1114);
        _1114 = &((*_2).7: state::state::OracleGuardRails);
        _1113 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1114) -> [return: bb475, unwind: bb634];
    }

    bb475: {
        StorageDead(_1114);
        StorageLive(_1115);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        _1118 = &_1093;
        _1117 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1118) -> [return: bb476, unwind: bb634];
    }

    bb476: {
        _1116 = &(*_1117);
        StorageDead(_1118);
        _1115 = PerpMarket::is_prediction_market(move _1116) -> [return: bb477, unwind: bb634];
    }

    bb477: {
        StorageDead(_1116);
        StorageLive(_1119);
        _1119 = Option::<controller::position::PositionDirection>::None;
        _1106 = math::orders::validate_fill_price_within_price_bands(move _1107, move _1108, move _1109, move _1110, move _1113, move _1115, move _1119) -> [return: bb478, unwind: bb634];
    }

    bb478: {
        StorageDead(_1119);
        StorageDead(_1115);
        StorageDead(_1113);
        StorageDead(_1110);
        StorageDead(_1109);
        StorageDead(_1108);
        StorageDead(_1107);
        _1105 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1106) -> [return: bb479, unwind: bb634];
    }

    bb479: {
        StorageDead(_1106);
        _1120 = discriminant(_1105);
        switchInt(move _1120) -> [0: bb480, 1: bb481, otherwise: bb7];
    }

    bb480: {
        StorageLive(_1124);
        _1124 = ((_1105 as Continue).0: ());
        _1104 = _1124;
        StorageDead(_1124);
        StorageDead(_1117);
        StorageDead(_1111);
        StorageDead(_1105);
        StorageDead(_1104);
        StorageLive(_1125);
        _1125 = _1083;
        StorageLive(_1126);
        StorageLive(_1127);
        _1127 = &mut _1093;
        _1126 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1127) -> [return: bb483, unwind: bb634];
    }

    bb481: {
        StorageLive(_1121);
        _1121 = ((_1105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1123);
        _1123 = _1121;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1123) -> [return: bb482, unwind: bb634];
    }

    bb482: {
        StorageDead(_1123);
        StorageDead(_1121);
        StorageDead(_1117);
        StorageDead(_1111);
        StorageDead(_1105);
        StorageDead(_1104);
        drop(_1093) -> [return: bb593, unwind: bb638];
    }

    bb483: {
        StorageDead(_1127);
        ((*_1126).37: u64) = move _1125;
        StorageDead(_1125);
        StorageDead(_1126);
        _1080 = const ();
        drop(_1093) -> [return: bb484, unwind: bb638];
    }

    bb484: {
        StorageDead(_1093);
        StorageDead(_1083);
        goto -> bb485;
    }

    bb485: {
        StorageDead(_1081);
        StorageDead(_1080);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        _1130 = &(*_21);
        _1129 = <RefMut<'_, User> as Deref>::deref(move _1130) -> [return: bb486, unwind: bb638];
    }

    bb486: {
        StorageDead(_1130);
        StorageLive(_1131);
        _1131 = _913;
        _1132 = Len(((*_1129).4: [state::user::PerpPosition; 8]));
        _1133 = Lt(_1131, _1132);
        assert(move _1133, "index out of bounds: the length is {} but the index is {}", move _1132, _1131) -> [success: bb487, unwind: bb638];
    }

    bb487: {
        _1128 = (((*_1129).4: [state::user::PerpPosition; 8])[_1131].1: i64);
        StorageDead(_1131);
        StorageDead(_1129);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        _1140 = &(*_21);
        _1139 = <RefMut<'_, User> as Deref>::deref(move _1140) -> [return: bb488, unwind: bb638];
    }

    bb488: {
        StorageDead(_1140);
        StorageLive(_1141);
        _1141 = _45;
        _1142 = Len(((*_1139).5: [state::user::Order; 32]));
        _1143 = Lt(_1141, _1142);
        assert(move _1143, "index out of bounds: the length is {} but the index is {}", move _1142, _1141) -> [success: bb489, unwind: bb638];
    }

    bb489: {
        _1138 = &((*_1139).5: [state::user::Order; 32])[_1141];
        _1137 = &(*_1138);
        StorageLive(_1144);
        _1144 = _1128;
        StorageLive(_1145);
        StorageLive(_1146);
        StorageLive(_1147);
        StorageLive(_1148);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        _1151 = &(*_6);
        StorageLive(_1152);
        StorageLive(_1153);
        _1153 = &_64;
        _1152 = &(*_1153);
        _1150 = PerpMarketMap::<'_>::get_ref_mut(move _1151, move _1152) -> [return: bb490, unwind: bb638];
    }

    bb490: {
        StorageDead(_1152);
        StorageDead(_1151);
        _1149 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1150) -> [return: bb491, unwind: bb638];
    }

    bb491: {
        _1375 = const true;
        StorageDead(_1150);
        _1154 = discriminant(_1149);
        switchInt(move _1154) -> [0: bb492, 1: bb493, otherwise: bb7];
    }

    bb492: {
        StorageLive(_1158);
        _1158 = move ((_1149 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1148 = move _1158;
        StorageDead(_1158);
        _1147 = &_1148;
        _1146 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1147) -> [return: bb495, unwind: bb633];
    }

    bb493: {
        StorageLive(_1155);
        _1155 = ((_1149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1157);
        _1157 = _1155;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1157) -> [return: bb494, unwind: bb673];
    }

    bb494: {
        StorageDead(_1157);
        StorageDead(_1155);
        StorageDead(_1147);
        StorageDead(_1145);
        StorageDead(_1144);
        StorageDead(_1137);
        StorageDead(_1136);
        goto -> bb664;
    }

    bb495: {
        StorageDead(_1147);
        _1145 = (((*_1146).1: state::perp_market::AMM).52: u64);
        _1136 = math::orders::should_cancel_reduce_only_order(move _1137, move _1144, move _1145) -> [return: bb496, unwind: bb633];
    }

    bb496: {
        StorageDead(_1145);
        StorageDead(_1144);
        StorageDead(_1137);
        _1135 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1136) -> [return: bb497, unwind: bb633];
    }

    bb497: {
        StorageDead(_1136);
        _1159 = discriminant(_1135);
        switchInt(move _1159) -> [0: bb498, 1: bb499, otherwise: bb7];
    }

    bb498: {
        StorageLive(_1163);
        _1163 = ((_1135 as Continue).0: bool);
        _1134 = _1163;
        StorageDead(_1163);
        drop(_1148) -> [return: bb663, unwind: bb673];
    }

    bb499: {
        StorageLive(_1160);
        _1160 = ((_1135 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1162);
        _1162 = _1160;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1162) -> [return: bb500, unwind: bb633];
    }

    bb500: {
        StorageDead(_1162);
        StorageDead(_1160);
        drop(_1148) -> [return: bb664, unwind: bb673];
    }

    bb501: {
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        StorageLive(_1169);
        StorageLive(_1170);
        _1170 = &(*_6);
        StorageLive(_1171);
        StorageLive(_1172);
        _1172 = &_64;
        _1171 = &(*_1172);
        _1169 = PerpMarketMap::<'_>::get_ref_mut(move _1170, move _1171) -> [return: bb502, unwind: bb638];
    }

    bb502: {
        StorageDead(_1171);
        StorageDead(_1170);
        _1168 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1169) -> [return: bb503, unwind: bb638];
    }

    bb503: {
        StorageDead(_1169);
        _1173 = discriminant(_1168);
        switchInt(move _1173) -> [0: bb504, 1: bb505, otherwise: bb7];
    }

    bb504: {
        StorageLive(_1177);
        _1177 = move ((_1168 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1167 = move _1177;
        StorageDead(_1177);
        _1425 = discriminant(_1168);
        StorageDead(_1172);
        StorageDead(_1168);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        StorageLive(_1181);
        StorageLive(_1182);
        _1182 = &mut (*_21);
        _1181 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1182) -> [return: bb507, unwind: bb632];
    }

    bb505: {
        StorageLive(_1174);
        _1174 = ((_1168 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1176);
        _1176 = _1174;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1176) -> [return: bb506, unwind: bb672];
    }

    bb506: {
        StorageDead(_1176);
        StorageDead(_1174);
        _1423 = discriminant(_1168);
        StorageDead(_1172);
        StorageDead(_1168);
        StorageDead(_1167);
        goto -> bb590;
    }

    bb507: {
        _1180 = &mut (*_1181);
        StorageDead(_1182);
        StorageLive(_1183);
        StorageLive(_1184);
        _1184 = &mut _704;
        _1183 = Option::<RefMut<'_, User>>::as_deref_mut(move _1184) -> [return: bb508, unwind: bb632];
    }

    bb508: {
        StorageDead(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        _1187 = &mut _1167;
        _1186 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1187) -> [return: bb509, unwind: bb632];
    }

    bb509: {
        _1185 = &mut (*_1186);
        StorageDead(_1187);
        StorageLive(_1188);
        _1188 = (((*_2).5: state::state::FeeStructure).3: u64);
        StorageLive(_1189);
        _1189 = _16;
        _1179 = pay_keeper_flat_reward_for_perps(move _1180, move _1183, move _1185, move _1188, move _1189) -> [return: bb510, unwind: bb632];
    }

    bb510: {
        StorageDead(_1189);
        StorageDead(_1188);
        StorageDead(_1185);
        StorageDead(_1183);
        StorageDead(_1180);
        _1178 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1179) -> [return: bb511, unwind: bb632];
    }

    bb511: {
        StorageDead(_1179);
        _1190 = discriminant(_1178);
        switchInt(move _1190) -> [0: bb512, 1: bb513, otherwise: bb7];
    }

    bb512: {
        StorageLive(_1194);
        _1194 = ((_1178 as Continue).0: u64);
        _1166 = _1194;
        StorageDead(_1194);
        drop(_1167) -> [return: bb515, unwind: bb638];
    }

    bb513: {
        StorageLive(_1191);
        _1191 = ((_1178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1193);
        _1193 = _1191;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1193) -> [return: bb514, unwind: bb632];
    }

    bb514: {
        StorageDead(_1193);
        StorageDead(_1191);
        drop(_1167) -> [return: bb589, unwind: bb638];
    }

    bb515: {
        StorageDead(_1167);
        StorageDead(_1186);
        StorageDead(_1181);
        StorageDead(_1178);
        StorageLive(_1195);
        _1195 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition;
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        _1198 = _45;
        StorageLive(_1199);
        StorageLive(_1200);
        StorageLive(_1201);
        _1201 = &mut (*_21);
        _1200 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1201) -> [return: bb516, unwind: bb638];
    }

    bb516: {
        _1199 = &mut (*_1200);
        StorageDead(_1201);
        StorageLive(_1202);
        StorageLive(_1203);
        _1203 = &_19;
        _1202 = &(*_1203);
        StorageLive(_1204);
        _1204 = &(*_6);
        StorageLive(_1205);
        _1205 = &(*_5);
        StorageLive(_1206);
        _1206 = &mut (*_7);
        StorageLive(_1207);
        _1207 = _15;
        StorageLive(_1208);
        _1208 = _16;
        StorageLive(_1209);
        _1209 = _1195;
        StorageLive(_1210);
        StorageLive(_1211);
        StorageLive(_1212);
        _1212 = &_17;
        _1211 = &(*_1212);
        _1210 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _1211);
        StorageDead(_1211);
        StorageLive(_1213);
        _1213 = _1166;
        _1197 = controller::orders::cancel_order(move _1198, move _1199, move _1202, move _1204, move _1205, move _1206, move _1207, move _1208, move _1209, move _1210, move _1213, const false) -> [return: bb517, unwind: bb638];
    }

    bb517: {
        StorageDead(_1213);
        StorageDead(_1210);
        StorageDead(_1209);
        StorageDead(_1208);
        StorageDead(_1207);
        StorageDead(_1206);
        StorageDead(_1205);
        StorageDead(_1204);
        StorageDead(_1202);
        StorageDead(_1199);
        StorageDead(_1198);
        _1196 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1197) -> [return: bb518, unwind: bb638];
    }

    bb518: {
        StorageDead(_1197);
        _1214 = discriminant(_1196);
        switchInt(move _1214) -> [0: bb519, 1: bb520, otherwise: bb7];
    }

    bb519: {
        StorageLive(_1218);
        _1218 = ((_1196 as Continue).0: ());
        _1164 = _1218;
        StorageDead(_1218);
        StorageDead(_1195);
        StorageDead(_1166);
        StorageDead(_1212);
        StorageDead(_1203);
        StorageDead(_1200);
        StorageDead(_1196);
        goto -> bb523;
    }

    bb520: {
        StorageLive(_1215);
        _1215 = ((_1196 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1217);
        _1217 = _1215;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1217) -> [return: bb521, unwind: bb638];
    }

    bb521: {
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1195);
        StorageDead(_1166);
        StorageDead(_1212);
        StorageDead(_1203);
        StorageDead(_1200);
        StorageDead(_1196);
        goto -> bb591;
    }

    bb522: {
        _1164 = const ();
        goto -> bb523;
    }

    bb523: {
        StorageDead(_1165);
        StorageDead(_1164);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        _1221 = _1031;
        _1220 = Eq(move _1221, const 0_u64);
        switchInt(move _1220) -> [0: bb525, otherwise: bb524];
    }

    bb524: {
        StorageDead(_1221);
        StorageLive(_1223);
        StorageLive(_1224);
        _1224 = _1031;
        StorageLive(_1225);
        _1225 = _1032;
        _1223 = (move _1224, move _1225);
        StorageDead(_1225);
        StorageDead(_1224);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _1223);
        StorageDead(_1223);
        StorageDead(_1220);
        StorageDead(_1219);
        goto -> bb592;
    }

    bb525: {
        StorageDead(_1221);
        _1219 = const ();
        StorageDead(_1220);
        StorageDead(_1219);
        StorageLive(_1226);
        StorageLive(_1227);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        _1230 = &(*_6);
        StorageLive(_1231);
        StorageLive(_1232);
        _1232 = &_64;
        _1231 = &(*_1232);
        _1229 = PerpMarketMap::<'_>::get_ref(move _1230, move _1231) -> [return: bb526, unwind: bb638];
    }

    bb526: {
        StorageDead(_1231);
        StorageDead(_1230);
        _1228 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1229) -> [return: bb527, unwind: bb638];
    }

    bb527: {
        StorageDead(_1229);
        _1233 = discriminant(_1228);
        switchInt(move _1233) -> [0: bb528, 1: bb529, otherwise: bb7];
    }

    bb528: {
        StorageLive(_1237);
        _1237 = move ((_1228 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1227 = move _1237;
        StorageDead(_1237);
        _1429 = discriminant(_1228);
        StorageDead(_1232);
        StorageDead(_1228);
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        _1241 = &_1227;
        _1240 = <Ref<'_, PerpMarket> as Deref>::deref(move _1241) -> [return: bb531, unwind: bb631];
    }

    bb529: {
        StorageLive(_1234);
        _1234 = ((_1228 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1236);
        _1236 = _1234;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1236) -> [return: bb530, unwind: bb671];
    }

    bb530: {
        StorageDead(_1236);
        StorageDead(_1234);
        _1427 = discriminant(_1228);
        StorageDead(_1232);
        StorageDead(_1228);
        goto -> bb588;
    }

    bb531: {
        _1239 = &(*_1240);
        StorageDead(_1241);
        _1238 = PerpMarket::get_open_interest(move _1239) -> [return: bb532, unwind: bb631];
    }

    bb532: {
        StorageDead(_1239);
        StorageDead(_1240);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        _1244 = &_1227;
        _1243 = <Ref<'_, PerpMarket> as Deref>::deref(move _1244) -> [return: bb533, unwind: bb631];
    }

    bb533: {
        StorageDead(_1244);
        _1242 = (((*_1243).1: state::perp_market::AMM).17: u128);
        StorageDead(_1243);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        _1249 = _1242;
        _1248 = Eq(move _1249, const 0_u128);
        switchInt(move _1248) -> [0: bb535, otherwise: bb534];
    }

    bb534: {
        StorageDead(_1249);
        goto -> bb536;
    }

    bb535: {
        StorageDead(_1249);
        StorageLive(_1250);
        StorageLive(_1251);
        _1251 = _1242;
        StorageLive(_1252);
        _1252 = _1238;
        _1250 = Gt(move _1251, move _1252);
        switchInt(move _1250) -> [0: bb537, otherwise: bb536];
    }

    bb536: {
        StorageDead(_1252);
        StorageDead(_1251);
        StorageLive(_1253);
        _1253 = ();
        _1247 = std::result::Result::<(), error::ErrorCode>::Ok(move _1253);
        StorageDead(_1253);
        goto -> bb551;
    }

    bb537: {
        StorageDead(_1252);
        StorageDead(_1251);
        StorageLive(_1254);
        _1254 = error::ErrorCode::MaxOpenInterest;
        StorageLive(_1255);
        StorageLive(_1256);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        StorageLive(_1261);
        StorageLive(_1262);
        StorageLive(_1263);
        StorageLive(_1264);
        StorageLive(_1265);
        _1358 = const _;
        _1265 = &(*_1358);
        _1264 = &(*_1265);
        _1263 = move _1264 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1264);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        _1273 = &_1254;
        _1272 = &(*_1273);
        _1271 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1272) -> [return: bb538, unwind: bb631];
    }

    bb538: {
        StorageDead(_1272);
        _1270 = [move _1271];
        StorageDead(_1271);
        _1269 = &_1270;
        _1268 = &(*_1269);
        _1267 = move _1268 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1268);
        _1262 = Arguments::<'_>::new_v1(move _1263, move _1267) -> [return: bb539, unwind: bb631];
    }

    bb539: {
        StorageDead(_1267);
        StorageDead(_1263);
        _1261 = format(move _1262) -> [return: bb540, unwind: bb631];
    }

    bb540: {
        StorageDead(_1262);
        StorageDead(_1273);
        StorageDead(_1270);
        StorageDead(_1269);
        StorageDead(_1265);
        _1260 = move _1261;
        StorageDead(_1261);
        _1259 = &_1260;
        _1258 = &(*_1259);
        _1257 = <String as Deref>::deref(move _1258) -> [return: bb541, unwind: bb630];
    }

    bb541: {
        _1256 = &(*_1257);
        StorageDead(_1258);
        _1255 = solana_program::log::sol_log(move _1256) -> [return: bb542, unwind: bb630];
    }

    bb542: {
        StorageDead(_1256);
        drop(_1260) -> [return: bb543, unwind: bb631];
    }

    bb543: {
        StorageDead(_1260);
        StorageDead(_1259);
        StorageDead(_1257);
        StorageDead(_1255);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        StorageLive(_1277);
        StorageLive(_1278);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        _1357 = const _;
        _1284 = &(*_1357);
        _1283 = &(*_1284);
        _1282 = move _1283 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1283);
        StorageLive(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        StorageLive(_1289);
        StorageLive(_1290);
        StorageLive(_1291);
        StorageLive(_1292);
        _1292 = &_1238;
        _1291 = &(*_1292);
        _1290 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1291) -> [return: bb544, unwind: bb631];
    }

    bb544: {
        StorageDead(_1291);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        _1295 = &_1242;
        _1294 = &(*_1295);
        _1293 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1294) -> [return: bb545, unwind: bb631];
    }

    bb545: {
        StorageDead(_1294);
        _1289 = [move _1290, move _1293];
        StorageDead(_1293);
        StorageDead(_1290);
        _1288 = &_1289;
        _1287 = &(*_1288);
        _1286 = move _1287 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1287);
        _1281 = Arguments::<'_>::new_v1(move _1282, move _1286) -> [return: bb546, unwind: bb631];
    }

    bb546: {
        StorageDead(_1286);
        StorageDead(_1282);
        _1280 = format(move _1281) -> [return: bb547, unwind: bb631];
    }

    bb547: {
        StorageDead(_1281);
        StorageDead(_1295);
        StorageDead(_1292);
        StorageDead(_1289);
        StorageDead(_1288);
        StorageDead(_1284);
        _1279 = move _1280;
        StorageDead(_1280);
        _1278 = &_1279;
        _1277 = &(*_1278);
        _1276 = <String as Deref>::deref(move _1277) -> [return: bb548, unwind: bb629];
    }

    bb548: {
        _1275 = &(*_1276);
        StorageDead(_1277);
        _1274 = solana_program::log::sol_log(move _1275) -> [return: bb549, unwind: bb629];
    }

    bb549: {
        StorageDead(_1275);
        drop(_1279) -> [return: bb550, unwind: bb631];
    }

    bb550: {
        StorageDead(_1279);
        StorageDead(_1278);
        StorageDead(_1276);
        StorageDead(_1274);
        StorageLive(_1296);
        _1296 = _1254;
        _1247 = std::result::Result::<(), error::ErrorCode>::Err(move _1296);
        StorageDead(_1296);
        StorageDead(_1254);
        goto -> bb551;
    }

    bb551: {
        StorageDead(_1250);
        StorageDead(_1248);
        _1246 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1247) -> [return: bb552, unwind: bb631];
    }

    bb552: {
        StorageDead(_1247);
        _1297 = discriminant(_1246);
        switchInt(move _1297) -> [0: bb553, 1: bb554, otherwise: bb7];
    }

    bb553: {
        StorageLive(_1301);
        _1301 = ((_1246 as Continue).0: ());
        _1245 = _1301;
        StorageDead(_1301);
        StorageDead(_1246);
        StorageDead(_1245);
        _1226 = const ();
        StorageDead(_1242);
        StorageDead(_1238);
        drop(_1227) -> [return: bb556, unwind: bb638];
    }

    bb554: {
        StorageLive(_1298);
        _1298 = ((_1246 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1300);
        _1300 = _1298;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1300) -> [return: bb555, unwind: bb631];
    }

    bb555: {
        StorageDead(_1300);
        StorageDead(_1298);
        StorageDead(_1246);
        StorageDead(_1245);
        StorageDead(_1242);
        StorageDead(_1238);
        drop(_1227) -> [return: bb588, unwind: bb638];
    }

    bb556: {
        StorageDead(_1227);
        StorageDead(_1226);
        StorageLive(_1302);
        StorageLive(_1303);
        StorageLive(_1304);
        StorageLive(_1305);
        StorageLive(_1306);
        StorageLive(_1307);
        _1307 = &(*_6);
        StorageLive(_1308);
        StorageLive(_1309);
        _1309 = &_64;
        _1308 = &(*_1309);
        _1306 = PerpMarketMap::<'_>::get_ref_mut(move _1307, move _1308) -> [return: bb557, unwind: bb638];
    }

    bb557: {
        StorageDead(_1308);
        StorageDead(_1307);
        _1305 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1306) -> [return: bb558, unwind: bb638];
    }

    bb558: {
        StorageDead(_1306);
        _1310 = discriminant(_1305);
        switchInt(move _1310) -> [0: bb559, 1: bb560, otherwise: bb7];
    }

    bb559: {
        StorageLive(_1314);
        _1314 = move ((_1305 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1304 = move _1314;
        StorageDead(_1314);
        _1303 = &mut _1304;
        _1433 = discriminant(_1305);
        StorageDead(_1309);
        StorageDead(_1305);
        StorageLive(_1315);
        StorageLive(_1316);
        StorageLive(_1317);
        StorageLive(_1318);
        StorageLive(_1319);
        _1319 = &(*_2);
        _1318 = state::state::State::funding_paused(move _1319) -> [return: bb562, unwind: bb628];
    }

    bb560: {
        StorageLive(_1311);
        _1311 = ((_1305 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1313);
        _1313 = _1311;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1313) -> [return: bb561, unwind: bb670];
    }

    bb561: {
        StorageDead(_1313);
        StorageDead(_1311);
        _1431 = discriminant(_1305);
        StorageDead(_1309);
        StorageDead(_1305);
        goto -> bb587;
    }

    bb562: {
        StorageDead(_1319);
        _1317 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1318) -> [return: bb563, unwind: bb628];
    }

    bb563: {
        StorageDead(_1318);
        _1320 = discriminant(_1317);
        switchInt(move _1320) -> [0: bb564, 1: bb565, otherwise: bb7];
    }

    bb564: {
        StorageLive(_1324);
        _1324 = ((_1317 as Continue).0: bool);
        _1316 = _1324;
        StorageDead(_1324);
        switchInt(move _1316) -> [0: bb568, otherwise: bb567];
    }

    bb565: {
        StorageLive(_1321);
        _1321 = ((_1317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1323);
        _1323 = _1321;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1323) -> [return: bb566, unwind: bb628];
    }

    bb566: {
        StorageDead(_1323);
        StorageDead(_1321);
        StorageDead(_1317);
        StorageDead(_1316);
        goto -> bb586;
    }

    bb567: {
        StorageDead(_1317);
        _1315 = const true;
        goto -> bb571;
    }

    bb568: {
        StorageDead(_1317);
        StorageLive(_1325);
        StorageLive(_1326);
        StorageLive(_1327);
        _1327 = &(*_1303);
        _1326 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1327) -> [return: bb569, unwind: bb628];
    }

    bb569: {
        _1325 = &(*_1326);
        StorageDead(_1327);
        StorageLive(_1328);
        _1328 = PerpOperation::UpdateFunding;
        _1315 = PerpMarket::is_operation_paused(move _1325, move _1328) -> [return: bb570, unwind: bb628];
    }

    bb570: {
        StorageDead(_1328);
        StorageDead(_1326);
        StorageDead(_1325);
        goto -> bb571;
    }

    bb571: {
        StorageDead(_1316);
        StorageLive(_1329);
        StorageLive(_1330);
        StorageLive(_1331);
        StorageLive(_1332);
        _1332 = _64;
        StorageLive(_1333);
        StorageLive(_1334);
        StorageLive(_1335);
        _1335 = &mut (*_1303);
        _1334 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1335) -> [return: bb572, unwind: bb628];
    }

    bb572: {
        _1333 = &mut (*_1334);
        StorageDead(_1335);
        StorageLive(_1336);
        _1336 = &mut (*_7);
        StorageLive(_1337);
        _1337 = _15;
        StorageLive(_1338);
        _1338 = _16;
        StorageLive(_1339);
        StorageLive(_1340);
        _1340 = &((*_2).7: state::state::OracleGuardRails);
        _1339 = &(*_1340);
        StorageLive(_1341);
        _1341 = _1315;
        StorageLive(_1342);
        StorageLive(_1343);
        _1343 = _385;
        _1342 = Option::<u64>::Some(move _1343);
        StorageDead(_1343);
        _1331 = controller::funding::update_funding_rate(move _1332, move _1333, move _1336, move _1337, move _1338, move _1339, move _1341, move _1342) -> [return: bb573, unwind: bb628];
    }

    bb573: {
        StorageDead(_1342);
        StorageDead(_1341);
        StorageDead(_1339);
        StorageDead(_1338);
        StorageDead(_1337);
        StorageDead(_1336);
        StorageDead(_1333);
        StorageDead(_1332);
        _1330 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1331) -> [return: bb574, unwind: bb628];
    }

    bb574: {
        StorageDead(_1331);
        _1344 = discriminant(_1330);
        switchInt(move _1344) -> [0: bb575, 1: bb576, otherwise: bb7];
    }

    bb575: {
        StorageLive(_1348);
        _1348 = ((_1330 as Continue).0: bool);
        _1329 = _1348;
        StorageDead(_1348);
        StorageDead(_1340);
        StorageDead(_1334);
        StorageDead(_1330);
        StorageDead(_1329);
        _1302 = const ();
        StorageDead(_1315);
        drop(_1304) -> [return: bb578, unwind: bb638];
    }

    bb576: {
        StorageLive(_1345);
        _1345 = ((_1330 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1347);
        _1347 = _1345;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1347) -> [return: bb577, unwind: bb628];
    }

    bb577: {
        StorageDead(_1347);
        StorageDead(_1345);
        StorageDead(_1340);
        StorageDead(_1334);
        StorageDead(_1330);
        StorageDead(_1329);
        goto -> bb586;
    }

    bb578: {
        StorageDead(_1304);
        StorageDead(_1303);
        StorageDead(_1302);
        StorageLive(_1349);
        StorageLive(_1350);
        StorageLive(_1351);
        StorageLive(_1352);
        _1352 = &mut (*_21);
        _1351 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1352) -> [return: bb579, unwind: bb638];
    }

    bb579: {
        _1350 = &mut (*_1351);
        StorageDead(_1352);
        StorageLive(_1353);
        _1353 = _16;
        _1349 = User::update_last_active_slot(move _1350, move _1353) -> [return: bb580, unwind: bb638];
    }

    bb580: {
        StorageDead(_1353);
        StorageDead(_1350);
        StorageDead(_1351);
        StorageDead(_1349);
        StorageLive(_1354);
        StorageLive(_1355);
        _1355 = _1031;
        StorageLive(_1356);
        _1356 = _1032;
        _1354 = (move _1355, move _1356);
        StorageDead(_1356);
        StorageDead(_1355);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _1354);
        StorageDead(_1354);
        StorageDead(_1134);
        StorageDead(_1128);
        StorageDead(_1032);
        StorageDead(_1031);
        StorageDead(_1027);
        StorageDead(_937);
        StorageDead(_931);
        StorageDead(_913);
        StorageDead(_900);
        StorageDead(_853);
        StorageDead(_835);
        drop(_800) -> [return: bb581, unwind: bb639];
    }

    bb581: {
        StorageDead(_800);
        drop(_705) -> [return: bb582, unwind: bb640];
    }

    bb582: {
        StorageDead(_705);
        drop(_704) -> [return: bb583, unwind: bb685];
    }

    bb583: {
        StorageDead(_704);
        StorageDead(_700);
        StorageDead(_697);
        StorageDead(_665);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_386);
        StorageDead(_385);
        _1377 = const false;
        StorageDead(_150);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_45);
        drop(_34) -> [return: bb584, unwind: bb657];
    }

    bb584: {
        StorageDead(_34);
        StorageDead(_33);
        drop(_22) -> [return: bb585, unwind: bb658];
    }

    bb585: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb627;
    }

    bb586: {
        StorageDead(_1315);
        drop(_1304) -> [return: bb587, unwind: bb638];
    }

    bb587: {
        StorageDead(_1304);
        StorageDead(_1303);
        StorageDead(_1302);
        goto -> bb592;
    }

    bb588: {
        StorageDead(_1227);
        StorageDead(_1226);
        goto -> bb592;
    }

    bb589: {
        StorageDead(_1167);
        StorageDead(_1186);
        StorageDead(_1181);
        StorageDead(_1178);
        goto -> bb590;
    }

    bb590: {
        StorageDead(_1166);
        goto -> bb591;
    }

    bb591: {
        StorageDead(_1165);
        StorageDead(_1164);
        goto -> bb592;
    }

    bb592: {
        StorageDead(_1134);
        StorageDead(_1128);
        goto -> bb595;
    }

    bb593: {
        StorageDead(_1093);
        goto -> bb594;
    }

    bb594: {
        StorageDead(_1083);
        StorageDead(_1081);
        StorageDead(_1080);
        goto -> bb595;
    }

    bb595: {
        StorageDead(_1032);
        StorageDead(_1031);
        goto -> bb596;
    }

    bb596: {
        StorageDead(_1027);
        goto -> bb600;
    }

    bb597: {
        StorageDead(_1000);
        goto -> bb599;
    }

    bb598: {
        StorageDead(_972);
        StorageDead(_991);
        StorageDead(_986);
        StorageDead(_983);
        goto -> bb599;
    }

    bb599: {
        StorageDead(_971);
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_967);
        goto -> bb600;
    }

    bb600: {
        StorageDead(_937);
        StorageDead(_931);
        goto -> bb601;
    }

    bb601: {
        StorageDead(_913);
        goto -> bb602;
    }

    bb602: {
        StorageDead(_900);
        goto -> bb605;
    }

    bb603: {
        StorageDead(_883);
        StorageDead(_874);
        StorageDead(_873);
        goto -> bb605;
    }

    bb604: {
        StorageDead(_859);
        StorageDead(_854);
        goto -> bb605;
    }

    bb605: {
        StorageDead(_853);
        goto -> bb606;
    }

    bb606: {
        StorageDead(_835);
        drop(_800) -> [return: bb607, unwind: bb639];
    }

    bb607: {
        StorageDead(_800);
        drop(_705) -> [return: bb608, unwind: bb640];
    }

    bb608: {
        StorageDead(_705);
        drop(_704) -> [return: bb609, unwind: bb685];
    }

    bb609: {
        StorageDead(_704);
        goto -> bb612;
    }

    bb610: {
        StorageDead(_782);
        _1439 = discriminant(_786);
        StorageDead(_786);
        StorageDead(_775);
        goto -> bb667;
    }

    bb611: {
        _1374 = const false;
        StorageDead(_709);
        StorageDead(_708);
        StorageDead(_707);
        StorageDead(_706);
        goto -> bb612;
    }

    bb612: {
        StorageDead(_700);
        StorageDead(_697);
        goto -> bb613;
    }

    bb613: {
        StorageDead(_665);
        goto -> bb621;
    }

    bb614: {
        StorageDead(_589);
        StorageDead(_580);
        goto -> bb616;
    }

    bb615: {
        StorageDead(_527);
        StorageDead(_524);
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_510);
        goto -> bb616;
    }

    bb616: {
        StorageDead(_507);
        goto -> bb617;
    }

    bb617: {
        StorageDead(_492);
        goto -> bb618;
    }

    bb618: {
        StorageDead(_477);
        goto -> bb619;
    }

    bb619: {
        drop(_408) -> [return: bb620, unwind: bb685];
    }

    bb620: {
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_406);
        goto -> bb621;
    }

    bb621: {
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_387);
        StorageDead(_386);
        StorageDead(_385);
        goto -> bb669;
    }

    bb622: {
        _1377 = const false;
        StorageDead(_150);
        goto -> bb623;
    }

    bb623: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb624;
    }

    bb624: {
        StorageDead(_45);
        drop(_34) -> [return: bb625, unwind: bb657];
    }

    bb625: {
        StorageDead(_34);
        StorageDead(_33);
        drop(_22) -> [return: bb626, unwind: bb658];
    }

    bb626: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb627;
    }

    bb627: {
        return;
    }

    bb628 (cleanup): {
        drop(_1304) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb629 (cleanup): {
        drop(_1279) -> [return: bb631, unwind terminate(cleanup)];
    }

    bb630 (cleanup): {
        drop(_1260) -> [return: bb631, unwind terminate(cleanup)];
    }

    bb631 (cleanup): {
        drop(_1227) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb632 (cleanup): {
        drop(_1167) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb633 (cleanup): {
        drop(_1148) -> [return: bb673, unwind terminate(cleanup)];
    }

    bb634 (cleanup): {
        drop(_1093) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb635 (cleanup): {
        drop(_972) -> [return: bb638, unwind terminate(cleanup)];
    }

    bb636 (cleanup): {
        drop(_951) -> [return: bb676, unwind terminate(cleanup)];
    }

    bb637 (cleanup): {
        drop(_887) -> [return: bb677, unwind terminate(cleanup)];
    }

    bb638 (cleanup): {
        drop(_800) -> [return: bb639, unwind terminate(cleanup)];
    }

    bb639 (cleanup): {
        drop(_705) -> [return: bb640, unwind terminate(cleanup)];
    }

    bb640 (cleanup): {
        drop(_704) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb641 (cleanup): {
        drop(_782) -> [return: bb679, unwind terminate(cleanup)];
    }

    bb642 (cleanup): {
        drop(_782) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb643 (cleanup): {
        drop(_753) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb644 (cleanup): {
        drop(_734) -> [return: bb681, unwind terminate(cleanup)];
    }

    bb645 (cleanup): {
        drop(_683) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb646 (cleanup): {
        drop(_464) -> [return: bb648, unwind terminate(cleanup)];
    }

    bb647 (cleanup): {
        drop(_445) -> [return: bb648, unwind terminate(cleanup)];
    }

    bb648 (cleanup): {
        drop(_408) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb649 (cleanup): {
        drop(_335) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb650 (cleanup): {
        drop(_288) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb651 (cleanup): {
        drop(_259) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb652 (cleanup): {
        drop(_240) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb653 (cleanup): {
        drop(_212) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb654 (cleanup): {
        drop(_193) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb655 (cleanup): {
        drop(_127) -> [return: bb656, unwind terminate(cleanup)];
    }

    bb656 (cleanup): {
        drop(_34) -> [return: bb657, unwind terminate(cleanup)];
    }

    bb657 (cleanup): {
        drop(_22) -> [return: bb658, unwind terminate(cleanup)];
    }

    bb658 (cleanup): {
        resume;
    }

    bb659: {
        drop(_709) -> [return: bb341, unwind: bb685];
    }

    bb660: {
        _1407 = discriminant(_888);
        StorageDead(_892);
        _1378 = const false;
        StorageDead(_888);
        StorageDead(_887);
        StorageDead(_885);
        StorageLive(_899);
        _899 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _899);
        StorageDead(_899);
        goto -> bb603;
    }

    bb661: {
        _1409 = discriminant(_888);
        StorageDead(_892);
        _1378 = const false;
        StorageDead(_888);
        StorageDead(_887);
        StorageDead(_885);
        _873 = const ();
        StorageDead(_883);
        goto -> bb389;
    }

    bb662: {
        _1411 = discriminant(_952);
        StorageDead(_956);
        _1376 = const false;
        StorageDead(_952);
        StorageDead(_951);
        StorageDead(_949);
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_938);
        StorageLive(_967);
        StorageLive(_968);
        _968 = _900;
        switchInt(move _968) -> [0: bb419, otherwise: bb420];
    }

    bb663: {
        _1421 = discriminant(_1149);
        StorageDead(_1153);
        _1375 = const false;
        StorageDead(_1149);
        StorageDead(_1148);
        StorageDead(_1146);
        StorageDead(_1141);
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1135);
        StorageLive(_1164);
        StorageLive(_1165);
        _1165 = _1134;
        switchInt(move _1165) -> [0: bb522, otherwise: bb501];
    }

    bb664: {
        _1435 = discriminant(_1149);
        StorageDead(_1153);
        _1375 = const false;
        StorageDead(_1149);
        StorageDead(_1148);
        StorageDead(_1146);
        StorageDead(_1141);
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1135);
        goto -> bb592;
    }

    bb665: {
        _1437 = discriminant(_952);
        StorageDead(_956);
        _1376 = const false;
        StorageDead(_952);
        StorageDead(_951);
        StorageDead(_949);
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_938);
        goto -> bb600;
    }

    bb666: {
        drop(_709) -> [return: bb611, unwind: bb685];
    }

    bb667: {
        switchInt(_1374) -> [0: bb611, otherwise: bb666];
    }

    bb668: {
        drop(_150) -> [return: bb622, unwind: bb656];
    }

    bb669: {
        switchInt(_1377) -> [0: bb622, otherwise: bb668];
    }

    bb670 (cleanup): {
        _1441 = discriminant(_1305);
        goto -> bb638;
    }

    bb671 (cleanup): {
        _1442 = discriminant(_1228);
        goto -> bb638;
    }

    bb672 (cleanup): {
        _1443 = discriminant(_1168);
        goto -> bb638;
    }

    bb673 (cleanup): {
        _1444 = discriminant(_1149);
        goto -> bb638;
    }

    bb674 (cleanup): {
        _1445 = discriminant(_1094);
        goto -> bb638;
    }

    bb675 (cleanup): {
        _1446 = discriminant(_973);
        goto -> bb638;
    }

    bb676 (cleanup): {
        _1447 = discriminant(_952);
        goto -> bb638;
    }

    bb677 (cleanup): {
        _1448 = discriminant(_888);
        goto -> bb638;
    }

    bb678 (cleanup): {
        _1449 = discriminant(_801);
        goto -> bb639;
    }

    bb679 (cleanup): {
        _1450 = discriminant(_786);
        goto -> bb681;
    }

    bb680 (cleanup): {
        drop(_709) -> [return: bb685, unwind terminate(cleanup)];
    }

    bb681 (cleanup): {
        switchInt(_1374) -> [0: bb685, otherwise: bb680];
    }

    bb682 (cleanup): {
        _1451 = discriminant(_710);
        goto -> bb685;
    }

    bb683 (cleanup): {
        _1452 = discriminant(_409);
        goto -> bb685;
    }

    bb684 (cleanup): {
        drop(_150) -> [return: bb656, unwind terminate(cleanup)];
    }

    bb685 (cleanup): {
        switchInt(_1377) -> [0: bb656, otherwise: bb684];
    }

    bb686 (cleanup): {
        _1453 = discriminant(_151);
        goto -> bb656;
    }

    bb687 (cleanup): {
        _1454 = discriminant(_35);
        goto -> bb657;
    }

    bb688 (cleanup): {
        _1455 = discriminant(_23);
        goto -> bb658;
    }
}
