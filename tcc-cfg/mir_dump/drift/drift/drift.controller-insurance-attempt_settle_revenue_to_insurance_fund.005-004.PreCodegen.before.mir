// MIR for `attempt_settle_revenue_to_insurance_fund` before PreCodegen

fn attempt_settle_revenue_to_insurance_fund(_1: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, _2: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, _3: &mut SpotMarket, _4: i64, _5: &anchor_lang::prelude::Interface<'_, TokenInterface>, _6: &anchor_lang::prelude::AccountInfo<'_>, _7: &state::state::State, _8: &Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, _9: Option<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug spot_market_vault => _1;
    debug insurance_fund_vault => _2;
    debug spot_market => _3;
    debug now => _4;
    debug token_program => _5;
    debug drift_signer => _6;
    debug state => _7;
    debug mint => _8;
    debug remaining_accounts => _9;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _10: bool;
    let mut _11: bool;
    let mut _12: i64;
    let _13: i64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _15: std::result::Result<i64, error::ErrorCode>;
    let mut _16: i64;
    let mut _17: i64;
    let mut _18: i64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: i64;
    let mut _24: i64;
    let mut _26: bool;
    let mut _28: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _29: &anchor_spl::token_interface::TokenAccount;
    let _30: &anchor_spl::token_interface::TokenAccount;
    let mut _31: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _33: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _34: &anchor_spl::token_interface::TokenAccount;
    let _35: &anchor_spl::token_interface::TokenAccount;
    let mut _36: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _39: std::result::Result<u64, error::ErrorCode>;
    let mut _40: u64;
    let mut _41: u64;
    let mut _42: &mut state::spot_market::SpotMarket;
    let mut _43: i64;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: bool;
    let mut _51: u64;
    let _52: ();
    let mut _53: &str;
    let _54: &str;
    let mut _55: &std::string::String;
    let _56: &std::string::String;
    let _57: std::string::String;
    let mut _59: std::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let mut _61: &[&str; 3];
    let _62: &[&str; 3];
    let _63: [&str; 3];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let mut _65: &[core::fmt::rt::Argument<'_>; 2];
    let _66: &[core::fmt::rt::Argument<'_>; 2];
    let _67: [core::fmt::rt::Argument<'_>; 2];
    let mut _68: core::fmt::rt::Argument<'_>;
    let mut _69: &u16;
    let _70: &u16;
    let mut _71: core::fmt::rt::Argument<'_>;
    let mut _72: &u64;
    let _73: &u64;
    let _74: ();
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _76: std::result::Result<(), anchor_lang::error::Error>;
    let mut _77: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _78: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _79: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _81: u8;
    let mut _82: u64;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _84: std::result::Result<u64, error::ErrorCode>;
    let mut _85: u64;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _92: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _98: i64;
    let mut _99: ();
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    scope 1 {
        debug valid_revenue_settle_time => _10;
        let _25: u64;
        let _27: u64;
        scope 7 {
            debug _token_amount => _25;
        }
        scope 8 {
            debug spot_market_vault_amount => _27;
            let _32: u64;
            scope 9 {
                debug insurance_fund_vault_amount => _32;
                let _37: u64;
                let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _48: u64;
                scope 10 {
                    debug token_amount => _37;
                    let _58: std::string::String;
                    let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _90: u64;
                    let _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _97: ();
                    let mut _100: &[&str; 3];
                    scope 15 {
                        debug res => _58;
                    }
                    scope 16 {
                        debug residual => _87;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug val => _90;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug residual => _94;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _97;
                        scope 23 {
                        }
                    }
                }
                scope 11 {
                    debug residual => _45;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug val => _48;
                    scope 14 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug time_until_next_update => _13;
    }
    scope 3 {
        debug residual => _20;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _23;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = (((*_3).9: state::spot_market::InsuranceFund).6: i64);
        _11 = Gt(move _12, const 0_i64);
        switchInt(move _11) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _4;
        StorageLive(_17);
        _17 = (((*_3).9: state::spot_market::InsuranceFund).5: i64);
        StorageLive(_18);
        _18 = (((*_3).9: state::spot_market::InsuranceFund).6: i64);
        _15 = on_the_hour_update(move _16, move _17, move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_23);
        _23 = ((_14 as Continue).0: i64);
        _13 = _23;
        StorageDead(_23);
        StorageDead(_14);
        StorageLive(_24);
        _24 = _13;
        _10 = Eq(move _24, const 0_i64);
        StorageDead(_24);
        StorageDead(_13);
        goto -> bb9;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        goto -> bb44;
    }

    bb8: {
        StorageDead(_12);
        _10 = const false;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_11);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _10;
        switchInt(move _26) -> [0: bb40, otherwise: bb10];
    }

    bb10: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_1);
        _30 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = &(*_30);
        _28 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = ((*_28).2: u64);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_2);
        _35 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        _34 = &(*_35);
        _33 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_34);
        _32 = ((*_33).2: u64);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _27;
        StorageLive(_41);
        _41 = _32;
        StorageLive(_42);
        _42 = &mut (*_3);
        StorageLive(_43);
        _43 = _4;
        _39 = controller::insurance::settle_revenue_to_insurance_fund(move _40, move _41, move _42, move _43, const false) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_39);
        _44 = discriminant(_38);
        switchInt(move _44) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_48);
        _48 = ((_38 as Continue).0: u64);
        _37 = _48;
        StorageDead(_48);
        StorageDead(_38);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _37;
        _50 = Gt(move _51, const 0_u64);
        switchInt(move _50) -> [0: bb21, otherwise: bb20];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_38);
        goto -> bb43;
    }

    bb20: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _100 = const _;
        _62 = &(*_100);
        _61 = &(*_62);
        _60 = move _61 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_61);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &((*_3).42: u16);
        _69 = &(*_70);
        _68 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _69) -> [return: bb22, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        _49 = const ();
        goto -> bb39;
    }

    bb22: {
        StorageDead(_69);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_37;
        _72 = &(*_73);
        _71 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _72) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_72);
        _67 = [move _68, move _71];
        StorageDead(_71);
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _64 = move _65 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_65);
        _59 = Arguments::<'_>::new_v1(move _60, move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_64);
        StorageDead(_60);
        _58 = format(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_62);
        _57 = move _58;
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = <String as Deref>::deref(move _55) -> [return: bb26, unwind: bb46];
    }

    bb26: {
        _53 = &(*_54);
        StorageDead(_55);
        _52 = solana_program::log::sol_log(move _53) -> [return: bb27, unwind: bb46];
    }

    bb27: {
        StorageDead(_53);
        drop(_57) -> [return: bb28, unwind: bb47];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_5);
        StorageLive(_78);
        _78 = &(*_1);
        StorageLive(_79);
        _79 = &(*_2);
        StorageLive(_80);
        _80 = &(*_6);
        StorageLive(_81);
        _81 = ((*_7).15: u8);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _37;
        _84 = <u64 as Cast>::cast::<u64>(move _85) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_85);
        _83 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _84) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_84);
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_90);
        _90 = ((_83 as Continue).0: u64);
        _82 = _90;
        StorageDead(_90);
        StorageLive(_91);
        _91 = &(*_8);
        StorageLive(_92);
        _92 = move _9;
        _76 = send_from_program_vault(move _77, move _78, move _79, move _80, move _81, move _82, move _91, move _92) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_87);
        _87 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb42;
    }

    bb34: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        _75 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _76) -> [return: bb35, unwind: bb47];
    }

    bb35: {
        StorageDead(_76);
        _93 = discriminant(_75);
        switchInt(move _93) -> [0: bb36, 1: bb37, otherwise: bb5];
    }

    bb36: {
        StorageLive(_97);
        _97 = ((_75 as Continue).0: ());
        _74 = _97;
        StorageDead(_97);
        _101 = discriminant(_75);
        StorageDead(_83);
        StorageDead(_75);
        StorageDead(_74);
        _49 = const ();
        goto -> bb39;
    }

    bb37: {
        StorageLive(_94);
        _94 = move ((_75 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _96) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        StorageDead(_96);
        StorageDead(_94);
        _103 = discriminant(_75);
        goto -> bb42;
    }

    bb39: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_98);
        _98 = _4;
        (((*_3).9: state::spot_market::InsuranceFund).5: i64) = move _98;
        StorageDead(_98);
        _25 = _37;
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_27);
        goto -> bb41;
    }

    bb40: {
        _25 = const 0_u64;
        goto -> bb41;
    }

    bb41: {
        StorageDead(_26);
        StorageLive(_99);
        _99 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _99);
        StorageDead(_99);
        StorageDead(_25);
        StorageDead(_10);
        goto -> bb45;
    }

    bb42: {
        StorageDead(_83);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_10);
        goto -> bb45;
    }

    bb45: {
        return;
    }

    bb46 (cleanup): {
        drop(_57) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        _105 = discriminant(_75);
        goto -> bb47;
    }
}
