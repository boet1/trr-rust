digraph Mir_0_2520 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_oracle_status(_1: &amp;ReErased state::perp_market::PerpMarket, _2: &amp;ReErased state::oracle::OraclePriceData, _3: &amp;ReErased state::state::OracleGuardRails, _4: u64) -&gt; std::result::Result&lt;math::oracle::OracleStatus, error::ErrorCode&gt;<br align="left"/>let _5: math::oracle::OracleValidity;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::oracle::OracleValidity&gt;;<br align="left"/>let mut _7: std::result::Result&lt;math::oracle::OracleValidity, error::ErrorCode&gt;;<br align="left"/>let mut _8: state::user::MarketType;<br align="left"/>let mut _9: u16;<br align="left"/>let mut _10: i64;<br align="left"/>let mut _11: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _12: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _13: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _17: state::perp_market::PerpMarket;<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _22: u64;<br align="left"/>let mut _23: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _24: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _25: math::oracle::LogMode;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: math::oracle::OracleValidity;<br align="left"/>let _31: i64;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _33: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _34: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _35: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _41: i64;<br align="left"/>let _42: bool;<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _44: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _45: i64;<br align="left"/>let mut _46: &amp;ReErased state::state::PriceDivergenceGuardRails;<br align="left"/>let _47: &amp;ReErased state::state::PriceDivergenceGuardRails;<br align="left"/>let mut _48: isize;<br align="left"/>let _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _50: !;<br align="left"/>let mut _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _52: bool;<br align="left"/>let mut _53: math::oracle::OracleStatus;<br align="left"/>let mut _54: state::oracle::OraclePriceData;<br align="left"/>let mut _55: i64;<br align="left"/>let mut _56: bool;<br align="left"/>let mut _57: math::oracle::OracleValidity;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug oracle_price_data =&gt; _2;<br align="left"/>debug guard_rails =&gt; _3;<br align="left"/>debug reserve_price =&gt; _4;<br align="left"/>debug oracle_validity =&gt; _5;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug oracle_reserve_price_spread_pct =&gt; _31;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>debug is_oracle_mark_too_divergent =&gt; _42;<br align="left"/>debug residual =&gt; _49;<br align="left"/>debug val =&gt; _52;<br align="left"/>>;
    bb0__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = state::user::MarketType::Perp<br/>StorageLive(_9)<br/>_9 = ((*_1).21: u16)<br/>StorageLive(_10)<br/>_10 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/>StorageLive(_11)<br/>_11 = &amp;(*_2)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;((*_3).1: state::state::ValidityGuardRails)<br/>_12 = &amp;(*_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = (*_1)<br/></td></tr><tr><td align="left">_16 = PerpMarket::get_max_confidence_interval_multiplier(move _17)</td></tr></table>>];
    bb1__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb2__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_18 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb3__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_15 as Continue).0: u64)<br/>_14 = _22<br/>StorageDead(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource)<br/>_23 = &amp;(*_24)<br/>StorageLive(_25)<br/>_25 = LogMode::None<br/></td></tr><tr><td align="left">_7 = oracle_validity(move _8, move _9, move _10, move _11, move _12, move _14, move _23, move _25, const 0_i8)</td></tr></table>>];
    bb4__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OracleStatus, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb6__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;OracleValidity, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb8__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_26 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb9__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_6 as Continue).0: math::oracle::OracleValidity)<br/>_5 = _30<br/>StorageDead(_30)<br/>StorageDead(_24)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_6)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = &amp;((*_1).1: state::perp_market::AMM)<br/>_34 = &amp;(*_35)<br/>StorageLive(_36)<br/>_36 = _4<br/></td></tr><tr><td align="left">_33 = calculate_oracle_twap_5min_price_spread_pct(move _34, move _36)</td></tr></table>>];
    bb10__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OracleStatus, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb11__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb13__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_37 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb14__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_32 as Continue).0: i64)<br/>_31 = _41<br/>StorageDead(_41)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _31<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = &amp;((*_3).0: state::state::PriceDivergenceGuardRails)<br/>_46 = &amp;(*_47)<br/></td></tr><tr><td align="left">_44 = is_oracle_mark_too_divergent(move _45, move _46)</td></tr></table>>];
    bb15__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OracleStatus, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb16__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb18__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_48 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb19__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_43 as Continue).0: bool)<br/>_42 = _52<br/>StorageDead(_52)<br/>StorageDead(_47)<br/>StorageDead(_43)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = (*_2)<br/>StorageLive(_55)<br/>_55 = _31<br/>StorageLive(_56)<br/>_56 = _42<br/>StorageLive(_57)<br/>_57 = _5<br/>_53 = OracleStatus { price_data: move _54, oracle_reserve_price_spread_pct: move _55, mark_too_divergent: move _56, oracle_validity: move _57 }<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>_0 = std::result::Result::&lt;OracleStatus, error::ErrorCode&gt;::Ok(move _53)<br/>StorageDead(_53)<br/>StorageDead(_42)<br/>StorageDead(_31)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_51)<br/>_51 = _49<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;OracleStatus, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _51)</td></tr></table>>];
    bb21__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2520 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2520 -> bb1__0_2520 [label="return"];
    bb1__0_2520 -> bb2__0_2520 [label="return"];
    bb2__0_2520 -> bb3__0_2520 [label="0"];
    bb2__0_2520 -> bb5__0_2520 [label="1"];
    bb2__0_2520 -> bb4__0_2520 [label="otherwise"];
    bb3__0_2520 -> bb7__0_2520 [label="return"];
    bb5__0_2520 -> bb6__0_2520 [label="return"];
    bb6__0_2520 -> bb23__0_2520 [label=""];
    bb7__0_2520 -> bb8__0_2520 [label="return"];
    bb8__0_2520 -> bb9__0_2520 [label="0"];
    bb8__0_2520 -> bb10__0_2520 [label="1"];
    bb8__0_2520 -> bb4__0_2520 [label="otherwise"];
    bb9__0_2520 -> bb12__0_2520 [label="return"];
    bb10__0_2520 -> bb11__0_2520 [label="return"];
    bb11__0_2520 -> bb23__0_2520 [label=""];
    bb12__0_2520 -> bb13__0_2520 [label="return"];
    bb13__0_2520 -> bb14__0_2520 [label="0"];
    bb13__0_2520 -> bb15__0_2520 [label="1"];
    bb13__0_2520 -> bb4__0_2520 [label="otherwise"];
    bb14__0_2520 -> bb17__0_2520 [label="return"];
    bb15__0_2520 -> bb16__0_2520 [label="return"];
    bb16__0_2520 -> bb22__0_2520 [label=""];
    bb17__0_2520 -> bb18__0_2520 [label="return"];
    bb18__0_2520 -> bb19__0_2520 [label="0"];
    bb18__0_2520 -> bb20__0_2520 [label="1"];
    bb18__0_2520 -> bb4__0_2520 [label="otherwise"];
    bb19__0_2520 -> bb25__0_2520 [label=""];
    bb20__0_2520 -> bb21__0_2520 [label="return"];
    bb21__0_2520 -> bb22__0_2520 [label=""];
    bb22__0_2520 -> bb24__0_2520 [label=""];
    bb23__0_2520 -> bb24__0_2520 [label=""];
    bb24__0_2520 -> bb25__0_2520 [label=""];
}
