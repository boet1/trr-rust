digraph Mir_0_2600 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn math::orders::should_expire_order(_1: &amp;ReErased state::user::User, _2: usize, _3: i64) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _4: &amp;ReErased state::user::Order;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: bool;<br align="left"/>let _8: ();<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _11: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _12: state::user::OrderStatus;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: i64;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: &amp;ReErased state::user::Order;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: bool;<br align="left"/>let mut _19: i64;<br align="left"/>let mut _20: i64;<br align="left"/>let mut _21: &amp;ReErased state::user::OrderStatus;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_order_index =&gt; _2;<br align="left"/>debug now =&gt; _3;<br align="left"/>debug order =&gt; _4;<br align="left"/>>;
    bb0__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/>_6 = Len(((*_1).5: [state::user::Order; 32]))<br/>_7 = Lt(_5, _6)<br/></td></tr><tr><td align="left">assert(move _7, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _6, _5)</td></tr></table>>];
    bb1__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = &amp;((*_1).5: [state::user::Order; 32])[_5]<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;((*_4).12: state::user::OrderStatus)<br/>StorageLive(_11)<br/>_21 = const _<br/>_11 = &amp;(*_21)<br/></td></tr><tr><td align="left">_9 = &lt;OrderStatus as PartialEq&gt;::ne(move _10, move _11)</td></tr></table>>];
    bb2__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = ((*_4).8: i64)<br/>_13 = Eq(move _14, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb5__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_4)<br/></td></tr><tr><td align="left">_15 = Order::must_be_triggered(move _16)</td></tr></table>>];
    bb7__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb8__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const false)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_8 = const ()<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _3<br/>StorageLive(_20)<br/>_20 = ((*_4).8: i64)<br/>_18 = Gt(move _19, move _20)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _18)<br/>StorageDead(_18)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2600 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2600 -> bb1__0_2600 [label="success"];
    bb1__0_2600 -> bb2__0_2600 [label="return"];
    bb2__0_2600 -> bb4__0_2600 [label="0"];
    bb2__0_2600 -> bb3__0_2600 [label="otherwise"];
    bb3__0_2600 -> bb5__0_2600 [label=""];
    bb4__0_2600 -> bb6__0_2600 [label="0"];
    bb4__0_2600 -> bb5__0_2600 [label="otherwise"];
    bb5__0_2600 -> bb8__0_2600 [label=""];
    bb6__0_2600 -> bb7__0_2600 [label="return"];
    bb7__0_2600 -> bb9__0_2600 [label="0"];
    bb7__0_2600 -> bb8__0_2600 [label="otherwise"];
    bb8__0_2600 -> bb10__0_2600 [label=""];
    bb9__0_2600 -> bb10__0_2600 [label=""];
}
