// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:62:1: 62:19>::liquidation` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:62:1: 62:19>::liquidation(_1: u32) -> MarginContext {
    debug margin_buffer => _1;
    let mut _0: state::margin_calculation::MarginContext;
    let mut _2: math::margin::MarginRequirementType;
    let mut _3: state::margin_calculation::MarginCalculationMode;
    let mut _4: std::option::Option<state::margin_calculation::MarketIdentifier>;
    let mut _5: u128;
    let mut _6: u32;
    let mut _7: std::option::Option<(u16, i64)>;
    let mut _8: [(u16, i128); 2];
    let mut _9: (u16, i128);
    let mut _10: std::option::Option<u32>;

    bb0: {
        StorageLive(_2);
        _2 = math::margin::MarginRequirementType::Maintenance;
        StorageLive(_3);
        StorageLive(_4);
        _4 = Option::<MarketIdentifier>::None;
        _3 = MarginCalculationMode::Liquidation { market_to_track_margin_requirement: move _4 };
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = move _6 as u128 (IntToInt);
        StorageDead(_6);
        StorageLive(_7);
        _7 = Option::<(u16, i64)>::None;
        StorageLive(_8);
        StorageLive(_9);
        _9 = (const 0_u16, const 0_i128);
        _8 = [move _9; 2];
        StorageDead(_9);
        StorageLive(_10);
        _10 = Option::<u32>::None;
        _0 = MarginContext { margin_type: move _2, mode: move _3, strict: const false, ignore_invalid_deposit_oracles: const false, margin_buffer: move _5, fuel_bonus_numerator: const 0_i64, fuel_bonus: const 0_u64, fuel_perp_delta: move _7, fuel_spot_deltas: move _8, margin_ratio_override: move _10 };
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
