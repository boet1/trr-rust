// MIR for `apply_rebase_to_insurance_fund` after PreCodegen

fn apply_rebase_to_insurance_fund(_1: u64, _2: &mut SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug insurance_fund_vault_balance => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u128;
    let mut _16: u128;
    let _17: u32;
    let _18: u128;
    let mut _19: (u32, u128);
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u32, u128)>;
    let mut _21: std::result::Result<(u32, u128), error::ErrorCode>;
    let mut _22: u128;
    let mut _23: u64;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: (u32, u128);
    let mut _29: u128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _31: std::result::Result<u128, error::ErrorCode>;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: u128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _41: std::result::Result<u128, error::ErrorCode>;
    let mut _42: u128;
    let mut _43: u128;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _51: std::result::Result<u128, error::ErrorCode>;
    let mut _52: u128;
    let mut _53: u128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _55: std::result::Result<u128, error::ErrorCode>;
    let mut _56: u32;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 1];
    let _77: &[&str; 1];
    let _78: [&str; 1];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &u32;
    let _85: &u32;
    let _86: ();
    let mut _87: bool;
    let mut _88: u64;
    let mut _89: bool;
    let mut _90: u128;
    let mut _91: u128;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _93: std::result::Result<u128, error::ErrorCode>;
    let mut _94: u64;
    let mut _95: isize;
    let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: u128;
    let mut _100: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug expo_diff => _17;
        debug rebase_divisor => _18;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u128;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: u128;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: u128;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: u128;
        let _73: std::string::String;
        let mut _101: &[&str; 1];
        scope 10 {
            debug residual => _35;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _38;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _45;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _48;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _58;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _61;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _63;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _66;
            scope 25 {
            }
        }
        scope 26 {
            debug res => _73;
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }
    scope 27 {
        debug residual => _96;
        scope 28 {
        }
    }
    scope 29 {
        debug val => _99;
        scope 30 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = Ne(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb41, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        _9 = <u64 as Cast>::cast::<u128>(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u128);
        _7 = _15;
        StorageDead(_15);
        StorageLive(_16);
        _16 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        _6 = Lt(move _7, move _16);
        switchInt(move _6) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb57;
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_23);
        _23 = _1;
        _21 = calculate_rebase_info(move _22, move _23) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_16);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb42;
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<(u32, u128), error::ErrorCode> as Try>::branch(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: (u32, u128));
        _19 = _28;
        StorageDead(_28);
        StorageLive(_17);
        _17 = (_19.0: u32);
        StorageLive(_18);
        _18 = (_19.1: u128);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_33);
        _33 = _18;
        _31 = <u128 as SafeMath>::safe_div(move _32, move _33) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_25);
        _25 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb57;
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        _34 = discriminant(_30);
        switchInt(move _34) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_30 as Continue).0: u128);
        _29 = _38;
        StorageDead(_38);
        (((*_2).9: state::spot_market::InsuranceFund).1: u128) = move _29;
        StorageDead(_29);
        StorageDead(_30);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = (((*_2).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_43);
        _43 = _18;
        _41 = <u128 as SafeMath>::safe_div(move _42, move _43) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_30);
        goto -> bb56;
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        _44 = discriminant(_40);
        switchInt(move _44) -> [0: bb22, 1: bb23, otherwise: bb5];
    }

    bb22: {
        StorageLive(_48);
        _48 = ((_40 as Continue).0: u128);
        _39 = _48;
        StorageDead(_48);
        (((*_2).9: state::spot_market::InsuranceFund).2: u128) = move _39;
        StorageDead(_39);
        StorageDead(_40);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = (((*_2).9: state::spot_market::InsuranceFund).3: u128);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _17;
        _55 = <u32 as Cast>::cast::<u128>(move _56) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_45);
        _45 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_40);
        goto -> bb56;
    }

    bb25: {
        StorageDead(_56);
        _54 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: u128);
        _53 = _61;
        StorageDead(_61);
        _51 = <u128 as SafeMath>::safe_add(move _52, move _53) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb55;
    }

    bb30: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_51);
        _62 = discriminant(_50);
        switchInt(move _62) -> [0: bb32, 1: bb33, otherwise: bb5];
    }

    bb32: {
        StorageLive(_66);
        _66 = ((_50 as Continue).0: u128);
        _49 = _66;
        StorageDead(_66);
        (((*_2).9: state::spot_market::InsuranceFund).3: u128) = move _49;
        StorageDead(_49);
        StorageDead(_54);
        StorageDead(_50);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _101 = const _;
        _77 = &(*_101);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_17;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _84) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_63);
        _63 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb55;
    }

    bb35: {
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb38, unwind: bb59];
    }

    bb38: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb39, unwind: bb59];
    }

    bb39: {
        StorageDead(_68);
        drop(_72) -> [return: bb40, unwind: bb60];
    }

    bb40: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        _3 = const ();
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_5);
        goto -> bb42;
    }

    bb42: {
        _3 = const ();
        goto -> bb43;
    }

    bb43: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _1;
        _87 = Ne(move _88, const 0_u64);
        switchInt(move _87) -> [0: bb52, otherwise: bb44];
    }

    bb44: {
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        _89 = Eq(move _90, const 0_u128);
        switchInt(move _89) -> [0: bb51, otherwise: bb45];
    }

    bb45: {
        StorageDead(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = _1;
        _93 = <u64 as Cast>::cast::<u128>(move _94) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_94);
        _92 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _93) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_93);
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb48, 1: bb49, otherwise: bb5];
    }

    bb48: {
        StorageLive(_99);
        _99 = ((_92 as Continue).0: u128);
        _91 = _99;
        StorageDead(_99);
        (((*_2).9: state::spot_market::InsuranceFund).1: u128) = move _91;
        StorageDead(_91);
        StorageDead(_92);
        _86 = const ();
        goto -> bb54;
    }

    bb49: {
        StorageLive(_96);
        _96 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb58;
    }

    bb51: {
        StorageDead(_90);
        goto -> bb53;
    }

    bb52: {
        StorageDead(_88);
        goto -> bb53;
    }

    bb53: {
        _86 = const ();
        goto -> bb54;
    }

    bb54: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_100);
        _100 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _100);
        StorageDead(_100);
        goto -> bb58;
    }

    bb55: {
        StorageDead(_49);
        StorageDead(_54);
        StorageDead(_50);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_72) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }
}
