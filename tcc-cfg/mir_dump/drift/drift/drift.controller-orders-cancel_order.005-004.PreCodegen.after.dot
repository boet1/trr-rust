digraph Mir_0_512 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::orders::cancel_order(_1: usize, _2: &amp;ReErased mut state::user::User, _3: &amp;ReErased anchor_lang::prelude::Pubkey, _4: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _5: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _6: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _7: i64, _8: u64, _9: state::events::OrderActionExplanation, _10: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;, _11: u64, _12: bool) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _13: state::user::OrderStatus;<br align="left"/>let _14: u16;<br align="left"/>let _15: controller::position::PositionDirection;<br align="left"/>let _16: state::user::MarketType;<br align="left"/>let mut _17: (state::user::OrderStatus, u16, controller::position::PositionDirection, state::user::MarketType);<br align="left"/>let mut _18: state::user::OrderStatus;<br align="left"/>let _19: usize;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: u16;<br align="left"/>let _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: controller::position::PositionDirection;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: state::user::MarketType;<br align="left"/>let _31: usize;<br align="left"/>let mut _32: usize;<br align="left"/>let mut _33: bool;<br align="left"/>let _34: bool;<br align="left"/>let mut _35: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _36: &amp;ReErased state::user::MarketType;<br align="left"/>let _37: state::user::MarketType;<br align="left"/>let _38: ();<br align="left"/>let mut _39: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _40: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _41: bool;<br align="left"/>let mut _42: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _43: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _44: state::user::OrderStatus;<br align="left"/>let mut _45: ();<br align="left"/>let _46: error::ErrorCode;<br align="left"/>let _47: ();<br align="left"/>let mut _48: &amp;ReErased str;<br align="left"/>let _49: &amp;ReErased str;<br align="left"/>let mut _50: &amp;ReErased std::string::String;<br align="left"/>let _51: &amp;ReErased std::string::String;<br align="left"/>let _52: std::string::String;<br align="left"/>let _53: std::string::String;<br align="left"/>let mut _54: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _55: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _56: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _57: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _58: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _59: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _60: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _61: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _62: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _63: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _64: &amp;ReErased error::ErrorCode;<br align="left"/>let _65: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _66: error::ErrorCode;<br align="left"/>let mut _67: isize;<br align="left"/>let _68: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _69: !;<br align="left"/>let mut _70: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _71: ();<br align="left"/>let _72: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _73: bool;<br align="left"/>let mut _74: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _75: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _76: &amp;ReErased std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _77: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _78: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _79: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _80: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _81: &amp;ReErased u16;<br align="left"/>let _82: &amp;ReErased u16;<br align="left"/>let mut _83: isize;<br align="left"/>let _84: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _85: !;<br align="left"/>let mut _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _87: std::cell::Ref&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _88: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _89: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _90: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _91: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _92: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _93: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _94: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _95: &amp;ReErased u16;<br align="left"/>let _96: &amp;ReErased u16;<br align="left"/>let mut _97: isize;<br align="left"/>let _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _99: !;<br align="left"/>let mut _100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _101: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _102: ();<br align="left"/>let mut _103: bool;<br align="left"/>let _104: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let _105: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let _106: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let _107: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _108: (std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;, std::option::Option&lt;state::user::Order&gt;, std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;, std::option::Option&lt;state::user::Order&gt;);<br align="left"/>let mut _109: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _110: &amp;ReErased state::user::Order;<br align="left"/>let _111: &amp;ReErased state::user::Order;<br align="left"/>let _112: usize;<br align="left"/>let mut _113: usize;<br align="left"/>let mut _114: bool;<br align="left"/>let _115: state::events::OrderActionRecord;<br align="left"/>let mut _116: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _117: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _118: i64;<br align="left"/>let mut _119: state::events::OrderAction;<br align="left"/>let mut _120: state::events::OrderActionExplanation;<br align="left"/>let mut _121: u16;<br align="left"/>let mut _122: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _123: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _124: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _125: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _126: u64;<br align="left"/>let mut _127: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _128: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _129: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _130: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _131: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _132: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _133: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _134: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _135: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _136: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _137: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _138: i64;<br align="left"/>let mut _139: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _140: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _141: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _142: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _143: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _144: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _145: isize;<br align="left"/>let _146: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _147: !;<br align="left"/>let mut _148: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _149: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _150: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _151: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _152: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _153: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _154: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _155: isize;<br align="left"/>let _156: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _157: !;<br align="left"/>let mut _158: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _159: state::events::OrderActionRecord;<br align="left"/>let _160: ();<br align="left"/>let mut _161: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _162: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _163: state::events::OrderActionRecord;<br align="left"/>let mut _164: isize;<br align="left"/>let _165: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _166: !;<br align="left"/>let mut _167: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _168: ();<br align="left"/>let _169: ();<br align="left"/>let mut _170: &amp;ReErased mut state::user::User;<br align="left"/>let mut _171: bool;<br align="left"/>let mut _172: &amp;ReErased state::user::Order;<br align="left"/>let _173: usize;<br align="left"/>let mut _174: usize;<br align="left"/>let mut _175: bool;<br align="left"/>let _176: ();<br align="left"/>let mut _177: bool;<br align="left"/>let _178: usize;<br align="left"/>let mut _179: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _180: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _181: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _182: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _183: u16;<br align="left"/>let mut _184: isize;<br align="left"/>let _185: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _186: !;<br align="left"/>let mut _187: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _188: usize;<br align="left"/>let _189: bool;<br align="left"/>let mut _190: &amp;ReErased state::user::Order;<br align="left"/>let _191: usize;<br align="left"/>let mut _192: usize;<br align="left"/>let mut _193: bool;<br align="left"/>let _194: ();<br align="left"/>let mut _195: bool;<br align="left"/>let _196: u64;<br align="left"/>let mut _197: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _198: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _199: &amp;ReErased state::user::Order;<br align="left"/>let _200: usize;<br align="left"/>let mut _201: usize;<br align="left"/>let mut _202: bool;<br align="left"/>let mut _203: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _204: isize;<br align="left"/>let _205: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _206: !;<br align="left"/>let mut _207: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _208: u64;<br align="left"/>let _209: ();<br align="left"/>let mut _210: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _211: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _212: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _213: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _214: usize;<br align="left"/>let mut _215: usize;<br align="left"/>let mut _216: bool;<br align="left"/>let mut _217: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _218: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _219: u64;<br align="left"/>let mut _220: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _221: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _222: u64;<br align="left"/>let mut _223: isize;<br align="left"/>let _224: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _225: !;<br align="left"/>let mut _226: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _227: u64;<br align="left"/>let mut _228: bool;<br align="left"/>let mut _229: isize;<br align="left"/>let _230: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _231: !;<br align="left"/>let mut _232: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _233: ();<br align="left"/>let _234: usize;<br align="left"/>let mut _235: usize;<br align="left"/>let mut _236: bool;<br align="left"/>let mut _237: (u8, bool);<br align="left"/>let mut _238: state::user::OrderStatus;<br align="left"/>let _239: usize;<br align="left"/>let mut _240: usize;<br align="left"/>let mut _241: bool;<br align="left"/>let _242: usize;<br align="left"/>let mut _243: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _244: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _245: &amp;ReErased state::user::User;<br align="left"/>let mut _246: u16;<br align="left"/>let mut _247: isize;<br align="left"/>let _248: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _249: !;<br align="left"/>let mut _250: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _251: usize;<br align="left"/>let _252: bool;<br align="left"/>let mut _253: &amp;ReErased state::user::Order;<br align="left"/>let _254: usize;<br align="left"/>let mut _255: usize;<br align="left"/>let mut _256: bool;<br align="left"/>let _257: ();<br align="left"/>let mut _258: bool;<br align="left"/>let _259: u64;<br align="left"/>let mut _260: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _261: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _262: &amp;ReErased state::user::Order;<br align="left"/>let _263: usize;<br align="left"/>let mut _264: usize;<br align="left"/>let mut _265: bool;<br align="left"/>let mut _266: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _267: isize;<br align="left"/>let _268: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _269: !;<br align="left"/>let mut _270: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _271: u64;<br align="left"/>let _272: ();<br align="left"/>let mut _273: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _274: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _275: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _276: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let _277: usize;<br align="left"/>let mut _278: usize;<br align="left"/>let mut _279: bool;<br align="left"/>let mut _280: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _281: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _282: u64;<br align="left"/>let mut _283: bool;<br align="left"/>let mut _284: isize;<br align="left"/>let _285: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _286: !;<br align="left"/>let mut _287: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _288: ();<br align="left"/>let _289: usize;<br align="left"/>let mut _290: usize;<br align="left"/>let mut _291: bool;<br align="left"/>let mut _292: (u8, bool);<br align="left"/>let mut _293: state::user::OrderStatus;<br align="left"/>let _294: usize;<br align="left"/>let mut _295: usize;<br align="left"/>let mut _296: bool;<br align="left"/>let mut _297: ();<br align="left"/>let mut _298: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _299: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _300: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _301: bool;<br align="left"/>let mut _302: bool;<br align="left"/>let mut _303: isize;<br align="left"/>let mut _304: isize;<br align="left"/>let mut _305: isize;<br align="left"/>let mut _306: isize;<br align="left"/>let mut _307: isize;<br align="left"/>let mut _308: isize;<br align="left"/>let mut _309: isize;<br align="left"/>let mut _310: isize;<br align="left"/>let mut _311: isize;<br align="left"/>let mut _312: isize;<br align="left"/>debug order_index =&gt; _1;<br align="left"/>debug user =&gt; _2;<br align="left"/>debug user_key =&gt; _3;<br align="left"/>debug perp_market_map =&gt; _4;<br align="left"/>debug spot_market_map =&gt; _5;<br align="left"/>debug oracle_map =&gt; _6;<br align="left"/>debug now =&gt; _7;<br align="left"/>debug _slot =&gt; _8;<br align="left"/>debug explanation =&gt; _9;<br align="left"/>debug filler_key =&gt; _10;<br align="left"/>debug filler_reward =&gt; _11;<br align="left"/>debug skip_log =&gt; _12;<br align="left"/>debug order_status =&gt; _13;<br align="left"/>debug order_market_index =&gt; _14;<br align="left"/>debug order_direction =&gt; _15;<br align="left"/>debug order_market_type =&gt; _16;<br align="left"/>debug is_perp_order =&gt; _34;<br align="left"/>debug error_code =&gt; _46;<br align="left"/>debug res =&gt; _53;<br align="left"/>debug residual =&gt; _68;<br align="left"/>debug val =&gt; _71;<br align="left"/>debug oracle_id =&gt; _72;<br align="left"/>debug residual =&gt; _84;<br align="left"/>debug val =&gt; _87;<br align="left"/>debug residual =&gt; _98;<br align="left"/>debug val =&gt; _101;<br align="left"/>debug taker =&gt; _104;<br align="left"/>debug taker_order =&gt; _105;<br align="left"/>debug maker =&gt; _106;<br align="left"/>debug maker_order =&gt; _107;<br align="left"/>debug order_action_record =&gt; _115;<br align="left"/>debug residual =&gt; _146;<br align="left"/>debug val =&gt; _149;<br align="left"/>debug residual =&gt; _156;<br align="left"/>debug val =&gt; _159;<br align="left"/>debug residual =&gt; _165;<br align="left"/>debug val =&gt; _168;<br align="left"/>debug position_index =&gt; _178;<br align="left"/>debug residual =&gt; _185;<br align="left"/>debug val =&gt; _188;<br align="left"/>debug update_open_bids_and_asks =&gt; _189;<br align="left"/>debug base_asset_amount_unfilled =&gt; _196;<br align="left"/>debug residual =&gt; _205;<br align="left"/>debug val =&gt; _208;<br align="left"/>debug residual =&gt; _224;<br align="left"/>debug val =&gt; _227;<br align="left"/>debug residual =&gt; _230;<br align="left"/>debug val =&gt; _233;<br align="left"/>debug spot_position_index =&gt; _242;<br align="left"/>debug residual =&gt; _248;<br align="left"/>debug val =&gt; _251;<br align="left"/>debug update_open_bids_and_asks =&gt; _252;<br align="left"/>debug base_asset_amount_unfilled =&gt; _259;<br align="left"/>debug residual =&gt; _268;<br align="left"/>debug val =&gt; _271;<br align="left"/>debug residual =&gt; _285;<br align="left"/>debug val =&gt; _288;<br align="left"/>>;
    bb0__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_302 = const false<br/>_301 = const false<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _1<br/>_20 = Len(((*_2).5: [state::user::Order; 32]))<br/>_21 = Lt(_19, _20)<br/></td></tr><tr><td align="left">assert(move _21, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _20, _19)</td></tr></table>>];
    bb1__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_18 = (((*_2).5: [state::user::Order; 32])[_19].12: state::user::OrderStatus)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _1<br/>_24 = Len(((*_2).5: [state::user::Order; 32]))<br/>_25 = Lt(_23, _24)<br/></td></tr><tr><td align="left">assert(move _25, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _24, _23)</td></tr></table>>];
    bb2__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_22 = (((*_2).5: [state::user::Order; 32])[_23].11: u16)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _1<br/>_28 = Len(((*_2).5: [state::user::Order; 32]))<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb3__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_26 = (((*_2).5: [state::user::Order; 32])[_27].17: controller::position::PositionDirection)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _1<br/>_32 = Len(((*_2).5: [state::user::Order; 32]))<br/>_33 = Lt(_31, _32)<br/></td></tr><tr><td align="left">assert(move _33, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _32, _31)</td></tr></table>>];
    bb4__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_30 = (((*_2).5: [state::user::Order; 32])[_31].14: state::user::MarketType)<br/>_17 = (move _18, move _22, move _26, move _30)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageLive(_13)<br/>_13 = (_17.0: state::user::OrderStatus)<br/>StorageLive(_14)<br/>_14 = (_17.1: u16)<br/>StorageLive(_15)<br/>_15 = (_17.2: controller::position::PositionDirection)<br/>StorageLive(_16)<br/>_16 = (_17.3: state::user::MarketType)<br/>StorageDead(_31)<br/>StorageDead(_27)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = &amp;_16<br/>StorageLive(_36)<br/>_300 = const _<br/>_36 = &amp;(*_300)<br/></td></tr><tr><td align="left">_34 = &lt;state::user::MarketType as PartialEq&gt;::eq(move _35, move _36)</td></tr></table>>];
    bb5__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;_13<br/>StorageLive(_43)<br/>_299 = const _<br/>_43 = &amp;(*_299)<br/></td></tr><tr><td align="left">_41 = &lt;OrderStatus as PartialEq&gt;::eq(move _42, move _43)</td></tr></table>>];
    bb6__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb7__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>StorageLive(_45)<br/>_45 = ()<br/>_40 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _45)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>StorageLive(_46)<br/>_46 = error::ErrorCode::OrderNotOpen<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_298 = const _<br/>_57 = &amp;(*_298)<br/>_56 = &amp;(*_57)<br/>_55 = move _56 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_56)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_65 = &amp;_46<br/>_64 = &amp;(*_65)<br/></td></tr><tr><td align="left">_63 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _64)</td></tr></table>>];
    bb9__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>_62 = [move _63]<br/>StorageDead(_63)<br/>_61 = &amp;_62<br/>_60 = &amp;(*_61)<br/>_59 = move _60 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">_54 = Arguments::&lt;'_&gt;::new_v1(move _55, move _59)</td></tr></table>>];
    bb10__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_53 = format(move _54)</td></tr></table>>];
    bb11__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_65)<br/>StorageDead(_62)<br/>StorageDead(_61)<br/>StorageDead(_57)<br/>_52 = move _53<br/>StorageDead(_53)<br/>_51 = &amp;_52<br/>_50 = &amp;(*_51)<br/></td></tr><tr><td align="left">_49 = &lt;String as Deref&gt;::deref(move _50)</td></tr></table>>];
    bb12__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_48 = &amp;(*_49)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_47 = solana_program::log::sol_log(move _48)</td></tr></table>>];
    bb13__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/></td></tr><tr><td align="left">drop(_52)</td></tr></table>>];
    bb14__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_51)<br/>StorageDead(_49)<br/>StorageDead(_47)<br/>StorageLive(_66)<br/>_66 = _46<br/>_40 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _66)<br/>StorageDead(_66)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _40)</td></tr></table>>];
    bb16__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>_67 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _67)</td></tr></table>>];
    bb17__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_71)<br/>_71 = ((_39 as Continue).0: ())<br/>_38 = _71<br/>StorageDead(_71)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = _34<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb18__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb19__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_39 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_70)<br/>_70 = _68<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _70)</td></tr></table>>];
    bb20__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_68)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>_80 = &amp;(*_4)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_82 = &amp;_14<br/>_81 = &amp;(*_82)<br/></td></tr><tr><td align="left">_79 = PerpMarketMap::&lt;'_&gt;::get_ref(move _80, move _81)</td></tr></table>>];
    bb22__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = &amp;(*_5)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;_14<br/>_95 = &amp;(*_96)<br/></td></tr><tr><td align="left">_93 = SpotMarketMap::&lt;'_&gt;::get_ref(move _94, move _95)</td></tr></table>>];
    bb23__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">_78 = &lt;std::result::Result&lt;Ref&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _79)</td></tr></table>>];
    bb24__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_302 = const true<br/>StorageDead(_79)<br/>_83 = discriminant(_78)<br/></td></tr><tr><td align="left">switchInt(move _83)</td></tr></table>>];
    bb25__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_87)<br/>_87 = move ((_78 as Continue).0: std::cell::Ref&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_77 = move _87<br/>StorageDead(_87)<br/>_76 = &amp;_77<br/></td></tr><tr><td align="left">_75 = &lt;Ref&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _76)</td></tr></table>>];
    bb26__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_84)<br/>_84 = ((_78 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_86)<br/>_86 = _84<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _86)</td></tr></table>>];
    bb27__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_84)<br/>StorageDead(_76)<br/>StorageDead(_74)<br/>_303 = discriminant(_78)<br/>StorageDead(_82)<br/>_302 = const false<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_74 = &amp;(*_75)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_72 = PerpMarket::oracle_id(move _74)</td></tr></table>>];
    bb29__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/></td></tr><tr><td align="left">drop(_77)</td></tr></table>>];
    bb30__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_92 = &lt;std::result::Result&lt;Ref&lt;'_, SpotMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _93)</td></tr></table>>];
    bb31__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_301 = const true<br/>StorageDead(_93)<br/>_97 = discriminant(_92)<br/></td></tr><tr><td align="left">switchInt(move _97)</td></tr></table>>];
    bb32__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>_101 = move ((_92 as Continue).0: std::cell::Ref&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_91 = move _101<br/>StorageDead(_101)<br/>_90 = &amp;_91<br/></td></tr><tr><td align="left">_89 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _90)</td></tr></table>>];
    bb33__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_98)<br/>_98 = ((_92 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_100)<br/>_100 = _98<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _100)</td></tr></table>>];
    bb34__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_98)<br/>StorageDead(_90)<br/>StorageDead(_88)<br/>_307 = discriminant(_92)<br/>StorageDead(_96)<br/>_301 = const false<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_88 = &amp;(*_89)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">_72 = SpotMarket::oracle_id(move _88)</td></tr></table>>];
    bb36__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/></td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb37__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = _12<br/></td></tr><tr><td align="left">switchInt(move _103)</td></tr></table>>];
    bb38__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_108)<br/>StorageLive(_109)<br/>_109 = &amp;(*_3)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_112 = _1<br/>_113 = Len(((*_2).5: [state::user::Order; 32]))<br/>_114 = Lt(_112, _113)<br/></td></tr><tr><td align="left">assert(move _114, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _113, _112)</td></tr></table>>];
    bb39__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_111 = &amp;((*_2).5: [state::user::Order; 32])[_112]<br/>_110 = &amp;(*_111)<br/></td></tr><tr><td align="left">_108 = get_taker_and_maker_for_order_record(move _109, move _110)</td></tr></table>>];
    bb40__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_109)<br/>StorageLive(_104)<br/>_104 = (_108.0: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;)<br/>StorageLive(_105)<br/>_105 = (_108.1: std::option::Option&lt;state::user::Order&gt;)<br/>StorageLive(_106)<br/>_106 = (_108.2: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;)<br/>StorageLive(_107)<br/>_107 = (_108.3: std::option::Option&lt;state::user::Order&gt;)<br/>StorageDead(_112)<br/>StorageDead(_111)<br/>StorageDead(_108)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>_118 = _7<br/>StorageLive(_119)<br/>_119 = OrderAction::Cancel<br/>StorageLive(_120)<br/>_120 = _9<br/>StorageLive(_121)<br/>_121 = _14<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = _10<br/></td></tr><tr><td align="left">_122 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::copied(move _123)</td></tr></table>>];
    bb41__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageLive(_124)<br/>_124 = Option::&lt;u64&gt;::None<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>_126 = _11<br/>_125 = Option::&lt;u64&gt;::Some(move _126)<br/>StorageDead(_126)<br/>StorageLive(_127)<br/>_127 = Option::&lt;u64&gt;::None<br/>StorageLive(_128)<br/>_128 = Option::&lt;u64&gt;::None<br/>StorageLive(_129)<br/>_129 = Option::&lt;u64&gt;::None<br/>StorageLive(_130)<br/>_130 = Option::&lt;u64&gt;::None<br/>StorageLive(_131)<br/>_131 = Option::&lt;u64&gt;::None<br/>StorageLive(_132)<br/>_132 = Option::&lt;i64&gt;::None<br/>StorageLive(_133)<br/>_133 = Option::&lt;u64&gt;::None<br/>StorageLive(_134)<br/>_134 = _104<br/>StorageLive(_135)<br/>_135 = _105<br/>StorageLive(_136)<br/>_136 = _106<br/>StorageLive(_137)<br/>_137 = _107<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>_142 = &amp;mut (*_6)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = &amp;_72<br/>_143 = &amp;(*_144)<br/></td></tr><tr><td align="left">_141 = OracleMap::&lt;'_&gt;::get_price_data(move _142, move _143)</td></tr></table>>];
    bb42__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>StorageDead(_142)<br/></td></tr><tr><td align="left">_140 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _141)</td></tr></table>>];
    bb43__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_141)<br/>_145 = discriminant(_140)<br/></td></tr><tr><td align="left">switchInt(move _145)</td></tr></table>>];
    bb44__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_149)<br/>_149 = ((_140 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_139 = _149<br/>StorageDead(_149)<br/>_138 = ((*_139).0: i64)<br/>StorageLive(_150)<br/>_150 = Option::&lt;u64&gt;::None<br/>StorageLive(_151)<br/>_151 = Option::&lt;u64&gt;::None<br/>StorageLive(_152)<br/>_152 = Option::&lt;u64&gt;::None<br/>StorageLive(_153)<br/>_153 = Option::&lt;u64&gt;::None<br/>StorageLive(_154)<br/>_154 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_117 = get_order_action_record(move _118, move _119, move _120, move _121, move _122, move _124, move _125, move _127, move _128, move _129, move _130, move _131, move _132, move _133, move _134, move _135, move _136, move _137, move _138, const 0_u8, move _150, move _151, move _152, move _153, move _154)</td></tr></table>>];
    bb45__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_146)<br/>_146 = ((_140 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_148)<br/>_148 = _146<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _148)</td></tr></table>>];
    bb46__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageDead(_146)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_134)<br/>StorageDead(_133)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>StorageDead(_129)<br/>StorageDead(_128)<br/>StorageDead(_127)<br/>StorageDead(_125)<br/>StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/>StorageDead(_117)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_153)<br/>StorageDead(_152)<br/>StorageDead(_151)<br/>StorageDead(_150)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_134)<br/>StorageDead(_133)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>StorageDead(_129)<br/>StorageDead(_128)<br/>StorageDead(_127)<br/>StorageDead(_125)<br/>StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/></td></tr><tr><td align="left">_116 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _117)</td></tr></table>>];
    bb48__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>_155 = discriminant(_116)<br/></td></tr><tr><td align="left">switchInt(move _155)</td></tr></table>>];
    bb49__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_159)<br/>_159 = move ((_116 as Continue).0: state::events::OrderActionRecord)<br/>_115 = move _159<br/>StorageDead(_159)<br/>StorageDead(_144)<br/>StorageDead(_140)<br/>StorageDead(_139)<br/>StorageDead(_116)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>_163 = move _115<br/></td></tr><tr><td align="left">_162 = emit_stack::&lt;OrderActionRecord, 464&gt;(move _163)</td></tr></table>>];
    bb50__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_156)<br/>_156 = ((_116 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_158)<br/>_158 = _156<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _158)</td></tr></table>>];
    bb51__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_158)<br/>StorageDead(_156)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/></td></tr><tr><td align="left">_161 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _162)</td></tr></table>>];
    bb53__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_162)<br/>_164 = discriminant(_161)<br/></td></tr><tr><td align="left">switchInt(move _164)</td></tr></table>>];
    bb54__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_168)<br/>_168 = ((_161 as Continue).0: ())<br/>_160 = _168<br/>StorageDead(_168)<br/>StorageDead(_161)<br/>StorageDead(_160)<br/>_102 = const ()<br/>StorageDead(_115)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_165)<br/>_165 = ((_161 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_167)<br/>_167 = _165<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _167)</td></tr></table>>];
    bb56__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/>StorageDead(_165)<br/>StorageDead(_161)<br/>StorageDead(_160)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_102 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_102)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>_170 = &amp;mut (*_2)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>_173 = _1<br/>_174 = Len(((*_2).5: [state::user::Order; 32]))<br/>_175 = Lt(_173, _174)<br/></td></tr><tr><td align="left">assert(move _175, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _174, _173)</td></tr></table>>];
    bb59__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_172 = &amp;((*_2).5: [state::user::Order; 32])[_173]<br/></td></tr><tr><td align="left">_171 = Order::has_auction(move _172)</td></tr></table>>];
    bb60__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/></td></tr><tr><td align="left">_169 = User::decrement_open_orders(move _170, move _171)</td></tr></table>>];
    bb61__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/>StorageDead(_170)<br/>StorageDead(_173)<br/>StorageDead(_169)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>_177 = _34<br/></td></tr><tr><td align="left">switchInt(move _177)</td></tr></table>>];
    bb62__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_178)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>_182 = &amp;((*_2).4: [state::user::PerpPosition; 8])<br/>_181 = &amp;(*_182)<br/>StorageLive(_183)<br/>_183 = _14<br/></td></tr><tr><td align="left">_180 = get_position_index(move _181, move _183)</td></tr></table>>];
    bb63__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_183)<br/>StorageDead(_181)<br/></td></tr><tr><td align="left">_179 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _180)</td></tr></table>>];
    bb64__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_180)<br/>_184 = discriminant(_179)<br/></td></tr><tr><td align="left">switchInt(move _184)</td></tr></table>>];
    bb65__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageLive(_188)<br/>_188 = ((_179 as Continue).0: usize)<br/>_178 = _188<br/>StorageDead(_188)<br/>StorageDead(_182)<br/>StorageDead(_179)<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>StorageLive(_191)<br/>_191 = _1<br/>_192 = Len(((*_2).5: [state::user::Order; 32]))<br/>_193 = Lt(_191, _192)<br/></td></tr><tr><td align="left">assert(move _193, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _192, _191)</td></tr></table>>];
    bb66__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageLive(_185)<br/>_185 = ((_179 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_187)<br/>_187 = _185<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _187)</td></tr></table>>];
    bb67__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>StorageDead(_185)<br/>StorageDead(_182)<br/>StorageDead(_179)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">_190 = &amp;((*_2).5: [state::user::Order; 32])[_191]<br/></td></tr><tr><td align="left">_189 = Order::update_open_bids_and_asks(move _190)</td></tr></table>>];
    bb69__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_190)<br/>StorageDead(_191)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>_195 = _189<br/></td></tr><tr><td align="left">switchInt(move _195)</td></tr></table>>];
    bb70__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>_200 = _1<br/>_201 = Len(((*_2).5: [state::user::Order; 32]))<br/>_202 = Lt(_200, _201)<br/></td></tr><tr><td align="left">assert(move _202, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _201, _200)</td></tr></table>>];
    bb71__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">_199 = &amp;((*_2).5: [state::user::Order; 32])[_200]<br/>StorageLive(_203)<br/>_203 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_198 = Order::get_base_asset_amount_unfilled(move _199, move _203)</td></tr></table>>];
    bb72__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/>StorageDead(_199)<br/></td></tr><tr><td align="left">_197 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _198)</td></tr></table>>];
    bb73__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>_204 = discriminant(_197)<br/></td></tr><tr><td align="left">switchInt(move _204)</td></tr></table>>];
    bb74__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageLive(_208)<br/>_208 = ((_197 as Continue).0: u64)<br/>_196 = _208<br/>StorageDead(_208)<br/>StorageDead(_200)<br/>StorageDead(_197)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>StorageLive(_214)<br/>_214 = _178<br/>_215 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_216 = Lt(_214, _215)<br/></td></tr><tr><td align="left">assert(move _216, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _215, _214)</td></tr></table>>];
    bb75__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageLive(_205)<br/>_205 = ((_197 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_207)<br/>_207 = _205<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _207)</td></tr></table>>];
    bb76__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_207)<br/>StorageDead(_205)<br/>StorageDead(_200)<br/>StorageDead(_197)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">_213 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_214]<br/>_212 = &amp;mut (*_213)<br/>StorageLive(_217)<br/>StorageLive(_218)<br/>_218 = &amp;_15<br/>_217 = &amp;(*_218)<br/>StorageLive(_219)<br/>StorageLive(_220)<br/>StorageLive(_221)<br/>StorageLive(_222)<br/>_222 = _196<br/></td></tr><tr><td align="left">_221 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _222)</td></tr></table>>];
    bb78__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_222)<br/></td></tr><tr><td align="left">_220 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _221)</td></tr></table>>];
    bb79__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_221)<br/>_223 = discriminant(_220)<br/></td></tr><tr><td align="left">switchInt(move _223)</td></tr></table>>];
    bb80__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_227)<br/>_227 = ((_220 as Continue).0: u64)<br/>_219 = _227<br/>StorageDead(_227)<br/>StorageLive(_228)<br/>_228 = _189<br/></td></tr><tr><td align="left">_211 = decrease_open_bids_and_asks(move _212, move _217, move _219, move _228)</td></tr></table>>];
    bb81__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_224)<br/>_224 = ((_220 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_226)<br/>_226 = _224<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _226)</td></tr></table>>];
    bb82__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_226)<br/>StorageDead(_224)<br/>StorageDead(_219)<br/>StorageDead(_217)<br/>StorageDead(_212)<br/>StorageDead(_211)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_228)<br/>StorageDead(_219)<br/>StorageDead(_217)<br/>StorageDead(_212)<br/></td></tr><tr><td align="left">_210 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _211)</td></tr></table>>];
    bb84__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/>_229 = discriminant(_210)<br/></td></tr><tr><td align="left">switchInt(move _229)</td></tr></table>>];
    bb85__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageLive(_233)<br/>_233 = ((_210 as Continue).0: ())<br/>_209 = _233<br/>StorageDead(_233)<br/>StorageDead(_220)<br/>StorageDead(_218)<br/>StorageDead(_214)<br/>StorageDead(_213)<br/>StorageDead(_210)<br/>StorageDead(_209)<br/>_194 = const ()<br/>StorageDead(_196)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb86__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageLive(_230)<br/>_230 = ((_210 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_232)<br/>_232 = _230<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _232)</td></tr></table>>];
    bb87__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_232)<br/>StorageDead(_230)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">_194 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb89__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_195)<br/>StorageDead(_194)<br/>StorageLive(_234)<br/>_234 = _178<br/>_235 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_236 = Lt(_234, _235)<br/></td></tr><tr><td align="left">assert(move _236, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _235, _234)</td></tr></table>>];
    bb90__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">_237 = CheckedSub((((*_2).4: [state::user::PerpPosition; 8])[_234].14: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_237.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, (((*_2).4: [state::user::PerpPosition; 8])[_234].14: u8), const 1_u8)</td></tr></table>>];
    bb91__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">(((*_2).4: [state::user::PerpPosition; 8])[_234].14: u8) = move (_237.0: u8)<br/>StorageDead(_234)<br/>StorageLive(_238)<br/>_238 = OrderStatus::Canceled<br/>StorageLive(_239)<br/>_239 = _1<br/>_240 = Len(((*_2).5: [state::user::Order; 32]))<br/>_241 = Lt(_239, _240)<br/></td></tr><tr><td align="left">assert(move _241, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _240, _239)</td></tr></table>>];
    bb92__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">(((*_2).5: [state::user::Order; 32])[_239].12: state::user::OrderStatus) = move _238<br/>StorageDead(_238)<br/>StorageDead(_239)<br/>_176 = const ()<br/>StorageDead(_189)<br/>StorageDead(_178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_242)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>_245 = &amp;(*_2)<br/>StorageLive(_246)<br/>_246 = _14<br/></td></tr><tr><td align="left">_244 = User::get_spot_position_index(move _245, move _246)</td></tr></table>>];
    bb94__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_246)<br/>StorageDead(_245)<br/></td></tr><tr><td align="left">_243 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _244)</td></tr></table>>];
    bb95__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_244)<br/>_247 = discriminant(_243)<br/></td></tr><tr><td align="left">switchInt(move _247)</td></tr></table>>];
    bb96__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageLive(_251)<br/>_251 = ((_243 as Continue).0: usize)<br/>_242 = _251<br/>StorageDead(_251)<br/>StorageDead(_243)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>_254 = _1<br/>_255 = Len(((*_2).5: [state::user::Order; 32]))<br/>_256 = Lt(_254, _255)<br/></td></tr><tr><td align="left">assert(move _256, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _255, _254)</td></tr></table>>];
    bb97__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageLive(_248)<br/>_248 = ((_243 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_250)<br/>_250 = _248<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _250)</td></tr></table>>];
    bb98__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_250)<br/>StorageDead(_248)<br/>StorageDead(_243)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb99__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">_253 = &amp;((*_2).5: [state::user::Order; 32])[_254]<br/></td></tr><tr><td align="left">_252 = Order::update_open_bids_and_asks(move _253)</td></tr></table>>];
    bb100__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_253)<br/>StorageDead(_254)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>_258 = _252<br/></td></tr><tr><td align="left">switchInt(move _258)</td></tr></table>>];
    bb101__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_259)<br/>StorageLive(_260)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>StorageLive(_263)<br/>_263 = _1<br/>_264 = Len(((*_2).5: [state::user::Order; 32]))<br/>_265 = Lt(_263, _264)<br/></td></tr><tr><td align="left">assert(move _265, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _264, _263)</td></tr></table>>];
    bb102__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">_262 = &amp;((*_2).5: [state::user::Order; 32])[_263]<br/>StorageLive(_266)<br/>_266 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_261 = Order::get_base_asset_amount_unfilled(move _262, move _266)</td></tr></table>>];
    bb103__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_266)<br/>StorageDead(_262)<br/></td></tr><tr><td align="left">_260 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _261)</td></tr></table>>];
    bb104__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_261)<br/>_267 = discriminant(_260)<br/></td></tr><tr><td align="left">switchInt(move _267)</td></tr></table>>];
    bb105__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_271)<br/>_271 = ((_260 as Continue).0: u64)<br/>_259 = _271<br/>StorageDead(_271)<br/>StorageDead(_263)<br/>StorageDead(_260)<br/>StorageLive(_272)<br/>StorageLive(_273)<br/>StorageLive(_274)<br/>StorageLive(_275)<br/>StorageLive(_276)<br/>StorageLive(_277)<br/>_277 = _242<br/>_278 = Len(((*_2).3: [state::user::SpotPosition; 8]))<br/>_279 = Lt(_277, _278)<br/></td></tr><tr><td align="left">assert(move _279, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _278, _277)</td></tr></table>>];
    bb106__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageLive(_268)<br/>_268 = ((_260 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_270)<br/>_270 = _268<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _270)</td></tr></table>>];
    bb107__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_270)<br/>StorageDead(_268)<br/>StorageDead(_263)<br/>StorageDead(_260)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb108__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">_276 = &amp;mut ((*_2).3: [state::user::SpotPosition; 8])[_277]<br/>_275 = &amp;mut (*_276)<br/>StorageLive(_280)<br/>StorageLive(_281)<br/>_281 = &amp;_15<br/>_280 = &amp;(*_281)<br/>StorageLive(_282)<br/>_282 = _259<br/>StorageLive(_283)<br/>_283 = _252<br/></td></tr><tr><td align="left">_274 = decrease_spot_open_bids_and_asks(move _275, move _280, move _282, move _283)</td></tr></table>>];
    bb109__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_283)<br/>StorageDead(_282)<br/>StorageDead(_280)<br/>StorageDead(_275)<br/></td></tr><tr><td align="left">_273 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _274)</td></tr></table>>];
    bb110__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_274)<br/>_284 = discriminant(_273)<br/></td></tr><tr><td align="left">switchInt(move _284)</td></tr></table>>];
    bb111__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageLive(_288)<br/>_288 = ((_273 as Continue).0: ())<br/>_272 = _288<br/>StorageDead(_288)<br/>StorageDead(_281)<br/>StorageDead(_277)<br/>StorageDead(_276)<br/>StorageDead(_273)<br/>StorageDead(_272)<br/>_257 = const ()<br/>StorageDead(_259)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageLive(_285)<br/>_285 = ((_273 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_287)<br/>_287 = _285<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _287)</td></tr></table>>];
    bb113__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_287)<br/>StorageDead(_285)<br/>StorageDead(_281)<br/>StorageDead(_277)<br/>StorageDead(_276)<br/>StorageDead(_273)<br/>StorageDead(_272)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">_257 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_258)<br/>StorageDead(_257)<br/>StorageLive(_289)<br/>_289 = _242<br/>_290 = Len(((*_2).3: [state::user::SpotPosition; 8]))<br/>_291 = Lt(_289, _290)<br/></td></tr><tr><td align="left">assert(move _291, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _290, _289)</td></tr></table>>];
    bb116__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">_292 = CheckedSub((((*_2).3: [state::user::SpotPosition; 8])[_289].6: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_292.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, (((*_2).3: [state::user::SpotPosition; 8])[_289].6: u8), const 1_u8)</td></tr></table>>];
    bb117__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">(((*_2).3: [state::user::SpotPosition; 8])[_289].6: u8) = move (_292.0: u8)<br/>StorageDead(_289)<br/>StorageLive(_293)<br/>_293 = OrderStatus::Canceled<br/>StorageLive(_294)<br/>_294 = _1<br/>_295 = Len(((*_2).5: [state::user::Order; 32]))<br/>_296 = Lt(_294, _295)<br/></td></tr><tr><td align="left">assert(move _296, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _295, _294)</td></tr></table>>];
    bb118__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">(((*_2).5: [state::user::Order; 32])[_294].12: state::user::OrderStatus) = move _293<br/>StorageDead(_293)<br/>StorageDead(_294)<br/>_176 = const ()<br/>StorageDead(_252)<br/>StorageDead(_242)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb119__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/>StorageDead(_176)<br/>StorageLive(_297)<br/>_297 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _297)<br/>StorageDead(_297)<br/>StorageDead(_72)<br/>StorageDead(_34)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb120__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_259)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageDead(_252)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_242)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_220)<br/>StorageDead(_218)<br/>StorageDead(_214)<br/>StorageDead(_213)<br/>StorageDead(_210)<br/>StorageDead(_209)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_196)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/>StorageDead(_189)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/>StorageDead(_176)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb126__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>StorageDead(_140)<br/>StorageDead(_139)<br/>StorageDead(_116)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb127__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/>StorageDead(_102)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb128__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb129__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb130__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb131__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left">return</td></tr></table>>];
    bb132__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">132 (cleanup)</td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb133__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">133 (cleanup)</td></tr><tr><td align="left">drop(_77)</td></tr></table>>];
    bb134__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">134 (cleanup)</td></tr><tr><td align="left">drop(_52)</td></tr></table>>];
    bb135__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">135 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb136__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">_305 = discriminant(_78)<br/>StorageDead(_82)<br/>_302 = const false<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb137__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">_309 = discriminant(_92)<br/>StorageDead(_96)<br/>_301 = const false<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb138__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">138 (cleanup)</td></tr><tr><td align="left" balign="left">_311 = discriminant(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb139__0_512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">139 (cleanup)</td></tr><tr><td align="left" balign="left">_312 = discriminant(_78)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_512 -> bb1__0_512 [label="success"];
    bb1__0_512 -> bb2__0_512 [label="success"];
    bb2__0_512 -> bb3__0_512 [label="success"];
    bb3__0_512 -> bb4__0_512 [label="success"];
    bb4__0_512 -> bb5__0_512 [label="return"];
    bb5__0_512 -> bb6__0_512 [label="return"];
    bb6__0_512 -> bb8__0_512 [label="0"];
    bb6__0_512 -> bb7__0_512 [label="otherwise"];
    bb7__0_512 -> bb15__0_512 [label=""];
    bb8__0_512 -> bb9__0_512 [label="return"];
    bb9__0_512 -> bb10__0_512 [label="return"];
    bb10__0_512 -> bb11__0_512 [label="return"];
    bb11__0_512 -> bb12__0_512 [label="return"];
    bb11__0_512 -> bb134__0_512 [label="unwind"];
    bb12__0_512 -> bb13__0_512 [label="return"];
    bb12__0_512 -> bb134__0_512 [label="unwind"];
    bb13__0_512 -> bb14__0_512 [label="return"];
    bb13__0_512 -> bb135__0_512 [label="unwind"];
    bb14__0_512 -> bb15__0_512 [label=""];
    bb15__0_512 -> bb16__0_512 [label="return"];
    bb16__0_512 -> bb17__0_512 [label="0"];
    bb16__0_512 -> bb19__0_512 [label="1"];
    bb16__0_512 -> bb18__0_512 [label="otherwise"];
    bb17__0_512 -> bb22__0_512 [label="0"];
    bb17__0_512 -> bb21__0_512 [label="otherwise"];
    bb19__0_512 -> bb20__0_512 [label="return"];
    bb20__0_512 -> bb130__0_512 [label=""];
    bb21__0_512 -> bb23__0_512 [label="return"];
    bb22__0_512 -> bb30__0_512 [label="return"];
    bb23__0_512 -> bb24__0_512 [label="return"];
    bb23__0_512 -> bb135__0_512 [label="unwind"];
    bb24__0_512 -> bb25__0_512 [label="0"];
    bb24__0_512 -> bb26__0_512 [label="1"];
    bb24__0_512 -> bb18__0_512 [label="otherwise"];
    bb25__0_512 -> bb28__0_512 [label="return"];
    bb25__0_512 -> bb133__0_512 [label="unwind"];
    bb26__0_512 -> bb27__0_512 [label="return"];
    bb26__0_512 -> bb139__0_512 [label="unwind"];
    bb27__0_512 -> bb128__0_512 [label=""];
    bb28__0_512 -> bb29__0_512 [label="return"];
    bb28__0_512 -> bb133__0_512 [label="unwind"];
    bb29__0_512 -> bb136__0_512 [label="return"];
    bb29__0_512 -> bb139__0_512 [label="unwind"];
    bb30__0_512 -> bb31__0_512 [label="return"];
    bb30__0_512 -> bb135__0_512 [label="unwind"];
    bb31__0_512 -> bb32__0_512 [label="0"];
    bb31__0_512 -> bb33__0_512 [label="1"];
    bb31__0_512 -> bb18__0_512 [label="otherwise"];
    bb32__0_512 -> bb35__0_512 [label="return"];
    bb32__0_512 -> bb132__0_512 [label="unwind"];
    bb33__0_512 -> bb34__0_512 [label="return"];
    bb33__0_512 -> bb138__0_512 [label="unwind"];
    bb34__0_512 -> bb128__0_512 [label=""];
    bb35__0_512 -> bb36__0_512 [label="return"];
    bb35__0_512 -> bb132__0_512 [label="unwind"];
    bb36__0_512 -> bb137__0_512 [label="return"];
    bb36__0_512 -> bb138__0_512 [label="unwind"];
    bb37__0_512 -> bb38__0_512 [label="0"];
    bb37__0_512 -> bb57__0_512 [label="otherwise"];
    bb38__0_512 -> bb39__0_512 [label="success"];
    bb39__0_512 -> bb40__0_512 [label="return"];
    bb40__0_512 -> bb41__0_512 [label="return"];
    bb41__0_512 -> bb42__0_512 [label="return"];
    bb42__0_512 -> bb43__0_512 [label="return"];
    bb43__0_512 -> bb44__0_512 [label="0"];
    bb43__0_512 -> bb45__0_512 [label="1"];
    bb43__0_512 -> bb18__0_512 [label="otherwise"];
    bb44__0_512 -> bb47__0_512 [label="return"];
    bb45__0_512 -> bb46__0_512 [label="return"];
    bb46__0_512 -> bb126__0_512 [label=""];
    bb47__0_512 -> bb48__0_512 [label="return"];
    bb48__0_512 -> bb49__0_512 [label="0"];
    bb48__0_512 -> bb50__0_512 [label="1"];
    bb48__0_512 -> bb18__0_512 [label="otherwise"];
    bb49__0_512 -> bb52__0_512 [label="return"];
    bb50__0_512 -> bb51__0_512 [label="return"];
    bb51__0_512 -> bb126__0_512 [label=""];
    bb52__0_512 -> bb53__0_512 [label="return"];
    bb53__0_512 -> bb54__0_512 [label="0"];
    bb53__0_512 -> bb55__0_512 [label="1"];
    bb53__0_512 -> bb18__0_512 [label="otherwise"];
    bb54__0_512 -> bb58__0_512 [label=""];
    bb55__0_512 -> bb56__0_512 [label="return"];
    bb56__0_512 -> bb127__0_512 [label=""];
    bb57__0_512 -> bb58__0_512 [label=""];
    bb58__0_512 -> bb59__0_512 [label="success"];
    bb59__0_512 -> bb60__0_512 [label="return"];
    bb60__0_512 -> bb61__0_512 [label="return"];
    bb61__0_512 -> bb93__0_512 [label="0"];
    bb61__0_512 -> bb62__0_512 [label="otherwise"];
    bb62__0_512 -> bb63__0_512 [label="return"];
    bb63__0_512 -> bb64__0_512 [label="return"];
    bb64__0_512 -> bb65__0_512 [label="0"];
    bb64__0_512 -> bb66__0_512 [label="1"];
    bb64__0_512 -> bb18__0_512 [label="otherwise"];
    bb65__0_512 -> bb68__0_512 [label="success"];
    bb66__0_512 -> bb67__0_512 [label="return"];
    bb67__0_512 -> bb124__0_512 [label=""];
    bb68__0_512 -> bb69__0_512 [label="return"];
    bb69__0_512 -> bb88__0_512 [label="0"];
    bb69__0_512 -> bb70__0_512 [label="otherwise"];
    bb70__0_512 -> bb71__0_512 [label="success"];
    bb71__0_512 -> bb72__0_512 [label="return"];
    bb72__0_512 -> bb73__0_512 [label="return"];
    bb73__0_512 -> bb74__0_512 [label="0"];
    bb73__0_512 -> bb75__0_512 [label="1"];
    bb73__0_512 -> bb18__0_512 [label="otherwise"];
    bb74__0_512 -> bb77__0_512 [label="success"];
    bb75__0_512 -> bb76__0_512 [label="return"];
    bb76__0_512 -> bb123__0_512 [label=""];
    bb77__0_512 -> bb78__0_512 [label="return"];
    bb78__0_512 -> bb79__0_512 [label="return"];
    bb79__0_512 -> bb80__0_512 [label="0"];
    bb79__0_512 -> bb81__0_512 [label="1"];
    bb79__0_512 -> bb18__0_512 [label="otherwise"];
    bb80__0_512 -> bb83__0_512 [label="return"];
    bb81__0_512 -> bb82__0_512 [label="return"];
    bb82__0_512 -> bb122__0_512 [label=""];
    bb83__0_512 -> bb84__0_512 [label="return"];
    bb84__0_512 -> bb85__0_512 [label="0"];
    bb84__0_512 -> bb86__0_512 [label="1"];
    bb84__0_512 -> bb18__0_512 [label="otherwise"];
    bb85__0_512 -> bb89__0_512 [label=""];
    bb86__0_512 -> bb87__0_512 [label="return"];
    bb87__0_512 -> bb122__0_512 [label=""];
    bb88__0_512 -> bb89__0_512 [label=""];
    bb89__0_512 -> bb90__0_512 [label="success"];
    bb90__0_512 -> bb91__0_512 [label="success"];
    bb91__0_512 -> bb92__0_512 [label="success"];
    bb92__0_512 -> bb119__0_512 [label=""];
    bb93__0_512 -> bb94__0_512 [label="return"];
    bb94__0_512 -> bb95__0_512 [label="return"];
    bb95__0_512 -> bb96__0_512 [label="0"];
    bb95__0_512 -> bb97__0_512 [label="1"];
    bb95__0_512 -> bb18__0_512 [label="otherwise"];
    bb96__0_512 -> bb99__0_512 [label="success"];
    bb97__0_512 -> bb98__0_512 [label="return"];
    bb98__0_512 -> bb121__0_512 [label=""];
    bb99__0_512 -> bb100__0_512 [label="return"];
    bb100__0_512 -> bb114__0_512 [label="0"];
    bb100__0_512 -> bb101__0_512 [label="otherwise"];
    bb101__0_512 -> bb102__0_512 [label="success"];
    bb102__0_512 -> bb103__0_512 [label="return"];
    bb103__0_512 -> bb104__0_512 [label="return"];
    bb104__0_512 -> bb105__0_512 [label="0"];
    bb104__0_512 -> bb106__0_512 [label="1"];
    bb104__0_512 -> bb18__0_512 [label="otherwise"];
    bb105__0_512 -> bb108__0_512 [label="success"];
    bb106__0_512 -> bb107__0_512 [label="return"];
    bb107__0_512 -> bb120__0_512 [label=""];
    bb108__0_512 -> bb109__0_512 [label="return"];
    bb109__0_512 -> bb110__0_512 [label="return"];
    bb110__0_512 -> bb111__0_512 [label="0"];
    bb110__0_512 -> bb112__0_512 [label="1"];
    bb110__0_512 -> bb18__0_512 [label="otherwise"];
    bb111__0_512 -> bb115__0_512 [label=""];
    bb112__0_512 -> bb113__0_512 [label="return"];
    bb113__0_512 -> bb120__0_512 [label=""];
    bb114__0_512 -> bb115__0_512 [label=""];
    bb115__0_512 -> bb116__0_512 [label="success"];
    bb116__0_512 -> bb117__0_512 [label="success"];
    bb117__0_512 -> bb118__0_512 [label="success"];
    bb118__0_512 -> bb119__0_512 [label=""];
    bb119__0_512 -> bb131__0_512 [label=""];
    bb120__0_512 -> bb121__0_512 [label=""];
    bb121__0_512 -> bb125__0_512 [label=""];
    bb122__0_512 -> bb123__0_512 [label=""];
    bb123__0_512 -> bb124__0_512 [label=""];
    bb124__0_512 -> bb125__0_512 [label=""];
    bb125__0_512 -> bb129__0_512 [label=""];
    bb126__0_512 -> bb127__0_512 [label=""];
    bb127__0_512 -> bb129__0_512 [label=""];
    bb128__0_512 -> bb129__0_512 [label=""];
    bb129__0_512 -> bb130__0_512 [label=""];
    bb130__0_512 -> bb131__0_512 [label=""];
    bb132__0_512 -> bb138__0_512 [label="return"];
    bb133__0_512 -> bb139__0_512 [label="return"];
    bb134__0_512 -> bb135__0_512 [label="return"];
    bb136__0_512 -> bb37__0_512 [label=""];
    bb137__0_512 -> bb37__0_512 [label=""];
    bb138__0_512 -> bb135__0_512 [label=""];
    bb139__0_512 -> bb135__0_512 [label=""];
}
