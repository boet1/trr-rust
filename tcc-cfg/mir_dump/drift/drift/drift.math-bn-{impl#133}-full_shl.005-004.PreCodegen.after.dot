digraph Mir_0_14498 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U192::full_shl(_1: math::bn::U192, _2: u32) -&gt; [u64; 4_usize]<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: [u64; 4_usize];<br align="left"/>let _11: u64;<br align="left"/>let mut _12: u64;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: u32;<br align="left"/>let mut _17: bool;<br align="left"/>let _18: math::bn::U192;<br align="left"/>let mut _19: math::bn::U192;<br align="left"/>let mut _20: u32;<br align="left"/>let mut _21: u32;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: (u32, bool);<br align="left"/>let mut _24: u64;<br align="left"/>let _25: usize;<br align="left"/>let mut _26: usize;<br align="left"/>let mut _27: bool;<br align="left"/>let _28: ();<br align="left"/>let mut _29: &amp;ReErased mut [u64];<br align="left"/>let mut _30: &amp;ReErased mut [u64];<br align="left"/>let mut _31: &amp;ReErased mut [u64; 4_usize];<br align="left"/>let mut _32: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _33: &amp;ReErased [u64];<br align="left"/>let _34: &amp;ReErased [u64];<br align="left"/>let _35: &amp;ReErased [u64];<br align="left"/>let mut _36: &amp;ReErased [u64; 3_usize];<br align="left"/>let mut _37: std::ops::RangeFull;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug shift =&gt; _2;<br align="left"/>debug u =&gt; _10;<br align="left"/>debug u_lo =&gt; _11;<br align="left"/>debug u_hi =&gt; _18;<br align="left"/>>;
    bb0__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = const true<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>StorageLive(_8)<br/>_8 = const _ as u32 (IntToInt)<br/>_6 = Lt(move _7, move _8)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_9)<br/></td></tr><tr><td align="left">_9 = panic(const &quot;assertion failed: shift &lt; Self::WORD_BITS as u32&quot;)</td></tr></table>>];
    bb4__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_10)<br/>_10 = [const 0_u64; 4]<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = const 0_usize<br/>_14 = Len((_1.0: [u64; 3]))<br/>_15 = Lt(_13, _14)<br/></td></tr><tr><td align="left">assert(move _15, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _14, _13)</td></tr></table>>];
    bb6__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_12 = (_1.0: [u64; 3])[_13]<br/>StorageLive(_16)<br/>_16 = _2<br/>_17 = Lt(_16, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _17, &quot;attempt to shift left by `{}`, which would overflow&quot;, _16)</td></tr></table>>];
    bb7__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_11 = Shl(move _12, move _16)<br/>StorageDead(_16)<br/>StorageDead(_12)<br/>StorageDead(_13)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _1<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = const _ as u32 (IntToInt)<br/>StorageLive(_22)<br/>_22 = _2<br/>_23 = CheckedSub(_21, _22)<br/></td></tr><tr><td align="left">assert(!move (_23.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _21, move _22)</td></tr></table>>];
    bb8__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_20 = move (_23.0: u32)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_18 = &lt;U192 as Shr&lt;u32&gt;&gt;::shr(move _19, move _20)</td></tr></table>>];
    bb9__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_24)<br/>_24 = _11<br/>StorageLive(_25)<br/>_25 = const 0_usize<br/>_26 = Len(_10)<br/>_27 = Lt(_25, _26)<br/></td></tr><tr><td align="left">assert(move _27, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _26, _25)</td></tr></table>>];
    bb10__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_10[_25] = move _24<br/>StorageDead(_24)<br/>StorageDead(_25)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = &amp;mut _10<br/>StorageLive(_32)<br/>_32 = RangeFrom::&lt;usize&gt; { start: const 1_usize }<br/></td></tr><tr><td align="left">_30 = &lt;[u64; 4] as IndexMut&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index_mut(move _31, move _32)</td></tr></table>>];
    bb11__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_29 = &amp;mut (*_30)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;(_18.0: [u64; 3])<br/>StorageLive(_37)<br/>_37 = RangeFull<br/></td></tr><tr><td align="left">_35 = &lt;[u64; 3] as Index&lt;RangeFull&gt;&gt;::index(move _36, move _37)</td></tr></table>>];
    bb12__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>_34 = &amp;(*_35)<br/>_33 = &amp;(*_34)<br/></td></tr><tr><td align="left">_28 = core::slice::&lt;impl [u64]&gt;::copy_from_slice(move _29, move _33)</td></tr></table>>];
    bb13__0_14498 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_29)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_30)<br/>StorageDead(_28)<br/>_0 = _10<br/>StorageDead(_18)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_14498 -> bb4__0_14498 [label="0"];
    bb0__0_14498 -> bb1__0_14498 [label="otherwise"];
    bb1__0_14498 -> bb3__0_14498 [label="0"];
    bb1__0_14498 -> bb2__0_14498 [label="otherwise"];
    bb2__0_14498 -> bb5__0_14498 [label=""];
    bb4__0_14498 -> bb5__0_14498 [label=""];
    bb5__0_14498 -> bb6__0_14498 [label="success"];
    bb6__0_14498 -> bb7__0_14498 [label="success"];
    bb7__0_14498 -> bb8__0_14498 [label="success"];
    bb8__0_14498 -> bb9__0_14498 [label="return"];
    bb9__0_14498 -> bb10__0_14498 [label="success"];
    bb10__0_14498 -> bb11__0_14498 [label="return"];
    bb11__0_14498 -> bb12__0_14498 [label="return"];
    bb12__0_14498 -> bb13__0_14498 [label="return"];
}
