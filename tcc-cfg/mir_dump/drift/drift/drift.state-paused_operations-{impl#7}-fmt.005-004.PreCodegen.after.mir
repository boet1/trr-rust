// MIR for `paused_operations::<impl at programs/drift/src/state/paused_operations.rs:6:34: 6:39>::fmt` after PreCodegen

fn paused_operations::<impl at programs/drift/src/state/paused_operations.rs:6:34: 6:39>::fmt(_1: &PerpOperation, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::Formatter<'_>;
    let mut _4: &str;
    let mut _5: isize;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;

    bb0: {
        StorageLive(_3);
        _3 = &mut (*_2);
        StorageLive(_4);
        _5 = discriminant((*_1));
        switchInt(move _5) -> [1: bb3, 2: bb4, 4: bb5, 8: bb6, 16: bb7, 32: bb8, 64: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_12);
        _12 = const "AmmImmediateFill";
        _4 = &(*_12);
        StorageDead(_12);
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_6);
        _6 = const "UpdateFunding";
        _4 = &(*_6);
        StorageDead(_6);
        goto -> bb9;
    }

    bb4: {
        StorageLive(_7);
        _7 = const "AmmFill";
        _4 = &(*_7);
        StorageDead(_7);
        goto -> bb9;
    }

    bb5: {
        StorageLive(_8);
        _8 = const "Fill";
        _4 = &(*_8);
        StorageDead(_8);
        goto -> bb9;
    }

    bb6: {
        StorageLive(_9);
        _9 = const "SettlePnl";
        _4 = &(*_9);
        StorageDead(_9);
        goto -> bb9;
    }

    bb7: {
        StorageLive(_10);
        _10 = const "SettlePnlWithPosition";
        _4 = &(*_10);
        StorageDead(_10);
        goto -> bb9;
    }

    bb8: {
        StorageLive(_11);
        _11 = const "Liquidation";
        _4 = &(*_11);
        StorageDead(_11);
        goto -> bb9;
    }

    bb9: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
