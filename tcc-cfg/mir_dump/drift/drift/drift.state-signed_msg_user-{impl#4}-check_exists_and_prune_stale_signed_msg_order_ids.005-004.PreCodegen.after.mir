// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:112:1: 112:44>::check_exists_and_prune_stale_signed_msg_order_ids` after PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:112:1: 112:44>::check_exists_and_prune_stale_signed_msg_order_ids(_1: &mut SignedMsgUserOrdersZeroCopyMut<'_>, _2: SignedMsgOrderId, _3: u64) -> bool {
    debug self => _1;
    debug signed_msg_order_id => _2;
    debug current_slot => _3;
    let mut _0: bool;
    let mut _4: bool;
    let _5: ();
    let mut _6: std::ops::Range<u32>;
    let mut _7: std::ops::Range<u32>;
    let mut _8: u32;
    let mut _9: &state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut<'_>;
    let mut _11: ();
    let _12: ();
    let mut _13: std::option::Option<u32>;
    let mut _14: &mut std::ops::Range<u32>;
    let mut _15: &mut std::ops::Range<u32>;
    let mut _16: isize;
    let mut _17: !;
    let mut _20: &mut state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut<'_>;
    let mut _21: u32;
    let mut _22: bool;
    let mut _23: &[u8; 8];
    let mut _24: &[u8; 8];
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: (u64, bool);
    let mut _29: u64;
    let mut _30: bool;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: (u64, bool);
    let mut _34: u64;
    scope 1 {
        debug uuid_exists => _4;
        let mut _10: std::ops::Range<u32>;
        scope 2 {
            debug iter => _10;
            let _18: u32;
            scope 3 {
                debug i => _18;
                let _19: &mut state::signed_msg_user::SignedMsgOrderId;
                scope 4 {
                    debug existing_signed_msg_order_id => _19;
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        _8 = SignedMsgUserOrdersZeroCopyMut::<'_>::len(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = std::ops::Range::<u32> { start: const 0_u32, end: move _8 };
        StorageDead(_8);
        _6 = <std::ops::Range<u32> as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_10);
        _10 = move _6;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut _10;
        _14 = &mut (*_15);
        _13 = <std::ops::Range<u32> as Iterator>::next(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_13 as Some).0: u32);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut (*_1);
        StorageLive(_21);
        _21 = _18;
        _19 = SignedMsgUserOrdersZeroCopyMut::<'_>::get_mut(move _20, move _21) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _5 = const ();
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        _0 = _4;
        StorageDead(_4);
        return;
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_19).0: [u8; 8]);
        StorageLive(_24);
        _24 = &(_2.0: [u8; 8]);
        _22 = <[u8; 8] as PartialEq>::eq(move _23, move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _22) -> [0: bb14, otherwise: bb10];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_19).1: u64);
        _28 = CheckedAdd(_27, const _);
        assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, const _) -> [success: bb11, unwind continue];
    }

    bb11: {
        _26 = move (_28.0: u64);
        StorageDead(_27);
        StorageLive(_29);
        _29 = _3;
        _25 = Ge(move _26, move _29);
        switchInt(move _25) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_26);
        _4 = const true;
        _12 = const ();
        goto -> bb20;
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb15;
    }

    bb15: {
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_19).1: u64);
        _33 = CheckedAdd(_32, const _);
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _32, const _) -> [success: bb16, unwind continue];
    }

    bb16: {
        _31 = move (_33.0: u64);
        StorageDead(_32);
        StorageLive(_34);
        _34 = _3;
        _30 = Lt(move _31, move _34);
        switchInt(move _30) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_31);
        ((*_19).0: [u8; 8]) = [const 0_u8; 8];
        ((*_19).1: u64) = const 0_u64;
        ((*_19).2: u32) = const 0_u32;
        _12 = const ();
        goto -> bb19;
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_31);
        _12 = const ();
        goto -> bb19;
    }

    bb19: {
        StorageDead(_30);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        _11 = const ();
        goto -> bb3;
    }
}
