// MIR for `instructions::user::handle_end_swap` after PreCodegen

fn instructions::user::handle_end_swap(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::Swap<'_>>, _2: u16, _3: u16, _4: Option<u64>, _5: Option<instructions::user::SwapReduceOnly>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug in_market_index => _2;
    debug out_market_index => _3;
    debug limit_price => _4;
    debug reduce_only => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _10: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _19: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _28: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _29: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: instructions::optional_accounts::AccountMaps<'_>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _36: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _37: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _38: &std::collections::BTreeSet<u16>;
    let _39: &std::collections::BTreeSet<u16>;
    let _40: std::collections::BTreeSet<u16>;
    let mut _41: &std::collections::BTreeSet<u16>;
    let _42: &std::collections::BTreeSet<u16>;
    let _43: std::collections::BTreeSet<u16>;
    let mut _44: std::vec::Vec<u16>;
    let mut _45: std::boxed::Box<[u16]>;
    let mut _46: std::boxed::Box<[u16; 2]>;
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: *mut u8;
    let mut _50: std::boxed::Box<[u16; 2]>;
    let mut _51: u16;
    let mut _52: u16;
    let mut _53: u64;
    let mut _54: std::option::Option<state::state::OracleGuardRails>;
    let mut _55: state::state::OracleGuardRails;
    let mut _56: &state::state::State;
    let mut _57: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>>;
    let mut _65: std::result::Result<std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>, error::ErrorCode>;
    let mut _66: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _74: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _75: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _83: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _84: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _94: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _95: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _96: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _97: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _98: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _106: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _107: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _108: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _109: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _110: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, enumflags2::BitFlags<state::state::ExchangeStatus>>;
    let mut _118: std::result::Result<enumflags2::BitFlags<state::state::ExchangeStatus>, error::ErrorCode>;
    let mut _119: &state::state::State;
    let _120: &state::state::State;
    let mut _121: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _127: ();
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _129: std::result::Result<(), error::ErrorCode>;
    let mut _130: bool;
    let mut _131: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _132: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _133: state::state::ExchangeStatus;
    let mut _134: state::state::ExchangeStatus;
    let mut _135: ();
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 1];
    let _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: [core::fmt::rt::Argument<'_>; 1];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &error::ErrorCode;
    let _155: &error::ErrorCode;
    let mut _156: error::ErrorCode;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _164: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _165: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _166: &u16;
    let _167: &u16;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _173: ();
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _175: std::result::Result<(), error::ErrorCode>;
    let mut _176: bool;
    let mut _177: &state::spot_market::SpotMarket;
    let _178: &state::spot_market::SpotMarket;
    let mut _179: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _180: state::paused_operations::SpotOperation;
    let mut _181: ();
    let _183: ();
    let mut _184: &str;
    let _185: &str;
    let mut _186: &std::string::String;
    let _187: &std::string::String;
    let _188: std::string::String;
    let mut _190: std::fmt::Arguments<'_>;
    let mut _191: &[&str];
    let mut _192: &[&str; 2];
    let _193: &[&str; 2];
    let _194: [&str; 2];
    let mut _195: &[core::fmt::rt::Argument<'_>];
    let mut _196: &[core::fmt::rt::Argument<'_>; 1];
    let _197: &[core::fmt::rt::Argument<'_>; 1];
    let _198: [core::fmt::rt::Argument<'_>; 1];
    let mut _199: core::fmt::rt::Argument<'_>;
    let mut _200: &error::ErrorCode;
    let _201: &error::ErrorCode;
    let _202: ();
    let mut _203: &str;
    let _204: &str;
    let mut _205: &std::string::String;
    let _206: &std::string::String;
    let _207: std::string::String;
    let mut _209: std::fmt::Arguments<'_>;
    let mut _210: &[&str];
    let mut _211: &[&str; 2];
    let _212: &[&str; 2];
    let _213: [&str; 2];
    let mut _214: &[core::fmt::rt::Argument<'_>];
    let mut _215: &[core::fmt::rt::Argument<'_>; 1];
    let _216: &[core::fmt::rt::Argument<'_>; 1];
    let _217: [core::fmt::rt::Argument<'_>; 1];
    let mut _218: core::fmt::rt::Argument<'_>;
    let mut _219: &u16;
    let _220: &u16;
    let mut _221: error::ErrorCode;
    let mut _222: isize;
    let mut _224: !;
    let mut _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _227: ();
    let mut _228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _229: std::result::Result<(), error::ErrorCode>;
    let mut _230: bool;
    let mut _231: u64;
    let mut _232: &state::spot_market::SpotMarket;
    let mut _233: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _234: ();
    let _236: ();
    let mut _237: &str;
    let _238: &str;
    let mut _239: &std::string::String;
    let _240: &std::string::String;
    let _241: std::string::String;
    let mut _243: std::fmt::Arguments<'_>;
    let mut _244: &[&str];
    let mut _245: &[&str; 2];
    let _246: &[&str; 2];
    let _247: [&str; 2];
    let mut _248: &[core::fmt::rt::Argument<'_>];
    let mut _249: &[core::fmt::rt::Argument<'_>; 1];
    let _250: &[core::fmt::rt::Argument<'_>; 1];
    let _251: [core::fmt::rt::Argument<'_>; 1];
    let mut _252: core::fmt::rt::Argument<'_>;
    let mut _253: &error::ErrorCode;
    let _254: &error::ErrorCode;
    let _255: ();
    let mut _256: &str;
    let _257: &str;
    let mut _258: error::ErrorCode;
    let mut _259: isize;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _265: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _266: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _267: &mut state::oracle_map::OracleMap<'_>;
    let mut _268: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _269: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _270: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _271: &state::spot_market::SpotMarket;
    let _272: &state::spot_market::SpotMarket;
    let mut _273: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _274: isize;
    let mut _276: !;
    let mut _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _281: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _282: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _283: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _284: &u16;
    let _285: &u16;
    let mut _286: isize;
    let mut _288: !;
    let mut _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _291: ();
    let mut _292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _293: std::result::Result<(), error::ErrorCode>;
    let mut _294: bool;
    let mut _295: &state::spot_market::SpotMarket;
    let _296: &state::spot_market::SpotMarket;
    let mut _297: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _298: state::paused_operations::SpotOperation;
    let mut _299: ();
    let _301: ();
    let mut _302: &str;
    let _303: &str;
    let mut _304: &std::string::String;
    let _305: &std::string::String;
    let _306: std::string::String;
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let mut _310: &[&str; 2];
    let _311: &[&str; 2];
    let _312: [&str; 2];
    let mut _313: &[core::fmt::rt::Argument<'_>];
    let mut _314: &[core::fmt::rt::Argument<'_>; 1];
    let _315: &[core::fmt::rt::Argument<'_>; 1];
    let _316: [core::fmt::rt::Argument<'_>; 1];
    let mut _317: core::fmt::rt::Argument<'_>;
    let mut _318: &error::ErrorCode;
    let _319: &error::ErrorCode;
    let _320: ();
    let mut _321: &str;
    let _322: &str;
    let mut _323: &std::string::String;
    let _324: &std::string::String;
    let _325: std::string::String;
    let mut _327: std::fmt::Arguments<'_>;
    let mut _328: &[&str];
    let mut _329: &[&str; 2];
    let _330: &[&str; 2];
    let _331: [&str; 2];
    let mut _332: &[core::fmt::rt::Argument<'_>];
    let mut _333: &[core::fmt::rt::Argument<'_>; 1];
    let _334: &[core::fmt::rt::Argument<'_>; 1];
    let _335: [core::fmt::rt::Argument<'_>; 1];
    let mut _336: core::fmt::rt::Argument<'_>;
    let mut _337: &u16;
    let _338: &u16;
    let mut _339: error::ErrorCode;
    let mut _340: isize;
    let mut _342: !;
    let mut _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _347: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _348: &mut state::oracle_map::OracleMap<'_>;
    let mut _349: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _350: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _351: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _352: &state::spot_market::SpotMarket;
    let _353: &state::spot_market::SpotMarket;
    let mut _354: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _364: &state::spot_market::SpotMarket;
    let mut _365: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _366: ();
    let mut _367: bool;
    let mut _368: u64;
    let mut _369: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _370: &anchor_spl::token_interface::TokenAccount;
    let _371: &anchor_spl::token_interface::TokenAccount;
    let mut _372: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _373: u64;
    let mut _374: &state::spot_market::SpotMarket;
    let mut _375: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _377: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _378: std::result::Result<u64, error::ErrorCode>;
    let mut _379: u64;
    let mut _380: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _381: &anchor_spl::token_interface::TokenAccount;
    let _382: &anchor_spl::token_interface::TokenAccount;
    let mut _383: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _384: u64;
    let mut _385: &state::spot_market::SpotMarket;
    let mut _386: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _387: isize;
    let mut _389: !;
    let mut _390: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _392: ();
    let mut _393: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _394: std::result::Result<(), anchor_lang::error::Error>;
    let mut _395: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _396: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _397: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _398: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _399: &anchor_lang::prelude::AccountInfo<'_>;
    let _400: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _401: &anchor_lang::prelude::Signer<'_>;
    let _402: &anchor_lang::prelude::Signer<'_>;
    let mut _403: u64;
    let mut _404: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _405: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _406: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _407: bool;
    let mut _408: &state::spot_market::SpotMarket;
    let _409: &state::spot_market::SpotMarket;
    let mut _410: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _411: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _412: isize;
    let mut _414: !;
    let mut _415: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _417: ();
    let mut _418: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _419: std::result::Result<(), anchor_lang::error::Error>;
    let mut _420: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _421: isize;
    let mut _423: !;
    let mut _424: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _426: ();
    let mut _427: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _428: std::result::Result<(), anchor_lang::error::Error>;
    let mut _429: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _430: isize;
    let mut _432: !;
    let mut _433: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _435: u64;
    let mut _436: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _437: std::result::Result<u64, error::ErrorCode>;
    let mut _438: u64;
    let mut _439: u64;
    let mut _440: isize;
    let mut _442: !;
    let mut _443: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _446: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _447: std::result::Result<i128, error::ErrorCode>;
    let mut _448: &state::user::SpotPosition;
    let _449: &mut state::user::SpotPosition;
    let mut _450: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _451: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _452: &mut state::user::User;
    let mut _453: &mut state::user::User;
    let mut _454: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _455: u16;
    let mut _456: isize;
    let mut _458: !;
    let mut _459: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _461: &state::spot_market::SpotMarket;
    let _462: &state::spot_market::SpotMarket;
    let mut _463: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _464: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _465: isize;
    let mut _467: !;
    let mut _468: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _470: ();
    let mut _471: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _472: std::result::Result<(), error::ErrorCode>;
    let mut _473: u128;
    let mut _474: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _475: std::result::Result<u128, error::ErrorCode>;
    let mut _476: u64;
    let mut _477: isize;
    let mut _479: !;
    let mut _480: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _482: &state::spot_market::SpotBalanceType;
    let _483: &state::spot_market::SpotBalanceType;
    let _484: state::spot_market::SpotBalanceType;
    let mut _485: &mut state::spot_market::SpotMarket;
    let mut _486: &mut state::spot_market::SpotMarket;
    let mut _487: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _488: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _489: &mut state::user::User;
    let mut _490: &mut state::user::User;
    let mut _491: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _492: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _493: isize;
    let mut _495: !;
    let mut _496: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _499: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _500: std::result::Result<i128, error::ErrorCode>;
    let mut _501: &state::user::SpotPosition;
    let _502: &mut state::user::SpotPosition;
    let mut _503: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _504: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _505: &mut state::user::User;
    let mut _506: &mut state::user::User;
    let mut _507: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _508: u16;
    let mut _509: isize;
    let mut _511: !;
    let mut _512: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _514: &state::spot_market::SpotMarket;
    let _515: &state::spot_market::SpotMarket;
    let mut _516: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _517: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _518: isize;
    let mut _520: !;
    let mut _521: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _524: bool;
    let mut _525: i128;
    let mut _526: u128;
    let mut _527: i128;
    let mut _528: u128;
    let mut _529: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _530: std::result::Result<u128, error::ErrorCode>;
    let mut _531: u64;
    let mut _532: isize;
    let mut _534: !;
    let mut _535: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _537: ();
    let mut _538: bool;
    let _539: ();
    let mut _540: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _541: std::result::Result<(), error::ErrorCode>;
    let mut _542: bool;
    let mut _543: &state::spot_market::SpotMarket;
    let _544: &state::spot_market::SpotMarket;
    let mut _545: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _546: ();
    let _548: ();
    let mut _549: &str;
    let _550: &str;
    let mut _551: &std::string::String;
    let _552: &std::string::String;
    let _553: std::string::String;
    let mut _555: std::fmt::Arguments<'_>;
    let mut _556: &[&str];
    let mut _557: &[&str; 2];
    let _558: &[&str; 2];
    let _559: [&str; 2];
    let mut _560: &[core::fmt::rt::Argument<'_>];
    let mut _561: &[core::fmt::rt::Argument<'_>; 1];
    let _562: &[core::fmt::rt::Argument<'_>; 1];
    let _563: [core::fmt::rt::Argument<'_>; 1];
    let mut _564: core::fmt::rt::Argument<'_>;
    let mut _565: &error::ErrorCode;
    let _566: &error::ErrorCode;
    let _567: ();
    let mut _568: &str;
    let _569: &str;
    let mut _570: &std::string::String;
    let _571: &std::string::String;
    let _572: std::string::String;
    let mut _574: std::fmt::Arguments<'_>;
    let mut _575: &[&str];
    let mut _576: &[&str; 3];
    let _577: &[&str; 3];
    let _578: [&str; 3];
    let mut _579: &[core::fmt::rt::Argument<'_>];
    let mut _580: &[core::fmt::rt::Argument<'_>; 2];
    let _581: &[core::fmt::rt::Argument<'_>; 2];
    let _582: [core::fmt::rt::Argument<'_>; 2];
    let mut _583: core::fmt::rt::Argument<'_>;
    let mut _584: &i128;
    let _585: &i128;
    let mut _586: core::fmt::rt::Argument<'_>;
    let mut _587: &u64;
    let _588: &u64;
    let mut _589: error::ErrorCode;
    let mut _590: isize;
    let mut _592: !;
    let mut _593: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _595: ();
    let mut _596: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _597: std::result::Result<(), error::ErrorCode>;
    let mut _598: bool;
    let mut _599: &std::option::Option<instructions::user::SwapReduceOnly>;
    let mut _600: &std::option::Option<instructions::user::SwapReduceOnly>;
    let _601: std::option::Option<instructions::user::SwapReduceOnly>;
    let mut _602: instructions::user::SwapReduceOnly;
    let mut _603: ();
    let _605: ();
    let mut _606: &str;
    let _607: &str;
    let mut _608: &std::string::String;
    let _609: &std::string::String;
    let _610: std::string::String;
    let mut _612: std::fmt::Arguments<'_>;
    let mut _613: &[&str];
    let mut _614: &[&str; 2];
    let _615: &[&str; 2];
    let _616: [&str; 2];
    let mut _617: &[core::fmt::rt::Argument<'_>];
    let mut _618: &[core::fmt::rt::Argument<'_>; 1];
    let _619: &[core::fmt::rt::Argument<'_>; 1];
    let _620: [core::fmt::rt::Argument<'_>; 1];
    let mut _621: core::fmt::rt::Argument<'_>;
    let mut _622: &error::ErrorCode;
    let _623: &error::ErrorCode;
    let _624: ();
    let mut _625: &str;
    let _626: &str;
    let mut _627: &std::string::String;
    let _628: &std::string::String;
    let _629: std::string::String;
    let mut _631: std::fmt::Arguments<'_>;
    let mut _632: &[&str];
    let mut _633: &[&str; 3];
    let _634: &[&str; 3];
    let _635: [&str; 3];
    let mut _636: &[core::fmt::rt::Argument<'_>];
    let mut _637: &[core::fmt::rt::Argument<'_>; 2];
    let _638: &[core::fmt::rt::Argument<'_>; 2];
    let _639: [core::fmt::rt::Argument<'_>; 2];
    let mut _640: core::fmt::rt::Argument<'_>;
    let mut _641: &i128;
    let _642: &i128;
    let mut _643: core::fmt::rt::Argument<'_>;
    let mut _644: &u64;
    let _645: &u64;
    let mut _646: error::ErrorCode;
    let mut _647: isize;
    let mut _649: !;
    let mut _650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _652: ();
    let mut _653: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _654: std::result::Result<(), error::ErrorCode>;
    let mut _655: bool;
    let mut _656: &state::user::User;
    let mut _657: &std::cell::RefMut<'_, state::user::User>;
    let mut _658: ();
    let _660: ();
    let mut _661: &str;
    let _662: &str;
    let mut _663: &std::string::String;
    let _664: &std::string::String;
    let _665: std::string::String;
    let mut _667: std::fmt::Arguments<'_>;
    let mut _668: &[&str];
    let mut _669: &[&str; 2];
    let _670: &[&str; 2];
    let _671: [&str; 2];
    let mut _672: &[core::fmt::rt::Argument<'_>];
    let mut _673: &[core::fmt::rt::Argument<'_>; 1];
    let _674: &[core::fmt::rt::Argument<'_>; 1];
    let _675: [core::fmt::rt::Argument<'_>; 1];
    let mut _676: core::fmt::rt::Argument<'_>;
    let mut _677: &error::ErrorCode;
    let _678: &error::ErrorCode;
    let _679: ();
    let mut _680: &str;
    let _681: &str;
    let mut _682: &std::string::String;
    let _683: &std::string::String;
    let _684: std::string::String;
    let mut _686: std::fmt::Arguments<'_>;
    let mut _687: &[&str];
    let mut _688: &[&str; 1];
    let _689: &[&str; 1];
    let _690: [&str; 1];
    let mut _691: &[core::fmt::rt::Argument<'_>];
    let mut _692: &[core::fmt::rt::Argument<'_>; 1];
    let _693: &[core::fmt::rt::Argument<'_>; 1];
    let _694: [core::fmt::rt::Argument<'_>; 1];
    let mut _695: core::fmt::rt::Argument<'_>;
    let mut _696: &u16;
    let _697: &u16;
    let mut _698: error::ErrorCode;
    let mut _699: isize;
    let mut _701: !;
    let mut _702: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _704: ();
    let mut _705: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _706: std::result::Result<(), error::ErrorCode>;
    let mut _707: bool;
    let mut _708: &state::user::User;
    let _709: &state::user::User;
    let mut _710: &std::cell::RefMut<'_, state::user::User>;
    let mut _711: ();
    let _713: ();
    let mut _714: &str;
    let _715: &str;
    let mut _716: &std::string::String;
    let _717: &std::string::String;
    let _718: std::string::String;
    let mut _720: std::fmt::Arguments<'_>;
    let mut _721: &[&str];
    let mut _722: &[&str; 2];
    let _723: &[&str; 2];
    let _724: [&str; 2];
    let mut _725: &[core::fmt::rt::Argument<'_>];
    let mut _726: &[core::fmt::rt::Argument<'_>; 1];
    let _727: &[core::fmt::rt::Argument<'_>; 1];
    let _728: [core::fmt::rt::Argument<'_>; 1];
    let mut _729: core::fmt::rt::Argument<'_>;
    let mut _730: &error::ErrorCode;
    let _731: &error::ErrorCode;
    let _732: ();
    let mut _733: &str;
    let _734: &str;
    let mut _735: &std::string::String;
    let _736: &std::string::String;
    let _737: std::string::String;
    let mut _739: std::fmt::Arguments<'_>;
    let mut _740: &[&str];
    let mut _741: &[&str; 1];
    let _742: &[&str; 1];
    let _743: [&str; 1];
    let mut _744: &[core::fmt::rt::Argument<'_>];
    let mut _745: &[core::fmt::rt::Argument<'_>; 1];
    let _746: &[core::fmt::rt::Argument<'_>; 1];
    let _747: [core::fmt::rt::Argument<'_>; 1];
    let mut _748: core::fmt::rt::Argument<'_>;
    let mut _749: &u16;
    let _750: &u16;
    let mut _751: error::ErrorCode;
    let mut _752: isize;
    let mut _754: !;
    let mut _755: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _757: i64;
    let mut _758: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _759: std::result::Result<i64, error::ErrorCode>;
    let mut _760: &state::spot_market::SpotMarket;
    let _761: &state::spot_market::SpotMarket;
    let mut _762: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _763: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _764: u64;
    let mut _765: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _766: &anchor_spl::token_interface::TokenAccount;
    let _767: &anchor_spl::token_interface::TokenAccount;
    let mut _768: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _769: isize;
    let mut _771: !;
    let mut _772: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _774: &mut state::spot_market::SpotMarket;
    let mut _775: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _776: &mut state::spot_market::SpotMarket;
    let mut _777: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _781: ();
    let mut _782: bool;
    let mut _783: u64;
    let mut _784: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _785: &anchor_spl::token_interface::TokenAccount;
    let _786: &anchor_spl::token_interface::TokenAccount;
    let mut _787: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _788: u64;
    let mut _789: &state::spot_market::SpotMarket;
    let mut _790: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _791: u64;
    let mut _792: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _793: std::result::Result<u64, error::ErrorCode>;
    let mut _794: u64;
    let mut _795: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _796: &anchor_spl::token_interface::TokenAccount;
    let _797: &anchor_spl::token_interface::TokenAccount;
    let mut _798: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _799: u64;
    let mut _800: &state::spot_market::SpotMarket;
    let mut _801: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _802: isize;
    let mut _804: !;
    let mut _805: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _807: ();
    let mut _808: isize;
    let _810: ();
    let mut _811: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _812: std::result::Result<(), anchor_lang::error::Error>;
    let mut _813: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _814: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _815: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _816: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _817: &anchor_lang::prelude::AccountInfo<'_>;
    let _818: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _819: &anchor_lang::prelude::Signer<'_>;
    let _820: &anchor_lang::prelude::Signer<'_>;
    let mut _821: u64;
    let mut _822: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _823: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _824: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _825: bool;
    let mut _826: &state::spot_market::SpotMarket;
    let _827: &state::spot_market::SpotMarket;
    let mut _828: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _829: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _830: isize;
    let mut _832: !;
    let mut _833: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _835: ();
    let mut _836: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _837: std::result::Result<(), anchor_lang::error::Error>;
    let mut _838: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _839: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _840: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _841: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _842: &anchor_lang::prelude::AccountInfo<'_>;
    let _843: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _844: &anchor_lang::prelude::Signer<'_>;
    let _845: &anchor_lang::prelude::Signer<'_>;
    let mut _846: u64;
    let mut _847: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _848: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _849: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _850: bool;
    let mut _851: &state::spot_market::SpotMarket;
    let _852: &state::spot_market::SpotMarket;
    let mut _853: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _854: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _855: isize;
    let mut _857: !;
    let mut _858: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _860: ();
    let mut _861: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _862: std::result::Result<(), anchor_lang::error::Error>;
    let mut _863: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _864: isize;
    let mut _866: !;
    let mut _867: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _869: ();
    let mut _870: isize;
    let mut _873: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _874: std::result::Result<u128, error::ErrorCode>;
    let mut _875: u128;
    let mut _876: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _877: std::result::Result<u128, error::ErrorCode>;
    let mut _878: u64;
    let mut _879: isize;
    let mut _881: !;
    let mut _882: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _884: u128;
    let mut _885: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _886: std::result::Result<u128, error::ErrorCode>;
    let mut _887: u64;
    let mut _888: isize;
    let mut _890: !;
    let mut _891: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _893: u32;
    let mut _894: &state::spot_market::SpotMarket;
    let mut _895: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _896: u32;
    let mut _897: &state::spot_market::SpotMarket;
    let mut _898: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _899: isize;
    let mut _901: !;
    let mut _902: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _904: ();
    let mut _905: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _906: std::result::Result<(), error::ErrorCode>;
    let mut _907: bool;
    let mut _908: u128;
    let mut _909: u128;
    let mut _910: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _911: std::result::Result<u128, error::ErrorCode>;
    let mut _912: u64;
    let mut _913: isize;
    let mut _915: !;
    let mut _916: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _918: ();
    let _920: ();
    let mut _921: &str;
    let _922: &str;
    let mut _923: &std::string::String;
    let _924: &std::string::String;
    let _925: std::string::String;
    let mut _927: std::fmt::Arguments<'_>;
    let mut _928: &[&str];
    let mut _929: &[&str; 2];
    let _930: &[&str; 2];
    let _931: [&str; 2];
    let mut _932: &[core::fmt::rt::Argument<'_>];
    let mut _933: &[core::fmt::rt::Argument<'_>; 1];
    let _934: &[core::fmt::rt::Argument<'_>; 1];
    let _935: [core::fmt::rt::Argument<'_>; 1];
    let mut _936: core::fmt::rt::Argument<'_>;
    let mut _937: &error::ErrorCode;
    let _938: &error::ErrorCode;
    let _939: ();
    let mut _940: &str;
    let _941: &str;
    let mut _942: &std::string::String;
    let _943: &std::string::String;
    let _944: std::string::String;
    let mut _946: std::fmt::Arguments<'_>;
    let mut _947: &[&str];
    let mut _948: &[&str; 3];
    let _949: &[&str; 3];
    let _950: [&str; 3];
    let mut _951: &[core::fmt::rt::Argument<'_>];
    let mut _952: &[core::fmt::rt::Argument<'_>; 2];
    let _953: &[core::fmt::rt::Argument<'_>; 2];
    let _954: [core::fmt::rt::Argument<'_>; 2];
    let mut _955: core::fmt::rt::Argument<'_>;
    let mut _956: &u128;
    let _957: &u128;
    let mut _958: core::fmt::rt::Argument<'_>;
    let mut _959: &u64;
    let _960: &u64;
    let mut _961: error::ErrorCode;
    let mut _962: isize;
    let mut _964: !;
    let mut _965: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _969: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _970: std::result::Result<u64, error::ErrorCode>;
    let mut _971: u64;
    let mut _972: u64;
    let mut _973: isize;
    let mut _975: !;
    let mut _976: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _978: u64;
    let mut _979: u64;
    let mut _980: &state::spot_market::SpotMarket;
    let mut _981: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _982: u64;
    let mut _983: &mut state::spot_market::SpotMarket;
    let mut _984: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _986: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _987: std::result::Result<i128, error::ErrorCode>;
    let mut _988: i128;
    let mut _989: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _990: std::result::Result<i128, error::ErrorCode>;
    let mut _991: u64;
    let mut _992: isize;
    let mut _994: !;
    let mut _995: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _997: u32;
    let mut _998: &state::spot_market::SpotMarket;
    let mut _999: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1000: i64;
    let mut _1001: isize;
    let mut _1003: !;
    let mut _1004: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1006: ();
    let mut _1007: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1008: std::result::Result<(), error::ErrorCode>;
    let mut _1009: &mut state::user::User;
    let mut _1010: &mut state::user::User;
    let mut _1011: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1012: i64;
    let mut _1013: i64;
    let mut _1014: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1015: std::result::Result<i64, error::ErrorCode>;
    let mut _1016: i128;
    let mut _1017: isize;
    let mut _1019: !;
    let mut _1020: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1022: bool;
    let mut _1023: isize;
    let mut _1025: !;
    let mut _1026: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1028: ();
    let mut _1029: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1030: std::result::Result<(), error::ErrorCode>;
    let mut _1031: &mut state::user::UserStats;
    let mut _1032: &mut state::user::UserStats;
    let mut _1033: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1034: u64;
    let mut _1035: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1036: std::result::Result<u64, error::ErrorCode>;
    let mut _1037: i128;
    let mut _1038: isize;
    let mut _1040: !;
    let mut _1041: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1043: isize;
    let mut _1045: !;
    let mut _1046: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1048: ();
    let mut _1049: bool;
    let mut _1050: u64;
    let mut _1052: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1053: std::result::Result<i128, error::ErrorCode>;
    let mut _1054: i128;
    let mut _1055: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1056: std::result::Result<i128, error::ErrorCode>;
    let mut _1057: u64;
    let mut _1058: isize;
    let mut _1060: !;
    let mut _1061: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1063: u32;
    let mut _1064: &state::spot_market::SpotMarket;
    let mut _1065: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1066: i64;
    let mut _1067: isize;
    let mut _1069: !;
    let mut _1070: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1072: ();
    let mut _1073: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1074: std::result::Result<(), error::ErrorCode>;
    let mut _1075: &mut state::user::UserStats;
    let mut _1076: &mut state::user::UserStats;
    let mut _1077: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1078: u8;
    let mut _1079: &state::spot_market::SpotMarket;
    let mut _1080: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1081: u64;
    let mut _1082: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1083: std::result::Result<u64, error::ErrorCode>;
    let mut _1084: i128;
    let mut _1085: isize;
    let mut _1087: !;
    let mut _1088: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1090: i64;
    let mut _1091: isize;
    let mut _1093: !;
    let mut _1094: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1096: ();
    let mut _1097: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1098: std::result::Result<(), error::ErrorCode>;
    let mut _1099: bool;
    let mut _1100: u64;
    let mut _1101: ();
    let _1103: ();
    let mut _1104: &str;
    let _1105: &str;
    let mut _1106: &std::string::String;
    let _1107: &std::string::String;
    let _1108: std::string::String;
    let mut _1110: std::fmt::Arguments<'_>;
    let mut _1111: &[&str];
    let mut _1112: &[&str; 2];
    let _1113: &[&str; 2];
    let _1114: [&str; 2];
    let mut _1115: &[core::fmt::rt::Argument<'_>];
    let mut _1116: &[core::fmt::rt::Argument<'_>; 1];
    let _1117: &[core::fmt::rt::Argument<'_>; 1];
    let _1118: [core::fmt::rt::Argument<'_>; 1];
    let mut _1119: core::fmt::rt::Argument<'_>;
    let mut _1120: &error::ErrorCode;
    let _1121: &error::ErrorCode;
    let _1122: ();
    let mut _1123: &str;
    let _1124: &str;
    let mut _1125: error::ErrorCode;
    let mut _1126: isize;
    let mut _1128: !;
    let mut _1129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1133: std::result::Result<i128, error::ErrorCode>;
    let mut _1134: &state::user::SpotPosition;
    let _1135: &mut state::user::SpotPosition;
    let mut _1136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1137: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1138: &mut state::user::User;
    let mut _1139: &mut state::user::User;
    let mut _1140: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1141: u16;
    let mut _1142: isize;
    let mut _1144: !;
    let mut _1145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1147: &state::spot_market::SpotMarket;
    let _1148: &state::spot_market::SpotMarket;
    let mut _1149: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1150: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1151: isize;
    let mut _1153: !;
    let mut _1154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1156: ();
    let mut _1157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1158: std::result::Result<(), error::ErrorCode>;
    let mut _1159: u128;
    let mut _1160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1161: std::result::Result<u128, error::ErrorCode>;
    let mut _1162: u64;
    let mut _1163: isize;
    let mut _1165: !;
    let mut _1166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1168: &state::spot_market::SpotBalanceType;
    let _1169: &state::spot_market::SpotBalanceType;
    let _1170: state::spot_market::SpotBalanceType;
    let mut _1171: &mut state::spot_market::SpotMarket;
    let mut _1172: &mut state::spot_market::SpotMarket;
    let mut _1173: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1174: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1175: &mut state::user::SpotPosition;
    let mut _1176: &mut state::user::SpotPosition;
    let mut _1177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1178: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1179: &mut state::user::User;
    let mut _1180: &mut state::user::User;
    let mut _1181: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1182: u16;
    let mut _1183: isize;
    let mut _1185: !;
    let mut _1186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1188: std::option::Option<u128>;
    let mut _1189: u128;
    let mut _1190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1191: std::result::Result<u128, error::ErrorCode>;
    let mut _1192: u64;
    let mut _1193: isize;
    let mut _1195: !;
    let mut _1196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1198: isize;
    let mut _1200: !;
    let mut _1201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1205: std::result::Result<i128, error::ErrorCode>;
    let mut _1206: &state::user::SpotPosition;
    let _1207: &mut state::user::SpotPosition;
    let mut _1208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1209: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1210: &mut state::user::User;
    let mut _1211: &mut state::user::User;
    let mut _1212: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1213: u16;
    let mut _1214: isize;
    let mut _1216: !;
    let mut _1217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1219: &state::spot_market::SpotMarket;
    let _1220: &state::spot_market::SpotMarket;
    let mut _1221: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1222: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1223: isize;
    let mut _1225: !;
    let mut _1226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1228: ();
    let mut _1229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1230: std::result::Result<(), error::ErrorCode>;
    let mut _1231: u128;
    let mut _1232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1233: std::result::Result<u128, error::ErrorCode>;
    let mut _1234: u64;
    let mut _1235: isize;
    let mut _1237: !;
    let mut _1238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1240: &state::spot_market::SpotBalanceType;
    let _1241: &state::spot_market::SpotBalanceType;
    let _1242: state::spot_market::SpotBalanceType;
    let mut _1243: &mut state::spot_market::SpotMarket;
    let mut _1244: &mut state::spot_market::SpotMarket;
    let mut _1245: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1246: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1247: isize;
    let mut _1249: !;
    let mut _1250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1253: bool;
    let mut _1254: i128;
    let mut _1255: u128;
    let mut _1256: i128;
    let mut _1257: u128;
    let mut _1258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1259: std::result::Result<u128, error::ErrorCode>;
    let mut _1260: u64;
    let mut _1261: isize;
    let mut _1263: !;
    let mut _1264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1266: ();
    let mut _1267: bool;
    let _1268: ();
    let mut _1269: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1270: std::result::Result<(), error::ErrorCode>;
    let mut _1271: bool;
    let mut _1272: &state::spot_market::SpotMarket;
    let _1273: &state::spot_market::SpotMarket;
    let mut _1274: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1275: ();
    let _1277: ();
    let mut _1278: &str;
    let _1279: &str;
    let mut _1280: &std::string::String;
    let _1281: &std::string::String;
    let _1282: std::string::String;
    let mut _1284: std::fmt::Arguments<'_>;
    let mut _1285: &[&str];
    let mut _1286: &[&str; 2];
    let _1287: &[&str; 2];
    let _1288: [&str; 2];
    let mut _1289: &[core::fmt::rt::Argument<'_>];
    let mut _1290: &[core::fmt::rt::Argument<'_>; 1];
    let _1291: &[core::fmt::rt::Argument<'_>; 1];
    let _1292: [core::fmt::rt::Argument<'_>; 1];
    let mut _1293: core::fmt::rt::Argument<'_>;
    let mut _1294: &error::ErrorCode;
    let _1295: &error::ErrorCode;
    let _1296: ();
    let mut _1297: &str;
    let _1298: &str;
    let mut _1299: &std::string::String;
    let _1300: &std::string::String;
    let _1301: std::string::String;
    let mut _1303: std::fmt::Arguments<'_>;
    let mut _1304: &[&str];
    let mut _1305: &[&str; 3];
    let _1306: &[&str; 3];
    let _1307: [&str; 3];
    let mut _1308: &[core::fmt::rt::Argument<'_>];
    let mut _1309: &[core::fmt::rt::Argument<'_>; 2];
    let _1310: &[core::fmt::rt::Argument<'_>; 2];
    let _1311: [core::fmt::rt::Argument<'_>; 2];
    let mut _1312: core::fmt::rt::Argument<'_>;
    let mut _1313: &i128;
    let _1314: &i128;
    let mut _1315: core::fmt::rt::Argument<'_>;
    let mut _1316: &u64;
    let _1317: &u64;
    let mut _1318: error::ErrorCode;
    let mut _1319: isize;
    let mut _1321: !;
    let mut _1322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1324: ();
    let mut _1325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1326: std::result::Result<(), error::ErrorCode>;
    let mut _1327: bool;
    let mut _1328: &std::option::Option<instructions::user::SwapReduceOnly>;
    let mut _1329: &std::option::Option<instructions::user::SwapReduceOnly>;
    let _1330: std::option::Option<instructions::user::SwapReduceOnly>;
    let mut _1331: instructions::user::SwapReduceOnly;
    let mut _1332: ();
    let _1334: ();
    let mut _1335: &str;
    let _1336: &str;
    let mut _1337: &std::string::String;
    let _1338: &std::string::String;
    let _1339: std::string::String;
    let mut _1341: std::fmt::Arguments<'_>;
    let mut _1342: &[&str];
    let mut _1343: &[&str; 2];
    let _1344: &[&str; 2];
    let _1345: [&str; 2];
    let mut _1346: &[core::fmt::rt::Argument<'_>];
    let mut _1347: &[core::fmt::rt::Argument<'_>; 1];
    let _1348: &[core::fmt::rt::Argument<'_>; 1];
    let _1349: [core::fmt::rt::Argument<'_>; 1];
    let mut _1350: core::fmt::rt::Argument<'_>;
    let mut _1351: &error::ErrorCode;
    let _1352: &error::ErrorCode;
    let _1353: ();
    let mut _1354: &str;
    let _1355: &str;
    let mut _1356: &std::string::String;
    let _1357: &std::string::String;
    let _1358: std::string::String;
    let mut _1360: std::fmt::Arguments<'_>;
    let mut _1361: &[&str];
    let mut _1362: &[&str; 3];
    let _1363: &[&str; 3];
    let _1364: [&str; 3];
    let mut _1365: &[core::fmt::rt::Argument<'_>];
    let mut _1366: &[core::fmt::rt::Argument<'_>; 2];
    let _1367: &[core::fmt::rt::Argument<'_>; 2];
    let _1368: [core::fmt::rt::Argument<'_>; 2];
    let mut _1369: core::fmt::rt::Argument<'_>;
    let mut _1370: &i128;
    let _1371: &i128;
    let mut _1372: core::fmt::rt::Argument<'_>;
    let mut _1373: &u64;
    let _1374: &u64;
    let mut _1375: error::ErrorCode;
    let mut _1376: isize;
    let mut _1378: !;
    let mut _1379: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1381: ();
    let mut _1382: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1383: std::result::Result<(), error::ErrorCode>;
    let mut _1384: bool;
    let mut _1385: &state::user::User;
    let _1386: &state::user::User;
    let mut _1387: &std::cell::RefMut<'_, state::user::User>;
    let mut _1388: ();
    let _1390: ();
    let mut _1391: &str;
    let _1392: &str;
    let mut _1393: &std::string::String;
    let _1394: &std::string::String;
    let _1395: std::string::String;
    let mut _1397: std::fmt::Arguments<'_>;
    let mut _1398: &[&str];
    let mut _1399: &[&str; 2];
    let _1400: &[&str; 2];
    let _1401: [&str; 2];
    let mut _1402: &[core::fmt::rt::Argument<'_>];
    let mut _1403: &[core::fmt::rt::Argument<'_>; 1];
    let _1404: &[core::fmt::rt::Argument<'_>; 1];
    let _1405: [core::fmt::rt::Argument<'_>; 1];
    let mut _1406: core::fmt::rt::Argument<'_>;
    let mut _1407: &error::ErrorCode;
    let _1408: &error::ErrorCode;
    let _1409: ();
    let mut _1410: &str;
    let _1411: &str;
    let mut _1412: &std::string::String;
    let _1413: &std::string::String;
    let _1414: std::string::String;
    let mut _1416: std::fmt::Arguments<'_>;
    let mut _1417: &[&str];
    let mut _1418: &[&str; 2];
    let _1419: &[&str; 2];
    let _1420: [&str; 2];
    let mut _1421: &[core::fmt::rt::Argument<'_>];
    let mut _1422: &[core::fmt::rt::Argument<'_>; 1];
    let _1423: &[core::fmt::rt::Argument<'_>; 1];
    let _1424: [core::fmt::rt::Argument<'_>; 1];
    let mut _1425: core::fmt::rt::Argument<'_>;
    let mut _1426: &u16;
    let _1427: &u16;
    let mut _1428: error::ErrorCode;
    let mut _1429: isize;
    let mut _1431: !;
    let mut _1432: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1434: i64;
    let mut _1435: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1436: std::result::Result<i64, error::ErrorCode>;
    let mut _1437: &state::spot_market::SpotMarket;
    let _1438: &state::spot_market::SpotMarket;
    let mut _1439: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1440: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1441: u64;
    let mut _1442: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1443: &anchor_spl::token_interface::TokenAccount;
    let _1444: &anchor_spl::token_interface::TokenAccount;
    let mut _1445: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1446: isize;
    let mut _1448: !;
    let mut _1449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1451: &mut state::spot_market::SpotMarket;
    let mut _1452: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1453: &mut state::spot_market::SpotMarket;
    let mut _1454: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1455: ();
    let mut _1456: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1457: std::result::Result<(), error::ErrorCode>;
    let mut _1458: &state::spot_market::SpotMarket;
    let _1459: &state::spot_market::SpotMarket;
    let mut _1460: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1461: isize;
    let mut _1463: !;
    let mut _1464: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1467: i64;
    let mut _1468: i64;
    let mut _1469: &state::spot_market::SpotMarket;
    let mut _1470: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1472: i64;
    let mut _1473: i64;
    let mut _1474: &state::spot_market::SpotMarket;
    let mut _1475: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1477: (math::margin::MarginRequirementType, bool);
    let mut _1478: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (math::margin::MarginRequirementType, bool)>;
    let mut _1479: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let mut _1480: &state::spot_market::SpotMarket;
    let _1481: &state::spot_market::SpotMarket;
    let mut _1482: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1483: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1484: &state::spot_market::SpotMarket;
    let _1485: &state::spot_market::SpotMarket;
    let mut _1486: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1487: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1488: &state::oracle::StrictOraclePrice;
    let _1489: &state::oracle::StrictOraclePrice;
    let mut _1490: &state::oracle::StrictOraclePrice;
    let _1491: &state::oracle::StrictOraclePrice;
    let mut _1492: i128;
    let mut _1493: i128;
    let mut _1494: i128;
    let mut _1495: i128;
    let mut _1496: math::margin::MarginRequirementType;
    let mut _1497: isize;
    let mut _1499: !;
    let mut _1500: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1502: ();
    let mut _1503: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1504: ();
    let mut _1505: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1506: bool;
    let mut _1507: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1508: std::result::Result<bool, error::ErrorCode>;
    let mut _1509: &mut state::user::User;
    let mut _1510: &mut state::user::User;
    let mut _1511: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1512: &state::perp_market_map::PerpMarketMap<'_>;
    let _1513: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1514: &state::spot_market_map::SpotMarketMap<'_>;
    let _1515: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1516: &mut state::oracle_map::OracleMap<'_>;
    let mut _1517: &mut state::oracle_map::OracleMap<'_>;
    let mut _1518: math::margin::MarginRequirementType;
    let mut _1519: u16;
    let mut _1520: i128;
    let mut _1521: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1522: std::result::Result<i128, error::ErrorCode>;
    let mut _1523: i128;
    let mut _1524: i128;
    let mut _1525: isize;
    let mut _1527: !;
    let mut _1528: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1530: u16;
    let mut _1531: i128;
    let mut _1532: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1533: std::result::Result<i128, error::ErrorCode>;
    let mut _1534: i128;
    let mut _1535: i128;
    let mut _1536: isize;
    let mut _1538: !;
    let mut _1539: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1541: &mut state::user::UserStats;
    let mut _1542: &mut state::user::UserStats;
    let mut _1543: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1544: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _1545: i64;
    let mut _1546: isize;
    let mut _1548: !;
    let mut _1549: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1551: ();
    let mut _1552: &mut state::user::User;
    let mut _1553: &mut state::user::User;
    let mut _1554: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1555: u64;
    let mut _1557: i64;
    let mut _1558: u64;
    let mut _1559: u64;
    let mut _1560: u16;
    let mut _1561: u16;
    let mut _1562: i64;
    let mut _1563: i64;
    let mut _1564: anchor_lang::prelude::Pubkey;
    let mut _1565: u64;
    let _1566: ();
    let _1567: ();
    let mut _1568: &[&[u8]];
    let mut _1569: &[&[u8]; 1];
    let _1570: &[&[u8]; 1];
    let _1571: [&[u8]; 1];
    let mut _1572: &[u8];
    let _1573: &[u8];
    let mut _1574: &std::vec::Vec<u8>;
    let _1575: &std::vec::Vec<u8>;
    let _1576: std::vec::Vec<u8>;
    let mut _1577: &state::events::SwapRecord;
    let _1578: &state::events::SwapRecord;
    let mut _1580: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1581: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1582: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1583: &u16;
    let _1584: &u16;
    let mut _1585: isize;
    let mut _1587: !;
    let mut _1588: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1590: ();
    let mut _1591: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1592: std::result::Result<(), error::ErrorCode>;
    let mut _1593: bool;
    let mut _1594: u64;
    let mut _1595: &state::spot_market::SpotMarket;
    let mut _1596: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1597: bool;
    let mut _1598: u64;
    let mut _1599: &state::spot_market::SpotMarket;
    let mut _1600: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1601: ();
    let _1603: ();
    let mut _1604: &str;
    let _1605: &str;
    let mut _1606: &std::string::String;
    let _1607: &std::string::String;
    let _1608: std::string::String;
    let mut _1610: std::fmt::Arguments<'_>;
    let mut _1611: &[&str];
    let mut _1612: &[&str; 2];
    let _1613: &[&str; 2];
    let _1614: [&str; 2];
    let mut _1615: &[core::fmt::rt::Argument<'_>];
    let mut _1616: &[core::fmt::rt::Argument<'_>; 1];
    let _1617: &[core::fmt::rt::Argument<'_>; 1];
    let _1618: [core::fmt::rt::Argument<'_>; 1];
    let mut _1619: core::fmt::rt::Argument<'_>;
    let mut _1620: &error::ErrorCode;
    let _1621: &error::ErrorCode;
    let _1622: ();
    let mut _1623: &str;
    let _1624: &str;
    let mut _1625: error::ErrorCode;
    let mut _1626: isize;
    let mut _1628: !;
    let mut _1629: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1632: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1633: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1634: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1635: &u16;
    let _1636: &u16;
    let mut _1637: isize;
    let mut _1639: !;
    let mut _1640: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1642: ();
    let mut _1643: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1644: std::result::Result<(), error::ErrorCode>;
    let mut _1645: bool;
    let mut _1646: u64;
    let mut _1647: &state::spot_market::SpotMarket;
    let mut _1648: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1649: bool;
    let mut _1650: u64;
    let mut _1651: &state::spot_market::SpotMarket;
    let mut _1652: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1653: ();
    let _1655: ();
    let mut _1656: &str;
    let _1657: &str;
    let mut _1658: &std::string::String;
    let _1659: &std::string::String;
    let _1660: std::string::String;
    let mut _1662: std::fmt::Arguments<'_>;
    let mut _1663: &[&str];
    let mut _1664: &[&str; 2];
    let _1665: &[&str; 2];
    let _1666: [&str; 2];
    let mut _1667: &[core::fmt::rt::Argument<'_>];
    let mut _1668: &[core::fmt::rt::Argument<'_>; 1];
    let _1669: &[core::fmt::rt::Argument<'_>; 1];
    let _1670: [core::fmt::rt::Argument<'_>; 1];
    let mut _1671: core::fmt::rt::Argument<'_>;
    let mut _1672: &error::ErrorCode;
    let _1673: &error::ErrorCode;
    let _1674: ();
    let mut _1675: &str;
    let _1676: &str;
    let mut _1677: error::ErrorCode;
    let mut _1678: isize;
    let mut _1680: !;
    let mut _1681: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1683: ();
    let mut _1684: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1685: std::result::Result<(), error::ErrorCode>;
    let mut _1686: &state::spot_market::SpotMarket;
    let _1687: &state::spot_market::SpotMarket;
    let mut _1688: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1689: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1690: &state::spot_market::SpotMarket;
    let _1691: &state::spot_market::SpotMarket;
    let mut _1692: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _1693: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1694: u64;
    let mut _1695: u64;
    let mut _1696: i64;
    let mut _1697: i64;
    let mut _1698: u64;
    let mut _1699: &state::state::OracleGuardRails;
    let _1700: &state::state::State;
    let mut _1701: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1702: isize;
    let mut _1704: !;
    let mut _1705: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1707: ();
    let mut _1738: &mut instructions::user::Swap<'_>;
    let mut _1739: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1740: &mut instructions::user::Swap<'_>;
    let mut _1741: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1742: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1743: &mut instructions::user::Swap<'_>;
    let mut _1744: &mut instructions::user::Swap<'_>;
    let mut _1745: &mut instructions::user::Swap<'_>;
    let mut _1746: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1747: &mut instructions::user::Swap<'_>;
    let mut _1748: &mut instructions::user::Swap<'_>;
    let mut _1749: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1750: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1751: &mut instructions::user::Swap<'_>;
    let mut _1752: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1753: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1754: &mut instructions::user::Swap<'_>;
    let mut _1755: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1756: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1757: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1758: &mut instructions::user::Swap<'_>;
    let mut _1759: &mut instructions::user::Swap<'_>;
    let mut _1760: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1761: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1762: &mut instructions::user::Swap<'_>;
    let mut _1763: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1764: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1765: &mut instructions::user::Swap<'_>;
    let mut _1766: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1767: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1768: &mut instructions::user::Swap<'_>;
    let mut _1769: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1770: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1771: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1772: bool;
    let mut _1773: bool;
    let mut _1774: isize;
    let mut _1775: isize;
    let mut _1776: isize;
    let mut _1777: isize;
    let mut _1778: isize;
    let mut _1779: isize;
    let mut _1780: isize;
    let mut _1781: isize;
    let mut _1782: isize;
    let mut _1783: isize;
    let mut _1784: isize;
    let mut _1785: isize;
    let mut _1786: isize;
    let mut _1787: isize;
    let mut _1788: isize;
    let mut _1789: isize;
    let mut _1790: isize;
    let mut _1791: isize;
    let mut _1792: isize;
    let mut _1793: isize;
    let mut _1794: isize;
    let mut _1795: isize;
    let mut _1796: isize;
    let mut _1797: isize;
    let mut _1798: isize;
    let mut _1799: isize;
    let mut _1800: isize;
    let mut _1801: isize;
    let mut _1802: isize;
    let mut _1803: isize;
    let mut _1804: isize;
    let mut _1805: isize;
    let mut _1806: isize;
    let mut _1807: isize;
    let mut _1808: isize;
    let mut _1809: isize;
    let mut _1810: isize;
    let mut _1811: isize;
    let mut _1812: isize;
    let mut _1813: isize;
    let mut _1814: isize;
    let mut _1815: isize;
    let mut _1816: isize;
    let mut _1817: isize;
    let mut _1818: isize;
    let mut _1819: isize;
    let mut _1820: isize;
    let mut _1821: isize;
    let mut _1822: isize;
    let mut _1823: isize;
    let mut _1824: isize;
    let mut _1825: isize;
    let mut _1826: isize;
    let mut _1827: isize;
    let mut _1828: isize;
    let mut _1829: isize;
    let mut _1830: isize;
    let mut _1831: isize;
    let mut _1832: isize;
    let mut _1833: isize;
    let mut _1834: isize;
    let mut _1835: isize;
    let mut _1836: isize;
    let mut _1837: isize;
    let mut _1838: isize;
    let mut _1839: isize;
    let mut _1840: isize;
    let mut _1841: isize;
    let mut _1842: isize;
    let mut _1843: isize;
    let mut _1844: isize;
    let mut _1845: isize;
    let mut _1846: isize;
    let mut _1847: isize;
    let mut _1848: isize;
    let mut _1849: isize;
    let mut _1850: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1851: *const [u16; 2];
    let mut _1852: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1853: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1854: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1855: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1856: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1857: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1858: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1859: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1860: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1861: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1862: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1863: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1864: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1865: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1866: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1867: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1868: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1869: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _16;
        let _17: anchor_lang::prelude::Clock;
        let _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _24: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _17;
            let _25: u64;
            scope 11 {
                debug slot => _25;
                let _26: i64;
                scope 12 {
                    debug now => _26;
                    let _27: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                    scope 13 {
                        debug remaining_accounts => _27;
                        let _31: state::perp_market_map::PerpMarketMap<'_>;
                        let _32: state::spot_market_map::SpotMarketMap<'_>;
                        let mut _33: state::oracle_map::OracleMap<'_>;
                        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _62: instructions::optional_accounts::AccountMaps<'_>;
                        let mut _1870: *const ();
                        let mut _1871: usize;
                        let mut _1872: usize;
                        let mut _1873: usize;
                        let mut _1874: usize;
                        let mut _1875: bool;
                        scope 14 {
                            debug perp_market_map => _31;
                            debug spot_market_map => _32;
                            debug oracle_map => _33;
                            let _63: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _71: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
                            scope 20 {
                                debug out_token_program => _63;
                                let _72: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _80: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                scope 25 {
                                    debug in_mint => _72;
                                    let _81: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _89: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    scope 30 {
                                        debug out_mint => _81;
                                        let _90: anchor_lang::prelude::Pubkey;
                                        scope 35 {
                                            debug user_key => _90;
                                            let mut _92: std::cell::RefMut<'_, state::user::User>;
                                            let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _103: std::cell::RefMut<'_, state::user::User>;
                                            scope 36 {
                                                debug user => _92;
                                                let mut _104: std::cell::RefMut<'_, state::user::UserStats>;
                                                let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _115: std::cell::RefMut<'_, state::user::UserStats>;
                                                scope 41 {
                                                    debug user_stats => _104;
                                                    let _116: enumflags2::BitFlags<state::state::ExchangeStatus>;
                                                    let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _126: enumflags2::BitFlags<state::state::ExchangeStatus>;
                                                    scope 46 {
                                                        debug exchange_status => _116;
                                                        let _136: error::ErrorCode;
                                                        let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _161: ();
                                                        let mut _162: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _172: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                        scope 51 {
                                                            debug error_code => _136;
                                                            let _143: std::string::String;
                                                            let mut _1737: &[&str; 2];
                                                            scope 52 {
                                                                debug res => _143;
                                                            }
                                                        }
                                                        scope 53 {
                                                            debug residual => _158;
                                                            scope 54 {
                                                            }
                                                        }
                                                        scope 55 {
                                                            debug val => _161;
                                                            scope 56 {
                                                            }
                                                        }
                                                        scope 57 {
                                                            debug in_spot_market => _162;
                                                            let _182: error::ErrorCode;
                                                            let _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _226: ();
                                                            let _235: error::ErrorCode;
                                                            let _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _263: ();
                                                            let _264: &state::oracle::OraclePriceData;
                                                            let _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _278: &state::oracle::OraclePriceData;
                                                            scope 62 {
                                                                debug error_code => _182;
                                                                let _189: std::string::String;
                                                                let _208: std::string::String;
                                                                let mut _1735: &[&str; 2];
                                                                let mut _1736: &[&str; 2];
                                                                scope 63 {
                                                                    debug res => _189;
                                                                }
                                                                scope 64 {
                                                                    debug res => _208;
                                                                }
                                                            }
                                                            scope 65 {
                                                                debug residual => _223;
                                                                scope 66 {
                                                                }
                                                            }
                                                            scope 67 {
                                                                debug val => _226;
                                                                scope 68 {
                                                                }
                                                            }
                                                            scope 69 {
                                                                debug error_code => _235;
                                                                let _242: std::string::String;
                                                                let mut _1734: &[&str; 2];
                                                                scope 70 {
                                                                    debug res => _242;
                                                                }
                                                            }
                                                            scope 71 {
                                                                debug residual => _260;
                                                                scope 72 {
                                                                }
                                                            }
                                                            scope 73 {
                                                                debug val => _263;
                                                                scope 74 {
                                                                }
                                                            }
                                                            scope 75 {
                                                                debug in_oracle_data => _264;
                                                                let _279: i64;
                                                                scope 80 {
                                                                    debug in_oracle_price => _279;
                                                                    let mut _280: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                    let _287: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _290: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                    scope 81 {
                                                                        debug out_spot_market => _280;
                                                                        let _300: error::ErrorCode;
                                                                        let _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _344: ();
                                                                        let _345: &state::oracle::OraclePriceData;
                                                                        let _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _359: &state::oracle::OraclePriceData;
                                                                        scope 86 {
                                                                            debug error_code => _300;
                                                                            let _307: std::string::String;
                                                                            let _326: std::string::String;
                                                                            let mut _1732: &[&str; 2];
                                                                            let mut _1733: &[&str; 2];
                                                                            scope 87 {
                                                                                debug res => _307;
                                                                            }
                                                                            scope 88 {
                                                                                debug res => _326;
                                                                            }
                                                                        }
                                                                        scope 89 {
                                                                            debug residual => _341;
                                                                            scope 90 {
                                                                            }
                                                                        }
                                                                        scope 91 {
                                                                            debug val => _344;
                                                                            scope 92 {
                                                                            }
                                                                        }
                                                                        scope 93 {
                                                                            debug out_oracle_data => _345;
                                                                            let _360: i64;
                                                                            scope 98 {
                                                                                debug out_oracle_price => _360;
                                                                                let _361: &mut std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                scope 99 {
                                                                                    debug in_vault => _361;
                                                                                    let _362: &mut std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                    scope 100 {
                                                                                        debug in_token_account => _362;
                                                                                        let mut _363: u64;
                                                                                        scope 101 {
                                                                                            debug amount_in => _363;
                                                                                            let _376: u64;
                                                                                            let _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _391: u64;
                                                                                            let _445: i128;
                                                                                            let _457: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _460: &mut state::user::SpotPosition;
                                                                                            let _466: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _469: i128;
                                                                                            scope 102 {
                                                                                                debug residual => _376;
                                                                                                let _413: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _416: ();
                                                                                                let _422: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _425: ();
                                                                                                let _431: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _434: ();
                                                                                                let _441: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _444: u64;
                                                                                                scope 107 {
                                                                                                    debug residual => _413;
                                                                                                    scope 108 {
                                                                                                    }
                                                                                                }
                                                                                                scope 109 {
                                                                                                    debug val => _416;
                                                                                                    scope 110 {
                                                                                                    }
                                                                                                }
                                                                                                scope 111 {
                                                                                                    debug residual => _422;
                                                                                                    scope 112 {
                                                                                                    }
                                                                                                }
                                                                                                scope 113 {
                                                                                                    debug val => _425;
                                                                                                    scope 114 {
                                                                                                    }
                                                                                                }
                                                                                                scope 115 {
                                                                                                    debug residual => _431;
                                                                                                    scope 116 {
                                                                                                    }
                                                                                                }
                                                                                                scope 117 {
                                                                                                    debug val => _434;
                                                                                                    scope 118 {
                                                                                                    }
                                                                                                }
                                                                                                scope 119 {
                                                                                                    debug residual => _441;
                                                                                                    scope 120 {
                                                                                                    }
                                                                                                }
                                                                                                scope 121 {
                                                                                                    debug val => _444;
                                                                                                    scope 122 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 103 {
                                                                                                debug residual => _388;
                                                                                                scope 104 {
                                                                                                }
                                                                                            }
                                                                                            scope 105 {
                                                                                                debug val => _391;
                                                                                                scope 106 {
                                                                                                }
                                                                                            }
                                                                                            scope 123 {
                                                                                                debug in_token_amount_before => _445;
                                                                                                let _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _481: u128;
                                                                                                let _494: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _497: ();
                                                                                                let _498: i128;
                                                                                                let _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _513: &mut state::user::SpotPosition;
                                                                                                let _519: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _522: i128;
                                                                                                let mut _1731: &state::spot_market::SpotBalanceType;
                                                                                                scope 132 {
                                                                                                    debug residual => _478;
                                                                                                    scope 133 {
                                                                                                    }
                                                                                                }
                                                                                                scope 134 {
                                                                                                    debug val => _481;
                                                                                                    scope 135 {
                                                                                                    }
                                                                                                }
                                                                                                scope 136 {
                                                                                                    debug residual => _494;
                                                                                                    scope 137 {
                                                                                                    }
                                                                                                }
                                                                                                scope 138 {
                                                                                                    debug val => _497;
                                                                                                    scope 139 {
                                                                                                    }
                                                                                                }
                                                                                                scope 140 {
                                                                                                    debug in_token_amount_after => _498;
                                                                                                    let _523: bool;
                                                                                                    let _533: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _536: u128;
                                                                                                    scope 149 {
                                                                                                        debug in_position_is_reduced => _523;
                                                                                                        let _547: error::ErrorCode;
                                                                                                        let _591: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _594: ();
                                                                                                        let _604: error::ErrorCode;
                                                                                                        let _648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _651: ();
                                                                                                        let _659: error::ErrorCode;
                                                                                                        let _700: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _703: ();
                                                                                                        let _712: error::ErrorCode;
                                                                                                        let _753: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _756: ();
                                                                                                        let _770: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _773: i64;
                                                                                                        let _778: &mut std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                                        let mut _1728: &std::option::Option<instructions::user::SwapReduceOnly>;
                                                                                                        scope 154 {
                                                                                                            debug error_code => _547;
                                                                                                            let _554: std::string::String;
                                                                                                            let _573: std::string::String;
                                                                                                            let mut _1729: &[&str; 3];
                                                                                                            let mut _1730: &[&str; 2];
                                                                                                            scope 155 {
                                                                                                                debug res => _554;
                                                                                                            }
                                                                                                            scope 156 {
                                                                                                                debug res => _573;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 157 {
                                                                                                            debug residual => _591;
                                                                                                            scope 158 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 159 {
                                                                                                            debug val => _594;
                                                                                                            scope 160 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 161 {
                                                                                                            debug error_code => _604;
                                                                                                            let _611: std::string::String;
                                                                                                            let _630: std::string::String;
                                                                                                            let mut _1726: &[&str; 3];
                                                                                                            let mut _1727: &[&str; 2];
                                                                                                            scope 162 {
                                                                                                                debug res => _611;
                                                                                                            }
                                                                                                            scope 163 {
                                                                                                                debug res => _630;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 164 {
                                                                                                            debug residual => _648;
                                                                                                            scope 165 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 166 {
                                                                                                            debug val => _651;
                                                                                                            scope 167 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 168 {
                                                                                                            debug error_code => _659;
                                                                                                            let _666: std::string::String;
                                                                                                            let _685: std::string::String;
                                                                                                            let mut _1724: &[&str; 1];
                                                                                                            let mut _1725: &[&str; 2];
                                                                                                            scope 169 {
                                                                                                                debug res => _666;
                                                                                                            }
                                                                                                            scope 170 {
                                                                                                                debug res => _685;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 171 {
                                                                                                            debug residual => _700;
                                                                                                            scope 172 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 173 {
                                                                                                            debug val => _703;
                                                                                                            scope 174 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 175 {
                                                                                                            debug error_code => _712;
                                                                                                            let _719: std::string::String;
                                                                                                            let _738: std::string::String;
                                                                                                            let mut _1722: &[&str; 1];
                                                                                                            let mut _1723: &[&str; 2];
                                                                                                            scope 176 {
                                                                                                                debug res => _719;
                                                                                                            }
                                                                                                            scope 177 {
                                                                                                                debug res => _738;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 178 {
                                                                                                            debug residual => _753;
                                                                                                            scope 179 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 180 {
                                                                                                            debug val => _756;
                                                                                                            scope 181 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 182 {
                                                                                                            debug residual => _770;
                                                                                                            scope 183 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 184 {
                                                                                                            debug val => _773;
                                                                                                            scope 185 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 186 {
                                                                                                            debug out_vault => _778;
                                                                                                            let _779: &mut std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                                            scope 187 {
                                                                                                                debug out_token_account => _779;
                                                                                                                let mut _780: u64;
                                                                                                                scope 188 {
                                                                                                                    debug amount_out => _780;
                                                                                                                    let _803: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _806: u64;
                                                                                                                    let _856: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                    let _859: ();
                                                                                                                    let _865: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                    let _868: ();
                                                                                                                    let _967: u64;
                                                                                                                    scope 189 {
                                                                                                                        debug residual => _803;
                                                                                                                        scope 190 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 191 {
                                                                                                                        debug val => _806;
                                                                                                                        scope 192 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 193 {
                                                                                                                        debug token_interface => _809;
                                                                                                                        let _809: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                                                                        let _831: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                        let _834: ();
                                                                                                                        scope 194 {
                                                                                                                            debug residual => _831;
                                                                                                                            scope 195 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 196 {
                                                                                                                            debug val => _834;
                                                                                                                            scope 197 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 198 {
                                                                                                                        debug residual => _856;
                                                                                                                        scope 199 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 200 {
                                                                                                                        debug val => _859;
                                                                                                                        scope 201 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 202 {
                                                                                                                        debug residual => _865;
                                                                                                                        scope 203 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 204 {
                                                                                                                        debug val => _868;
                                                                                                                        scope 205 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 206 {
                                                                                                                        debug limit_price => _871;
                                                                                                                        let _871: u64;
                                                                                                                        let _872: u128;
                                                                                                                        let _880: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _883: u128;
                                                                                                                        let _889: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _892: u128;
                                                                                                                        let _900: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _903: u128;
                                                                                                                        scope 207 {
                                                                                                                            debug swap_price => _872;
                                                                                                                            let _914: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _917: u128;
                                                                                                                            let _919: error::ErrorCode;
                                                                                                                            let _963: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _966: ();
                                                                                                                            scope 220 {
                                                                                                                                debug residual => _914;
                                                                                                                                scope 221 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 222 {
                                                                                                                                debug val => _917;
                                                                                                                                scope 223 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 224 {
                                                                                                                                debug error_code => _919;
                                                                                                                                let _926: std::string::String;
                                                                                                                                let _945: std::string::String;
                                                                                                                                let mut _1720: &[&str; 3];
                                                                                                                                let mut _1721: &[&str; 2];
                                                                                                                                scope 225 {
                                                                                                                                    debug res => _926;
                                                                                                                                }
                                                                                                                                scope 226 {
                                                                                                                                    debug res => _945;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 227 {
                                                                                                                                debug residual => _963;
                                                                                                                                scope 228 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 229 {
                                                                                                                                debug val => _966;
                                                                                                                                scope 230 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 208 {
                                                                                                                            debug residual => _880;
                                                                                                                            scope 209 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 210 {
                                                                                                                            debug val => _883;
                                                                                                                            scope 211 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 212 {
                                                                                                                            debug residual => _889;
                                                                                                                            scope 213 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 214 {
                                                                                                                            debug val => _892;
                                                                                                                            scope 215 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 216 {
                                                                                                                            debug residual => _900;
                                                                                                                            scope 217 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 218 {
                                                                                                                            debug val => _903;
                                                                                                                            scope 219 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 231 {
                                                                                                                        debug fee => _967;
                                                                                                                        let _968: u64;
                                                                                                                        let _974: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _977: u64;
                                                                                                                        scope 232 {
                                                                                                                            debug amount_out_after_fee => _968;
                                                                                                                            let _985: i128;
                                                                                                                            let _993: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _996: i128;
                                                                                                                            let _1002: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1005: i128;
                                                                                                                            scope 237 {
                                                                                                                                debug fee_value => _985;
                                                                                                                                let _1018: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1021: i64;
                                                                                                                                let _1024: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1027: ();
                                                                                                                                let _1039: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1042: u64;
                                                                                                                                let _1044: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1047: ();
                                                                                                                                let _1051: i128;
                                                                                                                                let _1059: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1062: i128;
                                                                                                                                let _1068: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1071: i128;
                                                                                                                                let _1102: error::ErrorCode;
                                                                                                                                let _1127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1130: ();
                                                                                                                                let _1131: i128;
                                                                                                                                let _1143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1146: &mut state::user::SpotPosition;
                                                                                                                                let _1152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1155: i128;
                                                                                                                                scope 246 {
                                                                                                                                    debug residual => _1018;
                                                                                                                                    scope 247 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 248 {
                                                                                                                                    debug val => _1021;
                                                                                                                                    scope 249 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 250 {
                                                                                                                                    debug residual => _1024;
                                                                                                                                    scope 251 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 252 {
                                                                                                                                    debug val => _1027;
                                                                                                                                    scope 253 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 254 {
                                                                                                                                    debug residual => _1039;
                                                                                                                                    scope 255 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 256 {
                                                                                                                                    debug val => _1042;
                                                                                                                                    scope 257 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 258 {
                                                                                                                                    debug residual => _1044;
                                                                                                                                    scope 259 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 260 {
                                                                                                                                    debug val => _1047;
                                                                                                                                    scope 261 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 262 {
                                                                                                                                    debug amount_out_value => _1051;
                                                                                                                                    let _1086: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1089: u64;
                                                                                                                                    let _1092: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1095: ();
                                                                                                                                    scope 271 {
                                                                                                                                        debug residual => _1086;
                                                                                                                                        scope 272 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 273 {
                                                                                                                                        debug val => _1089;
                                                                                                                                        scope 274 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 275 {
                                                                                                                                        debug residual => _1092;
                                                                                                                                        scope 276 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 277 {
                                                                                                                                        debug val => _1095;
                                                                                                                                        scope 278 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 263 {
                                                                                                                                    debug residual => _1059;
                                                                                                                                    scope 264 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 265 {
                                                                                                                                    debug val => _1062;
                                                                                                                                    scope 266 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 267 {
                                                                                                                                    debug residual => _1068;
                                                                                                                                    scope 268 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 269 {
                                                                                                                                    debug val => _1071;
                                                                                                                                    scope 270 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 279 {
                                                                                                                                    debug error_code => _1102;
                                                                                                                                    let _1109: std::string::String;
                                                                                                                                    let mut _1719: &[&str; 2];
                                                                                                                                    scope 280 {
                                                                                                                                        debug res => _1109;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 281 {
                                                                                                                                    debug residual => _1127;
                                                                                                                                    scope 282 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 283 {
                                                                                                                                    debug val => _1130;
                                                                                                                                    scope 284 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 285 {
                                                                                                                                    debug out_token_amount_before => _1131;
                                                                                                                                    let _1164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1167: u128;
                                                                                                                                    let _1184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1187: &mut state::user::SpotPosition;
                                                                                                                                    let _1194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1197: u128;
                                                                                                                                    let _1199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1202: ();
                                                                                                                                    let _1203: i128;
                                                                                                                                    let _1215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1218: &mut state::user::SpotPosition;
                                                                                                                                    let _1224: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1227: i128;
                                                                                                                                    let mut _1718: &state::spot_market::SpotBalanceType;
                                                                                                                                    scope 294 {
                                                                                                                                        debug residual => _1164;
                                                                                                                                        scope 295 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 296 {
                                                                                                                                        debug val => _1167;
                                                                                                                                        scope 297 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 298 {
                                                                                                                                        debug residual => _1184;
                                                                                                                                        scope 299 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 300 {
                                                                                                                                        debug val => _1187;
                                                                                                                                        scope 301 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 302 {
                                                                                                                                        debug residual => _1194;
                                                                                                                                        scope 303 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 304 {
                                                                                                                                        debug val => _1197;
                                                                                                                                        scope 305 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 306 {
                                                                                                                                        debug residual => _1199;
                                                                                                                                        scope 307 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 308 {
                                                                                                                                        debug val => _1202;
                                                                                                                                        scope 309 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 310 {
                                                                                                                                        debug out_token_amount_after => _1203;
                                                                                                                                        let _1236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1239: u128;
                                                                                                                                        let _1248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1251: ();
                                                                                                                                        let _1252: bool;
                                                                                                                                        let _1262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1265: u128;
                                                                                                                                        let mut _1717: &state::spot_market::SpotBalanceType;
                                                                                                                                        scope 319 {
                                                                                                                                            debug residual => _1236;
                                                                                                                                            scope 320 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 321 {
                                                                                                                                            debug val => _1239;
                                                                                                                                            scope 322 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 323 {
                                                                                                                                            debug residual => _1248;
                                                                                                                                            scope 324 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 325 {
                                                                                                                                            debug val => _1251;
                                                                                                                                            scope 326 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 327 {
                                                                                                                                            debug out_position_is_reduced => _1252;
                                                                                                                                            let _1276: error::ErrorCode;
                                                                                                                                            let _1320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1323: ();
                                                                                                                                            let _1333: error::ErrorCode;
                                                                                                                                            let _1377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1380: ();
                                                                                                                                            let _1389: error::ErrorCode;
                                                                                                                                            let _1430: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1433: ();
                                                                                                                                            let _1447: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1450: i64;
                                                                                                                                            let _1462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1465: ();
                                                                                                                                            let _1466: state::oracle::StrictOraclePrice;
                                                                                                                                            let mut _1714: &std::option::Option<instructions::user::SwapReduceOnly>;
                                                                                                                                            scope 332 {
                                                                                                                                                debug error_code => _1276;
                                                                                                                                                let _1283: std::string::String;
                                                                                                                                                let _1302: std::string::String;
                                                                                                                                                let mut _1715: &[&str; 3];
                                                                                                                                                let mut _1716: &[&str; 2];
                                                                                                                                                scope 333 {
                                                                                                                                                    debug res => _1283;
                                                                                                                                                }
                                                                                                                                                scope 334 {
                                                                                                                                                    debug res => _1302;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 335 {
                                                                                                                                                debug residual => _1320;
                                                                                                                                                scope 336 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 337 {
                                                                                                                                                debug val => _1323;
                                                                                                                                                scope 338 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 339 {
                                                                                                                                                debug error_code => _1333;
                                                                                                                                                let _1340: std::string::String;
                                                                                                                                                let _1359: std::string::String;
                                                                                                                                                let mut _1712: &[&str; 3];
                                                                                                                                                let mut _1713: &[&str; 2];
                                                                                                                                                scope 340 {
                                                                                                                                                    debug res => _1340;
                                                                                                                                                }
                                                                                                                                                scope 341 {
                                                                                                                                                    debug res => _1359;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 342 {
                                                                                                                                                debug residual => _1377;
                                                                                                                                                scope 343 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 344 {
                                                                                                                                                debug val => _1380;
                                                                                                                                                scope 345 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 346 {
                                                                                                                                                debug error_code => _1389;
                                                                                                                                                let _1396: std::string::String;
                                                                                                                                                let _1415: std::string::String;
                                                                                                                                                let mut _1710: &[&str; 2];
                                                                                                                                                let mut _1711: &[&str; 2];
                                                                                                                                                scope 347 {
                                                                                                                                                    debug res => _1396;
                                                                                                                                                }
                                                                                                                                                scope 348 {
                                                                                                                                                    debug res => _1415;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 349 {
                                                                                                                                                debug residual => _1430;
                                                                                                                                                scope 350 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 351 {
                                                                                                                                                debug val => _1433;
                                                                                                                                                scope 352 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 353 {
                                                                                                                                                debug residual => _1447;
                                                                                                                                                scope 354 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 355 {
                                                                                                                                                debug val => _1450;
                                                                                                                                                scope 356 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 357 {
                                                                                                                                                debug residual => _1462;
                                                                                                                                                scope 358 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 359 {
                                                                                                                                                debug val => _1465;
                                                                                                                                                scope 360 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 361 {
                                                                                                                                                debug in_strict_price => _1466;
                                                                                                                                                let _1471: state::oracle::StrictOraclePrice;
                                                                                                                                                scope 362 {
                                                                                                                                                    debug out_strict_price => _1471;
                                                                                                                                                    let _1476: math::margin::MarginRequirementType;
                                                                                                                                                    let _1498: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1501: (math::margin::MarginRequirementType, bool);
                                                                                                                                                    scope 363 {
                                                                                                                                                        debug margin_type => _1476;
                                                                                                                                                        let _1526: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1529: i128;
                                                                                                                                                        let _1537: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1540: i128;
                                                                                                                                                        let _1547: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1550: bool;
                                                                                                                                                        let _1556: state::events::SwapRecord;
                                                                                                                                                        scope 368 {
                                                                                                                                                            debug residual => _1526;
                                                                                                                                                            scope 369 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 370 {
                                                                                                                                                            debug val => _1529;
                                                                                                                                                            scope 371 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 372 {
                                                                                                                                                            debug residual => _1537;
                                                                                                                                                            scope 373 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 374 {
                                                                                                                                                            debug val => _1540;
                                                                                                                                                            scope 375 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 376 {
                                                                                                                                                            debug residual => _1547;
                                                                                                                                                            scope 377 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 378 {
                                                                                                                                                            debug val => _1550;
                                                                                                                                                            scope 379 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 380 {
                                                                                                                                                            debug swap_record => _1556;
                                                                                                                                                            let _1579: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                                                            let _1586: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                            let _1589: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                                                            scope 381 {
                                                                                                                                                                debug out_spot_market => _1579;
                                                                                                                                                                let _1602: error::ErrorCode;
                                                                                                                                                                let _1627: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1630: ();
                                                                                                                                                                let _1631: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                                                                let _1638: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1641: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                                                                scope 386 {
                                                                                                                                                                    debug error_code => _1602;
                                                                                                                                                                    let _1609: std::string::String;
                                                                                                                                                                    let mut _1709: &[&str; 2];
                                                                                                                                                                    scope 387 {
                                                                                                                                                                        debug res => _1609;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 388 {
                                                                                                                                                                    debug residual => _1627;
                                                                                                                                                                    scope 389 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 390 {
                                                                                                                                                                    debug val => _1630;
                                                                                                                                                                    scope 391 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 392 {
                                                                                                                                                                    debug in_spot_market => _1631;
                                                                                                                                                                    let _1654: error::ErrorCode;
                                                                                                                                                                    let _1679: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                    let _1682: ();
                                                                                                                                                                    let _1703: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                    let _1706: ();
                                                                                                                                                                    scope 397 {
                                                                                                                                                                        debug error_code => _1654;
                                                                                                                                                                        let _1661: std::string::String;
                                                                                                                                                                        let mut _1708: &[&str; 2];
                                                                                                                                                                        scope 398 {
                                                                                                                                                                            debug res => _1661;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 399 {
                                                                                                                                                                        debug residual => _1679;
                                                                                                                                                                        scope 400 {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 401 {
                                                                                                                                                                        debug val => _1682;
                                                                                                                                                                        scope 402 {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 403 {
                                                                                                                                                                        debug residual => _1703;
                                                                                                                                                                        scope 404 {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 405 {
                                                                                                                                                                        debug val => _1706;
                                                                                                                                                                        scope 406 {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 393 {
                                                                                                                                                                    debug residual => _1638;
                                                                                                                                                                    scope 394 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 395 {
                                                                                                                                                                    debug val => _1641;
                                                                                                                                                                    scope 396 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 382 {
                                                                                                                                                                debug residual => _1586;
                                                                                                                                                                scope 383 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 384 {
                                                                                                                                                                debug val => _1589;
                                                                                                                                                                scope 385 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 364 {
                                                                                                                                                        debug residual => _1498;
                                                                                                                                                        scope 365 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 366 {
                                                                                                                                                        debug val => _1501;
                                                                                                                                                        scope 367 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 328 {
                                                                                                                                            debug residual => _1262;
                                                                                                                                            scope 329 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 330 {
                                                                                                                                            debug val => _1265;
                                                                                                                                            scope 331 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 311 {
                                                                                                                                        debug residual => _1215;
                                                                                                                                        scope 312 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 313 {
                                                                                                                                        debug val => _1218;
                                                                                                                                        scope 314 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 315 {
                                                                                                                                        debug residual => _1224;
                                                                                                                                        scope 316 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 317 {
                                                                                                                                        debug val => _1227;
                                                                                                                                        scope 318 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 286 {
                                                                                                                                    debug residual => _1143;
                                                                                                                                    scope 287 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 288 {
                                                                                                                                    debug val => _1146;
                                                                                                                                    scope 289 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 290 {
                                                                                                                                    debug residual => _1152;
                                                                                                                                    scope 291 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 292 {
                                                                                                                                    debug val => _1155;
                                                                                                                                    scope 293 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 238 {
                                                                                                                                debug residual => _993;
                                                                                                                                scope 239 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 240 {
                                                                                                                                debug val => _996;
                                                                                                                                scope 241 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 242 {
                                                                                                                                debug residual => _1002;
                                                                                                                                scope 243 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 244 {
                                                                                                                                debug val => _1005;
                                                                                                                                scope 245 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 233 {
                                                                                                                            debug residual => _974;
                                                                                                                            scope 234 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 235 {
                                                                                                                            debug val => _977;
                                                                                                                            scope 236 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 150 {
                                                                                                        debug residual => _533;
                                                                                                        scope 151 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 152 {
                                                                                                        debug val => _536;
                                                                                                        scope 153 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 141 {
                                                                                                    debug residual => _510;
                                                                                                    scope 142 {
                                                                                                    }
                                                                                                }
                                                                                                scope 143 {
                                                                                                    debug val => _513;
                                                                                                    scope 144 {
                                                                                                    }
                                                                                                }
                                                                                                scope 145 {
                                                                                                    debug residual => _519;
                                                                                                    scope 146 {
                                                                                                    }
                                                                                                }
                                                                                                scope 147 {
                                                                                                    debug val => _522;
                                                                                                    scope 148 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 124 {
                                                                                                debug residual => _457;
                                                                                                scope 125 {
                                                                                                }
                                                                                            }
                                                                                            scope 126 {
                                                                                                debug val => _460;
                                                                                                scope 127 {
                                                                                                }
                                                                                            }
                                                                                            scope 128 {
                                                                                                debug residual => _466;
                                                                                                scope 129 {
                                                                                                }
                                                                                            }
                                                                                            scope 130 {
                                                                                                debug val => _469;
                                                                                                scope 131 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 94 {
                                                                            debug residual => _356;
                                                                            scope 95 {
                                                                            }
                                                                        }
                                                                        scope 96 {
                                                                            debug val => _359;
                                                                            scope 97 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 82 {
                                                                        debug residual => _287;
                                                                        scope 83 {
                                                                        }
                                                                    }
                                                                    scope 84 {
                                                                        debug val => _290;
                                                                        scope 85 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 76 {
                                                                debug residual => _275;
                                                                scope 77 {
                                                                }
                                                            }
                                                            scope 78 {
                                                                debug val => _278;
                                                                scope 79 {
                                                                }
                                                            }
                                                        }
                                                        scope 58 {
                                                            debug residual => _169;
                                                            scope 59 {
                                                            }
                                                        }
                                                        scope 60 {
                                                            debug val => _172;
                                                            scope 61 {
                                                            }
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug residual => _123;
                                                        scope 48 {
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug val => _126;
                                                        scope 50 {
                                                        }
                                                    }
                                                }
                                                scope 42 {
                                                    debug residual => _112;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug val => _115;
                                                    scope 45 {
                                                    }
                                                }
                                            }
                                            scope 37 {
                                                debug residual => _100;
                                                scope 38 {
                                                }
                                            }
                                            scope 39 {
                                                debug val => _103;
                                                scope 40 {
                                                }
                                            }
                                        }
                                    }
                                    scope 31 {
                                        debug residual => _86;
                                        scope 32 {
                                        }
                                    }
                                    scope 33 {
                                        debug val => _89;
                                        scope 34 {
                                        }
                                    }
                                }
                                scope 26 {
                                    debug residual => _77;
                                    scope 27 {
                                    }
                                }
                                scope 28 {
                                    debug val => _80;
                                    scope 29 {
                                    }
                                }
                            }
                            scope 21 {
                                debug residual => _68;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug val => _71;
                                scope 24 {
                                }
                            }
                        }
                        scope 15 {
                        }
                        scope 16 {
                            debug residual => _59;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _62;
                            scope 19 {
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
    }

    bb0: {
        _1773 = const false;
        _1772 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _1738 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _10 = &((*_1738).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _1739 = deref_copy (*_10);
        _1850 = (((_1739.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _9 = &(*_1850);
        _8 = constraints::fill_not_paused(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb855];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: ());
        _6 = _15;
        StorageDead(_15);
        _1774 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        _1740 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _16 = &((*_1740).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb6, unwind: bb878];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        _1832 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb818;
    }

    bb7: {
        _18 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _19) -> [return: bb8, unwind: bb855];
    }

    bb8: {
        StorageDead(_19);
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = move ((_18 as Continue).0: anchor_lang::prelude::Clock);
        _17 = move _24;
        StorageDead(_24);
        _1776 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_25);
        _25 = (_17.0: u64);
        StorageLive(_26);
        _26 = (_17.4: i64);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _1741 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _30 = &(*_1741);
        _29 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _23) -> [return: bb11, unwind: bb877];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _1830 = discriminant(_18);
        StorageDead(_18);
        goto -> bb817;
    }

    bb12: {
        StorageDead(_30);
        _28 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _27 = &mut _28;
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_27);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = BTreeSet::<u16>::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _39 = &_40;
        _38 = &(*_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _47 = SizeOf([u16; 2]);
        _48 = AlignOf([u16; 2]);
        _49 = alloc::alloc::exchange_malloc(move _47, move _48) -> [return: bb15, unwind: bb854];
    }

    bb15: {
        StorageLive(_50);
        _50 = ShallowInitBox(move _49, [u16; 2]);
        StorageLive(_51);
        _51 = _2;
        StorageLive(_52);
        _52 = _3;
        _1851 = (((_50.0: std::ptr::Unique<[u16; 2]>).0: std::ptr::NonNull<[u16; 2]>).0: *const [u16; 2]);
        _1870 = _1851 as *const () (PtrToPtr);
        _1871 = _1870 as usize (Transmute);
        _1872 = AlignOf([u16; 2]);
        _1873 = Sub(_1872, const 1_usize);
        _1874 = BitAnd(_1871, _1873);
        _1875 = Eq(_1874, const 0_usize);
        assert(_1875, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1872, _1871) -> [success: bb879, unwind unreachable];
    }

    bb16: {
        StorageDead(_45);
        _43 = get_writable_spot_market_set_from_many(move _44) -> [return: bb17, unwind: bb854];
    }

    bb17: {
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        StorageLive(_53);
        _53 = (_17.0: u64);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _1742 = deref_copy (*_16);
        _1852 = (((_1742.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _57 = &(*_1852);
        _56 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _57) -> [return: bb18, unwind: bb853];
    }

    bb18: {
        StorageDead(_57);
        _55 = ((*_56).7: state::state::OracleGuardRails);
        _54 = Option::<state::state::OracleGuardRails>::Some(move _55);
        StorageDead(_55);
        _36 = load_maps(move _37, move _38, move _41, move _53, move _54) -> [return: bb19, unwind: bb853];
    }

    bb19: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _36) -> [return: bb20, unwind: bb853];
    }

    bb20: {
        StorageDead(_36);
        _58 = discriminant(_35);
        switchInt(move _58) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_62);
        _62 = move ((_35 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _34 = move _62;
        StorageDead(_62);
        StorageLive(_31);
        _31 = move (_34.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_32);
        _32 = move (_34.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_33);
        _33 = move (_34.2: state::oracle_map::OracleMap<'_>);
        _1780 = discriminant(_35);
        StorageDead(_56);
        drop(_43) -> [return: bb24, unwind: bb849];
    }

    bb22: {
        StorageLive(_59);
        _59 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb23, unwind: bb876];
    }

    bb23: {
        StorageDead(_61);
        StorageDead(_59);
        _1778 = discriminant(_35);
        StorageDead(_56);
        drop(_43) -> [return: bb814, unwind: bb854];
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_42);
        drop(_40) -> [return: bb25, unwind: bb850];
    }

    bb25: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_27);
        _65 = get_token_interface(move _66) -> [return: bb26, unwind: bb850];
    }

    bb26: {
        StorageDead(_66);
        _64 = <std::result::Result<Option<anchor_lang::prelude::Interface<'_, TokenInterface>>, error::ErrorCode> as Try>::branch(move _65) -> [return: bb27, unwind: bb850];
    }

    bb27: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_71);
        _71 = move ((_64 as Continue).0: std::option::Option<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>);
        _63 = move _71;
        StorageDead(_71);
        StorageDead(_64);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut (*_27);
        _74 = get_token_mint(move _75) -> [return: bb31, unwind: bb850];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb30, unwind: bb850];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_64);
        goto -> bb810;
    }

    bb31: {
        StorageDead(_75);
        _73 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _74) -> [return: bb32, unwind: bb850];
    }

    bb32: {
        StorageDead(_74);
        _76 = discriminant(_73);
        switchInt(move _76) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_80);
        _80 = move ((_73 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _72 = move _80;
        StorageDead(_80);
        StorageDead(_73);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &mut (*_27);
        _83 = get_token_mint(move _84) -> [return: bb36, unwind: bb850];
    }

    bb34: {
        StorageLive(_77);
        _77 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb35, unwind: bb850];
    }

    bb35: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_73);
        goto -> bb809;
    }

    bb36: {
        StorageDead(_84);
        _82 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _83) -> [return: bb37, unwind: bb850];
    }

    bb37: {
        StorageDead(_83);
        _85 = discriminant(_82);
        switchInt(move _85) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_89);
        _89 = move ((_82 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _81 = move _89;
        StorageDead(_89);
        StorageDead(_82);
        StorageLive(_90);
        StorageLive(_91);
        _1743 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _91 = &((*_1743).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _90 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _91) -> [return: bb41, unwind: bb850];
    }

    bb39: {
        StorageLive(_86);
        _86 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb40, unwind: bb850];
    }

    bb40: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_82);
        goto -> bb808;
    }

    bb41: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _1744 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _97 = &((*_1744).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _96 = &(*_97);
        _95 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _96) -> [return: bb42, unwind: bb850];
    }

    bb42: {
        StorageDead(_96);
        StorageLive(_98);
        _98 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _94 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _95, move _98) -> [return: bb43, unwind: bb850];
    }

    bb43: {
        StorageDead(_98);
        StorageDead(_95);
        _93 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _94) -> [return: bb44, unwind: bb850];
    }

    bb44: {
        StorageDead(_94);
        _99 = discriminant(_93);
        switchInt(move _99) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_103);
        _103 = move ((_93 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _92 = move _103;
        StorageDead(_103);
        _1784 = discriminant(_93);
        StorageDead(_97);
        StorageDead(_93);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _1745 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _109 = &((*_1745).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _108 = &(*_109);
        _107 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _108) -> [return: bb48, unwind: bb848];
    }

    bb46: {
        StorageLive(_100);
        _100 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb47, unwind: bb875];
    }

    bb47: {
        StorageDead(_102);
        StorageDead(_100);
        _1782 = discriminant(_93);
        StorageDead(_97);
        StorageDead(_93);
        goto -> bb807;
    }

    bb48: {
        StorageDead(_108);
        StorageLive(_110);
        _110 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _106 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _107, move _110) -> [return: bb49, unwind: bb848];
    }

    bb49: {
        StorageDead(_110);
        StorageDead(_107);
        _105 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _106) -> [return: bb50, unwind: bb848];
    }

    bb50: {
        StorageDead(_106);
        _111 = discriminant(_105);
        switchInt(move _111) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_115);
        _115 = move ((_105 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _104 = move _115;
        StorageDead(_115);
        _1788 = discriminant(_105);
        StorageDead(_109);
        StorageDead(_105);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _1746 = deref_copy (*_16);
        _1853 = (((_1746.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _121 = &(*_1853);
        _120 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _121) -> [return: bb54, unwind: bb847];
    }

    bb52: {
        StorageLive(_112);
        _112 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb53, unwind: bb874];
    }

    bb53: {
        StorageDead(_114);
        StorageDead(_112);
        _1786 = discriminant(_105);
        StorageDead(_109);
        StorageDead(_105);
        goto -> bb806;
    }

    bb54: {
        _119 = &(*_120);
        StorageDead(_121);
        _118 = state::state::State::get_exchange_status(move _119) -> [return: bb55, unwind: bb847];
    }

    bb55: {
        StorageDead(_119);
        _117 = <std::result::Result<BitFlags<state::state::ExchangeStatus>, error::ErrorCode> as Try>::branch(move _118) -> [return: bb56, unwind: bb847];
    }

    bb56: {
        StorageDead(_118);
        _122 = discriminant(_117);
        switchInt(move _122) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_126);
        _126 = ((_117 as Continue).0: enumflags2::BitFlags<state::state::ExchangeStatus>);
        _116 = _126;
        StorageDead(_126);
        StorageDead(_120);
        StorageDead(_117);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _116;
        StorageLive(_132);
        StorageLive(_133);
        _133 = state::state::ExchangeStatus::DepositPaused;
        StorageLive(_134);
        _134 = state::state::ExchangeStatus::WithdrawPaused;
        _132 = <state::state::ExchangeStatus as BitOr>::bitor(move _133, move _134) -> [return: bb60, unwind: bb847];
    }

    bb58: {
        StorageLive(_123);
        _123 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb59, unwind: bb847];
    }

    bb59: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb805;
    }

    bb60: {
        StorageDead(_134);
        StorageDead(_133);
        _130 = BitFlags::<state::state::ExchangeStatus>::contains::<BitFlags<state::state::ExchangeStatus>>(move _131, move _132) -> [return: bb61, unwind: bb847];
    }

    bb61: {
        switchInt(move _130) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_136);
        _136 = error::ErrorCode::ExchangePaused;
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _1737 = const _;
        _147 = &(*_1737);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_136;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _154) -> [return: bb64, unwind: bb847];
    }

    bb63: {
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_135);
        _135 = ();
        _129 = std::result::Result::<(), error::ErrorCode>::Ok(move _135);
        StorageDead(_135);
        goto -> bb70;
    }

    bb64: {
        StorageDead(_154);
        _152 = [move _153];
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb65, unwind: bb847];
    }

    bb65: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb66, unwind: bb847];
    }

    bb66: {
        StorageDead(_144);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb67, unwind: bb846];
    }

    bb67: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb68, unwind: bb846];
    }

    bb68: {
        StorageDead(_138);
        drop(_142) -> [return: bb69, unwind: bb847];
    }

    bb69: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_156);
        _156 = _136;
        _129 = std::result::Result::<(), error::ErrorCode>::Err(move _156);
        StorageDead(_156);
        StorageDead(_136);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_130);
        _128 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _129) -> [return: bb71, unwind: bb847];
    }

    bb71: {
        StorageDead(_129);
        _157 = discriminant(_128);
        switchInt(move _157) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_161);
        _161 = ((_128 as Continue).0: ());
        _127 = _161;
        StorageDead(_161);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_32;
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_2;
        _166 = &(*_167);
        _164 = SpotMarketMap::<'_>::get_ref_mut(move _165, move _166) -> [return: bb75, unwind: bb847];
    }

    bb73: {
        StorageLive(_158);
        _158 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb74, unwind: bb847];
    }

    bb74: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb805;
    }

    bb75: {
        StorageDead(_166);
        StorageDead(_165);
        _163 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _164) -> [return: bb76, unwind: bb847];
    }

    bb76: {
        StorageDead(_164);
        _168 = discriminant(_163);
        switchInt(move _168) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_172);
        _172 = move ((_163 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1773 = const true;
        _162 = move _172;
        StorageDead(_172);
        _1792 = discriminant(_163);
        StorageDead(_167);
        StorageDead(_163);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_162;
        _178 = <RefMut<'_, SpotMarket> as Deref>::deref(move _179) -> [return: bb80, unwind: bb872];
    }

    bb78: {
        StorageLive(_169);
        _169 = ((_163 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb79, unwind: bb873];
    }

    bb79: {
        StorageDead(_171);
        StorageDead(_169);
        _1790 = discriminant(_163);
        StorageDead(_167);
        StorageDead(_163);
        goto -> bb804;
    }

    bb80: {
        _177 = &(*_178);
        StorageDead(_179);
        StorageLive(_180);
        _180 = SpotOperation::Withdraw;
        _176 = SpotMarket::is_operation_paused(move _177, move _180) -> [return: bb81, unwind: bb872];
    }

    bb81: {
        switchInt(move _176) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_178);
        StorageLive(_182);
        _182 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _1736 = const _;
        _193 = &(*_1736);
        _192 = &(*_193);
        _191 = move _192 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_192);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &_182;
        _200 = &(*_201);
        _199 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _200) -> [return: bb84, unwind: bb872];
    }

    bb83: {
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_178);
        StorageLive(_181);
        _181 = ();
        _175 = std::result::Result::<(), error::ErrorCode>::Ok(move _181);
        StorageDead(_181);
        goto -> bb96;
    }

    bb84: {
        StorageDead(_200);
        _198 = [move _199];
        StorageDead(_199);
        _197 = &_198;
        _196 = &(*_197);
        _195 = move _196 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_196);
        _190 = Arguments::<'_>::new_v1(move _191, move _195) -> [return: bb85, unwind: bb872];
    }

    bb85: {
        StorageDead(_195);
        StorageDead(_191);
        _189 = format(move _190) -> [return: bb86, unwind: bb872];
    }

    bb86: {
        StorageDead(_190);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_193);
        _188 = move _189;
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = <String as Deref>::deref(move _186) -> [return: bb87, unwind: bb845];
    }

    bb87: {
        _184 = &(*_185);
        StorageDead(_186);
        _183 = solana_program::log::sol_log(move _184) -> [return: bb88, unwind: bb845];
    }

    bb88: {
        StorageDead(_184);
        drop(_188) -> [return: bb89, unwind: bb872];
    }

    bb89: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _1735 = const _;
        _212 = &(*_1735);
        _211 = &(*_212);
        _210 = move _211 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_211);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_2;
        _219 = &(*_220);
        _218 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _219) -> [return: bb90, unwind: bb872];
    }

    bb90: {
        StorageDead(_219);
        _217 = [move _218];
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = move _215 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_215);
        _209 = Arguments::<'_>::new_v1(move _210, move _214) -> [return: bb91, unwind: bb872];
    }

    bb91: {
        StorageDead(_214);
        StorageDead(_210);
        _208 = format(move _209) -> [return: bb92, unwind: bb872];
    }

    bb92: {
        StorageDead(_209);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_212);
        _207 = move _208;
        StorageDead(_208);
        _206 = &_207;
        _205 = &(*_206);
        _204 = <String as Deref>::deref(move _205) -> [return: bb93, unwind: bb844];
    }

    bb93: {
        _203 = &(*_204);
        StorageDead(_205);
        _202 = solana_program::log::sol_log(move _203) -> [return: bb94, unwind: bb844];
    }

    bb94: {
        StorageDead(_203);
        drop(_207) -> [return: bb95, unwind: bb872];
    }

    bb95: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_202);
        StorageLive(_221);
        _221 = _182;
        _175 = std::result::Result::<(), error::ErrorCode>::Err(move _221);
        StorageDead(_221);
        StorageDead(_182);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_176);
        _174 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _175) -> [return: bb97, unwind: bb872];
    }

    bb97: {
        StorageDead(_175);
        _222 = discriminant(_174);
        switchInt(move _222) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_226);
        _226 = ((_174 as Continue).0: ());
        _173 = _226;
        StorageDead(_226);
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_162;
        _232 = <RefMut<'_, SpotMarket> as Deref>::deref(move _233) -> [return: bb101, unwind: bb872];
    }

    bb99: {
        StorageLive(_223);
        _223 = ((_174 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_225);
        _225 = _223;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _225) -> [return: bb100, unwind: bb872];
    }

    bb100: {
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb859;
    }

    bb101: {
        StorageDead(_233);
        _231 = ((*_232).51: u64);
        _230 = Ne(move _231, const 0_u64);
        switchInt(move _230) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_234);
        _234 = ();
        _229 = std::result::Result::<(), error::ErrorCode>::Ok(move _234);
        StorageDead(_234);
        goto -> bb111;
    }

    bb103: {
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_235);
        _235 = error::ErrorCode::InvalidSwap;
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _1734 = const _;
        _246 = &(*_1734);
        _245 = &(*_246);
        _244 = move _245 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_245);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &_235;
        _253 = &(*_254);
        _252 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _253) -> [return: bb104, unwind: bb872];
    }

    bb104: {
        StorageDead(_253);
        _251 = [move _252];
        StorageDead(_252);
        _250 = &_251;
        _249 = &(*_250);
        _248 = move _249 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_249);
        _243 = Arguments::<'_>::new_v1(move _244, move _248) -> [return: bb105, unwind: bb872];
    }

    bb105: {
        StorageDead(_248);
        StorageDead(_244);
        _242 = format(move _243) -> [return: bb106, unwind: bb872];
    }

    bb106: {
        StorageDead(_243);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_246);
        _241 = move _242;
        StorageDead(_242);
        _240 = &_241;
        _239 = &(*_240);
        _238 = <String as Deref>::deref(move _239) -> [return: bb107, unwind: bb843];
    }

    bb107: {
        _237 = &(*_238);
        StorageDead(_239);
        _236 = solana_program::log::sol_log(move _237) -> [return: bb108, unwind: bb843];
    }

    bb108: {
        StorageDead(_237);
        drop(_241) -> [return: bb109, unwind: bb872];
    }

    bb109: {
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_236);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = const "the in_spot_market must have a flash loan amount set";
        _256 = &(*_257);
        _255 = solana_program::log::sol_log(move _256) -> [return: bb110, unwind: bb872];
    }

    bb110: {
        StorageDead(_256);
        StorageDead(_257);
        StorageDead(_255);
        StorageLive(_258);
        _258 = _235;
        _229 = std::result::Result::<(), error::ErrorCode>::Err(move _258);
        StorageDead(_258);
        StorageDead(_235);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_230);
        _228 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _229) -> [return: bb112, unwind: bb872];
    }

    bb112: {
        StorageDead(_229);
        _259 = discriminant(_228);
        switchInt(move _259) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_263);
        _263 = ((_228 as Continue).0: ());
        _227 = _263;
        StorageDead(_263);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &mut _33;
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_162;
        _272 = <RefMut<'_, SpotMarket> as Deref>::deref(move _273) -> [return: bb116, unwind: bb872];
    }

    bb114: {
        StorageLive(_260);
        _260 = ((_228 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_262);
        _262 = _260;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _262) -> [return: bb115, unwind: bb872];
    }

    bb115: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb859;
    }

    bb116: {
        _271 = &(*_272);
        StorageDead(_273);
        _270 = SpotMarket::oracle_id(move _271) -> [return: bb117, unwind: bb872];
    }

    bb117: {
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _266 = OracleMap::<'_>::get_price_data(move _267, move _268) -> [return: bb118, unwind: bb872];
    }

    bb118: {
        StorageDead(_268);
        StorageDead(_267);
        _265 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _266) -> [return: bb119, unwind: bb872];
    }

    bb119: {
        StorageDead(_266);
        _274 = discriminant(_265);
        switchInt(move _274) -> [0: bb120, 1: bb121, otherwise: bb4];
    }

    bb120: {
        StorageLive(_278);
        _278 = ((_265 as Continue).0: &state::oracle::OraclePriceData);
        _264 = _278;
        StorageDead(_278);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_265);
        StorageLive(_279);
        _279 = ((*_264).0: i64);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_32;
        StorageLive(_284);
        StorageLive(_285);
        _285 = &_3;
        _284 = &(*_285);
        _282 = SpotMarketMap::<'_>::get_ref_mut(move _283, move _284) -> [return: bb123, unwind: bb872];
    }

    bb121: {
        StorageLive(_275);
        _275 = ((_265 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_277);
        _277 = _275;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _277) -> [return: bb122, unwind: bb872];
    }

    bb122: {
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_265);
        goto -> bb803;
    }

    bb123: {
        StorageDead(_284);
        StorageDead(_283);
        _281 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _282) -> [return: bb124, unwind: bb872];
    }

    bb124: {
        StorageDead(_282);
        _286 = discriminant(_281);
        switchInt(move _286) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_290);
        _290 = move ((_281 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1772 = const true;
        _280 = move _290;
        StorageDead(_290);
        _1796 = discriminant(_281);
        StorageDead(_285);
        StorageDead(_281);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &_280;
        _296 = <RefMut<'_, SpotMarket> as Deref>::deref(move _297) -> [return: bb128, unwind: bb869];
    }

    bb126: {
        StorageLive(_287);
        _287 = ((_281 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_289);
        _289 = _287;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _289) -> [return: bb127, unwind: bb870];
    }

    bb127: {
        StorageDead(_289);
        StorageDead(_287);
        _1794 = discriminant(_281);
        StorageDead(_285);
        StorageDead(_281);
        goto -> bb802;
    }

    bb128: {
        _295 = &(*_296);
        StorageDead(_297);
        StorageLive(_298);
        _298 = SpotOperation::Deposit;
        _294 = SpotMarket::is_operation_paused(move _295, move _298) -> [return: bb129, unwind: bb869];
    }

    bb129: {
        switchInt(move _294) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        StorageDead(_298);
        StorageDead(_295);
        StorageDead(_296);
        StorageLive(_300);
        _300 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _1733 = const _;
        _311 = &(*_1733);
        _310 = &(*_311);
        _309 = move _310 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_310);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_300;
        _318 = &(*_319);
        _317 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _318) -> [return: bb132, unwind: bb869];
    }

    bb131: {
        StorageDead(_298);
        StorageDead(_295);
        StorageDead(_296);
        StorageLive(_299);
        _299 = ();
        _293 = std::result::Result::<(), error::ErrorCode>::Ok(move _299);
        StorageDead(_299);
        goto -> bb144;
    }

    bb132: {
        StorageDead(_318);
        _316 = [move _317];
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = move _314 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_314);
        _308 = Arguments::<'_>::new_v1(move _309, move _313) -> [return: bb133, unwind: bb869];
    }

    bb133: {
        StorageDead(_313);
        StorageDead(_309);
        _307 = format(move _308) -> [return: bb134, unwind: bb869];
    }

    bb134: {
        StorageDead(_308);
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_311);
        _306 = move _307;
        StorageDead(_307);
        _305 = &_306;
        _304 = &(*_305);
        _303 = <String as Deref>::deref(move _304) -> [return: bb135, unwind: bb842];
    }

    bb135: {
        _302 = &(*_303);
        StorageDead(_304);
        _301 = solana_program::log::sol_log(move _302) -> [return: bb136, unwind: bb842];
    }

    bb136: {
        StorageDead(_302);
        drop(_306) -> [return: bb137, unwind: bb869];
    }

    bb137: {
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_301);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _1732 = const _;
        _330 = &(*_1732);
        _329 = &(*_330);
        _328 = move _329 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_329);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = &_3;
        _337 = &(*_338);
        _336 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _337) -> [return: bb138, unwind: bb869];
    }

    bb138: {
        StorageDead(_337);
        _335 = [move _336];
        StorageDead(_336);
        _334 = &_335;
        _333 = &(*_334);
        _332 = move _333 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_333);
        _327 = Arguments::<'_>::new_v1(move _328, move _332) -> [return: bb139, unwind: bb869];
    }

    bb139: {
        StorageDead(_332);
        StorageDead(_328);
        _326 = format(move _327) -> [return: bb140, unwind: bb869];
    }

    bb140: {
        StorageDead(_327);
        StorageDead(_338);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_330);
        _325 = move _326;
        StorageDead(_326);
        _324 = &_325;
        _323 = &(*_324);
        _322 = <String as Deref>::deref(move _323) -> [return: bb141, unwind: bb841];
    }

    bb141: {
        _321 = &(*_322);
        StorageDead(_323);
        _320 = solana_program::log::sol_log(move _321) -> [return: bb142, unwind: bb841];
    }

    bb142: {
        StorageDead(_321);
        drop(_325) -> [return: bb143, unwind: bb869];
    }

    bb143: {
        StorageDead(_325);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_320);
        StorageLive(_339);
        _339 = _300;
        _293 = std::result::Result::<(), error::ErrorCode>::Err(move _339);
        StorageDead(_339);
        StorageDead(_300);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_294);
        _292 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _293) -> [return: bb145, unwind: bb869];
    }

    bb145: {
        StorageDead(_293);
        _340 = discriminant(_292);
        switchInt(move _340) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb146: {
        StorageLive(_344);
        _344 = ((_292 as Continue).0: ());
        _291 = _344;
        StorageDead(_344);
        StorageDead(_292);
        StorageDead(_291);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &mut _33;
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &_280;
        _353 = <RefMut<'_, SpotMarket> as Deref>::deref(move _354) -> [return: bb149, unwind: bb869];
    }

    bb147: {
        StorageLive(_341);
        _341 = ((_292 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_343);
        _343 = _341;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _343) -> [return: bb148, unwind: bb869];
    }

    bb148: {
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_292);
        StorageDead(_291);
        goto -> bb857;
    }

    bb149: {
        _352 = &(*_353);
        StorageDead(_354);
        _351 = SpotMarket::oracle_id(move _352) -> [return: bb150, unwind: bb869];
    }

    bb150: {
        StorageDead(_352);
        _350 = &_351;
        _349 = &(*_350);
        _347 = OracleMap::<'_>::get_price_data(move _348, move _349) -> [return: bb151, unwind: bb869];
    }

    bb151: {
        StorageDead(_349);
        StorageDead(_348);
        _346 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _347) -> [return: bb152, unwind: bb869];
    }

    bb152: {
        StorageDead(_347);
        _355 = discriminant(_346);
        switchInt(move _355) -> [0: bb153, 1: bb154, otherwise: bb4];
    }

    bb153: {
        StorageLive(_359);
        _359 = ((_346 as Continue).0: &state::oracle::OraclePriceData);
        _345 = _359;
        StorageDead(_359);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_346);
        StorageLive(_360);
        _360 = ((*_345).0: i64);
        StorageLive(_361);
        _1747 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _361 = &mut ((*_1747).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_362);
        _1748 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _362 = &mut ((*_1748).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &_162;
        _364 = <RefMut<'_, SpotMarket> as Deref>::deref(move _365) -> [return: bb156, unwind: bb869];
    }

    bb154: {
        StorageLive(_356);
        _356 = ((_346 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_358);
        _358 = _356;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _358) -> [return: bb155, unwind: bb869];
    }

    bb155: {
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_346);
        goto -> bb801;
    }

    bb156: {
        StorageDead(_365);
        _363 = ((*_364).51: u64);
        StorageDead(_364);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _1749 = deref_copy (*_362);
        _1854 = (((_1749.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _372 = &(*_1854);
        _371 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _372) -> [return: bb157, unwind: bb869];
    }

    bb157: {
        _370 = &(*_371);
        _369 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _370) -> [return: bb158, unwind: bb869];
    }

    bb158: {
        StorageDead(_372);
        StorageDead(_370);
        _368 = ((*_369).2: u64);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = &_162;
        _374 = <RefMut<'_, SpotMarket> as Deref>::deref(move _375) -> [return: bb159, unwind: bb869];
    }

    bb159: {
        StorageDead(_375);
        _373 = ((*_374).52: u64);
        _367 = Gt(move _368, move _373);
        switchInt(move _367) -> [0: bb195, otherwise: bb160];
    }

    bb160: {
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _1750 = deref_copy (*_362);
        _1855 = (((_1750.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _383 = &(*_1855);
        _382 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _383) -> [return: bb161, unwind: bb869];
    }

    bb161: {
        _381 = &(*_382);
        _380 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _381) -> [return: bb162, unwind: bb869];
    }

    bb162: {
        StorageDead(_383);
        StorageDead(_381);
        _379 = ((*_380).2: u64);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &_162;
        _385 = <RefMut<'_, SpotMarket> as Deref>::deref(move _386) -> [return: bb163, unwind: bb869];
    }

    bb163: {
        StorageDead(_386);
        _384 = ((*_385).52: u64);
        _378 = <u64 as SafeMath>::safe_sub(move _379, move _384) -> [return: bb164, unwind: bb869];
    }

    bb164: {
        StorageDead(_384);
        StorageDead(_379);
        _377 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _378) -> [return: bb165, unwind: bb869];
    }

    bb165: {
        StorageDead(_378);
        _387 = discriminant(_377);
        switchInt(move _387) -> [0: bb166, 1: bb167, otherwise: bb4];
    }

    bb166: {
        StorageLive(_391);
        _391 = ((_377 as Continue).0: u64);
        _376 = _391;
        StorageDead(_391);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_377);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _1751 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _396 = &((*_1751).8: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _395 = &(*_396);
        StorageLive(_397);
        _1752 = deref_copy (*_362);
        _1856 = (((_1752.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _397 = &(*_1856);
        StorageLive(_398);
        _1753 = deref_copy (*_361);
        _1857 = (((_1753.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _398 = &(*_1857);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _1754 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _402 = &((*_1754).3: anchor_lang::prelude::Signer<'_>);
        _401 = &(*_402);
        _400 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _401) -> [return: bb169, unwind: bb869];
    }

    bb167: {
        StorageLive(_388);
        _388 = ((_377 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_390);
        _390 = _388;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _390) -> [return: bb168, unwind: bb869];
    }

    bb168: {
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_377);
        goto -> bb799;
    }

    bb169: {
        _399 = &(*_400);
        StorageDead(_401);
        StorageLive(_403);
        _403 = _376;
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_72;
        _404 = &(*_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &_162;
        _409 = <RefMut<'_, SpotMarket> as Deref>::deref(move _410) -> [return: bb170, unwind: bb869];
    }

    bb170: {
        _408 = &(*_409);
        StorageDead(_410);
        _407 = SpotMarket::has_transfer_hook(move _408) -> [return: bb171, unwind: bb869];
    }

    bb171: {
        switchInt(move _407) -> [0: bb173, otherwise: bb172];
    }

    bb172: {
        StorageDead(_409);
        StorageDead(_408);
        StorageLive(_411);
        _411 = &mut (*_27);
        _406 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _411);
        StorageDead(_411);
        goto -> bb174;
    }

    bb173: {
        StorageDead(_409);
        StorageDead(_408);
        _406 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb174;
    }

    bb174: {
        StorageDead(_407);
        _394 = receive(move _395, move _397, move _398, move _399, move _403, move _404, move _406) -> [return: bb175, unwind: bb869];
    }

    bb175: {
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        _393 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _394) -> [return: bb176, unwind: bb869];
    }

    bb176: {
        StorageDead(_394);
        _412 = discriminant(_393);
        switchInt(move _412) -> [0: bb177, 1: bb178, otherwise: bb4];
    }

    bb177: {
        StorageLive(_416);
        _416 = ((_393 as Continue).0: ());
        _392 = _416;
        StorageDead(_416);
        _1798 = discriminant(_393);
        StorageDead(_405);
        StorageDead(_402);
        StorageDead(_400);
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_392);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _1755 = deref_copy (*_362);
        _1858 = (((_1755.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _420 = &mut (*_1858);
        _419 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _420) -> [return: bb180, unwind: bb869];
    }

    bb178: {
        StorageLive(_413);
        _413 = move ((_393 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_415);
        _415 = move _413;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _415) -> [return: bb179, unwind: bb867];
    }

    bb179: {
        StorageDead(_415);
        StorageDead(_413);
        _1828 = discriminant(_393);
        StorageDead(_405);
        StorageDead(_402);
        StorageDead(_400);
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_392);
        goto -> bb799;
    }

    bb180: {
        StorageDead(_420);
        _418 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _419) -> [return: bb181, unwind: bb869];
    }

    bb181: {
        StorageDead(_419);
        _421 = discriminant(_418);
        switchInt(move _421) -> [0: bb182, 1: bb183, otherwise: bb4];
    }

    bb182: {
        StorageLive(_425);
        _425 = ((_418 as Continue).0: ());
        _417 = _425;
        StorageDead(_425);
        _1800 = discriminant(_418);
        StorageDead(_418);
        StorageDead(_417);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _1756 = deref_copy (*_361);
        _1859 = (((_1756.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _429 = &mut (*_1859);
        _428 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _429) -> [return: bb185, unwind: bb869];
    }

    bb183: {
        StorageLive(_422);
        _422 = move ((_418 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_424);
        _424 = move _422;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _424) -> [return: bb184, unwind: bb866];
    }

    bb184: {
        StorageDead(_424);
        StorageDead(_422);
        _1826 = discriminant(_418);
        StorageDead(_418);
        StorageDead(_417);
        goto -> bb799;
    }

    bb185: {
        StorageDead(_429);
        _427 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _428) -> [return: bb186, unwind: bb869];
    }

    bb186: {
        StorageDead(_428);
        _430 = discriminant(_427);
        switchInt(move _430) -> [0: bb187, 1: bb188, otherwise: bb4];
    }

    bb187: {
        StorageLive(_434);
        _434 = ((_427 as Continue).0: ());
        _426 = _434;
        StorageDead(_434);
        _1802 = discriminant(_427);
        StorageDead(_427);
        StorageDead(_426);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        _438 = _363;
        StorageLive(_439);
        _439 = _376;
        _437 = <u64 as SafeMath>::safe_sub(move _438, move _439) -> [return: bb190, unwind: bb869];
    }

    bb188: {
        StorageLive(_431);
        _431 = move ((_427 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_433);
        _433 = move _431;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _433) -> [return: bb189, unwind: bb865];
    }

    bb189: {
        StorageDead(_433);
        StorageDead(_431);
        _1824 = discriminant(_427);
        StorageDead(_427);
        StorageDead(_426);
        goto -> bb799;
    }

    bb190: {
        StorageDead(_439);
        StorageDead(_438);
        _436 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _437) -> [return: bb191, unwind: bb869];
    }

    bb191: {
        StorageDead(_437);
        _440 = discriminant(_436);
        switchInt(move _440) -> [0: bb192, 1: bb193, otherwise: bb4];
    }

    bb192: {
        StorageLive(_444);
        _444 = ((_436 as Continue).0: u64);
        _435 = _444;
        StorageDead(_444);
        _363 = move _435;
        StorageDead(_435);
        StorageDead(_436);
        _366 = const ();
        StorageDead(_376);
        goto -> bb196;
    }

    bb193: {
        StorageLive(_441);
        _441 = ((_436 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_443);
        _443 = _441;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _443) -> [return: bb194, unwind: bb869];
    }

    bb194: {
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_435);
        StorageDead(_436);
        goto -> bb799;
    }

    bb195: {
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        _366 = const ();
        goto -> bb196;
    }

    bb196: {
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &mut _92;
        _453 = <RefMut<'_, User> as DerefMut>::deref_mut(move _454) -> [return: bb197, unwind: bb869];
    }

    bb197: {
        _452 = &mut (*_453);
        StorageDead(_454);
        StorageLive(_455);
        _455 = _2;
        _451 = User::force_get_spot_position_mut(move _452, move _455) -> [return: bb198, unwind: bb869];
    }

    bb198: {
        StorageDead(_455);
        StorageDead(_452);
        _450 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _451) -> [return: bb199, unwind: bb869];
    }

    bb199: {
        StorageDead(_451);
        _456 = discriminant(_450);
        switchInt(move _456) -> [0: bb200, 1: bb201, otherwise: bb4];
    }

    bb200: {
        StorageLive(_460);
        _460 = move ((_450 as Continue).0: &mut state::user::SpotPosition);
        _449 = move _460;
        StorageDead(_460);
        _448 = &(*_449);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = &_162;
        _463 = &(*_464);
        _462 = <RefMut<'_, SpotMarket> as Deref>::deref(move _463) -> [return: bb203, unwind: bb869];
    }

    bb201: {
        StorageLive(_457);
        _457 = ((_450 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_459);
        _459 = _457;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _459) -> [return: bb202, unwind: bb869];
    }

    bb202: {
        StorageDead(_459);
        StorageDead(_457);
        StorageDead(_448);
        StorageDead(_447);
        goto -> bb797;
    }

    bb203: {
        _461 = &(*_462);
        StorageDead(_463);
        _447 = SpotPosition::get_signed_token_amount(move _448, move _461) -> [return: bb204, unwind: bb869];
    }

    bb204: {
        StorageDead(_461);
        StorageDead(_448);
        _446 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _447) -> [return: bb205, unwind: bb869];
    }

    bb205: {
        StorageDead(_447);
        _465 = discriminant(_446);
        switchInt(move _465) -> [0: bb206, 1: bb207, otherwise: bb4];
    }

    bb206: {
        StorageLive(_469);
        _469 = ((_446 as Continue).0: i128);
        _445 = _469;
        StorageDead(_469);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_453);
        StorageDead(_450);
        StorageDead(_449);
        StorageDead(_446);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = _363;
        _475 = <u64 as Cast>::cast::<u128>(move _476) -> [return: bb209, unwind: bb869];
    }

    bb207: {
        StorageLive(_466);
        _466 = ((_446 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_468);
        _468 = _466;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _468) -> [return: bb208, unwind: bb869];
    }

    bb208: {
        StorageDead(_468);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_462);
        goto -> bb797;
    }

    bb209: {
        StorageDead(_476);
        _474 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _475) -> [return: bb210, unwind: bb869];
    }

    bb210: {
        StorageDead(_475);
        _477 = discriminant(_474);
        switchInt(move _477) -> [0: bb211, 1: bb212, otherwise: bb4];
    }

    bb211: {
        StorageLive(_481);
        _481 = ((_474 as Continue).0: u128);
        _473 = _481;
        StorageDead(_481);
        StorageLive(_482);
        StorageLive(_483);
        _1731 = const _;
        _483 = &(*_1731);
        _482 = &(*_483);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _488 = &mut _162;
        _487 = &mut (*_488);
        _486 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _487) -> [return: bb214, unwind: bb869];
    }

    bb212: {
        StorageLive(_478);
        _478 = ((_474 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_480);
        _480 = _478;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _480) -> [return: bb213, unwind: bb869];
    }

    bb213: {
        StorageDead(_480);
        StorageDead(_478);
        StorageDead(_473);
        StorageDead(_472);
        goto -> bb796;
    }

    bb214: {
        _485 = &mut (*_486);
        StorageDead(_487);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &mut _92;
        _491 = &mut (*_492);
        _490 = <RefMut<'_, User> as DerefMut>::deref_mut(move _491) -> [return: bb215, unwind: bb869];
    }

    bb215: {
        _489 = &mut (*_490);
        StorageDead(_491);
        _472 = update_spot_balances_and_cumulative_deposits_with_limits(move _473, move _482, move _485, move _489) -> [return: bb216, unwind: bb869];
    }

    bb216: {
        StorageDead(_489);
        StorageDead(_485);
        StorageDead(_482);
        StorageDead(_473);
        _471 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _472) -> [return: bb217, unwind: bb869];
    }

    bb217: {
        StorageDead(_472);
        _493 = discriminant(_471);
        switchInt(move _493) -> [0: bb218, 1: bb219, otherwise: bb4];
    }

    bb218: {
        StorageLive(_497);
        _497 = ((_471 as Continue).0: ());
        _470 = _497;
        StorageDead(_497);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_483);
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &mut _92;
        _506 = <RefMut<'_, User> as DerefMut>::deref_mut(move _507) -> [return: bb221, unwind: bb869];
    }

    bb219: {
        StorageLive(_494);
        _494 = ((_471 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_496);
        _496 = _494;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _496) -> [return: bb220, unwind: bb869];
    }

    bb220: {
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_483);
        goto -> bb796;
    }

    bb221: {
        _505 = &mut (*_506);
        StorageDead(_507);
        StorageLive(_508);
        _508 = _2;
        _504 = User::force_get_spot_position_mut(move _505, move _508) -> [return: bb222, unwind: bb869];
    }

    bb222: {
        StorageDead(_508);
        StorageDead(_505);
        _503 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _504) -> [return: bb223, unwind: bb869];
    }

    bb223: {
        StorageDead(_504);
        _509 = discriminant(_503);
        switchInt(move _509) -> [0: bb224, 1: bb225, otherwise: bb4];
    }

    bb224: {
        StorageLive(_513);
        _513 = move ((_503 as Continue).0: &mut state::user::SpotPosition);
        _502 = move _513;
        StorageDead(_513);
        _501 = &(*_502);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        _517 = &_162;
        _516 = &(*_517);
        _515 = <RefMut<'_, SpotMarket> as Deref>::deref(move _516) -> [return: bb227, unwind: bb869];
    }

    bb225: {
        StorageLive(_510);
        _510 = ((_503 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_512);
        _512 = _510;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _512) -> [return: bb226, unwind: bb869];
    }

    bb226: {
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_501);
        StorageDead(_500);
        goto -> bb794;
    }

    bb227: {
        _514 = &(*_515);
        StorageDead(_516);
        _500 = SpotPosition::get_signed_token_amount(move _501, move _514) -> [return: bb228, unwind: bb869];
    }

    bb228: {
        StorageDead(_514);
        StorageDead(_501);
        _499 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _500) -> [return: bb229, unwind: bb869];
    }

    bb229: {
        StorageDead(_500);
        _518 = discriminant(_499);
        switchInt(move _518) -> [0: bb230, 1: bb231, otherwise: bb4];
    }

    bb230: {
        StorageLive(_522);
        _522 = ((_499 as Continue).0: i128);
        _498 = _522;
        StorageDead(_522);
        StorageDead(_517);
        StorageDead(_515);
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_499);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = _445;
        _524 = Gt(move _525, const 0_i128);
        switchInt(move _524) -> [0: bb234, otherwise: bb233];
    }

    bb231: {
        StorageLive(_519);
        _519 = ((_499 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_521);
        _521 = _519;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _521) -> [return: bb232, unwind: bb869];
    }

    bb232: {
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_515);
        goto -> bb794;
    }

    bb233: {
        StorageDead(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = _445;
        _526 = core::num::<impl i128>::unsigned_abs(move _527) -> [return: bb235, unwind: bb869];
    }

    bb234: {
        StorageDead(_525);
        _523 = const false;
        goto -> bb241;
    }

    bb235: {
        StorageDead(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = _363;
        _530 = <u64 as Cast>::cast::<u128>(move _531) -> [return: bb236, unwind: bb869];
    }

    bb236: {
        StorageDead(_531);
        _529 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _530) -> [return: bb237, unwind: bb869];
    }

    bb237: {
        StorageDead(_530);
        _532 = discriminant(_529);
        switchInt(move _532) -> [0: bb238, 1: bb239, otherwise: bb4];
    }

    bb238: {
        StorageLive(_536);
        _536 = ((_529 as Continue).0: u128);
        _528 = _536;
        StorageDead(_536);
        _523 = Ge(move _526, move _528);
        StorageDead(_529);
        StorageDead(_528);
        StorageDead(_526);
        goto -> bb241;
    }

    bb239: {
        StorageLive(_533);
        _533 = ((_529 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_535);
        _535 = _533;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _535) -> [return: bb240, unwind: bb869];
    }

    bb240: {
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_529);
        StorageDead(_528);
        StorageDead(_526);
        StorageDead(_524);
        goto -> bb793;
    }

    bb241: {
        StorageDead(_524);
        StorageLive(_537);
        StorageLive(_538);
        _538 = _523;
        switchInt(move _538) -> [0: bb242, otherwise: bb327];
    }

    bb242: {
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _545 = &_162;
        _544 = <RefMut<'_, SpotMarket> as Deref>::deref(move _545) -> [return: bb243, unwind: bb869];
    }

    bb243: {
        _543 = &(*_544);
        StorageDead(_545);
        _542 = SpotMarket::is_reduce_only(move _543) -> [return: bb244, unwind: bb869];
    }

    bb244: {
        switchInt(move _542) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        StorageDead(_543);
        StorageDead(_544);
        StorageLive(_547);
        _547 = error::ErrorCode::SpotMarketReduceOnly;
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _1730 = const _;
        _558 = &(*_1730);
        _557 = &(*_558);
        _556 = move _557 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_557);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &_547;
        _565 = &(*_566);
        _564 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _565) -> [return: bb247, unwind: bb869];
    }

    bb246: {
        StorageDead(_543);
        StorageDead(_544);
        StorageLive(_546);
        _546 = ();
        _541 = std::result::Result::<(), error::ErrorCode>::Ok(move _546);
        StorageDead(_546);
        goto -> bb260;
    }

    bb247: {
        StorageDead(_565);
        _563 = [move _564];
        StorageDead(_564);
        _562 = &_563;
        _561 = &(*_562);
        _560 = move _561 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_561);
        _555 = Arguments::<'_>::new_v1(move _556, move _560) -> [return: bb248, unwind: bb869];
    }

    bb248: {
        StorageDead(_560);
        StorageDead(_556);
        _554 = format(move _555) -> [return: bb249, unwind: bb869];
    }

    bb249: {
        StorageDead(_555);
        StorageDead(_566);
        StorageDead(_563);
        StorageDead(_562);
        StorageDead(_558);
        _553 = move _554;
        StorageDead(_554);
        _552 = &_553;
        _551 = &(*_552);
        _550 = <String as Deref>::deref(move _551) -> [return: bb250, unwind: bb840];
    }

    bb250: {
        _549 = &(*_550);
        StorageDead(_551);
        _548 = solana_program::log::sol_log(move _549) -> [return: bb251, unwind: bb840];
    }

    bb251: {
        StorageDead(_549);
        drop(_553) -> [return: bb252, unwind: bb869];
    }

    bb252: {
        StorageDead(_553);
        StorageDead(_552);
        StorageDead(_550);
        StorageDead(_548);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        _1729 = const _;
        _577 = &(*_1729);
        _576 = &(*_577);
        _575 = move _576 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_576);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &_445;
        _584 = &(*_585);
        _583 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _584) -> [return: bb253, unwind: bb869];
    }

    bb253: {
        StorageDead(_584);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        _588 = &_363;
        _587 = &(*_588);
        _586 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _587) -> [return: bb254, unwind: bb869];
    }

    bb254: {
        StorageDead(_587);
        _582 = [move _583, move _586];
        StorageDead(_586);
        StorageDead(_583);
        _581 = &_582;
        _580 = &(*_581);
        _579 = move _580 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_580);
        _574 = Arguments::<'_>::new_v1(move _575, move _579) -> [return: bb255, unwind: bb869];
    }

    bb255: {
        StorageDead(_579);
        StorageDead(_575);
        _573 = format(move _574) -> [return: bb256, unwind: bb869];
    }

    bb256: {
        StorageDead(_574);
        StorageDead(_588);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_577);
        _572 = move _573;
        StorageDead(_573);
        _571 = &_572;
        _570 = &(*_571);
        _569 = <String as Deref>::deref(move _570) -> [return: bb257, unwind: bb839];
    }

    bb257: {
        _568 = &(*_569);
        StorageDead(_570);
        _567 = solana_program::log::sol_log(move _568) -> [return: bb258, unwind: bb839];
    }

    bb258: {
        StorageDead(_568);
        drop(_572) -> [return: bb259, unwind: bb869];
    }

    bb259: {
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_567);
        StorageLive(_589);
        _589 = _547;
        _541 = std::result::Result::<(), error::ErrorCode>::Err(move _589);
        StorageDead(_589);
        StorageDead(_547);
        goto -> bb260;
    }

    bb260: {
        StorageDead(_542);
        _540 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _541) -> [return: bb261, unwind: bb869];
    }

    bb261: {
        StorageDead(_541);
        _590 = discriminant(_540);
        switchInt(move _590) -> [0: bb262, 1: bb263, otherwise: bb4];
    }

    bb262: {
        StorageLive(_594);
        _594 = ((_540 as Continue).0: ());
        _539 = _594;
        StorageDead(_594);
        StorageDead(_540);
        StorageDead(_539);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = &_5;
        StorageLive(_600);
        _1728 = const _;
        _600 = &(*_1728);
        _598 = <Option<instructions::user::SwapReduceOnly> as PartialEq>::ne(move _599, move _600) -> [return: bb265, unwind: bb869];
    }

    bb263: {
        StorageLive(_591);
        _591 = ((_540 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_593);
        _593 = _591;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _593) -> [return: bb264, unwind: bb869];
    }

    bb264: {
        StorageDead(_593);
        StorageDead(_591);
        StorageDead(_540);
        StorageDead(_539);
        goto -> bb792;
    }

    bb265: {
        switchInt(move _598) -> [0: bb267, otherwise: bb266];
    }

    bb266: {
        StorageDead(_600);
        StorageDead(_599);
        StorageLive(_603);
        _603 = ();
        _597 = std::result::Result::<(), error::ErrorCode>::Ok(move _603);
        StorageDead(_603);
        goto -> bb281;
    }

    bb267: {
        StorageDead(_600);
        StorageDead(_599);
        StorageLive(_604);
        _604 = error::ErrorCode::InvalidSwap;
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        _1727 = const _;
        _615 = &(*_1727);
        _614 = &(*_615);
        _613 = move _614 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_614);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &_604;
        _622 = &(*_623);
        _621 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _622) -> [return: bb268, unwind: bb869];
    }

    bb268: {
        StorageDead(_622);
        _620 = [move _621];
        StorageDead(_621);
        _619 = &_620;
        _618 = &(*_619);
        _617 = move _618 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_618);
        _612 = Arguments::<'_>::new_v1(move _613, move _617) -> [return: bb269, unwind: bb869];
    }

    bb269: {
        StorageDead(_617);
        StorageDead(_613);
        _611 = format(move _612) -> [return: bb270, unwind: bb869];
    }

    bb270: {
        StorageDead(_612);
        StorageDead(_623);
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_615);
        _610 = move _611;
        StorageDead(_611);
        _609 = &_610;
        _608 = &(*_609);
        _607 = <String as Deref>::deref(move _608) -> [return: bb271, unwind: bb838];
    }

    bb271: {
        _606 = &(*_607);
        StorageDead(_608);
        _605 = solana_program::log::sol_log(move _606) -> [return: bb272, unwind: bb838];
    }

    bb272: {
        StorageDead(_606);
        drop(_610) -> [return: bb273, unwind: bb869];
    }

    bb273: {
        StorageDead(_610);
        StorageDead(_609);
        StorageDead(_607);
        StorageDead(_605);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        _1726 = const _;
        _634 = &(*_1726);
        _633 = &(*_634);
        _632 = move _633 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_633);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &_445;
        _641 = &(*_642);
        _640 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _641) -> [return: bb274, unwind: bb869];
    }

    bb274: {
        StorageDead(_641);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        _645 = &_363;
        _644 = &(*_645);
        _643 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _644) -> [return: bb275, unwind: bb869];
    }

    bb275: {
        StorageDead(_644);
        _639 = [move _640, move _643];
        StorageDead(_643);
        StorageDead(_640);
        _638 = &_639;
        _637 = &(*_638);
        _636 = move _637 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_637);
        _631 = Arguments::<'_>::new_v1(move _632, move _636) -> [return: bb276, unwind: bb869];
    }

    bb276: {
        StorageDead(_636);
        StorageDead(_632);
        _630 = format(move _631) -> [return: bb277, unwind: bb869];
    }

    bb277: {
        StorageDead(_631);
        StorageDead(_645);
        StorageDead(_642);
        StorageDead(_639);
        StorageDead(_638);
        StorageDead(_634);
        _629 = move _630;
        StorageDead(_630);
        _628 = &_629;
        _627 = &(*_628);
        _626 = <String as Deref>::deref(move _627) -> [return: bb278, unwind: bb837];
    }

    bb278: {
        _625 = &(*_626);
        StorageDead(_627);
        _624 = solana_program::log::sol_log(move _625) -> [return: bb279, unwind: bb837];
    }

    bb279: {
        StorageDead(_625);
        drop(_629) -> [return: bb280, unwind: bb869];
    }

    bb280: {
        StorageDead(_629);
        StorageDead(_628);
        StorageDead(_626);
        StorageDead(_624);
        StorageLive(_646);
        _646 = _604;
        _597 = std::result::Result::<(), error::ErrorCode>::Err(move _646);
        StorageDead(_646);
        StorageDead(_604);
        goto -> bb281;
    }

    bb281: {
        StorageDead(_598);
        _596 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _597) -> [return: bb282, unwind: bb869];
    }

    bb282: {
        StorageDead(_597);
        _647 = discriminant(_596);
        switchInt(move _647) -> [0: bb283, 1: bb284, otherwise: bb4];
    }

    bb283: {
        StorageLive(_651);
        _651 = ((_596 as Continue).0: ());
        _595 = _651;
        StorageDead(_651);
        StorageDead(_596);
        StorageDead(_595);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        _657 = &_92;
        _656 = <RefMut<'_, User> as Deref>::deref(move _657) -> [return: bb286, unwind: bb869];
    }

    bb284: {
        StorageLive(_648);
        _648 = ((_596 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_650);
        _650 = _648;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _650) -> [return: bb285, unwind: bb869];
    }

    bb285: {
        StorageDead(_650);
        StorageDead(_648);
        StorageDead(_596);
        StorageDead(_595);
        goto -> bb792;
    }

    bb286: {
        StorageDead(_657);
        _655 = ((*_656).20: bool);
        switchInt(move _655) -> [0: bb288, otherwise: bb287];
    }

    bb287: {
        StorageDead(_656);
        StorageLive(_658);
        _658 = ();
        _654 = std::result::Result::<(), error::ErrorCode>::Ok(move _658);
        StorageDead(_658);
        goto -> bb301;
    }

    bb288: {
        StorageDead(_656);
        StorageLive(_659);
        _659 = error::ErrorCode::MarginTradingDisabled;
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        _1725 = const _;
        _670 = &(*_1725);
        _669 = &(*_670);
        _668 = move _669 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_669);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        _678 = &_659;
        _677 = &(*_678);
        _676 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _677) -> [return: bb289, unwind: bb869];
    }

    bb289: {
        StorageDead(_677);
        _675 = [move _676];
        StorageDead(_676);
        _674 = &_675;
        _673 = &(*_674);
        _672 = move _673 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_673);
        _667 = Arguments::<'_>::new_v1(move _668, move _672) -> [return: bb290, unwind: bb869];
    }

    bb290: {
        StorageDead(_672);
        StorageDead(_668);
        _666 = format(move _667) -> [return: bb291, unwind: bb869];
    }

    bb291: {
        StorageDead(_667);
        StorageDead(_678);
        StorageDead(_675);
        StorageDead(_674);
        StorageDead(_670);
        _665 = move _666;
        StorageDead(_666);
        _664 = &_665;
        _663 = &(*_664);
        _662 = <String as Deref>::deref(move _663) -> [return: bb292, unwind: bb836];
    }

    bb292: {
        _661 = &(*_662);
        StorageDead(_663);
        _660 = solana_program::log::sol_log(move _661) -> [return: bb293, unwind: bb836];
    }

    bb293: {
        StorageDead(_661);
        drop(_665) -> [return: bb294, unwind: bb869];
    }

    bb294: {
        StorageDead(_665);
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_660);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        _1724 = const _;
        _689 = &(*_1724);
        _688 = &(*_689);
        _687 = move _688 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_688);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        _697 = &_2;
        _696 = &(*_697);
        _695 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _696) -> [return: bb295, unwind: bb869];
    }

    bb295: {
        StorageDead(_696);
        _694 = [move _695];
        StorageDead(_695);
        _693 = &_694;
        _692 = &(*_693);
        _691 = move _692 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_692);
        _686 = Arguments::<'_>::new_v1(move _687, move _691) -> [return: bb296, unwind: bb869];
    }

    bb296: {
        StorageDead(_691);
        StorageDead(_687);
        _685 = format(move _686) -> [return: bb297, unwind: bb869];
    }

    bb297: {
        StorageDead(_686);
        StorageDead(_697);
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_689);
        _684 = move _685;
        StorageDead(_685);
        _683 = &_684;
        _682 = &(*_683);
        _681 = <String as Deref>::deref(move _682) -> [return: bb298, unwind: bb835];
    }

    bb298: {
        _680 = &(*_681);
        StorageDead(_682);
        _679 = solana_program::log::sol_log(move _680) -> [return: bb299, unwind: bb835];
    }

    bb299: {
        StorageDead(_680);
        drop(_684) -> [return: bb300, unwind: bb869];
    }

    bb300: {
        StorageDead(_684);
        StorageDead(_683);
        StorageDead(_681);
        StorageDead(_679);
        StorageLive(_698);
        _698 = _659;
        _654 = std::result::Result::<(), error::ErrorCode>::Err(move _698);
        StorageDead(_698);
        StorageDead(_659);
        goto -> bb301;
    }

    bb301: {
        StorageDead(_655);
        _653 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _654) -> [return: bb302, unwind: bb869];
    }

    bb302: {
        StorageDead(_654);
        _699 = discriminant(_653);
        switchInt(move _699) -> [0: bb303, 1: bb304, otherwise: bb4];
    }

    bb303: {
        StorageLive(_703);
        _703 = ((_653 as Continue).0: ());
        _652 = _703;
        StorageDead(_703);
        StorageDead(_653);
        StorageDead(_652);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        _710 = &_92;
        _709 = <RefMut<'_, User> as Deref>::deref(move _710) -> [return: bb306, unwind: bb869];
    }

    bb304: {
        StorageLive(_700);
        _700 = ((_653 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_702);
        _702 = _700;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _702) -> [return: bb305, unwind: bb869];
    }

    bb305: {
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_653);
        StorageDead(_652);
        goto -> bb792;
    }

    bb306: {
        _708 = &(*_709);
        StorageDead(_710);
        _707 = User::is_reduce_only(move _708) -> [return: bb307, unwind: bb869];
    }

    bb307: {
        switchInt(move _707) -> [0: bb309, otherwise: bb308];
    }

    bb308: {
        StorageDead(_708);
        StorageDead(_709);
        StorageLive(_712);
        _712 = error::ErrorCode::UserReduceOnly;
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        _1723 = const _;
        _723 = &(*_1723);
        _722 = &(*_723);
        _721 = move _722 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_722);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        _731 = &_712;
        _730 = &(*_731);
        _729 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _730) -> [return: bb310, unwind: bb869];
    }

    bb309: {
        StorageDead(_708);
        StorageDead(_709);
        StorageLive(_711);
        _711 = ();
        _706 = std::result::Result::<(), error::ErrorCode>::Ok(move _711);
        StorageDead(_711);
        goto -> bb322;
    }

    bb310: {
        StorageDead(_730);
        _728 = [move _729];
        StorageDead(_729);
        _727 = &_728;
        _726 = &(*_727);
        _725 = move _726 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_726);
        _720 = Arguments::<'_>::new_v1(move _721, move _725) -> [return: bb311, unwind: bb869];
    }

    bb311: {
        StorageDead(_725);
        StorageDead(_721);
        _719 = format(move _720) -> [return: bb312, unwind: bb869];
    }

    bb312: {
        StorageDead(_720);
        StorageDead(_731);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_723);
        _718 = move _719;
        StorageDead(_719);
        _717 = &_718;
        _716 = &(*_717);
        _715 = <String as Deref>::deref(move _716) -> [return: bb313, unwind: bb834];
    }

    bb313: {
        _714 = &(*_715);
        StorageDead(_716);
        _713 = solana_program::log::sol_log(move _714) -> [return: bb314, unwind: bb834];
    }

    bb314: {
        StorageDead(_714);
        drop(_718) -> [return: bb315, unwind: bb869];
    }

    bb315: {
        StorageDead(_718);
        StorageDead(_717);
        StorageDead(_715);
        StorageDead(_713);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        _1722 = const _;
        _742 = &(*_1722);
        _741 = &(*_742);
        _740 = move _741 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_741);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = &_2;
        _749 = &(*_750);
        _748 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _749) -> [return: bb316, unwind: bb869];
    }

    bb316: {
        StorageDead(_749);
        _747 = [move _748];
        StorageDead(_748);
        _746 = &_747;
        _745 = &(*_746);
        _744 = move _745 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_745);
        _739 = Arguments::<'_>::new_v1(move _740, move _744) -> [return: bb317, unwind: bb869];
    }

    bb317: {
        StorageDead(_744);
        StorageDead(_740);
        _738 = format(move _739) -> [return: bb318, unwind: bb869];
    }

    bb318: {
        StorageDead(_739);
        StorageDead(_750);
        StorageDead(_747);
        StorageDead(_746);
        StorageDead(_742);
        _737 = move _738;
        StorageDead(_738);
        _736 = &_737;
        _735 = &(*_736);
        _734 = <String as Deref>::deref(move _735) -> [return: bb319, unwind: bb833];
    }

    bb319: {
        _733 = &(*_734);
        StorageDead(_735);
        _732 = solana_program::log::sol_log(move _733) -> [return: bb320, unwind: bb833];
    }

    bb320: {
        StorageDead(_733);
        drop(_737) -> [return: bb321, unwind: bb869];
    }

    bb321: {
        StorageDead(_737);
        StorageDead(_736);
        StorageDead(_734);
        StorageDead(_732);
        StorageLive(_751);
        _751 = _712;
        _706 = std::result::Result::<(), error::ErrorCode>::Err(move _751);
        StorageDead(_751);
        StorageDead(_712);
        goto -> bb322;
    }

    bb322: {
        StorageDead(_707);
        _705 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _706) -> [return: bb323, unwind: bb869];
    }

    bb323: {
        StorageDead(_706);
        _752 = discriminant(_705);
        switchInt(move _752) -> [0: bb324, 1: bb325, otherwise: bb4];
    }

    bb324: {
        StorageLive(_756);
        _756 = ((_705 as Continue).0: ());
        _704 = _756;
        StorageDead(_756);
        StorageDead(_705);
        StorageDead(_704);
        _537 = const ();
        goto -> bb328;
    }

    bb325: {
        StorageLive(_753);
        _753 = ((_705 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_755);
        _755 = _753;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _755) -> [return: bb326, unwind: bb869];
    }

    bb326: {
        StorageDead(_755);
        StorageDead(_753);
        StorageDead(_705);
        StorageDead(_704);
        goto -> bb792;
    }

    bb327: {
        _537 = const ();
        goto -> bb328;
    }

    bb328: {
        StorageDead(_538);
        StorageDead(_537);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        _763 = &_162;
        _762 = &(*_763);
        _761 = <RefMut<'_, SpotMarket> as Deref>::deref(move _762) -> [return: bb329, unwind: bb869];
    }

    bb329: {
        _760 = &(*_761);
        StorageDead(_762);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        _1757 = deref_copy (*_361);
        _1860 = (((_1757.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _768 = &(*_1860);
        _767 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _768) -> [return: bb330, unwind: bb869];
    }

    bb330: {
        _766 = &(*_767);
        _765 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _766) -> [return: bb331, unwind: bb869];
    }

    bb331: {
        StorageDead(_768);
        StorageDead(_766);
        _764 = ((*_765).2: u64);
        _759 = validate_spot_market_vault_amount(move _760, move _764) -> [return: bb332, unwind: bb869];
    }

    bb332: {
        StorageDead(_764);
        StorageDead(_760);
        _758 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _759) -> [return: bb333, unwind: bb869];
    }

    bb333: {
        StorageDead(_759);
        _769 = discriminant(_758);
        switchInt(move _769) -> [0: bb334, 1: bb335, otherwise: bb4];
    }

    bb334: {
        StorageLive(_773);
        _773 = ((_758 as Continue).0: i64);
        _757 = _773;
        StorageDead(_773);
        StorageDead(_767);
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_761);
        StorageDead(_758);
        StorageDead(_757);
        StorageLive(_774);
        StorageLive(_775);
        _775 = &mut _162;
        _774 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _775) -> [return: bb337, unwind: bb869];
    }

    bb335: {
        StorageLive(_770);
        _770 = ((_758 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_772);
        _772 = _770;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _772) -> [return: bb336, unwind: bb869];
    }

    bb336: {
        StorageDead(_772);
        StorageDead(_770);
        StorageDead(_767);
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_761);
        StorageDead(_758);
        StorageDead(_757);
        goto -> bb793;
    }

    bb337: {
        StorageDead(_775);
        ((*_774).52: u64) = const 0_u64;
        StorageDead(_774);
        StorageLive(_776);
        StorageLive(_777);
        _777 = &mut _162;
        _776 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _777) -> [return: bb338, unwind: bb869];
    }

    bb338: {
        StorageDead(_777);
        ((*_776).51: u64) = const 0_u64;
        StorageDead(_776);
        StorageLive(_778);
        _1758 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _778 = &mut ((*_1758).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_779);
        _1759 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _779 = &mut ((*_1759).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_780);
        _780 = const 0_u64;
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        _1760 = deref_copy (*_779);
        _1861 = (((_1760.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _787 = &(*_1861);
        _786 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _787) -> [return: bb339, unwind: bb869];
    }

    bb339: {
        _785 = &(*_786);
        _784 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _785) -> [return: bb340, unwind: bb869];
    }

    bb340: {
        StorageDead(_787);
        StorageDead(_785);
        _783 = ((*_784).2: u64);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &_280;
        _789 = <RefMut<'_, SpotMarket> as Deref>::deref(move _790) -> [return: bb341, unwind: bb869];
    }

    bb341: {
        StorageDead(_790);
        _788 = ((*_789).52: u64);
        _782 = Gt(move _783, move _788);
        switchInt(move _782) -> [0: bb381, otherwise: bb342];
    }

    bb342: {
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_786);
        StorageDead(_784);
        StorageDead(_783);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _1761 = deref_copy (*_779);
        _1862 = (((_1761.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _798 = &(*_1862);
        _797 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _798) -> [return: bb343, unwind: bb869];
    }

    bb343: {
        _796 = &(*_797);
        _795 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _796) -> [return: bb344, unwind: bb869];
    }

    bb344: {
        StorageDead(_798);
        StorageDead(_796);
        _794 = ((*_795).2: u64);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        _801 = &_280;
        _800 = <RefMut<'_, SpotMarket> as Deref>::deref(move _801) -> [return: bb345, unwind: bb869];
    }

    bb345: {
        StorageDead(_801);
        _799 = ((*_800).52: u64);
        _793 = <u64 as SafeMath>::safe_sub(move _794, move _799) -> [return: bb346, unwind: bb869];
    }

    bb346: {
        StorageDead(_799);
        StorageDead(_794);
        _792 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _793) -> [return: bb347, unwind: bb869];
    }

    bb347: {
        StorageDead(_793);
        _802 = discriminant(_792);
        switchInt(move _802) -> [0: bb348, 1: bb349, otherwise: bb4];
    }

    bb348: {
        StorageLive(_806);
        _806 = ((_792 as Continue).0: u64);
        _791 = _806;
        StorageDead(_806);
        _780 = move _791;
        StorageDead(_791);
        StorageDead(_800);
        StorageDead(_797);
        StorageDead(_795);
        StorageDead(_792);
        StorageLive(_807);
        _808 = discriminant(_63);
        switchInt(move _808) -> [1: bb352, otherwise: bb351];
    }

    bb349: {
        StorageLive(_803);
        _803 = ((_792 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_805);
        _805 = _803;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _805) -> [return: bb350, unwind: bb869];
    }

    bb350: {
        StorageDead(_805);
        StorageDead(_803);
        StorageDead(_791);
        StorageDead(_800);
        StorageDead(_797);
        StorageDead(_795);
        StorageDead(_792);
        goto -> bb790;
    }

    bb351: {
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        _1762 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _839 = &((*_1762).8: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _838 = &(*_839);
        StorageLive(_840);
        _1763 = deref_copy (*_779);
        _1863 = (((_1763.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _840 = &(*_1863);
        StorageLive(_841);
        _1764 = deref_copy (*_778);
        _1864 = (((_1764.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _841 = &(*_1864);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        _1765 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _845 = &((*_1765).3: anchor_lang::prelude::Signer<'_>);
        _844 = &(*_845);
        _843 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _844) -> [return: bb364, unwind: bb869];
    }

    bb352: {
        StorageLive(_809);
        _809 = move ((_63 as Some).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        _814 = &_809;
        _813 = &(*_814);
        StorageLive(_815);
        _1766 = deref_copy (*_779);
        _1865 = (((_1766.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _815 = &(*_1865);
        StorageLive(_816);
        _1767 = deref_copy (*_778);
        _1866 = (((_1767.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _816 = &(*_1866);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        _1768 = deref_copy (_1.1: &mut instructions::user::Swap<'_>);
        _820 = &((*_1768).3: anchor_lang::prelude::Signer<'_>);
        _819 = &(*_820);
        _818 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _819) -> [return: bb353, unwind: bb869];
    }

    bb353: {
        _817 = &(*_818);
        StorageDead(_819);
        StorageLive(_821);
        _821 = _780;
        StorageLive(_822);
        StorageLive(_823);
        _823 = &_81;
        _822 = &(*_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        _828 = &_280;
        _827 = <RefMut<'_, SpotMarket> as Deref>::deref(move _828) -> [return: bb354, unwind: bb869];
    }

    bb354: {
        _826 = &(*_827);
        StorageDead(_828);
        _825 = SpotMarket::has_transfer_hook(move _826) -> [return: bb355, unwind: bb869];
    }

    bb355: {
        switchInt(move _825) -> [0: bb357, otherwise: bb356];
    }

    bb356: {
        StorageDead(_827);
        StorageDead(_826);
        StorageLive(_829);
        _829 = &mut (*_27);
        _824 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _829);
        StorageDead(_829);
        goto -> bb358;
    }

    bb357: {
        StorageDead(_827);
        StorageDead(_826);
        _824 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb358;
    }

    bb358: {
        StorageDead(_825);
        _812 = receive(move _813, move _815, move _816, move _817, move _821, move _822, move _824) -> [return: bb359, unwind: bb869];
    }

    bb359: {
        StorageDead(_824);
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_817);
        StorageDead(_816);
        StorageDead(_815);
        StorageDead(_813);
        _811 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _812) -> [return: bb360, unwind: bb869];
    }

    bb360: {
        StorageDead(_812);
        _830 = discriminant(_811);
        switchInt(move _830) -> [0: bb361, 1: bb362, otherwise: bb4];
    }

    bb361: {
        StorageLive(_834);
        _834 = ((_811 as Continue).0: ());
        _810 = _834;
        StorageDead(_834);
        _1804 = discriminant(_811);
        StorageDead(_823);
        StorageDead(_820);
        StorageDead(_818);
        StorageDead(_814);
        StorageDead(_811);
        StorageDead(_810);
        _807 = const ();
        StorageDead(_809);
        goto -> bb375;
    }

    bb362: {
        StorageLive(_831);
        _831 = move ((_811 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_833);
        _833 = move _831;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _833) -> [return: bb363, unwind: bb864];
    }

    bb363: {
        StorageDead(_833);
        StorageDead(_831);
        _1822 = discriminant(_811);
        StorageDead(_823);
        StorageDead(_820);
        StorageDead(_818);
        StorageDead(_814);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_809);
        goto -> bb789;
    }

    bb364: {
        _842 = &(*_843);
        StorageDead(_844);
        StorageLive(_846);
        _846 = _780;
        StorageLive(_847);
        StorageLive(_848);
        _848 = &_81;
        _847 = &(*_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        _853 = &_280;
        _852 = <RefMut<'_, SpotMarket> as Deref>::deref(move _853) -> [return: bb365, unwind: bb869];
    }

    bb365: {
        _851 = &(*_852);
        StorageDead(_853);
        _850 = SpotMarket::has_transfer_hook(move _851) -> [return: bb366, unwind: bb869];
    }

    bb366: {
        switchInt(move _850) -> [0: bb368, otherwise: bb367];
    }

    bb367: {
        StorageDead(_852);
        StorageDead(_851);
        StorageLive(_854);
        _854 = &mut (*_27);
        _849 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _854);
        StorageDead(_854);
        goto -> bb369;
    }

    bb368: {
        StorageDead(_852);
        StorageDead(_851);
        _849 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb369;
    }

    bb369: {
        StorageDead(_850);
        _837 = receive(move _838, move _840, move _841, move _842, move _846, move _847, move _849) -> [return: bb370, unwind: bb869];
    }

    bb370: {
        StorageDead(_849);
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_840);
        StorageDead(_838);
        _836 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _837) -> [return: bb371, unwind: bb869];
    }

    bb371: {
        StorageDead(_837);
        _855 = discriminant(_836);
        switchInt(move _855) -> [0: bb372, 1: bb373, otherwise: bb4];
    }

    bb372: {
        StorageLive(_859);
        _859 = ((_836 as Continue).0: ());
        _835 = _859;
        StorageDead(_859);
        _1806 = discriminant(_836);
        StorageDead(_848);
        StorageDead(_845);
        StorageDead(_843);
        StorageDead(_839);
        StorageDead(_836);
        StorageDead(_835);
        _807 = const ();
        goto -> bb375;
    }

    bb373: {
        StorageLive(_856);
        _856 = move ((_836 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_858);
        _858 = move _856;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _858) -> [return: bb374, unwind: bb863];
    }

    bb374: {
        StorageDead(_858);
        StorageDead(_856);
        _1820 = discriminant(_836);
        StorageDead(_848);
        StorageDead(_845);
        StorageDead(_843);
        StorageDead(_839);
        StorageDead(_836);
        StorageDead(_835);
        goto -> bb789;
    }

    bb375: {
        StorageDead(_807);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        _1769 = deref_copy (*_778);
        _1867 = (((_1769.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _863 = &mut (*_1867);
        _862 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _863) -> [return: bb376, unwind: bb869];
    }

    bb376: {
        StorageDead(_863);
        _861 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _862) -> [return: bb377, unwind: bb869];
    }

    bb377: {
        StorageDead(_862);
        _864 = discriminant(_861);
        switchInt(move _864) -> [0: bb378, 1: bb379, otherwise: bb4];
    }

    bb378: {
        StorageLive(_868);
        _868 = ((_861 as Continue).0: ());
        _860 = _868;
        StorageDead(_868);
        _1808 = discriminant(_861);
        StorageDead(_861);
        StorageDead(_860);
        _781 = const ();
        goto -> bb382;
    }

    bb379: {
        StorageLive(_865);
        _865 = move ((_861 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_867);
        _867 = move _865;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _867) -> [return: bb380, unwind: bb862];
    }

    bb380: {
        StorageDead(_867);
        StorageDead(_865);
        _1818 = discriminant(_861);
        StorageDead(_861);
        StorageDead(_860);
        goto -> bb790;
    }

    bb381: {
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_786);
        StorageDead(_784);
        StorageDead(_783);
        _781 = const ();
        goto -> bb382;
    }

    bb382: {
        StorageDead(_782);
        StorageDead(_781);
        StorageLive(_869);
        _870 = discriminant(_4);
        switchInt(move _870) -> [1: bb383, otherwise: bb426];
    }

    bb383: {
        StorageLive(_871);
        _871 = ((_4 as Some).0: u64);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        _878 = _780;
        _877 = <u64 as Cast>::cast::<u128>(move _878) -> [return: bb384, unwind: bb869];
    }

    bb384: {
        StorageDead(_878);
        _876 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _877) -> [return: bb385, unwind: bb869];
    }

    bb385: {
        StorageDead(_877);
        _879 = discriminant(_876);
        switchInt(move _879) -> [0: bb386, 1: bb387, otherwise: bb4];
    }

    bb386: {
        StorageLive(_883);
        _883 = ((_876 as Continue).0: u128);
        _875 = _883;
        StorageDead(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        _887 = _363;
        _886 = <u64 as Cast>::cast::<u128>(move _887) -> [return: bb389, unwind: bb869];
    }

    bb387: {
        StorageLive(_880);
        _880 = ((_876 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_882);
        _882 = _880;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _882) -> [return: bb388, unwind: bb869];
    }

    bb388: {
        StorageDead(_882);
        StorageDead(_880);
        StorageDead(_875);
        StorageDead(_874);
        goto -> bb787;
    }

    bb389: {
        StorageDead(_887);
        _885 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _886) -> [return: bb390, unwind: bb869];
    }

    bb390: {
        StorageDead(_886);
        _888 = discriminant(_885);
        switchInt(move _888) -> [0: bb391, 1: bb392, otherwise: bb4];
    }

    bb391: {
        StorageLive(_892);
        _892 = ((_885 as Continue).0: u128);
        _884 = _892;
        StorageDead(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        _895 = &_280;
        _894 = <RefMut<'_, SpotMarket> as Deref>::deref(move _895) -> [return: bb394, unwind: bb869];
    }

    bb392: {
        StorageLive(_889);
        _889 = ((_885 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_891);
        _891 = _889;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _891) -> [return: bb393, unwind: bb869];
    }

    bb393: {
        StorageDead(_891);
        StorageDead(_889);
        StorageDead(_884);
        StorageDead(_875);
        StorageDead(_874);
        goto -> bb786;
    }

    bb394: {
        StorageDead(_895);
        _893 = ((*_894).41: u32);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        _898 = &_162;
        _897 = <RefMut<'_, SpotMarket> as Deref>::deref(move _898) -> [return: bb395, unwind: bb869];
    }

    bb395: {
        StorageDead(_898);
        _896 = ((*_897).41: u32);
        _874 = calculate_swap_price(move _875, move _884, move _893, move _896) -> [return: bb396, unwind: bb869];
    }

    bb396: {
        StorageDead(_896);
        StorageDead(_893);
        StorageDead(_884);
        StorageDead(_875);
        _873 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _874) -> [return: bb397, unwind: bb869];
    }

    bb397: {
        StorageDead(_874);
        _899 = discriminant(_873);
        switchInt(move _899) -> [0: bb398, 1: bb399, otherwise: bb4];
    }

    bb398: {
        StorageLive(_903);
        _903 = ((_873 as Continue).0: u128);
        _872 = _903;
        StorageDead(_903);
        StorageDead(_897);
        StorageDead(_894);
        StorageDead(_885);
        StorageDead(_876);
        StorageDead(_873);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        _908 = _872;
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        _912 = _871;
        _911 = <u64 as Cast>::cast::<u128>(move _912) -> [return: bb401, unwind: bb869];
    }

    bb399: {
        StorageLive(_900);
        _900 = ((_873 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_902);
        _902 = _900;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _902) -> [return: bb400, unwind: bb869];
    }

    bb400: {
        StorageDead(_902);
        StorageDead(_900);
        StorageDead(_897);
        StorageDead(_894);
        goto -> bb786;
    }

    bb401: {
        StorageDead(_912);
        _910 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _911) -> [return: bb402, unwind: bb869];
    }

    bb402: {
        StorageDead(_911);
        _913 = discriminant(_910);
        switchInt(move _913) -> [0: bb403, 1: bb404, otherwise: bb4];
    }

    bb403: {
        StorageLive(_917);
        _917 = ((_910 as Continue).0: u128);
        _909 = _917;
        StorageDead(_917);
        _907 = Ge(move _908, move _909);
        switchInt(move _907) -> [0: bb407, otherwise: bb406];
    }

    bb404: {
        StorageLive(_914);
        _914 = ((_910 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_916);
        _916 = _914;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _916) -> [return: bb405, unwind: bb869];
    }

    bb405: {
        StorageDead(_916);
        StorageDead(_914);
        StorageDead(_910);
        StorageDead(_909);
        StorageDead(_908);
        StorageDead(_907);
        StorageDead(_906);
        goto -> bb785;
    }

    bb406: {
        StorageDead(_910);
        StorageDead(_909);
        StorageDead(_908);
        StorageLive(_918);
        _918 = ();
        _906 = std::result::Result::<(), error::ErrorCode>::Ok(move _918);
        StorageDead(_918);
        goto -> bb421;
    }

    bb407: {
        StorageDead(_910);
        StorageDead(_909);
        StorageDead(_908);
        StorageLive(_919);
        _919 = error::ErrorCode::SwapLimitPriceBreached;
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _1721 = const _;
        _930 = &(*_1721);
        _929 = &(*_930);
        _928 = move _929 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_929);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        _938 = &_919;
        _937 = &(*_938);
        _936 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _937) -> [return: bb408, unwind: bb869];
    }

    bb408: {
        StorageDead(_937);
        _935 = [move _936];
        StorageDead(_936);
        _934 = &_935;
        _933 = &(*_934);
        _932 = move _933 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_933);
        _927 = Arguments::<'_>::new_v1(move _928, move _932) -> [return: bb409, unwind: bb869];
    }

    bb409: {
        StorageDead(_932);
        StorageDead(_928);
        _926 = format(move _927) -> [return: bb410, unwind: bb869];
    }

    bb410: {
        StorageDead(_927);
        StorageDead(_938);
        StorageDead(_935);
        StorageDead(_934);
        StorageDead(_930);
        _925 = move _926;
        StorageDead(_926);
        _924 = &_925;
        _923 = &(*_924);
        _922 = <String as Deref>::deref(move _923) -> [return: bb411, unwind: bb832];
    }

    bb411: {
        _921 = &(*_922);
        StorageDead(_923);
        _920 = solana_program::log::sol_log(move _921) -> [return: bb412, unwind: bb832];
    }

    bb412: {
        StorageDead(_921);
        drop(_925) -> [return: bb413, unwind: bb869];
    }

    bb413: {
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_922);
        StorageDead(_920);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        StorageLive(_948);
        StorageLive(_949);
        _1720 = const _;
        _949 = &(*_1720);
        _948 = &(*_949);
        _947 = move _948 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_948);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _957 = &_872;
        _956 = &(*_957);
        _955 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _956) -> [return: bb414, unwind: bb869];
    }

    bb414: {
        StorageDead(_956);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        _960 = &_871;
        _959 = &(*_960);
        _958 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _959) -> [return: bb415, unwind: bb869];
    }

    bb415: {
        StorageDead(_959);
        _954 = [move _955, move _958];
        StorageDead(_958);
        StorageDead(_955);
        _953 = &_954;
        _952 = &(*_953);
        _951 = move _952 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_952);
        _946 = Arguments::<'_>::new_v1(move _947, move _951) -> [return: bb416, unwind: bb869];
    }

    bb416: {
        StorageDead(_951);
        StorageDead(_947);
        _945 = format(move _946) -> [return: bb417, unwind: bb869];
    }

    bb417: {
        StorageDead(_946);
        StorageDead(_960);
        StorageDead(_957);
        StorageDead(_954);
        StorageDead(_953);
        StorageDead(_949);
        _944 = move _945;
        StorageDead(_945);
        _943 = &_944;
        _942 = &(*_943);
        _941 = <String as Deref>::deref(move _942) -> [return: bb418, unwind: bb831];
    }

    bb418: {
        _940 = &(*_941);
        StorageDead(_942);
        _939 = solana_program::log::sol_log(move _940) -> [return: bb419, unwind: bb831];
    }

    bb419: {
        StorageDead(_940);
        drop(_944) -> [return: bb420, unwind: bb869];
    }

    bb420: {
        StorageDead(_944);
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_939);
        StorageLive(_961);
        _961 = _919;
        _906 = std::result::Result::<(), error::ErrorCode>::Err(move _961);
        StorageDead(_961);
        StorageDead(_919);
        goto -> bb421;
    }

    bb421: {
        StorageDead(_907);
        _905 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _906) -> [return: bb422, unwind: bb869];
    }

    bb422: {
        StorageDead(_906);
        _962 = discriminant(_905);
        switchInt(move _962) -> [0: bb423, 1: bb424, otherwise: bb4];
    }

    bb423: {
        StorageLive(_966);
        _966 = ((_905 as Continue).0: ());
        _904 = _966;
        StorageDead(_966);
        StorageDead(_905);
        StorageDead(_904);
        _869 = const ();
        StorageDead(_872);
        StorageDead(_871);
        goto -> bb427;
    }

    bb424: {
        StorageLive(_963);
        _963 = ((_905 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_965);
        _965 = _963;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _965) -> [return: bb425, unwind: bb869];
    }

    bb425: {
        StorageDead(_965);
        StorageDead(_963);
        goto -> bb785;
    }

    bb426: {
        _869 = const ();
        goto -> bb427;
    }

    bb427: {
        StorageDead(_869);
        StorageLive(_967);
        _967 = const 0_u64;
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        StorageLive(_971);
        _971 = _780;
        StorageLive(_972);
        _972 = _967;
        _970 = <u64 as SafeMath>::safe_sub(move _971, move _972) -> [return: bb428, unwind: bb869];
    }

    bb428: {
        StorageDead(_972);
        StorageDead(_971);
        _969 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _970) -> [return: bb429, unwind: bb869];
    }

    bb429: {
        StorageDead(_970);
        _973 = discriminant(_969);
        switchInt(move _973) -> [0: bb430, 1: bb431, otherwise: bb4];
    }

    bb430: {
        StorageLive(_977);
        _977 = ((_969 as Continue).0: u64);
        _968 = _977;
        StorageDead(_977);
        StorageDead(_969);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        _981 = &_280;
        _980 = <RefMut<'_, SpotMarket> as Deref>::deref(move _981) -> [return: bb433, unwind: bb869];
    }

    bb431: {
        StorageLive(_974);
        _974 = ((_969 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_976);
        _976 = _974;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _976) -> [return: bb432, unwind: bb869];
    }

    bb432: {
        StorageDead(_976);
        StorageDead(_974);
        StorageDead(_969);
        goto -> bb784;
    }

    bb433: {
        StorageDead(_981);
        _979 = ((*_980).53: u64);
        StorageLive(_982);
        _982 = _967;
        _978 = core::num::<impl u64>::saturating_add(move _979, move _982) -> [return: bb434, unwind: bb869];
    }

    bb434: {
        StorageDead(_982);
        StorageDead(_979);
        StorageLive(_983);
        StorageLive(_984);
        _984 = &mut _280;
        _983 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _984) -> [return: bb435, unwind: bb869];
    }

    bb435: {
        StorageDead(_984);
        ((*_983).53: u64) = move _978;
        StorageDead(_978);
        StorageDead(_983);
        StorageDead(_980);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        _991 = _967;
        _990 = <u64 as Cast>::cast::<i128>(move _991) -> [return: bb436, unwind: bb869];
    }

    bb436: {
        StorageDead(_991);
        _989 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _990) -> [return: bb437, unwind: bb869];
    }

    bb437: {
        StorageDead(_990);
        _992 = discriminant(_989);
        switchInt(move _992) -> [0: bb438, 1: bb439, otherwise: bb4];
    }

    bb438: {
        StorageLive(_996);
        _996 = ((_989 as Continue).0: i128);
        _988 = _996;
        StorageDead(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        _999 = &_280;
        _998 = <RefMut<'_, SpotMarket> as Deref>::deref(move _999) -> [return: bb441, unwind: bb869];
    }

    bb439: {
        StorageLive(_993);
        _993 = ((_989 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_995);
        _995 = _993;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _995) -> [return: bb440, unwind: bb869];
    }

    bb440: {
        StorageDead(_995);
        StorageDead(_993);
        StorageDead(_988);
        StorageDead(_987);
        goto -> bb782;
    }

    bb441: {
        StorageDead(_999);
        _997 = ((*_998).41: u32);
        StorageLive(_1000);
        _1000 = _360;
        _987 = get_token_value(move _988, move _997, move _1000) -> [return: bb442, unwind: bb869];
    }

    bb442: {
        StorageDead(_1000);
        StorageDead(_997);
        StorageDead(_988);
        _986 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _987) -> [return: bb443, unwind: bb869];
    }

    bb443: {
        StorageDead(_987);
        _1001 = discriminant(_986);
        switchInt(move _1001) -> [0: bb444, 1: bb445, otherwise: bb4];
    }

    bb444: {
        StorageLive(_1005);
        _1005 = ((_986 as Continue).0: i128);
        _985 = _1005;
        StorageDead(_1005);
        StorageDead(_998);
        StorageDead(_989);
        StorageDead(_986);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        _1011 = &mut _92;
        _1010 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1011) -> [return: bb447, unwind: bb869];
    }

    bb445: {
        StorageLive(_1002);
        _1002 = ((_986 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1004);
        _1004 = _1002;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1004) -> [return: bb446, unwind: bb869];
    }

    bb446: {
        StorageDead(_1004);
        StorageDead(_1002);
        StorageDead(_998);
        goto -> bb782;
    }

    bb447: {
        _1009 = &mut (*_1010);
        StorageDead(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        _1016 = _985;
        _1015 = <i128 as Cast>::cast::<i64>(move _1016) -> [return: bb448, unwind: bb869];
    }

    bb448: {
        StorageDead(_1016);
        _1014 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1015) -> [return: bb449, unwind: bb869];
    }

    bb449: {
        StorageDead(_1015);
        _1017 = discriminant(_1014);
        switchInt(move _1017) -> [0: bb450, 1: bb451, otherwise: bb4];
    }

    bb450: {
        StorageLive(_1021);
        _1021 = ((_1014 as Continue).0: i64);
        _1013 = _1021;
        StorageDead(_1021);
        _1022 = Eq(_1013, const i64::MIN);
        assert(!move _1022, "attempt to negate `{}`, which would overflow", _1013) -> [success: bb453, unwind: bb869];
    }

    bb451: {
        StorageLive(_1018);
        _1018 = ((_1014 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1020);
        _1020 = _1018;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1020) -> [return: bb452, unwind: bb869];
    }

    bb452: {
        StorageDead(_1020);
        StorageDead(_1018);
        StorageDead(_1013);
        StorageDead(_1012);
        StorageDead(_1009);
        StorageDead(_1008);
        goto -> bb781;
    }

    bb453: {
        _1012 = Neg(move _1013);
        StorageDead(_1013);
        _1008 = User::update_cumulative_spot_fees(move _1009, move _1012) -> [return: bb454, unwind: bb869];
    }

    bb454: {
        StorageDead(_1012);
        StorageDead(_1009);
        _1007 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1008) -> [return: bb455, unwind: bb869];
    }

    bb455: {
        StorageDead(_1008);
        _1023 = discriminant(_1007);
        switchInt(move _1023) -> [0: bb456, 1: bb457, otherwise: bb4];
    }

    bb456: {
        StorageLive(_1027);
        _1027 = ((_1007 as Continue).0: ());
        _1006 = _1027;
        StorageDead(_1027);
        StorageDead(_1014);
        StorageDead(_1010);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageLive(_1028);
        StorageLive(_1029);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        _1033 = &mut _104;
        _1032 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1033) -> [return: bb459, unwind: bb869];
    }

    bb457: {
        StorageLive(_1024);
        _1024 = ((_1007 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1026);
        _1026 = _1024;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1026) -> [return: bb458, unwind: bb869];
    }

    bb458: {
        StorageDead(_1026);
        StorageDead(_1024);
        goto -> bb781;
    }

    bb459: {
        _1031 = &mut (*_1032);
        StorageDead(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        _1037 = _985;
        _1036 = <i128 as Cast>::cast::<u64>(move _1037) -> [return: bb460, unwind: bb869];
    }

    bb460: {
        StorageDead(_1037);
        _1035 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1036) -> [return: bb461, unwind: bb869];
    }

    bb461: {
        StorageDead(_1036);
        _1038 = discriminant(_1035);
        switchInt(move _1038) -> [0: bb462, 1: bb463, otherwise: bb4];
    }

    bb462: {
        StorageLive(_1042);
        _1042 = ((_1035 as Continue).0: u64);
        _1034 = _1042;
        StorageDead(_1042);
        _1030 = UserStats::increment_total_fees(move _1031, move _1034) -> [return: bb465, unwind: bb869];
    }

    bb463: {
        StorageLive(_1039);
        _1039 = ((_1035 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1041);
        _1041 = _1039;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1041) -> [return: bb464, unwind: bb869];
    }

    bb464: {
        StorageDead(_1041);
        StorageDead(_1039);
        StorageDead(_1034);
        StorageDead(_1031);
        StorageDead(_1030);
        goto -> bb780;
    }

    bb465: {
        StorageDead(_1034);
        StorageDead(_1031);
        _1029 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1030) -> [return: bb466, unwind: bb869];
    }

    bb466: {
        StorageDead(_1030);
        _1043 = discriminant(_1029);
        switchInt(move _1043) -> [0: bb467, 1: bb468, otherwise: bb4];
    }

    bb467: {
        StorageLive(_1047);
        _1047 = ((_1029 as Continue).0: ());
        _1028 = _1047;
        StorageDead(_1047);
        StorageDead(_1035);
        StorageDead(_1032);
        StorageDead(_1029);
        StorageDead(_1028);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        _1050 = _967;
        _1049 = Ne(move _1050, const 0_u64);
        switchInt(move _1049) -> [0: bb471, otherwise: bb470];
    }

    bb468: {
        StorageLive(_1044);
        _1044 = ((_1029 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1046);
        _1046 = _1044;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1046) -> [return: bb469, unwind: bb869];
    }

    bb469: {
        StorageDead(_1046);
        StorageDead(_1044);
        goto -> bb780;
    }

    bb470: {
        StorageDead(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        StorageLive(_1056);
        StorageLive(_1057);
        _1057 = _780;
        _1056 = <u64 as Cast>::cast::<i128>(move _1057) -> [return: bb472, unwind: bb869];
    }

    bb471: {
        StorageDead(_1050);
        _1048 = const ();
        goto -> bb495;
    }

    bb472: {
        StorageDead(_1057);
        _1055 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1056) -> [return: bb473, unwind: bb869];
    }

    bb473: {
        StorageDead(_1056);
        _1058 = discriminant(_1055);
        switchInt(move _1058) -> [0: bb474, 1: bb475, otherwise: bb4];
    }

    bb474: {
        StorageLive(_1062);
        _1062 = ((_1055 as Continue).0: i128);
        _1054 = _1062;
        StorageDead(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        _1065 = &_280;
        _1064 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1065) -> [return: bb477, unwind: bb869];
    }

    bb475: {
        StorageLive(_1059);
        _1059 = ((_1055 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1061);
        _1061 = _1059;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1061) -> [return: bb476, unwind: bb869];
    }

    bb476: {
        StorageDead(_1061);
        StorageDead(_1059);
        StorageDead(_1054);
        StorageDead(_1053);
        goto -> bb778;
    }

    bb477: {
        StorageDead(_1065);
        _1063 = ((*_1064).41: u32);
        StorageLive(_1066);
        _1066 = _360;
        _1053 = get_token_value(move _1054, move _1063, move _1066) -> [return: bb478, unwind: bb869];
    }

    bb478: {
        StorageDead(_1066);
        StorageDead(_1063);
        StorageDead(_1054);
        _1052 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1053) -> [return: bb479, unwind: bb869];
    }

    bb479: {
        StorageDead(_1053);
        _1067 = discriminant(_1052);
        switchInt(move _1067) -> [0: bb480, 1: bb481, otherwise: bb4];
    }

    bb480: {
        StorageLive(_1071);
        _1071 = ((_1052 as Continue).0: i128);
        _1051 = _1071;
        StorageDead(_1071);
        StorageDead(_1064);
        StorageDead(_1055);
        StorageDead(_1052);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        StorageLive(_1077);
        _1077 = &mut _104;
        _1076 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1077) -> [return: bb483, unwind: bb869];
    }

    bb481: {
        StorageLive(_1068);
        _1068 = ((_1052 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1070);
        _1070 = _1068;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1070) -> [return: bb482, unwind: bb869];
    }

    bb482: {
        StorageDead(_1070);
        StorageDead(_1068);
        StorageDead(_1064);
        goto -> bb778;
    }

    bb483: {
        _1075 = &mut (*_1076);
        StorageDead(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        _1080 = &_280;
        _1079 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1080) -> [return: bb484, unwind: bb869];
    }

    bb484: {
        StorageDead(_1080);
        _1078 = ((*_1079).58: u8);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        _1084 = _1051;
        _1083 = <i128 as Cast>::cast::<u64>(move _1084) -> [return: bb485, unwind: bb869];
    }

    bb485: {
        StorageDead(_1084);
        _1082 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1083) -> [return: bb486, unwind: bb869];
    }

    bb486: {
        StorageDead(_1083);
        _1085 = discriminant(_1082);
        switchInt(move _1085) -> [0: bb487, 1: bb488, otherwise: bb4];
    }

    bb487: {
        StorageLive(_1089);
        _1089 = ((_1082 as Continue).0: u64);
        _1081 = _1089;
        StorageDead(_1089);
        StorageLive(_1090);
        _1090 = _26;
        _1074 = UserStats::update_taker_volume_30d(move _1075, move _1078, move _1081, move _1090) -> [return: bb490, unwind: bb869];
    }

    bb488: {
        StorageLive(_1086);
        _1086 = ((_1082 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1088);
        _1088 = _1086;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1088) -> [return: bb489, unwind: bb869];
    }

    bb489: {
        StorageDead(_1088);
        StorageDead(_1086);
        StorageDead(_1081);
        StorageDead(_1078);
        StorageDead(_1075);
        StorageDead(_1074);
        goto -> bb777;
    }

    bb490: {
        StorageDead(_1090);
        StorageDead(_1081);
        StorageDead(_1078);
        StorageDead(_1075);
        _1073 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1074) -> [return: bb491, unwind: bb869];
    }

    bb491: {
        StorageDead(_1074);
        _1091 = discriminant(_1073);
        switchInt(move _1091) -> [0: bb492, 1: bb493, otherwise: bb4];
    }

    bb492: {
        StorageLive(_1095);
        _1095 = ((_1073 as Continue).0: ());
        _1072 = _1095;
        StorageDead(_1095);
        StorageDead(_1082);
        StorageDead(_1079);
        StorageDead(_1076);
        StorageDead(_1073);
        StorageDead(_1072);
        _1048 = const ();
        StorageDead(_1051);
        goto -> bb495;
    }

    bb493: {
        StorageLive(_1092);
        _1092 = ((_1073 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1094);
        _1094 = _1092;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1094) -> [return: bb494, unwind: bb869];
    }

    bb494: {
        StorageDead(_1094);
        StorageDead(_1092);
        goto -> bb777;
    }

    bb495: {
        StorageDead(_1049);
        StorageDead(_1048);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        _1100 = _780;
        _1099 = Ne(move _1100, const 0_u64);
        switchInt(move _1099) -> [0: bb497, otherwise: bb496];
    }

    bb496: {
        StorageDead(_1100);
        StorageLive(_1101);
        _1101 = ();
        _1098 = std::result::Result::<(), error::ErrorCode>::Ok(move _1101);
        StorageDead(_1101);
        goto -> bb505;
    }

    bb497: {
        StorageDead(_1100);
        StorageLive(_1102);
        _1102 = error::ErrorCode::InvalidSwap;
        StorageLive(_1103);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        _1719 = const _;
        _1113 = &(*_1719);
        _1112 = &(*_1113);
        _1111 = move _1112 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1112);
        StorageLive(_1115);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        StorageLive(_1120);
        StorageLive(_1121);
        _1121 = &_1102;
        _1120 = &(*_1121);
        _1119 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1120) -> [return: bb498, unwind: bb869];
    }

    bb498: {
        StorageDead(_1120);
        _1118 = [move _1119];
        StorageDead(_1119);
        _1117 = &_1118;
        _1116 = &(*_1117);
        _1115 = move _1116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1116);
        _1110 = Arguments::<'_>::new_v1(move _1111, move _1115) -> [return: bb499, unwind: bb869];
    }

    bb499: {
        StorageDead(_1115);
        StorageDead(_1111);
        _1109 = format(move _1110) -> [return: bb500, unwind: bb869];
    }

    bb500: {
        StorageDead(_1110);
        StorageDead(_1121);
        StorageDead(_1118);
        StorageDead(_1117);
        StorageDead(_1113);
        _1108 = move _1109;
        StorageDead(_1109);
        _1107 = &_1108;
        _1106 = &(*_1107);
        _1105 = <String as Deref>::deref(move _1106) -> [return: bb501, unwind: bb830];
    }

    bb501: {
        _1104 = &(*_1105);
        StorageDead(_1106);
        _1103 = solana_program::log::sol_log(move _1104) -> [return: bb502, unwind: bb830];
    }

    bb502: {
        StorageDead(_1104);
        drop(_1108) -> [return: bb503, unwind: bb869];
    }

    bb503: {
        StorageDead(_1108);
        StorageDead(_1107);
        StorageDead(_1105);
        StorageDead(_1103);
        StorageLive(_1122);
        StorageLive(_1123);
        StorageLive(_1124);
        _1124 = const "amount_out must be greater than 0";
        _1123 = &(*_1124);
        _1122 = solana_program::log::sol_log(move _1123) -> [return: bb504, unwind: bb869];
    }

    bb504: {
        StorageDead(_1123);
        StorageDead(_1124);
        StorageDead(_1122);
        StorageLive(_1125);
        _1125 = _1102;
        _1098 = std::result::Result::<(), error::ErrorCode>::Err(move _1125);
        StorageDead(_1125);
        StorageDead(_1102);
        goto -> bb505;
    }

    bb505: {
        StorageDead(_1099);
        _1097 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1098) -> [return: bb506, unwind: bb869];
    }

    bb506: {
        StorageDead(_1098);
        _1126 = discriminant(_1097);
        switchInt(move _1126) -> [0: bb507, 1: bb508, otherwise: bb4];
    }

    bb507: {
        StorageLive(_1130);
        _1130 = ((_1097 as Continue).0: ());
        _1096 = _1130;
        StorageDead(_1130);
        StorageDead(_1097);
        StorageDead(_1096);
        StorageLive(_1131);
        StorageLive(_1132);
        StorageLive(_1133);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        _1140 = &mut _92;
        _1139 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1140) -> [return: bb510, unwind: bb869];
    }

    bb508: {
        StorageLive(_1127);
        _1127 = ((_1097 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1129);
        _1129 = _1127;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1129) -> [return: bb509, unwind: bb869];
    }

    bb509: {
        StorageDead(_1129);
        StorageDead(_1127);
        StorageDead(_1097);
        StorageDead(_1096);
        goto -> bb783;
    }

    bb510: {
        _1138 = &mut (*_1139);
        StorageDead(_1140);
        StorageLive(_1141);
        _1141 = _3;
        _1137 = User::force_get_spot_position_mut(move _1138, move _1141) -> [return: bb511, unwind: bb869];
    }

    bb511: {
        StorageDead(_1141);
        StorageDead(_1138);
        _1136 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1137) -> [return: bb512, unwind: bb869];
    }

    bb512: {
        StorageDead(_1137);
        _1142 = discriminant(_1136);
        switchInt(move _1142) -> [0: bb513, 1: bb514, otherwise: bb4];
    }

    bb513: {
        StorageLive(_1146);
        _1146 = move ((_1136 as Continue).0: &mut state::user::SpotPosition);
        _1135 = move _1146;
        StorageDead(_1146);
        _1134 = &(*_1135);
        StorageLive(_1147);
        StorageLive(_1148);
        StorageLive(_1149);
        StorageLive(_1150);
        _1150 = &_280;
        _1149 = &(*_1150);
        _1148 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1149) -> [return: bb516, unwind: bb869];
    }

    bb514: {
        StorageLive(_1143);
        _1143 = ((_1136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1145);
        _1145 = _1143;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1145) -> [return: bb515, unwind: bb869];
    }

    bb515: {
        StorageDead(_1145);
        StorageDead(_1143);
        StorageDead(_1134);
        StorageDead(_1133);
        goto -> bb775;
    }

    bb516: {
        _1147 = &(*_1148);
        StorageDead(_1149);
        _1133 = SpotPosition::get_signed_token_amount(move _1134, move _1147) -> [return: bb517, unwind: bb869];
    }

    bb517: {
        StorageDead(_1147);
        StorageDead(_1134);
        _1132 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1133) -> [return: bb518, unwind: bb869];
    }

    bb518: {
        StorageDead(_1133);
        _1151 = discriminant(_1132);
        switchInt(move _1151) -> [0: bb519, 1: bb520, otherwise: bb4];
    }

    bb519: {
        StorageLive(_1155);
        _1155 = ((_1132 as Continue).0: i128);
        _1131 = _1155;
        StorageDead(_1155);
        StorageDead(_1150);
        StorageDead(_1148);
        StorageDead(_1139);
        StorageDead(_1136);
        StorageDead(_1135);
        StorageDead(_1132);
        StorageLive(_1156);
        StorageLive(_1157);
        StorageLive(_1158);
        StorageLive(_1159);
        StorageLive(_1160);
        StorageLive(_1161);
        StorageLive(_1162);
        _1162 = _968;
        _1161 = <u64 as Cast>::cast::<u128>(move _1162) -> [return: bb522, unwind: bb869];
    }

    bb520: {
        StorageLive(_1152);
        _1152 = ((_1132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1154);
        _1154 = _1152;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1154) -> [return: bb521, unwind: bb869];
    }

    bb521: {
        StorageDead(_1154);
        StorageDead(_1152);
        StorageDead(_1150);
        StorageDead(_1148);
        goto -> bb775;
    }

    bb522: {
        StorageDead(_1162);
        _1160 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1161) -> [return: bb523, unwind: bb869];
    }

    bb523: {
        StorageDead(_1161);
        _1163 = discriminant(_1160);
        switchInt(move _1163) -> [0: bb524, 1: bb525, otherwise: bb4];
    }

    bb524: {
        StorageLive(_1167);
        _1167 = ((_1160 as Continue).0: u128);
        _1159 = _1167;
        StorageDead(_1167);
        StorageLive(_1168);
        StorageLive(_1169);
        _1718 = const _;
        _1169 = &(*_1718);
        _1168 = &(*_1169);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        _1174 = &mut _280;
        _1173 = &mut (*_1174);
        _1172 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1173) -> [return: bb527, unwind: bb869];
    }

    bb525: {
        StorageLive(_1164);
        _1164 = ((_1160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1166);
        _1166 = _1164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1166) -> [return: bb526, unwind: bb869];
    }

    bb526: {
        StorageDead(_1166);
        StorageDead(_1164);
        StorageDead(_1159);
        StorageDead(_1158);
        goto -> bb774;
    }

    bb527: {
        _1171 = &mut (*_1172);
        StorageDead(_1173);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        StorageLive(_1181);
        _1181 = &mut _92;
        _1180 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1181) -> [return: bb528, unwind: bb869];
    }

    bb528: {
        _1179 = &mut (*_1180);
        StorageDead(_1181);
        StorageLive(_1182);
        _1182 = _3;
        _1178 = User::force_get_spot_position_mut(move _1179, move _1182) -> [return: bb529, unwind: bb869];
    }

    bb529: {
        StorageDead(_1182);
        StorageDead(_1179);
        _1177 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1178) -> [return: bb530, unwind: bb869];
    }

    bb530: {
        StorageDead(_1178);
        _1183 = discriminant(_1177);
        switchInt(move _1183) -> [0: bb531, 1: bb532, otherwise: bb4];
    }

    bb531: {
        StorageLive(_1187);
        _1187 = move ((_1177 as Continue).0: &mut state::user::SpotPosition);
        _1176 = &mut (*_1187);
        StorageDead(_1187);
        _1175 = &mut (*_1176);
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        StorageLive(_1192);
        _1192 = _780;
        _1191 = <u64 as Cast>::cast::<u128>(move _1192) -> [return: bb534, unwind: bb869];
    }

    bb532: {
        StorageLive(_1184);
        _1184 = ((_1177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1186);
        _1186 = _1184;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1186) -> [return: bb533, unwind: bb869];
    }

    bb533: {
        StorageDead(_1186);
        StorageDead(_1184);
        StorageDead(_1175);
        StorageDead(_1171);
        StorageDead(_1168);
        StorageDead(_1159);
        StorageDead(_1158);
        goto -> bb773;
    }

    bb534: {
        StorageDead(_1192);
        _1190 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1191) -> [return: bb535, unwind: bb869];
    }

    bb535: {
        StorageDead(_1191);
        _1193 = discriminant(_1190);
        switchInt(move _1193) -> [0: bb536, 1: bb537, otherwise: bb4];
    }

    bb536: {
        StorageLive(_1197);
        _1197 = ((_1190 as Continue).0: u128);
        _1189 = _1197;
        StorageDead(_1197);
        _1188 = Option::<u128>::Some(move _1189);
        StorageDead(_1189);
        _1158 = update_spot_balances_and_cumulative_deposits(move _1159, move _1168, move _1171, move _1175, const false, move _1188) -> [return: bb539, unwind: bb869];
    }

    bb537: {
        StorageLive(_1194);
        _1194 = ((_1190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1196);
        _1196 = _1194;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1196) -> [return: bb538, unwind: bb869];
    }

    bb538: {
        StorageDead(_1196);
        StorageDead(_1194);
        StorageDead(_1189);
        StorageDead(_1188);
        StorageDead(_1175);
        StorageDead(_1171);
        StorageDead(_1168);
        StorageDead(_1159);
        StorageDead(_1158);
        goto -> bb772;
    }

    bb539: {
        StorageDead(_1188);
        StorageDead(_1175);
        StorageDead(_1171);
        StorageDead(_1168);
        StorageDead(_1159);
        _1157 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1158) -> [return: bb540, unwind: bb869];
    }

    bb540: {
        StorageDead(_1158);
        _1198 = discriminant(_1157);
        switchInt(move _1198) -> [0: bb541, 1: bb542, otherwise: bb4];
    }

    bb541: {
        StorageLive(_1202);
        _1202 = ((_1157 as Continue).0: ());
        _1156 = _1202;
        StorageDead(_1202);
        StorageDead(_1190);
        StorageDead(_1180);
        StorageDead(_1177);
        StorageDead(_1176);
        StorageDead(_1174);
        StorageDead(_1172);
        StorageDead(_1169);
        StorageDead(_1160);
        StorageDead(_1157);
        StorageDead(_1156);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        StorageLive(_1206);
        StorageLive(_1207);
        StorageLive(_1208);
        StorageLive(_1209);
        StorageLive(_1210);
        StorageLive(_1211);
        StorageLive(_1212);
        _1212 = &mut _92;
        _1211 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1212) -> [return: bb544, unwind: bb869];
    }

    bb542: {
        StorageLive(_1199);
        _1199 = ((_1157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1201);
        _1201 = _1199;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1201) -> [return: bb543, unwind: bb869];
    }

    bb543: {
        StorageDead(_1201);
        StorageDead(_1199);
        goto -> bb772;
    }

    bb544: {
        _1210 = &mut (*_1211);
        StorageDead(_1212);
        StorageLive(_1213);
        _1213 = _3;
        _1209 = User::force_get_spot_position_mut(move _1210, move _1213) -> [return: bb545, unwind: bb869];
    }

    bb545: {
        StorageDead(_1213);
        StorageDead(_1210);
        _1208 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1209) -> [return: bb546, unwind: bb869];
    }

    bb546: {
        StorageDead(_1209);
        _1214 = discriminant(_1208);
        switchInt(move _1214) -> [0: bb547, 1: bb548, otherwise: bb4];
    }

    bb547: {
        StorageLive(_1218);
        _1218 = move ((_1208 as Continue).0: &mut state::user::SpotPosition);
        _1207 = move _1218;
        StorageDead(_1218);
        _1206 = &(*_1207);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        _1222 = &_280;
        _1221 = &(*_1222);
        _1220 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1221) -> [return: bb550, unwind: bb869];
    }

    bb548: {
        StorageLive(_1215);
        _1215 = ((_1208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1217);
        _1217 = _1215;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1217) -> [return: bb549, unwind: bb869];
    }

    bb549: {
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1206);
        StorageDead(_1205);
        goto -> bb770;
    }

    bb550: {
        _1219 = &(*_1220);
        StorageDead(_1221);
        _1205 = SpotPosition::get_signed_token_amount(move _1206, move _1219) -> [return: bb551, unwind: bb869];
    }

    bb551: {
        StorageDead(_1219);
        StorageDead(_1206);
        _1204 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1205) -> [return: bb552, unwind: bb869];
    }

    bb552: {
        StorageDead(_1205);
        _1223 = discriminant(_1204);
        switchInt(move _1223) -> [0: bb553, 1: bb554, otherwise: bb4];
    }

    bb553: {
        StorageLive(_1227);
        _1227 = ((_1204 as Continue).0: i128);
        _1203 = _1227;
        StorageDead(_1227);
        StorageDead(_1222);
        StorageDead(_1220);
        StorageDead(_1211);
        StorageDead(_1208);
        StorageDead(_1207);
        StorageDead(_1204);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        StorageLive(_1231);
        StorageLive(_1232);
        StorageLive(_1233);
        StorageLive(_1234);
        _1234 = _967;
        _1233 = <u64 as Cast>::cast::<u128>(move _1234) -> [return: bb556, unwind: bb869];
    }

    bb554: {
        StorageLive(_1224);
        _1224 = ((_1204 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1226);
        _1226 = _1224;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1226) -> [return: bb555, unwind: bb869];
    }

    bb555: {
        StorageDead(_1226);
        StorageDead(_1224);
        StorageDead(_1222);
        StorageDead(_1220);
        goto -> bb770;
    }

    bb556: {
        StorageDead(_1234);
        _1232 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1233) -> [return: bb557, unwind: bb869];
    }

    bb557: {
        StorageDead(_1233);
        _1235 = discriminant(_1232);
        switchInt(move _1235) -> [0: bb558, 1: bb559, otherwise: bb4];
    }

    bb558: {
        StorageLive(_1239);
        _1239 = ((_1232 as Continue).0: u128);
        _1231 = _1239;
        StorageDead(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        _1717 = const _;
        _1241 = &(*_1717);
        _1240 = &(*_1241);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        _1246 = &mut _280;
        _1245 = &mut (*_1246);
        _1244 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1245) -> [return: bb561, unwind: bb869];
    }

    bb559: {
        StorageLive(_1236);
        _1236 = ((_1232 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1238);
        _1238 = _1236;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1238) -> [return: bb560, unwind: bb869];
    }

    bb560: {
        StorageDead(_1238);
        StorageDead(_1236);
        StorageDead(_1231);
        StorageDead(_1230);
        goto -> bb769;
    }

    bb561: {
        _1243 = &mut (*_1244);
        StorageDead(_1245);
        _1230 = update_revenue_pool_balances(move _1231, move _1240, move _1243) -> [return: bb562, unwind: bb869];
    }

    bb562: {
        StorageDead(_1243);
        StorageDead(_1240);
        StorageDead(_1231);
        _1229 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1230) -> [return: bb563, unwind: bb869];
    }

    bb563: {
        StorageDead(_1230);
        _1247 = discriminant(_1229);
        switchInt(move _1247) -> [0: bb564, 1: bb565, otherwise: bb4];
    }

    bb564: {
        StorageLive(_1251);
        _1251 = ((_1229 as Continue).0: ());
        _1228 = _1251;
        StorageDead(_1251);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageDead(_1241);
        StorageDead(_1232);
        StorageDead(_1229);
        StorageDead(_1228);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        _1254 = _1131;
        _1253 = Lt(move _1254, const 0_i128);
        switchInt(move _1253) -> [0: bb568, otherwise: bb567];
    }

    bb565: {
        StorageLive(_1248);
        _1248 = ((_1229 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1250);
        _1250 = _1248;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1250) -> [return: bb566, unwind: bb869];
    }

    bb566: {
        StorageDead(_1250);
        StorageDead(_1248);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageDead(_1241);
        goto -> bb769;
    }

    bb567: {
        StorageDead(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        _1256 = _1131;
        _1255 = core::num::<impl i128>::unsigned_abs(move _1256) -> [return: bb569, unwind: bb869];
    }

    bb568: {
        StorageDead(_1254);
        _1252 = const false;
        goto -> bb575;
    }

    bb569: {
        StorageDead(_1256);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        _1260 = _968;
        _1259 = <u64 as Cast>::cast::<u128>(move _1260) -> [return: bb570, unwind: bb869];
    }

    bb570: {
        StorageDead(_1260);
        _1258 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1259) -> [return: bb571, unwind: bb869];
    }

    bb571: {
        StorageDead(_1259);
        _1261 = discriminant(_1258);
        switchInt(move _1261) -> [0: bb572, 1: bb573, otherwise: bb4];
    }

    bb572: {
        StorageLive(_1265);
        _1265 = ((_1258 as Continue).0: u128);
        _1257 = _1265;
        StorageDead(_1265);
        _1252 = Ge(move _1255, move _1257);
        StorageDead(_1258);
        StorageDead(_1257);
        StorageDead(_1255);
        goto -> bb575;
    }

    bb573: {
        StorageLive(_1262);
        _1262 = ((_1258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1264);
        _1264 = _1262;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1264) -> [return: bb574, unwind: bb869];
    }

    bb574: {
        StorageDead(_1264);
        StorageDead(_1262);
        StorageDead(_1258);
        StorageDead(_1257);
        StorageDead(_1255);
        StorageDead(_1253);
        goto -> bb768;
    }

    bb575: {
        StorageDead(_1253);
        StorageLive(_1266);
        StorageLive(_1267);
        _1267 = _1252;
        switchInt(move _1267) -> [0: bb576, otherwise: bb641];
    }

    bb576: {
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        StorageLive(_1274);
        _1274 = &_280;
        _1273 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1274) -> [return: bb577, unwind: bb869];
    }

    bb577: {
        _1272 = &(*_1273);
        StorageDead(_1274);
        _1271 = SpotMarket::is_reduce_only(move _1272) -> [return: bb578, unwind: bb869];
    }

    bb578: {
        switchInt(move _1271) -> [0: bb580, otherwise: bb579];
    }

    bb579: {
        StorageDead(_1272);
        StorageDead(_1273);
        StorageLive(_1276);
        _1276 = error::ErrorCode::SpotMarketReduceOnly;
        StorageLive(_1277);
        StorageLive(_1278);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        StorageLive(_1285);
        StorageLive(_1286);
        StorageLive(_1287);
        _1716 = const _;
        _1287 = &(*_1716);
        _1286 = &(*_1287);
        _1285 = move _1286 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1286);
        StorageLive(_1289);
        StorageLive(_1290);
        StorageLive(_1291);
        StorageLive(_1292);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        _1295 = &_1276;
        _1294 = &(*_1295);
        _1293 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1294) -> [return: bb581, unwind: bb869];
    }

    bb580: {
        StorageDead(_1272);
        StorageDead(_1273);
        StorageLive(_1275);
        _1275 = ();
        _1270 = std::result::Result::<(), error::ErrorCode>::Ok(move _1275);
        StorageDead(_1275);
        goto -> bb594;
    }

    bb581: {
        StorageDead(_1294);
        _1292 = [move _1293];
        StorageDead(_1293);
        _1291 = &_1292;
        _1290 = &(*_1291);
        _1289 = move _1290 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1290);
        _1284 = Arguments::<'_>::new_v1(move _1285, move _1289) -> [return: bb582, unwind: bb869];
    }

    bb582: {
        StorageDead(_1289);
        StorageDead(_1285);
        _1283 = format(move _1284) -> [return: bb583, unwind: bb869];
    }

    bb583: {
        StorageDead(_1284);
        StorageDead(_1295);
        StorageDead(_1292);
        StorageDead(_1291);
        StorageDead(_1287);
        _1282 = move _1283;
        StorageDead(_1283);
        _1281 = &_1282;
        _1280 = &(*_1281);
        _1279 = <String as Deref>::deref(move _1280) -> [return: bb584, unwind: bb829];
    }

    bb584: {
        _1278 = &(*_1279);
        StorageDead(_1280);
        _1277 = solana_program::log::sol_log(move _1278) -> [return: bb585, unwind: bb829];
    }

    bb585: {
        StorageDead(_1278);
        drop(_1282) -> [return: bb586, unwind: bb869];
    }

    bb586: {
        StorageDead(_1282);
        StorageDead(_1281);
        StorageDead(_1279);
        StorageDead(_1277);
        StorageLive(_1296);
        StorageLive(_1297);
        StorageLive(_1298);
        StorageLive(_1299);
        StorageLive(_1300);
        StorageLive(_1301);
        StorageLive(_1302);
        StorageLive(_1303);
        StorageLive(_1304);
        StorageLive(_1305);
        StorageLive(_1306);
        _1715 = const _;
        _1306 = &(*_1715);
        _1305 = &(*_1306);
        _1304 = move _1305 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1305);
        StorageLive(_1308);
        StorageLive(_1309);
        StorageLive(_1310);
        StorageLive(_1311);
        StorageLive(_1312);
        StorageLive(_1313);
        StorageLive(_1314);
        _1314 = &_1131;
        _1313 = &(*_1314);
        _1312 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _1313) -> [return: bb587, unwind: bb869];
    }

    bb587: {
        StorageDead(_1313);
        StorageLive(_1315);
        StorageLive(_1316);
        StorageLive(_1317);
        _1317 = &_780;
        _1316 = &(*_1317);
        _1315 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1316) -> [return: bb588, unwind: bb869];
    }

    bb588: {
        StorageDead(_1316);
        _1311 = [move _1312, move _1315];
        StorageDead(_1315);
        StorageDead(_1312);
        _1310 = &_1311;
        _1309 = &(*_1310);
        _1308 = move _1309 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1309);
        _1303 = Arguments::<'_>::new_v1(move _1304, move _1308) -> [return: bb589, unwind: bb869];
    }

    bb589: {
        StorageDead(_1308);
        StorageDead(_1304);
        _1302 = format(move _1303) -> [return: bb590, unwind: bb869];
    }

    bb590: {
        StorageDead(_1303);
        StorageDead(_1317);
        StorageDead(_1314);
        StorageDead(_1311);
        StorageDead(_1310);
        StorageDead(_1306);
        _1301 = move _1302;
        StorageDead(_1302);
        _1300 = &_1301;
        _1299 = &(*_1300);
        _1298 = <String as Deref>::deref(move _1299) -> [return: bb591, unwind: bb828];
    }

    bb591: {
        _1297 = &(*_1298);
        StorageDead(_1299);
        _1296 = solana_program::log::sol_log(move _1297) -> [return: bb592, unwind: bb828];
    }

    bb592: {
        StorageDead(_1297);
        drop(_1301) -> [return: bb593, unwind: bb869];
    }

    bb593: {
        StorageDead(_1301);
        StorageDead(_1300);
        StorageDead(_1298);
        StorageDead(_1296);
        StorageLive(_1318);
        _1318 = _1276;
        _1270 = std::result::Result::<(), error::ErrorCode>::Err(move _1318);
        StorageDead(_1318);
        StorageDead(_1276);
        goto -> bb594;
    }

    bb594: {
        StorageDead(_1271);
        _1269 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1270) -> [return: bb595, unwind: bb869];
    }

    bb595: {
        StorageDead(_1270);
        _1319 = discriminant(_1269);
        switchInt(move _1319) -> [0: bb596, 1: bb597, otherwise: bb4];
    }

    bb596: {
        StorageLive(_1323);
        _1323 = ((_1269 as Continue).0: ());
        _1268 = _1323;
        StorageDead(_1323);
        StorageDead(_1269);
        StorageDead(_1268);
        StorageLive(_1324);
        StorageLive(_1325);
        StorageLive(_1326);
        StorageLive(_1327);
        StorageLive(_1328);
        _1328 = &_5;
        StorageLive(_1329);
        _1714 = const _;
        _1329 = &(*_1714);
        _1327 = <Option<instructions::user::SwapReduceOnly> as PartialEq>::ne(move _1328, move _1329) -> [return: bb599, unwind: bb869];
    }

    bb597: {
        StorageLive(_1320);
        _1320 = ((_1269 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1322);
        _1322 = _1320;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1322) -> [return: bb598, unwind: bb869];
    }

    bb598: {
        StorageDead(_1322);
        StorageDead(_1320);
        StorageDead(_1269);
        StorageDead(_1268);
        goto -> bb767;
    }

    bb599: {
        switchInt(move _1327) -> [0: bb601, otherwise: bb600];
    }

    bb600: {
        StorageDead(_1329);
        StorageDead(_1328);
        StorageLive(_1332);
        _1332 = ();
        _1326 = std::result::Result::<(), error::ErrorCode>::Ok(move _1332);
        StorageDead(_1332);
        goto -> bb615;
    }

    bb601: {
        StorageDead(_1329);
        StorageDead(_1328);
        StorageLive(_1333);
        _1333 = error::ErrorCode::InvalidSwap;
        StorageLive(_1334);
        StorageLive(_1335);
        StorageLive(_1336);
        StorageLive(_1337);
        StorageLive(_1338);
        StorageLive(_1339);
        StorageLive(_1340);
        StorageLive(_1341);
        StorageLive(_1342);
        StorageLive(_1343);
        StorageLive(_1344);
        _1713 = const _;
        _1344 = &(*_1713);
        _1343 = &(*_1344);
        _1342 = move _1343 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1343);
        StorageLive(_1346);
        StorageLive(_1347);
        StorageLive(_1348);
        StorageLive(_1349);
        StorageLive(_1350);
        StorageLive(_1351);
        StorageLive(_1352);
        _1352 = &_1333;
        _1351 = &(*_1352);
        _1350 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1351) -> [return: bb602, unwind: bb869];
    }

    bb602: {
        StorageDead(_1351);
        _1349 = [move _1350];
        StorageDead(_1350);
        _1348 = &_1349;
        _1347 = &(*_1348);
        _1346 = move _1347 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1347);
        _1341 = Arguments::<'_>::new_v1(move _1342, move _1346) -> [return: bb603, unwind: bb869];
    }

    bb603: {
        StorageDead(_1346);
        StorageDead(_1342);
        _1340 = format(move _1341) -> [return: bb604, unwind: bb869];
    }

    bb604: {
        StorageDead(_1341);
        StorageDead(_1352);
        StorageDead(_1349);
        StorageDead(_1348);
        StorageDead(_1344);
        _1339 = move _1340;
        StorageDead(_1340);
        _1338 = &_1339;
        _1337 = &(*_1338);
        _1336 = <String as Deref>::deref(move _1337) -> [return: bb605, unwind: bb827];
    }

    bb605: {
        _1335 = &(*_1336);
        StorageDead(_1337);
        _1334 = solana_program::log::sol_log(move _1335) -> [return: bb606, unwind: bb827];
    }

    bb606: {
        StorageDead(_1335);
        drop(_1339) -> [return: bb607, unwind: bb869];
    }

    bb607: {
        StorageDead(_1339);
        StorageDead(_1338);
        StorageDead(_1336);
        StorageDead(_1334);
        StorageLive(_1353);
        StorageLive(_1354);
        StorageLive(_1355);
        StorageLive(_1356);
        StorageLive(_1357);
        StorageLive(_1358);
        StorageLive(_1359);
        StorageLive(_1360);
        StorageLive(_1361);
        StorageLive(_1362);
        StorageLive(_1363);
        _1712 = const _;
        _1363 = &(*_1712);
        _1362 = &(*_1363);
        _1361 = move _1362 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1362);
        StorageLive(_1365);
        StorageLive(_1366);
        StorageLive(_1367);
        StorageLive(_1368);
        StorageLive(_1369);
        StorageLive(_1370);
        StorageLive(_1371);
        _1371 = &_1131;
        _1370 = &(*_1371);
        _1369 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _1370) -> [return: bb608, unwind: bb869];
    }

    bb608: {
        StorageDead(_1370);
        StorageLive(_1372);
        StorageLive(_1373);
        StorageLive(_1374);
        _1374 = &_780;
        _1373 = &(*_1374);
        _1372 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1373) -> [return: bb609, unwind: bb869];
    }

    bb609: {
        StorageDead(_1373);
        _1368 = [move _1369, move _1372];
        StorageDead(_1372);
        StorageDead(_1369);
        _1367 = &_1368;
        _1366 = &(*_1367);
        _1365 = move _1366 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1366);
        _1360 = Arguments::<'_>::new_v1(move _1361, move _1365) -> [return: bb610, unwind: bb869];
    }

    bb610: {
        StorageDead(_1365);
        StorageDead(_1361);
        _1359 = format(move _1360) -> [return: bb611, unwind: bb869];
    }

    bb611: {
        StorageDead(_1360);
        StorageDead(_1374);
        StorageDead(_1371);
        StorageDead(_1368);
        StorageDead(_1367);
        StorageDead(_1363);
        _1358 = move _1359;
        StorageDead(_1359);
        _1357 = &_1358;
        _1356 = &(*_1357);
        _1355 = <String as Deref>::deref(move _1356) -> [return: bb612, unwind: bb826];
    }

    bb612: {
        _1354 = &(*_1355);
        StorageDead(_1356);
        _1353 = solana_program::log::sol_log(move _1354) -> [return: bb613, unwind: bb826];
    }

    bb613: {
        StorageDead(_1354);
        drop(_1358) -> [return: bb614, unwind: bb869];
    }

    bb614: {
        StorageDead(_1358);
        StorageDead(_1357);
        StorageDead(_1355);
        StorageDead(_1353);
        StorageLive(_1375);
        _1375 = _1333;
        _1326 = std::result::Result::<(), error::ErrorCode>::Err(move _1375);
        StorageDead(_1375);
        StorageDead(_1333);
        goto -> bb615;
    }

    bb615: {
        StorageDead(_1327);
        _1325 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1326) -> [return: bb616, unwind: bb869];
    }

    bb616: {
        StorageDead(_1326);
        _1376 = discriminant(_1325);
        switchInt(move _1376) -> [0: bb617, 1: bb618, otherwise: bb4];
    }

    bb617: {
        StorageLive(_1380);
        _1380 = ((_1325 as Continue).0: ());
        _1324 = _1380;
        StorageDead(_1380);
        StorageDead(_1325);
        StorageDead(_1324);
        StorageLive(_1381);
        StorageLive(_1382);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        StorageLive(_1386);
        StorageLive(_1387);
        _1387 = &_92;
        _1386 = <RefMut<'_, User> as Deref>::deref(move _1387) -> [return: bb620, unwind: bb869];
    }

    bb618: {
        StorageLive(_1377);
        _1377 = ((_1325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1379);
        _1379 = _1377;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1379) -> [return: bb619, unwind: bb869];
    }

    bb619: {
        StorageDead(_1379);
        StorageDead(_1377);
        StorageDead(_1325);
        StorageDead(_1324);
        goto -> bb767;
    }

    bb620: {
        _1385 = &(*_1386);
        StorageDead(_1387);
        _1384 = User::is_reduce_only(move _1385) -> [return: bb621, unwind: bb869];
    }

    bb621: {
        switchInt(move _1384) -> [0: bb623, otherwise: bb622];
    }

    bb622: {
        StorageDead(_1385);
        StorageDead(_1386);
        StorageLive(_1389);
        _1389 = error::ErrorCode::UserReduceOnly;
        StorageLive(_1390);
        StorageLive(_1391);
        StorageLive(_1392);
        StorageLive(_1393);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        StorageLive(_1399);
        StorageLive(_1400);
        _1711 = const _;
        _1400 = &(*_1711);
        _1399 = &(*_1400);
        _1398 = move _1399 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1399);
        StorageLive(_1402);
        StorageLive(_1403);
        StorageLive(_1404);
        StorageLive(_1405);
        StorageLive(_1406);
        StorageLive(_1407);
        StorageLive(_1408);
        _1408 = &_1389;
        _1407 = &(*_1408);
        _1406 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1407) -> [return: bb624, unwind: bb869];
    }

    bb623: {
        StorageDead(_1385);
        StorageDead(_1386);
        StorageLive(_1388);
        _1388 = ();
        _1383 = std::result::Result::<(), error::ErrorCode>::Ok(move _1388);
        StorageDead(_1388);
        goto -> bb636;
    }

    bb624: {
        StorageDead(_1407);
        _1405 = [move _1406];
        StorageDead(_1406);
        _1404 = &_1405;
        _1403 = &(*_1404);
        _1402 = move _1403 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1403);
        _1397 = Arguments::<'_>::new_v1(move _1398, move _1402) -> [return: bb625, unwind: bb869];
    }

    bb625: {
        StorageDead(_1402);
        StorageDead(_1398);
        _1396 = format(move _1397) -> [return: bb626, unwind: bb869];
    }

    bb626: {
        StorageDead(_1397);
        StorageDead(_1408);
        StorageDead(_1405);
        StorageDead(_1404);
        StorageDead(_1400);
        _1395 = move _1396;
        StorageDead(_1396);
        _1394 = &_1395;
        _1393 = &(*_1394);
        _1392 = <String as Deref>::deref(move _1393) -> [return: bb627, unwind: bb825];
    }

    bb627: {
        _1391 = &(*_1392);
        StorageDead(_1393);
        _1390 = solana_program::log::sol_log(move _1391) -> [return: bb628, unwind: bb825];
    }

    bb628: {
        StorageDead(_1391);
        drop(_1395) -> [return: bb629, unwind: bb869];
    }

    bb629: {
        StorageDead(_1395);
        StorageDead(_1394);
        StorageDead(_1392);
        StorageDead(_1390);
        StorageLive(_1409);
        StorageLive(_1410);
        StorageLive(_1411);
        StorageLive(_1412);
        StorageLive(_1413);
        StorageLive(_1414);
        StorageLive(_1415);
        StorageLive(_1416);
        StorageLive(_1417);
        StorageLive(_1418);
        StorageLive(_1419);
        _1710 = const _;
        _1419 = &(*_1710);
        _1418 = &(*_1419);
        _1417 = move _1418 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1418);
        StorageLive(_1421);
        StorageLive(_1422);
        StorageLive(_1423);
        StorageLive(_1424);
        StorageLive(_1425);
        StorageLive(_1426);
        StorageLive(_1427);
        _1427 = &_3;
        _1426 = &(*_1427);
        _1425 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1426) -> [return: bb630, unwind: bb869];
    }

    bb630: {
        StorageDead(_1426);
        _1424 = [move _1425];
        StorageDead(_1425);
        _1423 = &_1424;
        _1422 = &(*_1423);
        _1421 = move _1422 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1422);
        _1416 = Arguments::<'_>::new_v1(move _1417, move _1421) -> [return: bb631, unwind: bb869];
    }

    bb631: {
        StorageDead(_1421);
        StorageDead(_1417);
        _1415 = format(move _1416) -> [return: bb632, unwind: bb869];
    }

    bb632: {
        StorageDead(_1416);
        StorageDead(_1427);
        StorageDead(_1424);
        StorageDead(_1423);
        StorageDead(_1419);
        _1414 = move _1415;
        StorageDead(_1415);
        _1413 = &_1414;
        _1412 = &(*_1413);
        _1411 = <String as Deref>::deref(move _1412) -> [return: bb633, unwind: bb824];
    }

    bb633: {
        _1410 = &(*_1411);
        StorageDead(_1412);
        _1409 = solana_program::log::sol_log(move _1410) -> [return: bb634, unwind: bb824];
    }

    bb634: {
        StorageDead(_1410);
        drop(_1414) -> [return: bb635, unwind: bb869];
    }

    bb635: {
        StorageDead(_1414);
        StorageDead(_1413);
        StorageDead(_1411);
        StorageDead(_1409);
        StorageLive(_1428);
        _1428 = _1389;
        _1383 = std::result::Result::<(), error::ErrorCode>::Err(move _1428);
        StorageDead(_1428);
        StorageDead(_1389);
        goto -> bb636;
    }

    bb636: {
        StorageDead(_1384);
        _1382 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1383) -> [return: bb637, unwind: bb869];
    }

    bb637: {
        StorageDead(_1383);
        _1429 = discriminant(_1382);
        switchInt(move _1429) -> [0: bb638, 1: bb639, otherwise: bb4];
    }

    bb638: {
        StorageLive(_1433);
        _1433 = ((_1382 as Continue).0: ());
        _1381 = _1433;
        StorageDead(_1433);
        StorageDead(_1382);
        StorageDead(_1381);
        _1266 = const ();
        goto -> bb642;
    }

    bb639: {
        StorageLive(_1430);
        _1430 = ((_1382 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1432);
        _1432 = _1430;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1432) -> [return: bb640, unwind: bb869];
    }

    bb640: {
        StorageDead(_1432);
        StorageDead(_1430);
        StorageDead(_1382);
        StorageDead(_1381);
        goto -> bb767;
    }

    bb641: {
        _1266 = const ();
        goto -> bb642;
    }

    bb642: {
        StorageDead(_1267);
        StorageDead(_1266);
        StorageLive(_1434);
        StorageLive(_1435);
        StorageLive(_1436);
        StorageLive(_1437);
        StorageLive(_1438);
        StorageLive(_1439);
        StorageLive(_1440);
        _1440 = &_280;
        _1439 = &(*_1440);
        _1438 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1439) -> [return: bb643, unwind: bb869];
    }

    bb643: {
        _1437 = &(*_1438);
        StorageDead(_1439);
        StorageLive(_1441);
        StorageLive(_1442);
        StorageLive(_1443);
        StorageLive(_1444);
        StorageLive(_1445);
        _1770 = deref_copy (*_778);
        _1868 = (((_1770.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1445 = &(*_1868);
        _1444 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1445) -> [return: bb644, unwind: bb869];
    }

    bb644: {
        _1443 = &(*_1444);
        _1442 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1443) -> [return: bb645, unwind: bb869];
    }

    bb645: {
        StorageDead(_1445);
        StorageDead(_1443);
        _1441 = ((*_1442).2: u64);
        _1436 = validate_spot_market_vault_amount(move _1437, move _1441) -> [return: bb646, unwind: bb869];
    }

    bb646: {
        StorageDead(_1441);
        StorageDead(_1437);
        _1435 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1436) -> [return: bb647, unwind: bb869];
    }

    bb647: {
        StorageDead(_1436);
        _1446 = discriminant(_1435);
        switchInt(move _1446) -> [0: bb648, 1: bb649, otherwise: bb4];
    }

    bb648: {
        StorageLive(_1450);
        _1450 = ((_1435 as Continue).0: i64);
        _1434 = _1450;
        StorageDead(_1450);
        StorageDead(_1444);
        StorageDead(_1442);
        StorageDead(_1440);
        StorageDead(_1438);
        StorageDead(_1435);
        StorageDead(_1434);
        StorageLive(_1451);
        StorageLive(_1452);
        _1452 = &mut _280;
        _1451 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1452) -> [return: bb651, unwind: bb869];
    }

    bb649: {
        StorageLive(_1447);
        _1447 = ((_1435 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1449);
        _1449 = _1447;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1449) -> [return: bb650, unwind: bb869];
    }

    bb650: {
        StorageDead(_1449);
        StorageDead(_1447);
        StorageDead(_1444);
        StorageDead(_1442);
        StorageDead(_1440);
        StorageDead(_1438);
        StorageDead(_1435);
        StorageDead(_1434);
        goto -> bb768;
    }

    bb651: {
        StorageDead(_1452);
        ((*_1451).52: u64) = const 0_u64;
        StorageDead(_1451);
        StorageLive(_1453);
        StorageLive(_1454);
        _1454 = &mut _280;
        _1453 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1454) -> [return: bb652, unwind: bb869];
    }

    bb652: {
        StorageDead(_1454);
        ((*_1453).51: u64) = const 0_u64;
        StorageDead(_1453);
        StorageLive(_1455);
        StorageLive(_1456);
        StorageLive(_1457);
        StorageLive(_1458);
        StorageLive(_1459);
        StorageLive(_1460);
        _1460 = &_280;
        _1459 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1460) -> [return: bb653, unwind: bb869];
    }

    bb653: {
        _1458 = &(*_1459);
        StorageDead(_1460);
        _1457 = SpotMarket::validate_max_token_deposits_and_borrows(move _1458, const false) -> [return: bb654, unwind: bb869];
    }

    bb654: {
        StorageDead(_1458);
        _1456 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1457) -> [return: bb655, unwind: bb869];
    }

    bb655: {
        StorageDead(_1457);
        _1461 = discriminant(_1456);
        switchInt(move _1461) -> [0: bb656, 1: bb657, otherwise: bb4];
    }

    bb656: {
        StorageLive(_1465);
        _1465 = ((_1456 as Continue).0: ());
        _1455 = _1465;
        StorageDead(_1465);
        StorageDead(_1459);
        StorageDead(_1456);
        StorageDead(_1455);
        StorageLive(_1466);
        StorageLive(_1467);
        _1467 = _279;
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        _1470 = &_162;
        _1469 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1470) -> [return: bb659, unwind: bb869];
    }

    bb657: {
        StorageLive(_1462);
        _1462 = ((_1456 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1464);
        _1464 = _1462;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1464) -> [return: bb658, unwind: bb869];
    }

    bb658: {
        StorageDead(_1464);
        StorageDead(_1462);
        StorageDead(_1459);
        StorageDead(_1456);
        StorageDead(_1455);
        goto -> bb768;
    }

    bb659: {
        StorageDead(_1470);
        _1468 = (((*_1469).5: state::oracle::HistoricalOracleData).4: i64);
        _1466 = StrictOraclePrice::new(move _1467, move _1468, const true) -> [return: bb660, unwind: bb869];
    }

    bb660: {
        StorageDead(_1468);
        StorageDead(_1467);
        StorageDead(_1469);
        StorageLive(_1471);
        StorageLive(_1472);
        _1472 = _360;
        StorageLive(_1473);
        StorageLive(_1474);
        StorageLive(_1475);
        _1475 = &_280;
        _1474 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1475) -> [return: bb661, unwind: bb869];
    }

    bb661: {
        StorageDead(_1475);
        _1473 = (((*_1474).5: state::oracle::HistoricalOracleData).4: i64);
        _1471 = StrictOraclePrice::new(move _1472, move _1473, const true) -> [return: bb662, unwind: bb869];
    }

    bb662: {
        StorageDead(_1473);
        StorageDead(_1472);
        StorageDead(_1474);
        StorageLive(_1477);
        StorageLive(_1478);
        StorageLive(_1479);
        StorageLive(_1480);
        StorageLive(_1481);
        StorageLive(_1482);
        StorageLive(_1483);
        _1483 = &_162;
        _1482 = &(*_1483);
        _1481 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1482) -> [return: bb663, unwind: bb869];
    }

    bb663: {
        _1480 = &(*_1481);
        StorageDead(_1482);
        StorageLive(_1484);
        StorageLive(_1485);
        StorageLive(_1486);
        StorageLive(_1487);
        _1487 = &_280;
        _1486 = &(*_1487);
        _1485 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1486) -> [return: bb664, unwind: bb869];
    }

    bb664: {
        _1484 = &(*_1485);
        StorageDead(_1486);
        StorageLive(_1488);
        StorageLive(_1489);
        _1489 = &_1466;
        _1488 = &(*_1489);
        StorageLive(_1490);
        StorageLive(_1491);
        _1491 = &_1471;
        _1490 = &(*_1491);
        StorageLive(_1492);
        _1492 = _445;
        StorageLive(_1493);
        _1493 = _1131;
        StorageLive(_1494);
        _1494 = _498;
        StorageLive(_1495);
        _1495 = _1203;
        StorageLive(_1496);
        _1496 = math::margin::MarginRequirementType::Initial;
        _1479 = select_margin_type_for_swap(move _1480, move _1484, move _1488, move _1490, move _1492, move _1493, move _1494, move _1495, move _1496) -> [return: bb665, unwind: bb869];
    }

    bb665: {
        StorageDead(_1496);
        StorageDead(_1495);
        StorageDead(_1494);
        StorageDead(_1493);
        StorageDead(_1492);
        StorageDead(_1490);
        StorageDead(_1488);
        StorageDead(_1484);
        StorageDead(_1480);
        _1478 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as Try>::branch(move _1479) -> [return: bb666, unwind: bb869];
    }

    bb666: {
        StorageDead(_1479);
        _1497 = discriminant(_1478);
        switchInt(move _1497) -> [0: bb667, 1: bb668, otherwise: bb4];
    }

    bb667: {
        StorageLive(_1501);
        _1501 = ((_1478 as Continue).0: (math::margin::MarginRequirementType, bool));
        _1477 = _1501;
        StorageDead(_1501);
        StorageLive(_1476);
        _1476 = (_1477.0: math::margin::MarginRequirementType);
        StorageDead(_1491);
        StorageDead(_1489);
        StorageDead(_1487);
        StorageDead(_1485);
        StorageDead(_1483);
        StorageDead(_1481);
        StorageDead(_1478);
        StorageDead(_1477);
        StorageLive(_1502);
        StorageLive(_1503);
        _1772 = const false;
        _1503 = move _280;
        _1502 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _1503) -> [return: bb670, unwind: bb869];
    }

    bb668: {
        StorageLive(_1498);
        _1498 = ((_1478 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1500);
        _1500 = _1498;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1500) -> [return: bb669, unwind: bb869];
    }

    bb669: {
        StorageDead(_1500);
        StorageDead(_1498);
        StorageDead(_1491);
        StorageDead(_1489);
        StorageDead(_1487);
        StorageDead(_1485);
        StorageDead(_1483);
        StorageDead(_1481);
        StorageDead(_1478);
        StorageDead(_1477);
        goto -> bb766;
    }

    bb670: {
        StorageDead(_1503);
        StorageDead(_1502);
        StorageLive(_1504);
        StorageLive(_1505);
        _1773 = const false;
        _1505 = move _162;
        _1504 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _1505) -> [return: bb671, unwind: bb869];
    }

    bb671: {
        StorageDead(_1505);
        StorageDead(_1504);
        StorageLive(_1506);
        StorageLive(_1507);
        StorageLive(_1508);
        StorageLive(_1509);
        StorageLive(_1510);
        StorageLive(_1511);
        _1511 = &mut _92;
        _1510 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1511) -> [return: bb672, unwind: bb869];
    }

    bb672: {
        _1509 = &mut (*_1510);
        StorageDead(_1511);
        StorageLive(_1512);
        StorageLive(_1513);
        _1513 = &_31;
        _1512 = &(*_1513);
        StorageLive(_1514);
        StorageLive(_1515);
        _1515 = &_32;
        _1514 = &(*_1515);
        StorageLive(_1516);
        StorageLive(_1517);
        _1517 = &mut _33;
        _1516 = &mut (*_1517);
        StorageLive(_1518);
        _1518 = _1476;
        StorageLive(_1519);
        _1519 = _2;
        StorageLive(_1520);
        StorageLive(_1521);
        StorageLive(_1522);
        StorageLive(_1523);
        _1523 = _445;
        StorageLive(_1524);
        _1524 = _498;
        _1522 = <i128 as SafeMath>::safe_sub(move _1523, move _1524) -> [return: bb673, unwind: bb869];
    }

    bb673: {
        StorageDead(_1524);
        StorageDead(_1523);
        _1521 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1522) -> [return: bb674, unwind: bb869];
    }

    bb674: {
        StorageDead(_1522);
        _1525 = discriminant(_1521);
        switchInt(move _1525) -> [0: bb675, 1: bb676, otherwise: bb4];
    }

    bb675: {
        StorageLive(_1529);
        _1529 = ((_1521 as Continue).0: i128);
        _1520 = _1529;
        StorageDead(_1529);
        StorageLive(_1530);
        _1530 = _3;
        StorageLive(_1531);
        StorageLive(_1532);
        StorageLive(_1533);
        StorageLive(_1534);
        _1534 = _1131;
        StorageLive(_1535);
        _1535 = _1203;
        _1533 = <i128 as SafeMath>::safe_sub(move _1534, move _1535) -> [return: bb678, unwind: bb869];
    }

    bb676: {
        StorageLive(_1526);
        _1526 = ((_1521 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1528);
        _1528 = _1526;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1528) -> [return: bb677, unwind: bb869];
    }

    bb677: {
        StorageDead(_1528);
        StorageDead(_1526);
        StorageDead(_1520);
        StorageDead(_1519);
        StorageDead(_1518);
        StorageDead(_1516);
        StorageDead(_1514);
        StorageDead(_1512);
        StorageDead(_1509);
        StorageDead(_1508);
        goto -> bb764;
    }

    bb678: {
        StorageDead(_1535);
        StorageDead(_1534);
        _1532 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1533) -> [return: bb679, unwind: bb869];
    }

    bb679: {
        StorageDead(_1533);
        _1536 = discriminant(_1532);
        switchInt(move _1536) -> [0: bb680, 1: bb681, otherwise: bb4];
    }

    bb680: {
        StorageLive(_1540);
        _1540 = ((_1532 as Continue).0: i128);
        _1531 = _1540;
        StorageDead(_1540);
        StorageLive(_1541);
        StorageLive(_1542);
        StorageLive(_1543);
        StorageLive(_1544);
        _1544 = &mut _104;
        _1543 = &mut (*_1544);
        _1542 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _1543) -> [return: bb683, unwind: bb869];
    }

    bb681: {
        StorageLive(_1537);
        _1537 = ((_1532 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1539);
        _1539 = _1537;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1539) -> [return: bb682, unwind: bb869];
    }

    bb682: {
        StorageDead(_1539);
        StorageDead(_1537);
        StorageDead(_1531);
        StorageDead(_1530);
        StorageDead(_1520);
        StorageDead(_1519);
        StorageDead(_1518);
        StorageDead(_1516);
        StorageDead(_1514);
        StorageDead(_1512);
        StorageDead(_1509);
        StorageDead(_1508);
        goto -> bb763;
    }

    bb683: {
        _1541 = &mut (*_1542);
        StorageDead(_1543);
        StorageLive(_1545);
        _1545 = _26;
        _1508 = User::meets_withdraw_margin_requirement_and_increment_fuel_bonus_swap(move _1509, move _1512, move _1514, move _1516, move _1518, move _1519, move _1520, move _1530, move _1531, move _1541, move _1545) -> [return: bb684, unwind: bb869];
    }

    bb684: {
        StorageDead(_1545);
        StorageDead(_1541);
        StorageDead(_1531);
        StorageDead(_1530);
        StorageDead(_1520);
        StorageDead(_1519);
        StorageDead(_1518);
        StorageDead(_1516);
        StorageDead(_1514);
        StorageDead(_1512);
        StorageDead(_1509);
        _1507 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1508) -> [return: bb685, unwind: bb869];
    }

    bb685: {
        StorageDead(_1508);
        _1546 = discriminant(_1507);
        switchInt(move _1546) -> [0: bb686, 1: bb687, otherwise: bb4];
    }

    bb686: {
        StorageLive(_1550);
        _1550 = ((_1507 as Continue).0: bool);
        _1506 = _1550;
        StorageDead(_1550);
        StorageDead(_1544);
        StorageDead(_1542);
        StorageDead(_1532);
        StorageDead(_1521);
        StorageDead(_1517);
        StorageDead(_1515);
        StorageDead(_1513);
        StorageDead(_1510);
        StorageDead(_1507);
        StorageDead(_1506);
        StorageLive(_1551);
        StorageLive(_1552);
        StorageLive(_1553);
        StorageLive(_1554);
        _1554 = &mut _92;
        _1553 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1554) -> [return: bb689, unwind: bb869];
    }

    bb687: {
        StorageLive(_1547);
        _1547 = ((_1507 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1549);
        _1549 = _1547;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1549) -> [return: bb688, unwind: bb869];
    }

    bb688: {
        StorageDead(_1549);
        StorageDead(_1547);
        StorageDead(_1544);
        StorageDead(_1542);
        goto -> bb763;
    }

    bb689: {
        _1552 = &mut (*_1553);
        StorageDead(_1554);
        StorageLive(_1555);
        _1555 = _25;
        _1551 = User::update_last_active_slot(move _1552, move _1555) -> [return: bb690, unwind: bb869];
    }

    bb690: {
        StorageDead(_1555);
        StorageDead(_1552);
        StorageDead(_1553);
        StorageDead(_1551);
        StorageLive(_1556);
        StorageLive(_1557);
        _1557 = _26;
        StorageLive(_1558);
        _1558 = _363;
        StorageLive(_1559);
        _1559 = _780;
        StorageLive(_1560);
        _1560 = _3;
        StorageLive(_1561);
        _1561 = _2;
        StorageLive(_1562);
        _1562 = _279;
        StorageLive(_1563);
        _1563 = _360;
        StorageLive(_1564);
        _1564 = _90;
        StorageLive(_1565);
        _1565 = _967;
        _1556 = SwapRecord { ts: move _1557, user: move _1564, amount_out: move _1559, amount_in: move _1558, out_market_index: move _1560, in_market_index: move _1561, out_oracle_price: move _1563, in_oracle_price: move _1562, fee: move _1565 };
        StorageDead(_1565);
        StorageDead(_1564);
        StorageDead(_1563);
        StorageDead(_1562);
        StorageDead(_1561);
        StorageDead(_1560);
        StorageDead(_1559);
        StorageDead(_1558);
        StorageDead(_1557);
        StorageLive(_1566);
        StorageLive(_1567);
        StorageLive(_1568);
        StorageLive(_1569);
        StorageLive(_1570);
        StorageLive(_1571);
        StorageLive(_1572);
        StorageLive(_1573);
        StorageLive(_1574);
        StorageLive(_1575);
        StorageLive(_1576);
        StorageLive(_1577);
        StorageLive(_1578);
        _1578 = &_1556;
        _1577 = &(*_1578);
        _1576 = <SwapRecord as anchor_lang::Event>::data(move _1577) -> [return: bb691, unwind: bb869];
    }

    bb691: {
        StorageDead(_1577);
        _1575 = &_1576;
        _1574 = &(*_1575);
        _1573 = <Vec<u8> as Deref>::deref(move _1574) -> [return: bb692, unwind: bb823];
    }

    bb692: {
        _1572 = &(*_1573);
        StorageDead(_1574);
        _1571 = [move _1572];
        StorageDead(_1572);
        _1570 = &_1571;
        _1569 = &(*_1570);
        _1568 = move _1569 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1569);
        _1567 = solana_program::log::sol_log_data(move _1568) -> [return: bb693, unwind: bb823];
    }

    bb693: {
        StorageDead(_1568);
        drop(_1576) -> [return: bb694, unwind: bb869];
    }

    bb694: {
        StorageDead(_1578);
        StorageDead(_1576);
        StorageDead(_1575);
        StorageDead(_1573);
        StorageDead(_1571);
        StorageDead(_1570);
        StorageDead(_1567);
        _1566 = const ();
        StorageDead(_1566);
        StorageLive(_1579);
        StorageLive(_1580);
        StorageLive(_1581);
        StorageLive(_1582);
        _1582 = &_32;
        StorageLive(_1583);
        StorageLive(_1584);
        _1584 = &_3;
        _1583 = &(*_1584);
        _1581 = SpotMarketMap::<'_>::get_ref_mut(move _1582, move _1583) -> [return: bb695, unwind: bb869];
    }

    bb695: {
        StorageDead(_1583);
        StorageDead(_1582);
        _1580 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1581) -> [return: bb696, unwind: bb869];
    }

    bb696: {
        StorageDead(_1581);
        _1585 = discriminant(_1580);
        switchInt(move _1585) -> [0: bb697, 1: bb698, otherwise: bb4];
    }

    bb697: {
        StorageLive(_1589);
        _1589 = move ((_1580 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1579 = move _1589;
        StorageDead(_1589);
        _1812 = discriminant(_1580);
        StorageDead(_1584);
        StorageDead(_1580);
        StorageLive(_1590);
        StorageLive(_1591);
        StorageLive(_1592);
        StorageLive(_1593);
        StorageLive(_1594);
        StorageLive(_1595);
        StorageLive(_1596);
        _1596 = &_1579;
        _1595 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1596) -> [return: bb700, unwind: bb822];
    }

    bb698: {
        StorageLive(_1586);
        _1586 = ((_1580 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1588);
        _1588 = _1586;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1588) -> [return: bb699, unwind: bb861];
    }

    bb699: {
        StorageDead(_1588);
        StorageDead(_1586);
        _1810 = discriminant(_1580);
        StorageDead(_1584);
        StorageDead(_1580);
        goto -> bb762;
    }

    bb700: {
        StorageDead(_1596);
        _1594 = ((*_1595).52: u64);
        _1593 = Eq(move _1594, const 0_u64);
        switchInt(move _1593) -> [0: bb705, otherwise: bb701];
    }

    bb701: {
        StorageDead(_1595);
        StorageDead(_1594);
        StorageLive(_1597);
        StorageLive(_1598);
        StorageLive(_1599);
        StorageLive(_1600);
        _1600 = &_1579;
        _1599 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1600) -> [return: bb702, unwind: bb822];
    }

    bb702: {
        StorageDead(_1600);
        _1598 = ((*_1599).51: u64);
        _1597 = Eq(move _1598, const 0_u64);
        switchInt(move _1597) -> [0: bb704, otherwise: bb703];
    }

    bb703: {
        StorageDead(_1599);
        StorageDead(_1598);
        StorageLive(_1601);
        _1601 = ();
        _1592 = std::result::Result::<(), error::ErrorCode>::Ok(move _1601);
        StorageDead(_1601);
        goto -> bb714;
    }

    bb704: {
        StorageDead(_1599);
        StorageDead(_1598);
        goto -> bb706;
    }

    bb705: {
        StorageDead(_1595);
        StorageDead(_1594);
        goto -> bb706;
    }

    bb706: {
        StorageLive(_1602);
        _1602 = error::ErrorCode::InvalidSwap;
        StorageLive(_1603);
        StorageLive(_1604);
        StorageLive(_1605);
        StorageLive(_1606);
        StorageLive(_1607);
        StorageLive(_1608);
        StorageLive(_1609);
        StorageLive(_1610);
        StorageLive(_1611);
        StorageLive(_1612);
        StorageLive(_1613);
        _1709 = const _;
        _1613 = &(*_1709);
        _1612 = &(*_1613);
        _1611 = move _1612 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1612);
        StorageLive(_1615);
        StorageLive(_1616);
        StorageLive(_1617);
        StorageLive(_1618);
        StorageLive(_1619);
        StorageLive(_1620);
        StorageLive(_1621);
        _1621 = &_1602;
        _1620 = &(*_1621);
        _1619 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1620) -> [return: bb707, unwind: bb822];
    }

    bb707: {
        StorageDead(_1620);
        _1618 = [move _1619];
        StorageDead(_1619);
        _1617 = &_1618;
        _1616 = &(*_1617);
        _1615 = move _1616 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1616);
        _1610 = Arguments::<'_>::new_v1(move _1611, move _1615) -> [return: bb708, unwind: bb822];
    }

    bb708: {
        StorageDead(_1615);
        StorageDead(_1611);
        _1609 = format(move _1610) -> [return: bb709, unwind: bb822];
    }

    bb709: {
        StorageDead(_1610);
        StorageDead(_1621);
        StorageDead(_1618);
        StorageDead(_1617);
        StorageDead(_1613);
        _1608 = move _1609;
        StorageDead(_1609);
        _1607 = &_1608;
        _1606 = &(*_1607);
        _1605 = <String as Deref>::deref(move _1606) -> [return: bb710, unwind: bb821];
    }

    bb710: {
        _1604 = &(*_1605);
        StorageDead(_1606);
        _1603 = solana_program::log::sol_log(move _1604) -> [return: bb711, unwind: bb821];
    }

    bb711: {
        StorageDead(_1604);
        drop(_1608) -> [return: bb712, unwind: bb822];
    }

    bb712: {
        StorageDead(_1608);
        StorageDead(_1607);
        StorageDead(_1605);
        StorageDead(_1603);
        StorageLive(_1622);
        StorageLive(_1623);
        StorageLive(_1624);
        _1624 = const "end_swap ended in invalid state";
        _1623 = &(*_1624);
        _1622 = solana_program::log::sol_log(move _1623) -> [return: bb713, unwind: bb822];
    }

    bb713: {
        StorageDead(_1623);
        StorageDead(_1624);
        StorageDead(_1622);
        StorageLive(_1625);
        _1625 = _1602;
        _1592 = std::result::Result::<(), error::ErrorCode>::Err(move _1625);
        StorageDead(_1625);
        StorageDead(_1602);
        goto -> bb714;
    }

    bb714: {
        StorageDead(_1597);
        StorageDead(_1593);
        _1591 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1592) -> [return: bb715, unwind: bb822];
    }

    bb715: {
        StorageDead(_1592);
        _1626 = discriminant(_1591);
        switchInt(move _1626) -> [0: bb716, 1: bb717, otherwise: bb4];
    }

    bb716: {
        StorageLive(_1630);
        _1630 = ((_1591 as Continue).0: ());
        _1590 = _1630;
        StorageDead(_1630);
        StorageDead(_1591);
        StorageDead(_1590);
        StorageLive(_1631);
        StorageLive(_1632);
        StorageLive(_1633);
        StorageLive(_1634);
        _1634 = &_32;
        StorageLive(_1635);
        StorageLive(_1636);
        _1636 = &_2;
        _1635 = &(*_1636);
        _1633 = SpotMarketMap::<'_>::get_ref_mut(move _1634, move _1635) -> [return: bb719, unwind: bb822];
    }

    bb717: {
        StorageLive(_1627);
        _1627 = ((_1591 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1629);
        _1629 = _1627;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1629) -> [return: bb718, unwind: bb822];
    }

    bb718: {
        StorageDead(_1629);
        StorageDead(_1627);
        StorageDead(_1591);
        StorageDead(_1590);
        goto -> bb761;
    }

    bb719: {
        StorageDead(_1635);
        StorageDead(_1634);
        _1632 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1633) -> [return: bb720, unwind: bb822];
    }

    bb720: {
        StorageDead(_1633);
        _1637 = discriminant(_1632);
        switchInt(move _1637) -> [0: bb721, 1: bb722, otherwise: bb4];
    }

    bb721: {
        StorageLive(_1641);
        _1641 = move ((_1632 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1631 = move _1641;
        StorageDead(_1641);
        _1816 = discriminant(_1632);
        StorageDead(_1636);
        StorageDead(_1632);
        StorageLive(_1642);
        StorageLive(_1643);
        StorageLive(_1644);
        StorageLive(_1645);
        StorageLive(_1646);
        StorageLive(_1647);
        StorageLive(_1648);
        _1648 = &_1631;
        _1647 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1648) -> [return: bb724, unwind: bb820];
    }

    bb722: {
        StorageLive(_1638);
        _1638 = ((_1632 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1640);
        _1640 = _1638;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1640) -> [return: bb723, unwind: bb860];
    }

    bb723: {
        StorageDead(_1640);
        StorageDead(_1638);
        _1814 = discriminant(_1632);
        StorageDead(_1636);
        StorageDead(_1632);
        goto -> bb760;
    }

    bb724: {
        StorageDead(_1648);
        _1646 = ((*_1647).52: u64);
        _1645 = Eq(move _1646, const 0_u64);
        switchInt(move _1645) -> [0: bb729, otherwise: bb725];
    }

    bb725: {
        StorageDead(_1647);
        StorageDead(_1646);
        StorageLive(_1649);
        StorageLive(_1650);
        StorageLive(_1651);
        StorageLive(_1652);
        _1652 = &_1631;
        _1651 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1652) -> [return: bb726, unwind: bb820];
    }

    bb726: {
        StorageDead(_1652);
        _1650 = ((*_1651).51: u64);
        _1649 = Eq(move _1650, const 0_u64);
        switchInt(move _1649) -> [0: bb728, otherwise: bb727];
    }

    bb727: {
        StorageDead(_1651);
        StorageDead(_1650);
        StorageLive(_1653);
        _1653 = ();
        _1644 = std::result::Result::<(), error::ErrorCode>::Ok(move _1653);
        StorageDead(_1653);
        goto -> bb738;
    }

    bb728: {
        StorageDead(_1651);
        StorageDead(_1650);
        goto -> bb730;
    }

    bb729: {
        StorageDead(_1647);
        StorageDead(_1646);
        goto -> bb730;
    }

    bb730: {
        StorageLive(_1654);
        _1654 = error::ErrorCode::InvalidSwap;
        StorageLive(_1655);
        StorageLive(_1656);
        StorageLive(_1657);
        StorageLive(_1658);
        StorageLive(_1659);
        StorageLive(_1660);
        StorageLive(_1661);
        StorageLive(_1662);
        StorageLive(_1663);
        StorageLive(_1664);
        StorageLive(_1665);
        _1708 = const _;
        _1665 = &(*_1708);
        _1664 = &(*_1665);
        _1663 = move _1664 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1664);
        StorageLive(_1667);
        StorageLive(_1668);
        StorageLive(_1669);
        StorageLive(_1670);
        StorageLive(_1671);
        StorageLive(_1672);
        StorageLive(_1673);
        _1673 = &_1654;
        _1672 = &(*_1673);
        _1671 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1672) -> [return: bb731, unwind: bb820];
    }

    bb731: {
        StorageDead(_1672);
        _1670 = [move _1671];
        StorageDead(_1671);
        _1669 = &_1670;
        _1668 = &(*_1669);
        _1667 = move _1668 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1668);
        _1662 = Arguments::<'_>::new_v1(move _1663, move _1667) -> [return: bb732, unwind: bb820];
    }

    bb732: {
        StorageDead(_1667);
        StorageDead(_1663);
        _1661 = format(move _1662) -> [return: bb733, unwind: bb820];
    }

    bb733: {
        StorageDead(_1662);
        StorageDead(_1673);
        StorageDead(_1670);
        StorageDead(_1669);
        StorageDead(_1665);
        _1660 = move _1661;
        StorageDead(_1661);
        _1659 = &_1660;
        _1658 = &(*_1659);
        _1657 = <String as Deref>::deref(move _1658) -> [return: bb734, unwind: bb819];
    }

    bb734: {
        _1656 = &(*_1657);
        StorageDead(_1658);
        _1655 = solana_program::log::sol_log(move _1656) -> [return: bb735, unwind: bb819];
    }

    bb735: {
        StorageDead(_1656);
        drop(_1660) -> [return: bb736, unwind: bb820];
    }

    bb736: {
        StorageDead(_1660);
        StorageDead(_1659);
        StorageDead(_1657);
        StorageDead(_1655);
        StorageLive(_1674);
        StorageLive(_1675);
        StorageLive(_1676);
        _1676 = const "end_swap ended in invalid state";
        _1675 = &(*_1676);
        _1674 = solana_program::log::sol_log(move _1675) -> [return: bb737, unwind: bb820];
    }

    bb737: {
        StorageDead(_1675);
        StorageDead(_1676);
        StorageDead(_1674);
        StorageLive(_1677);
        _1677 = _1654;
        _1644 = std::result::Result::<(), error::ErrorCode>::Err(move _1677);
        StorageDead(_1677);
        StorageDead(_1654);
        goto -> bb738;
    }

    bb738: {
        StorageDead(_1649);
        StorageDead(_1645);
        _1643 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1644) -> [return: bb739, unwind: bb820];
    }

    bb739: {
        StorageDead(_1644);
        _1678 = discriminant(_1643);
        switchInt(move _1678) -> [0: bb740, 1: bb741, otherwise: bb4];
    }

    bb740: {
        StorageLive(_1682);
        _1682 = ((_1643 as Continue).0: ());
        _1642 = _1682;
        StorageDead(_1682);
        StorageDead(_1643);
        StorageDead(_1642);
        StorageLive(_1683);
        StorageLive(_1684);
        StorageLive(_1685);
        StorageLive(_1686);
        StorageLive(_1687);
        StorageLive(_1688);
        StorageLive(_1689);
        _1689 = &_1631;
        _1688 = &(*_1689);
        _1687 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1688) -> [return: bb743, unwind: bb820];
    }

    bb741: {
        StorageLive(_1679);
        _1679 = ((_1643 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1681);
        _1681 = _1679;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1681) -> [return: bb742, unwind: bb820];
    }

    bb742: {
        StorageDead(_1681);
        StorageDead(_1679);
        StorageDead(_1643);
        StorageDead(_1642);
        goto -> bb759;
    }

    bb743: {
        _1686 = &(*_1687);
        StorageDead(_1688);
        StorageLive(_1690);
        StorageLive(_1691);
        StorageLive(_1692);
        StorageLive(_1693);
        _1693 = &_1579;
        _1692 = &(*_1693);
        _1691 = <RefMut<'_, SpotMarket> as Deref>::deref(move _1692) -> [return: bb744, unwind: bb820];
    }

    bb744: {
        _1690 = &(*_1691);
        StorageDead(_1692);
        StorageLive(_1694);
        _1694 = _363;
        StorageLive(_1695);
        _1695 = _780;
        StorageLive(_1696);
        _1696 = _279;
        StorageLive(_1697);
        _1697 = _360;
        StorageLive(_1698);
        StorageLive(_1699);
        StorageLive(_1700);
        StorageLive(_1701);
        _1771 = deref_copy (*_16);
        _1869 = (((_1771.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1701 = &(*_1869);
        _1700 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1701) -> [return: bb745, unwind: bb820];
    }

    bb745: {
        StorageDead(_1701);
        _1699 = &((*_1700).7: state::state::OracleGuardRails);
        _1698 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1699) -> [return: bb746, unwind: bb820];
    }

    bb746: {
        StorageDead(_1699);
        _1685 = validate_price_bands_for_swap(move _1686, move _1690, move _1694, move _1695, move _1696, move _1697, move _1698) -> [return: bb747, unwind: bb820];
    }

    bb747: {
        StorageDead(_1698);
        StorageDead(_1697);
        StorageDead(_1696);
        StorageDead(_1695);
        StorageDead(_1694);
        StorageDead(_1690);
        StorageDead(_1686);
        _1684 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1685) -> [return: bb748, unwind: bb820];
    }

    bb748: {
        StorageDead(_1685);
        _1702 = discriminant(_1684);
        switchInt(move _1702) -> [0: bb749, 1: bb750, otherwise: bb4];
    }

    bb749: {
        StorageLive(_1706);
        _1706 = ((_1684 as Continue).0: ());
        _1683 = _1706;
        StorageDead(_1706);
        StorageDead(_1700);
        StorageDead(_1693);
        StorageDead(_1691);
        StorageDead(_1689);
        StorageDead(_1687);
        StorageDead(_1684);
        StorageDead(_1683);
        StorageLive(_1707);
        _1707 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1707);
        StorageDead(_1707);
        drop(_1631) -> [return: bb752, unwind: bb822];
    }

    bb750: {
        StorageLive(_1703);
        _1703 = ((_1684 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1705);
        _1705 = _1703;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1705) -> [return: bb751, unwind: bb820];
    }

    bb751: {
        StorageDead(_1705);
        StorageDead(_1703);
        StorageDead(_1700);
        StorageDead(_1693);
        StorageDead(_1691);
        StorageDead(_1689);
        StorageDead(_1687);
        StorageDead(_1684);
        StorageDead(_1683);
        goto -> bb759;
    }

    bb752: {
        StorageDead(_1631);
        drop(_1579) -> [return: bb753, unwind: bb869];
    }

    bb753: {
        StorageDead(_1579);
        StorageDead(_1556);
        StorageDead(_1476);
        StorageDead(_1471);
        StorageDead(_1466);
        StorageDead(_1252);
        StorageDead(_1203);
        StorageDead(_1131);
        StorageDead(_985);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_778);
        StorageDead(_523);
        StorageDead(_498);
        StorageDead(_445);
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_345);
        _1772 = const false;
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_264);
        _1773 = const false;
        StorageDead(_162);
        StorageDead(_116);
        drop(_104) -> [return: bb754, unwind: bb848];
    }

    bb754: {
        StorageDead(_104);
        drop(_92) -> [return: bb755, unwind: bb850];
    }

    bb755: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_81);
        StorageDead(_72);
        StorageDead(_63);
        drop(_33) -> [return: bb756, unwind: bb851];
    }

    bb756: {
        StorageDead(_33);
        drop(_32) -> [return: bb757, unwind: bb852];
    }

    bb757: {
        StorageDead(_32);
        drop(_31) -> [return: bb758, unwind: bb855];
    }

    bb758: {
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb818;
    }

    bb759: {
        drop(_1631) -> [return: bb760, unwind: bb822];
    }

    bb760: {
        StorageDead(_1631);
        goto -> bb761;
    }

    bb761: {
        drop(_1579) -> [return: bb762, unwind: bb869];
    }

    bb762: {
        StorageDead(_1579);
        StorageDead(_1556);
        goto -> bb765;
    }

    bb763: {
        StorageDead(_1532);
        goto -> bb764;
    }

    bb764: {
        StorageDead(_1521);
        StorageDead(_1517);
        StorageDead(_1515);
        StorageDead(_1513);
        StorageDead(_1510);
        StorageDead(_1507);
        StorageDead(_1506);
        goto -> bb765;
    }

    bb765: {
        StorageDead(_1476);
        goto -> bb766;
    }

    bb766: {
        StorageDead(_1471);
        StorageDead(_1466);
        goto -> bb768;
    }

    bb767: {
        StorageDead(_1267);
        StorageDead(_1266);
        goto -> bb768;
    }

    bb768: {
        StorageDead(_1252);
        goto -> bb771;
    }

    bb769: {
        StorageDead(_1232);
        StorageDead(_1229);
        StorageDead(_1228);
        goto -> bb771;
    }

    bb770: {
        StorageDead(_1211);
        StorageDead(_1208);
        StorageDead(_1207);
        StorageDead(_1204);
        goto -> bb771;
    }

    bb771: {
        StorageDead(_1203);
        goto -> bb776;
    }

    bb772: {
        StorageDead(_1190);
        goto -> bb773;
    }

    bb773: {
        StorageDead(_1180);
        StorageDead(_1177);
        StorageDead(_1176);
        StorageDead(_1174);
        StorageDead(_1172);
        StorageDead(_1169);
        goto -> bb774;
    }

    bb774: {
        StorageDead(_1160);
        StorageDead(_1157);
        StorageDead(_1156);
        goto -> bb776;
    }

    bb775: {
        StorageDead(_1139);
        StorageDead(_1136);
        StorageDead(_1135);
        StorageDead(_1132);
        goto -> bb776;
    }

    bb776: {
        StorageDead(_1131);
        goto -> bb783;
    }

    bb777: {
        StorageDead(_1082);
        StorageDead(_1079);
        StorageDead(_1076);
        StorageDead(_1073);
        StorageDead(_1072);
        goto -> bb779;
    }

    bb778: {
        StorageDead(_1055);
        StorageDead(_1052);
        goto -> bb779;
    }

    bb779: {
        StorageDead(_1051);
        StorageDead(_1049);
        StorageDead(_1048);
        goto -> bb783;
    }

    bb780: {
        StorageDead(_1035);
        StorageDead(_1032);
        StorageDead(_1029);
        StorageDead(_1028);
        goto -> bb783;
    }

    bb781: {
        StorageDead(_1014);
        StorageDead(_1010);
        StorageDead(_1007);
        StorageDead(_1006);
        goto -> bb783;
    }

    bb782: {
        StorageDead(_989);
        StorageDead(_986);
        goto -> bb783;
    }

    bb783: {
        StorageDead(_985);
        goto -> bb784;
    }

    bb784: {
        StorageDead(_968);
        StorageDead(_967);
        goto -> bb791;
    }

    bb785: {
        StorageDead(_905);
        StorageDead(_904);
        goto -> bb788;
    }

    bb786: {
        StorageDead(_885);
        goto -> bb787;
    }

    bb787: {
        StorageDead(_876);
        StorageDead(_873);
        goto -> bb788;
    }

    bb788: {
        StorageDead(_872);
        StorageDead(_871);
        StorageDead(_869);
        goto -> bb791;
    }

    bb789: {
        StorageDead(_807);
        goto -> bb790;
    }

    bb790: {
        StorageDead(_782);
        StorageDead(_781);
        goto -> bb791;
    }

    bb791: {
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_778);
        goto -> bb793;
    }

    bb792: {
        StorageDead(_538);
        StorageDead(_537);
        goto -> bb793;
    }

    bb793: {
        StorageDead(_523);
        goto -> bb795;
    }

    bb794: {
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_499);
        goto -> bb795;
    }

    bb795: {
        StorageDead(_498);
        goto -> bb798;
    }

    bb796: {
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_470);
        goto -> bb798;
    }

    bb797: {
        StorageDead(_453);
        StorageDead(_450);
        StorageDead(_449);
        StorageDead(_446);
        goto -> bb798;
    }

    bb798: {
        StorageDead(_445);
        goto -> bb800;
    }

    bb799: {
        StorageDead(_376);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb800;
    }

    bb800: {
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_360);
        goto -> bb801;
    }

    bb801: {
        StorageDead(_345);
        goto -> bb857;
    }

    bb802: {
        _1772 = const false;
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb803;
    }

    bb803: {
        StorageDead(_264);
        goto -> bb859;
    }

    bb804: {
        _1773 = const false;
        StorageDead(_162);
        goto -> bb805;
    }

    bb805: {
        StorageDead(_116);
        drop(_104) -> [return: bb806, unwind: bb848];
    }

    bb806: {
        StorageDead(_104);
        drop(_92) -> [return: bb807, unwind: bb850];
    }

    bb807: {
        StorageDead(_92);
        StorageDead(_90);
        goto -> bb808;
    }

    bb808: {
        StorageDead(_81);
        goto -> bb809;
    }

    bb809: {
        StorageDead(_72);
        goto -> bb810;
    }

    bb810: {
        StorageDead(_63);
        drop(_33) -> [return: bb811, unwind: bb851];
    }

    bb811: {
        StorageDead(_33);
        drop(_32) -> [return: bb812, unwind: bb852];
    }

    bb812: {
        StorageDead(_32);
        drop(_31) -> [return: bb813, unwind: bb855];
    }

    bb813: {
        StorageDead(_31);
        goto -> bb816;
    }

    bb814: {
        StorageDead(_43);
        StorageDead(_42);
        drop(_40) -> [return: bb815, unwind: bb855];
    }

    bb815: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb816;
    }

    bb816: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb817;
    }

    bb817: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb818;
    }

    bb818: {
        return;
    }

    bb819 (cleanup): {
        drop(_1660) -> [return: bb820, unwind terminate(cleanup)];
    }

    bb820 (cleanup): {
        drop(_1631) -> [return: bb822, unwind terminate(cleanup)];
    }

    bb821 (cleanup): {
        drop(_1608) -> [return: bb822, unwind terminate(cleanup)];
    }

    bb822 (cleanup): {
        drop(_1579) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb823 (cleanup): {
        drop(_1576) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb824 (cleanup): {
        drop(_1414) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb825 (cleanup): {
        drop(_1395) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb826 (cleanup): {
        drop(_1358) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb827 (cleanup): {
        drop(_1339) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb828 (cleanup): {
        drop(_1301) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb829 (cleanup): {
        drop(_1282) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb830 (cleanup): {
        drop(_1108) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb831 (cleanup): {
        drop(_944) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb832 (cleanup): {
        drop(_925) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb833 (cleanup): {
        drop(_737) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb834 (cleanup): {
        drop(_718) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb835 (cleanup): {
        drop(_684) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb836 (cleanup): {
        drop(_665) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb837 (cleanup): {
        drop(_629) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb838 (cleanup): {
        drop(_610) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb839 (cleanup): {
        drop(_572) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb840 (cleanup): {
        drop(_553) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb841 (cleanup): {
        drop(_325) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb842 (cleanup): {
        drop(_306) -> [return: bb869, unwind terminate(cleanup)];
    }

    bb843 (cleanup): {
        drop(_241) -> [return: bb872, unwind terminate(cleanup)];
    }

    bb844 (cleanup): {
        drop(_207) -> [return: bb872, unwind terminate(cleanup)];
    }

    bb845 (cleanup): {
        drop(_188) -> [return: bb872, unwind terminate(cleanup)];
    }

    bb846 (cleanup): {
        drop(_142) -> [return: bb847, unwind terminate(cleanup)];
    }

    bb847 (cleanup): {
        drop(_104) -> [return: bb848, unwind terminate(cleanup)];
    }

    bb848 (cleanup): {
        drop(_92) -> [return: bb850, unwind terminate(cleanup)];
    }

    bb849 (cleanup): {
        drop(_40) -> [return: bb850, unwind terminate(cleanup)];
    }

    bb850 (cleanup): {
        drop(_33) -> [return: bb851, unwind terminate(cleanup)];
    }

    bb851 (cleanup): {
        drop(_32) -> [return: bb852, unwind terminate(cleanup)];
    }

    bb852 (cleanup): {
        drop(_31) -> [return: bb855, unwind terminate(cleanup)];
    }

    bb853 (cleanup): {
        drop(_43) -> [return: bb854, unwind terminate(cleanup)];
    }

    bb854 (cleanup): {
        drop(_40) -> [return: bb855, unwind terminate(cleanup)];
    }

    bb855 (cleanup): {
        resume;
    }

    bb856: {
        drop(_280) -> [return: bb802, unwind: bb872];
    }

    bb857: {
        switchInt(_1772) -> [0: bb802, otherwise: bb856];
    }

    bb858: {
        drop(_162) -> [return: bb804, unwind: bb847];
    }

    bb859: {
        switchInt(_1773) -> [0: bb804, otherwise: bb858];
    }

    bb860 (cleanup): {
        _1834 = discriminant(_1632);
        goto -> bb822;
    }

    bb861 (cleanup): {
        _1835 = discriminant(_1580);
        goto -> bb869;
    }

    bb862 (cleanup): {
        _1836 = discriminant(_861);
        goto -> bb869;
    }

    bb863 (cleanup): {
        _1837 = discriminant(_836);
        goto -> bb869;
    }

    bb864 (cleanup): {
        _1838 = discriminant(_811);
        goto -> bb869;
    }

    bb865 (cleanup): {
        _1839 = discriminant(_427);
        goto -> bb869;
    }

    bb866 (cleanup): {
        _1840 = discriminant(_418);
        goto -> bb869;
    }

    bb867 (cleanup): {
        _1841 = discriminant(_393);
        goto -> bb869;
    }

    bb868 (cleanup): {
        drop(_280) -> [return: bb872, unwind terminate(cleanup)];
    }

    bb869 (cleanup): {
        switchInt(_1772) -> [0: bb872, otherwise: bb868];
    }

    bb870 (cleanup): {
        _1842 = discriminant(_281);
        goto -> bb872;
    }

    bb871 (cleanup): {
        drop(_162) -> [return: bb847, unwind terminate(cleanup)];
    }

    bb872 (cleanup): {
        switchInt(_1773) -> [0: bb847, otherwise: bb871];
    }

    bb873 (cleanup): {
        _1843 = discriminant(_163);
        goto -> bb847;
    }

    bb874 (cleanup): {
        _1844 = discriminant(_105);
        goto -> bb848;
    }

    bb875 (cleanup): {
        _1845 = discriminant(_93);
        goto -> bb850;
    }

    bb876 (cleanup): {
        _1847 = discriminant(_35);
        goto -> bb853;
    }

    bb877 (cleanup): {
        _1848 = discriminant(_18);
        goto -> bb855;
    }

    bb878 (cleanup): {
        _1849 = discriminant(_7);
        goto -> bb855;
    }

    bb879: {
        (*_1851) = [move _51, move _52];
        StorageDead(_52);
        StorageDead(_51);
        _46 = move _50;
        _45 = move _46 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageDead(_46);
        _44 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _45) -> [return: bb16, unwind: bb854];
    }
}
