// MIR for `state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::simulate_fills_both_sides::{closure#1}` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::simulate_fills_both_sides::{closure#1}(_1: &{closure@programs/drift/src/state/user.rs:899:29: 901:48}, _2: &StrictOraclePrice, _3: i128, _4: i128) -> std::result::Result<OrderFillSimulation, error::ErrorCode> {
    debug strict_oracle_price => _2;
    debug token_amount => _3;
    debug open_orders => _4;
    debug spot_market => (*((*_1).0: &&state::spot_market::SpotMarket));
    debug token_value => (*((*_1).1: &i128));
    debug calculate_weighted_token_value => (*((*_1).2: &{closure@programs/drift/src/state/user.rs:862:46: 862:85}));
    let mut _0: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let _5: i128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _7: std::result::Result<i128, error::ErrorCode>;
    let mut _8: i128;
    let mut _9: i128;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: i64;
    let mut _13: &state::oracle::StrictOraclePrice;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: i128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _21: std::result::Result<i128, error::ErrorCode>;
    let mut _22: i128;
    let mut _23: i128;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _31: std::result::Result<i128, error::ErrorCode>;
    let mut _32: i128;
    let mut _33: i128;
    let mut _34: i128;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _42: std::result::Result<i128, error::ErrorCode>;
    let mut _43: &{closure@programs/drift/src/state/user.rs:862:46: 862:85};
    let mut _44: (i128, i128);
    let mut _45: i128;
    let mut _46: i128;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _54: std::result::Result<i128, error::ErrorCode>;
    let mut _55: i128;
    let mut _56: i128;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: state::user::OrderFillSimulation;
    let mut _63: i128;
    let mut _64: i128;
    let mut _65: i128;
    let mut _66: i128;
    let mut _67: i128;
    let mut _68: &&state::spot_market::SpotMarket;
    let mut _69: &state::spot_market::SpotMarket;
    let mut _70: &i128;
    let mut _71: &{closure@programs/drift/src/state/user.rs:862:46: 862:85};
    scope 1 {
        debug order_value => _5;
        let _19: i128;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: i128;
        scope 6 {
            debug token_amount_after_fill => _19;
            let _29: i128;
            let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _39: i128;
            scope 11 {
                debug token_value_after_fill => _29;
                let _40: i128;
                let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _51: i128;
                scope 16 {
                    debug weighted_token_value_after_fill => _40;
                    let _52: i128;
                    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _61: i128;
                    scope 21 {
                        debug free_collateral_contribution => _52;
                    }
                    scope 22 {
                        debug residual => _58;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _61;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _48;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _51;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _36;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _39;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _18;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _4;
        _10 = Eq(_9, const i128::MIN);
        assert(!move _10, "attempt to negate `{}`, which would overflow", _9) -> [success: bb1, unwind continue];
    }

    bb1: {
        _8 = Neg(move _9);
        StorageDead(_9);
        StorageLive(_11);
        _68 = deref_copy ((*_1).0: &&state::spot_market::SpotMarket);
        _69 = deref_copy (*_68);
        _11 = ((*_69).41: u32);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_2);
        _12 = StrictOraclePrice::max(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _7 = get_token_value(move _8, move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        _6 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: i128);
        _5 = _18;
        StorageDead(_18);
        StorageDead(_6);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _3;
        StorageLive(_23);
        _23 = _4;
        _21 = <i128 as SafeMath>::safe_add(move _22, move _23) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_15);
        _15 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_6);
        goto -> bb33;
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: i128);
        _19 = _28;
        StorageDead(_28);
        StorageDead(_20);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _70 = deref_copy ((*_1).1: &i128);
        _32 = (*_70);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _5;
        _33 = <i128 as Neg>::neg(move _34) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        goto -> bb32;
    }

    bb14: {
        StorageDead(_34);
        _31 = <i128 as SafeMath>::safe_add(move _32, move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        _35 = discriminant(_30);
        switchInt(move _35) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_39);
        _39 = ((_30 as Continue).0: i128);
        _29 = _39;
        StorageDead(_39);
        StorageDead(_30);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _71 = deref_copy ((*_1).2: &{closure@programs/drift/src/state/user.rs:862:46: 862:85});
        _43 = &(*_71);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _19;
        StorageLive(_46);
        _46 = _29;
        _44 = (move _45, move _46);
        _42 = <{closure@programs/drift/src/state/user.rs:862:46: 862:85} as Fn<(i128, i128)>>::call(move _43, move _44) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_36);
        _36 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_30);
        goto -> bb31;
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        _47 = discriminant(_41);
        switchInt(move _47) -> [0: bb22, 1: bb23, otherwise: bb6];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_41 as Continue).0: i128);
        _40 = _51;
        StorageDead(_51);
        StorageDead(_41);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _40;
        StorageLive(_56);
        _56 = _5;
        _54 = <i128 as SafeMath>::safe_add(move _55, move _56) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_48);
        _48 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_41);
        goto -> bb30;
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        _57 = discriminant(_53);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb6];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_53 as Continue).0: i128);
        _52 = _61;
        StorageDead(_61);
        StorageDead(_53);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _19;
        StorageLive(_64);
        _64 = _5;
        StorageLive(_65);
        _65 = _29;
        StorageLive(_66);
        _66 = _40;
        StorageLive(_67);
        _67 = _52;
        _62 = OrderFillSimulation { token_amount: move _63, orders_value: move _64, token_value: move _65, weighted_token_value: move _66, free_collateral_contribution: move _67 };
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        _0 = std::result::Result::<OrderFillSimulation, error::ErrorCode>::Ok(move _62);
        StorageDead(_62);
        StorageDead(_52);
        StorageDead(_40);
        StorageDead(_29);
        StorageDead(_19);
        StorageDead(_5);
        goto -> bb34;
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_40);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_29);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_19);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_5);
        goto -> bb34;
    }

    bb34: {
        return;
    }
}
