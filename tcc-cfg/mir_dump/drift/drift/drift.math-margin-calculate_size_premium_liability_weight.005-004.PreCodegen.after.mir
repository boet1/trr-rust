// MIR for `calculate_size_premium_liability_weight` after PreCodegen

fn calculate_size_premium_liability_weight(_1: u128, _2: u32, _3: u32, _4: u128) -> std::result::Result<u32, error::ErrorCode> {
    debug size => _1;
    debug imf_factor => _2;
    debug liability_weight => _3;
    debug precision => _4;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: !;
    let mut _9: u32;
    let _10: u128;
    let mut _11: &u128;
    let _12: u128;
    let mut _13: u128;
    let mut _14: u128;
    let mut _15: (u128, bool);
    let mut _16: (u128, bool);
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u32;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u32;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: u128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _41: std::result::Result<u128, error::ErrorCode>;
    let mut _42: u128;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _55: std::result::Result<u32, error::ErrorCode>;
    let mut _56: u128;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _58: std::result::Result<u128, error::ErrorCode>;
    let mut _59: u128;
    let mut _60: u128;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _62: std::result::Result<u128, error::ErrorCode>;
    let mut _63: u128;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _65: std::result::Result<u128, error::ErrorCode>;
    let mut _66: u128;
    let mut _67: u128;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: u128;
    let mut _74: u128;
    let mut _75: (u128, bool);
    let mut _76: u128;
    let mut _77: bool;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: u32;
    let mut _95: u32;
    let mut _96: u32;
    scope 1 {
        debug size_sqrt => _10;
        let _17: u128;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: u128;
        scope 2 {
            debug imf_factor_u128 => _17;
            let _26: u128;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: u128;
            scope 7 {
                debug liability_weight_u128 => _26;
                let _35: u128;
                let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _47: u128;
                let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _52: u128;
                scope 12 {
                    debug liability_weight_numerator => _35;
                    let _53: u32;
                    let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _72: u128;
                    let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _82: u128;
                    let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _87: u128;
                    let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _92: u32;
                    scope 21 {
                        debug size_premium_liability_weight => _53;
                        let _93: u32;
                        scope 38 {
                            debug max_liability_weight => _93;
                        }
                    }
                    scope 22 {
                        debug residual => _69;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _72;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug residual => _79;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _82;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug residual => _84;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _87;
                        scope 33 {
                        }
                    }
                    scope 34 {
                        debug residual => _89;
                        scope 35 {
                        }
                    }
                    scope 36 {
                        debug val => _92;
                        scope 37 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _44;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _47;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug residual => _49;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _52;
                    scope 20 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _22;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _25;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Eq(move _7, const 0_u32);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = _3;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb57;
    }

    bb2: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        _15 = CheckedMul(_14, const 10_u128);
        assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _14, const 10_u128) -> [success: bb3, unwind continue];
    }

    bb3: {
        _13 = move (_15.0: u128);
        StorageDead(_14);
        _16 = CheckedAdd(_13, const 1_u128);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_u128) -> [success: bb4, unwind continue];
    }

    bb4: {
        _12 = move (_16.0: u128);
        _11 = &_12;
        StorageDead(_13);
        _10 = <u128 as Roots>::nth_root(move _11, const 2_u32) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_12);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        _19 = <u32 as Cast>::cast::<u128>(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: u128);
        _17 = _25;
        StorageDead(_25);
        StorageDead(_18);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _3;
        _28 = <u32 as Cast>::cast::<u128>(move _29) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_18);
        goto -> bb56;
    }

    bb12: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        StorageDead(_27);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _26;
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _26;
        _41 = <u128 as SafeMath>::safe_div(move _42, const 5_u128) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        goto -> bb55;
    }

    bb17: {
        StorageDead(_42);
        _40 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: u128);
        _39 = _47;
        StorageDead(_47);
        _37 = <u128 as SafeMath>::safe_sub(move _38, move _39) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb53;
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_37);
        _48 = discriminant(_36);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_36 as Continue).0: u128);
        _35 = _52;
        StorageDead(_52);
        StorageDead(_40);
        StorageDead(_36);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _35;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _10;
        StorageLive(_67);
        _67 = _17;
        _65 = <u128 as SafeMath>::safe_mul(move _66, move _67) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb53;
    }

    bb27: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _65) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_65);
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_72);
        _72 = ((_64 as Continue).0: u128);
        _63 = _72;
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        _75 = CheckedMul(const 100000_u128, const _);
        assert(!move (_75.1: bool), "attempt to compute `{} * {}`, which would overflow", const 100000_u128, const _) -> [success: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_69);
        _69 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb50;
    }

    bb32: {
        _74 = move (_75.0: u128);
        StorageLive(_76);
        _76 = _4;
        _77 = Eq(_76, const 0_u128);
        assert(!move _77, "attempt to divide `{}` by zero", _74) -> [success: bb33, unwind continue];
    }

    bb33: {
        _73 = Div(move _74, move _76);
        StorageDead(_76);
        StorageDead(_74);
        _62 = <u128 as SafeMath>::safe_div(move _63, move _73) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_73);
        StorageDead(_63);
        _61 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_62);
        _78 = discriminant(_61);
        switchInt(move _78) -> [0: bb36, 1: bb37, otherwise: bb9];
    }

    bb36: {
        StorageLive(_82);
        _82 = ((_61 as Continue).0: u128);
        _60 = _82;
        StorageDead(_82);
        _58 = <u128 as SafeMath>::safe_add(move _59, move _60) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_79);
        _79 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_79);
        goto -> bb50;
    }

    bb39: {
        StorageDead(_60);
        StorageDead(_59);
        _57 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _58) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_58);
        _83 = discriminant(_57);
        switchInt(move _83) -> [0: bb41, 1: bb42, otherwise: bb9];
    }

    bb41: {
        StorageLive(_87);
        _87 = ((_57 as Continue).0: u128);
        _56 = _87;
        StorageDead(_87);
        _55 = <u128 as Cast>::cast::<u32>(move _56) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_84);
        _84 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_86);
        StorageDead(_84);
        goto -> bb51;
    }

    bb44: {
        StorageDead(_56);
        _54 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _55) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_55);
        _88 = discriminant(_54);
        switchInt(move _88) -> [0: bb46, 1: bb47, otherwise: bb9];
    }

    bb46: {
        StorageLive(_92);
        _92 = ((_54 as Continue).0: u32);
        _53 = _92;
        StorageDead(_92);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_57);
        StorageDead(_54);
        StorageLive(_93);
        StorageLive(_94);
        _94 = _3;
        StorageLive(_95);
        _95 = _53;
        _93 = std::cmp::max::<u32>(move _94, move _95) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_89);
        _89 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_91);
        StorageDead(_89);
        goto -> bb52;
    }

    bb49: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_96);
        _96 = _93;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _96);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_53);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_10);
        goto -> bb57;
    }

    bb50: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb54;
    }

    bb53: {
        StorageDead(_40);
        StorageDead(_36);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_35);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_26);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_17);
        StorageDead(_10);
        goto -> bb57;
    }

    bb57: {
        return;
    }
}
