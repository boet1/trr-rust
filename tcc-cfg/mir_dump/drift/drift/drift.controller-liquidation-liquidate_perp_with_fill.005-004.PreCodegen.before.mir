// MIR for `controller::liquidation::liquidate_perp_with_fill` before PreCodegen

fn controller::liquidation::liquidate_perp_with_fill(_1: u16, _2: &anchor_lang::prelude::AccountLoader<'_, User>, _3: &anchor_lang::prelude::Pubkey, _4: &anchor_lang::prelude::AccountLoader<'_, UserStats>, _5: &anchor_lang::prelude::AccountLoader<'_, User>, _6: &anchor_lang::prelude::Pubkey, _7: &anchor_lang::prelude::AccountLoader<'_, UserStats>, _8: &UserMap<'_>, _9: &UserStatsMap<'_>, _10: &PerpMarketMap<'_>, _11: &SpotMarketMap<'_>, _12: &mut OracleMap<'_>, _13: &anchor_lang::prelude::Clock, _14: &state::state::State) -> std::result::Result<(), error::ErrorCode> {
    debug market_index => _1;
    debug user_loader => _2;
    debug user_key => _3;
    debug user_stats_loader => _4;
    debug liquidator_loader => _5;
    debug liquidator_key => _6;
    debug liquidator_stats_loader => _7;
    debug makers_and_referrer => _8;
    debug makers_and_referrer_stats => _9;
    debug perp_market_map => _10;
    debug spot_market_map => _11;
    debug oracle_map => _12;
    debug clock => _13;
    debug state => _14;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _15: i64;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _22: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _30: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _31: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _32: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _33: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: u16;
    let mut _43: u8;
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _46: std::result::Result<(), error::ErrorCode>;
    let mut _47: bool;
    let mut _48: &state::user::User;
    let _49: &state::user::User;
    let mut _50: &std::cell::RefMut<'_, state::user::User>;
    let mut _51: ();
    let _53: ();
    let mut _54: &str;
    let _55: &str;
    let mut _56: &std::string::String;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[&str; 2];
    let _63: &[&str; 2];
    let _64: [&str; 2];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let mut _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &error::ErrorCode;
    let _71: &error::ErrorCode;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 1];
    let _82: &[&str; 1];
    let _83: [&str; 1];
    let mut _84: error::ErrorCode;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _90: ();
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _92: std::result::Result<(), error::ErrorCode>;
    let mut _93: bool;
    let mut _94: u8;
    let mut _95: &state::user::User;
    let mut _96: &std::cell::RefMut<'_, state::user::User>;
    let mut _97: ();
    let _99: ();
    let mut _100: &str;
    let _101: &str;
    let mut _102: &std::string::String;
    let _103: &std::string::String;
    let _104: std::string::String;
    let mut _106: std::fmt::Arguments<'_>;
    let mut _107: &[&str];
    let mut _108: &[&str; 2];
    let _109: &[&str; 2];
    let _110: [&str; 2];
    let mut _111: &[core::fmt::rt::Argument<'_>];
    let mut _112: &[core::fmt::rt::Argument<'_>; 1];
    let _113: &[core::fmt::rt::Argument<'_>; 1];
    let _114: [core::fmt::rt::Argument<'_>; 1];
    let mut _115: core::fmt::rt::Argument<'_>;
    let mut _116: &error::ErrorCode;
    let _117: &error::ErrorCode;
    let _118: ();
    let mut _119: &str;
    let _120: &str;
    let mut _121: &std::string::String;
    let _122: &std::string::String;
    let _123: std::string::String;
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let mut _127: &[&str; 2];
    let _128: &[&str; 2];
    let _129: [&str; 2];
    let mut _130: &[core::fmt::rt::Argument<'_>];
    let mut _131: &[core::fmt::rt::Argument<'_>; 1];
    let _132: &[core::fmt::rt::Argument<'_>; 1];
    let _133: [core::fmt::rt::Argument<'_>; 1];
    let mut _134: core::fmt::rt::Argument<'_>;
    let mut _135: &u8;
    let _136: &u8;
    let _137: &state::user::User;
    let mut _138: &std::cell::RefMut<'_, state::user::User>;
    let mut _139: error::ErrorCode;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _145: ();
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _147: std::result::Result<(), error::ErrorCode>;
    let mut _148: bool;
    let mut _149: &state::user::User;
    let _150: &state::user::User;
    let mut _151: &std::cell::RefMut<'_, state::user::User>;
    let mut _152: ();
    let _154: ();
    let mut _155: &str;
    let _156: &str;
    let mut _157: &std::string::String;
    let _158: &std::string::String;
    let _159: std::string::String;
    let mut _161: std::fmt::Arguments<'_>;
    let mut _162: &[&str];
    let mut _163: &[&str; 2];
    let _164: &[&str; 2];
    let _165: [&str; 2];
    let mut _166: &[core::fmt::rt::Argument<'_>];
    let mut _167: &[core::fmt::rt::Argument<'_>; 1];
    let _168: &[core::fmt::rt::Argument<'_>; 1];
    let _169: [core::fmt::rt::Argument<'_>; 1];
    let mut _170: core::fmt::rt::Argument<'_>;
    let mut _171: &error::ErrorCode;
    let _172: &error::ErrorCode;
    let _173: ();
    let mut _174: &str;
    let _175: &str;
    let mut _176: &std::string::String;
    let _177: &std::string::String;
    let _178: std::string::String;
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[&str; 1];
    let _183: &[&str; 1];
    let _184: [&str; 1];
    let mut _185: error::ErrorCode;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _193: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _194: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _195: &u16;
    let _196: &u16;
    let mut _197: isize;
    let mut _199: !;
    let mut _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _202: ();
    let mut _203: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _204: std::result::Result<(), error::ErrorCode>;
    let mut _205: bool;
    let mut _206: &state::perp_market::PerpMarket;
    let _207: &state::perp_market::PerpMarket;
    let mut _208: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _209: state::paused_operations::PerpOperation;
    let mut _210: ();
    let _212: ();
    let mut _213: &str;
    let _214: &str;
    let mut _215: &std::string::String;
    let _216: &std::string::String;
    let _217: std::string::String;
    let mut _219: std::fmt::Arguments<'_>;
    let mut _220: &[&str];
    let mut _221: &[&str; 2];
    let _222: &[&str; 2];
    let _223: [&str; 2];
    let mut _224: &[core::fmt::rt::Argument<'_>];
    let mut _225: &[core::fmt::rt::Argument<'_>; 1];
    let _226: &[core::fmt::rt::Argument<'_>; 1];
    let _227: [core::fmt::rt::Argument<'_>; 1];
    let mut _228: core::fmt::rt::Argument<'_>;
    let mut _229: &error::ErrorCode;
    let _230: &error::ErrorCode;
    let _231: ();
    let mut _232: &str;
    let _233: &str;
    let mut _234: &std::string::String;
    let _235: &std::string::String;
    let _236: std::string::String;
    let mut _238: std::fmt::Arguments<'_>;
    let mut _239: &[&str];
    let mut _240: &[&str; 1];
    let _241: &[&str; 1];
    let _242: [&str; 1];
    let mut _243: &[core::fmt::rt::Argument<'_>];
    let mut _244: &[core::fmt::rt::Argument<'_>; 1];
    let _245: &[core::fmt::rt::Argument<'_>; 1];
    let _246: [core::fmt::rt::Argument<'_>; 1];
    let mut _247: core::fmt::rt::Argument<'_>;
    let mut _248: &u16;
    let _249: &u16;
    let mut _250: error::ErrorCode;
    let mut _251: isize;
    let mut _253: !;
    let mut _254: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _256: ();
    let mut _257: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _258: ();
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _260: std::result::Result<(), error::ErrorCode>;
    let mut _261: &mut state::user::User;
    let mut _262: &mut state::user::User;
    let mut _263: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _264: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _265: &anchor_lang::prelude::Pubkey;
    let mut _266: &mut state::perp_market::PerpMarket;
    let mut _267: &mut state::perp_market::PerpMarket;
    let mut _268: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _269: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _271: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _272: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _273: &u16;
    let _274: &u16;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _280: i64;
    let mut _281: isize;
    let mut _283: !;
    let mut _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _286: ();
    let mut _287: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _288: std::result::Result<(), error::ErrorCode>;
    let mut _289: &mut state::user::User;
    let mut _290: &mut state::user::User;
    let mut _291: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _292: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _293: &anchor_lang::prelude::Pubkey;
    let mut _294: &mut state::perp_market::PerpMarket;
    let mut _295: &mut state::perp_market::PerpMarket;
    let mut _296: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _297: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _299: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _300: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _301: &u16;
    let _302: &u16;
    let mut _303: isize;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _308: i64;
    let mut _309: isize;
    let mut _311: !;
    let mut _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _315: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _316: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _317: &state::user::User;
    let _318: &state::user::User;
    let mut _319: &std::cell::RefMut<'_, state::user::User>;
    let _320: &std::cell::RefMut<'_, state::user::User>;
    let mut _321: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _322: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _323: &mut state::oracle_map::OracleMap<'_>;
    let mut _324: state::margin_calculation::MarginContext;
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _326: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _327: state::margin_calculation::MarginContext;
    let mut _328: u32;
    let mut _329: state::margin_calculation::MarketIdentifier;
    let mut _330: u16;
    let mut _331: isize;
    let mut _333: !;
    let mut _334: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _336: isize;
    let mut _338: !;
    let mut _339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _341: ();
    let mut _342: bool;
    let mut _343: &state::user::User;
    let _344: &state::user::User;
    let mut _345: &std::cell::RefMut<'_, state::user::User>;
    let mut _346: bool;
    let mut _347: &state::margin_calculation::MarginCalculation;
    let mut _348: !;
    let _349: ();
    let mut _350: &str;
    let _351: &str;
    let mut _352: &std::string::String;
    let _353: &std::string::String;
    let _354: std::string::String;
    let mut _356: std::fmt::Arguments<'_>;
    let mut _357: &[&str];
    let mut _358: &[&str; 1];
    let _359: &[&str; 1];
    let _360: [&str; 1];
    let mut _361: &[core::fmt::rt::Argument<'_>];
    let mut _362: &[core::fmt::rt::Argument<'_>; 1];
    let _363: &[core::fmt::rt::Argument<'_>; 1];
    let _364: [core::fmt::rt::Argument<'_>; 1];
    let mut _365: core::fmt::rt::Argument<'_>;
    let mut _366: &state::margin_calculation::MarginCalculation;
    let _367: &state::margin_calculation::MarginCalculation;
    let mut _368: error::ErrorCode;
    let mut _369: bool;
    let mut _370: &state::user::User;
    let _371: &state::user::User;
    let mut _372: &std::cell::RefMut<'_, state::user::User>;
    let mut _373: bool;
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _375: std::result::Result<bool, error::ErrorCode>;
    let mut _376: &state::margin_calculation::MarginCalculation;
    let mut _377: isize;
    let mut _379: !;
    let mut _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _382: !;
    let _383: ();
    let mut _384: &mut state::user::User;
    let mut _385: &mut state::user::User;
    let mut _386: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _387: ();
    let _388: &state::user::PerpPosition;
    let mut _389: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _390: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _391: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _392: &state::user::User;
    let _393: &state::user::User;
    let mut _394: &std::cell::RefMut<'_, state::user::User>;
    let mut _395: u16;
    let mut _396: {closure@programs/drift/src/controller/liquidation.rs:799:50: 799:53};
    let mut _397: &u16;
    let mut _398: isize;
    let mut _400: !;
    let mut _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _404: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _405: std::result::Result<u16, error::ErrorCode>;
    let mut _406: &mut state::user::User;
    let mut _407: &mut state::user::User;
    let mut _408: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _409: u64;
    let mut _410: isize;
    let mut _412: !;
    let mut _413: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _417: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _418: std::result::Result<usize, error::ErrorCode>;
    let mut _419: &[state::user::PerpPosition; 8];
    let _420: &[state::user::PerpPosition; 8];
    let _421: &state::user::User;
    let mut _422: &std::cell::RefMut<'_, state::user::User>;
    let mut _423: u16;
    let mut _424: isize;
    let mut _426: !;
    let mut _427: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _429: ();
    let mut _430: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _431: std::result::Result<(), error::ErrorCode>;
    let mut _432: bool;
    let mut _433: &state::user::PerpPosition;
    let _434: &state::user::User;
    let mut _435: &std::cell::RefMut<'_, state::user::User>;
    let _436: usize;
    let mut _437: usize;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: &state::user::PerpPosition;
    let _441: &state::user::User;
    let mut _442: &std::cell::RefMut<'_, state::user::User>;
    let _443: usize;
    let mut _444: usize;
    let mut _445: bool;
    let mut _446: ();
    let _448: ();
    let mut _449: &str;
    let _450: &str;
    let mut _451: &std::string::String;
    let _452: &std::string::String;
    let _453: std::string::String;
    let mut _455: std::fmt::Arguments<'_>;
    let mut _456: &[&str];
    let mut _457: &[&str; 2];
    let _458: &[&str; 2];
    let _459: [&str; 2];
    let mut _460: &[core::fmt::rt::Argument<'_>];
    let mut _461: &[core::fmt::rt::Argument<'_>; 1];
    let _462: &[core::fmt::rt::Argument<'_>; 1];
    let _463: [core::fmt::rt::Argument<'_>; 1];
    let mut _464: core::fmt::rt::Argument<'_>;
    let mut _465: &error::ErrorCode;
    let _466: &error::ErrorCode;
    let mut _467: error::ErrorCode;
    let mut _468: isize;
    let mut _470: !;
    let mut _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _474: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _475: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _476: &mut state::user::User;
    let mut _477: &mut state::user::User;
    let mut _478: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _479: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _480: &anchor_lang::prelude::Pubkey;
    let mut _481: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _482: &anchor_lang::prelude::Pubkey;
    let mut _483: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _484: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _485: &mut state::oracle_map::OracleMap<'_>;
    let mut _486: i64;
    let mut _487: u64;
    let mut _488: state::events::OrderActionExplanation;
    let mut _489: std::option::Option<state::user::MarketType>;
    let mut _490: std::option::Option<u16>;
    let mut _491: std::option::Option<controller::position::PositionDirection>;
    let mut _492: isize;
    let mut _494: !;
    let mut _495: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _498: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _499: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _500: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _501: &u16;
    let _502: &u16;
    let mut _503: isize;
    let mut _505: !;
    let mut _506: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _509: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _510: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _511: &mut state::oracle_map::OracleMap<'_>;
    let mut _512: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _513: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _514: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _515: &state::perp_market::PerpMarket;
    let _516: &state::perp_market::PerpMarket;
    let mut _517: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _518: isize;
    let mut _520: !;
    let mut _521: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _524: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::MMOraclePriceData>;
    let mut _525: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let mut _526: &state::perp_market::PerpMarket;
    let _527: &state::perp_market::PerpMarket;
    let mut _528: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _529: state::oracle::OraclePriceData;
    let mut _530: u64;
    let mut _531: &state::state::ValidityGuardRails;
    let _532: &state::state::ValidityGuardRails;
    let mut _533: isize;
    let mut _535: !;
    let mut _536: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _538: ();
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _540: std::result::Result<(), error::ErrorCode>;
    let mut _541: &mut state::perp_market::PerpMarket;
    let mut _542: &mut state::perp_market::PerpMarket;
    let mut _543: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _544: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _545: &state::oracle::MMOraclePriceData;
    let _546: &state::oracle::MMOraclePriceData;
    let mut _547: &state::state::State;
    let mut _548: i64;
    let mut _549: u64;
    let mut _550: std::option::Option<math::oracle::DriftAction>;
    let mut _551: math::oracle::DriftAction;
    let mut _552: isize;
    let mut _554: !;
    let mut _555: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _558: bool;
    let mut _559: &state::perp_market::MarketStatus;
    let _560: &state::perp_market::PerpMarket;
    let mut _561: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _562: &state::perp_market::MarketStatus;
    let _563: state::perp_market::MarketStatus;
    let mut _564: &state::perp_market::PerpMarket;
    let mut _565: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _566: ();
    let mut _567: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _570: bool;
    let mut _571: &std::vec::Vec<u32>;
    let mut _572: bool;
    let mut _573: u64;
    let mut _575: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _576: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _577: &state::user::User;
    let _578: &state::user::User;
    let mut _579: &std::cell::RefMut<'_, state::user::User>;
    let _580: &std::cell::RefMut<'_, state::user::User>;
    let mut _581: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _582: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _583: &mut state::oracle_map::OracleMap<'_>;
    let mut _584: state::margin_calculation::MarginContext;
    let mut _585: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _586: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _587: state::margin_calculation::MarginContext;
    let mut _588: u32;
    let mut _589: state::margin_calculation::MarketIdentifier;
    let mut _590: u16;
    let mut _591: isize;
    let mut _593: !;
    let mut _594: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _602: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _603: std::result::Result<u128, error::ErrorCode>;
    let mut _604: &state::margin_calculation::MarginCalculation;
    let mut _605: isize;
    let mut _607: !;
    let mut _608: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _611: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _612: std::result::Result<u128, error::ErrorCode>;
    let mut _613: &state::margin_calculation::MarginCalculation;
    let mut _614: isize;
    let mut _616: !;
    let mut _617: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _619: u64;
    let mut _620: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _621: std::result::Result<u64, error::ErrorCode>;
    let mut _622: u128;
    let mut _623: u128;
    let mut _624: u128;
    let mut _625: isize;
    let mut _627: !;
    let mut _628: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _630: ();
    let mut _631: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _632: std::result::Result<(), error::ErrorCode>;
    let mut _633: &mut state::user::User;
    let mut _634: &mut state::user::User;
    let mut _635: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _636: u64;
    let mut _637: isize;
    let mut _639: !;
    let mut _640: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _642: ();
    let mut _643: bool;
    let mut _644: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _645: std::result::Result<bool, error::ErrorCode>;
    let mut _646: &state::margin_calculation::MarginCalculation;
    let mut _647: isize;
    let mut _649: !;
    let mut _650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _652: !;
    let _653: ();
    let _654: ();
    let mut _655: &[&[u8]];
    let mut _656: &[&[u8]; 1];
    let _657: &[&[u8]; 1];
    let _658: [&[u8]; 1];
    let mut _659: &[u8];
    let _660: &[u8];
    let mut _661: &std::vec::Vec<u8>;
    let _662: &std::vec::Vec<u8>;
    let _663: std::vec::Vec<u8>;
    let mut _664: &state::events::LiquidationRecord;
    let _665: &state::events::LiquidationRecord;
    let _666: state::events::LiquidationRecord;
    let mut _667: i64;
    let mut _668: u16;
    let mut _669: state::events::LiquidationType;
    let mut _670: anchor_lang::prelude::Pubkey;
    let mut _671: anchor_lang::prelude::Pubkey;
    let mut _672: u128;
    let mut _673: i128;
    let mut _674: bool;
    let mut _675: &state::user::User;
    let _676: &state::user::User;
    let mut _677: &std::cell::RefMut<'_, state::user::User>;
    let mut _678: std::vec::Vec<u32>;
    let mut _679: u64;
    let mut _680: state::events::LiquidatePerpRecord;
    let mut _681: u16;
    let mut _682: i64;
    let mut _683: u64;
    let mut _684: state::events::LiquidatePerpRecord;
    let mut _685: state::events::LiquidationRecord;
    let _686: ();
    let mut _687: &mut state::user::User;
    let mut _688: &mut state::user::User;
    let mut _689: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _690: ();
    let _691: ();
    let mut _692: bool;
    let mut _693: i64;
    let mut _694: &state::user::User;
    let mut _695: &std::cell::RefMut<'_, state::user::User>;
    let _696: usize;
    let mut _697: usize;
    let mut _698: bool;
    let mut _699: !;
    let _700: ();
    let mut _701: &str;
    let _702: &str;
    let mut _703: ();
    let mut _705: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _706: std::result::Result<bool, error::ErrorCode>;
    let mut _707: i64;
    let mut _708: i64;
    let mut _709: &state::perp_market::PerpMarket;
    let mut _710: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _711: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _712: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _713: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _714: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _715: &u16;
    let _716: &u16;
    let mut _717: isize;
    let mut _719: !;
    let mut _720: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _722: i64;
    let mut _723: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _724: std::result::Result<i64, error::ErrorCode>;
    let mut _725: u64;
    let mut _726: &state::state::OracleGuardRails;
    let mut _727: isize;
    let mut _729: !;
    let mut _730: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _732: isize;
    let mut _734: !;
    let mut _735: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _737: ();
    let mut _738: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _739: std::result::Result<(), error::ErrorCode>;
    let mut _740: bool;
    let mut _741: ();
    let _743: ();
    let mut _744: &str;
    let _745: &str;
    let mut _746: &std::string::String;
    let _747: &std::string::String;
    let _748: std::string::String;
    let mut _750: std::fmt::Arguments<'_>;
    let mut _751: &[&str];
    let mut _752: &[&str; 2];
    let _753: &[&str; 2];
    let _754: [&str; 2];
    let mut _755: &[core::fmt::rt::Argument<'_>];
    let mut _756: &[core::fmt::rt::Argument<'_>; 1];
    let _757: &[core::fmt::rt::Argument<'_>; 1];
    let _758: [core::fmt::rt::Argument<'_>; 1];
    let mut _759: core::fmt::rt::Argument<'_>;
    let mut _760: &error::ErrorCode;
    let _761: &error::ErrorCode;
    let mut _762: error::ErrorCode;
    let mut _763: isize;
    let mut _765: !;
    let mut _766: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _769: i64;
    let mut _770: &state::user::User;
    let mut _771: &std::cell::RefMut<'_, state::user::User>;
    let _772: usize;
    let mut _773: usize;
    let mut _774: bool;
    let mut _776: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _777: std::result::Result<u32, error::ErrorCode>;
    let mut _778: &state::perp_market::PerpMarket;
    let _779: &state::perp_market::PerpMarket;
    let mut _780: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _781: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _782: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _783: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _784: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _785: &u16;
    let _786: &u16;
    let mut _787: isize;
    let mut _789: !;
    let mut _790: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _792: u128;
    let mut _793: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _794: std::result::Result<u128, error::ErrorCode>;
    let mut _795: u64;
    let mut _796: isize;
    let mut _798: !;
    let mut _799: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _801: math::margin::MarginRequirementType;
    let mut _802: bool;
    let mut _803: &state::user::User;
    let _804: &state::user::User;
    let mut _805: &std::cell::RefMut<'_, state::user::User>;
    let mut _806: math::margin::MarginRequirementType;
    let mut _807: isize;
    let mut _809: !;
    let mut _810: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _813: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _814: std::result::Result<u32, error::ErrorCode>;
    let mut _815: u32;
    let mut _816: u32;
    let mut _817: isize;
    let mut _819: !;
    let mut _820: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _823: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _824: std::result::Result<u128, error::ErrorCode>;
    let mut _825: &state::margin_calculation::MarginCalculation;
    let mut _826: isize;
    let mut _828: !;
    let mut _829: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _832: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _833: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _834: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _835: &u16;
    let _836: &u16;
    let mut _837: isize;
    let mut _839: !;
    let mut _840: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _843: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _844: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _845: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _846: &u16;
    let _847: &u16;
    let _848: &state::perp_market::PerpMarket;
    let mut _849: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _850: isize;
    let mut _852: !;
    let mut _853: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _856: &state::oracle::OraclePriceData;
    let mut _857: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _858: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _859: &mut state::oracle_map::OracleMap<'_>;
    let mut _860: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _861: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _862: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _863: &state::spot_market::SpotMarket;
    let _864: &state::spot_market::SpotMarket;
    let mut _865: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _866: isize;
    let mut _868: !;
    let mut _869: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _872: &state::perp_market::PerpMarket;
    let mut _873: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _875: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _876: std::result::Result<u32, error::ErrorCode>;
    let mut _877: u128;
    let mut _878: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _879: std::result::Result<u128, error::ErrorCode>;
    let mut _880: &state::margin_calculation::MarginCalculation;
    let mut _881: u128;
    let mut _882: isize;
    let mut _884: !;
    let mut _885: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _887: u64;
    let mut _888: u32;
    let mut _889: u32;
    let mut _890: i64;
    let mut _891: i64;
    let mut _892: u32;
    let mut _893: &state::perp_market::PerpMarket;
    let mut _894: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _895: isize;
    let mut _897: !;
    let mut _898: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _901: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _902: std::result::Result<u64, error::ErrorCode>;
    let mut _903: u64;
    let mut _904: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _905: std::result::Result<u64, error::ErrorCode>;
    let mut _906: u128;
    let mut _907: u32;
    let mut _908: u32;
    let mut _909: u32;
    let mut _910: i64;
    let mut _911: i64;
    let mut _912: isize;
    let mut _914: !;
    let mut _915: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _917: u64;
    let mut _918: &state::perp_market::PerpMarket;
    let mut _919: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _920: isize;
    let mut _922: !;
    let mut _923: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _925: ();
    let mut _926: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _927: ();
    let mut _928: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _930: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _931: std::result::Result<u128, error::ErrorCode>;
    let mut _932: &state::user::User;
    let _933: &state::user::User;
    let mut _934: &std::cell::RefMut<'_, state::user::User>;
    let _935: &std::cell::RefMut<'_, state::user::User>;
    let mut _936: u128;
    let mut _937: u64;
    let mut _938: u128;
    let mut _939: u128;
    let mut _940: isize;
    let mut _942: !;
    let mut _943: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _946: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _947: std::result::Result<u64, error::ErrorCode>;
    let mut _948: u128;
    let mut _949: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _950: std::result::Result<u128, error::ErrorCode>;
    let mut _951: u128;
    let mut _952: u128;
    let mut _953: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _954: std::result::Result<u128, error::ErrorCode>;
    let mut _955: u64;
    let mut _956: isize;
    let mut _958: !;
    let mut _959: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _961: u128;
    let mut _962: isize;
    let mut _964: !;
    let mut _965: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _967: isize;
    let mut _969: !;
    let mut _970: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _972: ();
    let mut _973: bool;
    let mut _974: u64;
    let mut _975: !;
    let _976: ();
    let mut _977: &str;
    let _978: &str;
    let mut _979: ();
    let mut _981: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _982: std::result::Result<u64, error::ErrorCode>;
    let mut _983: u128;
    let mut _984: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _985: std::result::Result<u128, error::ErrorCode>;
    let mut _986: i128;
    let mut _987: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _988: std::result::Result<i128, error::ErrorCode>;
    let mut _989: u64;
    let mut _990: isize;
    let mut _992: !;
    let mut _993: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _995: i64;
    let mut _996: isize;
    let mut _998: !;
    let mut _999: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1001: isize;
    let mut _1003: !;
    let mut _1004: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1007: bool;
    let mut _1008: u64;
    let mut _1009: u64;
    let mut _1010: (u64, bool);
    let mut _1012: u64;
    let mut _1013: u64;
    let mut _1014: u64;
    let mut _1015: u64;
    let mut _1017: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1018: std::result::Result<u64, error::ErrorCode>;
    let mut _1019: u64;
    let mut _1020: u64;
    let mut _1021: &state::perp_market::PerpMarket;
    let mut _1022: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1023: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1024: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1025: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1026: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1027: &u16;
    let _1028: &u16;
    let mut _1029: isize;
    let mut _1031: !;
    let mut _1032: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1034: isize;
    let mut _1036: !;
    let mut _1037: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1040: &state::user::PerpPosition;
    let _1041: &state::user::User;
    let mut _1042: &std::cell::RefMut<'_, state::user::User>;
    let _1043: usize;
    let mut _1044: usize;
    let mut _1045: bool;
    let mut _1047: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _1048: std::result::Result<u32, error::ErrorCode>;
    let mut _1049: &state::perp_market::PerpMarket;
    let _1050: &state::perp_market::PerpMarket;
    let mut _1051: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1052: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1053: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1054: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1055: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1056: &u16;
    let _1057: &u16;
    let mut _1058: isize;
    let mut _1060: !;
    let mut _1061: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1063: isize;
    let mut _1065: !;
    let mut _1066: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1069: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _1070: std::result::Result<u32, error::ErrorCode>;
    let mut _1071: u32;
    let mut _1072: u32;
    let mut _1073: u64;
    let mut _1074: &state::user::User;
    let mut _1075: &std::cell::RefMut<'_, state::user::User>;
    let mut _1076: u64;
    let mut _1077: isize;
    let mut _1079: !;
    let mut _1080: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1083: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::order_params::OrderParams>;
    let mut _1084: std::result::Result<state::order_params::OrderParams, error::ErrorCode>;
    let mut _1085: u16;
    let mut _1086: controller::position::PositionDirection;
    let mut _1087: u64;
    let mut _1088: i64;
    let mut _1089: u32;
    let mut _1090: isize;
    let mut _1092: !;
    let mut _1093: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1096: &state::user::User;
    let mut _1097: &std::cell::RefMut<'_, state::user::User>;
    let mut _1099: &state::perp_market::PerpMarket;
    let mut _1100: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1101: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1103: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1104: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1105: &u16;
    let _1106: &u16;
    let mut _1107: isize;
    let mut _1109: !;
    let mut _1110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1112: ();
    let mut _1113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1114: std::result::Result<(), error::ErrorCode>;
    let mut _1115: &state::state::State;
    let mut _1116: &mut state::user::User;
    let mut _1117: &mut state::user::User;
    let mut _1118: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1119: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1120: anchor_lang::prelude::Pubkey;
    let mut _1121: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1122: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1123: &mut state::oracle_map::OracleMap<'_>;
    let mut _1124: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _1125: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _1126: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _1127: &anchor_lang::prelude::Clock;
    let mut _1128: state::order_params::OrderParams;
    let mut _1129: state::order_params::PlaceOrderOptions;
    let mut _1130: state::order_params::PlaceOrderOptions;
    let mut _1131: state::events::OrderActionExplanation;
    let mut _1132: isize;
    let mut _1134: !;
    let mut _1135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1137: ();
    let mut _1138: std::cell::RefMut<'_, state::user::User>;
    let _1139: ();
    let mut _1140: std::cell::RefMut<'_, state::user::User>;
    let mut _1143: (u64, u64);
    let mut _1144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _1145: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _1146: u32;
    let mut _1147: &state::state::State;
    let mut _1148: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _1149: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _1150: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1151: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1152: &mut state::oracle_map::OracleMap<'_>;
    let mut _1153: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _1154: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _1155: &state::user_map::UserMap<'_>;
    let mut _1156: &state::user_map::UserStatsMap<'_>;
    let mut _1157: std::option::Option<u32>;
    let mut _1158: &anchor_lang::prelude::Clock;
    let mut _1159: state::fill_mode::FillMode;
    let mut _1160: isize;
    let mut _1162: !;
    let mut _1163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _1167: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _1168: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _1169: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _1170: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _1171: isize;
    let mut _1173: !;
    let mut _1174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1176: ();
    let mut _1177: std::result::Result<usize, error::ErrorCode>;
    let mut _1178: &state::user::User;
    let _1179: &state::user::User;
    let mut _1180: &std::cell::RefMut<'_, state::user::User>;
    let mut _1181: u32;
    let mut _1182: isize;
    let _1184: ();
    let mut _1185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1186: std::result::Result<(), error::ErrorCode>;
    let mut _1187: usize;
    let mut _1188: &mut state::user::User;
    let mut _1189: &mut state::user::User;
    let mut _1190: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1191: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1192: &anchor_lang::prelude::Pubkey;
    let mut _1193: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1194: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1195: &mut state::oracle_map::OracleMap<'_>;
    let mut _1196: i64;
    let mut _1197: u64;
    let mut _1198: state::events::OrderActionExplanation;
    let mut _1199: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1200: &anchor_lang::prelude::Pubkey;
    let mut _1201: isize;
    let mut _1203: !;
    let mut _1204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1206: ();
    let mut _1207: bool;
    let mut _1208: u64;
    let mut _1209: !;
    let mut _1210: error::ErrorCode;
    let mut _1212: i64;
    let mut _1213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1214: std::result::Result<i64, error::ErrorCode>;
    let mut _1215: u128;
    let mut _1216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1217: std::result::Result<u128, error::ErrorCode>;
    let mut _1218: u128;
    let mut _1219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1220: std::result::Result<u128, error::ErrorCode>;
    let mut _1221: u128;
    let mut _1222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1223: std::result::Result<u128, error::ErrorCode>;
    let mut _1224: u64;
    let mut _1225: isize;
    let mut _1227: !;
    let mut _1228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1230: u128;
    let mut _1231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1232: std::result::Result<u128, error::ErrorCode>;
    let mut _1233: u32;
    let mut _1234: isize;
    let mut _1236: !;
    let mut _1237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1239: isize;
    let mut _1241: !;
    let mut _1242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1244: isize;
    let mut _1246: !;
    let mut _1247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1249: isize;
    let mut _1251: !;
    let mut _1252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1254: bool;
    let _1255: ();
    let mut _1257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1258: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1259: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1260: &u16;
    let _1261: &u16;
    let mut _1262: isize;
    let mut _1264: !;
    let mut _1265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1269: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1270: &mut state::user::User;
    let mut _1271: &mut state::user::User;
    let mut _1272: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1273: u16;
    let mut _1274: isize;
    let mut _1276: !;
    let mut _1277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1279: ();
    let mut _1280: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1281: std::result::Result<(), error::ErrorCode>;
    let mut _1282: &mut state::user::PerpPosition;
    let mut _1283: &mut state::perp_market::PerpMarket;
    let mut _1284: &mut state::perp_market::PerpMarket;
    let mut _1285: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1286: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1287: i64;
    let mut _1288: isize;
    let mut _1290: !;
    let mut _1291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1293: u128;
    let mut _1294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1295: std::result::Result<u128, error::ErrorCode>;
    let mut _1296: u128;
    let mut _1297: &state::perp_market::PerpMarket;
    let mut _1298: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1299: u128;
    let mut _1300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1301: std::result::Result<u128, error::ErrorCode>;
    let mut _1302: u64;
    let mut _1303: i64;
    let mut _1304: isize;
    let mut _1306: !;
    let mut _1307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1309: isize;
    let mut _1311: !;
    let mut _1312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1314: &mut state::perp_market::PerpMarket;
    let mut _1315: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1318: (u64, state::margin_calculation::MarginCalculation);
    let mut _1319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, state::margin_calculation::MarginCalculation)>;
    let mut _1320: std::result::Result<(u64, state::margin_calculation::MarginCalculation), error::ErrorCode>;
    let mut _1321: &state::user::User;
    let _1322: &state::user::User;
    let mut _1323: &std::cell::RefMut<'_, state::user::User>;
    let _1324: &std::cell::RefMut<'_, state::user::User>;
    let mut _1325: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1326: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1327: &mut state::oracle_map::OracleMap<'_>;
    let mut _1328: u32;
    let mut _1329: u128;
    let mut _1330: isize;
    let mut _1332: !;
    let mut _1333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1335: u64;
    let mut _1336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1337: std::result::Result<u64, error::ErrorCode>;
    let mut _1338: u64;
    let mut _1339: u64;
    let mut _1340: isize;
    let mut _1342: !;
    let mut _1343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1345: ();
    let mut _1346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1347: std::result::Result<(), error::ErrorCode>;
    let mut _1348: &mut state::user::User;
    let mut _1349: &mut state::user::User;
    let mut _1350: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1351: u64;
    let mut _1352: isize;
    let mut _1354: !;
    let mut _1355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1357: ();
    let mut _1358: bool;
    let mut _1359: &state::margin_calculation::MarginCalculation;
    let _1360: ();
    let mut _1361: &mut state::user::User;
    let mut _1362: &mut state::user::User;
    let mut _1363: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1364: bool;
    let mut _1365: &state::user::User;
    let _1366: &state::user::User;
    let mut _1367: &std::cell::RefMut<'_, state::user::User>;
    let _1368: &std::cell::RefMut<'_, state::user::User>;
    let _1369: ();
    let mut _1370: &mut state::user::User;
    let mut _1371: &mut state::user::User;
    let mut _1372: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _1375: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _1376: u64;
    let mut _1377: u64;
    let mut _1378: controller::position::PositionDirection;
    let mut _1379: isize;
    let mut _1381: !;
    let mut _1382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1384: ();
    let _1385: ();
    let mut _1386: &[&[u8]];
    let mut _1387: &[&[u8]; 1];
    let _1388: &[&[u8]; 1];
    let _1389: [&[u8]; 1];
    let mut _1390: &[u8];
    let _1391: &[u8];
    let mut _1392: &std::vec::Vec<u8>;
    let _1393: &std::vec::Vec<u8>;
    let _1394: std::vec::Vec<u8>;
    let mut _1395: &state::events::LiquidationRecord;
    let _1396: &state::events::LiquidationRecord;
    let _1397: state::events::LiquidationRecord;
    let mut _1398: i64;
    let mut _1399: u16;
    let mut _1400: state::events::LiquidationType;
    let mut _1401: anchor_lang::prelude::Pubkey;
    let mut _1402: anchor_lang::prelude::Pubkey;
    let mut _1403: u128;
    let mut _1404: i128;
    let mut _1405: bool;
    let mut _1406: &state::user::User;
    let _1407: &state::user::User;
    let mut _1408: &std::cell::RefMut<'_, state::user::User>;
    let mut _1409: std::vec::Vec<u32>;
    let mut _1410: u64;
    let mut _1411: state::events::LiquidatePerpRecord;
    let mut _1412: u16;
    let mut _1413: i64;
    let mut _1414: i64;
    let mut _1415: i64;
    let mut _1416: u64;
    let mut _1417: u32;
    let mut _1418: u64;
    let mut _1419: u64;
    let mut _1420: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1421: std::result::Result<u64, error::ErrorCode>;
    let mut _1422: i64;
    let mut _1423: i64;
    let mut _1424: isize;
    let mut _1426: !;
    let mut _1427: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1429: state::events::LiquidationRecord;
    let mut _1430: ();
    let mut _1444: bool;
    let mut _1445: bool;
    let mut _1446: bool;
    let mut _1447: bool;
    let mut _1448: bool;
    let mut _1449: bool;
    let mut _1450: bool;
    let mut _1451: bool;
    let mut _1452: bool;
    let mut _1453: bool;
    let mut _1454: bool;
    let mut _1455: bool;
    let mut _1456: bool;
    let mut _1457: bool;
    let mut _1458: isize;
    let mut _1459: isize;
    let mut _1460: isize;
    let mut _1461: isize;
    let mut _1462: isize;
    let mut _1463: isize;
    let mut _1464: isize;
    let mut _1465: isize;
    let mut _1466: isize;
    let mut _1467: isize;
    let mut _1468: isize;
    let mut _1469: isize;
    let mut _1470: isize;
    let mut _1471: isize;
    let mut _1472: isize;
    let mut _1473: isize;
    let mut _1474: isize;
    let mut _1475: isize;
    let mut _1476: isize;
    let mut _1477: isize;
    let mut _1478: isize;
    let mut _1479: isize;
    let mut _1480: isize;
    let mut _1481: isize;
    let mut _1482: isize;
    let mut _1483: isize;
    let mut _1484: isize;
    let mut _1485: isize;
    let mut _1486: isize;
    let mut _1487: isize;
    let mut _1488: isize;
    let mut _1489: isize;
    let mut _1490: isize;
    let mut _1491: isize;
    let mut _1492: isize;
    let mut _1493: isize;
    let mut _1494: isize;
    let mut _1495: isize;
    let mut _1496: isize;
    let mut _1497: isize;
    let mut _1498: isize;
    let mut _1499: isize;
    let mut _1500: isize;
    let mut _1501: isize;
    let mut _1502: isize;
    let mut _1503: isize;
    let mut _1504: isize;
    let mut _1505: isize;
    let mut _1506: isize;
    let mut _1507: isize;
    let mut _1508: isize;
    let mut _1509: isize;
    let mut _1510: isize;
    let mut _1511: isize;
    let mut _1512: isize;
    let mut _1513: isize;
    let mut _1514: isize;
    let mut _1515: isize;
    let mut _1516: isize;
    let mut _1517: isize;
    let mut _1518: isize;
    let mut _1519: isize;
    let mut _1520: isize;
    let mut _1521: isize;
    let mut _1522: isize;
    let mut _1523: isize;
    let mut _1524: isize;
    let mut _1525: isize;
    let mut _1526: isize;
    let mut _1527: isize;
    let mut _1528: isize;
    let mut _1529: isize;
    let mut _1530: isize;
    let mut _1531: isize;
    let mut _1532: isize;
    let mut _1533: isize;
    let mut _1534: isize;
    let mut _1535: isize;
    let mut _1536: isize;
    let mut _1537: isize;
    scope 1 {
        debug now => _15;
        let _16: u64;
        scope 2 {
            debug slot => _16;
            let mut _17: std::cell::RefMut<'_, state::user::User>;
            let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _27: std::cell::RefMut<'_, state::user::User>;
            scope 3 {
                debug user => _17;
                let mut _28: std::cell::RefMut<'_, state::user::User>;
                let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _38: std::cell::RefMut<'_, state::user::User>;
                scope 8 {
                    debug liquidator => _28;
                    let _39: u32;
                    scope 13 {
                        debug liquidation_margin_buffer_ratio => _39;
                        let _40: u128;
                        scope 14 {
                            debug initial_pct_to_liquidate => _40;
                            let _42: u128;
                            scope 15 {
                                debug liquidation_duration => _42;
                                let _52: error::ErrorCode;
                                let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _89: ();
                                let _98: error::ErrorCode;
                                let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _144: ();
                                let _153: error::ErrorCode;
                                let _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _190: ();
                                let _191: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                let _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _201: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                scope 16 {
                                    debug error_code => _52;
                                    let _59: std::string::String;
                                    let _78: std::string::String;
                                    let mut _1442: &[&str; 1];
                                    let mut _1443: &[&str; 2];
                                    scope 17 {
                                        debug res => _59;
                                    }
                                    scope 18 {
                                        debug res => _78;
                                    }
                                }
                                scope 19 {
                                    debug residual => _86;
                                    scope 20 {
                                    }
                                }
                                scope 21 {
                                    debug val => _89;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug error_code => _98;
                                    let _105: std::string::String;
                                    let _124: std::string::String;
                                    let mut _1440: &[&str; 2];
                                    let mut _1441: &[&str; 2];
                                    scope 24 {
                                        debug res => _105;
                                    }
                                    scope 25 {
                                        debug res => _124;
                                    }
                                }
                                scope 26 {
                                    debug residual => _141;
                                    scope 27 {
                                    }
                                }
                                scope 28 {
                                    debug val => _144;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug error_code => _153;
                                    let _160: std::string::String;
                                    let _179: std::string::String;
                                    let mut _1438: &[&str; 1];
                                    let mut _1439: &[&str; 2];
                                    scope 31 {
                                        debug res => _160;
                                    }
                                    scope 32 {
                                        debug res => _179;
                                    }
                                }
                                scope 33 {
                                    debug residual => _187;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _190;
                                    scope 36 {
                                    }
                                }
                                scope 37 {
                                    debug market => _191;
                                    let _211: error::ErrorCode;
                                    let _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _255: ();
                                    let _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _279: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                    let _282: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _285: ();
                                    let _304: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _307: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                    let _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _313: ();
                                    let _314: state::margin_calculation::MarginCalculation;
                                    let _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _335: state::margin_calculation::MarginContext;
                                    let _337: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _340: state::margin_calculation::MarginCalculation;
                                    scope 42 {
                                        debug error_code => _211;
                                        let _218: std::string::String;
                                        let _237: std::string::String;
                                        let mut _1436: &[&str; 1];
                                        let mut _1437: &[&str; 2];
                                        scope 43 {
                                            debug res => _218;
                                        }
                                        scope 44 {
                                            debug res => _237;
                                        }
                                    }
                                    scope 45 {
                                        debug residual => _252;
                                        scope 46 {
                                        }
                                    }
                                    scope 47 {
                                        debug val => _255;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug residual => _276;
                                        scope 50 {
                                        }
                                    }
                                    scope 51 {
                                        debug val => _279;
                                        scope 52 {
                                        }
                                    }
                                    scope 53 {
                                        debug residual => _282;
                                        scope 54 {
                                        }
                                    }
                                    scope 55 {
                                        debug val => _285;
                                        scope 56 {
                                        }
                                    }
                                    scope 57 {
                                        debug residual => _304;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug val => _307;
                                        scope 60 {
                                        }
                                    }
                                    scope 61 {
                                        debug residual => _310;
                                        scope 62 {
                                        }
                                    }
                                    scope 63 {
                                        debug val => _313;
                                        scope 64 {
                                        }
                                    }
                                    scope 65 {
                                        debug margin_calculation => _314;
                                        let _355: std::string::String;
                                        let _378: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _381: bool;
                                        let _399: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _402: &state::user::PerpPosition;
                                        let _403: u16;
                                        let _411: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _414: u16;
                                        let mut _1435: &[&str; 1];
                                        scope 74 {
                                            debug res => _355;
                                        }
                                        scope 75 {
                                            debug residual => _378;
                                            scope 76 {
                                            }
                                        }
                                        scope 77 {
                                            debug val => _381;
                                            scope 78 {
                                            }
                                        }
                                        scope 79 {
                                            debug residual => _399;
                                            scope 80 {
                                            }
                                        }
                                        scope 81 {
                                            debug val => _402;
                                            scope 82 {
                                            }
                                        }
                                        scope 83 {
                                            debug liquidation_id => _403;
                                            let mut _415: u64;
                                            scope 88 {
                                                debug margin_freed => _415;
                                                let _416: usize;
                                                let _425: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _428: usize;
                                                scope 89 {
                                                    debug position_index => _416;
                                                    let _447: error::ErrorCode;
                                                    let _469: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _472: ();
                                                    let _473: std::vec::Vec<u32>;
                                                    let _493: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _496: std::vec::Vec<u32>;
                                                    scope 94 {
                                                        debug error_code => _447;
                                                        let _454: std::string::String;
                                                        let mut _1434: &[&str; 2];
                                                        scope 95 {
                                                            debug res => _454;
                                                        }
                                                    }
                                                    scope 96 {
                                                        debug residual => _469;
                                                        scope 97 {
                                                        }
                                                    }
                                                    scope 98 {
                                                        debug val => _472;
                                                        scope 99 {
                                                        }
                                                    }
                                                    scope 100 {
                                                        debug canceled_order_ids => _473;
                                                        let mut _497: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                        let _504: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _507: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                        scope 105 {
                                                            debug market => _497;
                                                            let _508: &state::oracle::OraclePriceData;
                                                            let _519: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _522: &state::oracle::OraclePriceData;
                                                            scope 110 {
                                                                debug oracle_price_data => _508;
                                                                let _523: state::oracle::MMOraclePriceData;
                                                                let _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _537: state::oracle::MMOraclePriceData;
                                                                scope 115 {
                                                                    debug mm_oracle_price_data => _523;
                                                                    let _553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _556: ();
                                                                    let _557: i64;
                                                                    let mut _1433: &state::perp_market::MarketStatus;
                                                                    scope 120 {
                                                                        debug residual => _553;
                                                                        scope 121 {
                                                                        }
                                                                    }
                                                                    scope 122 {
                                                                        debug val => _556;
                                                                        scope 123 {
                                                                        }
                                                                    }
                                                                    scope 124 {
                                                                        debug oracle_price => _557;
                                                                        let _568: u64;
                                                                        scope 125 {
                                                                            debug lp_shares => _568;
                                                                            let _569: state::margin_calculation::MarginCalculation;
                                                                            let _574: state::margin_calculation::MarginCalculation;
                                                                            let _592: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _595: state::margin_calculation::MarginContext;
                                                                            let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _600: state::margin_calculation::MarginCalculation;
                                                                            scope 126 {
                                                                                debug intermediate_margin_calculation => _569;
                                                                                let _704: bool;
                                                                                let _718: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _721: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                let _728: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _731: i64;
                                                                                let _733: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _736: bool;
                                                                                scope 158 {
                                                                                    debug oracle_price_too_divergent => _704;
                                                                                    let _742: error::ErrorCode;
                                                                                    let _764: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _767: ();
                                                                                    let _768: u64;
                                                                                    scope 171 {
                                                                                        debug error_code => _742;
                                                                                        let _749: std::string::String;
                                                                                        let mut _1432: &[&str; 2];
                                                                                        scope 172 {
                                                                                            debug res => _749;
                                                                                        }
                                                                                    }
                                                                                    scope 173 {
                                                                                        debug residual => _764;
                                                                                        scope 174 {
                                                                                        }
                                                                                    }
                                                                                    scope 175 {
                                                                                        debug val => _767;
                                                                                        scope 176 {
                                                                                        }
                                                                                    }
                                                                                    scope 177 {
                                                                                        debug user_base_asset_amount => _768;
                                                                                        let _775: u32;
                                                                                        let _788: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _791: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                        let _797: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _800: u128;
                                                                                        let _808: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _811: u32;
                                                                                        scope 178 {
                                                                                            debug margin_ratio => _775;
                                                                                            let _812: u32;
                                                                                            let _818: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _821: u32;
                                                                                            scope 191 {
                                                                                                debug margin_ratio_with_buffer => _812;
                                                                                                let _822: u128;
                                                                                                let _827: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _830: u128;
                                                                                                scope 196 {
                                                                                                    debug margin_shortage => _822;
                                                                                                    let _831: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                    let _838: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _841: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                    scope 201 {
                                                                                                        debug market => _831;
                                                                                                        let _842: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                        let _851: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _854: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                        scope 206 {
                                                                                                            debug quote_spot_market => _842;
                                                                                                            let _855: i64;
                                                                                                            let _867: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _870: &state::oracle::OraclePriceData;
                                                                                                            scope 211 {
                                                                                                                debug quote_oracle_price => _855;
                                                                                                                let _871: u32;
                                                                                                                scope 216 {
                                                                                                                    debug liquidator_fee => _871;
                                                                                                                    let _874: u32;
                                                                                                                    let _883: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _886: u128;
                                                                                                                    let _896: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _899: u32;
                                                                                                                    scope 217 {
                                                                                                                        debug if_liquidation_fee => _874;
                                                                                                                        let _900: u64;
                                                                                                                        let _913: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _916: u64;
                                                                                                                        let _921: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _924: u64;
                                                                                                                        scope 226 {
                                                                                                                            debug base_asset_amount_to_cover_margin_shortage => _900;
                                                                                                                            let _929: u128;
                                                                                                                            let _941: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _944: u128;
                                                                                                                            scope 235 {
                                                                                                                                debug max_pct_allowed => _929;
                                                                                                                                let _945: u64;
                                                                                                                                let _957: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _960: u128;
                                                                                                                                let _963: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _966: u128;
                                                                                                                                let _968: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _971: u64;
                                                                                                                                scope 240 {
                                                                                                                                    debug max_base_asset_amount_allowed_to_be_transferred => _945;
                                                                                                                                    let _980: u64;
                                                                                                                                    let _991: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _994: i128;
                                                                                                                                    let _997: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1000: u128;
                                                                                                                                    let _1002: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1005: u64;
                                                                                                                                    scope 253 {
                                                                                                                                        debug base_asset_value => _980;
                                                                                                                                        let _1006: u64;
                                                                                                                                        scope 266 {
                                                                                                                                            debug min_base_asset_amount => _1006;
                                                                                                                                            let _1011: u64;
                                                                                                                                            scope 267 {
                                                                                                                                                debug base_asset_amount => _1011;
                                                                                                                                                let _1016: u64;
                                                                                                                                                let _1030: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1033: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                let _1035: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1038: u64;
                                                                                                                                                scope 268 {
                                                                                                                                                    debug base_asset_amount => _1016;
                                                                                                                                                    let _1039: controller::position::PositionDirection;
                                                                                                                                                    scope 277 {
                                                                                                                                                        debug existing_direction => _1039;
                                                                                                                                                        let _1046: u32;
                                                                                                                                                        let _1059: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1062: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                        let _1064: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1067: u32;
                                                                                                                                                        scope 278 {
                                                                                                                                                            debug max_liquidation_fee => _1046;
                                                                                                                                                            let _1068: u32;
                                                                                                                                                            let _1078: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                            let _1081: u32;
                                                                                                                                                            scope 287 {
                                                                                                                                                                debug liquidator_fee_adjusted => _1068;
                                                                                                                                                                let _1082: state::order_params::OrderParams;
                                                                                                                                                                let _1091: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1094: state::order_params::OrderParams;
                                                                                                                                                                scope 292 {
                                                                                                                                                                    debug order_params => _1082;
                                                                                                                                                                    let _1095: u32;
                                                                                                                                                                    scope 297 {
                                                                                                                                                                        debug order_id => _1095;
                                                                                                                                                                        let _1098: u64;
                                                                                                                                                                        let _1108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                        let _1111: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                                        scope 298 {
                                                                                                                                                                            debug fill_record_id => _1098;
                                                                                                                                                                            let _1133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1136: ();
                                                                                                                                                                            let _1141: u64;
                                                                                                                                                                            let _1142: u64;
                                                                                                                                                                            let _1161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1164: (u64, u64);
                                                                                                                                                                            let mut _1431: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                                                                                                                                                                            scope 303 {
                                                                                                                                                                                debug residual => _1133;
                                                                                                                                                                                scope 304 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 305 {
                                                                                                                                                                                debug val => _1136;
                                                                                                                                                                                scope 306 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 307 {
                                                                                                                                                                                debug fill_base_asset_amount => _1141;
                                                                                                                                                                                debug fill_quote_asset_amount => _1142;
                                                                                                                                                                                let mut _1165: std::cell::RefMut<'_, state::user::User>;
                                                                                                                                                                                let _1172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                let _1175: std::cell::RefMut<'_, state::user::User>;
                                                                                                                                                                                scope 312 {
                                                                                                                                                                                    debug user => _1165;
                                                                                                                                                                                    let _1211: i64;
                                                                                                                                                                                    let _1226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                    let _1229: u128;
                                                                                                                                                                                    let _1235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                    let _1238: u128;
                                                                                                                                                                                    let _1240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                    let _1243: u128;
                                                                                                                                                                                    let _1245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                    let _1248: u128;
                                                                                                                                                                                    let _1250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                    let _1253: i64;
                                                                                                                                                                                    scope 317 {
                                                                                                                                                                                        debug order_index => _1183;
                                                                                                                                                                                        let _1183: usize;
                                                                                                                                                                                        let _1202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1205: ();
                                                                                                                                                                                        scope 318 {
                                                                                                                                                                                            debug residual => _1202;
                                                                                                                                                                                            scope 319 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 320 {
                                                                                                                                                                                            debug val => _1205;
                                                                                                                                                                                            scope 321 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 322 {
                                                                                                                                                                                        debug if_fee => _1211;
                                                                                                                                                                                        let mut _1256: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                                                        let _1263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1266: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                                                        let _1316: u64;
                                                                                                                                                                                        let _1317: state::margin_calculation::MarginCalculation;
                                                                                                                                                                                        let _1331: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1334: (u64, state::margin_calculation::MarginCalculation);
                                                                                                                                                                                        scope 343 {
                                                                                                                                                                                            debug market => _1256;
                                                                                                                                                                                            let _1267: &mut state::user::PerpPosition;
                                                                                                                                                                                            let _1275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                            let _1278: &mut state::user::PerpPosition;
                                                                                                                                                                                            scope 348 {
                                                                                                                                                                                                debug user_position => _1267;
                                                                                                                                                                                                let _1289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                let _1292: ();
                                                                                                                                                                                                let _1305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                let _1308: u128;
                                                                                                                                                                                                let _1310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                let _1313: u128;
                                                                                                                                                                                                scope 353 {
                                                                                                                                                                                                    debug residual => _1289;
                                                                                                                                                                                                    scope 354 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 355 {
                                                                                                                                                                                                    debug val => _1292;
                                                                                                                                                                                                    scope 356 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 357 {
                                                                                                                                                                                                    debug residual => _1305;
                                                                                                                                                                                                    scope 358 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 359 {
                                                                                                                                                                                                    debug val => _1308;
                                                                                                                                                                                                    scope 360 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 361 {
                                                                                                                                                                                                    debug residual => _1310;
                                                                                                                                                                                                    scope 362 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 363 {
                                                                                                                                                                                                    debug val => _1313;
                                                                                                                                                                                                    scope 364 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 349 {
                                                                                                                                                                                                debug residual => _1275;
                                                                                                                                                                                                scope 350 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 351 {
                                                                                                                                                                                                debug val => _1278;
                                                                                                                                                                                                scope 352 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 344 {
                                                                                                                                                                                            debug residual => _1263;
                                                                                                                                                                                            scope 345 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 346 {
                                                                                                                                                                                            debug val => _1266;
                                                                                                                                                                                            scope 347 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 365 {
                                                                                                                                                                                            debug margin_freed_for_perp_position => _1316;
                                                                                                                                                                                            debug margin_calculation_after => _1317;
                                                                                                                                                                                            let _1341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                            let _1344: u64;
                                                                                                                                                                                            let _1353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                            let _1356: ();
                                                                                                                                                                                            let _1373: controller::position::PositionDelta;
                                                                                                                                                                                            let _1380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                            let _1383: controller::position::PositionDelta;
                                                                                                                                                                                            scope 370 {
                                                                                                                                                                                                debug residual => _1341;
                                                                                                                                                                                                scope 371 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 372 {
                                                                                                                                                                                                debug val => _1344;
                                                                                                                                                                                                scope 373 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 374 {
                                                                                                                                                                                                debug residual => _1353;
                                                                                                                                                                                                scope 375 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 376 {
                                                                                                                                                                                                debug val => _1356;
                                                                                                                                                                                                scope 377 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 378 {
                                                                                                                                                                                                debug user_position_delta => _1373;
                                                                                                                                                                                                let _1425: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                let _1428: u64;
                                                                                                                                                                                                scope 383 {
                                                                                                                                                                                                    debug residual => _1425;
                                                                                                                                                                                                    scope 384 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 385 {
                                                                                                                                                                                                    debug val => _1428;
                                                                                                                                                                                                    scope 386 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 379 {
                                                                                                                                                                                                debug residual => _1380;
                                                                                                                                                                                                scope 380 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 381 {
                                                                                                                                                                                                debug val => _1383;
                                                                                                                                                                                                scope 382 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 366 {
                                                                                                                                                                                            debug residual => _1331;
                                                                                                                                                                                            scope 367 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 368 {
                                                                                                                                                                                            debug val => _1334;
                                                                                                                                                                                            scope 369 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 323 {
                                                                                                                                                                                        debug residual => _1226;
                                                                                                                                                                                        scope 324 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 325 {
                                                                                                                                                                                        debug val => _1229;
                                                                                                                                                                                        scope 326 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 327 {
                                                                                                                                                                                        debug residual => _1235;
                                                                                                                                                                                        scope 328 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 329 {
                                                                                                                                                                                        debug val => _1238;
                                                                                                                                                                                        scope 330 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 331 {
                                                                                                                                                                                        debug residual => _1240;
                                                                                                                                                                                        scope 332 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 333 {
                                                                                                                                                                                        debug val => _1243;
                                                                                                                                                                                        scope 334 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 335 {
                                                                                                                                                                                        debug residual => _1245;
                                                                                                                                                                                        scope 336 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 337 {
                                                                                                                                                                                        debug val => _1248;
                                                                                                                                                                                        scope 338 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 339 {
                                                                                                                                                                                        debug residual => _1250;
                                                                                                                                                                                        scope 340 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 341 {
                                                                                                                                                                                        debug val => _1253;
                                                                                                                                                                                        scope 342 {
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                scope 313 {
                                                                                                                                                                                    debug residual => _1172;
                                                                                                                                                                                    scope 314 {
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                scope 315 {
                                                                                                                                                                                    debug val => _1175;
                                                                                                                                                                                    scope 316 {
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 308 {
                                                                                                                                                                                debug residual => _1161;
                                                                                                                                                                                scope 309 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 310 {
                                                                                                                                                                                debug val => _1164;
                                                                                                                                                                                scope 311 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        scope 299 {
                                                                                                                                                                            debug residual => _1108;
                                                                                                                                                                            scope 300 {
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        scope 301 {
                                                                                                                                                                            debug val => _1111;
                                                                                                                                                                            scope 302 {
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 293 {
                                                                                                                                                                    debug residual => _1091;
                                                                                                                                                                    scope 294 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 295 {
                                                                                                                                                                    debug val => _1094;
                                                                                                                                                                    scope 296 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 288 {
                                                                                                                                                                debug residual => _1078;
                                                                                                                                                                scope 289 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 290 {
                                                                                                                                                                debug val => _1081;
                                                                                                                                                                scope 291 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 279 {
                                                                                                                                                            debug residual => _1059;
                                                                                                                                                            scope 280 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 281 {
                                                                                                                                                            debug val => _1062;
                                                                                                                                                            scope 282 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 283 {
                                                                                                                                                            debug residual => _1064;
                                                                                                                                                            scope 284 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 285 {
                                                                                                                                                            debug val => _1067;
                                                                                                                                                            scope 286 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 269 {
                                                                                                                                                    debug residual => _1030;
                                                                                                                                                    scope 270 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 271 {
                                                                                                                                                    debug val => _1033;
                                                                                                                                                    scope 272 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 273 {
                                                                                                                                                    debug residual => _1035;
                                                                                                                                                    scope 274 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 275 {
                                                                                                                                                    debug val => _1038;
                                                                                                                                                    scope 276 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 254 {
                                                                                                                                        debug residual => _991;
                                                                                                                                        scope 255 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 256 {
                                                                                                                                        debug val => _994;
                                                                                                                                        scope 257 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 258 {
                                                                                                                                        debug residual => _997;
                                                                                                                                        scope 259 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 260 {
                                                                                                                                        debug val => _1000;
                                                                                                                                        scope 261 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 262 {
                                                                                                                                        debug residual => _1002;
                                                                                                                                        scope 263 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 264 {
                                                                                                                                        debug val => _1005;
                                                                                                                                        scope 265 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 241 {
                                                                                                                                    debug residual => _957;
                                                                                                                                    scope 242 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 243 {
                                                                                                                                    debug val => _960;
                                                                                                                                    scope 244 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 245 {
                                                                                                                                    debug residual => _963;
                                                                                                                                    scope 246 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 247 {
                                                                                                                                    debug val => _966;
                                                                                                                                    scope 248 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 249 {
                                                                                                                                    debug residual => _968;
                                                                                                                                    scope 250 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 251 {
                                                                                                                                    debug val => _971;
                                                                                                                                    scope 252 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 236 {
                                                                                                                                debug residual => _941;
                                                                                                                                scope 237 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 238 {
                                                                                                                                debug val => _944;
                                                                                                                                scope 239 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 227 {
                                                                                                                            debug residual => _913;
                                                                                                                            scope 228 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 229 {
                                                                                                                            debug val => _916;
                                                                                                                            scope 230 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 231 {
                                                                                                                            debug residual => _921;
                                                                                                                            scope 232 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 233 {
                                                                                                                            debug val => _924;
                                                                                                                            scope 234 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 218 {
                                                                                                                        debug residual => _883;
                                                                                                                        scope 219 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 220 {
                                                                                                                        debug val => _886;
                                                                                                                        scope 221 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 222 {
                                                                                                                        debug residual => _896;
                                                                                                                        scope 223 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 224 {
                                                                                                                        debug val => _899;
                                                                                                                        scope 225 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 212 {
                                                                                                                debug residual => _867;
                                                                                                                scope 213 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 214 {
                                                                                                                debug val => _870;
                                                                                                                scope 215 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 207 {
                                                                                                            debug residual => _851;
                                                                                                            scope 208 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 209 {
                                                                                                            debug val => _854;
                                                                                                            scope 210 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 202 {
                                                                                                        debug residual => _838;
                                                                                                        scope 203 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 204 {
                                                                                                        debug val => _841;
                                                                                                        scope 205 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 197 {
                                                                                                    debug residual => _827;
                                                                                                    scope 198 {
                                                                                                    }
                                                                                                }
                                                                                                scope 199 {
                                                                                                    debug val => _830;
                                                                                                    scope 200 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 192 {
                                                                                                debug residual => _818;
                                                                                                scope 193 {
                                                                                                }
                                                                                            }
                                                                                            scope 194 {
                                                                                                debug val => _821;
                                                                                                scope 195 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 179 {
                                                                                            debug residual => _788;
                                                                                            scope 180 {
                                                                                            }
                                                                                        }
                                                                                        scope 181 {
                                                                                            debug val => _791;
                                                                                            scope 182 {
                                                                                            }
                                                                                        }
                                                                                        scope 183 {
                                                                                            debug residual => _797;
                                                                                            scope 184 {
                                                                                            }
                                                                                        }
                                                                                        scope 185 {
                                                                                            debug val => _800;
                                                                                            scope 186 {
                                                                                            }
                                                                                        }
                                                                                        scope 187 {
                                                                                            debug residual => _808;
                                                                                            scope 188 {
                                                                                            }
                                                                                        }
                                                                                        scope 189 {
                                                                                            debug val => _811;
                                                                                            scope 190 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 159 {
                                                                                    debug residual => _718;
                                                                                    scope 160 {
                                                                                    }
                                                                                }
                                                                                scope 161 {
                                                                                    debug val => _721;
                                                                                    scope 162 {
                                                                                    }
                                                                                }
                                                                                scope 163 {
                                                                                    debug residual => _728;
                                                                                    scope 164 {
                                                                                    }
                                                                                }
                                                                                scope 165 {
                                                                                    debug val => _731;
                                                                                    scope 166 {
                                                                                    }
                                                                                }
                                                                                scope 167 {
                                                                                    debug residual => _733;
                                                                                    scope 168 {
                                                                                    }
                                                                                }
                                                                                scope 169 {
                                                                                    debug val => _736;
                                                                                    scope 170 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 127 {
                                                                                debug intermediate_margin_calculation => _574;
                                                                                let _601: u128;
                                                                                let _606: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _609: u128;
                                                                                scope 136 {
                                                                                    debug initial_margin_shortage => _601;
                                                                                    let _610: u128;
                                                                                    let _615: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _618: u128;
                                                                                    scope 141 {
                                                                                        debug new_margin_shortage => _610;
                                                                                        let _626: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _629: u64;
                                                                                        let _638: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _641: ();
                                                                                        let _648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _651: bool;
                                                                                        scope 146 {
                                                                                            debug residual => _626;
                                                                                            scope 147 {
                                                                                            }
                                                                                        }
                                                                                        scope 148 {
                                                                                            debug val => _629;
                                                                                            scope 149 {
                                                                                            }
                                                                                        }
                                                                                        scope 150 {
                                                                                            debug residual => _638;
                                                                                            scope 151 {
                                                                                            }
                                                                                        }
                                                                                        scope 152 {
                                                                                            debug val => _641;
                                                                                            scope 153 {
                                                                                            }
                                                                                        }
                                                                                        scope 154 {
                                                                                            debug residual => _648;
                                                                                            scope 155 {
                                                                                            }
                                                                                        }
                                                                                        scope 156 {
                                                                                            debug val => _651;
                                                                                            scope 157 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 142 {
                                                                                        debug residual => _615;
                                                                                        scope 143 {
                                                                                        }
                                                                                    }
                                                                                    scope 144 {
                                                                                        debug val => _618;
                                                                                        scope 145 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 137 {
                                                                                    debug residual => _606;
                                                                                    scope 138 {
                                                                                    }
                                                                                }
                                                                                scope 139 {
                                                                                    debug val => _609;
                                                                                    scope 140 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 128 {
                                                                                debug residual => _592;
                                                                                scope 129 {
                                                                                }
                                                                            }
                                                                            scope 130 {
                                                                                debug val => _595;
                                                                                scope 131 {
                                                                                }
                                                                            }
                                                                            scope 132 {
                                                                                debug residual => _597;
                                                                                scope 133 {
                                                                                }
                                                                            }
                                                                            scope 134 {
                                                                                debug val => _600;
                                                                                scope 135 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 116 {
                                                                    debug residual => _534;
                                                                    scope 117 {
                                                                    }
                                                                }
                                                                scope 118 {
                                                                    debug val => _537;
                                                                    scope 119 {
                                                                    }
                                                                }
                                                            }
                                                            scope 111 {
                                                                debug residual => _519;
                                                                scope 112 {
                                                                }
                                                            }
                                                            scope 113 {
                                                                debug val => _522;
                                                                scope 114 {
                                                                }
                                                            }
                                                        }
                                                        scope 106 {
                                                            debug residual => _504;
                                                            scope 107 {
                                                            }
                                                        }
                                                        scope 108 {
                                                            debug val => _507;
                                                            scope 109 {
                                                            }
                                                        }
                                                    }
                                                    scope 101 {
                                                        debug residual => _493;
                                                        scope 102 {
                                                        }
                                                    }
                                                    scope 103 {
                                                        debug val => _496;
                                                        scope 104 {
                                                        }
                                                    }
                                                }
                                                scope 90 {
                                                    debug residual => _425;
                                                    scope 91 {
                                                    }
                                                }
                                                scope 92 {
                                                    debug val => _428;
                                                    scope 93 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 84 {
                                            debug residual => _411;
                                            scope 85 {
                                            }
                                        }
                                        scope 86 {
                                            debug val => _414;
                                            scope 87 {
                                            }
                                        }
                                    }
                                    scope 66 {
                                        debug residual => _332;
                                        scope 67 {
                                        }
                                    }
                                    scope 68 {
                                        debug val => _335;
                                        scope 69 {
                                        }
                                    }
                                    scope 70 {
                                        debug residual => _337;
                                        scope 71 {
                                        }
                                    }
                                    scope 72 {
                                        debug val => _340;
                                        scope 73 {
                                        }
                                    }
                                }
                                scope 38 {
                                    debug residual => _198;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _201;
                                    scope 41 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _35;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _38;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _24;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _27;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _1456 = const false;
        _1455 = const false;
        _1454 = const false;
        _1451 = const false;
        _1450 = const false;
        _1447 = const false;
        _1446 = const false;
        _1453 = const false;
        _1452 = const false;
        _1449 = const false;
        _1448 = const false;
        _1445 = const false;
        _1444 = const false;
        _1457 = const false;
        StorageLive(_15);
        _15 = ((*_13).4: i64);
        StorageLive(_16);
        _16 = ((*_13).0: u64);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_2);
        _20 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _21) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _19 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _20, move _22) -> [return: bb2, unwind: bb731];
    }

    bb2: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _19) -> [return: bb3, unwind: bb731];
    }

    bb3: {
        StorageDead(_19);
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_27);
        _27 = move ((_18 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _1456 = const true;
        _17 = move _27;
        StorageDead(_27);
        _1460 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_5);
        _31 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _32) -> [return: bb8, unwind: bb781];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_24);
        _24 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb7, unwind: bb782];
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_24);
        _1458 = discriminant(_18);
        StorageDead(_18);
        goto -> bb701;
    }

    bb8: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _30 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _31, move _33) -> [return: bb9, unwind: bb781];
    }

    bb9: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _30) -> [return: bb10, unwind: bb781];
    }

    bb10: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_38);
        _38 = move ((_29 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _1455 = const true;
        _28 = move _38;
        StorageDead(_38);
        _1464 = discriminant(_29);
        StorageDead(_29);
        StorageLive(_39);
        _39 = ((*_14).11: u32);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_14).21: u16);
        _40 = move _41 as u128 (IntToInt);
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_14).20: u8);
        _42 = move _43 as u128 (IntToInt);
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_17;
        _49 = <RefMut<'_, User> as Deref>::deref(move _50) -> [return: bb14, unwind: bb778];
    }

    bb12: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb13, unwind: bb779];
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_35);
        _1462 = discriminant(_29);
        StorageDead(_29);
        goto -> bb700;
    }

    bb14: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = User::is_bankrupt(move _48) -> [return: bb15, unwind: bb778];
    }

    bb15: {
        switchInt(move _47) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_48);
        StorageDead(_49);
        StorageLive(_52);
        _52 = error::ErrorCode::UserBankrupt;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _1443 = const _;
        _63 = &(*_1443);
        _62 = &(*_63);
        _61 = move _62 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_52;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _70) -> [return: bb18, unwind: bb778];
    }

    bb17: {
        StorageDead(_48);
        StorageDead(_49);
        StorageLive(_51);
        _51 = ();
        _46 = std::result::Result::<(), error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        goto -> bb29;
    }

    bb18: {
        StorageDead(_70);
        _68 = [move _69];
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = move _66 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_66);
        _60 = Arguments::<'_>::new_v1(move _61, move _65) -> [return: bb19, unwind: bb778];
    }

    bb19: {
        StorageDead(_65);
        StorageDead(_61);
        _59 = format(move _60) -> [return: bb20, unwind: bb778];
    }

    bb20: {
        StorageDead(_60);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_63);
        _58 = move _59;
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <String as Deref>::deref(move _56) -> [return: bb21, unwind: bb730];
    }

    bb21: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = solana_program::log::sol_log(move _54) -> [return: bb22, unwind: bb730];
    }

    bb22: {
        StorageDead(_54);
        drop(_58) -> [return: bb23, unwind: bb778];
    }

    bb23: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _1442 = const _;
        _82 = &(*_1442);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        _79 = Arguments::<'_>::new_const(move _80) -> [return: bb24, unwind: bb778];
    }

    bb24: {
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb25, unwind: bb778];
    }

    bb25: {
        StorageDead(_79);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb26, unwind: bb729];
    }

    bb26: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb27, unwind: bb729];
    }

    bb27: {
        StorageDead(_73);
        drop(_77) -> [return: bb28, unwind: bb778];
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_84);
        _84 = _52;
        _46 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_52);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_47);
        _45 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _46) -> [return: bb30, unwind: bb778];
    }

    bb30: {
        StorageDead(_46);
        _85 = discriminant(_45);
        switchInt(move _85) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_89);
        _89 = ((_45 as Continue).0: ());
        _44 = _89;
        StorageDead(_89);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_28;
        _95 = <RefMut<'_, User> as Deref>::deref(move _96) -> [return: bb34, unwind: bb778];
    }

    bb32: {
        StorageLive(_86);
        _86 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb33, unwind: bb778];
    }

    bb33: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb699;
    }

    bb34: {
        StorageDead(_96);
        _94 = ((*_95).27: u8);
        _93 = Eq(move _94, const 0_u8);
        switchInt(move _93) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_97);
        _97 = ();
        _92 = std::result::Result::<(), error::ErrorCode>::Ok(move _97);
        StorageDead(_97);
        goto -> bb50;
    }

    bb36: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_98);
        _98 = error::ErrorCode::InvalidPoolId;
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _1441 = const _;
        _109 = &(*_1441);
        _108 = &(*_109);
        _107 = move _108 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_98;
        _116 = &(*_117);
        _115 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _116) -> [return: bb37, unwind: bb778];
    }

    bb37: {
        StorageDead(_116);
        _114 = [move _115];
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = move _112 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_112);
        _106 = Arguments::<'_>::new_v1(move _107, move _111) -> [return: bb38, unwind: bb778];
    }

    bb38: {
        StorageDead(_111);
        StorageDead(_107);
        _105 = format(move _106) -> [return: bb39, unwind: bb778];
    }

    bb39: {
        StorageDead(_106);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_109);
        _104 = move _105;
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = <String as Deref>::deref(move _102) -> [return: bb40, unwind: bb728];
    }

    bb40: {
        _100 = &(*_101);
        StorageDead(_102);
        _99 = solana_program::log::sol_log(move _100) -> [return: bb41, unwind: bb728];
    }

    bb41: {
        StorageDead(_100);
        drop(_104) -> [return: bb42, unwind: bb778];
    }

    bb42: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _1440 = const _;
        _128 = &(*_1440);
        _127 = &(*_128);
        _126 = move _127 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_28;
        _137 = <RefMut<'_, User> as Deref>::deref(move _138) -> [return: bb43, unwind: bb778];
    }

    bb43: {
        StorageDead(_138);
        _136 = &((*_137).27: u8);
        _135 = &(*_136);
        _134 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _135) -> [return: bb44, unwind: bb778];
    }

    bb44: {
        StorageDead(_135);
        _133 = [move _134];
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = move _131 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_131);
        _125 = Arguments::<'_>::new_v1(move _126, move _130) -> [return: bb45, unwind: bb778];
    }

    bb45: {
        StorageDead(_130);
        StorageDead(_126);
        _124 = format(move _125) -> [return: bb46, unwind: bb778];
    }

    bb46: {
        StorageDead(_125);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        _123 = move _124;
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = <String as Deref>::deref(move _121) -> [return: bb47, unwind: bb727];
    }

    bb47: {
        _119 = &(*_120);
        StorageDead(_121);
        _118 = solana_program::log::sol_log(move _119) -> [return: bb48, unwind: bb727];
    }

    bb48: {
        StorageDead(_119);
        drop(_123) -> [return: bb49, unwind: bb778];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageLive(_139);
        _139 = _98;
        _92 = std::result::Result::<(), error::ErrorCode>::Err(move _139);
        StorageDead(_139);
        StorageDead(_98);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_93);
        _91 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _92) -> [return: bb51, unwind: bb778];
    }

    bb51: {
        StorageDead(_92);
        _140 = discriminant(_91);
        switchInt(move _140) -> [0: bb52, 1: bb53, otherwise: bb5];
    }

    bb52: {
        StorageLive(_144);
        _144 = ((_91 as Continue).0: ());
        _90 = _144;
        StorageDead(_144);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_28;
        _150 = <RefMut<'_, User> as Deref>::deref(move _151) -> [return: bb55, unwind: bb778];
    }

    bb53: {
        StorageLive(_141);
        _141 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb54, unwind: bb778];
    }

    bb54: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb699;
    }

    bb55: {
        _149 = &(*_150);
        StorageDead(_151);
        _148 = User::is_bankrupt(move _149) -> [return: bb56, unwind: bb778];
    }

    bb56: {
        switchInt(move _148) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        StorageDead(_149);
        StorageDead(_150);
        StorageLive(_153);
        _153 = error::ErrorCode::UserBankrupt;
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _1439 = const _;
        _164 = &(*_1439);
        _163 = &(*_164);
        _162 = move _163 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_163);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_153;
        _171 = &(*_172);
        _170 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _171) -> [return: bb59, unwind: bb778];
    }

    bb58: {
        StorageDead(_149);
        StorageDead(_150);
        StorageLive(_152);
        _152 = ();
        _147 = std::result::Result::<(), error::ErrorCode>::Ok(move _152);
        StorageDead(_152);
        goto -> bb70;
    }

    bb59: {
        StorageDead(_171);
        _169 = [move _170];
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = move _167 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_167);
        _161 = Arguments::<'_>::new_v1(move _162, move _166) -> [return: bb60, unwind: bb778];
    }

    bb60: {
        StorageDead(_166);
        StorageDead(_162);
        _160 = format(move _161) -> [return: bb61, unwind: bb778];
    }

    bb61: {
        StorageDead(_161);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_164);
        _159 = move _160;
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = <String as Deref>::deref(move _157) -> [return: bb62, unwind: bb726];
    }

    bb62: {
        _155 = &(*_156);
        StorageDead(_157);
        _154 = solana_program::log::sol_log(move _155) -> [return: bb63, unwind: bb726];
    }

    bb63: {
        StorageDead(_155);
        drop(_159) -> [return: bb64, unwind: bb778];
    }

    bb64: {
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _1438 = const _;
        _183 = &(*_1438);
        _182 = &(*_183);
        _181 = move _182 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_182);
        _180 = Arguments::<'_>::new_const(move _181) -> [return: bb65, unwind: bb778];
    }

    bb65: {
        StorageDead(_181);
        _179 = format(move _180) -> [return: bb66, unwind: bb778];
    }

    bb66: {
        StorageDead(_180);
        StorageDead(_183);
        _178 = move _179;
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = <String as Deref>::deref(move _176) -> [return: bb67, unwind: bb725];
    }

    bb67: {
        _174 = &(*_175);
        StorageDead(_176);
        _173 = solana_program::log::sol_log(move _174) -> [return: bb68, unwind: bb725];
    }

    bb68: {
        StorageDead(_174);
        drop(_178) -> [return: bb69, unwind: bb778];
    }

    bb69: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_185);
        _185 = _153;
        _147 = std::result::Result::<(), error::ErrorCode>::Err(move _185);
        StorageDead(_185);
        StorageDead(_153);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_148);
        _146 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _147) -> [return: bb71, unwind: bb778];
    }

    bb71: {
        StorageDead(_147);
        _186 = discriminant(_146);
        switchInt(move _186) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        StorageLive(_190);
        _190 = ((_146 as Continue).0: ());
        _145 = _190;
        StorageDead(_190);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &(*_10);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &_1;
        _195 = &(*_196);
        _193 = PerpMarketMap::<'_>::get_ref(move _194, move _195) -> [return: bb75, unwind: bb778];
    }

    bb73: {
        StorageLive(_187);
        _187 = ((_146 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_189);
        _189 = _187;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _189) -> [return: bb74, unwind: bb778];
    }

    bb74: {
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb699;
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_194);
        _192 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _193) -> [return: bb76, unwind: bb778];
    }

    bb76: {
        StorageDead(_193);
        _197 = discriminant(_192);
        switchInt(move _197) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_201);
        _201 = move ((_192 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1454 = const true;
        _191 = move _201;
        StorageDead(_201);
        _1468 = discriminant(_192);
        StorageDead(_196);
        StorageDead(_192);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &_191;
        _207 = <Ref<'_, PerpMarket> as Deref>::deref(move _208) -> [return: bb80, unwind: bb775];
    }

    bb78: {
        StorageLive(_198);
        _198 = ((_192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_200);
        _200 = _198;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _200) -> [return: bb79, unwind: bb776];
    }

    bb79: {
        StorageDead(_200);
        StorageDead(_198);
        _1466 = discriminant(_192);
        StorageDead(_196);
        StorageDead(_192);
        goto -> bb698;
    }

    bb80: {
        _206 = &(*_207);
        StorageDead(_208);
        StorageLive(_209);
        _209 = PerpOperation::Liquidation;
        _205 = PerpMarket::is_operation_paused(move _206, move _209) -> [return: bb81, unwind: bb775];
    }

    bb81: {
        switchInt(move _205) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_207);
        StorageLive(_211);
        _211 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _1437 = const _;
        _222 = &(*_1437);
        _221 = &(*_222);
        _220 = move _221 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_221);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &_211;
        _229 = &(*_230);
        _228 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _229) -> [return: bb84, unwind: bb775];
    }

    bb83: {
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_207);
        StorageLive(_210);
        _210 = ();
        _204 = std::result::Result::<(), error::ErrorCode>::Ok(move _210);
        StorageDead(_210);
        goto -> bb96;
    }

    bb84: {
        StorageDead(_229);
        _227 = [move _228];
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _224 = move _225 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_225);
        _219 = Arguments::<'_>::new_v1(move _220, move _224) -> [return: bb85, unwind: bb775];
    }

    bb85: {
        StorageDead(_224);
        StorageDead(_220);
        _218 = format(move _219) -> [return: bb86, unwind: bb775];
    }

    bb86: {
        StorageDead(_219);
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_222);
        _217 = move _218;
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = <String as Deref>::deref(move _215) -> [return: bb87, unwind: bb724];
    }

    bb87: {
        _213 = &(*_214);
        StorageDead(_215);
        _212 = solana_program::log::sol_log(move _213) -> [return: bb88, unwind: bb724];
    }

    bb88: {
        StorageDead(_213);
        drop(_217) -> [return: bb89, unwind: bb775];
    }

    bb89: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _1436 = const _;
        _241 = &(*_1436);
        _240 = &(*_241);
        _239 = move _240 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_240);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_1;
        _248 = &(*_249);
        _247 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _248) -> [return: bb90, unwind: bb775];
    }

    bb90: {
        StorageDead(_248);
        _246 = [move _247];
        StorageDead(_247);
        _245 = &_246;
        _244 = &(*_245);
        _243 = move _244 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_244);
        _238 = Arguments::<'_>::new_v1(move _239, move _243) -> [return: bb91, unwind: bb775];
    }

    bb91: {
        StorageDead(_243);
        StorageDead(_239);
        _237 = format(move _238) -> [return: bb92, unwind: bb775];
    }

    bb92: {
        StorageDead(_238);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_241);
        _236 = move _237;
        StorageDead(_237);
        _235 = &_236;
        _234 = &(*_235);
        _233 = <String as Deref>::deref(move _234) -> [return: bb93, unwind: bb723];
    }

    bb93: {
        _232 = &(*_233);
        StorageDead(_234);
        _231 = solana_program::log::sol_log(move _232) -> [return: bb94, unwind: bb723];
    }

    bb94: {
        StorageDead(_232);
        drop(_236) -> [return: bb95, unwind: bb775];
    }

    bb95: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_231);
        StorageLive(_250);
        _250 = _211;
        _204 = std::result::Result::<(), error::ErrorCode>::Err(move _250);
        StorageDead(_250);
        StorageDead(_211);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_205);
        _203 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _204) -> [return: bb97, unwind: bb775];
    }

    bb97: {
        StorageDead(_204);
        _251 = discriminant(_203);
        switchInt(move _251) -> [0: bb98, 1: bb99, otherwise: bb5];
    }

    bb98: {
        StorageLive(_255);
        _255 = ((_203 as Continue).0: ());
        _202 = _255;
        StorageDead(_255);
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_256);
        StorageLive(_257);
        _1454 = const false;
        _257 = move _191;
        _256 = std::mem::drop::<Ref<'_, PerpMarket>>(move _257) -> [return: bb101, unwind: bb775];
    }

    bb99: {
        StorageLive(_252);
        _252 = ((_203 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_254);
        _254 = _252;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _254) -> [return: bb100, unwind: bb775];
    }

    bb100: {
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb750;
    }

    bb101: {
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &mut _17;
        _263 = &mut (*_264);
        _262 = <RefMut<'_, User> as DerefMut>::deref_mut(move _263) -> [return: bb102, unwind: bb775];
    }

    bb102: {
        _261 = &mut (*_262);
        StorageDead(_263);
        StorageLive(_265);
        _265 = &(*_3);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &(*_10);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_1;
        _273 = &(*_274);
        _271 = PerpMarketMap::<'_>::get_ref_mut(move _272, move _273) -> [return: bb103, unwind: bb775];
    }

    bb103: {
        StorageDead(_273);
        StorageDead(_272);
        _270 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _271) -> [return: bb104, unwind: bb775];
    }

    bb104: {
        _1453 = const true;
        StorageDead(_271);
        _275 = discriminant(_270);
        switchInt(move _275) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_279);
        _279 = move ((_270 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _269 = move _279;
        StorageDead(_279);
        _268 = &mut _269;
        _267 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _268) -> [return: bb108, unwind: bb722];
    }

    bb106: {
        StorageLive(_276);
        _276 = ((_270 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_278);
        _278 = _276;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _278) -> [return: bb107, unwind: bb773];
    }

    bb107: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_261);
        StorageDead(_260);
        goto -> bb748;
    }

    bb108: {
        _266 = &mut (*_267);
        StorageDead(_268);
        StorageLive(_280);
        _280 = _15;
        _260 = controller::funding::settle_funding_payment(move _261, move _265, move _266, move _280) -> [return: bb109, unwind: bb722];
    }

    bb109: {
        StorageDead(_280);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_261);
        _259 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _260) -> [return: bb110, unwind: bb722];
    }

    bb110: {
        StorageDead(_260);
        _281 = discriminant(_259);
        switchInt(move _281) -> [0: bb111, 1: bb112, otherwise: bb5];
    }

    bb111: {
        StorageLive(_285);
        _285 = ((_259 as Continue).0: ());
        _258 = _285;
        StorageDead(_285);
        drop(_269) -> [return: bb732, unwind: bb773];
    }

    bb112: {
        StorageLive(_282);
        _282 = ((_259 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_284);
        _284 = _282;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _284) -> [return: bb113, unwind: bb722];
    }

    bb113: {
        StorageDead(_284);
        StorageDead(_282);
        drop(_269) -> [return: bb748, unwind: bb773];
    }

    bb114: {
        _289 = &mut (*_290);
        StorageDead(_291);
        StorageLive(_293);
        _293 = &(*_6);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &(*_10);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_1;
        _301 = &(*_302);
        _299 = PerpMarketMap::<'_>::get_ref_mut(move _300, move _301) -> [return: bb115, unwind: bb775];
    }

    bb115: {
        StorageDead(_301);
        StorageDead(_300);
        _298 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _299) -> [return: bb116, unwind: bb775];
    }

    bb116: {
        _1452 = const true;
        StorageDead(_299);
        _303 = discriminant(_298);
        switchInt(move _303) -> [0: bb117, 1: bb118, otherwise: bb5];
    }

    bb117: {
        StorageLive(_307);
        _307 = move ((_298 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _297 = move _307;
        StorageDead(_307);
        _296 = &mut _297;
        _295 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _296) -> [return: bb120, unwind: bb721];
    }

    bb118: {
        StorageLive(_304);
        _304 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_306);
        _306 = _304;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _306) -> [return: bb119, unwind: bb772];
    }

    bb119: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb747;
    }

    bb120: {
        _294 = &mut (*_295);
        StorageDead(_296);
        StorageLive(_308);
        _308 = _15;
        _288 = controller::funding::settle_funding_payment(move _289, move _293, move _294, move _308) -> [return: bb121, unwind: bb721];
    }

    bb121: {
        StorageDead(_308);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_289);
        _287 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _288) -> [return: bb122, unwind: bb721];
    }

    bb122: {
        StorageDead(_288);
        _309 = discriminant(_287);
        switchInt(move _309) -> [0: bb123, 1: bb124, otherwise: bb5];
    }

    bb123: {
        StorageLive(_313);
        _313 = ((_287 as Continue).0: ());
        _286 = _313;
        StorageDead(_313);
        drop(_297) -> [return: bb733, unwind: bb772];
    }

    bb124: {
        StorageLive(_310);
        _310 = ((_287 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_312);
        _312 = _310;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _312) -> [return: bb125, unwind: bb721];
    }

    bb125: {
        StorageDead(_312);
        StorageDead(_310);
        drop(_297) -> [return: bb747, unwind: bb772];
    }

    bb126: {
        _317 = &(*_318);
        StorageDead(_319);
        StorageLive(_321);
        _321 = &(*_10);
        StorageLive(_322);
        _322 = &(*_11);
        StorageLive(_323);
        _323 = &mut (*_12);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = _39;
        _327 = MarginContext::liquidation(move _328) -> [return: bb127, unwind: bb775];
    }

    bb127: {
        StorageDead(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = _1;
        _329 = MarketIdentifier::perp(move _330) -> [return: bb128, unwind: bb775];
    }

    bb128: {
        StorageDead(_330);
        _326 = MarginContext::track_market_margin_requirement(move _327, move _329) -> [return: bb129, unwind: bb775];
    }

    bb129: {
        StorageDead(_329);
        StorageDead(_327);
        _325 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _326) -> [return: bb130, unwind: bb775];
    }

    bb130: {
        StorageDead(_326);
        _331 = discriminant(_325);
        switchInt(move _331) -> [0: bb131, 1: bb132, otherwise: bb5];
    }

    bb131: {
        StorageLive(_335);
        _335 = ((_325 as Continue).0: state::margin_calculation::MarginContext);
        _324 = _335;
        StorageDead(_335);
        _316 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _317, move _321, move _322, move _323, move _324) -> [return: bb134, unwind: bb775];
    }

    bb132: {
        StorageLive(_332);
        _332 = ((_325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_334);
        _334 = _332;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _334) -> [return: bb133, unwind: bb775];
    }

    bb133: {
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb696;
    }

    bb134: {
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_317);
        _315 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _316) -> [return: bb135, unwind: bb775];
    }

    bb135: {
        StorageDead(_316);
        _336 = discriminant(_315);
        switchInt(move _336) -> [0: bb136, 1: bb137, otherwise: bb5];
    }

    bb136: {
        StorageLive(_340);
        _340 = ((_315 as Continue).0: state::margin_calculation::MarginCalculation);
        _314 = _340;
        StorageDead(_340);
        StorageDead(_325);
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_315);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &_17;
        _344 = <RefMut<'_, User> as Deref>::deref(move _345) -> [return: bb139, unwind: bb775];
    }

    bb137: {
        StorageLive(_337);
        _337 = ((_315 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_339);
        _339 = _337;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _339) -> [return: bb138, unwind: bb775];
    }

    bb138: {
        StorageDead(_339);
        StorageDead(_337);
        goto -> bb696;
    }

    bb139: {
        _343 = &(*_344);
        StorageDead(_345);
        _342 = User::is_being_liquidated(move _343) -> [return: bb140, unwind: bb775];
    }

    bb140: {
        switchInt(move _342) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        StorageDead(_343);
        StorageDead(_344);
        goto -> bb152;
    }

    bb142: {
        StorageDead(_343);
        StorageDead(_344);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &_314;
        _346 = MarginCalculation::meets_margin_requirement(move _347) -> [return: bb143, unwind: bb775];
    }

    bb143: {
        switchInt(move _346) -> [0: bb151, otherwise: bb144];
    }

    bb144: {
        StorageDead(_347);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _1435 = const _;
        _359 = &(*_1435);
        _358 = &(*_359);
        _357 = move _358 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_358);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &_314;
        _366 = &(*_367);
        _365 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _366) -> [return: bb145, unwind: bb775];
    }

    bb145: {
        StorageDead(_366);
        _364 = [move _365];
        StorageDead(_365);
        _363 = &_364;
        _362 = &(*_363);
        _361 = move _362 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_362);
        _356 = Arguments::<'_>::new_v1(move _357, move _361) -> [return: bb146, unwind: bb775];
    }

    bb146: {
        StorageDead(_361);
        StorageDead(_357);
        _355 = format(move _356) -> [return: bb147, unwind: bb775];
    }

    bb147: {
        StorageDead(_356);
        StorageDead(_367);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_359);
        _354 = move _355;
        StorageDead(_355);
        _353 = &_354;
        _352 = &(*_353);
        _351 = <String as Deref>::deref(move _352) -> [return: bb148, unwind: bb720];
    }

    bb148: {
        _350 = &(*_351);
        StorageDead(_352);
        _349 = solana_program::log::sol_log(move _350) -> [return: bb149, unwind: bb720];
    }

    bb149: {
        StorageDead(_350);
        drop(_354) -> [return: bb150, unwind: bb775];
    }

    bb150: {
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_349);
        StorageLive(_368);
        _368 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _368);
        StorageDead(_368);
        goto -> bb695;
    }

    bb151: {
        StorageDead(_347);
        goto -> bb152;
    }

    bb152: {
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &_17;
        _371 = <RefMut<'_, User> as Deref>::deref(move _372) -> [return: bb153, unwind: bb775];
    }

    bb153: {
        _370 = &(*_371);
        StorageDead(_372);
        _369 = User::is_being_liquidated(move _370) -> [return: bb154, unwind: bb775];
    }

    bb154: {
        switchInt(move _369) -> [0: bb165, otherwise: bb155];
    }

    bb155: {
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &_314;
        _375 = MarginCalculation::can_exit_liquidation(move _376) -> [return: bb156, unwind: bb775];
    }

    bb156: {
        StorageDead(_376);
        _374 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _375) -> [return: bb157, unwind: bb775];
    }

    bb157: {
        StorageDead(_375);
        _377 = discriminant(_374);
        switchInt(move _377) -> [0: bb158, 1: bb159, otherwise: bb5];
    }

    bb158: {
        StorageLive(_381);
        _381 = ((_374 as Continue).0: bool);
        _373 = _381;
        StorageDead(_381);
        switchInt(move _373) -> [0: bb162, otherwise: bb161];
    }

    bb159: {
        StorageLive(_378);
        _378 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_380);
        _380 = _378;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _380) -> [return: bb160, unwind: bb775];
    }

    bb160: {
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_374);
        goto -> bb694;
    }

    bb161: {
        StorageDead(_374);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &mut _17;
        _385 = <RefMut<'_, User> as DerefMut>::deref_mut(move _386) -> [return: bb163, unwind: bb775];
    }

    bb162: {
        StorageDead(_374);
        goto -> bb166;
    }

    bb163: {
        _384 = &mut (*_385);
        StorageDead(_386);
        _383 = User::exit_liquidation(move _384) -> [return: bb164, unwind: bb775];
    }

    bb164: {
        StorageDead(_384);
        StorageDead(_385);
        StorageDead(_383);
        StorageLive(_387);
        _387 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _387);
        StorageDead(_387);
        goto -> bb694;
    }

    bb165: {
        StorageDead(_371);
        StorageDead(_370);
        goto -> bb166;
    }

    bb166: {
        _341 = const ();
        StorageDead(_373);
        StorageDead(_369);
        StorageDead(_346);
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        _394 = &_17;
        _393 = <RefMut<'_, User> as Deref>::deref(move _394) -> [return: bb167, unwind: bb775];
    }

    bb167: {
        _392 = &(*_393);
        StorageDead(_394);
        StorageLive(_395);
        _395 = _1;
        _391 = User::get_perp_position(move _392, move _395) -> [return: bb168, unwind: bb775];
    }

    bb168: {
        StorageDead(_395);
        StorageDead(_392);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &_1;
        _396 = {closure@programs/drift/src/controller/liquidation.rs:799:50: 799:53} { market_index: move _397 };
        StorageDead(_397);
        _390 = std::result::Result::<&PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:799:50: 799:53}>(move _391, move _396) -> [return: bb169, unwind: bb775];
    }

    bb169: {
        StorageDead(_396);
        StorageDead(_391);
        _389 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _390) -> [return: bb170, unwind: bb775];
    }

    bb170: {
        StorageDead(_390);
        _398 = discriminant(_389);
        switchInt(move _398) -> [0: bb171, 1: bb172, otherwise: bb5];
    }

    bb171: {
        StorageLive(_402);
        _402 = ((_389 as Continue).0: &state::user::PerpPosition);
        _388 = _402;
        StorageDead(_402);
        StorageDead(_393);
        StorageDead(_389);
        StorageDead(_388);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &mut _17;
        _407 = <RefMut<'_, User> as DerefMut>::deref_mut(move _408) -> [return: bb174, unwind: bb775];
    }

    bb172: {
        StorageLive(_399);
        _399 = ((_389 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_401);
        _401 = _399;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _401) -> [return: bb173, unwind: bb775];
    }

    bb173: {
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_393);
        StorageDead(_389);
        StorageDead(_388);
        goto -> bb697;
    }

    bb174: {
        _406 = &mut (*_407);
        StorageDead(_408);
        StorageLive(_409);
        _409 = _16;
        _405 = User::enter_liquidation(move _406, move _409) -> [return: bb175, unwind: bb775];
    }

    bb175: {
        StorageDead(_409);
        StorageDead(_406);
        _404 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _405) -> [return: bb176, unwind: bb775];
    }

    bb176: {
        StorageDead(_405);
        _410 = discriminant(_404);
        switchInt(move _410) -> [0: bb177, 1: bb178, otherwise: bb5];
    }

    bb177: {
        StorageLive(_414);
        _414 = ((_404 as Continue).0: u16);
        _403 = _414;
        StorageDead(_414);
        StorageDead(_407);
        StorageDead(_404);
        StorageLive(_415);
        _415 = const 0_u64;
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_17;
        _421 = <RefMut<'_, User> as Deref>::deref(move _422) -> [return: bb180, unwind: bb775];
    }

    bb178: {
        StorageLive(_411);
        _411 = ((_404 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_413);
        _413 = _411;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _413) -> [return: bb179, unwind: bb775];
    }

    bb179: {
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_407);
        StorageDead(_404);
        goto -> bb693;
    }

    bb180: {
        StorageDead(_422);
        _420 = &((*_421).4: [state::user::PerpPosition; 8]);
        _419 = &(*_420);
        StorageLive(_423);
        _423 = _1;
        _418 = get_position_index(move _419, move _423) -> [return: bb181, unwind: bb775];
    }

    bb181: {
        StorageDead(_423);
        StorageDead(_419);
        _417 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _418) -> [return: bb182, unwind: bb775];
    }

    bb182: {
        StorageDead(_418);
        _424 = discriminant(_417);
        switchInt(move _424) -> [0: bb183, 1: bb184, otherwise: bb5];
    }

    bb183: {
        StorageLive(_428);
        _428 = ((_417 as Continue).0: usize);
        _416 = _428;
        StorageDead(_428);
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_417);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _435 = &_17;
        _434 = <RefMut<'_, User> as Deref>::deref(move _435) -> [return: bb186, unwind: bb775];
    }

    bb184: {
        StorageLive(_425);
        _425 = ((_417 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_427);
        _427 = _425;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _427) -> [return: bb185, unwind: bb775];
    }

    bb185: {
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_417);
        goto -> bb692;
    }

    bb186: {
        StorageDead(_435);
        StorageLive(_436);
        _436 = _416;
        _437 = Len(((*_434).4: [state::user::PerpPosition; 8]));
        _438 = Lt(_436, _437);
        assert(move _438, "index out of bounds: the length is {} but the index is {}", move _437, _436) -> [success: bb187, unwind: bb775];
    }

    bb187: {
        _433 = &((*_434).4: [state::user::PerpPosition; 8])[_436];
        _432 = PerpPosition::is_open_position(move _433) -> [return: bb188, unwind: bb775];
    }

    bb188: {
        switchInt(move _432) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb194;
    }

    bb190: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &_17;
        _441 = <RefMut<'_, User> as Deref>::deref(move _442) -> [return: bb191, unwind: bb775];
    }

    bb191: {
        StorageDead(_442);
        StorageLive(_443);
        _443 = _416;
        _444 = Len(((*_441).4: [state::user::PerpPosition; 8]));
        _445 = Lt(_443, _444);
        assert(move _445, "index out of bounds: the length is {} but the index is {}", move _444, _443) -> [success: bb192, unwind: bb775];
    }

    bb192: {
        _440 = &((*_441).4: [state::user::PerpPosition; 8])[_443];
        _439 = PerpPosition::has_open_order(move _440) -> [return: bb193, unwind: bb775];
    }

    bb193: {
        switchInt(move _439) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_440);
        StorageLive(_446);
        _446 = ();
        _431 = std::result::Result::<(), error::ErrorCode>::Ok(move _446);
        StorageDead(_446);
        goto -> bb202;
    }

    bb195: {
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_440);
        StorageLive(_447);
        _447 = error::ErrorCode::PositionDoesntHaveOpenPositionOrOrders;
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _1434 = const _;
        _458 = &(*_1434);
        _457 = &(*_458);
        _456 = move _457 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_457);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = &_447;
        _465 = &(*_466);
        _464 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _465) -> [return: bb196, unwind: bb775];
    }

    bb196: {
        StorageDead(_465);
        _463 = [move _464];
        StorageDead(_464);
        _462 = &_463;
        _461 = &(*_462);
        _460 = move _461 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_461);
        _455 = Arguments::<'_>::new_v1(move _456, move _460) -> [return: bb197, unwind: bb775];
    }

    bb197: {
        StorageDead(_460);
        StorageDead(_456);
        _454 = format(move _455) -> [return: bb198, unwind: bb775];
    }

    bb198: {
        StorageDead(_455);
        StorageDead(_466);
        StorageDead(_463);
        StorageDead(_462);
        StorageDead(_458);
        _453 = move _454;
        StorageDead(_454);
        _452 = &_453;
        _451 = &(*_452);
        _450 = <String as Deref>::deref(move _451) -> [return: bb199, unwind: bb719];
    }

    bb199: {
        _449 = &(*_450);
        StorageDead(_451);
        _448 = solana_program::log::sol_log(move _449) -> [return: bb200, unwind: bb719];
    }

    bb200: {
        StorageDead(_449);
        drop(_453) -> [return: bb201, unwind: bb775];
    }

    bb201: {
        StorageDead(_453);
        StorageDead(_452);
        StorageDead(_450);
        StorageDead(_448);
        StorageLive(_467);
        _467 = _447;
        _431 = std::result::Result::<(), error::ErrorCode>::Err(move _467);
        StorageDead(_467);
        StorageDead(_447);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_439);
        StorageDead(_432);
        _430 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _431) -> [return: bb203, unwind: bb775];
    }

    bb203: {
        StorageDead(_431);
        _468 = discriminant(_430);
        switchInt(move _468) -> [0: bb204, 1: bb205, otherwise: bb5];
    }

    bb204: {
        StorageLive(_472);
        _472 = ((_430 as Continue).0: ());
        _429 = _472;
        StorageDead(_472);
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = &mut _17;
        _478 = &mut (*_479);
        _477 = <RefMut<'_, User> as DerefMut>::deref_mut(move _478) -> [return: bb207, unwind: bb775];
    }

    bb205: {
        StorageLive(_469);
        _469 = ((_430 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_471);
        _471 = _469;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _471) -> [return: bb206, unwind: bb775];
    }

    bb206: {
        StorageDead(_471);
        StorageDead(_469);
        StorageDead(_430);
        StorageDead(_429);
        goto -> bb692;
    }

    bb207: {
        _476 = &mut (*_477);
        StorageDead(_478);
        StorageLive(_480);
        _480 = &(*_3);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &(*_6);
        _481 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _482);
        StorageDead(_482);
        StorageLive(_483);
        _483 = &(*_10);
        StorageLive(_484);
        _484 = &(*_11);
        StorageLive(_485);
        _485 = &mut (*_12);
        StorageLive(_486);
        _486 = _15;
        StorageLive(_487);
        _487 = _16;
        StorageLive(_488);
        _488 = OrderActionExplanation::Liquidation;
        StorageLive(_489);
        _489 = Option::<state::user::MarketType>::None;
        StorageLive(_490);
        _490 = Option::<u16>::None;
        StorageLive(_491);
        _491 = Option::<controller::position::PositionDirection>::None;
        _475 = controller::orders::cancel_orders(move _476, move _480, move _481, move _483, move _484, move _485, move _486, move _487, move _488, move _489, move _490, move _491) -> [return: bb208, unwind: bb775];
    }

    bb208: {
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_487);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_481);
        StorageDead(_480);
        StorageDead(_476);
        _474 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _475) -> [return: bb209, unwind: bb775];
    }

    bb209: {
        StorageDead(_475);
        _492 = discriminant(_474);
        switchInt(move _492) -> [0: bb210, 1: bb211, otherwise: bb5];
    }

    bb210: {
        StorageLive(_496);
        _496 = move ((_474 as Continue).0: std::vec::Vec<u32>);
        _1451 = const true;
        _473 = move _496;
        StorageDead(_496);
        _1476 = discriminant(_474);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_474);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _500 = &(*_10);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &_1;
        _501 = &(*_502);
        _499 = PerpMarketMap::<'_>::get_ref_mut(move _500, move _501) -> [return: bb213, unwind: bb770];
    }

    bb211: {
        StorageLive(_493);
        _493 = ((_474 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_495);
        _495 = _493;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _495) -> [return: bb212, unwind: bb771];
    }

    bb212: {
        StorageDead(_495);
        StorageDead(_493);
        _1474 = discriminant(_474);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_474);
        goto -> bb691;
    }

    bb213: {
        StorageDead(_501);
        StorageDead(_500);
        _498 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _499) -> [return: bb214, unwind: bb770];
    }

    bb214: {
        StorageDead(_499);
        _503 = discriminant(_498);
        switchInt(move _503) -> [0: bb215, 1: bb216, otherwise: bb5];
    }

    bb215: {
        StorageLive(_507);
        _507 = move ((_498 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1450 = const true;
        _497 = move _507;
        StorageDead(_507);
        _1480 = discriminant(_498);
        StorageDead(_502);
        StorageDead(_498);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &mut (*_12);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        _517 = &_497;
        _516 = <RefMut<'_, PerpMarket> as Deref>::deref(move _517) -> [return: bb218, unwind: bb767];
    }

    bb216: {
        StorageLive(_504);
        _504 = ((_498 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_506);
        _506 = _504;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _506) -> [return: bb217, unwind: bb768];
    }

    bb217: {
        StorageDead(_506);
        StorageDead(_504);
        _1478 = discriminant(_498);
        StorageDead(_502);
        StorageDead(_498);
        goto -> bb690;
    }

    bb218: {
        _515 = &(*_516);
        StorageDead(_517);
        _514 = PerpMarket::oracle_id(move _515) -> [return: bb219, unwind: bb767];
    }

    bb219: {
        StorageDead(_515);
        _513 = &_514;
        _512 = &(*_513);
        _510 = OracleMap::<'_>::get_price_data(move _511, move _512) -> [return: bb220, unwind: bb767];
    }

    bb220: {
        StorageDead(_512);
        StorageDead(_511);
        _509 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _510) -> [return: bb221, unwind: bb767];
    }

    bb221: {
        StorageDead(_510);
        _518 = discriminant(_509);
        switchInt(move _518) -> [0: bb222, 1: bb223, otherwise: bb5];
    }

    bb222: {
        StorageLive(_522);
        _522 = ((_509 as Continue).0: &state::oracle::OraclePriceData);
        _508 = _522;
        StorageDead(_522);
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_509);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = &_497;
        _527 = <RefMut<'_, PerpMarket> as Deref>::deref(move _528) -> [return: bb225, unwind: bb767];
    }

    bb223: {
        StorageLive(_519);
        _519 = ((_509 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_521);
        _521 = _519;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _521) -> [return: bb224, unwind: bb767];
    }

    bb224: {
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_509);
        goto -> bb689;
    }

    bb225: {
        _526 = &(*_527);
        StorageDead(_528);
        StorageLive(_529);
        _529 = (*_508);
        StorageLive(_530);
        _530 = _16;
        StorageLive(_531);
        StorageLive(_532);
        _532 = &(((*_14).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _531 = &(*_532);
        _525 = PerpMarket::get_mm_oracle_price_data(move _526, move _529, move _530, move _531) -> [return: bb226, unwind: bb767];
    }

    bb226: {
        StorageDead(_531);
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_526);
        _524 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as Try>::branch(move _525) -> [return: bb227, unwind: bb767];
    }

    bb227: {
        StorageDead(_525);
        _533 = discriminant(_524);
        switchInt(move _533) -> [0: bb228, 1: bb229, otherwise: bb5];
    }

    bb228: {
        StorageLive(_537);
        _537 = ((_524 as Continue).0: state::oracle::MMOraclePriceData);
        _523 = _537;
        StorageDead(_537);
        StorageDead(_532);
        StorageDead(_527);
        StorageDead(_524);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        _544 = &mut _497;
        _543 = &mut (*_544);
        _542 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _543) -> [return: bb231, unwind: bb767];
    }

    bb229: {
        StorageLive(_534);
        _534 = ((_524 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_536);
        _536 = _534;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _536) -> [return: bb230, unwind: bb767];
    }

    bb230: {
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_527);
        StorageDead(_524);
        goto -> bb688;
    }

    bb231: {
        _541 = &mut (*_542);
        StorageDead(_543);
        StorageLive(_545);
        StorageLive(_546);
        _546 = &_523;
        _545 = &(*_546);
        StorageLive(_547);
        _547 = &(*_14);
        StorageLive(_548);
        _548 = _15;
        StorageLive(_549);
        _549 = _16;
        StorageLive(_550);
        StorageLive(_551);
        _551 = DriftAction::Liquidate;
        _550 = Option::<DriftAction>::Some(move _551);
        StorageDead(_551);
        _540 = update_amm_and_check_validity(move _541, move _545, move _547, move _548, move _549, move _550) -> [return: bb232, unwind: bb767];
    }

    bb232: {
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_547);
        StorageDead(_545);
        StorageDead(_541);
        _539 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _540) -> [return: bb233, unwind: bb767];
    }

    bb233: {
        StorageDead(_540);
        _552 = discriminant(_539);
        switchInt(move _552) -> [0: bb234, 1: bb235, otherwise: bb5];
    }

    bb234: {
        StorageLive(_556);
        _556 = ((_539 as Continue).0: ());
        _538 = _556;
        StorageDead(_556);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_539);
        StorageDead(_538);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        _561 = &_497;
        _560 = <RefMut<'_, PerpMarket> as Deref>::deref(move _561) -> [return: bb237, unwind: bb767];
    }

    bb235: {
        StorageLive(_553);
        _553 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_555);
        _555 = _553;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _555) -> [return: bb236, unwind: bb767];
    }

    bb236: {
        StorageDead(_555);
        StorageDead(_553);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb688;
    }

    bb237: {
        StorageDead(_561);
        _559 = &((*_560).22: state::perp_market::MarketStatus);
        StorageLive(_562);
        _1433 = const _;
        _562 = &(*_1433);
        _558 = <state::perp_market::MarketStatus as PartialEq>::eq(move _559, move _562) -> [return: bb238, unwind: bb767];
    }

    bb238: {
        switchInt(move _558) -> [0: bb241, otherwise: bb239];
    }

    bb239: {
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_559);
        StorageLive(_564);
        StorageLive(_565);
        _565 = &_497;
        _564 = <RefMut<'_, PerpMarket> as Deref>::deref(move _565) -> [return: bb240, unwind: bb767];
    }

    bb240: {
        StorageDead(_565);
        _557 = ((*_564).7: i64);
        StorageDead(_564);
        goto -> bb242;
    }

    bb241: {
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_559);
        _557 = ((*_508).0: i64);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_558);
        StorageLive(_566);
        StorageLive(_567);
        _1450 = const false;
        _567 = move _497;
        _566 = std::mem::drop::<RefMut<'_, PerpMarket>>(move _567) -> [return: bb243, unwind: bb767];
    }

    bb243: {
        StorageDead(_567);
        StorageDead(_566);
        StorageLive(_568);
        _568 = const 0_u64;
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        _571 = &_473;
        _570 = Vec::<u32>::is_empty(move _571) -> [return: bb244, unwind: bb767];
    }

    bb244: {
        switchInt(move _570) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        StorageDead(_571);
        StorageLive(_572);
        StorageLive(_573);
        _573 = _568;
        _572 = Gt(move _573, const 0_u64);
        switchInt(move _572) -> [0: bb248, otherwise: bb247];
    }

    bb246: {
        StorageDead(_571);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        _580 = &_17;
        _579 = &(*_580);
        _578 = <RefMut<'_, User> as Deref>::deref(move _579) -> [return: bb249, unwind: bb767];
    }

    bb248: {
        StorageDead(_573);
        _569 = _314;
        goto -> bb303;
    }

    bb249: {
        _577 = &(*_578);
        StorageDead(_579);
        StorageLive(_581);
        _581 = &(*_10);
        StorageLive(_582);
        _582 = &(*_11);
        StorageLive(_583);
        _583 = &mut (*_12);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        _588 = _39;
        _587 = MarginContext::liquidation(move _588) -> [return: bb250, unwind: bb767];
    }

    bb250: {
        StorageDead(_588);
        StorageLive(_589);
        StorageLive(_590);
        _590 = _1;
        _589 = MarketIdentifier::perp(move _590) -> [return: bb251, unwind: bb767];
    }

    bb251: {
        StorageDead(_590);
        _586 = MarginContext::track_market_margin_requirement(move _587, move _589) -> [return: bb252, unwind: bb767];
    }

    bb252: {
        StorageDead(_589);
        StorageDead(_587);
        _585 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _586) -> [return: bb253, unwind: bb767];
    }

    bb253: {
        StorageDead(_586);
        _591 = discriminant(_585);
        switchInt(move _591) -> [0: bb254, 1: bb255, otherwise: bb5];
    }

    bb254: {
        StorageLive(_595);
        _595 = ((_585 as Continue).0: state::margin_calculation::MarginContext);
        _584 = _595;
        StorageDead(_595);
        _576 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _577, move _581, move _582, move _583, move _584) -> [return: bb257, unwind: bb767];
    }

    bb255: {
        StorageLive(_592);
        _592 = ((_585 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_594);
        _594 = _592;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _594) -> [return: bb256, unwind: bb767];
    }

    bb256: {
        StorageDead(_594);
        StorageDead(_592);
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_577);
        StorageDead(_576);
        goto -> bb685;
    }

    bb257: {
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_577);
        _575 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _576) -> [return: bb258, unwind: bb767];
    }

    bb258: {
        StorageDead(_576);
        _596 = discriminant(_575);
        switchInt(move _596) -> [0: bb259, 1: bb260, otherwise: bb5];
    }

    bb259: {
        StorageLive(_600);
        _600 = ((_575 as Continue).0: state::margin_calculation::MarginCalculation);
        _574 = _600;
        StorageDead(_600);
        StorageDead(_585);
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_575);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = &_314;
        _603 = MarginCalculation::margin_shortage(move _604) -> [return: bb262, unwind: bb767];
    }

    bb260: {
        StorageLive(_597);
        _597 = ((_575 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb261, unwind: bb767];
    }

    bb261: {
        StorageDead(_599);
        StorageDead(_597);
        goto -> bb685;
    }

    bb262: {
        StorageDead(_604);
        _602 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _603) -> [return: bb263, unwind: bb767];
    }

    bb263: {
        StorageDead(_603);
        _605 = discriminant(_602);
        switchInt(move _605) -> [0: bb264, 1: bb265, otherwise: bb5];
    }

    bb264: {
        StorageLive(_609);
        _609 = ((_602 as Continue).0: u128);
        _601 = _609;
        StorageDead(_609);
        StorageDead(_602);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        _613 = &_574;
        _612 = MarginCalculation::margin_shortage(move _613) -> [return: bb267, unwind: bb767];
    }

    bb265: {
        StorageLive(_606);
        _606 = ((_602 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_608);
        _608 = _606;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _608) -> [return: bb266, unwind: bb767];
    }

    bb266: {
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_602);
        goto -> bb684;
    }

    bb267: {
        StorageDead(_613);
        _611 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _612) -> [return: bb268, unwind: bb767];
    }

    bb268: {
        StorageDead(_612);
        _614 = discriminant(_611);
        switchInt(move _614) -> [0: bb269, 1: bb270, otherwise: bb5];
    }

    bb269: {
        StorageLive(_618);
        _618 = ((_611 as Continue).0: u128);
        _610 = _618;
        StorageDead(_618);
        StorageDead(_611);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = _601;
        StorageLive(_624);
        _624 = _610;
        _622 = core::num::<impl u128>::saturating_sub(move _623, move _624) -> [return: bb272, unwind: bb767];
    }

    bb270: {
        StorageLive(_615);
        _615 = ((_611 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_617);
        _617 = _615;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _617) -> [return: bb271, unwind: bb767];
    }

    bb271: {
        StorageDead(_617);
        StorageDead(_615);
        StorageDead(_611);
        goto -> bb683;
    }

    bb272: {
        StorageDead(_624);
        StorageDead(_623);
        _621 = <u128 as Cast>::cast::<u64>(move _622) -> [return: bb273, unwind: bb767];
    }

    bb273: {
        StorageDead(_622);
        _620 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _621) -> [return: bb274, unwind: bb767];
    }

    bb274: {
        StorageDead(_621);
        _625 = discriminant(_620);
        switchInt(move _625) -> [0: bb275, 1: bb276, otherwise: bb5];
    }

    bb275: {
        StorageLive(_629);
        _629 = ((_620 as Continue).0: u64);
        _619 = _629;
        StorageDead(_629);
        _415 = move _619;
        StorageDead(_619);
        StorageDead(_620);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        _635 = &mut _17;
        _634 = <RefMut<'_, User> as DerefMut>::deref_mut(move _635) -> [return: bb278, unwind: bb767];
    }

    bb276: {
        StorageLive(_626);
        _626 = ((_620 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_628);
        _628 = _626;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _628) -> [return: bb277, unwind: bb767];
    }

    bb277: {
        StorageDead(_628);
        StorageDead(_626);
        StorageDead(_619);
        StorageDead(_620);
        goto -> bb683;
    }

    bb278: {
        _633 = &mut (*_634);
        StorageDead(_635);
        StorageLive(_636);
        _636 = _415;
        _632 = User::increment_margin_freed(move _633, move _636) -> [return: bb279, unwind: bb767];
    }

    bb279: {
        StorageDead(_636);
        StorageDead(_633);
        _631 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _632) -> [return: bb280, unwind: bb767];
    }

    bb280: {
        StorageDead(_632);
        _637 = discriminant(_631);
        switchInt(move _637) -> [0: bb281, 1: bb282, otherwise: bb5];
    }

    bb281: {
        StorageLive(_641);
        _641 = ((_631 as Continue).0: ());
        _630 = _641;
        StorageDead(_641);
        StorageDead(_634);
        StorageDead(_631);
        StorageDead(_630);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        _646 = &_574;
        _645 = MarginCalculation::can_exit_liquidation(move _646) -> [return: bb284, unwind: bb767];
    }

    bb282: {
        StorageLive(_638);
        _638 = ((_631 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_640);
        _640 = _638;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _640) -> [return: bb283, unwind: bb767];
    }

    bb283: {
        StorageDead(_640);
        StorageDead(_638);
        StorageDead(_634);
        StorageDead(_631);
        StorageDead(_630);
        goto -> bb683;
    }

    bb284: {
        StorageDead(_646);
        _644 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _645) -> [return: bb285, unwind: bb767];
    }

    bb285: {
        StorageDead(_645);
        _647 = discriminant(_644);
        switchInt(move _647) -> [0: bb286, 1: bb287, otherwise: bb5];
    }

    bb286: {
        StorageLive(_651);
        _651 = ((_644 as Continue).0: bool);
        _643 = _651;
        StorageDead(_651);
        switchInt(move _643) -> [0: bb290, otherwise: bb289];
    }

    bb287: {
        StorageLive(_648);
        _648 = ((_644 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_650);
        _650 = _648;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _650) -> [return: bb288, unwind: bb767];
    }

    bb288: {
        StorageDead(_650);
        StorageDead(_648);
        StorageDead(_644);
        goto -> bb682;
    }

    bb289: {
        StorageDead(_644);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        _667 = _15;
        StorageLive(_668);
        _668 = _403;
        StorageLive(_669);
        _669 = LiquidationType::LiquidatePerp;
        StorageLive(_670);
        _670 = (*_3);
        StorageLive(_671);
        _671 = (*_6);
        StorageLive(_672);
        _672 = (_314.3: u128);
        StorageLive(_673);
        _673 = (_314.1: i128);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        _677 = &_17;
        _676 = <RefMut<'_, User> as Deref>::deref(move _677) -> [return: bb291, unwind: bb767];
    }

    bb290: {
        StorageDead(_644);
        _642 = const ();
        StorageDead(_643);
        StorageDead(_642);
        _569 = _574;
        StorageDead(_610);
        StorageDead(_601);
        StorageDead(_574);
        goto -> bb303;
    }

    bb291: {
        _675 = &(*_676);
        StorageDead(_677);
        _674 = User::is_bankrupt(move _675) -> [return: bb292, unwind: bb767];
    }

    bb292: {
        StorageDead(_675);
        StorageLive(_678);
        _1451 = const false;
        _678 = move _473;
        StorageLive(_679);
        _679 = _415;
        StorageLive(_680);
        StorageLive(_681);
        _681 = _1;
        StorageLive(_682);
        _682 = _557;
        StorageLive(_683);
        _683 = _568;
        StorageLive(_684);
        _684 = <LiquidatePerpRecord as Default>::default() -> [return: bb293, unwind: bb718];
    }

    bb293: {
        _680 = LiquidatePerpRecord { market_index: move _681, oracle_price: move _682, base_asset_amount: (_684.2: i64), quote_asset_amount: (_684.3: i64), lp_shares: move _683, fill_record_id: (_684.5: u64), user_order_id: (_684.6: u32), liquidator_order_id: (_684.7: u32), liquidator_fee: (_684.8: u64), if_fee: (_684.9: u64) };
        StorageDead(_683);
        StorageDead(_682);
        StorageDead(_681);
        StorageLive(_685);
        _685 = <LiquidationRecord as Default>::default() -> [return: bb294, unwind: bb718];
    }

    bb294: {
        _666 = LiquidationRecord { ts: move _667, liquidation_type: move _669, user: move _670, liquidator: move _671, margin_requirement: move _672, total_collateral: move _673, margin_freed: move _679, liquidation_id: move _668, bankrupt: move _674, canceled_order_ids: move _678, liquidate_perp: move _680, liquidate_spot: move (_685.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_685.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_685.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_685.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_685.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_680);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_674);
        StorageDead(_673);
        StorageDead(_672);
        StorageDead(_671);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_667);
        _665 = &_666;
        _664 = &(*_665);
        _663 = <LiquidationRecord as anchor_lang::Event>::data(move _664) -> [return: bb295, unwind: bb716];
    }

    bb295: {
        StorageDead(_664);
        _662 = &_663;
        _661 = &(*_662);
        _660 = <Vec<u8> as Deref>::deref(move _661) -> [return: bb296, unwind: bb715];
    }

    bb296: {
        _659 = &(*_660);
        StorageDead(_661);
        _658 = [move _659];
        StorageDead(_659);
        _657 = &_658;
        _656 = &(*_657);
        _655 = move _656 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_656);
        _654 = solana_program::log::sol_log_data(move _655) -> [return: bb297, unwind: bb715];
    }

    bb297: {
        StorageDead(_655);
        drop(_663) -> [return: bb298, unwind: bb716];
    }

    bb298: {
        drop(_666) -> [return: bb299, unwind: bb717];
    }

    bb299: {
        drop(_685) -> [return: bb300, unwind: bb767];
    }

    bb300: {
        StorageDead(_685);
        StorageDead(_684);
        StorageDead(_676);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_662);
        StorageDead(_660);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_654);
        _653 = const ();
        StorageDead(_653);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        _689 = &mut _17;
        _688 = <RefMut<'_, User> as DerefMut>::deref_mut(move _689) -> [return: bb301, unwind: bb767];
    }

    bb301: {
        _687 = &mut (*_688);
        StorageDead(_689);
        _686 = User::exit_liquidation(move _687) -> [return: bb302, unwind: bb767];
    }

    bb302: {
        StorageDead(_687);
        StorageDead(_688);
        StorageDead(_686);
        StorageLive(_690);
        _690 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _690);
        StorageDead(_690);
        goto -> bb682;
    }

    bb303: {
        StorageDead(_572);
        StorageDead(_570);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        _695 = &_17;
        _694 = <RefMut<'_, User> as Deref>::deref(move _695) -> [return: bb304, unwind: bb767];
    }

    bb304: {
        StorageDead(_695);
        StorageLive(_696);
        _696 = _416;
        _697 = Len(((*_694).4: [state::user::PerpPosition; 8]));
        _698 = Lt(_696, _697);
        assert(move _698, "index out of bounds: the length is {} but the index is {}", move _697, _696) -> [success: bb305, unwind: bb767];
    }

    bb305: {
        _693 = (((*_694).4: [state::user::PerpPosition; 8])[_696].1: i64);
        _692 = Eq(move _693, const 0_i64);
        switchInt(move _692) -> [0: bb308, otherwise: bb306];
    }

    bb306: {
        StorageDead(_696);
        StorageDead(_694);
        StorageDead(_693);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        _702 = const "User has no base asset amount";
        _701 = &(*_702);
        _700 = solana_program::log::sol_log(move _701) -> [return: bb307, unwind: bb767];
    }

    bb307: {
        StorageDead(_701);
        StorageDead(_702);
        StorageDead(_700);
        StorageLive(_703);
        _703 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _703);
        StorageDead(_703);
        StorageDead(_692);
        StorageDead(_691);
        goto -> bb687;
    }

    bb308: {
        StorageDead(_696);
        StorageDead(_694);
        StorageDead(_693);
        _691 = const ();
        StorageDead(_692);
        StorageDead(_691);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        _707 = _557;
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        _714 = &(*_10);
        StorageLive(_715);
        StorageLive(_716);
        _716 = &_1;
        _715 = &(*_716);
        _713 = PerpMarketMap::<'_>::get_ref(move _714, move _715) -> [return: bb309, unwind: bb767];
    }

    bb309: {
        StorageDead(_715);
        StorageDead(_714);
        _712 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _713) -> [return: bb310, unwind: bb767];
    }

    bb310: {
        _1449 = const true;
        StorageDead(_713);
        _717 = discriminant(_712);
        switchInt(move _717) -> [0: bb311, 1: bb312, otherwise: bb5];
    }

    bb311: {
        StorageLive(_721);
        _721 = move ((_712 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _711 = move _721;
        StorageDead(_721);
        _710 = &_711;
        _709 = <Ref<'_, PerpMarket> as Deref>::deref(move _710) -> [return: bb314, unwind: bb714];
    }

    bb312: {
        StorageLive(_718);
        _718 = ((_712 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_720);
        _720 = _718;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _720) -> [return: bb313, unwind: bb765];
    }

    bb313: {
        StorageDead(_720);
        StorageDead(_718);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_707);
        StorageDead(_706);
        goto -> bb744;
    }

    bb314: {
        StorageDead(_710);
        _708 = ((((*_709).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = &((*_14).7: state::state::OracleGuardRails);
        _725 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _726) -> [return: bb315, unwind: bb714];
    }

    bb315: {
        StorageDead(_726);
        _724 = <u64 as Cast>::cast::<i64>(move _725) -> [return: bb316, unwind: bb714];
    }

    bb316: {
        StorageDead(_725);
        _723 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _724) -> [return: bb317, unwind: bb714];
    }

    bb317: {
        StorageDead(_724);
        _727 = discriminant(_723);
        switchInt(move _727) -> [0: bb318, 1: bb319, otherwise: bb5];
    }

    bb318: {
        StorageLive(_731);
        _731 = ((_723 as Continue).0: i64);
        _722 = _731;
        StorageDead(_731);
        _706 = math::orders::is_oracle_too_divergent_with_twap_5min(move _707, move _708, move _722) -> [return: bb321, unwind: bb714];
    }

    bb319: {
        StorageLive(_728);
        _728 = ((_723 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_730);
        _730 = _728;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _730) -> [return: bb320, unwind: bb714];
    }

    bb320: {
        StorageDead(_730);
        StorageDead(_728);
        StorageDead(_722);
        StorageDead(_708);
        StorageDead(_707);
        StorageDead(_706);
        goto -> bb680;
    }

    bb321: {
        StorageDead(_722);
        StorageDead(_708);
        StorageDead(_707);
        _705 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _706) -> [return: bb322, unwind: bb714];
    }

    bb322: {
        StorageDead(_706);
        _732 = discriminant(_705);
        switchInt(move _732) -> [0: bb323, 1: bb324, otherwise: bb5];
    }

    bb323: {
        StorageLive(_736);
        _736 = ((_705 as Continue).0: bool);
        _704 = _736;
        StorageDead(_736);
        StorageDead(_723);
        drop(_711) -> [return: bb734, unwind: bb765];
    }

    bb324: {
        StorageLive(_733);
        _733 = ((_705 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_735);
        _735 = _733;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _735) -> [return: bb325, unwind: bb714];
    }

    bb325: {
        StorageDead(_735);
        StorageDead(_733);
        goto -> bb680;
    }

    bb326: {
        StorageLive(_741);
        _741 = ();
        _739 = std::result::Result::<(), error::ErrorCode>::Ok(move _741);
        StorageDead(_741);
        goto -> bb334;
    }

    bb327: {
        StorageLive(_742);
        _742 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        _1432 = const _;
        _753 = &(*_1432);
        _752 = &(*_753);
        _751 = move _752 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_752);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _761 = &_742;
        _760 = &(*_761);
        _759 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _760) -> [return: bb328, unwind: bb767];
    }

    bb328: {
        StorageDead(_760);
        _758 = [move _759];
        StorageDead(_759);
        _757 = &_758;
        _756 = &(*_757);
        _755 = move _756 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_756);
        _750 = Arguments::<'_>::new_v1(move _751, move _755) -> [return: bb329, unwind: bb767];
    }

    bb329: {
        StorageDead(_755);
        StorageDead(_751);
        _749 = format(move _750) -> [return: bb330, unwind: bb767];
    }

    bb330: {
        StorageDead(_750);
        StorageDead(_761);
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_753);
        _748 = move _749;
        StorageDead(_749);
        _747 = &_748;
        _746 = &(*_747);
        _745 = <String as Deref>::deref(move _746) -> [return: bb331, unwind: bb713];
    }

    bb331: {
        _744 = &(*_745);
        StorageDead(_746);
        _743 = solana_program::log::sol_log(move _744) -> [return: bb332, unwind: bb713];
    }

    bb332: {
        StorageDead(_744);
        drop(_748) -> [return: bb333, unwind: bb767];
    }

    bb333: {
        StorageDead(_748);
        StorageDead(_747);
        StorageDead(_745);
        StorageDead(_743);
        StorageLive(_762);
        _762 = _742;
        _739 = std::result::Result::<(), error::ErrorCode>::Err(move _762);
        StorageDead(_762);
        StorageDead(_742);
        goto -> bb334;
    }

    bb334: {
        StorageDead(_740);
        _738 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _739) -> [return: bb335, unwind: bb767];
    }

    bb335: {
        StorageDead(_739);
        _763 = discriminant(_738);
        switchInt(move _763) -> [0: bb336, 1: bb337, otherwise: bb5];
    }

    bb336: {
        StorageLive(_767);
        _767 = ((_738 as Continue).0: ());
        _737 = _767;
        StorageDead(_767);
        StorageDead(_738);
        StorageDead(_737);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        _771 = &_17;
        _770 = <RefMut<'_, User> as Deref>::deref(move _771) -> [return: bb339, unwind: bb767];
    }

    bb337: {
        StorageLive(_764);
        _764 = ((_738 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_766);
        _766 = _764;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _766) -> [return: bb338, unwind: bb767];
    }

    bb338: {
        StorageDead(_766);
        StorageDead(_764);
        StorageDead(_738);
        StorageDead(_737);
        goto -> bb681;
    }

    bb339: {
        StorageDead(_771);
        StorageLive(_772);
        _772 = _416;
        _773 = Len(((*_770).4: [state::user::PerpPosition; 8]));
        _774 = Lt(_772, _773);
        assert(move _774, "index out of bounds: the length is {} but the index is {}", move _773, _772) -> [success: bb340, unwind: bb767];
    }

    bb340: {
        _769 = (((*_770).4: [state::user::PerpPosition; 8])[_772].1: i64);
        _768 = core::num::<impl i64>::unsigned_abs(move _769) -> [return: bb341, unwind: bb767];
    }

    bb341: {
        StorageDead(_769);
        StorageDead(_772);
        StorageDead(_770);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        _784 = &(*_10);
        StorageLive(_785);
        StorageLive(_786);
        _786 = &_1;
        _785 = &(*_786);
        _783 = PerpMarketMap::<'_>::get_ref(move _784, move _785) -> [return: bb342, unwind: bb767];
    }

    bb342: {
        StorageDead(_785);
        StorageDead(_784);
        _782 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _783) -> [return: bb343, unwind: bb767];
    }

    bb343: {
        _1448 = const true;
        StorageDead(_783);
        _787 = discriminant(_782);
        switchInt(move _787) -> [0: bb344, 1: bb345, otherwise: bb5];
    }

    bb344: {
        StorageLive(_791);
        _791 = move ((_782 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _781 = move _791;
        StorageDead(_791);
        _780 = &_781;
        _779 = <Ref<'_, PerpMarket> as Deref>::deref(move _780) -> [return: bb347, unwind: bb712];
    }

    bb345: {
        StorageLive(_788);
        _788 = ((_782 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_790);
        _790 = _788;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _790) -> [return: bb346, unwind: bb764];
    }

    bb346: {
        StorageDead(_790);
        StorageDead(_788);
        StorageDead(_780);
        StorageDead(_778);
        StorageDead(_777);
        goto -> bb743;
    }

    bb347: {
        _778 = &(*_779);
        StorageDead(_780);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        _795 = _768;
        _794 = <u64 as Cast>::cast::<u128>(move _795) -> [return: bb348, unwind: bb712];
    }

    bb348: {
        StorageDead(_795);
        _793 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _794) -> [return: bb349, unwind: bb712];
    }

    bb349: {
        StorageDead(_794);
        _796 = discriminant(_793);
        switchInt(move _796) -> [0: bb350, 1: bb351, otherwise: bb5];
    }

    bb350: {
        StorageLive(_800);
        _800 = ((_793 as Continue).0: u128);
        _792 = _800;
        StorageDead(_800);
        StorageLive(_801);
        _801 = math::margin::MarginRequirementType::Maintenance;
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        _805 = &_17;
        _804 = <RefMut<'_, User> as Deref>::deref(move _805) -> [return: bb353, unwind: bb712];
    }

    bb351: {
        StorageLive(_797);
        _797 = ((_793 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_799);
        _799 = _797;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _799) -> [return: bb352, unwind: bb712];
    }

    bb352: {
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_792);
        StorageDead(_778);
        StorageDead(_777);
        goto -> bb678;
    }

    bb353: {
        _803 = &(*_804);
        StorageDead(_805);
        StorageLive(_806);
        _806 = math::margin::MarginRequirementType::Maintenance;
        _802 = User::is_high_leverage_mode(move _803, move _806) -> [return: bb354, unwind: bb712];
    }

    bb354: {
        StorageDead(_806);
        StorageDead(_803);
        _777 = PerpMarket::get_margin_ratio(move _778, move _792, move _801, move _802) -> [return: bb355, unwind: bb712];
    }

    bb355: {
        StorageDead(_802);
        StorageDead(_801);
        StorageDead(_792);
        StorageDead(_778);
        _776 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _777) -> [return: bb356, unwind: bb712];
    }

    bb356: {
        StorageDead(_777);
        _807 = discriminant(_776);
        switchInt(move _807) -> [0: bb357, 1: bb358, otherwise: bb5];
    }

    bb357: {
        StorageLive(_811);
        _811 = ((_776 as Continue).0: u32);
        _775 = _811;
        StorageDead(_811);
        StorageDead(_804);
        StorageDead(_793);
        drop(_781) -> [return: bb735, unwind: bb764];
    }

    bb358: {
        StorageLive(_808);
        _808 = ((_776 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_810);
        _810 = _808;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _810) -> [return: bb359, unwind: bb712];
    }

    bb359: {
        StorageDead(_810);
        StorageDead(_808);
        StorageDead(_804);
        goto -> bb678;
    }

    bb360: {
        StorageDead(_816);
        StorageDead(_815);
        _813 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _814) -> [return: bb361, unwind: bb767];
    }

    bb361: {
        StorageDead(_814);
        _817 = discriminant(_813);
        switchInt(move _817) -> [0: bb362, 1: bb363, otherwise: bb5];
    }

    bb362: {
        StorageLive(_821);
        _821 = ((_813 as Continue).0: u32);
        _812 = _821;
        StorageDead(_821);
        StorageDead(_813);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        _825 = &_569;
        _824 = MarginCalculation::margin_shortage(move _825) -> [return: bb365, unwind: bb767];
    }

    bb363: {
        StorageLive(_818);
        _818 = ((_813 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_820);
        _820 = _818;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _820) -> [return: bb364, unwind: bb767];
    }

    bb364: {
        StorageDead(_820);
        StorageDead(_818);
        StorageDead(_813);
        goto -> bb677;
    }

    bb365: {
        StorageDead(_825);
        _823 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _824) -> [return: bb366, unwind: bb767];
    }

    bb366: {
        StorageDead(_824);
        _826 = discriminant(_823);
        switchInt(move _826) -> [0: bb367, 1: bb368, otherwise: bb5];
    }

    bb367: {
        StorageLive(_830);
        _830 = ((_823 as Continue).0: u128);
        _822 = _830;
        StorageDead(_830);
        StorageDead(_823);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        _834 = &(*_10);
        StorageLive(_835);
        StorageLive(_836);
        _836 = &_1;
        _835 = &(*_836);
        _833 = PerpMarketMap::<'_>::get_ref(move _834, move _835) -> [return: bb370, unwind: bb767];
    }

    bb368: {
        StorageLive(_827);
        _827 = ((_823 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_829);
        _829 = _827;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _829) -> [return: bb369, unwind: bb767];
    }

    bb369: {
        StorageDead(_829);
        StorageDead(_827);
        StorageDead(_823);
        goto -> bb676;
    }

    bb370: {
        StorageDead(_835);
        StorageDead(_834);
        _832 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _833) -> [return: bb371, unwind: bb767];
    }

    bb371: {
        StorageDead(_833);
        _837 = discriminant(_832);
        switchInt(move _837) -> [0: bb372, 1: bb373, otherwise: bb5];
    }

    bb372: {
        StorageLive(_841);
        _841 = move ((_832 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1447 = const true;
        _831 = move _841;
        StorageDead(_841);
        _1488 = discriminant(_832);
        StorageDead(_836);
        StorageDead(_832);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        _845 = &(*_11);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        _849 = &_831;
        _848 = <Ref<'_, PerpMarket> as Deref>::deref(move _849) -> [return: bb375, unwind: bb762];
    }

    bb373: {
        StorageLive(_838);
        _838 = ((_832 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_840);
        _840 = _838;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _840) -> [return: bb374, unwind: bb763];
    }

    bb374: {
        StorageDead(_840);
        StorageDead(_838);
        _1486 = discriminant(_832);
        StorageDead(_836);
        StorageDead(_832);
        goto -> bb675;
    }

    bb375: {
        StorageDead(_849);
        _847 = &((*_848).26: u16);
        _846 = &(*_847);
        _844 = SpotMarketMap::<'_>::get_ref(move _845, move _846) -> [return: bb376, unwind: bb762];
    }

    bb376: {
        StorageDead(_846);
        StorageDead(_845);
        _843 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _844) -> [return: bb377, unwind: bb762];
    }

    bb377: {
        StorageDead(_844);
        _850 = discriminant(_843);
        switchInt(move _850) -> [0: bb378, 1: bb379, otherwise: bb5];
    }

    bb378: {
        StorageLive(_854);
        _854 = move ((_843 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1446 = const true;
        _842 = move _854;
        StorageDead(_854);
        _1492 = discriminant(_843);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_843);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        _859 = &mut (*_12);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        _865 = &_842;
        _864 = <Ref<'_, SpotMarket> as Deref>::deref(move _865) -> [return: bb381, unwind: bb759];
    }

    bb379: {
        StorageLive(_851);
        _851 = ((_843 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_853);
        _853 = _851;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _853) -> [return: bb380, unwind: bb760];
    }

    bb380: {
        StorageDead(_853);
        StorageDead(_851);
        _1490 = discriminant(_843);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_843);
        goto -> bb674;
    }

    bb381: {
        _863 = &(*_864);
        StorageDead(_865);
        _862 = SpotMarket::oracle_id(move _863) -> [return: bb382, unwind: bb759];
    }

    bb382: {
        StorageDead(_863);
        _861 = &_862;
        _860 = &(*_861);
        _858 = OracleMap::<'_>::get_price_data(move _859, move _860) -> [return: bb383, unwind: bb759];
    }

    bb383: {
        StorageDead(_860);
        StorageDead(_859);
        _857 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _858) -> [return: bb384, unwind: bb759];
    }

    bb384: {
        StorageDead(_858);
        _866 = discriminant(_857);
        switchInt(move _866) -> [0: bb385, 1: bb386, otherwise: bb5];
    }

    bb385: {
        StorageLive(_870);
        _870 = ((_857 as Continue).0: &state::oracle::OraclePriceData);
        _856 = _870;
        StorageDead(_870);
        _855 = ((*_856).0: i64);
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_861);
        StorageDead(_857);
        StorageDead(_856);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = &_831;
        _872 = <Ref<'_, PerpMarket> as Deref>::deref(move _873) -> [return: bb388, unwind: bb759];
    }

    bb386: {
        StorageLive(_867);
        _867 = ((_857 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_869);
        _869 = _867;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _869) -> [return: bb387, unwind: bb759];
    }

    bb387: {
        StorageDead(_869);
        StorageDead(_867);
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_861);
        StorageDead(_857);
        StorageDead(_856);
        goto -> bb673;
    }

    bb388: {
        StorageDead(_873);
        _871 = ((*_872).13: u32);
        StorageDead(_872);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        _880 = &_569;
        StorageLive(_881);
        _881 = _822;
        _879 = MarginCalculation::tracked_market_margin_shortage(move _880, move _881) -> [return: bb389, unwind: bb759];
    }

    bb389: {
        StorageDead(_881);
        StorageDead(_880);
        _878 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _879) -> [return: bb390, unwind: bb759];
    }

    bb390: {
        StorageDead(_879);
        _882 = discriminant(_878);
        switchInt(move _882) -> [0: bb391, 1: bb392, otherwise: bb5];
    }

    bb391: {
        StorageLive(_886);
        _886 = ((_878 as Continue).0: u128);
        _877 = _886;
        StorageDead(_886);
        StorageLive(_887);
        _887 = _768;
        StorageLive(_888);
        _888 = _812;
        StorageLive(_889);
        _889 = _871;
        StorageLive(_890);
        _890 = _557;
        StorageLive(_891);
        _891 = _855;
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        _894 = &_831;
        _893 = <Ref<'_, PerpMarket> as Deref>::deref(move _894) -> [return: bb394, unwind: bb759];
    }

    bb392: {
        StorageLive(_883);
        _883 = ((_878 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_885);
        _885 = _883;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _885) -> [return: bb393, unwind: bb759];
    }

    bb393: {
        StorageDead(_885);
        StorageDead(_883);
        StorageDead(_877);
        StorageDead(_876);
        goto -> bb671;
    }

    bb394: {
        StorageDead(_894);
        _892 = ((*_893).14: u32);
        _876 = calculate_perp_if_fee(move _877, move _887, move _888, move _889, move _890, move _891, move _892) -> [return: bb395, unwind: bb759];
    }

    bb395: {
        StorageDead(_892);
        StorageDead(_891);
        StorageDead(_890);
        StorageDead(_889);
        StorageDead(_888);
        StorageDead(_887);
        StorageDead(_877);
        _875 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _876) -> [return: bb396, unwind: bb759];
    }

    bb396: {
        StorageDead(_876);
        _895 = discriminant(_875);
        switchInt(move _895) -> [0: bb397, 1: bb398, otherwise: bb5];
    }

    bb397: {
        StorageLive(_899);
        _899 = ((_875 as Continue).0: u32);
        _874 = _899;
        StorageDead(_899);
        StorageDead(_893);
        StorageDead(_878);
        StorageDead(_875);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        _906 = _822;
        StorageLive(_907);
        _907 = _812;
        StorageLive(_908);
        _908 = _871;
        StorageLive(_909);
        _909 = _874;
        StorageLive(_910);
        _910 = _557;
        StorageLive(_911);
        _911 = _855;
        _905 = calculate_base_asset_amount_to_cover_margin_shortage(move _906, move _907, move _908, move _909, move _910, move _911) -> [return: bb400, unwind: bb759];
    }

    bb398: {
        StorageLive(_896);
        _896 = ((_875 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_898);
        _898 = _896;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _898) -> [return: bb399, unwind: bb759];
    }

    bb399: {
        StorageDead(_898);
        StorageDead(_896);
        StorageDead(_893);
        goto -> bb671;
    }

    bb400: {
        StorageDead(_911);
        StorageDead(_910);
        StorageDead(_909);
        StorageDead(_908);
        StorageDead(_907);
        StorageDead(_906);
        _904 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _905) -> [return: bb401, unwind: bb759];
    }

    bb401: {
        StorageDead(_905);
        _912 = discriminant(_904);
        switchInt(move _912) -> [0: bb402, 1: bb403, otherwise: bb5];
    }

    bb402: {
        StorageLive(_916);
        _916 = ((_904 as Continue).0: u64);
        _903 = _916;
        StorageDead(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _919 = &_831;
        _918 = <Ref<'_, PerpMarket> as Deref>::deref(move _919) -> [return: bb405, unwind: bb759];
    }

    bb403: {
        StorageLive(_913);
        _913 = ((_904 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_915);
        _915 = _913;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _915) -> [return: bb404, unwind: bb759];
    }

    bb404: {
        StorageDead(_915);
        StorageDead(_913);
        StorageDead(_903);
        StorageDead(_902);
        goto -> bb669;
    }

    bb405: {
        StorageDead(_919);
        _917 = (((*_918).1: state::perp_market::AMM).52: u64);
        _902 = standardize_base_asset_amount_ceil(move _903, move _917) -> [return: bb406, unwind: bb759];
    }

    bb406: {
        StorageDead(_917);
        StorageDead(_903);
        _901 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _902) -> [return: bb407, unwind: bb759];
    }

    bb407: {
        StorageDead(_902);
        _920 = discriminant(_901);
        switchInt(move _920) -> [0: bb408, 1: bb409, otherwise: bb5];
    }

    bb408: {
        StorageLive(_924);
        _924 = ((_901 as Continue).0: u64);
        _900 = _924;
        StorageDead(_924);
        StorageDead(_918);
        StorageDead(_904);
        StorageDead(_901);
        StorageLive(_925);
        StorageLive(_926);
        _1447 = const false;
        _926 = move _831;
        _925 = std::mem::drop::<Ref<'_, PerpMarket>>(move _926) -> [return: bb411, unwind: bb759];
    }

    bb409: {
        StorageLive(_921);
        _921 = ((_901 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_923);
        _923 = _921;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _923) -> [return: bb410, unwind: bb759];
    }

    bb410: {
        StorageDead(_923);
        StorageDead(_921);
        StorageDead(_918);
        goto -> bb669;
    }

    bb411: {
        StorageDead(_926);
        StorageDead(_925);
        StorageLive(_927);
        StorageLive(_928);
        _1446 = const false;
        _928 = move _842;
        _927 = std::mem::drop::<Ref<'_, SpotMarket>>(move _928) -> [return: bb412, unwind: bb759];
    }

    bb412: {
        StorageDead(_928);
        StorageDead(_927);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        _935 = &_17;
        _934 = &(*_935);
        _933 = <RefMut<'_, User> as Deref>::deref(move _934) -> [return: bb413, unwind: bb759];
    }

    bb413: {
        _932 = &(*_933);
        StorageDead(_934);
        StorageLive(_936);
        _936 = _822;
        StorageLive(_937);
        _937 = _16;
        StorageLive(_938);
        _938 = _40;
        StorageLive(_939);
        _939 = _42;
        _931 = calculate_max_pct_to_liquidate(move _932, move _936, move _937, move _938, move _939) -> [return: bb414, unwind: bb759];
    }

    bb414: {
        StorageDead(_939);
        StorageDead(_938);
        StorageDead(_937);
        StorageDead(_936);
        StorageDead(_932);
        _930 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _931) -> [return: bb415, unwind: bb759];
    }

    bb415: {
        StorageDead(_931);
        _940 = discriminant(_930);
        switchInt(move _940) -> [0: bb416, 1: bb417, otherwise: bb5];
    }

    bb416: {
        StorageLive(_944);
        _944 = ((_930 as Continue).0: u128);
        _929 = _944;
        StorageDead(_944);
        StorageDead(_935);
        StorageDead(_933);
        StorageDead(_930);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        _955 = _900;
        _954 = <u64 as Cast>::cast::<u128>(move _955) -> [return: bb419, unwind: bb759];
    }

    bb417: {
        StorageLive(_941);
        _941 = ((_930 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_943);
        _943 = _941;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _943) -> [return: bb418, unwind: bb759];
    }

    bb418: {
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_935);
        StorageDead(_933);
        StorageDead(_930);
        goto -> bb668;
    }

    bb419: {
        StorageDead(_955);
        _953 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _954) -> [return: bb420, unwind: bb759];
    }

    bb420: {
        StorageDead(_954);
        _956 = discriminant(_953);
        switchInt(move _956) -> [0: bb421, 1: bb422, otherwise: bb5];
    }

    bb421: {
        StorageLive(_960);
        _960 = ((_953 as Continue).0: u128);
        _952 = _960;
        StorageDead(_960);
        StorageLive(_961);
        _961 = _929;
        _951 = core::num::<impl u128>::saturating_mul(move _952, move _961) -> [return: bb424, unwind: bb759];
    }

    bb422: {
        StorageLive(_957);
        _957 = ((_953 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_959);
        _959 = _957;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _959) -> [return: bb423, unwind: bb759];
    }

    bb423: {
        StorageDead(_959);
        StorageDead(_957);
        StorageDead(_952);
        StorageDead(_951);
        StorageDead(_950);
        goto -> bb665;
    }

    bb424: {
        StorageDead(_961);
        StorageDead(_952);
        _950 = <u128 as SafeMath>::safe_div(move _951, const _) -> [return: bb425, unwind: bb759];
    }

    bb425: {
        StorageDead(_951);
        _949 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _950) -> [return: bb426, unwind: bb759];
    }

    bb426: {
        StorageDead(_950);
        _962 = discriminant(_949);
        switchInt(move _962) -> [0: bb427, 1: bb428, otherwise: bb5];
    }

    bb427: {
        StorageLive(_966);
        _966 = ((_949 as Continue).0: u128);
        _948 = _966;
        StorageDead(_966);
        _947 = <u128 as Cast>::cast::<u64>(move _948) -> [return: bb430, unwind: bb759];
    }

    bb428: {
        StorageLive(_963);
        _963 = ((_949 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_965);
        _965 = _963;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _965) -> [return: bb429, unwind: bb759];
    }

    bb429: {
        StorageDead(_965);
        StorageDead(_963);
        goto -> bb665;
    }

    bb430: {
        StorageDead(_948);
        _946 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _947) -> [return: bb431, unwind: bb759];
    }

    bb431: {
        StorageDead(_947);
        _967 = discriminant(_946);
        switchInt(move _967) -> [0: bb432, 1: bb433, otherwise: bb5];
    }

    bb432: {
        StorageLive(_971);
        _971 = ((_946 as Continue).0: u64);
        _945 = _971;
        StorageDead(_971);
        StorageDead(_953);
        StorageDead(_949);
        StorageDead(_946);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        _974 = _945;
        _973 = Eq(move _974, const 0_u64);
        switchInt(move _973) -> [0: bb436, otherwise: bb435];
    }

    bb433: {
        StorageLive(_968);
        _968 = ((_946 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_970);
        _970 = _968;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _970) -> [return: bb434, unwind: bb759];
    }

    bb434: {
        StorageDead(_970);
        StorageDead(_968);
        goto -> bb666;
    }

    bb435: {
        StorageDead(_974);
        StorageLive(_976);
        StorageLive(_977);
        StorageLive(_978);
        _978 = const "max_base_asset_amount_allowed_to_be_transferred == 0";
        _977 = &(*_978);
        _976 = solana_program::log::sol_log(move _977) -> [return: bb437, unwind: bb759];
    }

    bb436: {
        StorageDead(_974);
        _972 = const ();
        StorageDead(_973);
        StorageDead(_972);
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        _989 = _768;
        _988 = <u64 as Cast>::cast::<i128>(move _989) -> [return: bb438, unwind: bb759];
    }

    bb437: {
        StorageDead(_977);
        StorageDead(_978);
        StorageDead(_976);
        StorageLive(_979);
        _979 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _979);
        StorageDead(_979);
        StorageDead(_973);
        StorageDead(_972);
        goto -> bb667;
    }

    bb438: {
        StorageDead(_989);
        _987 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _988) -> [return: bb439, unwind: bb759];
    }

    bb439: {
        StorageDead(_988);
        _990 = discriminant(_987);
        switchInt(move _990) -> [0: bb440, 1: bb441, otherwise: bb5];
    }

    bb440: {
        StorageLive(_994);
        _994 = ((_987 as Continue).0: i128);
        _986 = _994;
        StorageDead(_994);
        StorageLive(_995);
        _995 = _557;
        _985 = calculate_base_asset_value_with_oracle_price(move _986, move _995) -> [return: bb443, unwind: bb759];
    }

    bb441: {
        StorageLive(_991);
        _991 = ((_987 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_993);
        _993 = _991;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _993) -> [return: bb442, unwind: bb759];
    }

    bb442: {
        StorageDead(_993);
        StorageDead(_991);
        StorageDead(_986);
        StorageDead(_985);
        goto -> bb662;
    }

    bb443: {
        StorageDead(_995);
        StorageDead(_986);
        _984 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _985) -> [return: bb444, unwind: bb759];
    }

    bb444: {
        StorageDead(_985);
        _996 = discriminant(_984);
        switchInt(move _996) -> [0: bb445, 1: bb446, otherwise: bb5];
    }

    bb445: {
        StorageLive(_1000);
        _1000 = ((_984 as Continue).0: u128);
        _983 = _1000;
        StorageDead(_1000);
        _982 = <u128 as Cast>::cast::<u64>(move _983) -> [return: bb448, unwind: bb759];
    }

    bb446: {
        StorageLive(_997);
        _997 = ((_984 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_999);
        _999 = _997;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _999) -> [return: bb447, unwind: bb759];
    }

    bb447: {
        StorageDead(_999);
        StorageDead(_997);
        goto -> bb662;
    }

    bb448: {
        StorageDead(_983);
        _981 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _982) -> [return: bb449, unwind: bb759];
    }

    bb449: {
        StorageDead(_982);
        _1001 = discriminant(_981);
        switchInt(move _1001) -> [0: bb450, 1: bb451, otherwise: bb5];
    }

    bb450: {
        StorageLive(_1005);
        _1005 = ((_981 as Continue).0: u64);
        _980 = _1005;
        StorageDead(_1005);
        StorageDead(_987);
        StorageDead(_984);
        StorageDead(_981);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        _1008 = _980;
        StorageLive(_1009);
        _1010 = CheckedMul(const 50_u64, const _);
        assert(!move (_1010.1: bool), "attempt to compute `{} * {}`, which would overflow", const 50_u64, const _) -> [success: bb453, unwind: bb759];
    }

    bb451: {
        StorageLive(_1002);
        _1002 = ((_981 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1004);
        _1004 = _1002;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1004) -> [return: bb452, unwind: bb759];
    }

    bb452: {
        StorageDead(_1004);
        StorageDead(_1002);
        goto -> bb663;
    }

    bb453: {
        _1009 = move (_1010.0: u64);
        _1007 = Gt(move _1008, move _1009);
        switchInt(move _1007) -> [0: bb455, otherwise: bb454];
    }

    bb454: {
        StorageDead(_1009);
        StorageDead(_1008);
        _1006 = const 0_u64;
        goto -> bb456;
    }

    bb455: {
        StorageDead(_1009);
        StorageDead(_1008);
        _1006 = _768;
        goto -> bb456;
    }

    bb456: {
        StorageDead(_1007);
        StorageLive(_1011);
        StorageLive(_1012);
        _1012 = _768;
        StorageLive(_1013);
        StorageLive(_1014);
        _1014 = _945;
        StorageLive(_1015);
        _1015 = _1006;
        _1013 = <u64 as Ord>::max(move _1014, move _1015) -> [return: bb457, unwind: bb759];
    }

    bb457: {
        StorageDead(_1015);
        StorageDead(_1014);
        _1011 = <u64 as Ord>::min(move _1012, move _1013) -> [return: bb458, unwind: bb759];
    }

    bb458: {
        StorageDead(_1013);
        StorageDead(_1012);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        _1019 = _1011;
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        _1026 = &(*_10);
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = &_1;
        _1027 = &(*_1028);
        _1025 = PerpMarketMap::<'_>::get_ref(move _1026, move _1027) -> [return: bb459, unwind: bb759];
    }

    bb459: {
        StorageDead(_1027);
        StorageDead(_1026);
        _1024 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1025) -> [return: bb460, unwind: bb759];
    }

    bb460: {
        _1445 = const true;
        StorageDead(_1025);
        _1029 = discriminant(_1024);
        switchInt(move _1029) -> [0: bb461, 1: bb462, otherwise: bb5];
    }

    bb461: {
        StorageLive(_1033);
        _1033 = move ((_1024 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1023 = move _1033;
        StorageDead(_1033);
        _1022 = &_1023;
        _1021 = <Ref<'_, PerpMarket> as Deref>::deref(move _1022) -> [return: bb464, unwind: bb711];
    }

    bb462: {
        StorageLive(_1030);
        _1030 = ((_1024 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1032);
        _1032 = _1030;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1032) -> [return: bb463, unwind: bb757];
    }

    bb463: {
        StorageDead(_1032);
        StorageDead(_1030);
        StorageDead(_1022);
        StorageDead(_1020);
        StorageDead(_1019);
        StorageDead(_1018);
        goto -> bb740;
    }

    bb464: {
        StorageDead(_1022);
        _1020 = (((*_1021).1: state::perp_market::AMM).52: u64);
        _1018 = standardize_base_asset_amount_ceil(move _1019, move _1020) -> [return: bb465, unwind: bb711];
    }

    bb465: {
        StorageDead(_1020);
        StorageDead(_1019);
        _1017 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1018) -> [return: bb466, unwind: bb711];
    }

    bb466: {
        StorageDead(_1018);
        _1034 = discriminant(_1017);
        switchInt(move _1034) -> [0: bb467, 1: bb468, otherwise: bb5];
    }

    bb467: {
        StorageLive(_1038);
        _1038 = ((_1017 as Continue).0: u64);
        _1016 = _1038;
        StorageDead(_1038);
        drop(_1023) -> [return: bb736, unwind: bb757];
    }

    bb468: {
        StorageLive(_1035);
        _1035 = ((_1017 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1037);
        _1037 = _1035;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1037) -> [return: bb469, unwind: bb711];
    }

    bb469: {
        StorageDead(_1037);
        StorageDead(_1035);
        drop(_1023) -> [return: bb740, unwind: bb757];
    }

    bb470: {
        StorageDead(_1042);
        StorageLive(_1043);
        _1043 = _416;
        _1044 = Len(((*_1041).4: [state::user::PerpPosition; 8]));
        _1045 = Lt(_1043, _1044);
        assert(move _1045, "index out of bounds: the length is {} but the index is {}", move _1044, _1043) -> [success: bb471, unwind: bb759];
    }

    bb471: {
        _1040 = &((*_1041).4: [state::user::PerpPosition; 8])[_1043];
        _1039 = PerpPosition::get_direction(move _1040) -> [return: bb472, unwind: bb759];
    }

    bb472: {
        StorageDead(_1040);
        StorageDead(_1043);
        StorageDead(_1041);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        _1055 = &(*_10);
        StorageLive(_1056);
        StorageLive(_1057);
        _1057 = &_1;
        _1056 = &(*_1057);
        _1054 = PerpMarketMap::<'_>::get_ref(move _1055, move _1056) -> [return: bb473, unwind: bb759];
    }

    bb473: {
        StorageDead(_1056);
        StorageDead(_1055);
        _1053 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1054) -> [return: bb474, unwind: bb759];
    }

    bb474: {
        _1444 = const true;
        StorageDead(_1054);
        _1058 = discriminant(_1053);
        switchInt(move _1058) -> [0: bb475, 1: bb476, otherwise: bb5];
    }

    bb475: {
        StorageLive(_1062);
        _1062 = move ((_1053 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1052 = move _1062;
        StorageDead(_1062);
        _1051 = &_1052;
        _1050 = <Ref<'_, PerpMarket> as Deref>::deref(move _1051) -> [return: bb478, unwind: bb710];
    }

    bb476: {
        StorageLive(_1059);
        _1059 = ((_1053 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1061);
        _1061 = _1059;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1061) -> [return: bb477, unwind: bb756];
    }

    bb477: {
        StorageDead(_1061);
        StorageDead(_1059);
        StorageDead(_1051);
        StorageDead(_1049);
        StorageDead(_1048);
        goto -> bb739;
    }

    bb478: {
        _1049 = &(*_1050);
        StorageDead(_1051);
        _1048 = PerpMarket::get_max_liquidation_fee(move _1049) -> [return: bb479, unwind: bb710];
    }

    bb479: {
        StorageDead(_1049);
        _1047 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _1048) -> [return: bb480, unwind: bb710];
    }

    bb480: {
        StorageDead(_1048);
        _1063 = discriminant(_1047);
        switchInt(move _1063) -> [0: bb481, 1: bb482, otherwise: bb5];
    }

    bb481: {
        StorageLive(_1067);
        _1067 = ((_1047 as Continue).0: u32);
        _1046 = _1067;
        StorageDead(_1067);
        drop(_1052) -> [return: bb737, unwind: bb756];
    }

    bb482: {
        StorageLive(_1064);
        _1064 = ((_1047 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1066);
        _1066 = _1064;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1066) -> [return: bb483, unwind: bb710];
    }

    bb483: {
        StorageDead(_1066);
        StorageDead(_1064);
        drop(_1052) -> [return: bb739, unwind: bb756];
    }

    bb484: {
        StorageDead(_1075);
        _1073 = ((*_1074).14: u64);
        StorageLive(_1076);
        _1076 = _16;
        _1070 = get_liquidation_fee(move _1071, move _1072, move _1073, move _1076) -> [return: bb485, unwind: bb759];
    }

    bb485: {
        StorageDead(_1076);
        StorageDead(_1073);
        StorageDead(_1072);
        StorageDead(_1071);
        _1069 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _1070) -> [return: bb486, unwind: bb759];
    }

    bb486: {
        StorageDead(_1070);
        _1077 = discriminant(_1069);
        switchInt(move _1077) -> [0: bb487, 1: bb488, otherwise: bb5];
    }

    bb487: {
        StorageLive(_1081);
        _1081 = ((_1069 as Continue).0: u32);
        _1068 = _1081;
        StorageDead(_1081);
        StorageDead(_1074);
        StorageDead(_1069);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        _1085 = _1;
        StorageLive(_1086);
        _1086 = _1039;
        StorageLive(_1087);
        _1087 = _1016;
        StorageLive(_1088);
        _1088 = _557;
        StorageLive(_1089);
        _1089 = _1068;
        _1084 = get_liquidation_order_params(move _1085, move _1086, move _1087, move _1088, move _1089) -> [return: bb490, unwind: bb759];
    }

    bb488: {
        StorageLive(_1078);
        _1078 = ((_1069 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1080);
        _1080 = _1078;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1080) -> [return: bb489, unwind: bb759];
    }

    bb489: {
        StorageDead(_1080);
        StorageDead(_1078);
        StorageDead(_1074);
        StorageDead(_1069);
        goto -> bb659;
    }

    bb490: {
        StorageDead(_1089);
        StorageDead(_1088);
        StorageDead(_1087);
        StorageDead(_1086);
        StorageDead(_1085);
        _1083 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as Try>::branch(move _1084) -> [return: bb491, unwind: bb759];
    }

    bb491: {
        StorageDead(_1084);
        _1090 = discriminant(_1083);
        switchInt(move _1090) -> [0: bb492, 1: bb493, otherwise: bb5];
    }

    bb492: {
        StorageLive(_1094);
        _1094 = ((_1083 as Continue).0: state::order_params::OrderParams);
        _1082 = _1094;
        StorageDead(_1094);
        StorageDead(_1083);
        StorageLive(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        _1097 = &_17;
        _1096 = <RefMut<'_, User> as Deref>::deref(move _1097) -> [return: bb495, unwind: bb759];
    }

    bb493: {
        StorageLive(_1091);
        _1091 = ((_1083 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1093);
        _1093 = _1091;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1093) -> [return: bb494, unwind: bb759];
    }

    bb494: {
        StorageDead(_1093);
        StorageDead(_1091);
        StorageDead(_1083);
        goto -> bb658;
    }

    bb495: {
        StorageDead(_1097);
        _1095 = ((*_1096).15: u32);
        StorageDead(_1096);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        StorageLive(_1103);
        StorageLive(_1104);
        _1104 = &(*_10);
        StorageLive(_1105);
        StorageLive(_1106);
        _1106 = &_1;
        _1105 = &(*_1106);
        _1103 = PerpMarketMap::<'_>::get_ref(move _1104, move _1105) -> [return: bb496, unwind: bb759];
    }

    bb496: {
        StorageDead(_1105);
        StorageDead(_1104);
        _1102 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1103) -> [return: bb497, unwind: bb759];
    }

    bb497: {
        _1457 = const true;
        StorageDead(_1103);
        _1107 = discriminant(_1102);
        switchInt(move _1107) -> [0: bb498, 1: bb499, otherwise: bb5];
    }

    bb498: {
        StorageLive(_1111);
        _1111 = move ((_1102 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1101 = move _1111;
        StorageDead(_1111);
        _1100 = &_1101;
        _1099 = <Ref<'_, PerpMarket> as Deref>::deref(move _1100) -> [return: bb501, unwind: bb709];
    }

    bb499: {
        StorageLive(_1108);
        _1108 = ((_1102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1110);
        _1110 = _1108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1110) -> [return: bb500, unwind: bb755];
    }

    bb500: {
        StorageDead(_1110);
        StorageDead(_1108);
        StorageDead(_1100);
        _1498 = discriminant(_1102);
        StorageDead(_1106);
        _1457 = const false;
        StorageDead(_1102);
        StorageDead(_1101);
        StorageDead(_1099);
        goto -> bb657;
    }

    bb501: {
        StorageDead(_1100);
        _1098 = ((*_1099).8: u64);
        drop(_1101) -> [return: bb738, unwind: bb755];
    }

    bb502: {
        _1116 = &mut (*_1117);
        StorageDead(_1118);
        StorageLive(_1120);
        _1120 = (*_3);
        StorageLive(_1121);
        _1121 = &(*_10);
        StorageLive(_1122);
        _1122 = &(*_11);
        StorageLive(_1123);
        _1123 = &mut (*_12);
        StorageLive(_1124);
        StorageLive(_1125);
        _1431 = const _;
        _1125 = &(*_1431);
        _1124 = &(*_1125);
        StorageLive(_1127);
        _1127 = &(*_13);
        StorageLive(_1128);
        _1128 = _1082;
        StorageLive(_1129);
        StorageLive(_1130);
        _1130 = <PlaceOrderOptions as Default>::default() -> [return: bb503, unwind: bb759];
    }

    bb503: {
        StorageLive(_1131);
        _1131 = OrderActionExplanation::Liquidation;
        _1129 = PlaceOrderOptions::explanation(move _1130, move _1131) -> [return: bb504, unwind: bb759];
    }

    bb504: {
        StorageDead(_1131);
        StorageDead(_1130);
        _1114 = controller::orders::place_perp_order(move _1115, move _1116, move _1120, move _1121, move _1122, move _1123, move _1124, move _1127, move _1128, move _1129) -> [return: bb505, unwind: bb759];
    }

    bb505: {
        StorageDead(_1129);
        StorageDead(_1128);
        StorageDead(_1127);
        StorageDead(_1124);
        StorageDead(_1123);
        StorageDead(_1122);
        StorageDead(_1121);
        StorageDead(_1120);
        StorageDead(_1116);
        StorageDead(_1115);
        _1113 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1114) -> [return: bb506, unwind: bb759];
    }

    bb506: {
        StorageDead(_1114);
        _1132 = discriminant(_1113);
        switchInt(move _1132) -> [0: bb507, 1: bb508, otherwise: bb5];
    }

    bb507: {
        StorageLive(_1136);
        _1136 = ((_1113 as Continue).0: ());
        _1112 = _1136;
        StorageDead(_1136);
        StorageDead(_1125);
        StorageDead(_1119);
        StorageDead(_1117);
        StorageDead(_1113);
        StorageDead(_1112);
        StorageLive(_1137);
        StorageLive(_1138);
        _1456 = const false;
        _1138 = move _17;
        _1137 = std::mem::drop::<RefMut<'_, User>>(move _1138) -> [return: bb510, unwind: bb759];
    }

    bb508: {
        StorageLive(_1133);
        _1133 = ((_1113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1135);
        _1135 = _1133;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1135) -> [return: bb509, unwind: bb759];
    }

    bb509: {
        StorageDead(_1135);
        StorageDead(_1133);
        StorageDead(_1125);
        StorageDead(_1119);
        StorageDead(_1117);
        StorageDead(_1113);
        StorageDead(_1112);
        goto -> bb657;
    }

    bb510: {
        StorageDead(_1138);
        StorageDead(_1137);
        StorageLive(_1139);
        StorageLive(_1140);
        _1455 = const false;
        _1140 = move _28;
        _1139 = std::mem::drop::<RefMut<'_, User>>(move _1140) -> [return: bb511, unwind: bb759];
    }

    bb511: {
        StorageDead(_1140);
        StorageDead(_1139);
        StorageLive(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        StorageLive(_1146);
        _1146 = _1095;
        StorageLive(_1147);
        _1147 = &(*_14);
        StorageLive(_1148);
        _1148 = &(*_2);
        StorageLive(_1149);
        _1149 = &(*_4);
        StorageLive(_1150);
        _1150 = &(*_11);
        StorageLive(_1151);
        _1151 = &(*_10);
        StorageLive(_1152);
        _1152 = &mut (*_12);
        StorageLive(_1153);
        _1153 = &(*_5);
        StorageLive(_1154);
        _1154 = &(*_7);
        StorageLive(_1155);
        _1155 = &(*_8);
        StorageLive(_1156);
        _1156 = &(*_9);
        StorageLive(_1157);
        _1157 = Option::<u32>::None;
        StorageLive(_1158);
        _1158 = &(*_13);
        StorageLive(_1159);
        _1159 = FillMode::Liquidation;
        _1145 = controller::orders::fill_perp_order(move _1146, move _1147, move _1148, move _1149, move _1150, move _1151, move _1152, move _1153, move _1154, move _1155, move _1156, move _1157, move _1158, move _1159) -> [return: bb512, unwind: bb759];
    }

    bb512: {
        StorageDead(_1159);
        StorageDead(_1158);
        StorageDead(_1157);
        StorageDead(_1156);
        StorageDead(_1155);
        StorageDead(_1154);
        StorageDead(_1153);
        StorageDead(_1152);
        StorageDead(_1151);
        StorageDead(_1150);
        StorageDead(_1149);
        StorageDead(_1148);
        StorageDead(_1147);
        StorageDead(_1146);
        _1144 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _1145) -> [return: bb513, unwind: bb759];
    }

    bb513: {
        StorageDead(_1145);
        _1160 = discriminant(_1144);
        switchInt(move _1160) -> [0: bb514, 1: bb515, otherwise: bb5];
    }

    bb514: {
        StorageLive(_1164);
        _1164 = ((_1144 as Continue).0: (u64, u64));
        _1143 = _1164;
        StorageDead(_1164);
        StorageLive(_1141);
        _1141 = (_1143.0: u64);
        StorageLive(_1142);
        _1142 = (_1143.1: u64);
        StorageDead(_1144);
        StorageDead(_1143);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        StorageLive(_1169);
        _1169 = &(*_2);
        _1168 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _1169) -> [return: bb517, unwind: bb759];
    }

    bb515: {
        StorageLive(_1161);
        _1161 = ((_1144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1163);
        _1163 = _1161;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1163) -> [return: bb516, unwind: bb759];
    }

    bb516: {
        StorageDead(_1163);
        StorageDead(_1161);
        StorageDead(_1144);
        StorageDead(_1143);
        goto -> bb657;
    }

    bb517: {
        StorageDead(_1169);
        StorageLive(_1170);
        _1170 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _1167 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _1168, move _1170) -> [return: bb518, unwind: bb759];
    }

    bb518: {
        StorageDead(_1170);
        StorageDead(_1168);
        _1166 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _1167) -> [return: bb519, unwind: bb759];
    }

    bb519: {
        StorageDead(_1167);
        _1171 = discriminant(_1166);
        switchInt(move _1171) -> [0: bb520, 1: bb521, otherwise: bb5];
    }

    bb520: {
        StorageLive(_1175);
        _1175 = move ((_1166 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _1165 = move _1175;
        StorageDead(_1175);
        _1504 = discriminant(_1166);
        StorageDead(_1166);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        _1180 = &_1165;
        _1179 = <RefMut<'_, User> as Deref>::deref(move _1180) -> [return: bb523, unwind: bb708];
    }

    bb521: {
        StorageLive(_1172);
        _1172 = ((_1166 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1174);
        _1174 = _1172;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1174) -> [return: bb522, unwind: bb754];
    }

    bb522: {
        StorageDead(_1174);
        StorageDead(_1172);
        _1502 = discriminant(_1166);
        StorageDead(_1166);
        goto -> bb656;
    }

    bb523: {
        _1178 = &(*_1179);
        StorageDead(_1180);
        StorageLive(_1181);
        _1181 = _1095;
        _1177 = User::get_order_index(move _1178, move _1181) -> [return: bb524, unwind: bb708];
    }

    bb524: {
        StorageDead(_1181);
        StorageDead(_1178);
        _1182 = discriminant(_1177);
        switchInt(move _1182) -> [0: bb525, otherwise: bb532];
    }

    bb525: {
        StorageLive(_1183);
        _1183 = ((_1177 as Ok).0: usize);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        _1187 = _1183;
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        _1191 = &mut _1165;
        _1190 = &mut (*_1191);
        _1189 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1190) -> [return: bb526, unwind: bb708];
    }

    bb526: {
        _1188 = &mut (*_1189);
        StorageDead(_1190);
        StorageLive(_1192);
        _1192 = &(*_3);
        StorageLive(_1193);
        _1193 = &(*_10);
        StorageLive(_1194);
        _1194 = &(*_11);
        StorageLive(_1195);
        _1195 = &mut (*_12);
        StorageLive(_1196);
        _1196 = ((*_13).4: i64);
        StorageLive(_1197);
        _1197 = ((*_13).0: u64);
        StorageLive(_1198);
        _1198 = OrderActionExplanation::None;
        StorageLive(_1199);
        StorageLive(_1200);
        _1200 = &(*_6);
        _1199 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _1200);
        StorageDead(_1200);
        _1186 = controller::orders::cancel_order(move _1187, move _1188, move _1192, move _1193, move _1194, move _1195, move _1196, move _1197, move _1198, move _1199, const 0_u64, const false) -> [return: bb527, unwind: bb708];
    }

    bb527: {
        StorageDead(_1199);
        StorageDead(_1198);
        StorageDead(_1197);
        StorageDead(_1196);
        StorageDead(_1195);
        StorageDead(_1194);
        StorageDead(_1193);
        StorageDead(_1192);
        StorageDead(_1188);
        StorageDead(_1187);
        _1185 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1186) -> [return: bb528, unwind: bb708];
    }

    bb528: {
        StorageDead(_1186);
        _1201 = discriminant(_1185);
        switchInt(move _1201) -> [0: bb529, 1: bb530, otherwise: bb5];
    }

    bb529: {
        StorageLive(_1205);
        _1205 = ((_1185 as Continue).0: ());
        _1184 = _1205;
        StorageDead(_1205);
        StorageDead(_1191);
        StorageDead(_1189);
        StorageDead(_1185);
        StorageDead(_1184);
        _1176 = const ();
        StorageDead(_1183);
        goto -> bb533;
    }

    bb530: {
        StorageLive(_1202);
        _1202 = ((_1185 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1204);
        _1204 = _1202;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1204) -> [return: bb531, unwind: bb708];
    }

    bb531: {
        StorageDead(_1204);
        StorageDead(_1202);
        StorageDead(_1191);
        StorageDead(_1189);
        StorageDead(_1185);
        StorageDead(_1184);
        StorageDead(_1183);
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1176);
        goto -> bb655;
    }

    bb532: {
        _1176 = const ();
        goto -> bb533;
    }

    bb533: {
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1176);
        StorageLive(_1206);
        StorageLive(_1207);
        StorageLive(_1208);
        _1208 = _1141;
        _1207 = Eq(move _1208, const 0_u64);
        switchInt(move _1207) -> [0: bb535, otherwise: bb534];
    }

    bb534: {
        StorageDead(_1208);
        StorageLive(_1210);
        _1210 = error::ErrorCode::LiquidationOrderFailedToFill;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1210);
        StorageDead(_1210);
        StorageDead(_1207);
        StorageDead(_1206);
        goto -> bb655;
    }

    bb535: {
        StorageDead(_1208);
        _1206 = const ();
        StorageDead(_1207);
        StorageDead(_1206);
        StorageLive(_1211);
        StorageLive(_1212);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        StorageLive(_1216);
        StorageLive(_1217);
        StorageLive(_1218);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        StorageLive(_1223);
        StorageLive(_1224);
        _1224 = _1142;
        _1223 = <u64 as Cast>::cast::<u128>(move _1224) -> [return: bb536, unwind: bb708];
    }

    bb536: {
        StorageDead(_1224);
        _1222 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1223) -> [return: bb537, unwind: bb708];
    }

    bb537: {
        StorageDead(_1223);
        _1225 = discriminant(_1222);
        switchInt(move _1225) -> [0: bb538, 1: bb539, otherwise: bb5];
    }

    bb538: {
        StorageLive(_1229);
        _1229 = ((_1222 as Continue).0: u128);
        _1221 = _1229;
        StorageDead(_1229);
        StorageLive(_1230);
        StorageLive(_1231);
        StorageLive(_1232);
        StorageLive(_1233);
        _1233 = _874;
        _1232 = <u32 as Cast>::cast::<u128>(move _1233) -> [return: bb541, unwind: bb708];
    }

    bb539: {
        StorageLive(_1226);
        _1226 = ((_1222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1228);
        _1228 = _1226;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1228) -> [return: bb540, unwind: bb708];
    }

    bb540: {
        StorageDead(_1228);
        StorageDead(_1226);
        StorageDead(_1221);
        StorageDead(_1220);
        StorageDead(_1218);
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1214);
        StorageDead(_1212);
        goto -> bb653;
    }

    bb541: {
        StorageDead(_1233);
        _1231 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1232) -> [return: bb542, unwind: bb708];
    }

    bb542: {
        StorageDead(_1232);
        _1234 = discriminant(_1231);
        switchInt(move _1234) -> [0: bb543, 1: bb544, otherwise: bb5];
    }

    bb543: {
        StorageLive(_1238);
        _1238 = ((_1231 as Continue).0: u128);
        _1230 = _1238;
        StorageDead(_1238);
        _1220 = <u128 as SafeMath>::safe_mul(move _1221, move _1230) -> [return: bb546, unwind: bb708];
    }

    bb544: {
        StorageLive(_1235);
        _1235 = ((_1231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1237);
        _1237 = _1235;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1237) -> [return: bb545, unwind: bb708];
    }

    bb545: {
        StorageDead(_1237);
        StorageDead(_1235);
        StorageDead(_1230);
        StorageDead(_1221);
        StorageDead(_1220);
        goto -> bb650;
    }

    bb546: {
        StorageDead(_1230);
        StorageDead(_1221);
        _1219 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1220) -> [return: bb547, unwind: bb708];
    }

    bb547: {
        StorageDead(_1220);
        _1239 = discriminant(_1219);
        switchInt(move _1239) -> [0: bb548, 1: bb549, otherwise: bb5];
    }

    bb548: {
        StorageLive(_1243);
        _1243 = ((_1219 as Continue).0: u128);
        _1218 = _1243;
        StorageDead(_1243);
        _1217 = <u128 as SafeMath>::safe_div(move _1218, const _) -> [return: bb551, unwind: bb708];
    }

    bb549: {
        StorageLive(_1240);
        _1240 = ((_1219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1242);
        _1242 = _1240;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1242) -> [return: bb550, unwind: bb708];
    }

    bb550: {
        StorageDead(_1242);
        StorageDead(_1240);
        goto -> bb650;
    }

    bb551: {
        StorageDead(_1218);
        _1216 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1217) -> [return: bb552, unwind: bb708];
    }

    bb552: {
        StorageDead(_1217);
        _1244 = discriminant(_1216);
        switchInt(move _1244) -> [0: bb553, 1: bb554, otherwise: bb5];
    }

    bb553: {
        StorageLive(_1248);
        _1248 = ((_1216 as Continue).0: u128);
        _1215 = _1248;
        StorageDead(_1248);
        _1214 = <u128 as Cast>::cast::<i64>(move _1215) -> [return: bb556, unwind: bb708];
    }

    bb554: {
        StorageLive(_1245);
        _1245 = ((_1216 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1247);
        _1247 = _1245;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1247) -> [return: bb555, unwind: bb708];
    }

    bb555: {
        StorageDead(_1247);
        StorageDead(_1245);
        goto -> bb651;
    }

    bb556: {
        StorageDead(_1215);
        _1213 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1214) -> [return: bb557, unwind: bb708];
    }

    bb557: {
        StorageDead(_1214);
        _1249 = discriminant(_1213);
        switchInt(move _1249) -> [0: bb558, 1: bb559, otherwise: bb5];
    }

    bb558: {
        StorageLive(_1253);
        _1253 = ((_1213 as Continue).0: i64);
        _1212 = _1253;
        StorageDead(_1253);
        _1254 = Eq(_1212, const i64::MIN);
        assert(!move _1254, "attempt to negate `{}`, which would overflow", _1212) -> [success: bb561, unwind: bb708];
    }

    bb559: {
        StorageLive(_1250);
        _1250 = ((_1213 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1252);
        _1252 = _1250;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1252) -> [return: bb560, unwind: bb708];
    }

    bb560: {
        StorageDead(_1252);
        StorageDead(_1250);
        goto -> bb652;
    }

    bb561: {
        _1211 = Neg(move _1212);
        StorageDead(_1212);
        StorageDead(_1231);
        StorageDead(_1222);
        StorageDead(_1219);
        StorageDead(_1216);
        StorageDead(_1213);
        StorageLive(_1255);
        StorageLive(_1256);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        _1259 = &(*_10);
        StorageLive(_1260);
        StorageLive(_1261);
        _1261 = &_1;
        _1260 = &(*_1261);
        _1258 = PerpMarketMap::<'_>::get_ref_mut(move _1259, move _1260) -> [return: bb562, unwind: bb708];
    }

    bb562: {
        StorageDead(_1260);
        StorageDead(_1259);
        _1257 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1258) -> [return: bb563, unwind: bb708];
    }

    bb563: {
        StorageDead(_1258);
        _1262 = discriminant(_1257);
        switchInt(move _1262) -> [0: bb564, 1: bb565, otherwise: bb5];
    }

    bb564: {
        StorageLive(_1266);
        _1266 = move ((_1257 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1256 = move _1266;
        StorageDead(_1266);
        _1508 = discriminant(_1257);
        StorageDead(_1261);
        StorageDead(_1257);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        _1272 = &mut _1165;
        _1271 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1272) -> [return: bb567, unwind: bb707];
    }

    bb565: {
        StorageLive(_1263);
        _1263 = ((_1257 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1265);
        _1265 = _1263;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1265) -> [return: bb566, unwind: bb753];
    }

    bb566: {
        StorageDead(_1265);
        StorageDead(_1263);
        _1506 = discriminant(_1257);
        StorageDead(_1261);
        StorageDead(_1257);
        goto -> bb649;
    }

    bb567: {
        _1270 = &mut (*_1271);
        StorageDead(_1272);
        StorageLive(_1273);
        _1273 = _1;
        _1269 = User::get_perp_position_mut(move _1270, move _1273) -> [return: bb568, unwind: bb707];
    }

    bb568: {
        StorageDead(_1273);
        StorageDead(_1270);
        _1268 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1269) -> [return: bb569, unwind: bb707];
    }

    bb569: {
        StorageDead(_1269);
        _1274 = discriminant(_1268);
        switchInt(move _1274) -> [0: bb570, 1: bb571, otherwise: bb5];
    }

    bb570: {
        StorageLive(_1278);
        _1278 = move ((_1268 as Continue).0: &mut state::user::PerpPosition);
        _1267 = move _1278;
        StorageDead(_1278);
        StorageDead(_1271);
        StorageDead(_1268);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        _1282 = &mut (*_1267);
        StorageLive(_1283);
        StorageLive(_1284);
        StorageLive(_1285);
        StorageLive(_1286);
        _1286 = &mut _1256;
        _1285 = &mut (*_1286);
        _1284 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1285) -> [return: bb573, unwind: bb707];
    }

    bb571: {
        StorageLive(_1275);
        _1275 = ((_1268 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1277);
        _1277 = _1275;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1277) -> [return: bb572, unwind: bb707];
    }

    bb572: {
        StorageDead(_1277);
        StorageDead(_1275);
        StorageDead(_1271);
        StorageDead(_1268);
        goto -> bb648;
    }

    bb573: {
        _1283 = &mut (*_1284);
        StorageDead(_1285);
        StorageLive(_1287);
        _1287 = _1211;
        _1281 = update_quote_asset_and_break_even_amount(move _1282, move _1283, move _1287) -> [return: bb574, unwind: bb707];
    }

    bb574: {
        StorageDead(_1287);
        StorageDead(_1283);
        StorageDead(_1282);
        _1280 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1281) -> [return: bb575, unwind: bb707];
    }

    bb575: {
        StorageDead(_1281);
        _1288 = discriminant(_1280);
        switchInt(move _1288) -> [0: bb576, 1: bb577, otherwise: bb5];
    }

    bb576: {
        StorageLive(_1292);
        _1292 = ((_1280 as Continue).0: ());
        _1279 = _1292;
        StorageDead(_1292);
        StorageDead(_1286);
        StorageDead(_1284);
        StorageDead(_1280);
        StorageDead(_1279);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        StorageLive(_1296);
        StorageLive(_1297);
        StorageLive(_1298);
        _1298 = &_1256;
        _1297 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1298) -> [return: bb579, unwind: bb707];
    }

    bb577: {
        StorageLive(_1289);
        _1289 = ((_1280 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1291);
        _1291 = _1289;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1291) -> [return: bb578, unwind: bb707];
    }

    bb578: {
        StorageDead(_1291);
        StorageDead(_1289);
        StorageDead(_1286);
        StorageDead(_1284);
        StorageDead(_1280);
        StorageDead(_1279);
        goto -> bb648;
    }

    bb579: {
        StorageDead(_1298);
        _1296 = (((*_1297).1: state::perp_market::AMM).33: u128);
        StorageLive(_1299);
        StorageLive(_1300);
        StorageLive(_1301);
        StorageLive(_1302);
        StorageLive(_1303);
        _1303 = _1211;
        _1302 = core::num::<impl i64>::unsigned_abs(move _1303) -> [return: bb580, unwind: bb707];
    }

    bb580: {
        StorageDead(_1303);
        _1301 = <u64 as Cast>::cast::<u128>(move _1302) -> [return: bb581, unwind: bb707];
    }

    bb581: {
        StorageDead(_1302);
        _1300 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1301) -> [return: bb582, unwind: bb707];
    }

    bb582: {
        StorageDead(_1301);
        _1304 = discriminant(_1300);
        switchInt(move _1304) -> [0: bb583, 1: bb584, otherwise: bb5];
    }

    bb583: {
        StorageLive(_1308);
        _1308 = ((_1300 as Continue).0: u128);
        _1299 = _1308;
        StorageDead(_1308);
        _1295 = <u128 as SafeMath>::safe_add(move _1296, move _1299) -> [return: bb586, unwind: bb707];
    }

    bb584: {
        StorageLive(_1305);
        _1305 = ((_1300 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1307);
        _1307 = _1305;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1307) -> [return: bb585, unwind: bb707];
    }

    bb585: {
        StorageDead(_1307);
        StorageDead(_1305);
        StorageDead(_1299);
        StorageDead(_1296);
        StorageDead(_1295);
        goto -> bb647;
    }

    bb586: {
        StorageDead(_1299);
        StorageDead(_1296);
        _1294 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1295) -> [return: bb587, unwind: bb707];
    }

    bb587: {
        StorageDead(_1295);
        _1309 = discriminant(_1294);
        switchInt(move _1309) -> [0: bb588, 1: bb589, otherwise: bb5];
    }

    bb588: {
        StorageLive(_1313);
        _1313 = ((_1294 as Continue).0: u128);
        _1293 = _1313;
        StorageDead(_1313);
        StorageLive(_1314);
        StorageLive(_1315);
        _1315 = &mut _1256;
        _1314 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1315) -> [return: bb591, unwind: bb707];
    }

    bb589: {
        StorageLive(_1310);
        _1310 = ((_1294 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1312);
        _1312 = _1310;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1312) -> [return: bb590, unwind: bb707];
    }

    bb590: {
        StorageDead(_1312);
        StorageDead(_1310);
        goto -> bb647;
    }

    bb591: {
        StorageDead(_1315);
        (((*_1314).1: state::perp_market::AMM).33: u128) = move _1293;
        StorageDead(_1293);
        StorageDead(_1314);
        StorageDead(_1300);
        StorageDead(_1297);
        StorageDead(_1294);
        _1255 = const ();
        StorageDead(_1267);
        drop(_1256) -> [return: bb592, unwind: bb708];
    }

    bb592: {
        StorageDead(_1256);
        StorageDead(_1255);
        StorageLive(_1318);
        StorageLive(_1319);
        StorageLive(_1320);
        StorageLive(_1321);
        StorageLive(_1322);
        StorageLive(_1323);
        StorageLive(_1324);
        _1324 = &_1165;
        _1323 = &(*_1324);
        _1322 = <RefMut<'_, User> as Deref>::deref(move _1323) -> [return: bb593, unwind: bb708];
    }

    bb593: {
        _1321 = &(*_1322);
        StorageDead(_1323);
        StorageLive(_1325);
        _1325 = &(*_10);
        StorageLive(_1326);
        _1326 = &(*_11);
        StorageLive(_1327);
        _1327 = &mut (*_12);
        StorageLive(_1328);
        _1328 = _39;
        StorageLive(_1329);
        _1329 = _822;
        _1320 = calculate_margin_freed(move _1321, move _1325, move _1326, move _1327, move _1328, move _1329) -> [return: bb594, unwind: bb708];
    }

    bb594: {
        StorageDead(_1329);
        StorageDead(_1328);
        StorageDead(_1327);
        StorageDead(_1326);
        StorageDead(_1325);
        StorageDead(_1321);
        _1319 = <std::result::Result<(u64, MarginCalculation), error::ErrorCode> as Try>::branch(move _1320) -> [return: bb595, unwind: bb708];
    }

    bb595: {
        StorageDead(_1320);
        _1330 = discriminant(_1319);
        switchInt(move _1330) -> [0: bb596, 1: bb597, otherwise: bb5];
    }

    bb596: {
        StorageLive(_1334);
        _1334 = ((_1319 as Continue).0: (u64, state::margin_calculation::MarginCalculation));
        _1318 = _1334;
        StorageDead(_1334);
        StorageLive(_1316);
        _1316 = (_1318.0: u64);
        StorageLive(_1317);
        _1317 = (_1318.1: state::margin_calculation::MarginCalculation);
        StorageDead(_1324);
        StorageDead(_1322);
        StorageDead(_1319);
        StorageDead(_1318);
        StorageLive(_1335);
        StorageLive(_1336);
        StorageLive(_1337);
        StorageLive(_1338);
        _1338 = _415;
        StorageLive(_1339);
        _1339 = _1316;
        _1337 = <u64 as SafeMath>::safe_add(move _1338, move _1339) -> [return: bb599, unwind: bb708];
    }

    bb597: {
        StorageLive(_1331);
        _1331 = ((_1319 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1333);
        _1333 = _1331;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1333) -> [return: bb598, unwind: bb708];
    }

    bb598: {
        StorageDead(_1333);
        StorageDead(_1331);
        StorageDead(_1324);
        StorageDead(_1322);
        StorageDead(_1319);
        StorageDead(_1318);
        goto -> bb654;
    }

    bb599: {
        StorageDead(_1339);
        StorageDead(_1338);
        _1336 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1337) -> [return: bb600, unwind: bb708];
    }

    bb600: {
        StorageDead(_1337);
        _1340 = discriminant(_1336);
        switchInt(move _1340) -> [0: bb601, 1: bb602, otherwise: bb5];
    }

    bb601: {
        StorageLive(_1344);
        _1344 = ((_1336 as Continue).0: u64);
        _1335 = _1344;
        StorageDead(_1344);
        _415 = move _1335;
        StorageDead(_1335);
        StorageDead(_1336);
        StorageLive(_1345);
        StorageLive(_1346);
        StorageLive(_1347);
        StorageLive(_1348);
        StorageLive(_1349);
        StorageLive(_1350);
        _1350 = &mut _1165;
        _1349 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1350) -> [return: bb604, unwind: bb708];
    }

    bb602: {
        StorageLive(_1341);
        _1341 = ((_1336 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1343);
        _1343 = _1341;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1343) -> [return: bb603, unwind: bb708];
    }

    bb603: {
        StorageDead(_1343);
        StorageDead(_1341);
        StorageDead(_1335);
        StorageDead(_1336);
        goto -> bb646;
    }

    bb604: {
        _1348 = &mut (*_1349);
        StorageDead(_1350);
        StorageLive(_1351);
        _1351 = _1316;
        _1347 = User::increment_margin_freed(move _1348, move _1351) -> [return: bb605, unwind: bb708];
    }

    bb605: {
        StorageDead(_1351);
        StorageDead(_1348);
        _1346 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1347) -> [return: bb606, unwind: bb708];
    }

    bb606: {
        StorageDead(_1347);
        _1352 = discriminant(_1346);
        switchInt(move _1352) -> [0: bb607, 1: bb608, otherwise: bb5];
    }

    bb607: {
        StorageLive(_1356);
        _1356 = ((_1346 as Continue).0: ());
        _1345 = _1356;
        StorageDead(_1356);
        StorageDead(_1349);
        StorageDead(_1346);
        StorageDead(_1345);
        StorageLive(_1357);
        StorageLive(_1358);
        StorageLive(_1359);
        _1359 = &_1317;
        _1358 = MarginCalculation::meets_margin_requirement(move _1359) -> [return: bb610, unwind: bb708];
    }

    bb608: {
        StorageLive(_1353);
        _1353 = ((_1346 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1355);
        _1355 = _1353;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1355) -> [return: bb609, unwind: bb708];
    }

    bb609: {
        StorageDead(_1355);
        StorageDead(_1353);
        StorageDead(_1349);
        StorageDead(_1346);
        StorageDead(_1345);
        goto -> bb646;
    }

    bb610: {
        switchInt(move _1358) -> [0: bb614, otherwise: bb611];
    }

    bb611: {
        StorageDead(_1359);
        StorageLive(_1360);
        StorageLive(_1361);
        StorageLive(_1362);
        StorageLive(_1363);
        _1363 = &mut _1165;
        _1362 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1363) -> [return: bb612, unwind: bb708];
    }

    bb612: {
        _1361 = &mut (*_1362);
        StorageDead(_1363);
        _1360 = User::exit_liquidation(move _1361) -> [return: bb613, unwind: bb708];
    }

    bb613: {
        StorageDead(_1361);
        StorageDead(_1362);
        StorageDead(_1360);
        _1357 = const ();
        goto -> bb622;
    }

    bb614: {
        StorageDead(_1359);
        StorageLive(_1364);
        StorageLive(_1365);
        StorageLive(_1366);
        StorageLive(_1367);
        StorageLive(_1368);
        _1368 = &_1165;
        _1367 = &(*_1368);
        _1366 = <RefMut<'_, User> as Deref>::deref(move _1367) -> [return: bb615, unwind: bb708];
    }

    bb615: {
        _1365 = &(*_1366);
        StorageDead(_1367);
        _1364 = is_user_bankrupt(move _1365) -> [return: bb616, unwind: bb708];
    }

    bb616: {
        switchInt(move _1364) -> [0: bb620, otherwise: bb617];
    }

    bb617: {
        StorageDead(_1368);
        StorageDead(_1366);
        StorageDead(_1365);
        StorageLive(_1369);
        StorageLive(_1370);
        StorageLive(_1371);
        StorageLive(_1372);
        _1372 = &mut _1165;
        _1371 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1372) -> [return: bb618, unwind: bb708];
    }

    bb618: {
        _1370 = &mut (*_1371);
        StorageDead(_1372);
        _1369 = User::enter_bankruptcy(move _1370) -> [return: bb619, unwind: bb708];
    }

    bb619: {
        StorageDead(_1370);
        StorageDead(_1371);
        StorageDead(_1369);
        _1357 = const ();
        goto -> bb621;
    }

    bb620: {
        StorageDead(_1368);
        StorageDead(_1366);
        StorageDead(_1365);
        _1357 = const ();
        goto -> bb621;
    }

    bb621: {
        StorageDead(_1364);
        goto -> bb622;
    }

    bb622: {
        StorageDead(_1358);
        StorageDead(_1357);
        StorageLive(_1373);
        StorageLive(_1374);
        StorageLive(_1375);
        StorageLive(_1376);
        _1376 = _1141;
        StorageLive(_1377);
        _1377 = _1142;
        StorageLive(_1378);
        _1378 = _1039;
        _1375 = math::orders::get_position_delta_for_fill(move _1376, move _1377, move _1378) -> [return: bb623, unwind: bb708];
    }

    bb623: {
        StorageDead(_1378);
        StorageDead(_1377);
        StorageDead(_1376);
        _1374 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _1375) -> [return: bb624, unwind: bb708];
    }

    bb624: {
        StorageDead(_1375);
        _1379 = discriminant(_1374);
        switchInt(move _1379) -> [0: bb625, 1: bb626, otherwise: bb5];
    }

    bb625: {
        StorageLive(_1383);
        _1383 = move ((_1374 as Continue).0: controller::position::PositionDelta);
        _1373 = move _1383;
        StorageDead(_1383);
        StorageDead(_1374);
        StorageLive(_1384);
        StorageLive(_1385);
        StorageLive(_1386);
        StorageLive(_1387);
        StorageLive(_1388);
        StorageLive(_1389);
        StorageLive(_1390);
        StorageLive(_1391);
        StorageLive(_1392);
        StorageLive(_1393);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        _1398 = _15;
        StorageLive(_1399);
        _1399 = _403;
        StorageLive(_1400);
        _1400 = LiquidationType::LiquidatePerp;
        StorageLive(_1401);
        _1401 = (*_3);
        StorageLive(_1402);
        _1402 = (*_6);
        StorageLive(_1403);
        _1403 = (_314.3: u128);
        StorageLive(_1404);
        _1404 = (_314.1: i128);
        StorageLive(_1405);
        StorageLive(_1406);
        StorageLive(_1407);
        StorageLive(_1408);
        _1408 = &_1165;
        _1407 = <RefMut<'_, User> as Deref>::deref(move _1408) -> [return: bb628, unwind: bb708];
    }

    bb626: {
        StorageLive(_1380);
        _1380 = ((_1374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1382);
        _1382 = _1380;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1382) -> [return: bb627, unwind: bb708];
    }

    bb627: {
        StorageDead(_1382);
        StorageDead(_1380);
        StorageDead(_1374);
        goto -> bb645;
    }

    bb628: {
        _1406 = &(*_1407);
        StorageDead(_1408);
        _1405 = User::is_bankrupt(move _1406) -> [return: bb629, unwind: bb708];
    }

    bb629: {
        StorageDead(_1406);
        StorageLive(_1409);
        _1451 = const false;
        _1409 = move _473;
        StorageLive(_1410);
        _1410 = _415;
        StorageLive(_1411);
        StorageLive(_1412);
        _1412 = _1;
        StorageLive(_1413);
        _1413 = _557;
        StorageLive(_1414);
        _1414 = (_1373.1: i64);
        StorageLive(_1415);
        _1415 = (_1373.0: i64);
        StorageLive(_1416);
        _1416 = _568;
        StorageLive(_1417);
        _1417 = _1095;
        StorageLive(_1418);
        _1418 = _1098;
        StorageLive(_1419);
        StorageLive(_1420);
        StorageLive(_1421);
        StorageLive(_1422);
        StorageLive(_1423);
        _1423 = _1211;
        _1422 = core::num::<impl i64>::abs(move _1423) -> [return: bb630, unwind: bb706];
    }

    bb630: {
        StorageDead(_1423);
        _1421 = <i64 as Cast>::cast::<u64>(move _1422) -> [return: bb631, unwind: bb706];
    }

    bb631: {
        StorageDead(_1422);
        _1420 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1421) -> [return: bb632, unwind: bb706];
    }

    bb632: {
        StorageDead(_1421);
        _1424 = discriminant(_1420);
        switchInt(move _1424) -> [0: bb633, 1: bb634, otherwise: bb5];
    }

    bb633: {
        StorageLive(_1428);
        _1428 = ((_1420 as Continue).0: u64);
        _1419 = _1428;
        StorageDead(_1428);
        _1411 = LiquidatePerpRecord { market_index: move _1412, oracle_price: move _1413, base_asset_amount: move _1414, quote_asset_amount: move _1415, lp_shares: move _1416, fill_record_id: move _1418, user_order_id: move _1417, liquidator_order_id: const 0_u32, liquidator_fee: const 0_u64, if_fee: move _1419 };
        StorageDead(_1419);
        StorageDead(_1418);
        StorageDead(_1417);
        StorageDead(_1416);
        StorageDead(_1415);
        StorageDead(_1414);
        StorageDead(_1413);
        StorageDead(_1412);
        StorageLive(_1429);
        _1429 = <LiquidationRecord as Default>::default() -> [return: bb636, unwind: bb706];
    }

    bb634: {
        StorageLive(_1425);
        _1425 = ((_1420 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1427);
        _1427 = _1425;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1427) -> [return: bb635, unwind: bb706];
    }

    bb635: {
        StorageDead(_1427);
        StorageDead(_1425);
        StorageDead(_1419);
        StorageDead(_1418);
        StorageDead(_1417);
        StorageDead(_1416);
        StorageDead(_1415);
        StorageDead(_1414);
        StorageDead(_1413);
        StorageDead(_1412);
        StorageDead(_1411);
        StorageDead(_1410);
        drop(_1409) -> [return: bb644, unwind: bb708];
    }

    bb636: {
        _1397 = LiquidationRecord { ts: move _1398, liquidation_type: move _1400, user: move _1401, liquidator: move _1402, margin_requirement: move _1403, total_collateral: move _1404, margin_freed: move _1410, liquidation_id: move _1399, bankrupt: move _1405, canceled_order_ids: move _1409, liquidate_perp: move _1411, liquidate_spot: move (_1429.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_1429.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_1429.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_1429.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_1429.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_1411);
        StorageDead(_1410);
        StorageDead(_1409);
        StorageDead(_1405);
        StorageDead(_1404);
        StorageDead(_1403);
        StorageDead(_1402);
        StorageDead(_1401);
        StorageDead(_1400);
        StorageDead(_1399);
        StorageDead(_1398);
        _1396 = &_1397;
        _1395 = &(*_1396);
        _1394 = <LiquidationRecord as anchor_lang::Event>::data(move _1395) -> [return: bb637, unwind: bb704];
    }

    bb637: {
        StorageDead(_1395);
        _1393 = &_1394;
        _1392 = &(*_1393);
        _1391 = <Vec<u8> as Deref>::deref(move _1392) -> [return: bb638, unwind: bb703];
    }

    bb638: {
        _1390 = &(*_1391);
        StorageDead(_1392);
        _1389 = [move _1390];
        StorageDead(_1390);
        _1388 = &_1389;
        _1387 = &(*_1388);
        _1386 = move _1387 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1387);
        _1385 = solana_program::log::sol_log_data(move _1386) -> [return: bb639, unwind: bb703];
    }

    bb639: {
        StorageDead(_1386);
        drop(_1394) -> [return: bb640, unwind: bb704];
    }

    bb640: {
        drop(_1397) -> [return: bb641, unwind: bb705];
    }

    bb641: {
        drop(_1429) -> [return: bb642, unwind: bb708];
    }

    bb642: {
        StorageDead(_1429);
        StorageDead(_1420);
        StorageDead(_1407);
        StorageDead(_1397);
        StorageDead(_1396);
        StorageDead(_1394);
        StorageDead(_1393);
        StorageDead(_1391);
        StorageDead(_1389);
        StorageDead(_1388);
        StorageDead(_1385);
        _1384 = const ();
        StorageDead(_1384);
        StorageLive(_1430);
        _1430 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1430);
        StorageDead(_1430);
        StorageDead(_1373);
        StorageDead(_1317);
        StorageDead(_1316);
        StorageDead(_1211);
        drop(_1165) -> [return: bb643, unwind: bb759];
    }

    bb643: {
        StorageDead(_1165);
        StorageDead(_1142);
        StorageDead(_1141);
        StorageDead(_1098);
        StorageDead(_1095);
        StorageDead(_1082);
        StorageDead(_1068);
        StorageDead(_1046);
        StorageDead(_1039);
        StorageDead(_1016);
        StorageDead(_1011);
        StorageDead(_1006);
        StorageDead(_980);
        StorageDead(_945);
        StorageDead(_929);
        StorageDead(_900);
        StorageDead(_874);
        StorageDead(_871);
        StorageDead(_855);
        _1446 = const false;
        StorageDead(_842);
        _1447 = const false;
        StorageDead(_831);
        StorageDead(_822);
        StorageDead(_812);
        StorageDead(_775);
        StorageDead(_768);
        StorageDead(_704);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_557);
        StorageDead(_523);
        StorageDead(_508);
        _1450 = const false;
        StorageDead(_497);
        _1451 = const false;
        StorageDead(_473);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_403);
        StorageDead(_314);
        _1454 = const false;
        StorageDead(_191);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        _1455 = const false;
        StorageDead(_28);
        _1456 = const false;
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb702;
    }

    bb644: {
        StorageDead(_1409);
        StorageDead(_1405);
        StorageDead(_1404);
        StorageDead(_1403);
        StorageDead(_1402);
        StorageDead(_1401);
        StorageDead(_1400);
        StorageDead(_1399);
        StorageDead(_1398);
        StorageDead(_1395);
        StorageDead(_1392);
        StorageDead(_1390);
        StorageDead(_1387);
        StorageDead(_1386);
        StorageDead(_1420);
        StorageDead(_1407);
        StorageDead(_1397);
        StorageDead(_1396);
        StorageDead(_1394);
        StorageDead(_1393);
        StorageDead(_1391);
        StorageDead(_1389);
        StorageDead(_1388);
        StorageDead(_1385);
        StorageDead(_1384);
        goto -> bb645;
    }

    bb645: {
        StorageDead(_1373);
        goto -> bb646;
    }

    bb646: {
        StorageDead(_1317);
        StorageDead(_1316);
        goto -> bb654;
    }

    bb647: {
        StorageDead(_1293);
        StorageDead(_1300);
        StorageDead(_1297);
        StorageDead(_1294);
        goto -> bb648;
    }

    bb648: {
        StorageDead(_1267);
        drop(_1256) -> [return: bb649, unwind: bb708];
    }

    bb649: {
        StorageDead(_1256);
        StorageDead(_1255);
        goto -> bb654;
    }

    bb650: {
        StorageDead(_1218);
        StorageDead(_1217);
        goto -> bb651;
    }

    bb651: {
        StorageDead(_1215);
        StorageDead(_1214);
        goto -> bb652;
    }

    bb652: {
        StorageDead(_1212);
        StorageDead(_1231);
        goto -> bb653;
    }

    bb653: {
        StorageDead(_1222);
        StorageDead(_1219);
        StorageDead(_1216);
        StorageDead(_1213);
        goto -> bb654;
    }

    bb654: {
        StorageDead(_1211);
        goto -> bb655;
    }

    bb655: {
        drop(_1165) -> [return: bb656, unwind: bb759];
    }

    bb656: {
        StorageDead(_1165);
        StorageDead(_1142);
        StorageDead(_1141);
        goto -> bb657;
    }

    bb657: {
        StorageDead(_1098);
        StorageDead(_1095);
        goto -> bb658;
    }

    bb658: {
        StorageDead(_1082);
        goto -> bb659;
    }

    bb659: {
        StorageDead(_1068);
        goto -> bb660;
    }

    bb660: {
        StorageDead(_1046);
        StorageDead(_1039);
        goto -> bb661;
    }

    bb661: {
        StorageDead(_1016);
        StorageDead(_1011);
        StorageDead(_1006);
        goto -> bb664;
    }

    bb662: {
        StorageDead(_983);
        StorageDead(_982);
        goto -> bb663;
    }

    bb663: {
        StorageDead(_987);
        StorageDead(_984);
        StorageDead(_981);
        goto -> bb664;
    }

    bb664: {
        StorageDead(_980);
        goto -> bb667;
    }

    bb665: {
        StorageDead(_948);
        StorageDead(_947);
        goto -> bb666;
    }

    bb666: {
        StorageDead(_953);
        StorageDead(_949);
        StorageDead(_946);
        goto -> bb667;
    }

    bb667: {
        StorageDead(_945);
        goto -> bb668;
    }

    bb668: {
        StorageDead(_929);
        goto -> bb670;
    }

    bb669: {
        StorageDead(_904);
        StorageDead(_901);
        goto -> bb670;
    }

    bb670: {
        StorageDead(_900);
        goto -> bb672;
    }

    bb671: {
        StorageDead(_878);
        StorageDead(_875);
        goto -> bb672;
    }

    bb672: {
        StorageDead(_874);
        StorageDead(_871);
        goto -> bb673;
    }

    bb673: {
        StorageDead(_855);
        switchInt(_1446) -> [0: bb674, otherwise: bb741];
    }

    bb674: {
        _1446 = const false;
        StorageDead(_842);
        switchInt(_1447) -> [0: bb675, otherwise: bb742];
    }

    bb675: {
        _1447 = const false;
        StorageDead(_831);
        goto -> bb676;
    }

    bb676: {
        StorageDead(_822);
        goto -> bb677;
    }

    bb677: {
        StorageDead(_812);
        goto -> bb679;
    }

    bb678: {
        StorageDead(_793);
        drop(_781) -> [return: bb743, unwind: bb764];
    }

    bb679: {
        StorageDead(_775);
        StorageDead(_768);
        goto -> bb681;
    }

    bb680: {
        StorageDead(_723);
        drop(_711) -> [return: bb744, unwind: bb765];
    }

    bb681: {
        StorageDead(_704);
        goto -> bb687;
    }

    bb682: {
        StorageDead(_643);
        StorageDead(_642);
        goto -> bb683;
    }

    bb683: {
        StorageDead(_610);
        goto -> bb684;
    }

    bb684: {
        StorageDead(_601);
        goto -> bb686;
    }

    bb685: {
        StorageDead(_585);
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_575);
        goto -> bb686;
    }

    bb686: {
        StorageDead(_574);
        StorageDead(_572);
        StorageDead(_570);
        goto -> bb687;
    }

    bb687: {
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_557);
        goto -> bb688;
    }

    bb688: {
        StorageDead(_523);
        goto -> bb689;
    }

    bb689: {
        StorageDead(_508);
        switchInt(_1450) -> [0: bb690, otherwise: bb745];
    }

    bb690: {
        _1450 = const false;
        StorageDead(_497);
        switchInt(_1451) -> [0: bb691, otherwise: bb746];
    }

    bb691: {
        _1451 = const false;
        StorageDead(_473);
        goto -> bb692;
    }

    bb692: {
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb693;
    }

    bb693: {
        StorageDead(_403);
        goto -> bb697;
    }

    bb694: {
        StorageDead(_373);
        StorageDead(_369);
        goto -> bb695;
    }

    bb695: {
        StorageDead(_346);
        StorageDead(_342);
        StorageDead(_341);
        goto -> bb697;
    }

    bb696: {
        StorageDead(_325);
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_315);
        goto -> bb697;
    }

    bb697: {
        StorageDead(_314);
        goto -> bb750;
    }

    bb698: {
        _1454 = const false;
        StorageDead(_191);
        goto -> bb699;
    }

    bb699: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        switchInt(_1455) -> [0: bb700, otherwise: bb751];
    }

    bb700: {
        _1455 = const false;
        StorageDead(_28);
        switchInt(_1456) -> [0: bb701, otherwise: bb752];
    }

    bb701: {
        _1456 = const false;
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb702;
    }

    bb702: {
        return;
    }

    bb703 (cleanup): {
        drop(_1394) -> [return: bb704, unwind terminate(cleanup)];
    }

    bb704 (cleanup): {
        drop(_1397) -> [return: bb705, unwind terminate(cleanup)];
    }

    bb705 (cleanup): {
        drop(_1429) -> [return: bb708, unwind terminate(cleanup)];
    }

    bb706 (cleanup): {
        drop(_1409) -> [return: bb708, unwind terminate(cleanup)];
    }

    bb707 (cleanup): {
        drop(_1256) -> [return: bb708, unwind terminate(cleanup)];
    }

    bb708 (cleanup): {
        drop(_1165) -> [return: bb759, unwind terminate(cleanup)];
    }

    bb709 (cleanup): {
        drop(_1101) -> [return: bb755, unwind terminate(cleanup)];
    }

    bb710 (cleanup): {
        drop(_1052) -> [return: bb756, unwind terminate(cleanup)];
    }

    bb711 (cleanup): {
        drop(_1023) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb712 (cleanup): {
        drop(_781) -> [return: bb764, unwind terminate(cleanup)];
    }

    bb713 (cleanup): {
        drop(_748) -> [return: bb767, unwind terminate(cleanup)];
    }

    bb714 (cleanup): {
        drop(_711) -> [return: bb765, unwind terminate(cleanup)];
    }

    bb715 (cleanup): {
        drop(_663) -> [return: bb716, unwind terminate(cleanup)];
    }

    bb716 (cleanup): {
        drop(_666) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb717 (cleanup): {
        drop(_685) -> [return: bb767, unwind terminate(cleanup)];
    }

    bb718 (cleanup): {
        drop(_678) -> [return: bb767, unwind terminate(cleanup)];
    }

    bb719 (cleanup): {
        drop(_453) -> [return: bb775, unwind terminate(cleanup)];
    }

    bb720 (cleanup): {
        drop(_354) -> [return: bb775, unwind terminate(cleanup)];
    }

    bb721 (cleanup): {
        drop(_297) -> [return: bb772, unwind terminate(cleanup)];
    }

    bb722 (cleanup): {
        drop(_269) -> [return: bb773, unwind terminate(cleanup)];
    }

    bb723 (cleanup): {
        drop(_236) -> [return: bb775, unwind terminate(cleanup)];
    }

    bb724 (cleanup): {
        drop(_217) -> [return: bb775, unwind terminate(cleanup)];
    }

    bb725 (cleanup): {
        drop(_178) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb726 (cleanup): {
        drop(_159) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb727 (cleanup): {
        drop(_123) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb728 (cleanup): {
        drop(_104) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb729 (cleanup): {
        drop(_77) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb730 (cleanup): {
        drop(_58) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb731 (cleanup): {
        resume;
    }

    bb732: {
        _1470 = discriminant(_270);
        StorageDead(_274);
        _1453 = const false;
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &mut _28;
        _291 = &mut (*_292);
        _290 = <RefMut<'_, User> as DerefMut>::deref_mut(move _291) -> [return: bb114, unwind: bb775];
    }

    bb733: {
        _1472 = discriminant(_298);
        StorageDead(_302);
        _1452 = const false;
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_286);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &_17;
        _319 = &(*_320);
        _318 = <RefMut<'_, User> as Deref>::deref(move _319) -> [return: bb126, unwind: bb775];
    }

    bb734: {
        _1482 = discriminant(_712);
        StorageDead(_716);
        _1449 = const false;
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_709);
        StorageDead(_705);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        _740 = _704;
        switchInt(move _740) -> [0: bb326, otherwise: bb327];
    }

    bb735: {
        _1484 = discriminant(_782);
        StorageDead(_786);
        _1448 = const false;
        StorageDead(_782);
        StorageDead(_781);
        StorageDead(_779);
        StorageDead(_776);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        _815 = _775;
        StorageLive(_816);
        _816 = _39;
        _814 = <u32 as SafeMath>::safe_add(move _815, move _816) -> [return: bb360, unwind: bb767];
    }

    bb736: {
        _1494 = discriminant(_1024);
        StorageDead(_1028);
        _1445 = const false;
        StorageDead(_1024);
        StorageDead(_1023);
        StorageDead(_1021);
        StorageDead(_1017);
        StorageLive(_1039);
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        _1042 = &_17;
        _1041 = <RefMut<'_, User> as Deref>::deref(move _1042) -> [return: bb470, unwind: bb759];
    }

    bb737: {
        _1496 = discriminant(_1053);
        StorageDead(_1057);
        _1444 = const false;
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1050);
        StorageDead(_1047);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        _1071 = _871;
        StorageLive(_1072);
        _1072 = _1046;
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        _1075 = &_17;
        _1074 = <RefMut<'_, User> as Deref>::deref(move _1075) -> [return: bb484, unwind: bb759];
    }

    bb738: {
        _1500 = discriminant(_1102);
        StorageDead(_1106);
        _1457 = const false;
        StorageDead(_1102);
        StorageDead(_1101);
        StorageDead(_1099);
        StorageLive(_1112);
        StorageLive(_1113);
        StorageLive(_1114);
        StorageLive(_1115);
        _1115 = &(*_14);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        _1119 = &mut _17;
        _1118 = &mut (*_1119);
        _1117 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1118) -> [return: bb502, unwind: bb759];
    }

    bb739: {
        _1510 = discriminant(_1053);
        StorageDead(_1057);
        _1444 = const false;
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1050);
        StorageDead(_1047);
        goto -> bb660;
    }

    bb740: {
        _1512 = discriminant(_1024);
        StorageDead(_1028);
        _1445 = const false;
        StorageDead(_1024);
        StorageDead(_1023);
        StorageDead(_1021);
        StorageDead(_1017);
        goto -> bb661;
    }

    bb741: {
        drop(_842) -> [return: bb674, unwind: bb762];
    }

    bb742: {
        drop(_831) -> [return: bb675, unwind: bb767];
    }

    bb743: {
        _1514 = discriminant(_782);
        StorageDead(_786);
        _1448 = const false;
        StorageDead(_782);
        StorageDead(_781);
        StorageDead(_779);
        StorageDead(_776);
        goto -> bb679;
    }

    bb744: {
        _1516 = discriminant(_712);
        StorageDead(_716);
        _1449 = const false;
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_709);
        StorageDead(_705);
        goto -> bb681;
    }

    bb745: {
        drop(_497) -> [return: bb690, unwind: bb770];
    }

    bb746: {
        drop(_473) -> [return: bb691, unwind: bb775];
    }

    bb747: {
        _1518 = discriminant(_298);
        StorageDead(_302);
        _1452 = const false;
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_286);
        goto -> bb750;
    }

    bb748: {
        _1520 = discriminant(_270);
        StorageDead(_274);
        _1453 = const false;
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        goto -> bb750;
    }

    bb749: {
        drop(_191) -> [return: bb698, unwind: bb778];
    }

    bb750: {
        switchInt(_1454) -> [0: bb698, otherwise: bb749];
    }

    bb751: {
        drop(_28) -> [return: bb700, unwind: bb781];
    }

    bb752: {
        drop(_17) -> [return: bb701, unwind: bb731];
    }

    bb753 (cleanup): {
        _1522 = discriminant(_1257);
        goto -> bb708;
    }

    bb754 (cleanup): {
        _1523 = discriminant(_1166);
        goto -> bb759;
    }

    bb755 (cleanup): {
        _1524 = discriminant(_1102);
        goto -> bb759;
    }

    bb756 (cleanup): {
        _1525 = discriminant(_1053);
        goto -> bb759;
    }

    bb757 (cleanup): {
        _1526 = discriminant(_1024);
        goto -> bb759;
    }

    bb758 (cleanup): {
        drop(_842) -> [return: bb762, unwind terminate(cleanup)];
    }

    bb759 (cleanup): {
        switchInt(_1446) -> [0: bb762, otherwise: bb758];
    }

    bb760 (cleanup): {
        _1527 = discriminant(_843);
        goto -> bb762;
    }

    bb761 (cleanup): {
        drop(_831) -> [return: bb767, unwind terminate(cleanup)];
    }

    bb762 (cleanup): {
        switchInt(_1447) -> [0: bb767, otherwise: bb761];
    }

    bb763 (cleanup): {
        _1528 = discriminant(_832);
        goto -> bb767;
    }

    bb764 (cleanup): {
        _1529 = discriminant(_782);
        goto -> bb767;
    }

    bb765 (cleanup): {
        _1530 = discriminant(_712);
        goto -> bb767;
    }

    bb766 (cleanup): {
        drop(_497) -> [return: bb770, unwind terminate(cleanup)];
    }

    bb767 (cleanup): {
        switchInt(_1450) -> [0: bb770, otherwise: bb766];
    }

    bb768 (cleanup): {
        _1531 = discriminant(_498);
        goto -> bb770;
    }

    bb769 (cleanup): {
        drop(_473) -> [return: bb775, unwind terminate(cleanup)];
    }

    bb770 (cleanup): {
        switchInt(_1451) -> [0: bb775, otherwise: bb769];
    }

    bb771 (cleanup): {
        _1532 = discriminant(_474);
        goto -> bb775;
    }

    bb772 (cleanup): {
        _1533 = discriminant(_298);
        goto -> bb775;
    }

    bb773 (cleanup): {
        _1534 = discriminant(_270);
        goto -> bb775;
    }

    bb774 (cleanup): {
        drop(_191) -> [return: bb778, unwind terminate(cleanup)];
    }

    bb775 (cleanup): {
        switchInt(_1454) -> [0: bb778, otherwise: bb774];
    }

    bb776 (cleanup): {
        _1535 = discriminant(_192);
        goto -> bb778;
    }

    bb777 (cleanup): {
        drop(_28) -> [return: bb781, unwind terminate(cleanup)];
    }

    bb778 (cleanup): {
        switchInt(_1455) -> [0: bb781, otherwise: bb777];
    }

    bb779 (cleanup): {
        _1536 = discriminant(_29);
        goto -> bb781;
    }

    bb780 (cleanup): {
        drop(_17) -> [return: bb731, unwind terminate(cleanup)];
    }

    bb781 (cleanup): {
        switchInt(_1456) -> [0: bb731, otherwise: bb780];
    }

    bb782 (cleanup): {
        _1537 = discriminant(_18);
        goto -> bb731;
    }
}
