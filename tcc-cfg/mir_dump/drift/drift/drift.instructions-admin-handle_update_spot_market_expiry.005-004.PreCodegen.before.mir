// MIR for `admin::handle_update_spot_market_expiry` before PreCodegen

fn admin::handle_update_spot_market_expiry(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: i64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug expiry_ts => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _14: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 2];
    let _35: &[&str; 2];
    let _36: [&str; 2];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &u16;
    let _43: &u16;
    let _44: &state::spot_market::SpotMarket;
    let mut _45: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _47: anchor_lang::prelude::Clock;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _49: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _55: ();
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _57: std::result::Result<(), error::ErrorCode>;
    let mut _58: bool;
    let mut _59: i64;
    let mut _60: i64;
    let mut _61: ();
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &error::ErrorCode;
    let _81: &error::ErrorCode;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: error::ErrorCode;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 2];
    let _101: &[&str; 2];
    let _102: [&str; 2];
    let mut _103: &[core::fmt::rt::Argument<'_>];
    let mut _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: &[core::fmt::rt::Argument<'_>; 2];
    let _106: [core::fmt::rt::Argument<'_>; 2];
    let mut _107: core::fmt::rt::Argument<'_>;
    let mut _108: &state::perp_market::MarketStatus;
    let _109: &state::perp_market::MarketStatus;
    let _110: &state::spot_market::SpotMarket;
    let mut _111: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &state::perp_market::MarketStatus;
    let _114: &state::perp_market::MarketStatus;
    let _115: state::perp_market::MarketStatus;
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: &std::string::String;
    let _120: &std::string::String;
    let _121: std::string::String;
    let mut _123: std::fmt::Arguments<'_>;
    let mut _124: &[&str];
    let mut _125: &[&str; 2];
    let _126: &[&str; 2];
    let _127: [&str; 2];
    let mut _128: &[core::fmt::rt::Argument<'_>];
    let mut _129: &[core::fmt::rt::Argument<'_>; 2];
    let _130: &[core::fmt::rt::Argument<'_>; 2];
    let _131: [core::fmt::rt::Argument<'_>; 2];
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: &i64;
    let _134: &i64;
    let _135: &state::spot_market::SpotMarket;
    let mut _136: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _137: core::fmt::rt::Argument<'_>;
    let mut _138: &i64;
    let _139: &i64;
    let mut _140: state::perp_market::MarketStatus;
    let mut _141: &mut state::spot_market::SpotMarket;
    let mut _142: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _143: i64;
    let mut _144: &mut state::spot_market::SpotMarket;
    let mut _145: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _146: ();
    let mut _152: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _153: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _13;
        let _31: std::string::String;
        let _46: i64;
        let _51: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _54: anchor_lang::prelude::Clock;
        let mut _151: &[&str; 2];
        scope 10 {
            debug res => _31;
        }
        scope 11 {
            debug now => _46;
            let _62: error::ErrorCode;
            let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _90: ();
            let _97: std::string::String;
            let _122: std::string::String;
            let mut _147: &[&str; 2];
            let mut _148: &state::perp_market::MarketStatus;
            let mut _149: &[&str; 2];
            scope 16 {
                debug error_code => _62;
                let _69: std::string::String;
                let mut _150: &[&str; 2];
                scope 17 {
                    debug res => _69;
                }
            }
            scope 18 {
                debug residual => _87;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _90;
                scope 21 {
                }
            }
            scope 22 {
                debug res => _97;
            }
            scope 23 {
                debug res => _122;
            }
        }
        scope 12 {
            debug residual => _51;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _54;
            scope 15 {
            }
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _152 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _7 = &((*_152).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = &(*_7);
        _5 = constraints::spot_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb66];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _154 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _153 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _18 = &((*_153).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb69];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _164 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb60;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb66];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb66];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _158 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _151 = const _;
        _35 = &(*_151);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_13);
        _44 = <RefMut<'_, SpotMarket> as Deref>::deref(move _45) -> [return: bb13, unwind: bb65];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb68];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _156 = discriminant(_15);
        StorageDead(_15);
        goto -> bb59;
    }

    bb13: {
        StorageDead(_45);
        _43 = &((*_44).42: u16);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _42) -> [return: bb14, unwind: bb65];
    }

    bb14: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb15, unwind: bb65];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb16, unwind: bb65];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        StorageDead(_26);
        drop(_30) -> [return: bb19, unwind: bb65];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb20, unwind: bb65];
    }

    bb20: {
        _48 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _49) -> [return: bb21, unwind: bb65];
    }

    bb21: {
        StorageDead(_49);
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_54);
        _54 = move ((_48 as Continue).0: anchor_lang::prelude::Clock);
        _47 = move _54;
        StorageDead(_54);
        _46 = (_47.4: i64);
        _160 = discriminant(_48);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _46;
        StorageLive(_60);
        _60 = _2;
        _58 = Lt(move _59, move _60);
        switchInt(move _58) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_51);
        _51 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _53) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_51);
        _162 = discriminant(_48);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb58;
    }

    bb25: {
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_61);
        _61 = ();
        _57 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_62);
        _62 = error::ErrorCode::DefaultError;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _150 = const _;
        _73 = &(*_150);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_62;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _80) -> [return: bb27, unwind: bb65];
    }

    bb27: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb28, unwind: bb65];
    }

    bb28: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb29, unwind: bb65];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        StorageDead(_64);
        drop(_68) -> [return: bb32, unwind: bb65];
    }

    bb32: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = const "Market expiry ts must later than current clock timestamp";
        _83 = &(*_84);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb33, unwind: bb65];
    }

    bb33: {
        StorageDead(_83);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_85);
        _85 = _62;
        _57 = std::result::Result::<(), error::ErrorCode>::Err(move _85);
        StorageDead(_85);
        StorageDead(_62);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_58);
        _56 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _57) -> [return: bb35, unwind: bb65];
    }

    bb35: {
        StorageDead(_57);
        _86 = discriminant(_56);
        switchInt(move _86) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_90);
        _90 = ((_56 as Continue).0: ());
        _55 = _90;
        StorageDead(_90);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _149 = const _;
        _101 = &(*_149);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_13);
        _110 = <RefMut<'_, SpotMarket> as Deref>::deref(move _111) -> [return: bb39, unwind: bb65];
    }

    bb37: {
        StorageLive(_87);
        _87 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb38, unwind: bb65];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb58;
    }

    bb39: {
        StorageDead(_111);
        _109 = &((*_110).45: state::perp_market::MarketStatus);
        _108 = &(*_109);
        _107 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::MarketStatus>(move _108) -> [return: bb40, unwind: bb65];
    }

    bb40: {
        StorageDead(_108);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _148 = const _;
        _114 = &(*_148);
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::MarketStatus>(move _113) -> [return: bb41, unwind: bb65];
    }

    bb41: {
        StorageDead(_113);
        _106 = [move _107, move _112];
        StorageDead(_112);
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = move _104 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_104);
        _98 = Arguments::<'_>::new_v1(move _99, move _103) -> [return: bb42, unwind: bb65];
    }

    bb42: {
        StorageDead(_103);
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb43, unwind: bb65];
    }

    bb43: {
        StorageDead(_98);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb44, unwind: bb62];
    }

    bb44: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb45, unwind: bb62];
    }

    bb45: {
        StorageDead(_92);
        drop(_96) -> [return: bb46, unwind: bb65];
    }

    bb46: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _147 = const _;
        _126 = &(*_147);
        _125 = &(*_126);
        _124 = move _125 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_125);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &(*_13);
        _135 = <RefMut<'_, SpotMarket> as Deref>::deref(move _136) -> [return: bb47, unwind: bb65];
    }

    bb47: {
        StorageDead(_136);
        _134 = &((*_135).24: i64);
        _133 = &(*_134);
        _132 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _133) -> [return: bb48, unwind: bb65];
    }

    bb48: {
        StorageDead(_133);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_2;
        _138 = &(*_139);
        _137 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _138) -> [return: bb49, unwind: bb65];
    }

    bb49: {
        StorageDead(_138);
        _131 = [move _132, move _137];
        StorageDead(_137);
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = move _129 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_129);
        _123 = Arguments::<'_>::new_v1(move _124, move _128) -> [return: bb50, unwind: bb65];
    }

    bb50: {
        StorageDead(_128);
        StorageDead(_124);
        _122 = format(move _123) -> [return: bb51, unwind: bb65];
    }

    bb51: {
        StorageDead(_123);
        StorageDead(_139);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_126);
        _121 = move _122;
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = <String as Deref>::deref(move _119) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        _117 = &(*_118);
        StorageDead(_119);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb53, unwind: bb61];
    }

    bb53: {
        StorageDead(_117);
        drop(_121) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_140);
        _140 = state::perp_market::MarketStatus::ReduceOnly;
        StorageLive(_141);
        StorageLive(_142);
        _142 = &mut (*_13);
        _141 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _142) -> [return: bb55, unwind: bb65];
    }

    bb55: {
        StorageDead(_142);
        ((*_141).45: state::perp_market::MarketStatus) = move _140;
        StorageDead(_140);
        StorageDead(_141);
        StorageLive(_143);
        _143 = _2;
        StorageLive(_144);
        StorageLive(_145);
        _145 = &mut (*_13);
        _144 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _145) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        StorageDead(_145);
        ((*_144).24: i64) = move _143;
        StorageDead(_143);
        StorageDead(_144);
        StorageLive(_146);
        _146 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _146);
        StorageDead(_146);
        StorageDead(_46);
        drop(_14) -> [return: bb57, unwind: bb66];
    }

    bb57: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb60;
    }

    bb58: {
        StorageDead(_46);
        drop(_14) -> [return: bb59, unwind: bb66];
    }

    bb59: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_121) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_96) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_68) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_30) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_14) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67 (cleanup): {
        _166 = discriminant(_48);
        goto -> bb65;
    }

    bb68 (cleanup): {
        _167 = discriminant(_15);
        goto -> bb66;
    }

    bb69 (cleanup): {
        _168 = discriminant(_4);
        goto -> bb66;
    }
}
