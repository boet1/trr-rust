// MIR for `get_referrer` before PreCodegen

fn get_referrer(_1: &Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, _2: &UserMap<'_>, _3: &UserStatsMap<'_>, _4: Option<&User>) -> std::result::Result<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode> {
    debug referrer_info => _1;
    debug makers_and_referrer => _2;
    debug makers_and_referrer_stats => _3;
    debug maker => _4;
    let mut _0: std::result::Result<(std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>), error::ErrorCode>;
    let _5: &anchor_lang::prelude::Pubkey;
    let _6: &anchor_lang::prelude::Pubkey;
    let mut _7: &(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _8: isize;
    let _9: &(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _10: !;
    let mut _11: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _12: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _13: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let _14: ();
    let mut _15: isize;
    let mut _17: bool;
    let mut _18: &&anchor_lang::prelude::Pubkey;
    let _19: &anchor_lang::prelude::Pubkey;
    let mut _20: &&anchor_lang::prelude::Pubkey;
    let mut _21: !;
    let mut _22: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _23: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _24: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _27: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _28: &state::user_map::UserMap<'_>;
    let mut _29: &anchor_lang::prelude::Pubkey;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _38: &state::user_map::UserStatsMap<'_>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _46: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _47: std::cell::RefMut<'_, state::user::User>;
    let mut _48: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _49: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    scope 1 {
        debug referrer_authority_key => _5;
        debug referrer_user_key => _6;
        let _25: std::cell::RefMut<'_, state::user::User>;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: std::cell::RefMut<'_, state::user::User>;
        scope 3 {
            debug maker => _16;
            let _16: &state::user::User;
        }
        scope 4 {
            debug referrer => _25;
            let _35: std::cell::RefMut<'_, state::user::UserStats>;
            let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _44: std::cell::RefMut<'_, state::user::UserStats>;
            scope 9 {
                debug referrer_stats => _35;
            }
            scope 10 {
                debug residual => _41;
                scope 11 {
                }
            }
            scope 12 {
                debug val => _44;
                scope 13 {
                }
            }
        }
        scope 5 {
            debug residual => _31;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _34;
            scope 8 {
            }
        }
    }
    scope 2 {
        debug referrer_keys => _9;
    }

    bb0: {
        StorageLive(_7);
        _8 = discriminant((*_1));
        switchInt(move _8) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_11);
        StorageLive(_12);
        _12 = Option::<RefMut<'_, User>>::None;
        StorageLive(_13);
        _13 = Option::<RefMut<'_, UserStats>>::None;
        _11 = (move _12, move _13);
        StorageDead(_13);
        StorageDead(_12);
        _0 = std::result::Result::<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode>::Ok(move _11);
        StorageDead(_11);
        StorageDead(_7);
        goto -> bb22;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_9);
        _9 = &(((*_1) as Some).0: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey));
        _7 = _9;
        StorageDead(_9);
        StorageLive(_5);
        _5 = &((*_7).0: anchor_lang::prelude::Pubkey);
        StorageLive(_6);
        _6 = &((*_7).1: anchor_lang::prelude::Pubkey);
        StorageDead(_7);
        StorageLive(_14);
        _15 = discriminant(_4);
        switchInt(move _15) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = const ();
        goto -> bb9;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_4 as Some).0: &state::user::User);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_16).0: anchor_lang::prelude::Pubkey);
        _18 = &_19;
        StorageLive(_20);
        _20 = &_5;
        _17 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _18, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        StorageLive(_23);
        _23 = Option::<RefMut<'_, User>>::None;
        StorageLive(_24);
        _24 = Option::<RefMut<'_, UserStats>>::None;
        _22 = (move _23, move _24);
        StorageDead(_24);
        StorageDead(_23);
        _0 = std::result::Result::<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb21;
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _14 = const ();
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_2);
        StorageLive(_29);
        _29 = &(*_6);
        _27 = UserMap::<'_>::get_ref_mut(move _28, move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _27) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_34);
        _34 = move ((_26 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _25 = move _34;
        StorageDead(_34);
        _52 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_3);
        StorageLive(_39);
        _39 = &(*_5);
        _37 = UserStatsMap::<'_>::get_ref_mut(move _38, move _39) -> [return: bb15, unwind: bb23];
    }

    bb13: {
        StorageLive(_31);
        _31 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb14, unwind: bb26];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_31);
        _50 = discriminant(_26);
        StorageDead(_26);
        goto -> bb20;
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_38);
        _36 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _37) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_37);
        _40 = discriminant(_36);
        switchInt(move _40) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        StorageLive(_44);
        _44 = move ((_36 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _35 = move _44;
        StorageDead(_44);
        _56 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = move _25;
        _46 = Option::<RefMut<'_, User>>::Some(move _47);
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = move _35;
        _48 = Option::<RefMut<'_, UserStats>>::Some(move _49);
        StorageDead(_49);
        _45 = (move _46, move _48);
        StorageDead(_48);
        StorageDead(_46);
        _0 = std::result::Result::<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        StorageDead(_35);
        StorageDead(_25);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb22;
    }

    bb18: {
        StorageLive(_41);
        _41 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(Option<RefMut<'_, User>>, Option<RefMut<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_41);
        _54 = discriminant(_36);
        StorageDead(_36);
        StorageDead(_35);
        drop(_25) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        StorageDead(_25);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_25) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        _58 = discriminant(_36);
        goto -> bb23;
    }

    bb26 (cleanup): {
        _59 = discriminant(_26);
        goto -> bb24;
    }
}
