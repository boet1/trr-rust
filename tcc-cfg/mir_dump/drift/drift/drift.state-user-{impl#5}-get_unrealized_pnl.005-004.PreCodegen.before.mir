// MIR for `state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::get_unrealized_pnl` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::get_unrealized_pnl(_1: &PerpPosition, _2: i64) -> std::result::Result<i128, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: i128;
    let mut _4: (u128, i128);
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _6: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _7: &state::user::PerpPosition;
    let mut _8: i64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: (u128, i128);
    let mut _14: i128;
    scope 1 {
        debug unrealized_pnl => _3;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        _6 = calculate_base_asset_value_and_pnl_with_oracle_price(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: (u128, i128));
        _4 = _13;
        StorageDead(_13);
        StorageLive(_3);
        _3 = (_4.1: i128);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        _14 = _3;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        StorageDead(_3);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
