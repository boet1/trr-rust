// MIR for `calculate_perp_fuel_bonus` before PreCodegen

fn calculate_perp_fuel_bonus(_1: &PerpMarket, _2: i128, _3: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug perp_market => _1;
    debug base_asset_value => _2;
    debug fuel_bonus_numerator => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: u64;
    let mut _5: bool;
    let mut _6: u128;
    let mut _7: i128;
    let mut _8: u64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _10: std::result::Result<u64, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: i128;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: i64;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u128;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: u128;
    let mut _36: u128;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _38: std::result::Result<u128, error::ErrorCode>;
    let mut _39: u8;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: u128;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: u128;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: u128;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: u64;
    let mut _60: u64;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: u64;
    scope 1 {
        debug result => _4;
    }
    scope 2 {
        debug residual => _27;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _30;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _32;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _35;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _41;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _44;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _46;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _49;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _51;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _54;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _56;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _59;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = core::num::<impl i128>::unsigned_abs(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = Lt(move _6, const _);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        _4 = const 0_u64;
        goto -> bb38;
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _2;
        _20 = core::num::<impl i128>::unsigned_abs(move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _3;
        _24 = <i64 as Cast>::cast::<u128>(move _25) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: u128);
        _22 = _30;
        StorageDead(_30);
        _19 = <u128 as SafeMath>::safe_mul(move _20, move _22) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb42;
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_19);
        _31 = discriminant(_18);
        switchInt(move _31) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        StorageLive(_35);
        _35 = ((_18 as Continue).0: u128);
        _17 = _35;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_1).28: u8);
        _38 = <u8 as Cast>::cast::<u128>(move _39) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_32);
        _32 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb42;
    }

    bb16: {
        StorageDead(_39);
        _37 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb18, 1: bb19, otherwise: bb8];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: u128);
        _36 = _44;
        StorageDead(_44);
        _16 = <u128 as SafeMath>::safe_mul(move _17, move _36) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_41);
        _41 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb39;
    }

    bb21: {
        StorageDead(_36);
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_16);
        _45 = discriminant(_15);
        switchInt(move _45) -> [0: bb23, 1: bb24, otherwise: bb8];
    }

    bb23: {
        StorageLive(_49);
        _49 = ((_15 as Continue).0: u128);
        _14 = _49;
        StorageDead(_49);
        _13 = <u128 as SafeMath>::safe_div(move _14, const _) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_46);
        _46 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb39;
    }

    bb26: {
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_13);
        _50 = discriminant(_12);
        switchInt(move _50) -> [0: bb28, 1: bb29, otherwise: bb8];
    }

    bb28: {
        StorageLive(_54);
        _54 = ((_12 as Continue).0: u128);
        _11 = _54;
        StorageDead(_54);
        _10 = <u128 as Cast>::cast::<u64>(move _11) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_51);
        _51 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb40;
    }

    bb31: {
        StorageDead(_11);
        _9 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_10);
        _55 = discriminant(_9);
        switchInt(move _55) -> [0: bb33, 1: bb34, otherwise: bb8];
    }

    bb33: {
        StorageLive(_59);
        _59 = ((_9 as Continue).0: u64);
        _8 = _59;
        StorageDead(_59);
        StorageLive(_60);
        _61 = Eq(const 10_u64, const 0_u64);
        assert(!move _61, "attempt to divide `{}` by zero", const _) -> [success: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_56);
        _56 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_58);
        StorageDead(_56);
        goto -> bb41;
    }

    bb36: {
        _60 = Div(const _, const 10_u64);
        _62 = Eq(_60, const 0_u64);
        assert(!move _62, "attempt to divide `{}` by zero", _8) -> [success: bb37, unwind continue];
    }

    bb37: {
        _4 = Div(move _8, move _60);
        StorageDead(_60);
        StorageDead(_8);
        StorageDead(_37);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_5);
        StorageLive(_63);
        _63 = _4;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        StorageDead(_4);
        goto -> bb44;
    }

    bb39: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_8);
        StorageDead(_37);
        goto -> bb43;
    }

    bb42: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb44;
    }

    bb44: {
        return;
    }
}
