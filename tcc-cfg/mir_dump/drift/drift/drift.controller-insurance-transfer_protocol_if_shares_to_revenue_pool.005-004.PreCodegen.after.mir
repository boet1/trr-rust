// MIR for `controller::insurance::transfer_protocol_if_shares_to_revenue_pool` after PreCodegen

fn controller::insurance::transfer_protocol_if_shares_to_revenue_pool(_1: &mut IfRebalanceConfig, _2: &mut SpotMarket, _3: u64, _4: u64, _5: i64) -> std::result::Result<(), error::ErrorCode> {
    debug if_rebalance_config => _1;
    debug spot_market => _2;
    debug insurance_fund_vault_amount_before => _3;
    debug amount => _4;
    debug now => _5;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: u64;
    let mut _10: &mut state::spot_market::SpotMarket;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: u128;
    let mut _21: u64;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: &state::spot_market::InsuranceFund;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _38: std::result::Result<(), error::ErrorCode>;
    let mut _39: bool;
    let mut _40: u128;
    let mut _41: u128;
    let mut _42: ();
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: &std::string::String;
    let _48: &std::string::String;
    let _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[&str; 2];
    let _54: &[&str; 2];
    let _55: [&str; 2];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let mut _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &error::ErrorCode;
    let _62: &error::ErrorCode;
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 2];
    let _77: &[core::fmt::rt::Argument<'_>; 2];
    let _78: [core::fmt::rt::Argument<'_>; 2];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &u128;
    let _81: &u128;
    let mut _82: core::fmt::rt::Argument<'_>;
    let mut _83: &u128;
    let _84: &u128;
    let mut _85: error::ErrorCode;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _93: std::result::Result<(), error::ErrorCode>;
    let mut _94: bool;
    let mut _95: u64;
    let mut _96: u64;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _98: std::result::Result<u64, error::ErrorCode>;
    let mut _99: &state::if_rebalance_config::IfRebalanceConfig;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: ();
    let _107: ();
    let mut _108: &str;
    let _109: &str;
    let mut _110: &std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[&str; 2];
    let _117: &[&str; 2];
    let _118: [&str; 2];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let mut _120: &[core::fmt::rt::Argument<'_>; 1];
    let _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: [core::fmt::rt::Argument<'_>; 1];
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &error::ErrorCode;
    let _125: &error::ErrorCode;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 2];
    let _136: &[&str; 2];
    let _137: [&str; 2];
    let mut _138: &[core::fmt::rt::Argument<'_>];
    let mut _139: &[core::fmt::rt::Argument<'_>; 2];
    let _140: &[core::fmt::rt::Argument<'_>; 2];
    let _141: [core::fmt::rt::Argument<'_>; 2];
    let mut _142: core::fmt::rt::Argument<'_>;
    let mut _143: &u64;
    let _144: &u64;
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &u64;
    let _147: &u64;
    let _148: u64;
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _150: std::result::Result<u64, error::ErrorCode>;
    let mut _151: &state::if_rebalance_config::IfRebalanceConfig;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _157: error::ErrorCode;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: u128;
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _165: std::result::Result<u128, error::ErrorCode>;
    let mut _166: u128;
    let mut _167: u128;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _173: ();
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _175: std::result::Result<(), error::ErrorCode>;
    let mut _176: u128;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _178: std::result::Result<u128, error::ErrorCode>;
    let mut _179: u64;
    let mut _180: isize;
    let mut _182: !;
    let mut _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _185: &state::spot_market::SpotBalanceType;
    let _186: &state::spot_market::SpotBalanceType;
    let _187: state::spot_market::SpotBalanceType;
    let mut _188: &mut state::spot_market::SpotMarket;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: u64;
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _196: std::result::Result<u64, error::ErrorCode>;
    let mut _197: u64;
    let mut _198: u64;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _204: ();
    let _205: ();
    let mut _206: &[&[u8]];
    let mut _207: &[&[u8]; 1];
    let _208: &[&[u8]; 1];
    let _209: [&[u8]; 1];
    let mut _210: &[u8];
    let _211: &[u8];
    let mut _212: &std::vec::Vec<u8>;
    let _213: &std::vec::Vec<u8>;
    let _214: std::vec::Vec<u8>;
    let mut _215: &state::events::TransferProtocolIfSharesToRevenuePoolRecord;
    let _216: &state::events::TransferProtocolIfSharesToRevenuePoolRecord;
    let _217: state::events::TransferProtocolIfSharesToRevenuePoolRecord;
    let mut _218: i64;
    let mut _219: u16;
    let mut _220: u64;
    let mut _221: u128;
    let mut _222: u64;
    let mut _223: u128;
    let mut _224: u64;
    let mut _225: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug shares => _16;
        let _27: u128;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: u128;
        scope 10 {
            debug protocol_shares => _27;
            let _43: error::ErrorCode;
            let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _90: ();
            let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _104: u64;
            let _106: error::ErrorCode;
            let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _162: ();
            let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _172: u128;
            let _181: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _184: u128;
            let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _193: ();
            let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _203: u64;
            let mut _226: &state::spot_market::SpotBalanceType;
            scope 15 {
                debug error_code => _43;
                let _50: std::string::String;
                let _69: std::string::String;
                let mut _229: &[&str; 2];
                let mut _230: &[&str; 2];
                scope 16 {
                    debug res => _50;
                }
                scope 17 {
                    debug res => _69;
                }
            }
            scope 18 {
                debug residual => _87;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _90;
                scope 21 {
                }
            }
            scope 22 {
                debug residual => _101;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _104;
                scope 25 {
                }
            }
            scope 26 {
                debug error_code => _106;
                let _113: std::string::String;
                let _132: std::string::String;
                let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _156: u64;
                let mut _227: &[&str; 2];
                let mut _228: &[&str; 2];
                scope 27 {
                    debug res => _113;
                }
                scope 28 {
                    debug res => _132;
                }
                scope 29 {
                    debug residual => _153;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _156;
                    scope 32 {
                    }
                }
            }
            scope 33 {
                debug residual => _159;
                scope 34 {
                }
            }
            scope 35 {
                debug val => _162;
                scope 36 {
                }
            }
            scope 37 {
                debug residual => _169;
                scope 38 {
                }
            }
            scope 39 {
                debug val => _172;
                scope 40 {
                }
            }
            scope 41 {
                debug residual => _181;
                scope 42 {
                }
            }
            scope 43 {
                debug val => _184;
                scope 44 {
                }
            }
            scope 45 {
                debug residual => _190;
                scope 46 {
                }
            }
            scope 47 {
                debug val => _193;
                scope 48 {
                }
            }
            scope 49 {
                debug residual => _200;
                scope 50 {
                }
            }
            scope 51 {
                debug val => _203;
                scope 52 {
                }
            }
        }
        scope 11 {
            debug residual => _32;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _35;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = &mut (*_2);
        _8 = apply_rebase_to_insurance_fund(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: ());
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _4;
        StorageLive(_20);
        _20 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_21);
        _21 = _3;
        _18 = vault_amount_to_if_shares(move _19, move _20, move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb96;
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_17 as Continue).0: u128);
        _16 = _26;
        StorageDead(_26);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &((*_2).9: state::spot_market::InsuranceFund);
        _29 = InsuranceFund::get_protocol_shares(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_17);
        goto -> bb95;
    }

    bb12: {
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: u128);
        _27 = _35;
        StorageDead(_35);
        StorageDead(_28);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _16;
        StorageLive(_41);
        _41 = _27;
        _39 = Le(move _40, move _41);
        switchInt(move _39) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_28);
        goto -> bb94;
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_42);
        _42 = ();
        _38 = std::result::Result::<(), error::ErrorCode>::Ok(move _42);
        StorageDead(_42);
        goto -> bb32;
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_43);
        _43 = error::ErrorCode::InsufficientIFShares;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _230 = const _;
        _54 = &(*_230);
        _53 = &(*_54);
        _52 = move _53 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_43;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _61) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_61);
        _59 = [move _60];
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = move _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_57);
        _51 = Arguments::<'_>::new_v1(move _52, move _56) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = format(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        _49 = move _50;
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = <String as Deref>::deref(move _47) -> [return: bb22, unwind: bb101];
    }

    bb22: {
        _45 = &(*_46);
        StorageDead(_47);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb23, unwind: bb101];
    }

    bb23: {
        StorageDead(_45);
        drop(_49) -> [return: bb24, unwind: bb102];
    }

    bb24: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _229 = const _;
        _73 = &(*_229);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_16;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _80) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_27;
        _83 = &(*_84);
        _82 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _83) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_83);
        _78 = [move _79, move _82];
        StorageDead(_82);
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_70);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb29, unwind: bb100];
    }

    bb29: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb30, unwind: bb100];
    }

    bb30: {
        StorageDead(_64);
        drop(_68) -> [return: bb31, unwind: bb102];
    }

    bb31: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_85);
        _85 = _43;
        _38 = std::result::Result::<(), error::ErrorCode>::Err(move _85);
        StorageDead(_85);
        StorageDead(_43);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_39);
        _37 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _38) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_38);
        _86 = discriminant(_37);
        switchInt(move _86) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_90);
        _90 = ((_37 as Continue).0: ());
        _36 = _90;
        StorageDead(_90);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _4;
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        _98 = IfRebalanceConfig::max_transfer_amount(move _99) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_87);
        _87 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb94;
    }

    bb37: {
        StorageDead(_99);
        _97 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_98);
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_104);
        _104 = ((_97 as Continue).0: u64);
        _96 = _104;
        StorageDead(_104);
        _94 = Le(move _95, move _96);
        switchInt(move _94) -> [0: bb43, otherwise: bb42];
    }

    bb40: {
        StorageLive(_101);
        _101 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb92;
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_105);
        _105 = ();
        _93 = std::result::Result::<(), error::ErrorCode>::Ok(move _105);
        StorageDead(_105);
        goto -> bb62;
    }

    bb43: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_106);
        _106 = error::ErrorCode::DefaultError;
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _228 = const _;
        _117 = &(*_228);
        _116 = &(*_117);
        _115 = move _116 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_106;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _124) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_124);
        _122 = [move _123];
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = move _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_120);
        _114 = Arguments::<'_>::new_v1(move _115, move _119) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = format(move _114) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_114);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_117);
        _112 = move _113;
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = <String as Deref>::deref(move _110) -> [return: bb47, unwind: bb99];
    }

    bb47: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = solana_program::log::sol_log(move _108) -> [return: bb48, unwind: bb99];
    }

    bb48: {
        StorageDead(_108);
        drop(_112) -> [return: bb49, unwind: bb102];
    }

    bb49: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _227 = const _;
        _136 = &(*_227);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_4;
        _143 = &(*_144);
        _142 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _143) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &(*_1);
        _150 = IfRebalanceConfig::max_transfer_amount(move _151) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_151);
        _149 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _150) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_150);
        _152 = discriminant(_149);
        switchInt(move _152) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_156);
        _156 = ((_149 as Continue).0: u64);
        _148 = _156;
        StorageDead(_156);
        _147 = &_148;
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _146) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_153);
        _153 = ((_149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_106);
        goto -> bb92;
    }

    bb56: {
        StorageDead(_146);
        _141 = [move _142, move _145];
        StorageDead(_145);
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_139);
        _133 = Arguments::<'_>::new_v1(move _134, move _138) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_138);
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_133);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <String as Deref>::deref(move _129) -> [return: bb59, unwind: bb98];
    }

    bb59: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb60, unwind: bb98];
    }

    bb60: {
        StorageDead(_127);
        drop(_131) -> [return: bb61, unwind: bb102];
    }

    bb61: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_157);
        _157 = _106;
        _93 = std::result::Result::<(), error::ErrorCode>::Err(move _157);
        StorageDead(_157);
        StorageDead(_106);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_94);
        _92 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _93) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_93);
        _158 = discriminant(_92);
        switchInt(move _158) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_162);
        _162 = ((_92 as Continue).0: ());
        _91 = _162;
        StorageDead(_162);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = (((*_2).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_167);
        _167 = _16;
        _165 = <u128 as SafeMath>::safe_sub(move _166, move _167) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_159);
        _159 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_161);
        StorageDead(_159);
        goto -> bb93;
    }

    bb67: {
        StorageDead(_167);
        StorageDead(_166);
        _164 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _165) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_165);
        _168 = discriminant(_164);
        switchInt(move _168) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_172);
        _172 = ((_164 as Continue).0: u128);
        _163 = _172;
        StorageDead(_172);
        (((*_2).9: state::spot_market::InsuranceFund).1: u128) = move _163;
        StorageDead(_163);
        StorageDead(_164);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = _4;
        _178 = <u64 as Cast>::cast::<u128>(move _179) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_169);
        _169 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_163);
        StorageDead(_164);
        goto -> bb94;
    }

    bb72: {
        StorageDead(_179);
        _177 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _178) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_178);
        _180 = discriminant(_177);
        switchInt(move _180) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_184);
        _184 = ((_177 as Continue).0: u128);
        _176 = _184;
        StorageDead(_184);
        StorageLive(_185);
        StorageLive(_186);
        _226 = const _;
        _186 = &(*_226);
        _185 = &(*_186);
        StorageLive(_188);
        _188 = &mut (*_2);
        _175 = update_revenue_pool_balances(move _176, move _185, move _188) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_181);
        _181 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_183);
        _183 = _181;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _183) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb91;
    }

    bb77: {
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_176);
        _174 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _175) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_175);
        _189 = discriminant(_174);
        switchInt(move _189) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_193);
        _193 = ((_174 as Continue).0: ());
        _173 = _193;
        StorageDead(_193);
        StorageDead(_186);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ((*_1).4: u64);
        StorageLive(_198);
        _198 = _4;
        _196 = <u64 as SafeMath>::safe_add(move _197, move _198) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_190);
        _190 = ((_174 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_186);
        goto -> bb91;
    }

    bb82: {
        StorageDead(_198);
        StorageDead(_197);
        _195 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _196) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_196);
        _199 = discriminant(_195);
        switchInt(move _199) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_203);
        _203 = ((_195 as Continue).0: u64);
        _194 = _203;
        StorageDead(_203);
        ((*_1).4: u64) = move _194;
        StorageDead(_194);
        StorageDead(_195);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _5;
        StorageLive(_219);
        _219 = ((*_2).42: u16);
        StorageLive(_220);
        _220 = _4;
        StorageLive(_221);
        _221 = _16;
        StorageLive(_222);
        _222 = _3;
        StorageLive(_223);
        _223 = _27;
        StorageLive(_224);
        _224 = _4;
        _217 = TransferProtocolIfSharesToRevenuePoolRecord { ts: move _218, market_index: move _219, amount: move _220, shares: move _221, if_vault_amount_before: move _222, protocol_shares_before: move _223, transfer_amount: move _224 };
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = <TransferProtocolIfSharesToRevenuePoolRecord as anchor_lang::Event>::data(move _215) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_200);
        _200 = ((_195 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_194);
        StorageDead(_195);
        goto -> bb94;
    }

    bb87: {
        StorageDead(_215);
        _213 = &_214;
        _212 = &(*_213);
        _211 = <Vec<u8> as Deref>::deref(move _212) -> [return: bb88, unwind: bb97];
    }

    bb88: {
        _210 = &(*_211);
        StorageDead(_212);
        _209 = [move _210];
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = move _207 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_207);
        _205 = solana_program::log::sol_log_data(move _206) -> [return: bb89, unwind: bb97];
    }

    bb89: {
        StorageDead(_206);
        drop(_214) -> [return: bb90, unwind: bb102];
    }

    bb90: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_205);
        _204 = const ();
        StorageDead(_204);
        StorageLive(_225);
        _225 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _225);
        StorageDead(_225);
        StorageDead(_27);
        StorageDead(_16);
        goto -> bb96;
    }

    bb91: {
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb94;
    }

    bb92: {
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_27);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_16);
        goto -> bb96;
    }

    bb96: {
        return;
    }

    bb97 (cleanup): {
        drop(_214) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_131) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_112) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_68) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_49) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }
}
