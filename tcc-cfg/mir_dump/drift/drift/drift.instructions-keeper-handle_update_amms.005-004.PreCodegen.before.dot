digraph Mir_0_9323 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn keeper::handle_update_amms(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::keeper::UpdateAMM&lt;ReErased&gt;&gt;, _2: std::vec::Vec&lt;u16, std::alloc::Global&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _5: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let _7: &amp;ReErased std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _12: ();<br align="left"/>let _13: ();<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: &amp;ReErased std::vec::Vec&lt;u16, std::alloc::Global&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let _18: ();<br align="left"/>let mut _19: &amp;ReErased str;<br align="left"/>let _20: &amp;ReErased str;<br align="left"/>let mut _21: anchor_lang::error::Error;<br align="left"/>let mut _22: error::ErrorCode;<br align="left"/>let _23: anchor_lang::prelude::Clock;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, anchor_lang::prelude::Clock&gt;;<br align="left"/>let mut _25: std::result::Result&lt;anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _30: anchor_lang::prelude::Clock;<br align="left"/>let _31: &amp;ReErased std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let _32: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let mut _33: std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let mut _34: std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _35: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let _36: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _37: state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _38: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle_map::OracleMap&lt;ReErased&gt;&gt;;<br align="left"/>let mut _39: std::result::Result&lt;state::oracle_map::OracleMap&lt;ReErased&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _40: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let mut _41: u64;<br align="left"/>let mut _42: std::option::Option&lt;state::state::OracleGuardRails&gt;;<br align="left"/>let mut _43: isize;<br align="left"/>let _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _45: !;<br align="left"/>let mut _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _47: state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let _48: &amp;ReErased mut state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _49: state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _50: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::perp_market_map::PerpMarketMap&lt;ReErased&gt;&gt;;<br align="left"/>let mut _51: std::result::Result&lt;state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _52: &amp;ReErased std::collections::BTreeSet&lt;u16, std::alloc::Global&gt;;<br align="left"/>let _53: &amp;ReErased std::collections::BTreeSet&lt;u16, std::alloc::Global&gt;;<br align="left"/>let _54: std::collections::BTreeSet&lt;u16, std::alloc::Global&gt;;<br align="left"/>let mut _55: std::vec::Vec&lt;u16, std::alloc::Global&gt;;<br align="left"/>let mut _56: &amp;ReErased mut std::iter::Peekable&lt;std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;&gt;;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _61: state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let _62: bool;<br align="left"/>let mut _63: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _64: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _65: &amp;ReErased mut state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _66: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _67: &amp;ReErased state::state::State;<br align="left"/>let _68: &amp;ReErased state::state::State;<br align="left"/>let mut _69: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _70: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let _71: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _72: isize;<br align="left"/>let _73: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _74: !;<br align="left"/>let mut _75: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _76: bool;<br align="left"/>let mut _77: ();<br align="left"/>let mut _78: &amp;ReErased mut instructions::keeper::UpdateAMM&lt;ReErased&gt;;<br align="left"/>let mut _79: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _80: &amp;ReErased mut instructions::keeper::UpdateAMM&lt;ReErased&gt;;<br align="left"/>let mut _81: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _82: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _83: bool;<br align="left"/>let mut _84: isize;<br align="left"/>let mut _85: isize;<br align="left"/>let mut _86: isize;<br align="left"/>let mut _87: isize;<br align="left"/>let mut _88: isize;<br align="left"/>let mut _89: isize;<br align="left"/>let mut _90: isize;<br align="left"/>let mut _91: isize;<br align="left"/>let mut _92: isize;<br align="left"/>let mut _93: isize;<br align="left"/>let mut _94: isize;<br align="left"/>let mut _95: isize;<br align="left"/>let mut _96: isize;<br align="left"/>let mut _97: isize;<br align="left"/>let mut _98: isize;<br align="left"/>let mut _99: isize;<br align="left"/>let mut _100: isize;<br align="left"/>let mut _101: isize;<br align="left"/>let mut _102: isize;<br align="left"/>let mut _103: isize;<br align="left"/>let mut _104: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _105: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug market_indexes =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug clock =&gt; _23;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug state =&gt; _31;<br align="left"/>debug remaining_accounts_iter =&gt; _32;<br align="left"/>debug oracle_map =&gt; _36;<br align="left"/>debug residual =&gt; _44;<br align="left"/>debug val =&gt; _47;<br align="left"/>debug market_map =&gt; _48;<br align="left"/>debug residual =&gt; _58;<br align="left"/>debug val =&gt; _61;<br align="left"/>debug residual =&gt; _73;<br align="left"/>debug val =&gt; _76;<br align="left"/>>;
    bb0__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_83 = const false<br/>_83 = const true<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_78 = deref_copy (_1.1: &amp;mut instructions::keeper::UpdateAMM&lt;'_&gt;)<br/>_7 = &amp;((*_78).0: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_79 = deref_copy (*_7)<br/>_104 = (((_79.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_6 = &amp;(*_104)<br/></td></tr><tr><td align="left">_5 = constraints::exchange_not_paused(move _6)</td></tr></table>>];
    bb1__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_8 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_4 as Continue).0: ())<br/>_3 = _12<br/>StorageDead(_12)<br/>_84 = discriminant(_4)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;_2<br/></td></tr><tr><td align="left">_15 = Vec::&lt;u16&gt;::len(move _16)</td></tr></table>>];
    bb4__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_11)<br/>_11 = move _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>_98 = discriminant(_4)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_14 = Gt(move _15, const 5_usize)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb8__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = const &quot;Too many markets passed, max 5&quot;<br/>_19 = &amp;(*_20)<br/></td></tr><tr><td align="left">_18 = solana_program::log::sol_log(move _19)</td></tr></table>>];
    bb9__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_20)<br/>StorageDead(_18)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = error::ErrorCode::DefaultError<br/></td></tr><tr><td align="left">_21 = &lt;error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _22)</td></tr></table>>];
    bb10__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _21)<br/>StorageDead(_21)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_13 = const ()<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/></td></tr><tr><td align="left">_25 = &lt;anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar&gt;::get()</td></tr></table>>];
    bb12__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb13__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_26 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb14__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = move ((_24 as Continue).0: anchor_lang::prelude::Clock)<br/>_23 = move _30<br/>StorageDead(_30)<br/>_86 = discriminant(_24)<br/>StorageDead(_24)<br/>StorageLive(_31)<br/>_80 = deref_copy (_1.1: &amp;mut instructions::keeper::UpdateAMM&lt;'_&gt;)<br/>_31 = &amp;((*_80).0: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_81 = deref_copy (_1.2: &amp;[anchor_lang::prelude::AccountInfo&lt;'_&gt;])<br/>_35 = &amp;(*_81)<br/></td></tr><tr><td align="left">_34 = core::slice::&lt;impl [anchor_lang::prelude::AccountInfo&lt;'_&gt;]&gt;::iter(move _35)</td></tr></table>>];
    bb15__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = move ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_29)<br/>_29 = move _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb16__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>_96 = discriminant(_24)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;std::slice::Iter&lt;'_, anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt; as Iterator&gt;::peekable(move _34)</td></tr></table>>];
    bb18__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_32 = &amp;mut _33<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = &amp;mut (*_32)<br/>StorageLive(_41)<br/>_41 = (_23.0: u64)<br/>StorageLive(_42)<br/>_42 = Option::&lt;state::state::OracleGuardRails&gt;::None<br/></td></tr><tr><td align="left">_39 = OracleMap::&lt;'_&gt;::load(move _40, move _41, move _42)</td></tr></table>>];
    bb19__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = &lt;std::result::Result&lt;OracleMap&lt;'_&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _39)</td></tr></table>>];
    bb20__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_43 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb21__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = move ((_38 as Continue).0: state::oracle_map::OracleMap&lt;'_&gt;)<br/>_37 = move _47<br/>StorageDead(_47)<br/>_36 = &amp;mut _37<br/>_90 = discriminant(_38)<br/>StorageDead(_38)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_83 = const false<br/>_55 = move _2<br/></td></tr><tr><td align="left">_54 = get_market_set_from_list(move _55)</td></tr></table>>];
    bb22__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_38 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_46)<br/>_46 = _44<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _46)</td></tr></table>>];
    bb23__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_44)<br/>_88 = discriminant(_38)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>_53 = &amp;_54<br/>_52 = &amp;(*_53)<br/>StorageLive(_56)<br/>_56 = &amp;mut (*_32)<br/></td></tr><tr><td align="left">_51 = PerpMarketMap::&lt;'_&gt;::load(move _52, move _56)</td></tr></table>>];
    bb25__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">_50 = &lt;std::result::Result&lt;PerpMarketMap&lt;'_&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _51)</td></tr></table>>];
    bb26__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>_57 = discriminant(_50)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb27__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = move ((_50 as Continue).0: state::perp_market_map::PerpMarketMap&lt;'_&gt;)<br/>_49 = move _61<br/>StorageDead(_61)<br/>_48 = &amp;mut _49<br/>_94 = discriminant(_50)<br/></td></tr><tr><td align="left">drop(_54)</td></tr></table>>];
    bb28__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_50 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_60)<br/>_60 = _58<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _60)</td></tr></table>>];
    bb29__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/>_92 = discriminant(_50)<br/></td></tr><tr><td align="left">drop(_54)</td></tr></table>>];
    bb30__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_50)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_65 = &amp;mut (*_48)<br/>StorageLive(_66)<br/>_66 = &amp;mut (*_36)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_82 = deref_copy (*_31)<br/>_105 = (((_82.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_69 = &amp;(*_105)<br/></td></tr><tr><td align="left">_68 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _69)</td></tr></table>>];
    bb31__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_67 = &amp;(*_68)<br/>StorageDead(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_23<br/>_70 = &amp;(*_71)<br/></td></tr><tr><td align="left">_64 = controller::repeg::update_amms(move _65, move _66, move _67, move _70)</td></tr></table>>];
    bb32__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">_63 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _64)</td></tr></table>>];
    bb33__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>_72 = discriminant(_63)<br/></td></tr><tr><td align="left">switchInt(move _72)</td></tr></table>>];
    bb34__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = ((_63 as Continue).0: bool)<br/>_62 = _76<br/>StorageDead(_76)<br/>StorageDead(_71)<br/>StorageDead(_68)<br/>StorageDead(_63)<br/>StorageDead(_62)<br/>StorageLive(_77)<br/>_77 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _77)<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb35__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_73)<br/>_73 = ((_63 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_75)<br/>_75 = _73<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _75)</td></tr></table>>];
    bb36__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_73)<br/>StorageDead(_71)<br/>StorageDead(_68)<br/>StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb37__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb38__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb41__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left">return</td></tr></table>>];
    bb44__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">44 (cleanup)</td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb45__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">45 (cleanup)</td></tr><tr><td align="left">drop(_54)</td></tr></table>>];
    bb46__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">46 (cleanup)</td></tr><tr><td align="left">drop(_37)</td></tr></table>>];
    bb47__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">47 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb48__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb49__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left">switchInt(_83)</td></tr></table>>];
    bb50__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">50 (cleanup)</td></tr><tr><td align="left" balign="left">_100 = discriminant(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">51 (cleanup)</td></tr><tr><td align="left" balign="left">_101 = discriminant(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">52 (cleanup)</td></tr><tr><td align="left" balign="left">_102 = discriminant(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">53 (cleanup)</td></tr><tr><td align="left" balign="left">_103 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">54 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb55__0_9323 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">55 (cleanup)</td></tr><tr><td align="left">switchInt(_83)</td></tr></table>>];
    bb0__0_9323 -> bb1__0_9323 [label="return"];
    bb0__0_9323 -> bb55__0_9323 [label="unwind"];
    bb1__0_9323 -> bb2__0_9323 [label="return"];
    bb1__0_9323 -> bb55__0_9323 [label="unwind"];
    bb2__0_9323 -> bb3__0_9323 [label="0"];
    bb2__0_9323 -> bb5__0_9323 [label="1"];
    bb2__0_9323 -> bb4__0_9323 [label="otherwise"];
    bb3__0_9323 -> bb7__0_9323 [label="return"];
    bb3__0_9323 -> bb55__0_9323 [label="unwind"];
    bb5__0_9323 -> bb6__0_9323 [label="return"];
    bb5__0_9323 -> bb53__0_9323 [label="unwind"];
    bb6__0_9323 -> bb49__0_9323 [label=""];
    bb7__0_9323 -> bb11__0_9323 [label="0"];
    bb7__0_9323 -> bb8__0_9323 [label="otherwise"];
    bb8__0_9323 -> bb9__0_9323 [label="return"];
    bb8__0_9323 -> bb55__0_9323 [label="unwind"];
    bb9__0_9323 -> bb10__0_9323 [label="return"];
    bb9__0_9323 -> bb55__0_9323 [label="unwind"];
    bb10__0_9323 -> bb49__0_9323 [label=""];
    bb11__0_9323 -> bb12__0_9323 [label="return"];
    bb11__0_9323 -> bb55__0_9323 [label="unwind"];
    bb12__0_9323 -> bb13__0_9323 [label="return"];
    bb12__0_9323 -> bb55__0_9323 [label="unwind"];
    bb13__0_9323 -> bb14__0_9323 [label="0"];
    bb13__0_9323 -> bb15__0_9323 [label="1"];
    bb13__0_9323 -> bb4__0_9323 [label="otherwise"];
    bb14__0_9323 -> bb17__0_9323 [label="return"];
    bb14__0_9323 -> bb55__0_9323 [label="unwind"];
    bb15__0_9323 -> bb16__0_9323 [label="return"];
    bb15__0_9323 -> bb52__0_9323 [label="unwind"];
    bb16__0_9323 -> bb42__0_9323 [label=""];
    bb17__0_9323 -> bb18__0_9323 [label="return"];
    bb17__0_9323 -> bb55__0_9323 [label="unwind"];
    bb18__0_9323 -> bb19__0_9323 [label="return"];
    bb18__0_9323 -> bb55__0_9323 [label="unwind"];
    bb19__0_9323 -> bb20__0_9323 [label="return"];
    bb19__0_9323 -> bb55__0_9323 [label="unwind"];
    bb20__0_9323 -> bb21__0_9323 [label="0"];
    bb20__0_9323 -> bb22__0_9323 [label="1"];
    bb20__0_9323 -> bb4__0_9323 [label="otherwise"];
    bb21__0_9323 -> bb24__0_9323 [label="return"];
    bb21__0_9323 -> bb46__0_9323 [label="unwind"];
    bb22__0_9323 -> bb23__0_9323 [label="return"];
    bb22__0_9323 -> bb51__0_9323 [label="unwind"];
    bb23__0_9323 -> bb41__0_9323 [label=""];
    bb24__0_9323 -> bb25__0_9323 [label="return"];
    bb24__0_9323 -> bb45__0_9323 [label="unwind"];
    bb25__0_9323 -> bb26__0_9323 [label="return"];
    bb25__0_9323 -> bb45__0_9323 [label="unwind"];
    bb26__0_9323 -> bb27__0_9323 [label="0"];
    bb26__0_9323 -> bb28__0_9323 [label="1"];
    bb26__0_9323 -> bb4__0_9323 [label="otherwise"];
    bb27__0_9323 -> bb30__0_9323 [label="return"];
    bb27__0_9323 -> bb44__0_9323 [label="unwind"];
    bb28__0_9323 -> bb29__0_9323 [label="return"];
    bb28__0_9323 -> bb50__0_9323 [label="unwind"];
    bb29__0_9323 -> bb39__0_9323 [label="return"];
    bb29__0_9323 -> bb46__0_9323 [label="unwind"];
    bb30__0_9323 -> bb31__0_9323 [label="return"];
    bb30__0_9323 -> bb44__0_9323 [label="unwind"];
    bb31__0_9323 -> bb32__0_9323 [label="return"];
    bb31__0_9323 -> bb44__0_9323 [label="unwind"];
    bb32__0_9323 -> bb33__0_9323 [label="return"];
    bb32__0_9323 -> bb44__0_9323 [label="unwind"];
    bb33__0_9323 -> bb34__0_9323 [label="0"];
    bb33__0_9323 -> bb35__0_9323 [label="1"];
    bb33__0_9323 -> bb4__0_9323 [label="otherwise"];
    bb34__0_9323 -> bb37__0_9323 [label="return"];
    bb34__0_9323 -> bb46__0_9323 [label="unwind"];
    bb35__0_9323 -> bb36__0_9323 [label="return"];
    bb35__0_9323 -> bb44__0_9323 [label="unwind"];
    bb36__0_9323 -> bb40__0_9323 [label="return"];
    bb36__0_9323 -> bb46__0_9323 [label="unwind"];
    bb37__0_9323 -> bb38__0_9323 [label="return"];
    bb37__0_9323 -> bb55__0_9323 [label="unwind"];
    bb38__0_9323 -> bb43__0_9323 [label=""];
    bb39__0_9323 -> bb40__0_9323 [label=""];
    bb40__0_9323 -> bb41__0_9323 [label="return"];
    bb40__0_9323 -> bb55__0_9323 [label="unwind"];
    bb41__0_9323 -> bb42__0_9323 [label=""];
    bb42__0_9323 -> bb49__0_9323 [label=""];
    bb44__0_9323 -> bb46__0_9323 [label="return"];
    bb45__0_9323 -> bb46__0_9323 [label="return"];
    bb46__0_9323 -> bb55__0_9323 [label="return"];
    bb48__0_9323 -> bb43__0_9323 [label="return"];
    bb48__0_9323 -> bb47__0_9323 [label="unwind"];
    bb49__0_9323 -> bb43__0_9323 [label="0"];
    bb49__0_9323 -> bb48__0_9323 [label="otherwise"];
    bb50__0_9323 -> bb45__0_9323 [label=""];
    bb51__0_9323 -> bb55__0_9323 [label=""];
    bb52__0_9323 -> bb55__0_9323 [label=""];
    bb53__0_9323 -> bb55__0_9323 [label=""];
    bb54__0_9323 -> bb47__0_9323 [label="return"];
    bb55__0_9323 -> bb47__0_9323 [label="0"];
    bb55__0_9323 -> bb54__0_9323 [label="otherwise"];
}
