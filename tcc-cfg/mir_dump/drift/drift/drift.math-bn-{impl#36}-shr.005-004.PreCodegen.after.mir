// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:1594:3: 1594:68>::shr` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:1594:3: 1594:68>::shr(_1: U256, _2: T) -> U256 {
    debug self => _1;
    debug shift => _2;
    let mut _0: math::bn::U256;
    let _3: usize;
    let mut _4: &math::bn::U256;
    let _5: math::bn::U256;
    let mut _6: T;
    let mut _10: usize;
    let mut _11: bool;
    let mut _13: usize;
    let mut _14: bool;
    let _15: ();
    let mut _16: std::ops::Range<usize>;
    let mut _17: std::ops::Range<usize>;
    let mut _18: usize;
    let mut _20: ();
    let _21: ();
    let mut _22: std::option::Option<usize>;
    let mut _23: &mut std::ops::Range<usize>;
    let mut _24: &mut std::ops::Range<usize>;
    let mut _25: isize;
    let mut _26: !;
    let mut _28: u64;
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _32: usize;
    let mut _33: bool;
    let _34: usize;
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: (usize, bool);
    let mut _38: usize;
    let mut _39: bool;
    let _40: ();
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: std::ops::Range<usize>;
    let mut _44: std::ops::Range<usize>;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: (usize, bool);
    let _49: ();
    let mut _50: std::option::Option<usize>;
    let mut _51: &mut std::ops::Range<usize>;
    let mut _52: &mut std::ops::Range<usize>;
    let mut _53: isize;
    let mut _54: !;
    let mut _56: u64;
    let mut _57: u64;
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: (usize, bool);
    let mut _64: bool;
    let _65: usize;
    let mut _66: usize;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: (usize, bool);
    let mut _70: (usize, bool);
    let mut _71: usize;
    let mut _72: bool;
    let mut _73: (u64, bool);
    let mut _74: [u64; 4];
    scope 1 {
        debug shift => _3;
        let _7: &[u64; 4];
        scope 2 {
            debug original => _7;
            let mut _8: [u64; 4];
            scope 3 {
                debug ret => _8;
                let _9: usize;
                scope 4 {
                    debug word_shift => _9;
                    let _12: usize;
                    scope 5 {
                        debug bit_shift => _12;
                        let mut _19: std::ops::Range<usize>;
                        let mut _48: std::ops::Range<usize>;
                        scope 6 {
                            debug iter => _19;
                            let _27: usize;
                            scope 7 {
                                debug i => _27;
                            }
                        }
                        scope 8 {
                            debug iter => _48;
                            let _55: usize;
                            scope 9 {
                                debug i => _55;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = move _2;
        _5 = <T as Into<U256>>::into(move _6) -> [return: bb1, unwind: bb31];
    }

    bb1: {
        _4 = &_5;
        StorageDead(_6);
        _3 = U256::as_usize(move _4) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_5);
        StorageLive(_7);
        _7 = &(_1.0: [u64; 4]);
        StorageLive(_8);
        _8 = [const 0_u64; 4];
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _11 = Eq(const 64_usize, const 0_usize);
        assert(!move _11, "attempt to divide `{}` by zero", _10) -> [success: bb3, unwind: bb31];
    }

    bb3: {
        _9 = Div(move _10, const 64_usize);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _3;
        _14 = Eq(const 64_usize, const 0_usize);
        assert(!move _14, "attempt to calculate the remainder of `{}` with a divisor of zero", _13) -> [success: bb4, unwind: bb31];
    }

    bb4: {
        _12 = Rem(move _13, const 64_usize);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _9;
        _17 = std::ops::Range::<usize> { start: move _18, end: const 4_usize };
        StorageDead(_18);
        _16 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _17) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        StorageDead(_17);
        StorageLive(_19);
        _19 = move _16;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut _19;
        _23 = &mut (*_24);
        _22 = <std::ops::Range<usize> as Iterator>::next(move _23) -> [return: bb7, unwind: bb31];
    }

    bb7: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        StorageLive(_27);
        _27 = ((_22 as Some).0: usize);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _27;
        _30 = Len((*_7));
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> [success: bb11, unwind: bb31];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = const ();
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _12;
        _41 = Gt(move _42, const 0_usize);
        switchInt(move _41) -> [0: bb16, otherwise: bb15];
    }

    bb11: {
        _28 = (*_7)[_29];
        StorageLive(_32);
        _32 = _12;
        _33 = Lt(_32, const 64_usize);
        assert(move _33, "attempt to shift right by `{}`, which would overflow", _32) -> [success: bb12, unwind: bb31];
    }

    bb12: {
        StorageLive(_34);
        StorageLive(_35);
        _35 = _27;
        StorageLive(_36);
        _36 = _9;
        _37 = CheckedSub(_35, _36);
        assert(!move (_37.1: bool), "attempt to compute `{} - {}`, which would overflow", move _35, move _36) -> [success: bb13, unwind: bb31];
    }

    bb13: {
        _34 = move (_37.0: usize);
        StorageDead(_36);
        StorageDead(_35);
        _38 = Len(_8);
        _39 = Lt(_34, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _34) -> [success: bb14, unwind: bb31];
    }

    bb14: {
        _8[_34] = Shr(move _28, move _32);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_34);
        StorageDead(_29);
        _21 = const ();
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        _20 = const ();
        goto -> bb6;
    }

    bb15: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _9;
        _47 = CheckedAdd(_46, const 1_usize);
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _46, const 1_usize) -> [success: bb17, unwind: bb31];
    }

    bb16: {
        StorageDead(_42);
        _40 = const ();
        goto -> bb30;
    }

    bb17: {
        _45 = move (_47.0: usize);
        StorageDead(_46);
        _44 = std::ops::Range::<usize> { start: move _45, end: const 4_usize };
        StorageDead(_45);
        _43 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _44) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        StorageDead(_44);
        StorageLive(_48);
        _48 = move _43;
        goto -> bb19;
    }

    bb19: {
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &mut _48;
        _51 = &mut (*_52);
        _50 = <std::ops::Range<usize> as Iterator>::next(move _51) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb22, 1: bb21, otherwise: bb9];
    }

    bb21: {
        StorageLive(_55);
        _55 = ((_50 as Some).0: usize);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _55;
        _59 = Len((*_7));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb23, unwind: bb31];
    }

    bb22: {
        _40 = const ();
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_43);
        goto -> bb30;
    }

    bb23: {
        _57 = (*_7)[_58];
        StorageLive(_61);
        StorageLive(_62);
        _62 = _12;
        _63 = CheckedSub(const 64_usize, _62);
        assert(!move (_63.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_usize, move _62) -> [success: bb24, unwind: bb31];
    }

    bb24: {
        _61 = move (_63.0: usize);
        StorageDead(_62);
        _64 = Lt(_61, const 64_usize);
        assert(move _64, "attempt to shift left by `{}`, which would overflow", _61) -> [success: bb25, unwind: bb31];
    }

    bb25: {
        _56 = Shl(move _57, move _61);
        StorageDead(_61);
        StorageDead(_57);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _55;
        StorageLive(_68);
        _68 = _9;
        _69 = CheckedSub(_67, _68);
        assert(!move (_69.1: bool), "attempt to compute `{} - {}`, which would overflow", move _67, move _68) -> [success: bb26, unwind: bb31];
    }

    bb26: {
        _66 = move (_69.0: usize);
        StorageDead(_68);
        StorageDead(_67);
        _70 = CheckedSub(_66, const 1_usize);
        assert(!move (_70.1: bool), "attempt to compute `{} - {}`, which would overflow", move _66, const 1_usize) -> [success: bb27, unwind: bb31];
    }

    bb27: {
        _65 = move (_70.0: usize);
        StorageDead(_66);
        _71 = Len(_8);
        _72 = Lt(_65, _71);
        assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _65) -> [success: bb28, unwind: bb31];
    }

    bb28: {
        _73 = CheckedAdd(_8[_65], _56);
        assert(!move (_73.1: bool), "attempt to compute `{} + {}`, which would overflow", _8[_65], move _56) -> [success: bb29, unwind: bb31];
    }

    bb29: {
        _8[_65] = move (_73.0: u64);
        StorageDead(_56);
        StorageDead(_65);
        StorageDead(_58);
        _49 = const ();
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        _20 = const ();
        goto -> bb19;
    }

    bb30: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_74);
        _74 = _8;
        _0 = U256(move _74);
        StorageDead(_74);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_3);
        return;
    }

    bb31 (cleanup): {
        resume;
    }
}
