// MIR for `settle_expired_position` after PreCodegen

fn settle_expired_position(_1: u16, _2: &mut User, _3: &anchor_lang::prelude::Pubkey, _4: &PerpMarketMap<'_>, _5: &SpotMarketMap<'_>, _6: &mut OracleMap<'_>, _7: &anchor_lang::prelude::Clock, _8: &state::state::State) -> std::result::Result<(), error::ErrorCode> {
    debug perp_market_index => _1;
    debug user => _2;
    debug user_key => _3;
    debug perp_market_map => _4;
    debug spot_market_map => _5;
    debug oracle_map => _6;
    debug clock => _7;
    debug state => _8;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _11: std::result::Result<(), error::ErrorCode>;
    let mut _12: bool;
    let mut _13: &state::user::User;
    let mut _14: ();
    let _15: error::ErrorCode;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 2];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &error::ErrorCode;
    let _34: &error::ErrorCode;
    let mut _35: error::ErrorCode;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let _41: ();
    let mut _42: bool;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _44: std::result::Result<bool, error::ErrorCode>;
    let mut _45: &state::user::User;
    let mut _46: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _47: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _48: &mut state::oracle_map::OracleMap<'_>;
    let mut _49: isize;
    let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: bool;
    let mut _54: !;
    let mut _55: error::ErrorCode;
    let _56: &state::state::FeeStructure;
    let _59: ();
    let mut _61: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _63: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _64: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: ();
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _72: std::result::Result<(), error::ErrorCode>;
    let mut _73: &mut state::spot_market::SpotMarket;
    let mut _74: &mut state::spot_market::SpotMarket;
    let mut _75: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _76: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _77: i64;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _83: ();
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _85: std::result::Result<(), error::ErrorCode>;
    let mut _86: &mut state::user::User;
    let mut _87: &anchor_lang::prelude::Pubkey;
    let mut _88: &mut state::perp_market::PerpMarket;
    let mut _89: &mut state::perp_market::PerpMarket;
    let mut _90: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _91: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _93: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _94: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _95: &u16;
    let _96: &u16;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: i64;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _108: std::vec::Vec<u32>;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _110: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _111: &mut state::user::User;
    let mut _112: &anchor_lang::prelude::Pubkey;
    let mut _113: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _114: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _115: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _116: &mut state::oracle_map::OracleMap<'_>;
    let mut _117: i64;
    let mut _118: u64;
    let mut _119: state::events::OrderActionExplanation;
    let mut _120: std::option::Option<state::user::MarketType>;
    let mut _121: state::user::MarketType;
    let mut _122: std::option::Option<u16>;
    let mut _123: u16;
    let mut _124: std::option::Option<controller::position::PositionDirection>;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: std::result::Result<usize, error::ErrorCode>;
    let mut _132: &[state::user::PerpPosition; 8];
    let _133: &[state::user::PerpPosition; 8];
    let mut _134: u16;
    let mut _135: isize;
    let mut _137: !;
    let _138: ();
    let mut _139: &str;
    let _140: &str;
    let mut _141: &std::string::String;
    let _142: &std::string::String;
    let _143: std::string::String;
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[&str; 1];
    let _148: &[&str; 1];
    let _149: [&str; 1];
    let mut _150: &[core::fmt::rt::Argument<'_>];
    let mut _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: &[core::fmt::rt::Argument<'_>; 1];
    let _153: [core::fmt::rt::Argument<'_>; 1];
    let mut _154: core::fmt::rt::Argument<'_>;
    let mut _155: &u16;
    let _156: &u16;
    let mut _157: ();
    let mut _159: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _161: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _162: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _171: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _172: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _173: &u16;
    let _174: &u16;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _180: ();
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _182: std::result::Result<(), error::ErrorCode>;
    let mut _183: bool;
    let mut _184: &state::perp_market::MarketStatus;
    let _185: &state::perp_market::PerpMarket;
    let mut _186: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _187: &state::perp_market::MarketStatus;
    let _188: state::perp_market::MarketStatus;
    let mut _189: ();
    let _191: ();
    let mut _192: &str;
    let _193: &str;
    let mut _194: &std::string::String;
    let _195: &std::string::String;
    let _196: std::string::String;
    let mut _198: std::fmt::Arguments<'_>;
    let mut _199: &[&str];
    let mut _200: &[&str; 2];
    let _201: &[&str; 2];
    let _202: [&str; 2];
    let mut _203: &[core::fmt::rt::Argument<'_>];
    let mut _204: &[core::fmt::rt::Argument<'_>; 1];
    let _205: &[core::fmt::rt::Argument<'_>; 1];
    let _206: [core::fmt::rt::Argument<'_>; 1];
    let mut _207: core::fmt::rt::Argument<'_>;
    let mut _208: &error::ErrorCode;
    let _209: &error::ErrorCode;
    let _210: ();
    let mut _211: &str;
    let _212: &str;
    let mut _213: &std::string::String;
    let _214: &std::string::String;
    let _215: std::string::String;
    let mut _217: std::fmt::Arguments<'_>;
    let mut _218: &[&str];
    let mut _219: &[&str; 1];
    let _220: &[&str; 1];
    let _221: [&str; 1];
    let mut _222: &[core::fmt::rt::Argument<'_>];
    let mut _223: &[core::fmt::rt::Argument<'_>; 1];
    let _224: &[core::fmt::rt::Argument<'_>; 1];
    let _225: [core::fmt::rt::Argument<'_>; 1];
    let mut _226: core::fmt::rt::Argument<'_>;
    let mut _227: &i64;
    let _228: &i64;
    let _229: &state::perp_market::PerpMarket;
    let mut _230: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _231: error::ErrorCode;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _238: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _239: std::result::Result<i64, error::ErrorCode>;
    let mut _240: i64;
    let mut _241: &state::perp_market::PerpMarket;
    let mut _242: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _243: i64;
    let mut _244: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _245: std::result::Result<i64, error::ErrorCode>;
    let mut _246: u16;
    let mut _247: isize;
    let mut _249: !;
    let mut _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _252: isize;
    let mut _254: !;
    let mut _255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _257: ();
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _259: std::result::Result<(), error::ErrorCode>;
    let mut _260: bool;
    let mut _261: i64;
    let mut _262: i64;
    let mut _263: ();
    let _265: ();
    let mut _266: &str;
    let _267: &str;
    let mut _268: &std::string::String;
    let _269: &std::string::String;
    let _270: std::string::String;
    let mut _272: std::fmt::Arguments<'_>;
    let mut _273: &[&str];
    let mut _274: &[&str; 2];
    let _275: &[&str; 2];
    let _276: [&str; 2];
    let mut _277: &[core::fmt::rt::Argument<'_>];
    let mut _278: &[core::fmt::rt::Argument<'_>; 1];
    let _279: &[core::fmt::rt::Argument<'_>; 1];
    let _280: [core::fmt::rt::Argument<'_>; 1];
    let mut _281: core::fmt::rt::Argument<'_>;
    let mut _282: &error::ErrorCode;
    let _283: &error::ErrorCode;
    let _284: ();
    let mut _285: &str;
    let _286: &str;
    let mut _287: &std::string::String;
    let _288: &std::string::String;
    let _289: std::string::String;
    let mut _291: std::fmt::Arguments<'_>;
    let mut _292: &[&str];
    let mut _293: &[&str; 2];
    let _294: &[&str; 2];
    let _295: [&str; 2];
    let mut _296: &[core::fmt::rt::Argument<'_>];
    let mut _297: &[core::fmt::rt::Argument<'_>; 1];
    let _298: &[core::fmt::rt::Argument<'_>; 1];
    let _299: [core::fmt::rt::Argument<'_>; 1];
    let mut _300: core::fmt::rt::Argument<'_>;
    let mut _301: &u16;
    let _302: &u16;
    let mut _303: error::ErrorCode;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _309: ();
    let mut _310: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _311: std::result::Result<(), error::ErrorCode>;
    let mut _312: bool;
    let mut _313: u8;
    let _314: usize;
    let mut _315: usize;
    let mut _316: bool;
    let mut _317: ();
    let _319: ();
    let mut _320: &str;
    let _321: &str;
    let mut _322: &std::string::String;
    let _323: &std::string::String;
    let _324: std::string::String;
    let mut _326: std::fmt::Arguments<'_>;
    let mut _327: &[&str];
    let mut _328: &[&str; 2];
    let _329: &[&str; 2];
    let _330: [&str; 2];
    let mut _331: &[core::fmt::rt::Argument<'_>];
    let mut _332: &[core::fmt::rt::Argument<'_>; 1];
    let _333: &[core::fmt::rt::Argument<'_>; 1];
    let _334: [core::fmt::rt::Argument<'_>; 1];
    let mut _335: core::fmt::rt::Argument<'_>;
    let mut _336: &error::ErrorCode;
    let _337: &error::ErrorCode;
    let _338: ();
    let mut _339: &str;
    let _340: &str;
    let mut _341: error::ErrorCode;
    let mut _342: isize;
    let mut _344: !;
    let mut _345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _348: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _349: std::result::Result<i64, error::ErrorCode>;
    let mut _350: &state::user::PerpPosition;
    let _351: &state::user::PerpPosition;
    let _352: usize;
    let mut _353: usize;
    let mut _354: bool;
    let mut _355: i64;
    let mut _356: &state::perp_market::PerpMarket;
    let mut _357: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _358: isize;
    let mut _360: !;
    let mut _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _364: usize;
    let mut _365: usize;
    let mut _366: bool;
    let _368: usize;
    let mut _369: usize;
    let mut _370: bool;
    let mut _372: i64;
    let mut _373: i64;
    let mut _374: i64;
    let _375: usize;
    let mut _376: usize;
    let mut _377: bool;
    let mut _378: bool;
    let _379: i64;
    let mut _380: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _381: std::result::Result<i64, error::ErrorCode>;
    let mut _382: &mut state::user::PerpPosition;
    let mut _383: &mut state::user::PerpPosition;
    let _384: usize;
    let mut _385: usize;
    let mut _386: bool;
    let mut _387: &mut state::perp_market::PerpMarket;
    let mut _388: &mut state::perp_market::PerpMarket;
    let mut _389: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _390: &controller::position::PositionDelta;
    let _391: &controller::position::PositionDelta;
    let mut _392: isize;
    let mut _394: !;
    let mut _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _398: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _399: std::result::Result<i64, error::ErrorCode>;
    let mut _400: i64;
    let mut _401: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _402: std::result::Result<i64, error::ErrorCode>;
    let mut _403: i64;
    let mut _404: i64;
    let mut _405: u32;
    let _406: usize;
    let mut _407: usize;
    let mut _408: bool;
    let mut _409: isize;
    let mut _411: !;
    let mut _412: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _414: i64;
    let mut _415: u32;
    let _416: usize;
    let mut _417: usize;
    let mut _418: bool;
    let mut _419: isize;
    let mut _421: !;
    let mut _422: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _424: ();
    let mut _425: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _426: std::result::Result<(), error::ErrorCode>;
    let mut _427: &mut state::user::PerpPosition;
    let mut _428: &mut state::user::PerpPosition;
    let _429: usize;
    let mut _430: usize;
    let mut _431: bool;
    let mut _432: &mut state::perp_market::PerpMarket;
    let mut _433: &mut state::perp_market::PerpMarket;
    let mut _434: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _435: i64;
    let mut _436: i64;
    let mut _437: i64;
    let mut _438: bool;
    let mut _439: isize;
    let mut _441: !;
    let mut _442: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _445: usize;
    let mut _446: usize;
    let mut _447: bool;
    let mut _449: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _450: std::result::Result<i128, error::ErrorCode>;
    let mut _451: &mut state::perp_market::PerpMarket;
    let mut _452: &mut state::perp_market::PerpMarket;
    let mut _453: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _454: &mut state::spot_market::SpotMarket;
    let mut _455: &mut state::spot_market::SpotMarket;
    let mut _456: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _457: &mut state::user::User;
    let mut _458: i128;
    let mut _459: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _460: std::result::Result<i128, error::ErrorCode>;
    let mut _461: i64;
    let mut _462: isize;
    let mut _464: !;
    let mut _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _467: isize;
    let mut _469: !;
    let mut _470: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _472: ();
    let mut _473: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _474: std::result::Result<(), error::ErrorCode>;
    let mut _475: &mut state::user::PerpPosition;
    let mut _476: &mut state::user::PerpPosition;
    let _477: usize;
    let mut _478: usize;
    let mut _479: bool;
    let mut _480: &mut state::perp_market::PerpMarket;
    let mut _481: &mut state::perp_market::PerpMarket;
    let mut _482: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _483: i64;
    let mut _484: i64;
    let mut _485: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _486: std::result::Result<i64, error::ErrorCode>;
    let mut _487: i128;
    let mut _488: isize;
    let mut _490: !;
    let mut _491: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _493: bool;
    let mut _494: isize;
    let mut _496: !;
    let mut _497: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _499: ();
    let mut _500: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _501: std::result::Result<(), error::ErrorCode>;
    let mut _502: &mut state::user::User;
    let mut _503: usize;
    let mut _504: i64;
    let mut _505: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _506: std::result::Result<i64, error::ErrorCode>;
    let mut _507: i128;
    let mut _508: isize;
    let mut _510: !;
    let mut _511: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _513: isize;
    let mut _515: !;
    let mut _516: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _518: i128;
    let mut _519: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _520: std::result::Result<i128, error::ErrorCode>;
    let mut _521: i128;
    let mut _522: &state::perp_market::PerpMarket;
    let mut _523: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _524: i128;
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _526: std::result::Result<i128, error::ErrorCode>;
    let mut _527: i64;
    let mut _528: isize;
    let mut _530: !;
    let mut _531: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _533: isize;
    let mut _535: !;
    let mut _536: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _538: &mut state::perp_market::PerpMarket;
    let mut _539: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _541: usize;
    let mut _542: usize;
    let mut _543: bool;
    let _544: ();
    let _545: ();
    let mut _546: &[&[u8]];
    let mut _547: &[&[u8]; 1];
    let _548: &[&[u8]; 1];
    let _549: [&[u8]; 1];
    let mut _550: &[u8];
    let _551: &[u8];
    let mut _552: &std::vec::Vec<u8>;
    let _553: &std::vec::Vec<u8>;
    let _554: std::vec::Vec<u8>;
    let mut _555: &state::events::SettlePnlRecord;
    let _556: &state::events::SettlePnlRecord;
    let _557: state::events::SettlePnlRecord;
    let mut _558: i64;
    let mut _559: anchor_lang::prelude::Pubkey;
    let mut _560: u16;
    let mut _561: i128;
    let mut _562: i64;
    let mut _563: i64;
    let mut _564: i64;
    let mut _565: i64;
    let mut _566: &state::perp_market::PerpMarket;
    let mut _567: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _568: state::events::SettlePnlExplanation;
    let _569: ();
    let mut _570: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _571: std::result::Result<(), error::ErrorCode>;
    let mut _572: bool;
    let mut _573: &state::user::PerpPosition;
    let _574: usize;
    let mut _575: usize;
    let mut _576: bool;
    let mut _577: ();
    let _579: ();
    let mut _580: &str;
    let _581: &str;
    let mut _582: &std::string::String;
    let _583: &std::string::String;
    let _584: std::string::String;
    let mut _586: std::fmt::Arguments<'_>;
    let mut _587: &[&str];
    let mut _588: &[&str; 2];
    let _589: &[&str; 2];
    let _590: [&str; 2];
    let mut _591: &[core::fmt::rt::Argument<'_>];
    let mut _592: &[core::fmt::rt::Argument<'_>; 1];
    let _593: &[core::fmt::rt::Argument<'_>; 1];
    let _594: [core::fmt::rt::Argument<'_>; 1];
    let mut _595: core::fmt::rt::Argument<'_>;
    let mut _596: &error::ErrorCode;
    let _597: &error::ErrorCode;
    let _598: ();
    let mut _599: &str;
    let _600: &str;
    let mut _601: error::ErrorCode;
    let mut _602: isize;
    let mut _604: !;
    let mut _605: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _607: ();
    let mut _617: bool;
    let mut _618: bool;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    scope 1 {
        debug error_code => _15;
        let _22: std::string::String;
        let mut _616: &[&str; 2];
        scope 2 {
            debug res => _22;
        }
    }
    scope 3 {
        debug residual => _37;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _40;
        scope 6 {
        }
    }
    scope 7 {
        debug residual => _50;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _53;
        scope 10 {
        }
    }
    scope 11 {
        debug fee_structure => _56;
        let _57: i64;
        scope 12 {
            debug now => _57;
            let _58: u64;
            scope 13 {
                debug slot => _58;
                let _60: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _69: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _101: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                let _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _107: ();
                let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _129: std::vec::Vec<u32>;
                let _130: usize;
                let _136: usize;
                let _144: std::string::String;
                let mut _608: &[&str; 1];
                scope 14 {
                    debug quote_spot_market => _60;
                    let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _82: ();
                    scope 19 {
                        debug residual => _79;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _82;
                        scope 22 {
                        }
                    }
                }
                scope 15 {
                    debug residual => _66;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug val => _69;
                    scope 18 {
                    }
                }
                scope 23 {
                    debug residual => _98;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug val => _101;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug residual => _104;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _107;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug residual => _126;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug val => _129;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug position_index => _130;
                    let _158: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _167: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    scope 38 {
                        debug quote_spot_market => _158;
                        let _168: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                        let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _179: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                        scope 43 {
                            debug perp_market => _168;
                            let _190: error::ErrorCode;
                            let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _236: ();
                            let _237: i64;
                            let _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _251: i64;
                            let _253: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _256: i64;
                            let mut _615: &state::perp_market::MarketStatus;
                            scope 48 {
                                debug error_code => _190;
                                let _197: std::string::String;
                                let _216: std::string::String;
                                let mut _613: &[&str; 1];
                                let mut _614: &[&str; 2];
                                scope 49 {
                                    debug res => _197;
                                }
                                scope 50 {
                                    debug res => _216;
                                }
                            }
                            scope 51 {
                                debug residual => _233;
                                scope 52 {
                                }
                            }
                            scope 53 {
                                debug val => _236;
                                scope 54 {
                                }
                            }
                            scope 55 {
                                debug position_settlement_ts => _237;
                                let _264: error::ErrorCode;
                                let _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _308: ();
                                let _318: error::ErrorCode;
                                let _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _346: ();
                                let _347: i64;
                                let _359: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _362: i64;
                                scope 64 {
                                    debug error_code => _264;
                                    let _271: std::string::String;
                                    let _290: std::string::String;
                                    let mut _611: &[&str; 2];
                                    let mut _612: &[&str; 2];
                                    scope 65 {
                                        debug res => _271;
                                    }
                                    scope 66 {
                                        debug res => _290;
                                    }
                                }
                                scope 67 {
                                    debug residual => _305;
                                    scope 68 {
                                    }
                                }
                                scope 69 {
                                    debug val => _308;
                                    scope 70 {
                                    }
                                }
                                scope 71 {
                                    debug error_code => _318;
                                    let _325: std::string::String;
                                    let mut _610: &[&str; 2];
                                    scope 72 {
                                        debug res => _325;
                                    }
                                }
                                scope 73 {
                                    debug residual => _343;
                                    scope 74 {
                                    }
                                }
                                scope 75 {
                                    debug val => _346;
                                    scope 76 {
                                    }
                                }
                                scope 77 {
                                    debug base_asset_value => _347;
                                    let _363: i64;
                                    scope 82 {
                                        debug base_asset_amount => _363;
                                        let _367: i64;
                                        scope 83 {
                                            debug quote_entry_amount => _367;
                                            let _371: controller::position::PositionDelta;
                                            scope 84 {
                                                debug position_delta => _371;
                                                let _393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _396: i64;
                                                let _397: i64;
                                                let _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _413: i64;
                                                let _420: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _423: i64;
                                                scope 85 {
                                                    debug residual => _393;
                                                    scope 86 {
                                                    }
                                                }
                                                scope 87 {
                                                    debug val => _396;
                                                    scope 88 {
                                                    }
                                                }
                                                scope 89 {
                                                    debug fee => _397;
                                                    let _440: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _443: ();
                                                    let _444: i64;
                                                    scope 98 {
                                                        debug residual => _440;
                                                        scope 99 {
                                                        }
                                                    }
                                                    scope 100 {
                                                        debug val => _443;
                                                        scope 101 {
                                                        }
                                                    }
                                                    scope 102 {
                                                        debug pnl => _444;
                                                        let _448: i128;
                                                        let _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _466: i128;
                                                        let _468: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _471: i128;
                                                        scope 103 {
                                                            debug pnl_to_settle_with_user => _448;
                                                            let _489: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _492: i64;
                                                            let _495: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _498: ();
                                                            let _509: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _512: i64;
                                                            let _514: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _517: ();
                                                            let _529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _532: i128;
                                                            let _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _537: i128;
                                                            let _540: i64;
                                                            scope 112 {
                                                                debug residual => _489;
                                                                scope 113 {
                                                                }
                                                            }
                                                            scope 114 {
                                                                debug val => _492;
                                                                scope 115 {
                                                                }
                                                            }
                                                            scope 116 {
                                                                debug residual => _495;
                                                                scope 117 {
                                                                }
                                                            }
                                                            scope 118 {
                                                                debug val => _498;
                                                                scope 119 {
                                                                }
                                                            }
                                                            scope 120 {
                                                                debug residual => _509;
                                                                scope 121 {
                                                                }
                                                            }
                                                            scope 122 {
                                                                debug val => _512;
                                                                scope 123 {
                                                                }
                                                            }
                                                            scope 124 {
                                                                debug residual => _514;
                                                                scope 125 {
                                                                }
                                                            }
                                                            scope 126 {
                                                                debug val => _517;
                                                                scope 127 {
                                                                }
                                                            }
                                                            scope 128 {
                                                                debug residual => _529;
                                                                scope 129 {
                                                                }
                                                            }
                                                            scope 130 {
                                                                debug val => _532;
                                                                scope 131 {
                                                                }
                                                            }
                                                            scope 132 {
                                                                debug residual => _534;
                                                                scope 133 {
                                                                }
                                                            }
                                                            scope 134 {
                                                                debug val => _537;
                                                                scope 135 {
                                                                }
                                                            }
                                                            scope 136 {
                                                                debug quote_asset_amount_after => _540;
                                                                let _578: error::ErrorCode;
                                                                let _603: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _606: ();
                                                                scope 137 {
                                                                    debug error_code => _578;
                                                                    let _585: std::string::String;
                                                                    let mut _609: &[&str; 2];
                                                                    scope 138 {
                                                                        debug res => _585;
                                                                    }
                                                                }
                                                                scope 139 {
                                                                    debug residual => _603;
                                                                    scope 140 {
                                                                    }
                                                                }
                                                                scope 141 {
                                                                    debug val => _606;
                                                                    scope 142 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 104 {
                                                            debug residual => _463;
                                                            scope 105 {
                                                            }
                                                        }
                                                        scope 106 {
                                                            debug val => _466;
                                                            scope 107 {
                                                            }
                                                        }
                                                        scope 108 {
                                                            debug residual => _468;
                                                            scope 109 {
                                                            }
                                                        }
                                                        scope 110 {
                                                            debug val => _471;
                                                            scope 111 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 90 {
                                                    debug residual => _410;
                                                    scope 91 {
                                                    }
                                                }
                                                scope 92 {
                                                    debug val => _413;
                                                    scope 93 {
                                                    }
                                                }
                                                scope 94 {
                                                    debug residual => _420;
                                                    scope 95 {
                                                    }
                                                }
                                                scope 96 {
                                                    debug val => _423;
                                                    scope 97 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 78 {
                                    debug residual => _359;
                                    scope 79 {
                                    }
                                }
                                scope 80 {
                                    debug val => _362;
                                    scope 81 {
                                    }
                                }
                            }
                            scope 56 {
                                debug residual => _248;
                                scope 57 {
                                }
                            }
                            scope 58 {
                                debug val => _251;
                                scope 59 {
                                }
                            }
                            scope 60 {
                                debug residual => _253;
                                scope 61 {
                                }
                            }
                            scope 62 {
                                debug val => _256;
                                scope 63 {
                                }
                            }
                        }
                        scope 44 {
                            debug residual => _176;
                            scope 45 {
                            }
                        }
                        scope 46 {
                            debug val => _179;
                            scope 47 {
                            }
                        }
                    }
                    scope 39 {
                        debug residual => _164;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug val => _167;
                        scope 42 {
                        }
                    }
                }
                scope 36 {
                    debug index => _136;
                }
                scope 37 {
                    debug res => _144;
                }
            }
        }
    }

    bb0: {
        _617 = const false;
        _618 = const false;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_2);
        _12 = User::is_bankrupt(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = error::ErrorCode::UserBankrupt;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _616 = const _;
        _26 = &(*_616);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_15;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _33) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_14);
        _14 = ();
        _11 = std::result::Result::<(), error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        goto -> bb10;
    }

    bb4: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb7, unwind: bb280];
    }

    bb7: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb8, unwind: bb280];
    }

    bb8: {
        StorageDead(_17);
        drop(_21) -> [return: bb9, unwind: bb281];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_35);
        _35 = _15;
        _11 = std::result::Result::<(), error::ErrorCode>::Err(move _35);
        StorageDead(_35);
        StorageDead(_15);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_12);
        _10 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _11) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_11);
        _36 = discriminant(_10);
        switchInt(move _36) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_40);
        _40 = ((_10 as Continue).0: ());
        _9 = _40;
        StorageDead(_40);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_2);
        StorageLive(_46);
        _46 = &(*_4);
        StorageLive(_47);
        _47 = &(*_5);
        StorageLive(_48);
        _48 = &mut (*_6);
        _44 = meets_maintenance_margin_requirement(move _45, move _46, move _47, move _48) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_37);
        _37 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb267;
    }

    bb16: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        _43 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _44) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_44);
        _49 = discriminant(_43);
        switchInt(move _49) -> [0: bb18, 1: bb19, otherwise: bb13];
    }

    bb18: {
        StorageLive(_53);
        _53 = ((_43 as Continue).0: bool);
        _42 = _53;
        StorageDead(_53);
        switchInt(move _42) -> [0: bb22, otherwise: bb21];
    }

    bb19: {
        StorageLive(_50);
        _50 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_43);
        goto -> bb266;
    }

    bb21: {
        StorageDead(_43);
        _41 = const ();
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_56);
        _56 = &((*_8).5: state::state::FeeStructure);
        StorageLive(_57);
        _57 = ((*_7).4: i64);
        StorageLive(_58);
        _58 = ((*_7).0: u64);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_5);
        _63 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _64) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_43);
        StorageLive(_55);
        _55 = error::ErrorCode::InsufficientCollateralForSettlingPNL;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        goto -> bb266;
    }

    bb23: {
        StorageDead(_64);
        _62 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _63) -> [return: bb24, unwind: bb281];
    }

    bb24: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb25, 1: bb26, otherwise: bb13];
    }

    bb25: {
        StorageLive(_69);
        _69 = move ((_62 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _61 = move _69;
        StorageDead(_69);
        _60 = &mut _61;
        _621 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut (*_60);
        _74 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _75) -> [return: bb28, unwind: bb279];
    }

    bb26: {
        StorageLive(_66);
        _66 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb27, unwind: bb288];
    }

    bb27: {
        StorageDead(_68);
        StorageDead(_66);
        _619 = discriminant(_62);
        StorageDead(_62);
        goto -> bb264;
    }

    bb28: {
        _73 = &mut (*_74);
        StorageDead(_75);
        StorageLive(_76);
        _76 = Option::<&OraclePriceData>::None;
        StorageLive(_77);
        _77 = _57;
        _72 = controller::spot_balance::update_spot_market_cumulative_interest(move _73, move _76, move _77) -> [return: bb29, unwind: bb279];
    }

    bb29: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_73);
        _71 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _72) -> [return: bb30, unwind: bb279];
    }

    bb30: {
        StorageDead(_72);
        _78 = discriminant(_71);
        switchInt(move _78) -> [0: bb31, 1: bb32, otherwise: bb13];
    }

    bb31: {
        StorageLive(_82);
        _82 = ((_71 as Continue).0: ());
        _70 = _82;
        StorageDead(_82);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        _59 = const ();
        drop(_61) -> [return: bb34, unwind: bb281];
    }

    bb32: {
        StorageLive(_79);
        _79 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb33, unwind: bb279];
    }

    bb33: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        drop(_61) -> [return: bb264, unwind: bb281];
    }

    bb34: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_4);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_1;
        _95 = &(*_96);
        _93 = PerpMarketMap::<'_>::get_ref_mut(move _94, move _95) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _93) -> [return: bb36, unwind: bb281];
    }

    bb36: {
        _617 = const true;
        StorageDead(_93);
        _97 = discriminant(_92);
        switchInt(move _97) -> [0: bb37, 1: bb38, otherwise: bb13];
    }

    bb37: {
        StorageLive(_101);
        _101 = move ((_92 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _91 = move _101;
        StorageDead(_101);
        _90 = &mut _91;
        _89 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _90) -> [return: bb40, unwind: bb278];
    }

    bb38: {
        StorageLive(_98);
        _98 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb39, unwind: bb287];
    }

    bb39: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb283;
    }

    bb40: {
        _88 = &mut (*_89);
        StorageDead(_90);
        StorageLive(_102);
        _102 = _57;
        _85 = controller::funding::settle_funding_payment(move _86, move _87, move _88, move _102) -> [return: bb41, unwind: bb278];
    }

    bb41: {
        StorageDead(_102);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        _84 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _85) -> [return: bb42, unwind: bb278];
    }

    bb42: {
        StorageDead(_85);
        _103 = discriminant(_84);
        switchInt(move _103) -> [0: bb43, 1: bb44, otherwise: bb13];
    }

    bb43: {
        StorageLive(_107);
        _107 = ((_84 as Continue).0: ());
        _83 = _107;
        StorageDead(_107);
        drop(_91) -> [return: bb282, unwind: bb287];
    }

    bb44: {
        StorageLive(_104);
        _104 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_106);
        _106 = _104;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _106) -> [return: bb45, unwind: bb278];
    }

    bb45: {
        StorageDead(_106);
        StorageDead(_104);
        drop(_91) -> [return: bb283, unwind: bb287];
    }

    bb46: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        _109 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _110) -> [return: bb47, unwind: bb281];
    }

    bb47: {
        _618 = const true;
        StorageDead(_110);
        _125 = discriminant(_109);
        switchInt(move _125) -> [0: bb48, 1: bb49, otherwise: bb13];
    }

    bb48: {
        StorageLive(_129);
        _129 = move ((_109 as Continue).0: std::vec::Vec<u32>);
        _108 = move _129;
        StorageDead(_129);
        drop(_108) -> [return: bb51, unwind: bb286];
    }

    bb49: {
        StorageLive(_126);
        _126 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb50, unwind: bb286];
    }

    bb50: {
        StorageDead(_128);
        StorageDead(_126);
        _625 = discriminant(_109);
        _618 = const false;
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb265;
    }

    bb51: {
        _627 = discriminant(_109);
        _618 = const false;
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &((*_2).4: [state::user::PerpPosition; 8]);
        _132 = &(*_133);
        StorageLive(_134);
        _134 = _1;
        _131 = get_position_index(move _132, move _134) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_134);
        StorageDead(_132);
        _135 = discriminant(_131);
        switchInt(move _135) -> [0: bb54, 1: bb53, otherwise: bb13];
    }

    bb53: {
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _608 = const _;
        _148 = &(*_608);
        _147 = &(*_148);
        _146 = move _147 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_1;
        _155 = &(*_156);
        _154 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _155) -> [return: bb55, unwind continue];
    }

    bb54: {
        StorageLive(_136);
        _136 = ((_131 as Ok).0: usize);
        _130 = _136;
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_5);
        _161 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _162) -> [return: bb61, unwind continue];
    }

    bb55: {
        StorageDead(_155);
        _153 = [move _154];
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = move _151 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_151);
        _145 = Arguments::<'_>::new_v1(move _146, move _150) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_150);
        StorageDead(_146);
        _144 = format(move _145) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_145);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        _143 = move _144;
        StorageDead(_144);
        _142 = &_143;
        _141 = &(*_142);
        _140 = <String as Deref>::deref(move _141) -> [return: bb58, unwind: bb277];
    }

    bb58: {
        _139 = &(*_140);
        StorageDead(_141);
        _138 = solana_program::log::sol_log(move _139) -> [return: bb59, unwind: bb277];
    }

    bb59: {
        StorageDead(_139);
        drop(_143) -> [return: bb60, unwind: bb281];
    }

    bb60: {
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_157);
        _157 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _157);
        StorageDead(_157);
        StorageDead(_133);
        StorageDead(_131);
        goto -> bb263;
    }

    bb61: {
        StorageDead(_162);
        _160 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _161) -> [return: bb62, unwind: bb281];
    }

    bb62: {
        StorageDead(_161);
        _163 = discriminant(_160);
        switchInt(move _163) -> [0: bb63, 1: bb64, otherwise: bb13];
    }

    bb63: {
        StorageLive(_167);
        _167 = move ((_160 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _159 = move _167;
        StorageDead(_167);
        _158 = &mut _159;
        _631 = discriminant(_160);
        StorageDead(_160);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &(*_4);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_1;
        _173 = &(*_174);
        _171 = PerpMarketMap::<'_>::get_ref_mut(move _172, move _173) -> [return: bb66, unwind: bb276];
    }

    bb64: {
        StorageLive(_164);
        _164 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb65, unwind: bb285];
    }

    bb65: {
        StorageDead(_166);
        StorageDead(_164);
        _629 = discriminant(_160);
        StorageDead(_160);
        goto -> bb262;
    }

    bb66: {
        StorageDead(_173);
        StorageDead(_172);
        _170 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _171) -> [return: bb67, unwind: bb276];
    }

    bb67: {
        StorageDead(_171);
        _175 = discriminant(_170);
        switchInt(move _175) -> [0: bb68, 1: bb69, otherwise: bb13];
    }

    bb68: {
        StorageLive(_179);
        _179 = move ((_170 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _169 = move _179;
        StorageDead(_179);
        _168 = &mut _169;
        _635 = discriminant(_170);
        StorageDead(_174);
        StorageDead(_170);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &(*_168);
        _185 = <RefMut<'_, PerpMarket> as Deref>::deref(move _186) -> [return: bb71, unwind: bb275];
    }

    bb69: {
        StorageLive(_176);
        _176 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb70, unwind: bb284];
    }

    bb70: {
        StorageDead(_178);
        StorageDead(_176);
        _633 = discriminant(_170);
        StorageDead(_174);
        StorageDead(_170);
        goto -> bb261;
    }

    bb71: {
        StorageDead(_186);
        _184 = &((*_185).22: state::perp_market::MarketStatus);
        StorageLive(_187);
        _615 = const _;
        _187 = &(*_615);
        _183 = <state::perp_market::MarketStatus as PartialEq>::eq(move _184, move _187) -> [return: bb72, unwind: bb275];
    }

    bb72: {
        switchInt(move _183) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_189);
        _189 = ();
        _182 = std::result::Result::<(), error::ErrorCode>::Ok(move _189);
        StorageDead(_189);
        goto -> bb88;
    }

    bb74: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_190);
        _190 = error::ErrorCode::PerpMarketNotInSettlement;
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _614 = const _;
        _201 = &(*_614);
        _200 = &(*_201);
        _199 = move _200 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_200);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_190;
        _208 = &(*_209);
        _207 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _208) -> [return: bb75, unwind: bb275];
    }

    bb75: {
        StorageDead(_208);
        _206 = [move _207];
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        _203 = move _204 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_204);
        _198 = Arguments::<'_>::new_v1(move _199, move _203) -> [return: bb76, unwind: bb275];
    }

    bb76: {
        StorageDead(_203);
        StorageDead(_199);
        _197 = format(move _198) -> [return: bb77, unwind: bb275];
    }

    bb77: {
        StorageDead(_198);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_201);
        _196 = move _197;
        StorageDead(_197);
        _195 = &_196;
        _194 = &(*_195);
        _193 = <String as Deref>::deref(move _194) -> [return: bb78, unwind: bb274];
    }

    bb78: {
        _192 = &(*_193);
        StorageDead(_194);
        _191 = solana_program::log::sol_log(move _192) -> [return: bb79, unwind: bb274];
    }

    bb79: {
        StorageDead(_192);
        drop(_196) -> [return: bb80, unwind: bb275];
    }

    bb80: {
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_191);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _613 = const _;
        _220 = &(*_613);
        _219 = &(*_220);
        _218 = move _219 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_219);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &(*_168);
        _229 = <RefMut<'_, PerpMarket> as Deref>::deref(move _230) -> [return: bb81, unwind: bb275];
    }

    bb81: {
        StorageDead(_230);
        _228 = &((*_229).6: i64);
        _227 = &(*_228);
        _226 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _227) -> [return: bb82, unwind: bb275];
    }

    bb82: {
        StorageDead(_227);
        _225 = [move _226];
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = move _223 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_223);
        _217 = Arguments::<'_>::new_v1(move _218, move _222) -> [return: bb83, unwind: bb275];
    }

    bb83: {
        StorageDead(_222);
        StorageDead(_218);
        _216 = format(move _217) -> [return: bb84, unwind: bb275];
    }

    bb84: {
        StorageDead(_217);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_220);
        _215 = move _216;
        StorageDead(_216);
        _214 = &_215;
        _213 = &(*_214);
        _212 = <String as Deref>::deref(move _213) -> [return: bb85, unwind: bb273];
    }

    bb85: {
        _211 = &(*_212);
        StorageDead(_213);
        _210 = solana_program::log::sol_log(move _211) -> [return: bb86, unwind: bb273];
    }

    bb86: {
        StorageDead(_211);
        drop(_215) -> [return: bb87, unwind: bb275];
    }

    bb87: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_210);
        StorageLive(_231);
        _231 = _190;
        _182 = std::result::Result::<(), error::ErrorCode>::Err(move _231);
        StorageDead(_231);
        StorageDead(_190);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_183);
        _181 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _182) -> [return: bb89, unwind: bb275];
    }

    bb89: {
        StorageDead(_182);
        _232 = discriminant(_181);
        switchInt(move _232) -> [0: bb90, 1: bb91, otherwise: bb13];
    }

    bb90: {
        StorageLive(_236);
        _236 = ((_181 as Continue).0: ());
        _180 = _236;
        StorageDead(_236);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &(*_168);
        _241 = <RefMut<'_, PerpMarket> as Deref>::deref(move _242) -> [return: bb93, unwind: bb275];
    }

    bb91: {
        StorageLive(_233);
        _233 = ((_181 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb92, unwind: bb275];
    }

    bb92: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_181);
        StorageDead(_180);
        goto -> bb260;
    }

    bb93: {
        StorageDead(_242);
        _240 = ((*_241).6: i64);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = ((*_8).12: u16);
        _245 = <u16 as Cast>::cast::<i64>(move _246) -> [return: bb94, unwind: bb275];
    }

    bb94: {
        StorageDead(_246);
        _244 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _245) -> [return: bb95, unwind: bb275];
    }

    bb95: {
        StorageDead(_245);
        _247 = discriminant(_244);
        switchInt(move _247) -> [0: bb96, 1: bb97, otherwise: bb13];
    }

    bb96: {
        StorageLive(_251);
        _251 = ((_244 as Continue).0: i64);
        _243 = _251;
        StorageDead(_251);
        _239 = <i64 as SafeMath>::safe_add(move _240, move _243) -> [return: bb99, unwind: bb275];
    }

    bb97: {
        StorageLive(_248);
        _248 = ((_244 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_250);
        _250 = _248;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _250) -> [return: bb98, unwind: bb275];
    }

    bb98: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb258;
    }

    bb99: {
        StorageDead(_243);
        StorageDead(_240);
        _238 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _239) -> [return: bb100, unwind: bb275];
    }

    bb100: {
        StorageDead(_239);
        _252 = discriminant(_238);
        switchInt(move _252) -> [0: bb101, 1: bb102, otherwise: bb13];
    }

    bb101: {
        StorageLive(_256);
        _256 = ((_238 as Continue).0: i64);
        _237 = _256;
        StorageDead(_256);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_238);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = _57;
        StorageLive(_262);
        _262 = _237;
        _260 = Gt(move _261, move _262);
        switchInt(move _260) -> [0: bb105, otherwise: bb104];
    }

    bb102: {
        StorageLive(_253);
        _253 = ((_238 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_255);
        _255 = _253;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _255) -> [return: bb103, unwind: bb275];
    }

    bb103: {
        StorageDead(_255);
        StorageDead(_253);
        goto -> bb258;
    }

    bb104: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_263);
        _263 = ();
        _259 = std::result::Result::<(), error::ErrorCode>::Ok(move _263);
        StorageDead(_263);
        goto -> bb118;
    }

    bb105: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_264);
        _264 = error::ErrorCode::PerpMarketSettlementBufferNotReached;
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _612 = const _;
        _275 = &(*_612);
        _274 = &(*_275);
        _273 = move _274 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_264;
        _282 = &(*_283);
        _281 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _282) -> [return: bb106, unwind: bb275];
    }

    bb106: {
        StorageDead(_282);
        _280 = [move _281];
        StorageDead(_281);
        _279 = &_280;
        _278 = &(*_279);
        _277 = move _278 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_278);
        _272 = Arguments::<'_>::new_v1(move _273, move _277) -> [return: bb107, unwind: bb275];
    }

    bb107: {
        StorageDead(_277);
        StorageDead(_273);
        _271 = format(move _272) -> [return: bb108, unwind: bb275];
    }

    bb108: {
        StorageDead(_272);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_275);
        _270 = move _271;
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = <String as Deref>::deref(move _268) -> [return: bb109, unwind: bb272];
    }

    bb109: {
        _266 = &(*_267);
        StorageDead(_268);
        _265 = solana_program::log::sol_log(move _266) -> [return: bb110, unwind: bb272];
    }

    bb110: {
        StorageDead(_266);
        drop(_270) -> [return: bb111, unwind: bb275];
    }

    bb111: {
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _611 = const _;
        _294 = &(*_611);
        _293 = &(*_294);
        _292 = move _293 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_293);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &((*_8).12: u16);
        _301 = &(*_302);
        _300 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _301) -> [return: bb112, unwind: bb275];
    }

    bb112: {
        StorageDead(_301);
        _299 = [move _300];
        StorageDead(_300);
        _298 = &_299;
        _297 = &(*_298);
        _296 = move _297 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_297);
        _291 = Arguments::<'_>::new_v1(move _292, move _296) -> [return: bb113, unwind: bb275];
    }

    bb113: {
        StorageDead(_296);
        StorageDead(_292);
        _290 = format(move _291) -> [return: bb114, unwind: bb275];
    }

    bb114: {
        StorageDead(_291);
        StorageDead(_302);
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_294);
        _289 = move _290;
        StorageDead(_290);
        _288 = &_289;
        _287 = &(*_288);
        _286 = <String as Deref>::deref(move _287) -> [return: bb115, unwind: bb271];
    }

    bb115: {
        _285 = &(*_286);
        StorageDead(_287);
        _284 = solana_program::log::sol_log(move _285) -> [return: bb116, unwind: bb271];
    }

    bb116: {
        StorageDead(_285);
        drop(_289) -> [return: bb117, unwind: bb275];
    }

    bb117: {
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_284);
        StorageLive(_303);
        _303 = _264;
        _259 = std::result::Result::<(), error::ErrorCode>::Err(move _303);
        StorageDead(_303);
        StorageDead(_264);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_260);
        _258 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _259) -> [return: bb119, unwind: bb275];
    }

    bb119: {
        StorageDead(_259);
        _304 = discriminant(_258);
        switchInt(move _304) -> [0: bb120, 1: bb121, otherwise: bb13];
    }

    bb120: {
        StorageLive(_308);
        _308 = ((_258 as Continue).0: ());
        _257 = _308;
        StorageDead(_308);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = _130;
        _315 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _316 = Lt(_314, _315);
        assert(move _316, "index out of bounds: the length is {} but the index is {}", move _315, _314) -> [success: bb123, unwind: bb275];
    }

    bb121: {
        StorageLive(_305);
        _305 = ((_258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_307);
        _307 = _305;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _307) -> [return: bb122, unwind: bb275];
    }

    bb122: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb259;
    }

    bb123: {
        _313 = (((*_2).4: [state::user::PerpPosition; 8])[_314].14: u8);
        _312 = Eq(move _313, const 0_u8);
        switchInt(move _312) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        StorageDead(_314);
        StorageDead(_313);
        StorageLive(_317);
        _317 = ();
        _311 = std::result::Result::<(), error::ErrorCode>::Ok(move _317);
        StorageDead(_317);
        goto -> bb133;
    }

    bb125: {
        StorageDead(_314);
        StorageDead(_313);
        StorageLive(_318);
        _318 = error::ErrorCode::PerpMarketSettlementUserHasOpenOrders;
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _610 = const _;
        _329 = &(*_610);
        _328 = &(*_329);
        _327 = move _328 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_328);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_318;
        _336 = &(*_337);
        _335 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _336) -> [return: bb126, unwind: bb275];
    }

    bb126: {
        StorageDead(_336);
        _334 = [move _335];
        StorageDead(_335);
        _333 = &_334;
        _332 = &(*_333);
        _331 = move _332 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_332);
        _326 = Arguments::<'_>::new_v1(move _327, move _331) -> [return: bb127, unwind: bb275];
    }

    bb127: {
        StorageDead(_331);
        StorageDead(_327);
        _325 = format(move _326) -> [return: bb128, unwind: bb275];
    }

    bb128: {
        StorageDead(_326);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_329);
        _324 = move _325;
        StorageDead(_325);
        _323 = &_324;
        _322 = &(*_323);
        _321 = <String as Deref>::deref(move _322) -> [return: bb129, unwind: bb270];
    }

    bb129: {
        _320 = &(*_321);
        StorageDead(_322);
        _319 = solana_program::log::sol_log(move _320) -> [return: bb130, unwind: bb270];
    }

    bb130: {
        StorageDead(_320);
        drop(_324) -> [return: bb131, unwind: bb275];
    }

    bb131: {
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_319);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = const "User must first cancel open orders for expired market";
        _339 = &(*_340);
        _338 = solana_program::log::sol_log(move _339) -> [return: bb132, unwind: bb275];
    }

    bb132: {
        StorageDead(_339);
        StorageDead(_340);
        StorageDead(_338);
        StorageLive(_341);
        _341 = _318;
        _311 = std::result::Result::<(), error::ErrorCode>::Err(move _341);
        StorageDead(_341);
        StorageDead(_318);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_312);
        _310 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _311) -> [return: bb134, unwind: bb275];
    }

    bb134: {
        StorageDead(_311);
        _342 = discriminant(_310);
        switchInt(move _342) -> [0: bb135, 1: bb136, otherwise: bb13];
    }

    bb135: {
        StorageLive(_346);
        _346 = ((_310 as Continue).0: ());
        _309 = _346;
        StorageDead(_346);
        StorageDead(_310);
        StorageDead(_309);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _352 = _130;
        _353 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _354 = Lt(_352, _353);
        assert(move _354, "index out of bounds: the length is {} but the index is {}", move _353, _352) -> [success: bb138, unwind: bb275];
    }

    bb136: {
        StorageLive(_343);
        _343 = ((_310 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_345);
        _345 = _343;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _345) -> [return: bb137, unwind: bb275];
    }

    bb137: {
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_310);
        StorageDead(_309);
        goto -> bb259;
    }

    bb138: {
        _351 = &((*_2).4: [state::user::PerpPosition; 8])[_352];
        _350 = &(*_351);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = &(*_168);
        _356 = <RefMut<'_, PerpMarket> as Deref>::deref(move _357) -> [return: bb139, unwind: bb275];
    }

    bb139: {
        StorageDead(_357);
        _355 = ((*_356).7: i64);
        _349 = calculate_base_asset_value_with_expiry_price(move _350, move _355) -> [return: bb140, unwind: bb275];
    }

    bb140: {
        StorageDead(_355);
        StorageDead(_350);
        _348 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _349) -> [return: bb141, unwind: bb275];
    }

    bb141: {
        StorageDead(_349);
        _358 = discriminant(_348);
        switchInt(move _358) -> [0: bb142, 1: bb143, otherwise: bb13];
    }

    bb142: {
        StorageLive(_362);
        _362 = ((_348 as Continue).0: i64);
        _347 = _362;
        StorageDead(_362);
        StorageDead(_356);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_348);
        StorageLive(_363);
        StorageLive(_364);
        _364 = _130;
        _365 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _366 = Lt(_364, _365);
        assert(move _366, "index out of bounds: the length is {} but the index is {}", move _365, _364) -> [success: bb145, unwind: bb275];
    }

    bb143: {
        StorageLive(_359);
        _359 = ((_348 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_361);
        _361 = _359;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _361) -> [return: bb144, unwind: bb275];
    }

    bb144: {
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_348);
        goto -> bb257;
    }

    bb145: {
        _363 = (((*_2).4: [state::user::PerpPosition; 8])[_364].1: i64);
        StorageDead(_364);
        StorageLive(_367);
        StorageLive(_368);
        _368 = _130;
        _369 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _370 = Lt(_368, _369);
        assert(move _370, "index out of bounds: the length is {} but the index is {}", move _369, _368) -> [success: bb146, unwind: bb275];
    }

    bb146: {
        _367 = (((*_2).4: [state::user::PerpPosition; 8])[_368].4: i64);
        StorageDead(_368);
        StorageLive(_371);
        StorageLive(_372);
        _372 = _347;
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = _130;
        _376 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _377 = Lt(_375, _376);
        assert(move _377, "index out of bounds: the length is {} but the index is {}", move _376, _375) -> [success: bb147, unwind: bb275];
    }

    bb147: {
        _374 = (((*_2).4: [state::user::PerpPosition; 8])[_375].1: i64);
        _378 = Eq(_374, const i64::MIN);
        assert(!move _378, "attempt to negate `{}`, which would overflow", _374) -> [success: bb148, unwind: bb275];
    }

    bb148: {
        _373 = Neg(move _374);
        StorageDead(_374);
        _371 = PositionDelta { quote_asset_amount: move _372, base_asset_amount: move _373 };
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_375);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = _130;
        _385 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _386 = Lt(_384, _385);
        assert(move _386, "index out of bounds: the length is {} but the index is {}", move _385, _384) -> [success: bb149, unwind: bb275];
    }

    bb149: {
        _383 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_384];
        _382 = &mut (*_383);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &mut (*_168);
        _388 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _389) -> [return: bb150, unwind: bb275];
    }

    bb150: {
        _387 = &mut (*_388);
        StorageDead(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_371;
        _390 = &(*_391);
        _381 = update_position_and_market(move _382, move _387, move _390) -> [return: bb151, unwind: bb275];
    }

    bb151: {
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_382);
        _380 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _381) -> [return: bb152, unwind: bb275];
    }

    bb152: {
        StorageDead(_381);
        _392 = discriminant(_380);
        switchInt(move _392) -> [0: bb153, 1: bb154, otherwise: bb13];
    }

    bb153: {
        StorageLive(_396);
        _396 = ((_380 as Continue).0: i64);
        _379 = _396;
        StorageDead(_396);
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _403 = _347;
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = const 0_usize;
        _407 = Len(((*_56).0: [state::state::FeeTier; 10]));
        _408 = Lt(_406, _407);
        assert(move _408, "index out of bounds: the length is {} but the index is {}", move _407, _406) -> [success: bb156, unwind: bb275];
    }

    bb154: {
        StorageLive(_393);
        _393 = ((_380 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_395);
        _395 = _393;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _395) -> [return: bb155, unwind: bb275];
    }

    bb155: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_379);
        goto -> bb256;
    }

    bb156: {
        _405 = (((*_56).0: [state::state::FeeTier; 10])[_406].0: u32);
        _404 = move _405 as i64 (IntToInt);
        StorageDead(_405);
        _402 = <i64 as SafeMath>::safe_mul(move _403, move _404) -> [return: bb157, unwind: bb275];
    }

    bb157: {
        StorageDead(_404);
        StorageDead(_403);
        _401 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _402) -> [return: bb158, unwind: bb275];
    }

    bb158: {
        StorageDead(_402);
        _409 = discriminant(_401);
        switchInt(move _409) -> [0: bb159, 1: bb160, otherwise: bb13];
    }

    bb159: {
        StorageLive(_413);
        _413 = ((_401 as Continue).0: i64);
        _400 = _413;
        StorageDead(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = const 0_usize;
        _417 = Len(((*_56).0: [state::state::FeeTier; 10]));
        _418 = Lt(_416, _417);
        assert(move _418, "index out of bounds: the length is {} but the index is {}", move _417, _416) -> [success: bb162, unwind: bb275];
    }

    bb160: {
        StorageLive(_410);
        _410 = ((_401 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_412);
        _412 = _410;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _412) -> [return: bb161, unwind: bb275];
    }

    bb161: {
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_400);
        StorageDead(_399);
        goto -> bb254;
    }

    bb162: {
        _415 = (((*_56).0: [state::state::FeeTier; 10])[_416].1: u32);
        _414 = move _415 as i64 (IntToInt);
        StorageDead(_415);
        _399 = <i64 as SafeMath>::safe_div(move _400, move _414) -> [return: bb163, unwind: bb275];
    }

    bb163: {
        StorageDead(_414);
        StorageDead(_400);
        _398 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _399) -> [return: bb164, unwind: bb275];
    }

    bb164: {
        StorageDead(_399);
        _419 = discriminant(_398);
        switchInt(move _419) -> [0: bb165, 1: bb166, otherwise: bb13];
    }

    bb165: {
        StorageLive(_423);
        _423 = ((_398 as Continue).0: i64);
        _397 = _423;
        StorageDead(_423);
        StorageDead(_416);
        StorageDead(_406);
        StorageDead(_401);
        StorageDead(_398);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = _130;
        _430 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _431 = Lt(_429, _430);
        assert(move _431, "index out of bounds: the length is {} but the index is {}", move _430, _429) -> [success: bb168, unwind: bb275];
    }

    bb166: {
        StorageLive(_420);
        _420 = ((_398 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_422);
        _422 = _420;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _422) -> [return: bb167, unwind: bb275];
    }

    bb167: {
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_416);
        goto -> bb254;
    }

    bb168: {
        _428 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_429];
        _427 = &mut (*_428);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &mut (*_168);
        _433 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _434) -> [return: bb169, unwind: bb275];
    }

    bb169: {
        _432 = &mut (*_433);
        StorageDead(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _437 = _397;
        _436 = core::num::<impl i64>::abs(move _437) -> [return: bb170, unwind: bb275];
    }

    bb170: {
        StorageDead(_437);
        _438 = Eq(_436, const i64::MIN);
        assert(!move _438, "attempt to negate `{}`, which would overflow", _436) -> [success: bb171, unwind: bb275];
    }

    bb171: {
        _435 = Neg(move _436);
        StorageDead(_436);
        _426 = update_quote_asset_and_break_even_amount(move _427, move _432, move _435) -> [return: bb172, unwind: bb275];
    }

    bb172: {
        StorageDead(_435);
        StorageDead(_432);
        StorageDead(_427);
        _425 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _426) -> [return: bb173, unwind: bb275];
    }

    bb173: {
        StorageDead(_426);
        _439 = discriminant(_425);
        switchInt(move _439) -> [0: bb174, 1: bb175, otherwise: bb13];
    }

    bb174: {
        StorageLive(_443);
        _443 = ((_425 as Continue).0: ());
        _424 = _443;
        StorageDead(_443);
        StorageDead(_433);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_444);
        StorageLive(_445);
        _445 = _130;
        _446 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _447 = Lt(_445, _446);
        assert(move _447, "index out of bounds: the length is {} but the index is {}", move _446, _445) -> [success: bb177, unwind: bb275];
    }

    bb175: {
        StorageLive(_440);
        _440 = ((_425 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_442);
        _442 = _440;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _442) -> [return: bb176, unwind: bb275];
    }

    bb176: {
        StorageDead(_442);
        StorageDead(_440);
        StorageDead(_433);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_425);
        StorageDead(_424);
        goto -> bb255;
    }

    bb177: {
        _444 = (((*_2).4: [state::user::PerpPosition; 8])[_445].2: i64);
        StorageDead(_445);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = &mut (*_168);
        _452 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _453) -> [return: bb178, unwind: bb275];
    }

    bb178: {
        _451 = &mut (*_452);
        StorageDead(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = &mut (*_158);
        _455 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _456) -> [return: bb179, unwind: bb275];
    }

    bb179: {
        _454 = &mut (*_455);
        StorageDead(_456);
        StorageLive(_457);
        _457 = &mut (*_2);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = _444;
        _460 = <i64 as Cast>::cast::<i128>(move _461) -> [return: bb180, unwind: bb275];
    }

    bb180: {
        StorageDead(_461);
        _459 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _460) -> [return: bb181, unwind: bb275];
    }

    bb181: {
        StorageDead(_460);
        _462 = discriminant(_459);
        switchInt(move _462) -> [0: bb182, 1: bb183, otherwise: bb13];
    }

    bb182: {
        StorageLive(_466);
        _466 = ((_459 as Continue).0: i128);
        _458 = _466;
        StorageDead(_466);
        _450 = update_pnl_pool_and_user_balance(move _451, move _454, move _457, move _458) -> [return: bb185, unwind: bb275];
    }

    bb183: {
        StorageLive(_463);
        _463 = ((_459 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_465);
        _465 = _463;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _465) -> [return: bb184, unwind: bb275];
    }

    bb184: {
        StorageDead(_465);
        StorageDead(_463);
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_450);
        goto -> bb252;
    }

    bb185: {
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_454);
        StorageDead(_451);
        _449 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _450) -> [return: bb186, unwind: bb275];
    }

    bb186: {
        StorageDead(_450);
        _467 = discriminant(_449);
        switchInt(move _467) -> [0: bb187, 1: bb188, otherwise: bb13];
    }

    bb187: {
        StorageLive(_471);
        _471 = ((_449 as Continue).0: i128);
        _448 = _471;
        StorageDead(_471);
        StorageDead(_459);
        StorageDead(_455);
        StorageDead(_452);
        StorageDead(_449);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = _130;
        _478 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _479 = Lt(_477, _478);
        assert(move _479, "index out of bounds: the length is {} but the index is {}", move _478, _477) -> [success: bb190, unwind: bb275];
    }

    bb188: {
        StorageLive(_468);
        _468 = ((_449 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_470);
        _470 = _468;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _470) -> [return: bb189, unwind: bb275];
    }

    bb189: {
        StorageDead(_470);
        StorageDead(_468);
        goto -> bb252;
    }

    bb190: {
        _476 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_477];
        _475 = &mut (*_476);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &mut (*_168);
        _481 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _482) -> [return: bb191, unwind: bb275];
    }

    bb191: {
        _480 = &mut (*_481);
        StorageDead(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _487 = _448;
        _486 = <i128 as Cast>::cast::<i64>(move _487) -> [return: bb192, unwind: bb275];
    }

    bb192: {
        StorageDead(_487);
        _485 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _486) -> [return: bb193, unwind: bb275];
    }

    bb193: {
        StorageDead(_486);
        _488 = discriminant(_485);
        switchInt(move _488) -> [0: bb194, 1: bb195, otherwise: bb13];
    }

    bb194: {
        StorageLive(_492);
        _492 = ((_485 as Continue).0: i64);
        _484 = _492;
        StorageDead(_492);
        _493 = Eq(_484, const i64::MIN);
        assert(!move _493, "attempt to negate `{}`, which would overflow", _484) -> [success: bb197, unwind: bb275];
    }

    bb195: {
        StorageLive(_489);
        _489 = ((_485 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_491);
        _491 = _489;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _491) -> [return: bb196, unwind: bb275];
    }

    bb196: {
        StorageDead(_491);
        StorageDead(_489);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_480);
        StorageDead(_475);
        StorageDead(_474);
        goto -> bb251;
    }

    bb197: {
        _483 = Neg(move _484);
        StorageDead(_484);
        _474 = update_quote_asset_amount(move _475, move _480, move _483) -> [return: bb198, unwind: bb275];
    }

    bb198: {
        StorageDead(_483);
        StorageDead(_480);
        StorageDead(_475);
        _473 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _474) -> [return: bb199, unwind: bb275];
    }

    bb199: {
        StorageDead(_474);
        _494 = discriminant(_473);
        switchInt(move _494) -> [0: bb200, 1: bb201, otherwise: bb13];
    }

    bb200: {
        StorageLive(_498);
        _498 = ((_473 as Continue).0: ());
        _472 = _498;
        StorageDead(_498);
        StorageDead(_485);
        StorageDead(_481);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_473);
        StorageDead(_472);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &mut (*_2);
        StorageLive(_503);
        _503 = _130;
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = _448;
        _506 = <i128 as Cast>::cast::<i64>(move _507) -> [return: bb203, unwind: bb275];
    }

    bb201: {
        StorageLive(_495);
        _495 = ((_473 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_497);
        _497 = _495;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _497) -> [return: bb202, unwind: bb275];
    }

    bb202: {
        StorageDead(_497);
        StorageDead(_495);
        goto -> bb251;
    }

    bb203: {
        StorageDead(_507);
        _505 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _506) -> [return: bb204, unwind: bb275];
    }

    bb204: {
        StorageDead(_506);
        _508 = discriminant(_505);
        switchInt(move _508) -> [0: bb205, 1: bb206, otherwise: bb13];
    }

    bb205: {
        StorageLive(_512);
        _512 = ((_505 as Continue).0: i64);
        _504 = _512;
        StorageDead(_512);
        _501 = update_settled_pnl(move _502, move _503, move _504) -> [return: bb208, unwind: bb275];
    }

    bb206: {
        StorageLive(_509);
        _509 = ((_505 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_511);
        _511 = _509;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _511) -> [return: bb207, unwind: bb275];
    }

    bb207: {
        StorageDead(_511);
        StorageDead(_509);
        StorageDead(_504);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_501);
        goto -> bb250;
    }

    bb208: {
        StorageDead(_504);
        StorageDead(_503);
        StorageDead(_502);
        _500 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _501) -> [return: bb209, unwind: bb275];
    }

    bb209: {
        StorageDead(_501);
        _513 = discriminant(_500);
        switchInt(move _513) -> [0: bb210, 1: bb211, otherwise: bb13];
    }

    bb210: {
        StorageLive(_517);
        _517 = ((_500 as Continue).0: ());
        _499 = _517;
        StorageDead(_517);
        StorageDead(_505);
        StorageDead(_500);
        StorageDead(_499);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = &(*_168);
        _522 = <RefMut<'_, PerpMarket> as Deref>::deref(move _523) -> [return: bb213, unwind: bb275];
    }

    bb211: {
        StorageLive(_514);
        _514 = ((_500 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_516);
        _516 = _514;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _516) -> [return: bb212, unwind: bb275];
    }

    bb212: {
        StorageDead(_516);
        StorageDead(_514);
        goto -> bb250;
    }

    bb213: {
        StorageDead(_523);
        _521 = (((*_522).1: state::perp_market::AMM).15: i128);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = (_371.1: i64);
        _526 = <i64 as Cast>::cast::<i128>(move _527) -> [return: bb214, unwind: bb275];
    }

    bb214: {
        StorageDead(_527);
        _525 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _526) -> [return: bb215, unwind: bb275];
    }

    bb215: {
        StorageDead(_526);
        _528 = discriminant(_525);
        switchInt(move _528) -> [0: bb216, 1: bb217, otherwise: bb13];
    }

    bb216: {
        StorageLive(_532);
        _532 = ((_525 as Continue).0: i128);
        _524 = _532;
        StorageDead(_532);
        _520 = <i128 as SafeMath>::safe_add(move _521, move _524) -> [return: bb219, unwind: bb275];
    }

    bb217: {
        StorageLive(_529);
        _529 = ((_525 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_531);
        _531 = _529;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _531) -> [return: bb218, unwind: bb275];
    }

    bb218: {
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_524);
        StorageDead(_521);
        StorageDead(_520);
        goto -> bb249;
    }

    bb219: {
        StorageDead(_524);
        StorageDead(_521);
        _519 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _520) -> [return: bb220, unwind: bb275];
    }

    bb220: {
        StorageDead(_520);
        _533 = discriminant(_519);
        switchInt(move _533) -> [0: bb221, 1: bb222, otherwise: bb13];
    }

    bb221: {
        StorageLive(_537);
        _537 = ((_519 as Continue).0: i128);
        _518 = _537;
        StorageDead(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = &mut (*_168);
        _538 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _539) -> [return: bb224, unwind: bb275];
    }

    bb222: {
        StorageLive(_534);
        _534 = ((_519 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_536);
        _536 = _534;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _536) -> [return: bb223, unwind: bb275];
    }

    bb223: {
        StorageDead(_536);
        StorageDead(_534);
        goto -> bb249;
    }

    bb224: {
        StorageDead(_539);
        (((*_538).1: state::perp_market::AMM).15: i128) = move _518;
        StorageDead(_518);
        StorageDead(_538);
        StorageDead(_525);
        StorageDead(_522);
        StorageDead(_519);
        StorageLive(_540);
        StorageLive(_541);
        _541 = _130;
        _542 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _543 = Lt(_541, _542);
        assert(move _543, "index out of bounds: the length is {} but the index is {}", move _542, _541) -> [success: bb225, unwind: bb275];
    }

    bb225: {
        _540 = (((*_2).4: [state::user::PerpPosition; 8])[_541].2: i64);
        StorageDead(_541);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _558 = _57;
        StorageLive(_559);
        _559 = (*_3);
        StorageLive(_560);
        _560 = _1;
        StorageLive(_561);
        _561 = _448;
        StorageLive(_562);
        _562 = _363;
        StorageLive(_563);
        _563 = _540;
        StorageLive(_564);
        _564 = _367;
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        _567 = &(*_168);
        _566 = <RefMut<'_, PerpMarket> as Deref>::deref(move _567) -> [return: bb226, unwind: bb275];
    }

    bb226: {
        StorageDead(_567);
        _565 = ((*_566).7: i64);
        StorageLive(_568);
        _568 = SettlePnlExplanation::ExpiredPosition;
        _557 = SettlePnlRecord { ts: move _558, user: move _559, market_index: move _560, pnl: move _561, base_asset_amount: move _562, quote_asset_amount_after: move _563, quote_entry_amount: move _564, settle_price: move _565, explanation: move _568 };
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_564);
        StorageDead(_563);
        StorageDead(_562);
        StorageDead(_561);
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_558);
        _556 = &_557;
        _555 = &(*_556);
        _554 = <SettlePnlRecord as anchor_lang::Event>::data(move _555) -> [return: bb227, unwind: bb275];
    }

    bb227: {
        StorageDead(_555);
        _553 = &_554;
        _552 = &(*_553);
        _551 = <Vec<u8> as Deref>::deref(move _552) -> [return: bb228, unwind: bb269];
    }

    bb228: {
        _550 = &(*_551);
        StorageDead(_552);
        _549 = [move _550];
        StorageDead(_550);
        _548 = &_549;
        _547 = &(*_548);
        _546 = move _547 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_547);
        _545 = solana_program::log::sol_log_data(move _546) -> [return: bb229, unwind: bb269];
    }

    bb229: {
        StorageDead(_546);
        drop(_554) -> [return: bb230, unwind: bb275];
    }

    bb230: {
        StorageDead(_566);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_553);
        StorageDead(_551);
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_545);
        _544 = const ();
        StorageDead(_544);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = _130;
        _575 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _576 = Lt(_574, _575);
        assert(move _576, "index out of bounds: the length is {} but the index is {}", move _575, _574) -> [success: bb231, unwind: bb275];
    }

    bb231: {
        _573 = &((*_2).4: [state::user::PerpPosition; 8])[_574];
        _572 = PerpPosition::is_available(move _573) -> [return: bb232, unwind: bb275];
    }

    bb232: {
        switchInt(move _572) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_577);
        _577 = ();
        _571 = std::result::Result::<(), error::ErrorCode>::Ok(move _577);
        StorageDead(_577);
        goto -> bb242;
    }

    bb234: {
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_578);
        _578 = error::ErrorCode::UnableToSettleExpiredUserPosition;
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        _609 = const _;
        _589 = &(*_609);
        _588 = &(*_589);
        _587 = move _588 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_588);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _597 = &_578;
        _596 = &(*_597);
        _595 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _596) -> [return: bb235, unwind: bb275];
    }

    bb235: {
        StorageDead(_596);
        _594 = [move _595];
        StorageDead(_595);
        _593 = &_594;
        _592 = &(*_593);
        _591 = move _592 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_592);
        _586 = Arguments::<'_>::new_v1(move _587, move _591) -> [return: bb236, unwind: bb275];
    }

    bb236: {
        StorageDead(_591);
        StorageDead(_587);
        _585 = format(move _586) -> [return: bb237, unwind: bb275];
    }

    bb237: {
        StorageDead(_586);
        StorageDead(_597);
        StorageDead(_594);
        StorageDead(_593);
        StorageDead(_589);
        _584 = move _585;
        StorageDead(_585);
        _583 = &_584;
        _582 = &(*_583);
        _581 = <String as Deref>::deref(move _582) -> [return: bb238, unwind: bb268];
    }

    bb238: {
        _580 = &(*_581);
        StorageDead(_582);
        _579 = solana_program::log::sol_log(move _580) -> [return: bb239, unwind: bb268];
    }

    bb239: {
        StorageDead(_580);
        drop(_584) -> [return: bb240, unwind: bb275];
    }

    bb240: {
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_581);
        StorageDead(_579);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        _600 = const "Issue occurred in expired settlement";
        _599 = &(*_600);
        _598 = solana_program::log::sol_log(move _599) -> [return: bb241, unwind: bb275];
    }

    bb241: {
        StorageDead(_599);
        StorageDead(_600);
        StorageDead(_598);
        StorageLive(_601);
        _601 = _578;
        _571 = std::result::Result::<(), error::ErrorCode>::Err(move _601);
        StorageDead(_601);
        StorageDead(_578);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_572);
        _570 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _571) -> [return: bb243, unwind: bb275];
    }

    bb243: {
        StorageDead(_571);
        _602 = discriminant(_570);
        switchInt(move _602) -> [0: bb244, 1: bb245, otherwise: bb13];
    }

    bb244: {
        StorageLive(_606);
        _606 = ((_570 as Continue).0: ());
        _569 = _606;
        StorageDead(_606);
        StorageDead(_570);
        StorageDead(_569);
        StorageLive(_607);
        _607 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _607);
        StorageDead(_607);
        StorageDead(_540);
        StorageDead(_448);
        StorageDead(_444);
        StorageDead(_397);
        StorageDead(_371);
        StorageDead(_367);
        StorageDead(_363);
        StorageDead(_347);
        StorageDead(_237);
        drop(_169) -> [return: bb247, unwind: bb276];
    }

    bb245: {
        StorageLive(_603);
        _603 = ((_570 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_605);
        _605 = _603;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _605) -> [return: bb246, unwind: bb275];
    }

    bb246: {
        StorageDead(_605);
        StorageDead(_603);
        StorageDead(_570);
        StorageDead(_569);
        StorageDead(_540);
        goto -> bb253;
    }

    bb247: {
        StorageDead(_169);
        StorageDead(_168);
        drop(_159) -> [return: bb248, unwind: bb281];
    }

    bb248: {
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_130);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb267;
    }

    bb249: {
        StorageDead(_518);
        StorageDead(_525);
        StorageDead(_522);
        StorageDead(_519);
        goto -> bb253;
    }

    bb250: {
        StorageDead(_505);
        StorageDead(_500);
        StorageDead(_499);
        goto -> bb253;
    }

    bb251: {
        StorageDead(_485);
        StorageDead(_481);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_473);
        StorageDead(_472);
        goto -> bb253;
    }

    bb252: {
        StorageDead(_459);
        StorageDead(_455);
        StorageDead(_452);
        StorageDead(_449);
        goto -> bb253;
    }

    bb253: {
        StorageDead(_448);
        StorageDead(_444);
        goto -> bb255;
    }

    bb254: {
        StorageDead(_406);
        StorageDead(_401);
        StorageDead(_398);
        goto -> bb255;
    }

    bb255: {
        StorageDead(_397);
        goto -> bb256;
    }

    bb256: {
        StorageDead(_371);
        StorageDead(_367);
        StorageDead(_363);
        goto -> bb257;
    }

    bb257: {
        StorageDead(_347);
        goto -> bb259;
    }

    bb258: {
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_238);
        goto -> bb259;
    }

    bb259: {
        StorageDead(_237);
        goto -> bb260;
    }

    bb260: {
        drop(_169) -> [return: bb261, unwind: bb276];
    }

    bb261: {
        StorageDead(_169);
        StorageDead(_168);
        drop(_159) -> [return: bb262, unwind: bb281];
    }

    bb262: {
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb263;
    }

    bb263: {
        StorageDead(_130);
        goto -> bb265;
    }

    bb264: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb265;
    }

    bb265: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb267;
    }

    bb266: {
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb267;
    }

    bb267: {
        return;
    }

    bb268 (cleanup): {
        drop(_584) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_554) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_324) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_289) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_270) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_215) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_196) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_169) -> [return: bb276, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_159) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_143) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        drop(_91) -> [return: bb287, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        drop(_61) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        drop(_21) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        resume;
    }

    bb282: {
        _623 = discriminant(_92);
        StorageDead(_96);
        _617 = const false;
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &mut (*_2);
        StorageLive(_112);
        _112 = &(*_3);
        StorageLive(_113);
        _113 = Option::<&anchor_lang::prelude::Pubkey>::None;
        StorageLive(_114);
        _114 = &(*_4);
        StorageLive(_115);
        _115 = &(*_5);
        StorageLive(_116);
        _116 = &mut (*_6);
        StorageLive(_117);
        _117 = _57;
        StorageLive(_118);
        _118 = _58;
        StorageLive(_119);
        _119 = OrderActionExplanation::MarketExpired;
        StorageLive(_120);
        StorageLive(_121);
        _121 = state::user::MarketType::Perp;
        _120 = Option::<state::user::MarketType>::Some(move _121);
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _1;
        _122 = Option::<u16>::Some(move _123);
        StorageDead(_123);
        StorageLive(_124);
        _124 = Option::<controller::position::PositionDirection>::None;
        _110 = controller::orders::cancel_orders(move _111, move _112, move _113, move _114, move _115, move _116, move _117, move _118, move _119, move _120, move _122, move _124) -> [return: bb46, unwind continue];
    }

    bb283: {
        _637 = discriminant(_92);
        StorageDead(_96);
        _617 = const false;
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb265;
    }

    bb284 (cleanup): {
        _639 = discriminant(_170);
        goto -> bb276;
    }

    bb285 (cleanup): {
        _640 = discriminant(_160);
        goto -> bb281;
    }

    bb286 (cleanup): {
        _641 = discriminant(_109);
        goto -> bb281;
    }

    bb287 (cleanup): {
        _642 = discriminant(_92);
        goto -> bb281;
    }

    bb288 (cleanup): {
        _643 = discriminant(_62);
        goto -> bb281;
    }
}
