// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_last_funding_basis` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_last_funding_basis(_1: &PerpMarket, _2: i64, _3: i64) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    debug now => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let mut _4: bool;
    let mut _5: i64;
    let _6: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: i128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _11: std::result::Result<i128, error::ErrorCode>;
    let mut _12: i128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _14: std::result::Result<i128, error::ErrorCode>;
    let mut _15: i128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _17: std::result::Result<i128, error::ErrorCode>;
    let mut _18: i64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: i128;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: i128;
    let mut _29: i128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _31: std::result::Result<i128, error::ErrorCode>;
    let mut _32: i64;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: i128;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: i128;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: i128;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _50: std::result::Result<i128, error::ErrorCode>;
    let mut _51: i128;
    let mut _52: i128;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: i64;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _61: std::result::Result<i64, error::ErrorCode>;
    let mut _62: i64;
    let mut _63: i64;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: i64;
    let mut _71: i128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _73: std::result::Result<i128, error::ErrorCode>;
    let mut _74: i128;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _76: std::result::Result<i128, error::ErrorCode>;
    let mut _77: i128;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _79: std::result::Result<i128, error::ErrorCode>;
    let mut _80: i128;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _82: std::result::Result<i128, error::ErrorCode>;
    let mut _83: i128;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _85: std::result::Result<i128, error::ErrorCode>;
    let mut _86: i64;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: i128;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: i128;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _105: std::result::Result<i128, error::ErrorCode>;
    let mut _106: i64;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _108: std::result::Result<i64, error::ErrorCode>;
    let mut _109: i64;
    let mut _110: i64;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: i128;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _128: std::result::Result<i128, error::ErrorCode>;
    let mut _129: i64;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: i128;
    scope 1 {
        debug last_funding_rate => _6;
        let _48: i128;
        let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _57: i128;
        scope 22 {
            debug last_funding_rate_pre_adj => _48;
            let _58: i64;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: i64;
            scope 27 {
                debug time_left_until_funding_update => _58;
                let _70: i128;
                let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _91: i128;
                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _97: i128;
                let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _102: i128;
                let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _115: i64;
                let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _120: i128;
                let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _125: i128;
                let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _134: i128;
                let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _139: i128;
                scope 32 {
                    debug last_funding_basis => _70;
                }
                scope 33 {
                    debug residual => _88;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _91;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _94;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _97;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug residual => _99;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _102;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug residual => _112;
                    scope 46 {
                    }
                }
                scope 47 {
                    debug val => _115;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug residual => _117;
                    scope 50 {
                    }
                }
                scope 51 {
                    debug val => _120;
                    scope 52 {
                    }
                }
                scope 53 {
                    debug residual => _122;
                    scope 54 {
                    }
                }
                scope 55 {
                    debug val => _125;
                    scope 56 {
                    }
                }
                scope 57 {
                    debug residual => _131;
                    scope 58 {
                    }
                }
                scope 59 {
                    debug val => _134;
                    scope 60 {
                    }
                }
                scope 61 {
                    debug residual => _136;
                    scope 62 {
                    }
                }
                scope 63 {
                    debug val => _139;
                    scope 64 {
                    }
                }
            }
            scope 28 {
                debug residual => _65;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _68;
                scope 31 {
                }
            }
        }
        scope 23 {
            debug residual => _54;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _57;
            scope 26 {
            }
        }
    }
    scope 2 {
        debug residual => _20;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _23;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _34;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _37;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _39;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _42;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _44;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _47;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = (((*_1).1: state::perp_market::AMM).85: i64);
        _4 = Gt(move _5, const 0_i64);
        switchInt(move _4) -> [0: bb82, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = (((*_1).1: state::perp_market::AMM).24: i64);
        _17 = <i64 as Cast>::cast::<i128>(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_18);
        _16 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: i128);
        _15 = _23;
        StorageDead(_23);
        _14 = <i128 as SafeMath>::safe_mul(move _15, const _) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_20);
        _20 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb95;
    }

    bb8: {
        StorageDead(_15);
        _13 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_14);
        _24 = discriminant(_13);
        switchInt(move _24) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_28);
        _28 = ((_13 as Continue).0: i128);
        _12 = _28;
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = (((*_1).1: state::perp_market::AMM).85: i64);
        _31 = <i64 as Cast>::cast::<i128>(move _32) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb95;
    }

    bb13: {
        StorageDead(_32);
        _30 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_37);
        _37 = ((_30 as Continue).0: i128);
        _29 = _37;
        StorageDead(_37);
        _11 = <i128 as SafeMath>::safe_div(move _12, move _29) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_34);
        _34 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb93;
    }

    bb18: {
        StorageDead(_29);
        StorageDead(_12);
        _10 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_11);
        _38 = discriminant(_10);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_10 as Continue).0: i128);
        _9 = _42;
        StorageDead(_42);
        _8 = <i128 as SafeMath>::safe_mul(move _9, const 24_i128) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_39);
        _39 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb93;
    }

    bb23: {
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_8);
        _43 = discriminant(_7);
        switchInt(move _43) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_7 as Continue).0: i128);
        _6 = _47;
        StorageDead(_47);
        StorageDead(_30);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _6;
        StorageLive(_52);
        _52 = const _ as i128 (IntToInt);
        _50 = <i128 as SafeMath>::safe_sub(move _51, move _52) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_44);
        _44 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb94;
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _50) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_50);
        _53 = discriminant(_49);
        switchInt(move _53) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_57);
        _57 = ((_49 as Continue).0: i128);
        _48 = _57;
        StorageDead(_57);
        StorageDead(_49);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _3;
        StorageLive(_63);
        _63 = (((*_1).1: state::perp_market::AMM).50: i64);
        _61 = <i64 as SafeMath>::safe_sub(move _62, move _63) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_54);
        _54 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        goto -> bb92;
    }

    bb33: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _61) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: i64);
        _59 = _68;
        StorageDead(_68);
        StorageLive(_69);
        _69 = (((*_1).1: state::perp_market::AMM).51: i64);
        _58 = <i64 as Ord>::min(move _59, move _69) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_65);
        _65 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_59);
        StorageDead(_60);
        goto -> bb91;
    }

    bb38: {
        StorageDead(_69);
        StorageDead(_59);
        StorageDead(_60);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _2;
        _85 = <i64 as Cast>::cast::<i128>(move _86) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_86);
        _84 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _85) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_85);
        _87 = discriminant(_84);
        switchInt(move _87) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_91);
        _91 = ((_84 as Continue).0: i128);
        _83 = _91;
        StorageDead(_91);
        StorageLive(_92);
        _92 = _48;
        _82 = <i128 as SafeMath>::safe_mul(move _83, move _92) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_88);
        _88 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb88;
    }

    bb44: {
        StorageDead(_92);
        StorageDead(_83);
        _81 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _82) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_82);
        _93 = discriminant(_81);
        switchInt(move _93) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_97);
        _97 = ((_81 as Continue).0: i128);
        _80 = _97;
        StorageDead(_97);
        _79 = <i128 as SafeMath>::safe_div(move _80, const _) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_94);
        _94 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_96);
        StorageDead(_94);
        goto -> bb88;
    }

    bb49: {
        StorageDead(_80);
        _78 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_79);
        _98 = discriminant(_78);
        switchInt(move _98) -> [0: bb51, 1: bb52, otherwise: bb5];
    }

    bb51: {
        StorageLive(_102);
        _102 = ((_78 as Continue).0: i128);
        _77 = _102;
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = (((*_1).1: state::perp_market::AMM).51: i64);
        StorageLive(_110);
        _110 = _58;
        _108 = <i64 as SafeMath>::safe_sub(move _109, move _110) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_99);
        _99 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_101);
        StorageDead(_99);
        goto -> bb89;
    }

    bb54: {
        StorageDead(_110);
        StorageDead(_109);
        _107 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _108) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_108);
        _111 = discriminant(_107);
        switchInt(move _111) -> [0: bb56, 1: bb57, otherwise: bb5];
    }

    bb56: {
        StorageLive(_115);
        _115 = ((_107 as Continue).0: i64);
        _106 = _115;
        StorageDead(_115);
        _105 = <i64 as Cast>::cast::<i128>(move _106) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_112);
        _112 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb85;
    }

    bb59: {
        StorageDead(_106);
        _104 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _105) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_105);
        _116 = discriminant(_104);
        switchInt(move _116) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_120);
        _120 = ((_104 as Continue).0: i128);
        _103 = _120;
        StorageDead(_120);
        _76 = <i128 as SafeMath>::safe_mul(move _77, move _103) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_117);
        _117 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb85;
    }

    bb64: {
        StorageDead(_103);
        StorageDead(_77);
        _75 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _76) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_76);
        _121 = discriminant(_75);
        switchInt(move _121) -> [0: bb66, 1: bb67, otherwise: bb5];
    }

    bb66: {
        StorageLive(_125);
        _125 = ((_75 as Continue).0: i128);
        _74 = _125;
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = (((*_1).1: state::perp_market::AMM).51: i64);
        _128 = <i64 as Cast>::cast::<i128>(move _129) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_122);
        _122 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb86;
    }

    bb69: {
        StorageDead(_129);
        _127 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_128);
        _130 = discriminant(_127);
        switchInt(move _130) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_134);
        _134 = ((_127 as Continue).0: i128);
        _126 = _134;
        StorageDead(_134);
        _73 = <i128 as SafeMath>::safe_div(move _74, move _126) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_131);
        _131 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_126);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb84;
    }

    bb74: {
        StorageDead(_126);
        StorageDead(_74);
        _72 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_73);
        _135 = discriminant(_72);
        switchInt(move _135) -> [0: bb76, 1: bb77, otherwise: bb5];
    }

    bb76: {
        StorageLive(_139);
        _139 = ((_72 as Continue).0: i128);
        _71 = _139;
        StorageDead(_139);
        _140 = Eq(const _, const 0_i128);
        assert(!move _140, "attempt to divide `{}` by zero", _71) -> [success: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_136);
        _136 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb84;
    }

    bb79: {
        _141 = Eq(const _, const -1_i128);
        _142 = Eq(_71, const i128::MIN);
        _143 = BitAnd(move _141, move _142);
        assert(!move _143, "attempt to compute `{} / {}`, which would overflow", _71, const _) -> [success: bb80, unwind continue];
    }

    bb80: {
        _70 = Div(move _71, const _);
        StorageDead(_71);
        StorageDead(_127);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageLive(_144);
        _144 = _70;
        _0 = <i128 as Cast>::cast::<i64>(move _144) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_144);
        StorageDead(_70);
        StorageDead(_58);
        StorageDead(_48);
        StorageDead(_6);
        goto -> bb83;
    }

    bb82: {
        StorageDead(_5);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_4);
        goto -> bb98;
    }

    bb84: {
        StorageDead(_71);
        StorageDead(_127);
        goto -> bb87;
    }

    bb85: {
        StorageDead(_103);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_71);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_107);
        StorageDead(_104);
        goto -> bb90;
    }

    bb88: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_71);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_70);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_58);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_48);
        goto -> bb97;
    }

    bb93: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_30);
        goto -> bb96;
    }

    bb95: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb98;
    }

    bb98: {
        return;
    }
}
