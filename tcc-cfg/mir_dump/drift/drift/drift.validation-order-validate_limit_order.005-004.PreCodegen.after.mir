// MIR for `validate_limit_order` after PreCodegen

fn validate_limit_order(_1: &Order, _2: &PerpMarket, _3: Option<i64>, _4: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug market => _2;
    debug valid_oracle_price => _3;
    debug slot => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: &state::user::Order;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: &state::user::Order;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: ();
    let _19: ();
    let mut _20: bool;
    let mut _21: u64;
    let mut _22: bool;
    let mut _23: state::user::Order;
    let mut _24: !;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: error::ErrorCode;
    let _29: ();
    let mut _30: bool;
    let mut _31: state::user::Order;
    let mut _32: bool;
    let mut _33: u64;
    let mut _34: !;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: error::ErrorCode;
    let _39: ();
    let mut _40: bool;
    let mut _41: u64;
    let mut _42: !;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: error::ErrorCode;
    let _47: ();
    let mut _48: bool;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: bool;
    let mut _53: &state::user::Order;
    let mut _54: ();
    let _55: error::ErrorCode;
    let _56: ();
    let mut _57: &str;
    let _58: &str;
    let mut _59: &std::string::String;
    let _60: &std::string::String;
    let _61: std::string::String;
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[&str; 2];
    let _66: &[&str; 2];
    let _67: [&str; 2];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let mut _69: &[core::fmt::rt::Argument<'_>; 1];
    let _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: [core::fmt::rt::Argument<'_>; 1];
    let mut _72: core::fmt::rt::Argument<'_>;
    let mut _73: &error::ErrorCode;
    let _74: &error::ErrorCode;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: error::ErrorCode;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _83: ();
    let _84: ();
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _86: std::result::Result<(), error::ErrorCode>;
    let mut _87: &state::user::Order;
    let mut _88: &state::perp_market::PerpMarket;
    let mut _89: std::option::Option<i64>;
    let mut _90: u64;
    let mut _91: isize;
    let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let _96: ();
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _98: std::result::Result<(), error::ErrorCode>;
    let mut _99: &state::user::Order;
    let mut _100: isize;
    let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: ();
    let mut _105: ();
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _55;
        let _62: std::string::String;
        let mut _106: &[&str; 2];
        scope 6 {
            debug res => _62;
        }
    }
    scope 7 {
        debug residual => _80;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _83;
        scope 10 {
        }
    }
    scope 11 {
        debug residual => _92;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _95;
        scope 14 {
        }
    }
    scope 15 {
        debug residual => _101;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _104;
        scope 18 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        _9 = (((*_2).1: state::perp_market::AMM).52: u64);
        StorageLive(_10);
        _10 = (((*_2).1: state::perp_market::AMM).54: u64);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_1).18: bool);
        switchInt(move _12) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = const true;
        goto -> bb4;
    }

    bb2: {
        StorageLive(_13);
        _13 = &(*_1);
        _11 = Order::is_jit_maker(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_12);
        _7 = validate_base_asset_amount(move _8, move _9, move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: ());
        _5 = _18;
        StorageDead(_18);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).1: u64);
        _20 = Eq(move _21, const 0_u64);
        switchInt(move _20) -> [0: bb12, otherwise: bb11];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_15);
        _15 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb57;
    }

    bb11: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = (*_1);
        _22 = Order::has_oracle_price_offset(move _23) -> [return: bb13, unwind continue];
    }

    bb12: {
        StorageDead(_21);
        goto -> bb17;
    }

    bb13: {
        switchInt(move _22) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_23);
        goto -> bb17;
    }

    bb15: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const "Limit order price == 0";
        _26 = &(*_27);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_26);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_28);
        _28 = error::ErrorCode::InvalidOrderLimitPrice;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _28);
        StorageDead(_28);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb57;
    }

    bb17: {
        _19 = const ();
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = (*_1);
        _30 = Order::has_oracle_price_offset(move _31) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _30) -> [0: bb23, otherwise: bb19];
    }

    bb19: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = ((*_1).1: u64);
        _32 = Ne(move _33, const 0_u64);
        switchInt(move _32) -> [0: bb22, otherwise: bb20];
    }

    bb20: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = const "Limit order price must be 0 for taker oracle offset order";
        _36 = &(*_37);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_36);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_38);
        _38 = error::ErrorCode::InvalidOrderLimitPrice;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _38);
        StorageDead(_38);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb57;
    }

    bb22: {
        StorageDead(_33);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_31);
        goto -> bb24;
    }

    bb24: {
        _29 = const ();
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_1).5: u64);
        _40 = Gt(move _41, const 0_u64);
        switchInt(move _40) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = const "Limit order should not have trigger price";
        _44 = &(*_45);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb27, unwind continue];
    }

    bb26: {
        StorageDead(_41);
        _39 = const ();
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_47);
        StorageLive(_48);
        _48 = ((*_1).19: bool);
        switchInt(move _48) -> [0: bb29, otherwise: bb28];
    }

    bb27: {
        StorageDead(_44);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_46);
        _46 = error::ErrorCode::InvalidOrderTrigger;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _46);
        StorageDead(_46);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb57;
    }

    bb28: {
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_1);
        _52 = Order::has_auction(move _53) -> [return: bb30, unwind continue];
    }

    bb29: {
        _47 = const ();
        goto -> bb50;
    }

    bb30: {
        switchInt(move _52) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_53);
        StorageLive(_55);
        _55 = error::ErrorCode::InvalidOrder;
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _106 = const _;
        _66 = &(*_106);
        _65 = &(*_66);
        _64 = move _65 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_55;
        _73 = &(*_74);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _73) -> [return: bb33, unwind continue];
    }

    bb32: {
        StorageDead(_53);
        StorageLive(_54);
        _54 = ();
        _51 = std::result::Result::<(), error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        goto -> bb40;
    }

    bb33: {
        StorageDead(_73);
        _71 = [move _72];
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = move _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_69);
        _63 = Arguments::<'_>::new_v1(move _64, move _68) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_68);
        StorageDead(_64);
        _62 = format(move _63) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_63);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_66);
        _61 = move _62;
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = <String as Deref>::deref(move _59) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = solana_program::log::sol_log(move _57) -> [return: bb37, unwind: bb58];
    }

    bb37: {
        StorageDead(_57);
        drop(_61) -> [return: bb38, unwind: bb59];
    }

    bb38: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = const "post only limit order cant have auction";
        _76 = &(*_77);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_76);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_78);
        _78 = _55;
        _51 = std::result::Result::<(), error::ErrorCode>::Err(move _78);
        StorageDead(_78);
        StorageDead(_55);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_51);
        _79 = discriminant(_50);
        switchInt(move _79) -> [0: bb42, 1: bb43, otherwise: bb8];
    }

    bb42: {
        StorageLive(_83);
        _83 = ((_50 as Continue).0: ());
        _49 = _83;
        StorageDead(_83);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_1);
        StorageLive(_88);
        _88 = &(*_2);
        StorageLive(_89);
        _89 = _3;
        StorageLive(_90);
        _90 = _4;
        _86 = validate_post_only_order(move _87, move _88, move _89, move _90) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_80);
        _80 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb56;
    }

    bb45: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _85 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _86) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_86);
        _91 = discriminant(_85);
        switchInt(move _91) -> [0: bb47, 1: bb48, otherwise: bb8];
    }

    bb47: {
        StorageLive(_95);
        _95 = ((_85 as Continue).0: ());
        _84 = _95;
        StorageDead(_95);
        StorageDead(_85);
        StorageDead(_84);
        _47 = const ();
        goto -> bb50;
    }

    bb48: {
        StorageLive(_92);
        _92 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb56;
    }

    bb50: {
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        _98 = validate_limit_order_auction_params(move _99) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_99);
        _97 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _98) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_98);
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb53, 1: bb54, otherwise: bb8];
    }

    bb53: {
        StorageLive(_104);
        _104 = ((_97 as Continue).0: ());
        _96 = _104;
        StorageDead(_104);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_105);
        _105 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _105);
        StorageDead(_105);
        goto -> bb57;
    }

    bb54: {
        StorageLive(_101);
        _101 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb57;
    }

    bb56: {
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb57;
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_61) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }
}
