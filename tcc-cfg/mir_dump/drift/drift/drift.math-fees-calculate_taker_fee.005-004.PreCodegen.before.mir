// MIR for `calculate_taker_fee` before PreCodegen

fn calculate_taker_fee(_1: u64, _2: &state::state::FeeTier, _3: i16) -> std::result::Result<u64, error::ErrorCode> {
    debug quote_asset_amount => _1;
    debug fee_tier => _2;
    debug fee_adjustment => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _12: std::result::Result<u128, error::ErrorCode>;
    let mut _13: u128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _15: std::result::Result<u128, error::ErrorCode>;
    let mut _16: u64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u128;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: u32;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u128;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: u128;
    let mut _36: u128;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _38: std::result::Result<u128, error::ErrorCode>;
    let mut _39: u32;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: u128;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: u128;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: u64;
    let _55: ();
    let mut _56: bool;
    let mut _57: i16;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: u64;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _62: std::result::Result<u64, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _65: std::result::Result<u64, error::ErrorCode>;
    let mut _66: u64;
    let mut _67: u64;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _69: std::result::Result<u64, error::ErrorCode>;
    let mut _70: u16;
    let mut _71: i16;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: bool;
    let mut _88: i16;
    let mut _89: u64;
    let mut _90: u64;
    let mut _91: u64;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _93: std::result::Result<u64, error::ErrorCode>;
    let mut _94: u64;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _96: std::result::Result<u64, error::ErrorCode>;
    let mut _97: u64;
    let mut _98: u64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _100: std::result::Result<u64, error::ErrorCode>;
    let mut _101: i16;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: u64;
    scope 1 {
        debug taker_fee => _4;
        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _76: u64;
        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _81: u64;
        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _86: u64;
        let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _106: u64;
        let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _111: u64;
        let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _116: u64;
        scope 26 {
            debug residual => _73;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _76;
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _78;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _81;
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _83;
            scope 35 {
            }
        }
        scope 36 {
            debug val => _86;
            scope 37 {
            }
        }
        scope 38 {
            debug residual => _103;
            scope 39 {
            }
        }
        scope 40 {
            debug val => _106;
            scope 41 {
            }
        }
        scope 42 {
            debug residual => _108;
            scope 43 {
            }
        }
        scope 44 {
            debug val => _111;
            scope 45 {
            }
        }
        scope 46 {
            debug residual => _113;
            scope 47 {
            }
        }
        scope 48 {
            debug val => _116;
            scope 49 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _27;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _30;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _32;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _35;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _41;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _44;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _46;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _49;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _51;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _54;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _1;
        _15 = <u64 as Cast>::cast::<u128>(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_16);
        _14 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: u128);
        _13 = _21;
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_2).0: u32);
        _24 = <u32 as Cast>::cast::<u128>(move _25) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb80;
    }

    bb7: {
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: u128);
        _22 = _30;
        StorageDead(_30);
        _12 = <u128 as SafeMath>::safe_mul(move _13, move _22) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb78;
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_13);
        _11 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_12);
        _31 = discriminant(_11);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_11 as Continue).0: u128);
        _10 = _35;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_2).1: u32);
        _38 = <u32 as Cast>::cast::<u128>(move _39) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb78;
    }

    bb17: {
        StorageDead(_39);
        _37 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _38) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: u128);
        _36 = _44;
        StorageDead(_44);
        _9 = <u128 as SafeMath>::safe_div_ceil(move _10, move _36) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_41);
        _41 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb76;
    }

    bb22: {
        StorageDead(_36);
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_9);
        _45 = discriminant(_8);
        switchInt(move _45) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_8 as Continue).0: u128);
        _7 = _49;
        StorageDead(_49);
        _6 = <u128 as Cast>::cast::<u64>(move _7) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_46);
        _46 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb76;
    }

    bb27: {
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_6);
        _50 = discriminant(_5);
        switchInt(move _50) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_54);
        _54 = ((_5 as Continue).0: u64);
        _4 = _54;
        StorageDead(_54);
        StorageDead(_37);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _3;
        _56 = Lt(move _57, const 0_i16);
        switchInt(move _56) -> [0: bb33, otherwise: bb32];
    }

    bb30: {
        StorageLive(_51);
        _51 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb77;
    }

    bb32: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _4;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _4;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _3;
        _70 = core::num::<impl i16>::unsigned_abs(move _71) -> [return: bb34, unwind continue];
    }

    bb33: {
        StorageDead(_57);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _3;
        _87 = Gt(move _88, const 0_i16);
        switchInt(move _87) -> [0: bb52, otherwise: bb51];
    }

    bb34: {
        StorageDead(_71);
        _69 = <u16 as Cast>::cast::<u64>(move _70) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_70);
        _68 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _69) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: u64);
        _67 = _76;
        StorageDead(_76);
        _65 = <u64 as SafeMath>::safe_mul(move _66, move _67) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_73);
        _73 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb73;
    }

    bb40: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _65) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_65);
        _77 = discriminant(_64);
        switchInt(move _77) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_81);
        _81 = ((_64 as Continue).0: u64);
        _63 = _81;
        StorageDead(_81);
        _62 = <u64 as SafeMath>::safe_div(move _63, const _) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_78);
        _78 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_80);
        StorageDead(_78);
        goto -> bb73;
    }

    bb45: {
        StorageDead(_63);
        _61 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _62) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_62);
        _82 = discriminant(_61);
        switchInt(move _82) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_86);
        _86 = ((_61 as Continue).0: u64);
        _60 = _86;
        StorageDead(_86);
        _58 = core::num::<impl u64>::saturating_sub(move _59, move _60) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_83);
        _83 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_85);
        StorageDead(_83);
        goto -> bb74;
    }

    bb50: {
        StorageDead(_60);
        StorageDead(_59);
        _4 = move _58;
        StorageDead(_58);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_61);
        _55 = const ();
        goto -> bb70;
    }

    bb51: {
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _4;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _4;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _3;
        _100 = <i16 as Cast>::cast::<u64>(move _101) -> [return: bb53, unwind continue];
    }

    bb52: {
        StorageDead(_88);
        _55 = const ();
        goto -> bb69;
    }

    bb53: {
        StorageDead(_101);
        _99 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_100);
        _102 = discriminant(_99);
        switchInt(move _102) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_106);
        _106 = ((_99 as Continue).0: u64);
        _98 = _106;
        StorageDead(_106);
        _96 = <u64 as SafeMath>::safe_mul(move _97, move _98) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_103);
        _103 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb71;
    }

    bb58: {
        StorageDead(_98);
        StorageDead(_97);
        _95 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _96) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_96);
        _107 = discriminant(_95);
        switchInt(move _107) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_111);
        _111 = ((_95 as Continue).0: u64);
        _94 = _111;
        StorageDead(_111);
        _93 = <u64 as SafeMath>::safe_div_ceil(move _94, const _) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_108);
        _108 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_110);
        StorageDead(_108);
        goto -> bb71;
    }

    bb63: {
        StorageDead(_94);
        _92 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _93) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_93);
        _112 = discriminant(_92);
        switchInt(move _112) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_116);
        _116 = ((_92 as Continue).0: u64);
        _91 = _116;
        StorageDead(_116);
        _89 = core::num::<impl u64>::saturating_add(move _90, move _91) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_113);
        _113 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb72;
    }

    bb68: {
        StorageDead(_91);
        StorageDead(_90);
        _4 = move _89;
        StorageDead(_89);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_92);
        _55 = const ();
        goto -> bb69;
    }

    bb69: {
        StorageDead(_87);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_117);
        _117 = _4;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _117);
        StorageDead(_117);
        StorageDead(_4);
        goto -> bb82;
    }

    bb71: {
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_87);
        goto -> bb75;
    }

    bb73: {
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb81;
    }

    bb76: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_37);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_23);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_4);
        goto -> bb82;
    }

    bb82: {
        return;
    }
}
