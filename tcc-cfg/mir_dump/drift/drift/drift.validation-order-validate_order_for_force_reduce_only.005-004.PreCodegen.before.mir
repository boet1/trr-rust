// MIR for `validate_order_for_force_reduce_only` before PreCodegen

fn validate_order_for_force_reduce_only(_1: &Order, _2: i64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug existing_position => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: ();
    let _8: error::ErrorCode;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &error::ErrorCode;
    let _27: &error::ErrorCode;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 1];
    let _38: &[&str; 1];
    let _39: [&str; 1];
    let mut _40: error::ErrorCode;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: ();
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: i64;
    let mut _51: ();
    let _52: error::ErrorCode;
    let _53: ();
    let mut _54: &str;
    let _55: &str;
    let mut _56: &std::string::String;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[&str; 2];
    let _63: &[&str; 2];
    let _64: [&str; 2];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let mut _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &error::ErrorCode;
    let _71: &error::ErrorCode;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 1];
    let _82: &[&str; 1];
    let _83: [&str; 1];
    let mut _84: error::ErrorCode;
    let mut _85: isize;
    let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _89: ();
    let _90: controller::position::PositionDirection;
    let mut _91: bool;
    let mut _92: i64;
    let _93: ();
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _95: std::result::Result<(), error::ErrorCode>;
    let mut _96: bool;
    let mut _97: &controller::position::PositionDirection;
    let mut _98: &controller::position::PositionDirection;
    let mut _99: ();
    let _101: ();
    let mut _102: &str;
    let _103: &str;
    let mut _104: &std::string::String;
    let _105: &std::string::String;
    let _106: std::string::String;
    let mut _108: std::fmt::Arguments<'_>;
    let mut _109: &[&str];
    let mut _110: &[&str; 2];
    let _111: &[&str; 2];
    let _112: [&str; 2];
    let mut _113: &[core::fmt::rt::Argument<'_>];
    let mut _114: &[core::fmt::rt::Argument<'_>; 1];
    let _115: &[core::fmt::rt::Argument<'_>; 1];
    let _116: [core::fmt::rt::Argument<'_>; 1];
    let mut _117: core::fmt::rt::Argument<'_>;
    let mut _118: &error::ErrorCode;
    let _119: &error::ErrorCode;
    let _120: ();
    let mut _121: &str;
    let _122: &str;
    let mut _123: &std::string::String;
    let _124: &std::string::String;
    let _125: std::string::String;
    let mut _127: std::fmt::Arguments<'_>;
    let mut _128: &[&str];
    let mut _129: &[&str; 1];
    let _130: &[&str; 1];
    let _131: [&str; 1];
    let mut _132: error::ErrorCode;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _138: ();
    scope 1 {
        debug error_code => _8;
        let _15: std::string::String;
        let _34: std::string::String;
        let mut _143: &[&str; 1];
        let mut _144: &[&str; 2];
        scope 2 {
            debug res => _15;
        }
        scope 3 {
            debug res => _34;
        }
    }
    scope 4 {
        debug residual => _42;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _45;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _52;
        let _59: std::string::String;
        let _78: std::string::String;
        let mut _141: &[&str; 1];
        let mut _142: &[&str; 2];
        scope 9 {
            debug res => _59;
        }
        scope 10 {
            debug res => _78;
        }
    }
    scope 11 {
        debug residual => _86;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _89;
        scope 14 {
        }
    }
    scope 15 {
        debug existing_position_direction => _90;
        let _100: error::ErrorCode;
        let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _137: ();
        scope 16 {
            debug error_code => _100;
            let _107: std::string::String;
            let _126: std::string::String;
            let mut _139: &[&str; 1];
            let mut _140: &[&str; 2];
            scope 17 {
                debug res => _107;
            }
            scope 18 {
                debug res => _126;
            }
        }
        scope 19 {
            debug residual => _134;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _137;
            scope 22 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).18: bool);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_7);
        _7 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb14;
    }

    bb2: {
        StorageLive(_8);
        _8 = error::ErrorCode::InvalidOrderNotRiskReducing;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _144 = const _;
        _19 = &(*_144);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_8;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb66];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb66];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb67];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _143 = const _;
        _38 = &(*_143);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        _35 = Arguments::<'_>::new_const(move _36) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb11, unwind: bb65];
    }

    bb11: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb12, unwind: bb65];
    }

    bb12: {
        StorageDead(_29);
        drop(_33) -> [return: bb13, unwind: bb67];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_40);
        _40 = _8;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _40);
        StorageDead(_40);
        StorageDead(_8);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_5);
        _41 = discriminant(_4);
        switchInt(move _41) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_45);
        _45 = ((_4 as Continue).0: ());
        _3 = _45;
        StorageDead(_45);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _2;
        _49 = Ne(move _50, const 0_i64);
        switchInt(move _49) -> [0: bb21, otherwise: bb20];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_42);
        _42 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb60;
    }

    bb20: {
        StorageDead(_50);
        StorageLive(_51);
        _51 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        goto -> bb33;
    }

    bb21: {
        StorageDead(_50);
        StorageLive(_52);
        _52 = error::ErrorCode::InvalidOrderNotRiskReducing;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _142 = const _;
        _63 = &(*_142);
        _62 = &(*_63);
        _61 = move _62 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_52;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _70) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_70);
        _68 = [move _69];
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = move _66 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_66);
        _60 = Arguments::<'_>::new_v1(move _61, move _65) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_61);
        _59 = format(move _60) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_60);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_63);
        _58 = move _59;
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <String as Deref>::deref(move _56) -> [return: bb25, unwind: bb64];
    }

    bb25: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = solana_program::log::sol_log(move _54) -> [return: bb26, unwind: bb64];
    }

    bb26: {
        StorageDead(_54);
        drop(_58) -> [return: bb27, unwind: bb67];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _141 = const _;
        _82 = &(*_141);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        _79 = Arguments::<'_>::new_const(move _80) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_79);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        StorageDead(_73);
        drop(_77) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_84);
        _84 = _52;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_52);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_48);
        _85 = discriminant(_47);
        switchInt(move _85) -> [0: bb35, 1: bb36, otherwise: bb17];
    }

    bb35: {
        StorageLive(_89);
        _89 = ((_47 as Continue).0: ());
        _46 = _89;
        StorageDead(_89);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _2;
        _91 = Gt(move _92, const 0_i64);
        switchInt(move _91) -> [0: bb39, otherwise: bb38];
    }

    bb36: {
        StorageLive(_86);
        _86 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb60;
    }

    bb38: {
        StorageDead(_92);
        _90 = controller::position::PositionDirection::Long;
        goto -> bb40;
    }

    bb39: {
        StorageDead(_92);
        _90 = controller::position::PositionDirection::Short;
        goto -> bb40;
    }

    bb40: {
        StorageDead(_91);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &((*_1).17: controller::position::PositionDirection);
        StorageLive(_98);
        _98 = &_90;
        _96 = <controller::position::PositionDirection as PartialEq>::ne(move _97, move _98) -> [return: bb41, unwind continue];
    }

    bb41: {
        switchInt(move _96) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_99);
        _99 = ();
        _95 = std::result::Result::<(), error::ErrorCode>::Ok(move _99);
        StorageDead(_99);
        goto -> bb55;
    }

    bb43: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_100);
        _100 = error::ErrorCode::InvalidOrderNotRiskReducing;
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _140 = const _;
        _111 = &(*_140);
        _110 = &(*_111);
        _109 = move _110 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_110);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_100;
        _118 = &(*_119);
        _117 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _118) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_118);
        _116 = [move _117];
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = move _114 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_114);
        _108 = Arguments::<'_>::new_v1(move _109, move _113) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_113);
        StorageDead(_109);
        _107 = format(move _108) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_108);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_111);
        _106 = move _107;
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = <String as Deref>::deref(move _104) -> [return: bb47, unwind: bb62];
    }

    bb47: {
        _102 = &(*_103);
        StorageDead(_104);
        _101 = solana_program::log::sol_log(move _102) -> [return: bb48, unwind: bb62];
    }

    bb48: {
        StorageDead(_102);
        drop(_106) -> [return: bb49, unwind: bb67];
    }

    bb49: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_101);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _139 = const _;
        _130 = &(*_139);
        _129 = &(*_130);
        _128 = move _129 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_129);
        _127 = Arguments::<'_>::new_const(move _128) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_128);
        _126 = format(move _127) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_127);
        StorageDead(_130);
        _125 = move _126;
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = <String as Deref>::deref(move _123) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        _121 = &(*_122);
        StorageDead(_123);
        _120 = solana_program::log::sol_log(move _121) -> [return: bb53, unwind: bb61];
    }

    bb53: {
        StorageDead(_121);
        drop(_125) -> [return: bb54, unwind: bb67];
    }

    bb54: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_132);
        _132 = _100;
        _95 = std::result::Result::<(), error::ErrorCode>::Err(move _132);
        StorageDead(_132);
        StorageDead(_100);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_96);
        _94 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _95) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_95);
        _133 = discriminant(_94);
        switchInt(move _133) -> [0: bb57, 1: bb58, otherwise: bb17];
    }

    bb57: {
        StorageLive(_137);
        _137 = ((_94 as Continue).0: ());
        _93 = _137;
        StorageDead(_137);
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_138);
        _138 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _138);
        StorageDead(_138);
        StorageDead(_90);
        goto -> bb60;
    }

    bb58: {
        StorageLive(_134);
        _134 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        goto -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_125) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_106) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_77) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_58) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_33) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_14) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        resume;
    }
}
