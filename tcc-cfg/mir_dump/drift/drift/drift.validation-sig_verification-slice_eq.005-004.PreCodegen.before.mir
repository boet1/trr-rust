// MIR for `slice_eq` before PreCodegen

fn slice_eq(_1: &[u8], _2: &[u8]) -> bool {
    debug a => _1;
    debug b => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &[u8];
    let mut _6: usize;
    let mut _7: &[u8];
    let mut _8: i32;
    let mut _9: &[u8];
    let mut _10: &[u8];
    let mut _11: usize;
    let mut _12: &[u8];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_2);
        _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _3 = Eq(move _4, move _6);
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = &(*_2);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_1);
        _11 = core::slice::<impl [u8]>::len(move _12) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_4);
        _0 = const false;
        goto -> bb7;
    }

    bb5: {
        StorageDead(_12);
        _8 = solana_program::program_memory::sol_memcmp(move _9, move _10, move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _0 = Eq(move _8, const 0_i32);
        StorageDead(_8);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_3);
        return;
    }
}
