// MIR for `calculate_perp_market_amm_summary_stats` before PreCodegen

fn calculate_perp_market_amm_summary_stats(_1: &PerpMarket, _2: &SpotMarket, _3: i64, _4: bool) -> std::result::Result<i128, error::ErrorCode> {
    debug perp_market => _1;
    debug spot_market => _2;
    debug perp_market_oracle_price => _3;
    debug exclude_liquidation_fee => _4;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: &state::spot_market::SpotMarket;
    let mut _10: &state::spot_market::SpotBalanceType;
    let _11: &state::spot_market::SpotBalanceType;
    let mut _12: &state::perp_market::PoolBalance;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _20: std::result::Result<u128, error::ErrorCode>;
    let mut _21: u128;
    let mut _22: &state::spot_market::SpotMarket;
    let mut _23: &state::spot_market::SpotBalanceType;
    let _24: &state::spot_market::SpotBalanceType;
    let mut _25: &state::perp_market::PoolBalance;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _33: std::result::Result<i128, error::ErrorCode>;
    let mut _34: u128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _36: std::result::Result<u128, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: u128;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _51: std::result::Result<i128, error::ErrorCode>;
    let mut _52: &state::perp_market::AMM;
    let _53: &state::perp_market::AMM;
    let mut _54: i64;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _62: std::result::Result<i128, error::ErrorCode>;
    let mut _63: i128;
    let mut _64: i128;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: ();
    let mut _71: bool;
    let mut _72: i128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _74: std::result::Result<i128, error::ErrorCode>;
    let mut _75: i128;
    let mut _76: i128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _78: std::result::Result<i128, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: i128;
    scope 1 {
        debug pnl_pool_token_amount => _5;
        let _18: u128;
        let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _30: u128;
        scope 6 {
            debug fee_pool_token_amount => _18;
            let _31: i128;
            let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _43: u128;
            let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _48: i128;
            scope 11 {
                debug pnl_tokens_available => _31;
                let _49: i128;
                let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _59: i128;
                scope 20 {
                    debug net_user_pnl => _49;
                    let mut _60: i128;
                    let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _69: i128;
                    scope 25 {
                        debug new_total_fee_minus_distributions => _60;
                        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _84: i128;
                        let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _89: i128;
                        scope 30 {
                            debug residual => _81;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _84;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _86;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _89;
                            scope 37 {
                            }
                        }
                    }
                    scope 26 {
                        debug residual => _66;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _69;
                        scope 29 {
                        }
                    }
                }
                scope 21 {
                    debug residual => _56;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _59;
                    scope 24 {
                    }
                }
            }
            scope 12 {
                debug residual => _40;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _43;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _45;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _48;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _27;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _30;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = (((*_1).2: state::perp_market::PoolBalance).0: u128);
        StorageLive(_9);
        _9 = &(*_2);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).2: state::perp_market::PoolBalance);
        _11 = <PoolBalance as SpotBalance>::balance_type(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &(*_11);
        StorageDead(_12);
        _7 = get_token_amount(move _8, move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        _13 = discriminant(_6);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_6 as Continue).0: u128);
        _5 = _17;
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_6);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((((*_1).1: state::perp_market::AMM).4: state::perp_market::PoolBalance).0: u128);
        StorageLive(_22);
        _22 = &(*_2);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(((*_1).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _24 = <PoolBalance as SpotBalance>::balance_type(move _25) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_6);
        goto -> bb53;
    }

    bb8: {
        _23 = &(*_24);
        StorageDead(_25);
        _20 = get_token_amount(move _21, move _22, move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        _26 = discriminant(_19);
        switchInt(move _26) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_30);
        _30 = ((_19 as Continue).0: u128);
        _18 = _30;
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_19);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        StorageLive(_38);
        _38 = _18;
        _36 = <u128 as SafeMath>::safe_add(move _37, move _38) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_19);
        goto -> bb52;
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_35 as Continue).0: u128);
        _34 = _43;
        StorageDead(_43);
        _33 = <u128 as Cast>::cast::<i128>(move _34) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb50;
    }

    bb19: {
        StorageDead(_34);
        _32 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _33) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_33);
        _44 = discriminant(_32);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_32 as Continue).0: i128);
        _31 = _48;
        StorageDead(_48);
        StorageDead(_35);
        StorageDead(_32);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_1).1: state::perp_market::AMM);
        _52 = &(*_53);
        StorageLive(_54);
        _54 = _3;
        _51 = calculate_net_user_pnl(move _52, move _54) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb50;
    }

    bb24: {
        StorageDead(_54);
        StorageDead(_52);
        _50 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_51);
        _55 = discriminant(_50);
        switchInt(move _55) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        StorageLive(_59);
        _59 = ((_50 as Continue).0: i128);
        _49 = _59;
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_50);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _31;
        StorageLive(_64);
        _64 = _49;
        _62 = <i128 as SafeMath>::safe_sub(move _63, move _64) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        goto -> bb49;
    }

    bb29: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_62);
        _65 = discriminant(_61);
        switchInt(move _65) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_69);
        _69 = ((_61 as Continue).0: i128);
        _60 = _69;
        StorageDead(_69);
        StorageDead(_61);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _4;
        switchInt(move _71) -> [0: bb35, otherwise: bb34];
    }

    bb32: {
        StorageLive(_66);
        _66 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_61);
        goto -> bb48;
    }

    bb34: {
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _60;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = (((*_1).1: state::perp_market::AMM).33: u128);
        _78 = <u128 as Cast>::cast::<i128>(move _79) -> [return: bb36, unwind continue];
    }

    bb35: {
        _70 = const ();
        goto -> bb46;
    }

    bb36: {
        StorageDead(_79);
        _77 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: i128);
        _76 = _84;
        StorageDead(_84);
        _74 = <i128 as SafeMath>::safe_sub(move _75, move _76) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_81);
        _81 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb47;
    }

    bb41: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_74);
        _85 = discriminant(_73);
        switchInt(move _85) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_89);
        _89 = ((_73 as Continue).0: i128);
        _72 = _89;
        StorageDead(_89);
        _60 = move _72;
        StorageDead(_72);
        StorageDead(_77);
        StorageDead(_73);
        _70 = const ();
        goto -> bb46;
    }

    bb44: {
        StorageLive(_86);
        _86 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_86);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_90);
        _90 = _60;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        StorageDead(_60);
        StorageDead(_49);
        StorageDead(_31);
        StorageDead(_18);
        StorageDead(_5);
        goto -> bb54;
    }

    bb47: {
        StorageDead(_72);
        StorageDead(_77);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_60);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_49);
        goto -> bb51;
    }

    bb50: {
        StorageDead(_35);
        StorageDead(_32);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_31);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_18);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_5);
        goto -> bb54;
    }

    bb54: {
        return;
    }
}
