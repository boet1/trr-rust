// MIR for `fulfill_perp_order_with_match::{closure#0}` before PreCodegen

fn fulfill_perp_order_with_match::{closure#0}(_1: {closure@programs/drift/src/controller/orders.rs:2773:89: 2773:92}, _2: error::ErrorCode) -> std::result::Result<usize, error::ErrorCode> {
    debug filler => (*(_1.0: &mut &mut &mut state::user::User));
    debug market => (*(_1.1: &&mut state::perp_market::PerpMarket));
    let mut _0: std::result::Result<usize, error::ErrorCode>;
    let mut _3: &mut [state::user::PerpPosition; 8];
    let mut _4: &mut [state::user::PerpPosition; 8];
    let mut _5: u16;
    let mut _6: &mut &mut &mut state::user::User;
    let mut _7: &mut &mut state::user::User;
    let mut _8: &mut state::user::User;
    let mut _9: &&mut state::perp_market::PerpMarket;
    let mut _10: &mut state::perp_market::PerpMarket;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _6 = deref_copy (_1.0: &mut &mut &mut state::user::User);
        _7 = deref_copy (*_6);
        _8 = deref_copy (*_7);
        _4 = &mut ((*_8).4: [state::user::PerpPosition; 8]);
        _3 = &mut (*_4);
        StorageLive(_5);
        _9 = deref_copy (_1.1: &&mut state::perp_market::PerpMarket);
        _10 = deref_copy (*_9);
        _5 = ((*_10).21: u16);
        _0 = add_new_position(move _3, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_4);
        return;
    }
}
