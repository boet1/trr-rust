// MIR for `calculate_referee_fee_and_referrer_reward` after PreCodegen

fn calculate_referee_fee_and_referrer_reward(_1: u64, _2: &state::state::FeeTier, _3: u64, _4: &Option<&mut UserStats>) -> std::result::Result<(u64, u64, u64), error::ErrorCode> {
    debug fee => _1;
    debug fee_tier => _2;
    debug referrer_reward_epoch_upper_bound => _3;
    debug referrer_stats => _4;
    let mut _0: std::result::Result<(u64, u64, u64), error::ErrorCode>;
    let _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: u64;
    let mut _13: u128;
    let mut _14: u32;
    let mut _15: u128;
    let mut _16: u32;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u128;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _29: std::result::Result<u64, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u128;
    let mut _34: u64;
    let mut _35: u128;
    let mut _36: u32;
    let mut _37: u128;
    let mut _38: u32;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _51: std::result::Result<u64, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: u64;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: isize;
    let mut _63: u64;
    let mut _64: u64;
    let mut _65: u64;
    let mut _66: u64;
    let mut _67: (u64, u64, u64);
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: u64;
    let mut _71: &mut state::user::UserStats;
    scope 1 {
        debug referee_discount => _5;
        let _27: u64;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u128;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: u64;
        scope 10 {
            debug max_referrer_reward_from_fee => _27;
            let _49: u64;
            let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _58: u64;
            scope 19 {
                debug referee_fee => _49;
                let _59: u64;
                let _61: &&mut state::user::UserStats;
                scope 24 {
                    debug referrer_reward => _59;
                }
                scope 25 {
                    debug referrer_stats => _61;
                    let _62: u64;
                    scope 26 {
                        debug max_referrer_reward_in_epoch => _62;
                    }
                }
            }
            scope 20 {
                debug residual => _55;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _58;
                scope 23 {
                }
            }
        }
        scope 11 {
            debug residual => _40;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _43;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _45;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _48;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        _11 = move _12 as u128 (IntToInt);
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_2).6: u32);
        _13 = move _14 as u128 (IntToInt);
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_2).7: u32);
        _15 = move _16 as u128 (IntToInt);
        StorageDead(_16);
        _10 = get_proportion_u128(move _11, move _13, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _17 = discriminant(_9);
        switchInt(move _17) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_21);
        _21 = ((_9 as Continue).0: u128);
        _8 = _21;
        StorageDead(_21);
        _7 = <u128 as Cast>::cast::<u64>(move _8) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb34;
    }

    bb7: {
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_7);
        _22 = discriminant(_6);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_6 as Continue).0: u64);
        _5 = _26;
        StorageDead(_26);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _1;
        _33 = move _34 as u128 (IntToInt);
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_2).4: u32);
        _35 = move _36 as u128 (IntToInt);
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_2).5: u32);
        _37 = move _38 as u128 (IntToInt);
        StorageDead(_38);
        _32 = get_proportion_u128(move _33, move _35, move _37) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        goto -> bb34;
    }

    bb12: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        _39 = discriminant(_31);
        switchInt(move _39) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_43);
        _43 = ((_31 as Continue).0: u128);
        _30 = _43;
        StorageDead(_43);
        _29 = <u128 as Cast>::cast::<u64>(move _30) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_40);
        _40 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb32;
    }

    bb17: {
        StorageDead(_30);
        _28 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_29);
        _44 = discriminant(_28);
        switchInt(move _44) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_48);
        _48 = ((_28 as Continue).0: u64);
        _27 = _48;
        StorageDead(_48);
        StorageDead(_31);
        StorageDead(_28);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _1;
        StorageLive(_53);
        _53 = _5;
        _51 = <u64 as SafeMath>::safe_sub(move _52, move _53) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb32;
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_51);
        _54 = discriminant(_50);
        switchInt(move _54) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_58);
        _58 = ((_50 as Continue).0: u64);
        _49 = _58;
        StorageDead(_58);
        StorageDead(_50);
        StorageLive(_59);
        _60 = discriminant((*_4));
        switchInt(move _60) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb25: {
        StorageLive(_55);
        _55 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb33;
    }

    bb27: {
        _59 = _27;
        goto -> bb31;
    }

    bb28: {
        StorageLive(_61);
        _61 = &(((*_4) as Some).0: &mut state::user::UserStats);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _3;
        StorageLive(_64);
        _71 = deref_copy (*_61);
        _64 = (((*_71).2: state::user::UserFees).5: u64);
        _62 = core::num::<impl u64>::saturating_sub(move _63, move _64) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_65);
        _65 = _27;
        StorageLive(_66);
        _66 = _62;
        _59 = <u64 as Ord>::min(move _65, move _66) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb31;
    }

    bb31: {
        StorageLive(_67);
        StorageLive(_68);
        _68 = _49;
        StorageLive(_69);
        _69 = _5;
        StorageLive(_70);
        _70 = _59;
        _67 = (move _68, move _69, move _70);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        _0 = std::result::Result::<(u64, u64, u64), error::ErrorCode>::Ok(move _67);
        StorageDead(_67);
        StorageDead(_59);
        StorageDead(_49);
        StorageDead(_27);
        StorageDead(_5);
        goto -> bb36;
    }

    bb32: {
        StorageDead(_31);
        StorageDead(_28);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_27);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_5);
        goto -> bb36;
    }

    bb36: {
        return;
    }
}
