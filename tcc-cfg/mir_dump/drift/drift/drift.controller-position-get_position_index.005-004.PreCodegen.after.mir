// MIR for `get_position_index` after PreCodegen

fn get_position_index(_1: &[PerpPosition; 8], _2: u16) -> std::result::Result<usize, error::ErrorCode> {
    debug user_positions => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<usize, error::ErrorCode>;
    let _3: std::option::Option<usize>;
    let mut _4: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _5: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _6: &[state::user::PerpPosition];
    let mut _7: &[state::user::PerpPosition; 8];
    let mut _8: {closure@programs/drift/src/controller/position.rs:76:19: 76:36};
    let mut _9: &u16;
    let mut _10: isize;
    let mut _12: usize;
    let mut _13: error::ErrorCode;
    scope 1 {
        debug position_index => _3;
        let _11: usize;
        scope 2 {
            debug position_index => _11;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = move _7 as &[state::user::PerpPosition] (PointerCoercion(Unsize));
        StorageDead(_7);
        _5 = core::slice::<impl [PerpPosition]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        _8 = {closure@programs/drift/src/controller/position.rs:76:19: 76:36} { market_index: move _9 };
        StorageDead(_9);
        _3 = <std::slice::Iter<'_, PerpPosition> as Iterator>::position::<{closure@programs/drift/src/controller/position.rs:76:19: 76:36}>(move _4, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_5);
        _10 = discriminant(_3);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = error::ErrorCode::UserHasNoPositionInMarket;
        _0 = std::result::Result::<usize, error::ErrorCode>::Err(move _13);
        StorageDead(_13);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_3 as Some).0: usize);
        StorageLive(_12);
        _12 = _11;
        _0 = std::result::Result::<usize, error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_3);
        return;
    }
}
