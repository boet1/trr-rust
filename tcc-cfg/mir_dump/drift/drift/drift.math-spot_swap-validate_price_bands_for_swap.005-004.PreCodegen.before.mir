// MIR for `validate_price_bands_for_swap` before PreCodegen

fn validate_price_bands_for_swap(_1: &SpotMarket, _2: &SpotMarket, _3: u64, _4: u64, _5: i64, _6: i64, _7: u64) -> std::result::Result<(), error::ErrorCode> {
    debug in_market => _1;
    debug out_market => _2;
    debug amount_in => _3;
    debug amount_out => _4;
    debug in_price => _5;
    debug out_price => _6;
    debug oracle_twap_5min_percent_divergence => _7;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _8: u64;
    let _9: controller::position::PositionDirection;
    let _10: i64;
    let _11: i64;
    let _12: u32;
    let mut _13: (u64, controller::position::PositionDirection, i64, i64, u32);
    let _14: u32;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _16: std::result::Result<u32, error::ErrorCode>;
    let mut _17: &state::spot_market::SpotMarket;
    let mut _18: &math::margin::MarginRequirementType;
    let _19: &math::margin::MarginRequirementType;
    let _20: math::margin::MarginRequirementType;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u32;
    let mut _26: bool;
    let mut _27: u32;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _30: std::result::Result<u64, error::ErrorCode>;
    let mut _31: i128;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _33: std::result::Result<i128, error::ErrorCode>;
    let mut _34: i128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _36: std::result::Result<i128, error::ErrorCode>;
    let mut _37: u64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u32;
    let mut _44: i64;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _57: std::result::Result<u64, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: u64;
    let mut _61: state::spot_market::SpotMarket;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: u64;
    let mut _68: controller::position::PositionDirection;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: u32;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _74: std::result::Result<u64, error::ErrorCode>;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: state::spot_market::SpotMarket;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: u64;
    let mut _85: controller::position::PositionDirection;
    let mut _86: i64;
    let mut _87: i64;
    let mut _88: u32;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _90: std::result::Result<u32, error::ErrorCode>;
    let mut _91: &state::spot_market::SpotMarket;
    let mut _92: &math::margin::MarginRequirementType;
    let _93: &math::margin::MarginRequirementType;
    let _94: math::margin::MarginRequirementType;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _100: ();
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _102: std::result::Result<(), error::ErrorCode>;
    let mut _103: u64;
    let mut _104: i64;
    let mut _105: i64;
    let mut _106: u32;
    let mut _107: u64;
    let mut _108: std::option::Option<controller::position::PositionDirection>;
    let mut _109: controller::position::PositionDirection;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: ();
    let mut _117: &math::margin::MarginRequirementType;
    scope 1 {
        debug fill_price => _8;
        debug direction => _9;
        debug oracle_price => _10;
        debug oracle_twap_5min => _11;
        debug margin_ratio => _12;
        let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _114: ();
        scope 34 {
            debug residual => _111;
            scope 35 {
            }
        }
        scope 36 {
            debug val => _114;
            scope 37 {
            }
        }
    }
    scope 2 {
        debug in_market_margin_ratio => _14;
        let _28: u64;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: i128;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: i128;
        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _54: u64;
        let _72: u64;
        let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _83: u64;
        scope 7 {
            debug out_value => _28;
            let _55: u64;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u64;
            scope 20 {
                debug fill_price => _55;
            }
            scope 21 {
                debug residual => _63;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _66;
                scope 24 {
                }
            }
        }
        scope 8 {
            debug residual => _39;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _42;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _46;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _49;
            scope 15 {
            }
        }
        scope 16 {
            debug residual => _51;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _54;
            scope 19 {
            }
        }
        scope 25 {
            debug fill_price => _72;
            let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _99: u32;
            let mut _116: &math::margin::MarginRequirementType;
            scope 30 {
                debug residual => _96;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _99;
                scope 33 {
                }
            }
        }
        scope 26 {
            debug residual => _80;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _83;
            scope 29 {
            }
        }
    }
    scope 3 {
        debug residual => _22;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _25;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_1);
        StorageLive(_18);
        StorageLive(_19);
        _117 = const _;
        _19 = &(*_117);
        _18 = &(*_19);
        _16 = SpotMarket::get_margin_ratio(move _17, move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_25);
        _25 = ((_15 as Continue).0: u32);
        _14 = _25;
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_15);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _14;
        _26 = Ne(move _27, const 0_u32);
        switchInt(move _26) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_22);
        _22 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_15);
        goto -> bb51;
    }

    bb7: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _4;
        _36 = <u64 as Cast>::cast::<i128>(move _37) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_27);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _3;
        StorageLive(_76);
        _76 = _4;
        StorageLive(_77);
        StorageLive(_78);
        _78 = (*_2);
        _77 = SpotMarket::get_precision(move _78) -> [return: bb30, unwind continue];
    }

    bb9: {
        StorageDead(_37);
        _35 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: i128);
        _34 = _42;
        StorageDead(_42);
        StorageLive(_43);
        _43 = ((*_2).41: u32);
        StorageLive(_44);
        _44 = _6;
        _33 = get_token_value(move _34, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb47;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_34);
        _32 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        _45 = discriminant(_32);
        switchInt(move _45) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_49);
        _49 = ((_32 as Continue).0: i128);
        _31 = _49;
        StorageDead(_49);
        _30 = <i128 as Cast>::cast::<u64>(move _31) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_46);
        _46 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb47;
    }

    bb19: {
        StorageDead(_31);
        _29 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_30);
        _50 = discriminant(_29);
        switchInt(move _50) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_54);
        _54 = ((_29 as Continue).0: u64);
        _28 = _54;
        StorageDead(_54);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _28;
        StorageLive(_59);
        _59 = _3;
        StorageLive(_60);
        StorageLive(_61);
        _61 = (*_1);
        _60 = SpotMarket::get_precision(move _61) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb48;
    }

    bb24: {
        StorageDead(_61);
        _57 = math::orders::calculate_fill_price(move _58, move _59, move _60) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_57);
        _62 = discriminant(_56);
        switchInt(move _62) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_66);
        _66 = ((_56 as Continue).0: u64);
        _55 = _66;
        StorageDead(_66);
        StorageDead(_56);
        StorageLive(_67);
        _67 = _55;
        StorageLive(_68);
        _68 = controller::position::PositionDirection::Short;
        StorageLive(_69);
        _69 = _5;
        StorageLive(_70);
        _70 = (((*_1).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_71);
        _71 = _14;
        _13 = (move _67, move _68, move _69, move _70, move _71);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_55);
        StorageDead(_28);
        goto -> bb41;
    }

    bb28: {
        StorageLive(_63);
        _63 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb49;
    }

    bb30: {
        StorageDead(_78);
        _74 = math::orders::calculate_fill_price(move _75, move _76, move _77) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _74) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_74);
        _79 = discriminant(_73);
        switchInt(move _79) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_83);
        _83 = ((_73 as Continue).0: u64);
        _72 = _83;
        StorageDead(_83);
        StorageDead(_73);
        StorageLive(_84);
        _84 = _72;
        StorageLive(_85);
        _85 = controller::position::PositionDirection::Long;
        StorageLive(_86);
        _86 = _6;
        StorageLive(_87);
        _87 = (((*_2).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_2);
        StorageLive(_92);
        StorageLive(_93);
        _116 = const _;
        _93 = &(*_116);
        _92 = &(*_93);
        _90 = SpotMarket::get_margin_ratio(move _91, move _92) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_80);
        _80 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb50;
    }

    bb36: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _90) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_90);
        _95 = discriminant(_89);
        switchInt(move _95) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_99);
        _99 = ((_89 as Continue).0: u32);
        _88 = _99;
        StorageDead(_99);
        _13 = (move _84, move _85, move _86, move _87, move _88);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_72);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb41;
    }

    bb39: {
        StorageLive(_96);
        _96 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_72);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb50;
    }

    bb41: {
        StorageDead(_26);
        StorageDead(_14);
        StorageLive(_8);
        _8 = (_13.0: u64);
        StorageLive(_9);
        _9 = (_13.1: controller::position::PositionDirection);
        StorageLive(_10);
        _10 = (_13.2: i64);
        StorageLive(_11);
        _11 = (_13.3: i64);
        StorageLive(_12);
        _12 = (_13.4: u32);
        StorageDead(_13);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _8;
        StorageLive(_104);
        _104 = _10;
        StorageLive(_105);
        _105 = _11;
        StorageLive(_106);
        _106 = _12;
        StorageLive(_107);
        _107 = _7;
        StorageLive(_108);
        StorageLive(_109);
        _109 = _9;
        _108 = Option::<controller::position::PositionDirection>::Some(move _109);
        StorageDead(_109);
        _102 = math::orders::validate_fill_price_within_price_bands(move _103, move _104, move _105, move _106, move _107, const false, move _108) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _102) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_102);
        _110 = discriminant(_101);
        switchInt(move _110) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_114);
        _114 = ((_101 as Continue).0: ());
        _100 = _114;
        StorageDead(_114);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_115);
        _115 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _115);
        StorageDead(_115);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb52;
    }

    bb45: {
        StorageLive(_111);
        _111 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb52;
    }

    bb47: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_28);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_26);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb52;
    }

    bb52: {
        return;
    }
}
