// MIR for `validate_order` before PreCodegen

fn validate_order(_1: &Order, _2: &PerpMarket, _3: Option<i64>, _4: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug market => _2;
    debug valid_oracle_price => _3;
    debug slot => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: isize;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: &state::user::Order;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &state::user::Order;
    let mut _20: &state::perp_market::PerpMarket;
    let mut _21: std::option::Option<i64>;
    let mut _22: u64;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: ();
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _29: std::result::Result<(), error::ErrorCode>;
    let mut _30: &state::user::Order;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _39: std::result::Result<(), error::ErrorCode>;
    let mut _40: &state::user::Order;
    let mut _41: u64;
    let mut _42: u64;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: &state::user::Order;
    let mut _51: u64;
    let mut _52: u64;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let _58: ();
    let mut _59: bool;
    let mut _60: &state::perp_market::PerpMarket;
    let _61: ();
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _63: std::result::Result<(), error::ErrorCode>;
    let mut _64: bool;
    let mut _65: u64;
    let mut _66: ();
    let _67: error::ErrorCode;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &error::ErrorCode;
    let _86: &error::ErrorCode;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: error::ErrorCode;
    let mut _91: isize;
    let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let _96: ();
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _98: std::result::Result<(), error::ErrorCode>;
    let mut _99: bool;
    let mut _100: u64;
    let mut _101: i64;
    let mut _102: ();
    let _103: error::ErrorCode;
    let _104: ();
    let mut _105: &str;
    let _106: &str;
    let mut _107: &std::string::String;
    let _108: &std::string::String;
    let _109: std::string::String;
    let mut _111: std::fmt::Arguments<'_>;
    let mut _112: &[&str];
    let mut _113: &[&str; 2];
    let _114: &[&str; 2];
    let _115: [&str; 2];
    let mut _116: &[core::fmt::rt::Argument<'_>];
    let mut _117: &[core::fmt::rt::Argument<'_>; 1];
    let _118: &[core::fmt::rt::Argument<'_>; 1];
    let _119: [core::fmt::rt::Argument<'_>; 1];
    let mut _120: core::fmt::rt::Argument<'_>;
    let mut _121: &error::ErrorCode;
    let _122: &error::ErrorCode;
    let _123: ();
    let mut _124: &str;
    let _125: &str;
    let mut _126: error::ErrorCode;
    let mut _127: isize;
    let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _131: ();
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _134: std::result::Result<(), error::ErrorCode>;
    let mut _135: bool;
    let mut _136: u64;
    let mut _137: i64;
    let mut _138: ();
    let _139: error::ErrorCode;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: &std::string::String;
    let _144: &std::string::String;
    let _145: std::string::String;
    let mut _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[&str; 2];
    let _150: &[&str; 2];
    let _151: [&str; 2];
    let mut _152: &[core::fmt::rt::Argument<'_>];
    let mut _153: &[core::fmt::rt::Argument<'_>; 1];
    let _154: &[core::fmt::rt::Argument<'_>; 1];
    let _155: [core::fmt::rt::Argument<'_>; 1];
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &error::ErrorCode;
    let _158: &error::ErrorCode;
    let _159: ();
    let mut _160: &str;
    let _161: &str;
    let mut _162: error::ErrorCode;
    let mut _163: isize;
    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _167: ();
    let _168: ();
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _170: std::result::Result<(), error::ErrorCode>;
    let mut _171: bool;
    let mut _172: u32;
    let mut _173: i32;
    let mut _174: u32;
    let mut _175: ();
    let _176: error::ErrorCode;
    let _177: ();
    let mut _178: &str;
    let _179: &str;
    let mut _180: &std::string::String;
    let _181: &std::string::String;
    let _182: std::string::String;
    let mut _184: std::fmt::Arguments<'_>;
    let mut _185: &[&str];
    let mut _186: &[&str; 2];
    let _187: &[&str; 2];
    let _188: [&str; 2];
    let mut _189: &[core::fmt::rt::Argument<'_>];
    let mut _190: &[core::fmt::rt::Argument<'_>; 1];
    let _191: &[core::fmt::rt::Argument<'_>; 1];
    let _192: [core::fmt::rt::Argument<'_>; 1];
    let mut _193: core::fmt::rt::Argument<'_>;
    let mut _194: &error::ErrorCode;
    let _195: &error::ErrorCode;
    let _196: ();
    let mut _197: &str;
    let _198: &str;
    let mut _199: error::ErrorCode;
    let mut _200: isize;
    let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _204: ();
    let mut _205: ();
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _24;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _27;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _34;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _37;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _44;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _47;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _54;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _57;
        scope 20 {
        }
    }
    scope 21 {
        debug error_code => _67;
        let _74: std::string::String;
        let mut _209: &[&str; 2];
        scope 22 {
            debug res => _74;
        }
    }
    scope 23 {
        debug residual => _92;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _95;
        scope 26 {
        }
    }
    scope 27 {
        debug error_code => _103;
        let _110: std::string::String;
        let mut _208: &[&str; 2];
        scope 28 {
            debug res => _110;
        }
    }
    scope 29 {
        debug residual => _128;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _131;
        scope 32 {
        }
    }
    scope 33 {
        debug error_code => _139;
        let _146: std::string::String;
        let mut _207: &[&str; 2];
        scope 34 {
            debug res => _146;
        }
    }
    scope 35 {
        debug residual => _164;
        scope 36 {
        }
    }
    scope 37 {
        debug val => _167;
        scope 38 {
        }
    }
    scope 39 {
        debug error_code => _176;
        let _183: std::string::String;
        let mut _206: &[&str; 2];
        scope 40 {
            debug res => _183;
        }
    }
    scope 41 {
        debug residual => _201;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _204;
        scope 44 {
        }
    }

    bb0: {
        StorageLive(_5);
        _6 = discriminant(((*_1).13: state::user::OrderType));
        switchInt(move _6) -> [0: bb3, 1: bb9, 2: bb15, 3: bb21, 4: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_1);
        StorageLive(_51);
        _51 = (((*_2).1: state::perp_market::AMM).52: u64);
        StorageLive(_52);
        _52 = (((*_2).1: state::perp_market::AMM).54: u64);
        _49 = validate_oracle_order(move _50, move _51, move _52) -> [return: bb27, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = (((*_2).1: state::perp_market::AMM).52: u64);
        StorageLive(_11);
        _11 = (((*_2).1: state::perp_market::AMM).54: u64);
        _8 = validate_market_order(move _9, move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_7 as Continue).0: ());
        _5 = _16;
        StorageDead(_16);
        StorageDead(_7);
        goto -> bb32;
    }

    bb7: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb97;
    }

    bb9: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_1);
        StorageLive(_20);
        _20 = &(*_2);
        StorageLive(_21);
        _21 = _3;
        StorageLive(_22);
        _22 = _4;
        _18 = validate_limit_order(move _19, move _20, move _21, move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_17 as Continue).0: ());
        _5 = _27;
        StorageDead(_27);
        StorageDead(_17);
        goto -> bb32;
    }

    bb13: {
        StorageLive(_24);
        _24 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_17);
        goto -> bb97;
    }

    bb15: {
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_1);
        StorageLive(_31);
        _31 = (((*_2).1: state::perp_market::AMM).52: u64);
        StorageLive(_32);
        _32 = (((*_2).1: state::perp_market::AMM).54: u64);
        _29 = validate_trigger_market_order(move _30, move _31, move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb18, 1: bb19, otherwise: bb2];
    }

    bb18: {
        StorageLive(_37);
        _37 = ((_28 as Continue).0: ());
        _5 = _37;
        StorageDead(_37);
        StorageDead(_28);
        goto -> bb32;
    }

    bb19: {
        StorageLive(_34);
        _34 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_28);
        goto -> bb97;
    }

    bb21: {
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = (((*_2).1: state::perp_market::AMM).52: u64);
        StorageLive(_42);
        _42 = (((*_2).1: state::perp_market::AMM).54: u64);
        _39 = validate_trigger_limit_order(move _40, move _41, move _42) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _39) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb2];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_38 as Continue).0: ());
        _5 = _47;
        StorageDead(_47);
        StorageDead(_38);
        goto -> bb32;
    }

    bb25: {
        StorageLive(_44);
        _44 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_38);
        goto -> bb97;
    }

    bb27: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb29, 1: bb30, otherwise: bb2];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: ());
        _5 = _57;
        StorageDead(_57);
        StorageDead(_48);
        goto -> bb32;
    }

    bb30: {
        StorageLive(_54);
        _54 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_48);
        goto -> bb97;
    }

    bb32: {
        StorageDead(_5);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_2);
        _59 = PerpMarket::is_prediction_market(move _60) -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _59) -> [0: bb94, otherwise: bb34];
    }

    bb34: {
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = ((*_1).1: u64);
        _64 = Le(move _65, const _);
        switchInt(move _64) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = ();
        _63 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb44;
    }

    bb36: {
        StorageDead(_65);
        StorageLive(_67);
        _67 = error::ErrorCode::InvalidPredictionMarketOrder;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _209 = const _;
        _78 = &(*_209);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_67;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _85) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_85);
        _83 = [move _84];
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb40, unwind: bb102];
    }

    bb40: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb41, unwind: bb102];
    }

    bb41: {
        StorageDead(_69);
        drop(_73) -> [return: bb42, unwind: bb103];
    }

    bb42: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = const "prediction market price must be <= 1";
        _88 = &(*_89);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_88);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_90);
        _90 = _67;
        _63 = std::result::Result::<(), error::ErrorCode>::Err(move _90);
        StorageDead(_90);
        StorageDead(_67);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_64);
        _62 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _63) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_63);
        _91 = discriminant(_62);
        switchInt(move _91) -> [0: bb46, 1: bb47, otherwise: bb2];
    }

    bb46: {
        StorageLive(_95);
        _95 = ((_62 as Continue).0: ());
        _61 = _95;
        StorageDead(_95);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = ((*_1).6: i64);
        _100 = core::num::<impl i64>::unsigned_abs(move _101) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_92);
        _92 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb96;
    }

    bb49: {
        StorageDead(_101);
        _99 = Le(move _100, const _);
        switchInt(move _99) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        StorageDead(_100);
        StorageLive(_102);
        _102 = ();
        _98 = std::result::Result::<(), error::ErrorCode>::Ok(move _102);
        StorageDead(_102);
        goto -> bb59;
    }

    bb51: {
        StorageDead(_100);
        StorageLive(_103);
        _103 = error::ErrorCode::InvalidPredictionMarketOrder;
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _208 = const _;
        _114 = &(*_208);
        _113 = &(*_114);
        _112 = move _113 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_113);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_103;
        _121 = &(*_122);
        _120 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _121) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_121);
        _119 = [move _120];
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = move _117 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_117);
        _111 = Arguments::<'_>::new_v1(move _112, move _116) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_116);
        StorageDead(_112);
        _110 = format(move _111) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_111);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_114);
        _109 = move _110;
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = <String as Deref>::deref(move _107) -> [return: bb55, unwind: bb101];
    }

    bb55: {
        _105 = &(*_106);
        StorageDead(_107);
        _104 = solana_program::log::sol_log(move _105) -> [return: bb56, unwind: bb101];
    }

    bb56: {
        StorageDead(_105);
        drop(_109) -> [return: bb57, unwind: bb103];
    }

    bb57: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_104);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = const "prediction market auction start price abs must be <= 1";
        _124 = &(*_125);
        _123 = solana_program::log::sol_log(move _124) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_124);
        StorageDead(_125);
        StorageDead(_123);
        StorageLive(_126);
        _126 = _103;
        _98 = std::result::Result::<(), error::ErrorCode>::Err(move _126);
        StorageDead(_126);
        StorageDead(_103);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_99);
        _97 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _98) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_98);
        _127 = discriminant(_97);
        switchInt(move _127) -> [0: bb61, 1: bb62, otherwise: bb2];
    }

    bb61: {
        StorageLive(_131);
        _131 = ((_97 as Continue).0: ());
        _96 = _131;
        StorageDead(_131);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = ((*_1).7: i64);
        _136 = core::num::<impl i64>::unsigned_abs(move _137) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_128);
        _128 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb96;
    }

    bb64: {
        StorageDead(_137);
        _135 = Le(move _136, const _);
        switchInt(move _135) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        StorageDead(_136);
        StorageLive(_138);
        _138 = ();
        _134 = std::result::Result::<(), error::ErrorCode>::Ok(move _138);
        StorageDead(_138);
        goto -> bb74;
    }

    bb66: {
        StorageDead(_136);
        StorageLive(_139);
        _139 = error::ErrorCode::InvalidPredictionMarketOrder;
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _207 = const _;
        _150 = &(*_207);
        _149 = &(*_150);
        _148 = move _149 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_139;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _157) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_157);
        _155 = [move _156];
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_153);
        _147 = Arguments::<'_>::new_v1(move _148, move _152) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_152);
        StorageDead(_148);
        _146 = format(move _147) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_147);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_150);
        _145 = move _146;
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = <String as Deref>::deref(move _143) -> [return: bb70, unwind: bb100];
    }

    bb70: {
        _141 = &(*_142);
        StorageDead(_143);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb71, unwind: bb100];
    }

    bb71: {
        StorageDead(_141);
        drop(_145) -> [return: bb72, unwind: bb103];
    }

    bb72: {
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = const "prediction market auction end price abs must be <= 1";
        _160 = &(*_161);
        _159 = solana_program::log::sol_log(move _160) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_160);
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_162);
        _162 = _139;
        _134 = std::result::Result::<(), error::ErrorCode>::Err(move _162);
        StorageDead(_162);
        StorageDead(_139);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_135);
        _133 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _134) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_134);
        _163 = discriminant(_133);
        switchInt(move _163) -> [0: bb76, 1: bb77, otherwise: bb2];
    }

    bb76: {
        StorageLive(_167);
        _167 = ((_133 as Continue).0: ());
        _132 = _167;
        StorageDead(_167);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = ((*_1).9: i32);
        _172 = core::num::<impl i32>::unsigned_abs(move _173) -> [return: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_164);
        _164 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb96;
    }

    bb79: {
        StorageDead(_173);
        StorageLive(_174);
        _174 = const _ as u32 (IntToInt);
        _171 = Le(move _172, move _174);
        switchInt(move _171) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        StorageDead(_174);
        StorageDead(_172);
        StorageLive(_175);
        _175 = ();
        _170 = std::result::Result::<(), error::ErrorCode>::Ok(move _175);
        StorageDead(_175);
        goto -> bb89;
    }

    bb81: {
        StorageDead(_174);
        StorageDead(_172);
        StorageLive(_176);
        _176 = error::ErrorCode::InvalidPredictionMarketOrder;
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _206 = const _;
        _187 = &(*_206);
        _186 = &(*_187);
        _185 = move _186 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_176;
        _194 = &(*_195);
        _193 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _194) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_194);
        _192 = [move _193];
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = move _190 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_190);
        _184 = Arguments::<'_>::new_v1(move _185, move _189) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_189);
        StorageDead(_185);
        _183 = format(move _184) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_187);
        _182 = move _183;
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = <String as Deref>::deref(move _180) -> [return: bb85, unwind: bb99];
    }

    bb85: {
        _178 = &(*_179);
        StorageDead(_180);
        _177 = solana_program::log::sol_log(move _178) -> [return: bb86, unwind: bb99];
    }

    bb86: {
        StorageDead(_178);
        drop(_182) -> [return: bb87, unwind: bb103];
    }

    bb87: {
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_177);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = const "prediction market auction end price abs must be <= 1";
        _197 = &(*_198);
        _196 = solana_program::log::sol_log(move _197) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_197);
        StorageDead(_198);
        StorageDead(_196);
        StorageLive(_199);
        _199 = _176;
        _170 = std::result::Result::<(), error::ErrorCode>::Err(move _199);
        StorageDead(_199);
        StorageDead(_176);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_171);
        _169 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _170) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_170);
        _200 = discriminant(_169);
        switchInt(move _200) -> [0: bb91, 1: bb92, otherwise: bb2];
    }

    bb91: {
        StorageLive(_204);
        _204 = ((_169 as Continue).0: ());
        _168 = _204;
        StorageDead(_204);
        StorageDead(_169);
        StorageDead(_168);
        _58 = const ();
        goto -> bb95;
    }

    bb92: {
        StorageLive(_201);
        _201 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb96;
    }

    bb94: {
        StorageDead(_60);
        _58 = const ();
        goto -> bb95;
    }

    bb95: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_205);
        _205 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _205);
        StorageDead(_205);
        goto -> bb98;
    }

    bb96: {
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb98;
    }

    bb97: {
        StorageDead(_5);
        goto -> bb98;
    }

    bb98: {
        return;
    }

    bb99 (cleanup): {
        drop(_182) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_145) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_109) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_73) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        resume;
    }
}
