digraph Mir_0_2822 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_price_bands_for_swap(_1: &amp;ReErased state::spot_market::SpotMarket, _2: &amp;ReErased state::spot_market::SpotMarket, _3: u64, _4: u64, _5: i64, _6: i64, _7: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _8: u64;<br align="left"/>let _9: controller::position::PositionDirection;<br align="left"/>let _10: i64;<br align="left"/>let _11: i64;<br align="left"/>let _12: u32;<br align="left"/>let mut _13: (u64, controller::position::PositionDirection, i64, i64, u32);<br align="left"/>let _14: u32;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _17: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _18: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _19: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _20: math::margin::MarginRequirementType;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: u32;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: u32;<br align="left"/>let _28: u64;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _30: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _31: i128;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _33: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _34: i128;<br align="left"/>let mut _35: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _36: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _37: u64;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: i128;<br align="left"/>let mut _43: u32;<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: i128;<br align="left"/>let mut _50: isize;<br align="left"/>let _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _52: !;<br align="left"/>let mut _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _54: u64;<br align="left"/>let _55: u64;<br align="left"/>let mut _56: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _57: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _58: u64;<br align="left"/>let mut _59: u64;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: state::spot_market::SpotMarket;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _66: u64;<br align="left"/>let mut _67: u64;<br align="left"/>let mut _68: controller::position::PositionDirection;<br align="left"/>let mut _69: i64;<br align="left"/>let mut _70: i64;<br align="left"/>let mut _71: u32;<br align="left"/>let _72: u64;<br align="left"/>let mut _73: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _74: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _75: u64;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: state::spot_market::SpotMarket;<br align="left"/>let mut _79: isize;<br align="left"/>let _80: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _81: !;<br align="left"/>let mut _82: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _83: u64;<br align="left"/>let mut _84: u64;<br align="left"/>let mut _85: controller::position::PositionDirection;<br align="left"/>let mut _86: i64;<br align="left"/>let mut _87: i64;<br align="left"/>let mut _88: u32;<br align="left"/>let mut _89: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _90: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _91: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _92: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _93: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _94: math::margin::MarginRequirementType;<br align="left"/>let mut _95: isize;<br align="left"/>let _96: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _97: !;<br align="left"/>let mut _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _99: u32;<br align="left"/>let _100: ();<br align="left"/>let mut _101: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _102: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _103: u64;<br align="left"/>let mut _104: i64;<br align="left"/>let mut _105: i64;<br align="left"/>let mut _106: u32;<br align="left"/>let mut _107: u64;<br align="left"/>let mut _108: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _109: controller::position::PositionDirection;<br align="left"/>let mut _110: isize;<br align="left"/>let _111: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _112: !;<br align="left"/>let mut _113: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _114: ();<br align="left"/>let mut _115: ();<br align="left"/>let mut _116: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let mut _117: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>debug in_market =&gt; _1;<br align="left"/>debug out_market =&gt; _2;<br align="left"/>debug amount_in =&gt; _3;<br align="left"/>debug amount_out =&gt; _4;<br align="left"/>debug in_price =&gt; _5;<br align="left"/>debug out_price =&gt; _6;<br align="left"/>debug oracle_twap_5min_percent_divergence =&gt; _7;<br align="left"/>debug fill_price =&gt; _8;<br align="left"/>debug direction =&gt; _9;<br align="left"/>debug oracle_price =&gt; _10;<br align="left"/>debug oracle_twap_5min =&gt; _11;<br align="left"/>debug margin_ratio =&gt; _12;<br align="left"/>debug in_market_margin_ratio =&gt; _14;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug out_value =&gt; _28;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>debug residual =&gt; _51;<br align="left"/>debug val =&gt; _54;<br align="left"/>debug fill_price =&gt; _55;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug fill_price =&gt; _72;<br align="left"/>debug residual =&gt; _80;<br align="left"/>debug val =&gt; _83;<br align="left"/>debug residual =&gt; _96;<br align="left"/>debug val =&gt; _99;<br align="left"/>debug residual =&gt; _111;<br align="left"/>debug val =&gt; _114;<br align="left"/>>;
    bb0__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;(*_1)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_117 = const _<br/>_19 = &amp;(*_117)<br/>_18 = &amp;(*_19)<br/></td></tr><tr><td align="left">_16 = SpotMarket::get_margin_ratio(move _17, move _18)</td></tr></table>>];
    bb1__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb2__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_21 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb3__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_15 as Continue).0: u32)<br/>_14 = _25<br/>StorageDead(_25)<br/>StorageDead(_19)<br/>StorageDead(_15)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _14<br/>_26 = Ne(move _27, const 0_u32)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb4__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb6__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = _4<br/></td></tr><tr><td align="left">_36 = &lt;u64 as Cast&gt;::cast::&lt;i128&gt;(move _37)</td></tr></table>>];
    bb8__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = _3<br/>StorageLive(_76)<br/>_76 = _4<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = (*_2)<br/></td></tr><tr><td align="left">_77 = SpotMarket::get_precision(move _78)</td></tr></table>>];
    bb9__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _36)</td></tr></table>>];
    bb10__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_38 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb11__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_35 as Continue).0: i128)<br/>_34 = _42<br/>StorageDead(_42)<br/>StorageLive(_43)<br/>_43 = ((*_2).41: u32)<br/>StorageLive(_44)<br/>_44 = _6<br/></td></tr><tr><td align="left">_33 = get_token_value(move _34, move _43, move _44)</td></tr></table>>];
    bb12__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_35 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb13__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb15__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_45 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb16__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_32 as Continue).0: i128)<br/>_31 = _49<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_30 = &lt;i128 as Cast&gt;::cast::&lt;u64&gt;(move _31)</td></tr></table>>];
    bb17__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb18__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb20__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_50 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb21__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = ((_29 as Continue).0: u64)<br/>_28 = _54<br/>StorageDead(_54)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = _28<br/>StorageLive(_59)<br/>_59 = _3<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = (*_1)<br/></td></tr><tr><td align="left">_60 = SpotMarket::get_precision(move _61)</td></tr></table>>];
    bb22__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_53)<br/>_53 = _51<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _53)</td></tr></table>>];
    bb23__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/></td></tr><tr><td align="left">_57 = math::orders::calculate_fill_price(move _58, move _59, move _60)</td></tr></table>>];
    bb25__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_59)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">_56 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _57)</td></tr></table>>];
    bb26__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>_62 = discriminant(_56)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb27__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_56 as Continue).0: u64)<br/>_55 = _66<br/>StorageDead(_66)<br/>StorageDead(_56)<br/>StorageLive(_67)<br/>_67 = _55<br/>StorageLive(_68)<br/>_68 = controller::position::PositionDirection::Short<br/>StorageLive(_69)<br/>_69 = _5<br/>StorageLive(_70)<br/>_70 = (((*_1).5: state::oracle::HistoricalOracleData).4: i64)<br/>StorageLive(_71)<br/>_71 = _14<br/>_13 = (move _67, move _68, move _69, move _70, move _71)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_55)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_56 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_65)<br/>_65 = _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb29__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/></td></tr><tr><td align="left">_74 = math::orders::calculate_fill_price(move _75, move _76, move _77)</td></tr></table>>];
    bb31__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">_73 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _74)</td></tr></table>>];
    bb32__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>_79 = discriminant(_73)<br/></td></tr><tr><td align="left">switchInt(move _79)</td></tr></table>>];
    bb33__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_83)<br/>_83 = ((_73 as Continue).0: u64)<br/>_72 = _83<br/>StorageDead(_83)<br/>StorageDead(_73)<br/>StorageLive(_84)<br/>_84 = _72<br/>StorageLive(_85)<br/>_85 = controller::position::PositionDirection::Long<br/>StorageLive(_86)<br/>_86 = _6<br/>StorageLive(_87)<br/>_87 = (((*_2).5: state::oracle::HistoricalOracleData).4: i64)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = &amp;(*_2)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_116 = const _<br/>_93 = &amp;(*_116)<br/>_92 = &amp;(*_93)<br/></td></tr><tr><td align="left">_90 = SpotMarket::get_margin_ratio(move _91, move _92)</td></tr></table>>];
    bb34__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_73 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_82)<br/>_82 = _80<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _82)</td></tr></table>>];
    bb35__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_80)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">_89 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _90)</td></tr></table>>];
    bb37__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>_95 = discriminant(_89)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb38__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_89 as Continue).0: u32)<br/>_88 = _99<br/>StorageDead(_99)<br/>_13 = (move _84, move _85, move _86, move _87, move _88)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageDead(_72)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_89 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_98)<br/>_98 = _96<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _98)</td></tr></table>>];
    bb40__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageDead(_72)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_14)<br/>StorageLive(_8)<br/>_8 = (_13.0: u64)<br/>StorageLive(_9)<br/>_9 = (_13.1: controller::position::PositionDirection)<br/>StorageLive(_10)<br/>_10 = (_13.2: i64)<br/>StorageLive(_11)<br/>_11 = (_13.3: i64)<br/>StorageLive(_12)<br/>_12 = (_13.4: u32)<br/>StorageDead(_13)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = _8<br/>StorageLive(_104)<br/>_104 = _10<br/>StorageLive(_105)<br/>_105 = _11<br/>StorageLive(_106)<br/>_106 = _12<br/>StorageLive(_107)<br/>_107 = _7<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>_109 = _9<br/>_108 = Option::&lt;controller::position::PositionDirection&gt;::Some(move _109)<br/>StorageDead(_109)<br/></td></tr><tr><td align="left">_102 = math::orders::validate_fill_price_within_price_bands(move _103, move _104, move _105, move _106, move _107, const false, move _108)</td></tr></table>>];
    bb42__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/></td></tr><tr><td align="left">_101 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _102)</td></tr></table>>];
    bb43__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>_110 = discriminant(_101)<br/></td></tr><tr><td align="left">switchInt(move _110)</td></tr></table>>];
    bb44__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_114)<br/>_114 = ((_101 as Continue).0: ())<br/>_100 = _114<br/>StorageDead(_114)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageLive(_115)<br/>_115 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _115)<br/>StorageDead(_115)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_111)<br/>_111 = ((_101 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_113)<br/>_113 = _111<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _113)</td></tr></table>>];
    bb46__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/>StorageDead(_111)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_2822 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2822 -> bb1__0_2822 [label="return"];
    bb1__0_2822 -> bb2__0_2822 [label="return"];
    bb2__0_2822 -> bb3__0_2822 [label="0"];
    bb2__0_2822 -> bb5__0_2822 [label="1"];
    bb2__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb3__0_2822 -> bb8__0_2822 [label="0"];
    bb3__0_2822 -> bb7__0_2822 [label="otherwise"];
    bb5__0_2822 -> bb6__0_2822 [label="return"];
    bb6__0_2822 -> bb51__0_2822 [label=""];
    bb7__0_2822 -> bb9__0_2822 [label="return"];
    bb8__0_2822 -> bb30__0_2822 [label="return"];
    bb9__0_2822 -> bb10__0_2822 [label="return"];
    bb10__0_2822 -> bb11__0_2822 [label="0"];
    bb10__0_2822 -> bb12__0_2822 [label="1"];
    bb10__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb11__0_2822 -> bb14__0_2822 [label="return"];
    bb12__0_2822 -> bb13__0_2822 [label="return"];
    bb13__0_2822 -> bb47__0_2822 [label=""];
    bb14__0_2822 -> bb15__0_2822 [label="return"];
    bb15__0_2822 -> bb16__0_2822 [label="0"];
    bb15__0_2822 -> bb17__0_2822 [label="1"];
    bb15__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb16__0_2822 -> bb19__0_2822 [label="return"];
    bb17__0_2822 -> bb18__0_2822 [label="return"];
    bb18__0_2822 -> bb47__0_2822 [label=""];
    bb19__0_2822 -> bb20__0_2822 [label="return"];
    bb20__0_2822 -> bb21__0_2822 [label="0"];
    bb20__0_2822 -> bb22__0_2822 [label="1"];
    bb20__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb21__0_2822 -> bb24__0_2822 [label="return"];
    bb22__0_2822 -> bb23__0_2822 [label="return"];
    bb23__0_2822 -> bb48__0_2822 [label=""];
    bb24__0_2822 -> bb25__0_2822 [label="return"];
    bb25__0_2822 -> bb26__0_2822 [label="return"];
    bb26__0_2822 -> bb27__0_2822 [label="0"];
    bb26__0_2822 -> bb28__0_2822 [label="1"];
    bb26__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb27__0_2822 -> bb41__0_2822 [label=""];
    bb28__0_2822 -> bb29__0_2822 [label="return"];
    bb29__0_2822 -> bb49__0_2822 [label=""];
    bb30__0_2822 -> bb31__0_2822 [label="return"];
    bb31__0_2822 -> bb32__0_2822 [label="return"];
    bb32__0_2822 -> bb33__0_2822 [label="0"];
    bb32__0_2822 -> bb34__0_2822 [label="1"];
    bb32__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb33__0_2822 -> bb36__0_2822 [label="return"];
    bb34__0_2822 -> bb35__0_2822 [label="return"];
    bb35__0_2822 -> bb50__0_2822 [label=""];
    bb36__0_2822 -> bb37__0_2822 [label="return"];
    bb37__0_2822 -> bb38__0_2822 [label="0"];
    bb37__0_2822 -> bb39__0_2822 [label="1"];
    bb37__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb38__0_2822 -> bb41__0_2822 [label=""];
    bb39__0_2822 -> bb40__0_2822 [label="return"];
    bb40__0_2822 -> bb50__0_2822 [label=""];
    bb41__0_2822 -> bb42__0_2822 [label="return"];
    bb42__0_2822 -> bb43__0_2822 [label="return"];
    bb43__0_2822 -> bb44__0_2822 [label="0"];
    bb43__0_2822 -> bb45__0_2822 [label="1"];
    bb43__0_2822 -> bb4__0_2822 [label="otherwise"];
    bb44__0_2822 -> bb52__0_2822 [label=""];
    bb45__0_2822 -> bb46__0_2822 [label="return"];
    bb46__0_2822 -> bb52__0_2822 [label=""];
    bb47__0_2822 -> bb48__0_2822 [label=""];
    bb48__0_2822 -> bb49__0_2822 [label=""];
    bb49__0_2822 -> bb50__0_2822 [label=""];
    bb50__0_2822 -> bb51__0_2822 [label=""];
    bb51__0_2822 -> bb52__0_2822 [label=""];
}
