digraph Mir_0_1788 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_market_open_bids_asks(_1: &amp;ReErased state::perp_market::AMM) -&gt; std::result::Result&lt;(i128, i128), error::ErrorCode&gt;<br align="left"/>let _2: u128;<br align="left"/>let _3: u128;<br align="left"/>let _4: u128;<br align="left"/>let _5: i128;<br align="left"/>let _6: i128;<br align="left"/>let mut _7: (i128, i128);<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i128, i128)&gt;;<br align="left"/>let mut _9: std::result::Result&lt;(i128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: (i128, i128);<br align="left"/>let mut _18: (i128, i128);<br align="left"/>let mut _19: i128;<br align="left"/>let mut _20: i128;<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug base_asset_reserve =&gt; _2;<br align="left"/>debug min_base_asset_reserve =&gt; _3;<br align="left"/>debug max_base_asset_reserve =&gt; _4;<br align="left"/>debug max_bids =&gt; _5;<br align="left"/>debug max_asks =&gt; _6;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>>;
    bb0__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = ((*_1).5: u128)<br/>StorageLive(_3)<br/>_3 = ((*_1).8: u128)<br/>StorageLive(_4)<br/>_4 = ((*_1).9: u128)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/>StorageLive(_11)<br/>_11 = _3<br/>StorageLive(_12)<br/>_12 = _4<br/></td></tr><tr><td align="left">_9 = _calculate_market_open_bids_asks(move _10, move _11, move _12)</td></tr></table>>];
    bb1__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_13 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb3__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_8 as Continue).0: (i128, i128))<br/>_7 = _17<br/>StorageDead(_17)<br/>StorageLive(_5)<br/>_5 = (_7.0: i128)<br/>StorageLive(_6)<br/>_6 = (_7.1: i128)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _5<br/>StorageLive(_20)<br/>_20 = _6<br/>_18 = (move _19, move _20)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_0 = std::result::Result::&lt;(i128, i128), error::ErrorCode&gt;::Ok(move _18)<br/>StorageDead(_18)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb6__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1788 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1788 -> bb1__0_1788 [label="return"];
    bb1__0_1788 -> bb2__0_1788 [label="return"];
    bb2__0_1788 -> bb3__0_1788 [label="0"];
    bb2__0_1788 -> bb5__0_1788 [label="1"];
    bb2__0_1788 -> bb4__0_1788 [label="otherwise"];
    bb3__0_1788 -> bb7__0_1788 [label=""];
    bb5__0_1788 -> bb6__0_1788 [label="return"];
    bb6__0_1788 -> bb7__0_1788 [label=""];
}
