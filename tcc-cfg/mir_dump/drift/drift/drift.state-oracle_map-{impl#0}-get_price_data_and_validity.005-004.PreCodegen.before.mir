// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::get_price_data_and_validity` before PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::get_price_data_and_validity(_1: &mut OracleMap<'_>, _2: state::user::MarketType, _3: u16, _4: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), _5: i64, _6: u64, _7: i8) -> std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> {
    debug self => _1;
    debug market_type => _2;
    debug market_index => _3;
    debug oracle_id => _4;
    debug last_oracle_price_twap => _5;
    debug max_confidence_interval_multiplier => _6;
    debug slots_before_stale_for_amm_override => _7;
    let mut _0: std::result::Result<(&state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode>;
    let _8: ();
    let mut _9: bool;
    let mut _10: &state::oracle_map::OracleMap<'_>;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let _12: &anchor_lang::prelude::Pubkey;
    let mut _13: !;
    let mut _14: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _15: &state::oracle::OraclePriceData;
    let _16: &state::oracle::OraclePriceData;
    let mut _17: math::oracle::OracleValidity;
    let _18: ();
    let mut _19: bool;
    let mut _20: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _21: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _22: !;
    let _23: &state::oracle::OraclePriceData;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _25: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _26: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _27: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _28: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: &state::oracle::OraclePriceData;
    let mut _35: std::option::Option<&math::oracle::OracleValidity>;
    let mut _36: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>;
    let mut _37: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _38: isize;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::oracle::OracleValidity>;
    let mut _42: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let mut _43: state::user::MarketType;
    let mut _44: u16;
    let mut _45: i64;
    let mut _46: &state::oracle::OraclePriceData;
    let mut _47: &state::state::ValidityGuardRails;
    let _48: &state::state::ValidityGuardRails;
    let mut _49: u64;
    let mut _50: &state::oracle::OracleSource;
    let _51: &state::oracle::OracleSource;
    let mut _52: math::oracle::LogMode;
    let mut _53: i8;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: std::option::Option<math::oracle::OracleValidity>;
    let mut _60: &mut std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>;
    let mut _61: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _62: math::oracle::OracleValidity;
    let mut _63: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _64: &state::oracle::OraclePriceData;
    let mut _65: math::oracle::OracleValidity;
    let _66: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _67: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _68: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let _70: &anchor_lang::prelude::Pubkey;
    let mut _71: isize;
    let _72: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _73: !;
    let _74: ();
    let mut _75: &str;
    let _76: &str;
    let mut _77: &std::string::String;
    let _78: &std::string::String;
    let _79: std::string::String;
    let _80: std::string::String;
    let mut _81: std::fmt::Arguments<'_>;
    let mut _82: &[&str];
    let mut _83: &[&str; 1];
    let _84: &[&str; 1];
    let _85: [&str; 1];
    let mut _86: &[core::fmt::rt::Argument<'_>];
    let mut _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: [core::fmt::rt::Argument<'_>; 1];
    let mut _90: core::fmt::rt::Argument<'_>;
    let mut _91: &anchor_lang::prelude::Pubkey;
    let _92: &anchor_lang::prelude::Pubkey;
    let mut _93: error::ErrorCode;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _96: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _97: &state::oracle::OracleSource;
    let _98: &state::oracle::OracleSource;
    let mut _99: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _100: u64;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _106: std::option::Option<state::oracle::OraclePriceData>;
    let mut _107: &mut std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _108: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _109: state::oracle::OraclePriceData;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _112: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _113: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _114: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _115: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::oracle::OracleValidity>;
    let mut _123: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let mut _124: state::user::MarketType;
    let mut _125: u16;
    let mut _126: i64;
    let mut _127: &state::oracle::OraclePriceData;
    let mut _128: &state::state::ValidityGuardRails;
    let _129: &state::state::ValidityGuardRails;
    let mut _130: u64;
    let mut _131: &state::oracle::OracleSource;
    let _132: &state::oracle::OracleSource;
    let mut _133: math::oracle::LogMode;
    let mut _134: i8;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _140: std::option::Option<math::oracle::OracleValidity>;
    let mut _141: &mut std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>;
    let mut _142: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _143: math::oracle::OracleValidity;
    let mut _144: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _145: &state::oracle::OraclePriceData;
    let mut _146: math::oracle::OracleValidity;
    let mut _147: &[&str; 1];
    scope 1 {
        debug oracle_price_data => _23;
        let _34: math::oracle::OracleValidity;
        let _40: math::oracle::OracleValidity;
        let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _58: math::oracle::OracleValidity;
        scope 6 {
            debug oracle_validity => _34;
        }
        scope 7 {
            debug oracle_validity => _39;
            let _39: &math::oracle::OracleValidity;
        }
        scope 8 {
            debug oracle_validity => _40;
        }
        scope 9 {
            debug residual => _55;
            scope 10 {
            }
        }
        scope 11 {
            debug val => _58;
            scope 12 {
            }
        }
    }
    scope 2 {
        debug residual => _30;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _33;
        scope 5 {
        }
    }
    scope 13 {
        debug account_info => _66;
        let _94: state::oracle::OraclePriceData;
        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _105: state::oracle::OraclePriceData;
        scope 16 {
            debug price_data => _94;
            let _110: &state::oracle::OraclePriceData;
            let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _120: &state::oracle::OraclePriceData;
            scope 21 {
                debug oracle_price_data => _110;
                let _121: math::oracle::OracleValidity;
                let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _139: math::oracle::OracleValidity;
                scope 26 {
                    debug oracle_validity => _121;
                }
                scope 27 {
                    debug residual => _136;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _139;
                    scope 30 {
                    }
                }
            }
            scope 22 {
                debug residual => _117;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _120;
                scope 25 {
                }
            }
        }
        scope 17 {
            debug residual => _102;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _105;
            scope 20 {
            }
        }
    }
    scope 14 {
        debug account_info => _72;
    }
    scope 15 {
        debug res => _80;
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_4).0: anchor_lang::prelude::Pubkey);
        _11 = &(*_12);
        _9 = OracleMap::<'_>::should_get_quote_asset_price_data(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).5: state::oracle::OraclePriceData);
        _15 = &(*_16);
        StorageLive(_17);
        _17 = OracleValidity::Valid;
        _14 = (move _15, move _17);
        StorageDead(_17);
        StorageDead(_15);
        _0 = std::result::Result::<(&OraclePriceData, OracleValidity), error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        StorageDead(_16);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb56;
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_21);
        _21 = &(*_4);
        _19 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::contains_key::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _20, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _19) -> [0: bb23, otherwise: bb5];
    }

    bb5: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_28);
        _28 = &(*_4);
        _26 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _27, move _28) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = <Option<&OraclePriceData> as SafeUnwrap>::safe_unwrap(move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        _24 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_33);
        _33 = ((_24 as Continue).0: &state::oracle::OraclePriceData);
        _23 = _33;
        StorageDead(_33);
        StorageDead(_24);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).2: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>);
        StorageLive(_37);
        _37 = &(*_4);
        _35 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OracleValidity>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _36, move _37) -> [return: bb13, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_30);
        _30 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_24);
        goto -> bb55;
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [1: bb14, otherwise: bb15];
    }

    bb14: {
        StorageLive(_39);
        _39 = ((_35 as Some).0: &math::oracle::OracleValidity);
        _34 = (*_39);
        StorageDead(_39);
        goto -> bb22;
    }

    bb15: {
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _2;
        StorageLive(_44);
        _44 = _3;
        StorageLive(_45);
        _45 = _5;
        StorageLive(_46);
        _46 = &(*_23);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(((*_1).4: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _47 = &(*_48);
        StorageLive(_49);
        _49 = _6;
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_4).1: state::oracle::OracleSource);
        _50 = &(*_51);
        StorageLive(_52);
        _52 = LogMode::ExchangeOracle;
        StorageLive(_53);
        _53 = _7;
        _42 = oracle_validity(move _43, move _44, move _45, move _46, move _47, move _49, move _50, move _52, move _53) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<OracleValidity, error::ErrorCode> as Try>::branch(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        _54 = discriminant(_41);
        switchInt(move _54) -> [0: bb18, 1: bb19, otherwise: bb10];
    }

    bb18: {
        StorageLive(_58);
        _58 = ((_41 as Continue).0: math::oracle::OracleValidity);
        _40 = _58;
        StorageDead(_58);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_41);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut ((*_1).2: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>);
        StorageLive(_61);
        _61 = (*_4);
        StorageLive(_62);
        _62 = _40;
        _59 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OracleValidity>::insert(move _60, move _61, move _62) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_55);
        _55 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_35);
        goto -> bb54;
    }

    bb21: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        _34 = _40;
        StorageDead(_40);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_35);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_23);
        StorageLive(_65);
        _65 = _34;
        _63 = (move _64, move _65);
        StorageDead(_65);
        StorageDead(_64);
        _0 = std::result::Result::<(&OraclePriceData, OracleValidity), error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        goto -> bb54;
    }

    bb23: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &((*_1).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &((*_4).0: anchor_lang::prelude::Pubkey);
        _69 = &(*_70);
        _67 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::get::<anchor_lang::prelude::Pubkey>(move _68, move _69) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_69);
        StorageDead(_68);
        _71 = discriminant(_67);
        switchInt(move _71) -> [0: bb25, 1: bb26, otherwise: bb10];
    }

    bb25: {
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _147 = const _;
        _84 = &(*_147);
        _83 = &(*_84);
        _82 = move _83 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_83);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &((*_4).0: anchor_lang::prelude::Pubkey);
        _91 = &(*_92);
        _90 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _91) -> [return: bb27, unwind continue];
    }

    bb26: {
        StorageLive(_72);
        _72 = ((_67 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _66 = _72;
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &((*_4).1: state::oracle::OracleSource);
        _97 = &(*_98);
        StorageLive(_99);
        _99 = &(*_66);
        StorageLive(_100);
        _100 = ((*_1).3: u64);
        _96 = get_oracle_price(move _97, move _99, move _100) -> [return: bb33, unwind continue];
    }

    bb27: {
        StorageDead(_91);
        _89 = [move _90];
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = move _87 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_87);
        _81 = Arguments::<'_>::new_v1(move _82, move _86) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_86);
        StorageDead(_82);
        _80 = format(move _81) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_81);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_84);
        _79 = move _80;
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = <String as Deref>::deref(move _77) -> [return: bb30, unwind: bb57];
    }

    bb30: {
        _75 = &(*_76);
        StorageDead(_77);
        _74 = solana_program::log::sol_log(move _75) -> [return: bb31, unwind: bb57];
    }

    bb31: {
        StorageDead(_75);
        drop(_79) -> [return: bb32, unwind: bb58];
    }

    bb32: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageLive(_93);
        _93 = error::ErrorCode::OracleNotFound;
        _0 = std::result::Result::<(&OraclePriceData, OracleValidity), error::ErrorCode>::Err(move _93);
        StorageDead(_93);
        StorageDead(_70);
        StorageDead(_67);
        goto -> bb53;
    }

    bb33: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        _95 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _96) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_96);
        _101 = discriminant(_95);
        switchInt(move _101) -> [0: bb35, 1: bb36, otherwise: bb10];
    }

    bb35: {
        StorageLive(_105);
        _105 = ((_95 as Continue).0: state::oracle::OraclePriceData);
        _94 = _105;
        StorageDead(_105);
        StorageDead(_98);
        StorageDead(_95);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &mut ((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_108);
        _108 = (*_4);
        StorageLive(_109);
        _109 = _94;
        _106 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::insert(move _107, move _108, move _109) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_102);
        _102 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_98);
        StorageDead(_95);
        goto -> bb52;
    }

    bb38: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_115);
        _115 = &(*_4);
        _113 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _114, move _115) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_115);
        StorageDead(_114);
        _112 = <Option<&OraclePriceData> as SafeUnwrap>::safe_unwrap(move _113) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_113);
        _111 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _112) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_112);
        _116 = discriminant(_111);
        switchInt(move _116) -> [0: bb42, 1: bb43, otherwise: bb10];
    }

    bb42: {
        StorageLive(_120);
        _120 = ((_111 as Continue).0: &state::oracle::OraclePriceData);
        _110 = _120;
        StorageDead(_120);
        StorageDead(_111);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _2;
        StorageLive(_125);
        _125 = _3;
        StorageLive(_126);
        _126 = _5;
        StorageLive(_127);
        _127 = &(*_110);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(((*_1).4: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _128 = &(*_129);
        StorageLive(_130);
        _130 = _6;
        StorageLive(_131);
        StorageLive(_132);
        _132 = &((*_4).1: state::oracle::OracleSource);
        _131 = &(*_132);
        StorageLive(_133);
        _133 = LogMode::ExchangeOracle;
        StorageLive(_134);
        _134 = _7;
        _123 = oracle_validity(move _124, move _125, move _126, move _127, move _128, move _130, move _131, move _133, move _134) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_117);
        _117 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_111);
        goto -> bb51;
    }

    bb45: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        _122 = <std::result::Result<OracleValidity, error::ErrorCode> as Try>::branch(move _123) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_123);
        _135 = discriminant(_122);
        switchInt(move _135) -> [0: bb47, 1: bb48, otherwise: bb10];
    }

    bb47: {
        StorageLive(_139);
        _139 = ((_122 as Continue).0: math::oracle::OracleValidity);
        _121 = _139;
        StorageDead(_139);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_122);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut ((*_1).2: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>);
        StorageLive(_142);
        _142 = (*_4);
        StorageLive(_143);
        _143 = _121;
        _140 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OracleValidity>::insert(move _141, move _142, move _143) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_136);
        _136 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb51;
    }

    bb50: {
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_110);
        StorageLive(_146);
        _146 = _121;
        _144 = (move _145, move _146);
        StorageDead(_146);
        StorageDead(_145);
        _0 = std::result::Result::<(&OraclePriceData, OracleValidity), error::ErrorCode>::Ok(move _144);
        StorageDead(_144);
        StorageDead(_121);
        StorageDead(_110);
        StorageDead(_94);
        StorageDead(_66);
        goto -> bb56;
    }

    bb51: {
        StorageDead(_110);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_94);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_66);
        goto -> bb56;
    }

    bb54: {
        StorageDead(_34);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_79) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        resume;
    }
}
