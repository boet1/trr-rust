// MIR for `calculate_repeg_validity` after PreCodegen

fn calculate_repeg_validity(_1: &PerpMarket, _2: &OraclePriceData, _3: bool, _4: u64) -> std::result::Result<(bool, bool, bool, bool), error::ErrorCode> {
    debug market => _1;
    debug oracle_price_data => _2;
    debug oracle_is_valid => _3;
    debug terminal_price_before => _4;
    let mut _0: std::result::Result<(bool, bool, bool, bool), error::ErrorCode>;
    let _5: i64;
    let _6: u64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _9: std::result::Result<u64, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: (u64, u128, u128);
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u128, u128)>;
    let mut _21: std::result::Result<(u64, u128, u128), error::ErrorCode>;
    let mut _22: &state::perp_market::AMM;
    let _23: &state::perp_market::AMM;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: ();
    let mut _33: bool;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _36: std::result::Result<u64, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: u128;
    let mut _39: u128;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _47: std::result::Result<u64, error::ErrorCode>;
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _57: std::result::Result<u64, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: bool;
    let mut _66: u64;
    let mut _67: u64;
    let _68: ();
    let mut _69: bool;
    let mut _70: u64;
    let mut _71: u64;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 4];
    let _82: &[&str; 4];
    let _83: [&str; 4];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let mut _85: &[core::fmt::rt::Argument<'_>; 3];
    let _86: &[core::fmt::rt::Argument<'_>; 3];
    let _87: [core::fmt::rt::Argument<'_>; 3];
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &u64;
    let _90: &u64;
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &u64;
    let _93: &u64;
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &u64;
    let _96: &u64;
    let _97: ();
    let mut _98: bool;
    let mut _99: u64;
    let mut _100: u64;
    let mut _101: bool;
    let mut _102: u64;
    let mut _103: u64;
    let mut _104: bool;
    let mut _105: u64;
    let mut _106: u64;
    let _107: ();
    let mut _108: bool;
    let mut _109: u64;
    let mut _110: u64;
    let _111: ();
    let mut _112: &str;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[&str; 4];
    let _121: &[&str; 4];
    let _122: [&str; 4];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let mut _124: &[core::fmt::rt::Argument<'_>; 3];
    let _125: &[core::fmt::rt::Argument<'_>; 3];
    let _126: [core::fmt::rt::Argument<'_>; 3];
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &u64;
    let _129: &u64;
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u64;
    let _132: &u64;
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: &u64;
    let _135: &u64;
    let _136: ();
    let mut _137: bool;
    let mut _138: u64;
    let mut _139: u64;
    let mut _140: bool;
    let mut _141: u64;
    let mut _142: u64;
    let mut _143: (bool, bool, bool, bool);
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: bool;
    scope 1 {
        debug oracle_price => _5;
        debug oracle_conf => _6;
        let _7: u64;
        let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _15: u64;
        scope 2 {
            debug oracle_price_u128 => _7;
            let _16: u64;
            let _17: u128;
            let _18: u128;
            let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _28: (u64, u128, u128);
            scope 7 {
                debug terminal_price_after => _16;
                debug _terminal_quote_reserves => _17;
                debug _terminal_base_reserves => _18;
                let mut _29: bool;
                scope 12 {
                    debug direction_valid => _29;
                    let mut _30: bool;
                    scope 13 {
                        debug price_impact_valid => _30;
                        let mut _31: bool;
                        scope 14 {
                            debug profitability_valid => _31;
                            let _34: u64;
                            let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _44: u64;
                            scope 15 {
                                debug reserve_price_after => _34;
                                let _45: u64;
                                let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _54: u64;
                                scope 20 {
                                    debug oracle_conf_band_top => _45;
                                    let _55: u64;
                                    let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _64: u64;
                                    scope 25 {
                                        debug oracle_conf_band_bottom => _55;
                                        scope 30 {
                                            let _78: std::string::String;
                                            let _117: std::string::String;
                                            let mut _148: &[&str; 4];
                                            let mut _149: &[&str; 4];
                                            scope 31 {
                                                debug res => _78;
                                            }
                                            scope 32 {
                                                debug res => _117;
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _61;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _64;
                                        scope 29 {
                                        }
                                    }
                                }
                                scope 21 {
                                    debug residual => _51;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _54;
                                    scope 24 {
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _41;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _44;
                                scope 19 {
                                }
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _25;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _28;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = ((*_2).0: i64);
        StorageLive(_6);
        _6 = ((*_2).1: u64);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _5;
        _9 = <i64 as Cast>::cast::<u64>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u64);
        _7 = _15;
        StorageDead(_15);
        StorageDead(_8);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_1).1: state::perp_market::AMM);
        _22 = &(*_23);
        _21 = calculate_terminal_price_and_reserves(move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(bool, bool, bool, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb72;
    }

    bb7: {
        StorageDead(_22);
        _20 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as Try>::branch(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: (u64, u128, u128));
        _19 = _28;
        StorageDead(_28);
        StorageLive(_16);
        _16 = (_19.0: u64);
        StorageLive(_17);
        _17 = (_19.1: u128);
        StorageLive(_18);
        _18 = (_19.2: u128);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_29);
        _29 = const true;
        StorageLive(_30);
        _30 = const true;
        StorageLive(_31);
        _31 = const true;
        StorageLive(_32);
        StorageLive(_33);
        _33 = _3;
        switchInt(move _33) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(bool, bool, bool, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb72;
    }

    bb12: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_38);
        _38 = (((*_1).1: state::perp_market::AMM).5: u128);
        StorageLive(_39);
        _39 = (((*_1).1: state::perp_market::AMM).11: u128);
        _36 = calculate_price(move _37, move _38, move _39) -> [return: bb14, unwind continue];
    }

    bb13: {
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const ();
        goto -> bb69;
    }

    bb14: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        _40 = discriminant(_35);
        switchInt(move _40) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_44);
        _44 = ((_35 as Continue).0: u64);
        _34 = _44;
        StorageDead(_44);
        StorageDead(_35);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _7;
        StorageLive(_49);
        _49 = _6;
        _47 = <u64 as SafeMath>::safe_add(move _48, move _49) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_41);
        _41 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(bool, bool, bool, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_35);
        goto -> bb71;
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _47) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_47);
        _50 = discriminant(_46);
        switchInt(move _50) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_54);
        _54 = ((_46 as Continue).0: u64);
        _45 = _54;
        StorageDead(_54);
        StorageDead(_46);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _7;
        StorageLive(_59);
        _59 = _6;
        _57 = <u64 as SafeMath>::safe_sub(move _58, move _59) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(bool, bool, bool, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_46);
        goto -> bb70;
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_57);
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_64);
        _64 = ((_56 as Continue).0: u64);
        _55 = _64;
        StorageDead(_64);
        StorageDead(_56);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _7;
        StorageLive(_67);
        _67 = _16;
        _65 = Gt(move _66, move _67);
        switchInt(move _65) -> [0: bb30, otherwise: bb29];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(bool, bool, bool, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb70;
    }

    bb29: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _16;
        StorageLive(_71);
        _71 = _4;
        _69 = Lt(move _70, move _71);
        switchInt(move _69) -> [0: bb40, otherwise: bb31];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _7;
        StorageLive(_106);
        _106 = _16;
        _104 = Lt(move _105, move _106);
        switchInt(move _104) -> [0: bb49, otherwise: bb48];
    }

    bb31: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _148 = const _;
        _82 = &(*_148);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_7;
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _89) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_4;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _92) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_92);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_16;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _95) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_95);
        _87 = [move _88, move _91, move _94];
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_85);
        _79 = Arguments::<'_>::new_v1(move _80, move _84) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_84);
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_79);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb37, unwind: bb75];
    }

    bb37: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb38, unwind: bb75];
    }

    bb38: {
        StorageDead(_73);
        drop(_77) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        _29 = const false;
        _68 = const ();
        goto -> bb41;
    }

    bb40: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = const ();
        goto -> bb41;
    }

    bb41: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _55;
        StorageLive(_100);
        _100 = _16;
        _98 = Lt(move _99, move _100);
        switchInt(move _98) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageDead(_100);
        StorageDead(_99);
        _31 = const false;
        _97 = const ();
        goto -> bb44;
    }

    bb43: {
        StorageDead(_100);
        StorageDead(_99);
        _97 = const ();
        goto -> bb44;
    }

    bb44: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _34;
        StorageLive(_103);
        _103 = _45;
        _101 = Gt(move _102, move _103);
        switchInt(move _101) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_103);
        StorageDead(_102);
        _30 = const false;
        _32 = const ();
        goto -> bb47;
    }

    bb46: {
        StorageDead(_103);
        StorageDead(_102);
        _32 = const ();
        goto -> bb47;
    }

    bb47: {
        StorageDead(_101);
        goto -> bb68;
    }

    bb48: {
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _16;
        StorageLive(_110);
        _110 = _4;
        _108 = Gt(move _109, move _110);
        switchInt(move _108) -> [0: bb59, otherwise: bb50];
    }

    bb49: {
        StorageDead(_106);
        StorageDead(_105);
        _32 = const ();
        goto -> bb67;
    }

    bb50: {
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _149 = const _;
        _121 = &(*_149);
        _120 = &(*_121);
        _119 = move _120 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_7;
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _128) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_4;
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _131) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_131);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &_16;
        _134 = &(*_135);
        _133 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _134) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_134);
        _126 = [move _127, move _130, move _133];
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_124);
        _118 = Arguments::<'_>::new_v1(move _119, move _123) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_123);
        StorageDead(_119);
        _117 = format(move _118) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_118);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        _116 = move _117;
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = <String as Deref>::deref(move _114) -> [return: bb56, unwind: bb74];
    }

    bb56: {
        _112 = &(*_113);
        StorageDead(_114);
        _111 = solana_program::log::sol_log(move _112) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        StorageDead(_112);
        drop(_116) -> [return: bb58, unwind: bb76];
    }

    bb58: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        _29 = const false;
        _107 = const ();
        goto -> bb60;
    }

    bb59: {
        StorageDead(_110);
        StorageDead(_109);
        _107 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = _45;
        StorageLive(_139);
        _139 = _16;
        _137 = Gt(move _138, move _139);
        switchInt(move _137) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_139);
        StorageDead(_138);
        _31 = const false;
        _136 = const ();
        goto -> bb63;
    }

    bb62: {
        StorageDead(_139);
        StorageDead(_138);
        _136 = const ();
        goto -> bb63;
    }

    bb63: {
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_140);
        StorageLive(_141);
        _141 = _34;
        StorageLive(_142);
        _142 = _55;
        _140 = Lt(move _141, move _142);
        switchInt(move _140) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_141);
        _30 = const false;
        _32 = const ();
        goto -> bb66;
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_141);
        _32 = const ();
        goto -> bb66;
    }

    bb66: {
        StorageDead(_140);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_104);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_65);
        StorageDead(_55);
        StorageDead(_45);
        StorageDead(_34);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _3;
        StorageLive(_145);
        _145 = _29;
        StorageLive(_146);
        _146 = _31;
        StorageLive(_147);
        _147 = _30;
        _143 = (move _144, move _145, move _146, move _147);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        _0 = std::result::Result::<(bool, bool, bool, bool), error::ErrorCode>::Ok(move _143);
        StorageDead(_143);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb73;
    }

    bb70: {
        StorageDead(_45);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb73;
    }

    bb73: {
        return;
    }

    bb74 (cleanup): {
        drop(_116) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_77) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        resume;
    }
}
