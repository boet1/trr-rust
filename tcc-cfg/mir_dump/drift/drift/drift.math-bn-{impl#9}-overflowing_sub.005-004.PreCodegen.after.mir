// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::overflowing_sub` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::overflowing_sub(_1: U256, _2: U256) -> (U256, bool) {
    debug self => _1;
    debug other => _2;
    let mut _0: (math::bn::U256, bool);
    let _3: &[u64; 4];
    let mut _7: *mut [u64; 4];
    let mut _8: &mut [u64; 4];
    let _10: ();
    let _11: ();
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u64;
    let mut _17: (u64, bool);
    let mut _18: u64;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: u64;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _28: (u64, bool);
    let mut _29: u64;
    let mut _30: u64;
    let _31: ();
    let mut _32: u64;
    let mut _33: *mut u64;
    let mut _34: *mut u64;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: u8;
    let mut _38: u8;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: bool;
    let mut _42: (u8, bool);
    let mut _45: (u64, bool);
    let mut _46: u64;
    let _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: u64;
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let _54: ();
    let mut _55: u64;
    let mut _56: *mut u64;
    let mut _57: *mut u64;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: bool;
    let _61: ();
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: u64;
    let mut _67: (u64, bool);
    let mut _68: u64;
    let _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _72: u64;
    let _73: usize;
    let mut _74: usize;
    let mut _75: bool;
    let mut _78: (u64, bool);
    let mut _79: u64;
    let mut _80: u64;
    let _81: ();
    let mut _82: u64;
    let mut _83: *mut u64;
    let mut _84: *mut u64;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: u8;
    let mut _88: u8;
    let mut _89: bool;
    let mut _90: u8;
    let mut _91: bool;
    let mut _92: (u8, bool);
    let mut _95: (u64, bool);
    let mut _96: u64;
    let _97: usize;
    let mut _98: usize;
    let mut _99: bool;
    let mut _100: u64;
    let _101: usize;
    let mut _102: usize;
    let mut _103: bool;
    let _104: ();
    let mut _105: u64;
    let mut _106: *mut u64;
    let mut _107: *mut u64;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: bool;
    let _111: ();
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: u64;
    let mut _117: (u64, bool);
    let mut _118: u64;
    let _119: usize;
    let mut _120: usize;
    let mut _121: bool;
    let mut _122: u64;
    let _123: usize;
    let mut _124: usize;
    let mut _125: bool;
    let mut _128: (u64, bool);
    let mut _129: u64;
    let mut _130: u64;
    let _131: ();
    let mut _132: u64;
    let mut _133: *mut u64;
    let mut _134: *mut u64;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: u8;
    let mut _138: u8;
    let mut _139: bool;
    let mut _140: u8;
    let mut _141: bool;
    let mut _142: (u8, bool);
    let mut _145: (u64, bool);
    let mut _146: u64;
    let _147: usize;
    let mut _148: usize;
    let mut _149: bool;
    let mut _150: u64;
    let _151: usize;
    let mut _152: usize;
    let mut _153: bool;
    let _154: ();
    let mut _155: u64;
    let mut _156: *mut u64;
    let mut _157: *mut u64;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: bool;
    let _161: ();
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: u64;
    let mut _167: (u64, bool);
    let mut _168: u64;
    let _169: usize;
    let mut _170: usize;
    let mut _171: bool;
    let mut _172: u64;
    let _173: usize;
    let mut _174: usize;
    let mut _175: bool;
    let mut _178: (u64, bool);
    let mut _179: u64;
    let mut _180: u64;
    let _181: ();
    let mut _182: u64;
    let mut _183: *mut u64;
    let mut _184: *mut u64;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: u8;
    let mut _188: u8;
    let mut _189: bool;
    let mut _190: u8;
    let mut _191: bool;
    let mut _192: (u8, bool);
    let mut _195: (u64, bool);
    let mut _196: u64;
    let _197: usize;
    let mut _198: usize;
    let mut _199: bool;
    let mut _200: u64;
    let _201: usize;
    let mut _202: usize;
    let mut _203: bool;
    let _204: ();
    let mut _205: u64;
    let mut _206: *mut u64;
    let mut _207: *mut u64;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: bool;
    let mut _211: math::bn::U256;
    let mut _212: [u64; 4];
    let mut _213: bool;
    let mut _214: u64;
    scope 1 {
        debug me => _3;
        let _4: &[u64; 4];
        scope 2 {
            debug you => _4;
            let mut _5: [u64; 4];
            scope 3 {
                debug ret => _5;
                let _6: *mut u64;
                scope 4 {
                    debug ret_ptr => _6;
                    let mut _9: u64;
                    scope 5 {
                        debug carry => _9;
                        scope 6 {
                            let _15: u64;
                            let _16: bool;
                            let _43: u64;
                            let _44: bool;
                            let _65: u64;
                            let _66: bool;
                            let _93: u64;
                            let _94: bool;
                            let _115: u64;
                            let _116: bool;
                            let _143: u64;
                            let _144: bool;
                            let _165: u64;
                            let _166: bool;
                            let _193: u64;
                            let _194: bool;
                            scope 7 {
                                debug res1 => _15;
                                debug overflow1 => _16;
                                let _26: u64;
                                let _27: bool;
                                scope 8 {
                                    debug res2 => _26;
                                    debug overflow2 => _27;
                                    scope 9 {
                                        let mut _257: *const ();
                                        let mut _258: usize;
                                        let mut _259: usize;
                                        let mut _260: usize;
                                        let mut _261: usize;
                                        let mut _262: bool;
                                    }
                                }
                            }
                            scope 10 {
                                debug res => _43;
                                debug overflow => _44;
                                scope 11 {
                                    let mut _251: *const ();
                                    let mut _252: usize;
                                    let mut _253: usize;
                                    let mut _254: usize;
                                    let mut _255: usize;
                                    let mut _256: bool;
                                }
                            }
                            scope 12 {
                                debug res1 => _65;
                                debug overflow1 => _66;
                                let _76: u64;
                                let _77: bool;
                                scope 13 {
                                    debug res2 => _76;
                                    debug overflow2 => _77;
                                    scope 14 {
                                        let mut _245: *const ();
                                        let mut _246: usize;
                                        let mut _247: usize;
                                        let mut _248: usize;
                                        let mut _249: usize;
                                        let mut _250: bool;
                                    }
                                }
                            }
                            scope 15 {
                                debug res => _93;
                                debug overflow => _94;
                                scope 16 {
                                    let mut _239: *const ();
                                    let mut _240: usize;
                                    let mut _241: usize;
                                    let mut _242: usize;
                                    let mut _243: usize;
                                    let mut _244: bool;
                                }
                            }
                            scope 17 {
                                debug res1 => _115;
                                debug overflow1 => _116;
                                let _126: u64;
                                let _127: bool;
                                scope 18 {
                                    debug res2 => _126;
                                    debug overflow2 => _127;
                                    scope 19 {
                                        let mut _233: *const ();
                                        let mut _234: usize;
                                        let mut _235: usize;
                                        let mut _236: usize;
                                        let mut _237: usize;
                                        let mut _238: bool;
                                    }
                                }
                            }
                            scope 20 {
                                debug res => _143;
                                debug overflow => _144;
                                scope 21 {
                                    let mut _227: *const ();
                                    let mut _228: usize;
                                    let mut _229: usize;
                                    let mut _230: usize;
                                    let mut _231: usize;
                                    let mut _232: bool;
                                }
                            }
                            scope 22 {
                                debug res1 => _165;
                                debug overflow1 => _166;
                                let _176: u64;
                                let _177: bool;
                                scope 23 {
                                    debug res2 => _176;
                                    debug overflow2 => _177;
                                    scope 24 {
                                        let mut _221: *const ();
                                        let mut _222: usize;
                                        let mut _223: usize;
                                        let mut _224: usize;
                                        let mut _225: usize;
                                        let mut _226: bool;
                                    }
                                }
                            }
                            scope 25 {
                                debug res => _193;
                                debug overflow => _194;
                                scope 26 {
                                    let mut _215: *const ();
                                    let mut _216: usize;
                                    let mut _217: usize;
                                    let mut _218: usize;
                                    let mut _219: usize;
                                    let mut _220: bool;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &(_1.0: [u64; 4]);
        StorageLive(_4);
        _4 = &(_2.0: [u64; 4]);
        StorageLive(_5);
        _5 = [const 0_u64; 4];
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut _5;
        _7 = &raw mut (*_8);
        _6 = move _7 as *mut u64 (PtrToPtr);
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_9);
        _9 = const 0_u64;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = Ge(const _, const 0_usize);
        switchInt(move _12) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        StorageLive(_13);
        StorageLive(_14);
        _14 = _9;
        _13 = Ne(move _14, const 0_u64);
        switchInt(move _13) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const _;
        _20 = Len((*_3));
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb3, unwind continue];
    }

    bb3: {
        _18 = (*_3)[_19];
        StorageLive(_22);
        StorageLive(_23);
        _23 = const _;
        _24 = Len((*_4));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb4, unwind continue];
    }

    bb4: {
        _22 = (*_4)[_23];
        _17 = core::num::<impl u64>::overflowing_sub(move _18, move _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_22);
        StorageDead(_18);
        StorageLive(_15);
        _15 = (_17.0: u64);
        StorageLive(_16);
        _16 = (_17.1: bool);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _15;
        StorageLive(_30);
        _30 = _9;
        _28 = core::num::<impl u64>::overflowing_sub(move _29, move _30) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_26);
        _26 = (_28.0: u64);
        StorageLive(_27);
        _27 = (_28.1: bool);
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _26;
        StorageLive(_33);
        StorageLive(_34);
        _34 = _6;
        StorageLive(_35);
        StorageLive(_36);
        _36 = const _ as isize (IntToInt);
        _35 = _36;
        _33 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _34, move _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_35);
        StorageDead(_34);
        _257 = _33 as *const () (PtrToPtr);
        _258 = _257 as usize (Transmute);
        _259 = AlignOf(u64);
        _260 = Sub(_259, const 1_usize);
        _261 = BitAnd(_258, _260);
        _262 = Eq(_261, const 0_usize);
        assert(_262, "misaligned pointer dereference: address must be a multiple of {} but is {}", _259, _258) -> [success: bb72, unwind unreachable];
    }

    bb8: {
        _37 = move (_42.0: u8);
        StorageDead(_40);
        StorageDead(_38);
        _9 = move _37 as u64 (IntToInt);
        StorageDead(_37);
        _11 = const ();
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_14);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = const _;
        _48 = Len((*_3));
        _49 = Lt(_47, _48);
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> [success: bb10, unwind continue];
    }

    bb10: {
        _46 = (*_3)[_47];
        StorageLive(_50);
        StorageLive(_51);
        _51 = const _;
        _52 = Len((*_4));
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> [success: bb11, unwind continue];
    }

    bb11: {
        _50 = (*_4)[_51];
        _45 = core::num::<impl u64>::overflowing_sub(move _46, move _50) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_43);
        _43 = (_45.0: u64);
        StorageLive(_44);
        _44 = (_45.1: bool);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _43;
        StorageLive(_56);
        StorageLive(_57);
        _57 = _6;
        StorageLive(_58);
        StorageLive(_59);
        _59 = const _ as isize (IntToInt);
        _58 = _59;
        _56 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _57, move _58) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_58);
        StorageDead(_57);
        _251 = _56 as *const () (PtrToPtr);
        _252 = _251 as usize (Transmute);
        _253 = AlignOf(u64);
        _254 = Sub(_253, const 1_usize);
        _255 = BitAnd(_252, _254);
        _256 = Eq(_255, const 0_usize);
        assert(_256, "misaligned pointer dereference: address must be a multiple of {} but is {}", _253, _252) -> [success: bb71, unwind unreachable];
    }

    bb14: {
        StorageDead(_13);
        goto -> bb16;
    }

    bb15: {
        _11 = const ();
        goto -> bb16;
    }

    bb16: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_61);
        StorageLive(_62);
        _62 = Ge(const _, const 0_usize);
        switchInt(move _62) -> [0: bb31, otherwise: bb17];
    }

    bb17: {
        StorageLive(_63);
        StorageLive(_64);
        _64 = _9;
        _63 = Ne(move _64, const 0_u64);
        switchInt(move _63) -> [0: bb25, otherwise: bb18];
    }

    bb18: {
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = const _;
        _70 = Len((*_3));
        _71 = Lt(_69, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb19, unwind continue];
    }

    bb19: {
        _68 = (*_3)[_69];
        StorageLive(_72);
        StorageLive(_73);
        _73 = const _;
        _74 = Len((*_4));
        _75 = Lt(_73, _74);
        assert(move _75, "index out of bounds: the length is {} but the index is {}", move _74, _73) -> [success: bb20, unwind continue];
    }

    bb20: {
        _72 = (*_4)[_73];
        _67 = core::num::<impl u64>::overflowing_sub(move _68, move _72) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_72);
        StorageDead(_68);
        StorageLive(_65);
        _65 = (_67.0: u64);
        StorageLive(_66);
        _66 = (_67.1: bool);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _65;
        StorageLive(_80);
        _80 = _9;
        _78 = core::num::<impl u64>::overflowing_sub(move _79, move _80) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_76);
        _76 = (_78.0: u64);
        StorageLive(_77);
        _77 = (_78.1: bool);
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _76;
        StorageLive(_83);
        StorageLive(_84);
        _84 = _6;
        StorageLive(_85);
        StorageLive(_86);
        _86 = const _ as isize (IntToInt);
        _85 = _86;
        _83 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _84, move _85) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_85);
        StorageDead(_84);
        _245 = _83 as *const () (PtrToPtr);
        _246 = _245 as usize (Transmute);
        _247 = AlignOf(u64);
        _248 = Sub(_247, const 1_usize);
        _249 = BitAnd(_246, _248);
        _250 = Eq(_249, const 0_usize);
        assert(_250, "misaligned pointer dereference: address must be a multiple of {} but is {}", _247, _246) -> [success: bb70, unwind unreachable];
    }

    bb24: {
        _87 = move (_92.0: u8);
        StorageDead(_90);
        StorageDead(_88);
        _9 = move _87 as u64 (IntToInt);
        StorageDead(_87);
        _61 = const ();
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb30;
    }

    bb25: {
        StorageDead(_64);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const _;
        _98 = Len((*_3));
        _99 = Lt(_97, _98);
        assert(move _99, "index out of bounds: the length is {} but the index is {}", move _98, _97) -> [success: bb26, unwind continue];
    }

    bb26: {
        _96 = (*_3)[_97];
        StorageLive(_100);
        StorageLive(_101);
        _101 = const _;
        _102 = Len((*_4));
        _103 = Lt(_101, _102);
        assert(move _103, "index out of bounds: the length is {} but the index is {}", move _102, _101) -> [success: bb27, unwind continue];
    }

    bb27: {
        _100 = (*_4)[_101];
        _95 = core::num::<impl u64>::overflowing_sub(move _96, move _100) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_100);
        StorageDead(_96);
        StorageLive(_93);
        _93 = (_95.0: u64);
        StorageLive(_94);
        _94 = (_95.1: bool);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _93;
        StorageLive(_106);
        StorageLive(_107);
        _107 = _6;
        StorageLive(_108);
        StorageLive(_109);
        _109 = const _ as isize (IntToInt);
        _108 = _109;
        _106 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _107, move _108) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_108);
        StorageDead(_107);
        _239 = _106 as *const () (PtrToPtr);
        _240 = _239 as usize (Transmute);
        _241 = AlignOf(u64);
        _242 = Sub(_241, const 1_usize);
        _243 = BitAnd(_240, _242);
        _244 = Eq(_243, const 0_usize);
        assert(_244, "misaligned pointer dereference: address must be a multiple of {} but is {}", _241, _240) -> [success: bb69, unwind unreachable];
    }

    bb30: {
        StorageDead(_63);
        goto -> bb32;
    }

    bb31: {
        _61 = const ();
        goto -> bb32;
    }

    bb32: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_111);
        StorageLive(_112);
        _112 = Ge(const _, const 0_usize);
        switchInt(move _112) -> [0: bb47, otherwise: bb33];
    }

    bb33: {
        StorageLive(_113);
        StorageLive(_114);
        _114 = _9;
        _113 = Ne(move _114, const 0_u64);
        switchInt(move _113) -> [0: bb41, otherwise: bb34];
    }

    bb34: {
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = const _;
        _120 = Len((*_3));
        _121 = Lt(_119, _120);
        assert(move _121, "index out of bounds: the length is {} but the index is {}", move _120, _119) -> [success: bb35, unwind continue];
    }

    bb35: {
        _118 = (*_3)[_119];
        StorageLive(_122);
        StorageLive(_123);
        _123 = const _;
        _124 = Len((*_4));
        _125 = Lt(_123, _124);
        assert(move _125, "index out of bounds: the length is {} but the index is {}", move _124, _123) -> [success: bb36, unwind continue];
    }

    bb36: {
        _122 = (*_4)[_123];
        _117 = core::num::<impl u64>::overflowing_sub(move _118, move _122) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_122);
        StorageDead(_118);
        StorageLive(_115);
        _115 = (_117.0: u64);
        StorageLive(_116);
        _116 = (_117.1: bool);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_117);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _115;
        StorageLive(_130);
        _130 = _9;
        _128 = core::num::<impl u64>::overflowing_sub(move _129, move _130) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_126);
        _126 = (_128.0: u64);
        StorageLive(_127);
        _127 = (_128.1: bool);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _126;
        StorageLive(_133);
        StorageLive(_134);
        _134 = _6;
        StorageLive(_135);
        StorageLive(_136);
        _136 = const _ as isize (IntToInt);
        _135 = _136;
        _133 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _134, move _135) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_135);
        StorageDead(_134);
        _233 = _133 as *const () (PtrToPtr);
        _234 = _233 as usize (Transmute);
        _235 = AlignOf(u64);
        _236 = Sub(_235, const 1_usize);
        _237 = BitAnd(_234, _236);
        _238 = Eq(_237, const 0_usize);
        assert(_238, "misaligned pointer dereference: address must be a multiple of {} but is {}", _235, _234) -> [success: bb68, unwind unreachable];
    }

    bb40: {
        _137 = move (_142.0: u8);
        StorageDead(_140);
        StorageDead(_138);
        _9 = move _137 as u64 (IntToInt);
        StorageDead(_137);
        _111 = const ();
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb46;
    }

    bb41: {
        StorageDead(_114);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = const _;
        _148 = Len((*_3));
        _149 = Lt(_147, _148);
        assert(move _149, "index out of bounds: the length is {} but the index is {}", move _148, _147) -> [success: bb42, unwind continue];
    }

    bb42: {
        _146 = (*_3)[_147];
        StorageLive(_150);
        StorageLive(_151);
        _151 = const _;
        _152 = Len((*_4));
        _153 = Lt(_151, _152);
        assert(move _153, "index out of bounds: the length is {} but the index is {}", move _152, _151) -> [success: bb43, unwind continue];
    }

    bb43: {
        _150 = (*_4)[_151];
        _145 = core::num::<impl u64>::overflowing_sub(move _146, move _150) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_150);
        StorageDead(_146);
        StorageLive(_143);
        _143 = (_145.0: u64);
        StorageLive(_144);
        _144 = (_145.1: bool);
        StorageDead(_151);
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_154);
        StorageLive(_155);
        _155 = _143;
        StorageLive(_156);
        StorageLive(_157);
        _157 = _6;
        StorageLive(_158);
        StorageLive(_159);
        _159 = const _ as isize (IntToInt);
        _158 = _159;
        _156 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _157, move _158) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_158);
        StorageDead(_157);
        _227 = _156 as *const () (PtrToPtr);
        _228 = _227 as usize (Transmute);
        _229 = AlignOf(u64);
        _230 = Sub(_229, const 1_usize);
        _231 = BitAnd(_228, _230);
        _232 = Eq(_231, const 0_usize);
        assert(_232, "misaligned pointer dereference: address must be a multiple of {} but is {}", _229, _228) -> [success: bb67, unwind unreachable];
    }

    bb46: {
        StorageDead(_113);
        goto -> bb48;
    }

    bb47: {
        _111 = const ();
        goto -> bb48;
    }

    bb48: {
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_161);
        StorageLive(_162);
        _162 = Ge(const _, const 0_usize);
        switchInt(move _162) -> [0: bb63, otherwise: bb49];
    }

    bb49: {
        StorageLive(_163);
        StorageLive(_164);
        _164 = _9;
        _163 = Ne(move _164, const 0_u64);
        switchInt(move _163) -> [0: bb57, otherwise: bb50];
    }

    bb50: {
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = const _;
        _170 = Len((*_3));
        _171 = Lt(_169, _170);
        assert(move _171, "index out of bounds: the length is {} but the index is {}", move _170, _169) -> [success: bb51, unwind continue];
    }

    bb51: {
        _168 = (*_3)[_169];
        StorageLive(_172);
        StorageLive(_173);
        _173 = const _;
        _174 = Len((*_4));
        _175 = Lt(_173, _174);
        assert(move _175, "index out of bounds: the length is {} but the index is {}", move _174, _173) -> [success: bb52, unwind continue];
    }

    bb52: {
        _172 = (*_4)[_173];
        _167 = core::num::<impl u64>::overflowing_sub(move _168, move _172) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_172);
        StorageDead(_168);
        StorageLive(_165);
        _165 = (_167.0: u64);
        StorageLive(_166);
        _166 = (_167.1: bool);
        StorageDead(_173);
        StorageDead(_169);
        StorageDead(_167);
        StorageLive(_178);
        StorageLive(_179);
        _179 = _165;
        StorageLive(_180);
        _180 = _9;
        _178 = core::num::<impl u64>::overflowing_sub(move _179, move _180) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_176);
        _176 = (_178.0: u64);
        StorageLive(_177);
        _177 = (_178.1: bool);
        StorageDead(_178);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _176;
        StorageLive(_183);
        StorageLive(_184);
        _184 = _6;
        StorageLive(_185);
        StorageLive(_186);
        _186 = const _ as isize (IntToInt);
        _185 = _186;
        _183 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _184, move _185) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_185);
        StorageDead(_184);
        _221 = _183 as *const () (PtrToPtr);
        _222 = _221 as usize (Transmute);
        _223 = AlignOf(u64);
        _224 = Sub(_223, const 1_usize);
        _225 = BitAnd(_222, _224);
        _226 = Eq(_225, const 0_usize);
        assert(_226, "misaligned pointer dereference: address must be a multiple of {} but is {}", _223, _222) -> [success: bb66, unwind unreachable];
    }

    bb56: {
        _187 = move (_192.0: u8);
        StorageDead(_190);
        StorageDead(_188);
        _9 = move _187 as u64 (IntToInt);
        StorageDead(_187);
        _161 = const ();
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_166);
        StorageDead(_165);
        goto -> bb62;
    }

    bb57: {
        StorageDead(_164);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = const _;
        _198 = Len((*_3));
        _199 = Lt(_197, _198);
        assert(move _199, "index out of bounds: the length is {} but the index is {}", move _198, _197) -> [success: bb58, unwind continue];
    }

    bb58: {
        _196 = (*_3)[_197];
        StorageLive(_200);
        StorageLive(_201);
        _201 = const _;
        _202 = Len((*_4));
        _203 = Lt(_201, _202);
        assert(move _203, "index out of bounds: the length is {} but the index is {}", move _202, _201) -> [success: bb59, unwind continue];
    }

    bb59: {
        _200 = (*_4)[_201];
        _195 = core::num::<impl u64>::overflowing_sub(move _196, move _200) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_200);
        StorageDead(_196);
        StorageLive(_193);
        _193 = (_195.0: u64);
        StorageLive(_194);
        _194 = (_195.1: bool);
        StorageDead(_201);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _193;
        StorageLive(_206);
        StorageLive(_207);
        _207 = _6;
        StorageLive(_208);
        StorageLive(_209);
        _209 = const _ as isize (IntToInt);
        _208 = _209;
        _206 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _207, move _208) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_208);
        StorageDead(_207);
        _215 = _206 as *const () (PtrToPtr);
        _216 = _215 as usize (Transmute);
        _217 = AlignOf(u64);
        _218 = Sub(_217, const 1_usize);
        _219 = BitAnd(_216, _218);
        _220 = Eq(_219, const 0_usize);
        assert(_220, "misaligned pointer dereference: address must be a multiple of {} but is {}", _217, _216) -> [success: bb65, unwind unreachable];
    }

    bb62: {
        StorageDead(_163);
        goto -> bb64;
    }

    bb63: {
        _161 = const ();
        goto -> bb64;
    }

    bb64: {
        StorageDead(_162);
        StorageDead(_161);
        _10 = const ();
        StorageDead(_10);
        StorageLive(_211);
        StorageLive(_212);
        _212 = _5;
        _211 = U256(move _212);
        StorageDead(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = _9;
        _213 = Gt(move _214, const 0_u64);
        StorageDead(_214);
        _0 = (move _211, move _213);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb65: {
        (*_206) = move _205;
        _204 = const ();
        StorageDead(_205);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_204);
        StorageLive(_210);
        _210 = _194;
        _9 = move _210 as u64 (IntToInt);
        StorageDead(_210);
        _161 = const ();
        StorageDead(_194);
        StorageDead(_193);
        goto -> bb62;
    }

    bb66: {
        (*_183) = move _182;
        _181 = const ();
        StorageDead(_182);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_181);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = _166;
        _188 = move _189 as u8 (IntToInt);
        StorageDead(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = _177;
        _190 = move _191 as u8 (IntToInt);
        StorageDead(_191);
        _192 = CheckedAdd(_188, _190);
        assert(!move (_192.1: bool), "attempt to compute `{} + {}`, which would overflow", move _188, move _190) -> [success: bb56, unwind continue];
    }

    bb67: {
        (*_156) = move _155;
        _154 = const ();
        StorageDead(_155);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_160);
        _160 = _144;
        _9 = move _160 as u64 (IntToInt);
        StorageDead(_160);
        _111 = const ();
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb46;
    }

    bb68: {
        (*_133) = move _132;
        _131 = const ();
        StorageDead(_132);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _116;
        _138 = move _139 as u8 (IntToInt);
        StorageDead(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = _127;
        _140 = move _141 as u8 (IntToInt);
        StorageDead(_141);
        _142 = CheckedAdd(_138, _140);
        assert(!move (_142.1: bool), "attempt to compute `{} + {}`, which would overflow", move _138, move _140) -> [success: bb40, unwind continue];
    }

    bb69: {
        (*_106) = move _105;
        _104 = const ();
        StorageDead(_105);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_104);
        StorageLive(_110);
        _110 = _94;
        _9 = move _110 as u64 (IntToInt);
        StorageDead(_110);
        _61 = const ();
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb30;
    }

    bb70: {
        (*_83) = move _82;
        _81 = const ();
        StorageDead(_82);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _66;
        _88 = move _89 as u8 (IntToInt);
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _77;
        _90 = move _91 as u8 (IntToInt);
        StorageDead(_91);
        _92 = CheckedAdd(_88, _90);
        assert(!move (_92.1: bool), "attempt to compute `{} + {}`, which would overflow", move _88, move _90) -> [success: bb24, unwind continue];
    }

    bb71: {
        (*_56) = move _55;
        _54 = const ();
        StorageDead(_55);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_54);
        StorageLive(_60);
        _60 = _44;
        _9 = move _60 as u64 (IntToInt);
        StorageDead(_60);
        _11 = const ();
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb14;
    }

    bb72: {
        (*_33) = move _32;
        _31 = const ();
        StorageDead(_32);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _16;
        _38 = move _39 as u8 (IntToInt);
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _27;
        _40 = move _41 as u8 (IntToInt);
        StorageDead(_41);
        _42 = CheckedAdd(_38, _40);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _40) -> [success: bb8, unwind continue];
    }
}
