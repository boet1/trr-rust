// MIR for `controller::liquidation::liquidate_spot` after PreCodegen

fn controller::liquidation::liquidate_spot(_1: u16, _2: u16, _3: u128, _4: Option<u64>, _5: &mut User, _6: &anchor_lang::prelude::Pubkey, _7: &mut UserStats, _8: &mut User, _9: &anchor_lang::prelude::Pubkey, _10: &mut UserStats, _11: &PerpMarketMap<'_>, _12: &SpotMarketMap<'_>, _13: &mut OracleMap<'_>, _14: i64, _15: u64, _16: &state::state::State) -> std::result::Result<(), error::ErrorCode> {
    debug asset_market_index => _1;
    debug liability_market_index => _2;
    debug liquidator_max_liability_transfer => _3;
    debug limit_price => _4;
    debug user => _5;
    debug user_key => _6;
    debug user_stats => _7;
    debug liquidator => _8;
    debug liquidator_key => _9;
    debug liquidator_stats => _10;
    debug perp_market_map => _11;
    debug spot_market_map => _12;
    debug oracle_map => _13;
    debug now => _14;
    debug slot => _15;
    debug state => _16;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _17: u32;
    let mut _19: u16;
    let mut _21: u8;
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _24: std::result::Result<(), error::ErrorCode>;
    let mut _25: bool;
    let mut _26: &state::user::User;
    let mut _27: ();
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 2];
    let _39: &[&str; 2];
    let _40: [&str; 2];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &error::ErrorCode;
    let _47: &error::ErrorCode;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[&str; 1];
    let _58: &[&str; 1];
    let _59: [&str; 1];
    let mut _60: error::ErrorCode;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _68: std::result::Result<(), error::ErrorCode>;
    let mut _69: bool;
    let mut _70: &state::user::User;
    let mut _71: ();
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &error::ErrorCode;
    let _91: &error::ErrorCode;
    let _92: ();
    let mut _93: &str;
    let _94: &str;
    let mut _95: &std::string::String;
    let _96: &std::string::String;
    let _97: std::string::String;
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str];
    let mut _101: &[&str; 1];
    let _102: &[&str; 1];
    let _103: [&str; 1];
    let mut _104: error::ErrorCode;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _112: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _113: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _114: &u16;
    let _115: &u16;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _123: std::result::Result<(), error::ErrorCode>;
    let mut _124: bool;
    let mut _125: &state::spot_market::SpotMarket;
    let _126: &state::spot_market::SpotMarket;
    let mut _127: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _128: state::paused_operations::SpotOperation;
    let mut _129: ();
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 2];
    let _141: &[&str; 2];
    let _142: [&str; 2];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: [core::fmt::rt::Argument<'_>; 1];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &error::ErrorCode;
    let _149: &error::ErrorCode;
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 1];
    let _160: &[&str; 1];
    let _161: [&str; 1];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &u16;
    let _168: &u16;
    let mut _169: error::ErrorCode;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _175: ();
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _177: std::result::Result<(), error::ErrorCode>;
    let mut _178: bool;
    let mut _179: u8;
    let mut _180: u8;
    let mut _181: &state::spot_market::SpotMarket;
    let mut _182: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _183: ();
    let _185: ();
    let mut _186: &str;
    let _187: &str;
    let mut _188: &std::string::String;
    let _189: &std::string::String;
    let _190: std::string::String;
    let mut _192: std::fmt::Arguments<'_>;
    let mut _193: &[&str];
    let mut _194: &[&str; 2];
    let _195: &[&str; 2];
    let _196: [&str; 2];
    let mut _197: &[core::fmt::rt::Argument<'_>];
    let mut _198: &[core::fmt::rt::Argument<'_>; 1];
    let _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: [core::fmt::rt::Argument<'_>; 1];
    let mut _201: core::fmt::rt::Argument<'_>;
    let mut _202: &error::ErrorCode;
    let _203: &error::ErrorCode;
    let _204: ();
    let mut _205: &str;
    let _206: &str;
    let mut _207: &std::string::String;
    let _208: &std::string::String;
    let _209: std::string::String;
    let mut _211: std::fmt::Arguments<'_>;
    let mut _212: &[&str];
    let mut _213: &[&str; 3];
    let _214: &[&str; 3];
    let _215: [&str; 3];
    let mut _216: &[core::fmt::rt::Argument<'_>];
    let mut _217: &[core::fmt::rt::Argument<'_>; 2];
    let _218: &[core::fmt::rt::Argument<'_>; 2];
    let _219: [core::fmt::rt::Argument<'_>; 2];
    let mut _220: core::fmt::rt::Argument<'_>;
    let mut _221: &u8;
    let _222: &u8;
    let mut _223: core::fmt::rt::Argument<'_>;
    let mut _224: &u8;
    let _225: &u8;
    let _226: &state::spot_market::SpotMarket;
    let mut _227: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _228: error::ErrorCode;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _234: ();
    let mut _235: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _238: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _239: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _240: &u16;
    let _241: &u16;
    let mut _242: isize;
    let mut _244: !;
    let mut _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _247: ();
    let mut _248: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _249: std::result::Result<(), error::ErrorCode>;
    let mut _250: bool;
    let mut _251: &state::spot_market::SpotMarket;
    let _252: &state::spot_market::SpotMarket;
    let mut _253: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _254: state::paused_operations::SpotOperation;
    let mut _255: ();
    let _257: ();
    let mut _258: &str;
    let _259: &str;
    let mut _260: &std::string::String;
    let _261: &std::string::String;
    let _262: std::string::String;
    let mut _264: std::fmt::Arguments<'_>;
    let mut _265: &[&str];
    let mut _266: &[&str; 2];
    let _267: &[&str; 2];
    let _268: [&str; 2];
    let mut _269: &[core::fmt::rt::Argument<'_>];
    let mut _270: &[core::fmt::rt::Argument<'_>; 1];
    let _271: &[core::fmt::rt::Argument<'_>; 1];
    let _272: [core::fmt::rt::Argument<'_>; 1];
    let mut _273: core::fmt::rt::Argument<'_>;
    let mut _274: &error::ErrorCode;
    let _275: &error::ErrorCode;
    let _276: ();
    let mut _277: &str;
    let _278: &str;
    let mut _279: &std::string::String;
    let _280: &std::string::String;
    let _281: std::string::String;
    let mut _283: std::fmt::Arguments<'_>;
    let mut _284: &[&str];
    let mut _285: &[&str; 1];
    let _286: &[&str; 1];
    let _287: [&str; 1];
    let mut _288: &[core::fmt::rt::Argument<'_>];
    let mut _289: &[core::fmt::rt::Argument<'_>; 1];
    let _290: &[core::fmt::rt::Argument<'_>; 1];
    let _291: [core::fmt::rt::Argument<'_>; 1];
    let mut _292: core::fmt::rt::Argument<'_>;
    let mut _293: &u16;
    let _294: &u16;
    let mut _295: error::ErrorCode;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _301: ();
    let mut _302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _303: std::result::Result<(), error::ErrorCode>;
    let mut _304: bool;
    let mut _305: u8;
    let mut _306: u8;
    let mut _307: &state::spot_market::SpotMarket;
    let mut _308: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _309: ();
    let _311: ();
    let mut _312: &str;
    let _313: &str;
    let mut _314: &std::string::String;
    let _315: &std::string::String;
    let _316: std::string::String;
    let mut _318: std::fmt::Arguments<'_>;
    let mut _319: &[&str];
    let mut _320: &[&str; 2];
    let _321: &[&str; 2];
    let _322: [&str; 2];
    let mut _323: &[core::fmt::rt::Argument<'_>];
    let mut _324: &[core::fmt::rt::Argument<'_>; 1];
    let _325: &[core::fmt::rt::Argument<'_>; 1];
    let _326: [core::fmt::rt::Argument<'_>; 1];
    let mut _327: core::fmt::rt::Argument<'_>;
    let mut _328: &error::ErrorCode;
    let _329: &error::ErrorCode;
    let _330: ();
    let mut _331: &str;
    let _332: &str;
    let mut _333: &std::string::String;
    let _334: &std::string::String;
    let _335: std::string::String;
    let mut _337: std::fmt::Arguments<'_>;
    let mut _338: &[&str];
    let mut _339: &[&str; 3];
    let _340: &[&str; 3];
    let _341: [&str; 3];
    let mut _342: &[core::fmt::rt::Argument<'_>];
    let mut _343: &[core::fmt::rt::Argument<'_>; 2];
    let _344: &[core::fmt::rt::Argument<'_>; 2];
    let _345: [core::fmt::rt::Argument<'_>; 2];
    let mut _346: core::fmt::rt::Argument<'_>;
    let mut _347: &u8;
    let _348: &u8;
    let mut _349: core::fmt::rt::Argument<'_>;
    let mut _350: &u8;
    let _351: &u8;
    let _352: &state::spot_market::SpotMarket;
    let mut _353: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _354: error::ErrorCode;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _360: ();
    let mut _361: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _362: &state::user::SpotPosition;
    let mut _363: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _364: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _365: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _366: &state::user::User;
    let mut _367: u16;
    let mut _368: {closure@programs/drift/src/controller/liquidation.rs:1233:56: 1233:59};
    let mut _369: &u16;
    let mut _370: isize;
    let mut _372: !;
    let mut _373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _375: &state::user::SpotPosition;
    let mut _376: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _377: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _378: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _379: &state::user::User;
    let mut _380: u16;
    let mut _381: {closure@programs/drift/src/controller/liquidation.rs:1242:18: 1242:21};
    let mut _382: &u16;
    let mut _383: isize;
    let mut _385: !;
    let mut _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _388: &mut state::user::SpotPosition;
    let mut _389: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _390: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _391: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _392: &mut state::user::User;
    let mut _393: u16;
    let mut _394: {closure@programs/drift/src/controller/liquidation.rs:1252:18: 1252:21};
    let mut _395: isize;
    let mut _397: !;
    let mut _398: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _400: &mut state::user::SpotPosition;
    let mut _401: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _402: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _403: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _404: &mut state::user::User;
    let mut _405: u16;
    let mut _406: {closure@programs/drift/src/controller/liquidation.rs:1259:18: 1259:21};
    let mut _407: isize;
    let mut _409: !;
    let mut _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _419: (u128, i64, u32, u32, u32, u8, i64);
    let mut _421: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _422: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _423: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _424: &u16;
    let _425: &u16;
    let mut _426: isize;
    let mut _428: !;
    let mut _429: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _433: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails)>;
    let mut _435: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let mut _436: &mut state::oracle_map::OracleMap<'_>;
    let mut _437: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _438: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _439: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _440: &state::spot_market::SpotMarket;
    let _441: &state::spot_market::SpotMarket;
    let mut _442: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _443: isize;
    let mut _445: !;
    let mut _446: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _448: ();
    let mut _449: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _450: std::result::Result<(), error::ErrorCode>;
    let mut _451: &mut state::spot_market::SpotMarket;
    let mut _452: &mut state::spot_market::SpotMarket;
    let mut _453: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _454: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _455: &state::oracle::OraclePriceData;
    let mut _456: &state::state::ValidityGuardRails;
    let mut _457: i64;
    let mut _458: std::option::Option<math::oracle::DriftAction>;
    let mut _459: math::oracle::DriftAction;
    let mut _460: isize;
    let mut _462: !;
    let mut _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _466: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _467: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _468: &state::user::User;
    let mut _469: u16;
    let mut _470: isize;
    let mut _472: !;
    let mut _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _475: ();
    let mut _476: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _477: std::result::Result<(), error::ErrorCode>;
    let mut _478: bool;
    let mut _479: &state::spot_market::SpotBalanceType;
    let mut _480: &state::spot_market::SpotBalanceType;
    let _481: state::spot_market::SpotBalanceType;
    let mut _482: ();
    let _484: ();
    let mut _485: &str;
    let _486: &str;
    let mut _487: &std::string::String;
    let _488: &std::string::String;
    let _489: std::string::String;
    let mut _491: std::fmt::Arguments<'_>;
    let mut _492: &[&str];
    let mut _493: &[&str; 2];
    let _494: &[&str; 2];
    let _495: [&str; 2];
    let mut _496: &[core::fmt::rt::Argument<'_>];
    let mut _497: &[core::fmt::rt::Argument<'_>; 1];
    let _498: &[core::fmt::rt::Argument<'_>; 1];
    let _499: [core::fmt::rt::Argument<'_>; 1];
    let mut _500: core::fmt::rt::Argument<'_>;
    let mut _501: &error::ErrorCode;
    let _502: &error::ErrorCode;
    let _503: ();
    let mut _504: &str;
    let _505: &str;
    let mut _506: error::ErrorCode;
    let mut _507: isize;
    let mut _509: !;
    let mut _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _513: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _514: std::result::Result<u128, error::ErrorCode>;
    let mut _515: &state::user::SpotPosition;
    let mut _516: &state::spot_market::SpotMarket;
    let _517: &state::spot_market::SpotMarket;
    let mut _518: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _519: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _520: isize;
    let mut _522: !;
    let mut _523: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _525: ();
    let mut _526: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _527: std::result::Result<(), error::ErrorCode>;
    let mut _528: bool;
    let mut _529: u128;
    let mut _530: ();
    let _532: ();
    let mut _533: &str;
    let _534: &str;
    let mut _535: &std::string::String;
    let _536: &std::string::String;
    let _537: std::string::String;
    let mut _539: std::fmt::Arguments<'_>;
    let mut _540: &[&str];
    let mut _541: &[&str; 2];
    let _542: &[&str; 2];
    let _543: [&str; 2];
    let mut _544: &[core::fmt::rt::Argument<'_>];
    let mut _545: &[core::fmt::rt::Argument<'_>; 1];
    let _546: &[core::fmt::rt::Argument<'_>; 1];
    let _547: [core::fmt::rt::Argument<'_>; 1];
    let mut _548: core::fmt::rt::Argument<'_>;
    let mut _549: &error::ErrorCode;
    let _550: &error::ErrorCode;
    let _551: ();
    let mut _552: &str;
    let _553: &str;
    let mut _554: &std::string::String;
    let _555: &std::string::String;
    let _556: std::string::String;
    let mut _558: std::fmt::Arguments<'_>;
    let mut _559: &[&str];
    let mut _560: &[&str; 1];
    let _561: &[&str; 1];
    let _562: [&str; 1];
    let mut _563: &[core::fmt::rt::Argument<'_>];
    let mut _564: &[core::fmt::rt::Argument<'_>; 1];
    let _565: &[core::fmt::rt::Argument<'_>; 1];
    let _566: [core::fmt::rt::Argument<'_>; 1];
    let mut _567: core::fmt::rt::Argument<'_>;
    let mut _568: &u16;
    let _569: &u16;
    let mut _570: error::ErrorCode;
    let mut _571: isize;
    let mut _573: !;
    let mut _574: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _577: u128;
    let mut _578: i64;
    let mut _579: u32;
    let mut _580: &state::spot_market::SpotMarket;
    let mut _581: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _582: u32;
    let mut _583: &state::spot_market::SpotMarket;
    let mut _584: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _585: u32;
    let mut _586: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _587: std::result::Result<u32, error::ErrorCode>;
    let mut _588: u32;
    let mut _589: &state::spot_market::SpotMarket;
    let mut _590: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _591: math::liquidation::LiquidationMultiplierType;
    let mut _592: isize;
    let mut _594: !;
    let mut _595: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _597: u8;
    let mut _598: &state::spot_market::SpotMarket;
    let mut _599: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _600: i64;
    let mut _608: (u128, i64, u32, u32, u32, u8, i64);
    let mut _610: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _611: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _612: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _613: &u16;
    let _614: &u16;
    let mut _615: isize;
    let mut _617: !;
    let mut _618: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _622: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _623: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails)>;
    let mut _624: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let mut _625: &mut state::oracle_map::OracleMap<'_>;
    let mut _626: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _627: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _628: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _629: &state::spot_market::SpotMarket;
    let _630: &state::spot_market::SpotMarket;
    let mut _631: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _632: isize;
    let mut _634: !;
    let mut _635: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _637: ();
    let mut _638: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _639: std::result::Result<(), error::ErrorCode>;
    let mut _640: &mut state::spot_market::SpotMarket;
    let mut _641: &mut state::spot_market::SpotMarket;
    let mut _642: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _643: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _644: &state::oracle::OraclePriceData;
    let mut _645: &state::state::ValidityGuardRails;
    let mut _646: i64;
    let mut _647: std::option::Option<math::oracle::DriftAction>;
    let mut _648: math::oracle::DriftAction;
    let mut _649: isize;
    let mut _651: !;
    let mut _652: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _655: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _656: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _657: &state::user::User;
    let mut _658: u16;
    let mut _659: isize;
    let mut _661: !;
    let mut _662: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _664: ();
    let mut _665: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _666: std::result::Result<(), error::ErrorCode>;
    let mut _667: bool;
    let mut _668: &state::spot_market::SpotBalanceType;
    let mut _669: &state::spot_market::SpotBalanceType;
    let _670: state::spot_market::SpotBalanceType;
    let mut _671: ();
    let _673: ();
    let mut _674: &str;
    let _675: &str;
    let mut _676: &std::string::String;
    let _677: &std::string::String;
    let _678: std::string::String;
    let mut _680: std::fmt::Arguments<'_>;
    let mut _681: &[&str];
    let mut _682: &[&str; 2];
    let _683: &[&str; 2];
    let _684: [&str; 2];
    let mut _685: &[core::fmt::rt::Argument<'_>];
    let mut _686: &[core::fmt::rt::Argument<'_>; 1];
    let _687: &[core::fmt::rt::Argument<'_>; 1];
    let _688: [core::fmt::rt::Argument<'_>; 1];
    let mut _689: core::fmt::rt::Argument<'_>;
    let mut _690: &error::ErrorCode;
    let _691: &error::ErrorCode;
    let _692: ();
    let mut _693: &str;
    let _694: &str;
    let mut _695: error::ErrorCode;
    let mut _696: isize;
    let mut _698: !;
    let mut _699: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _702: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _703: std::result::Result<u128, error::ErrorCode>;
    let mut _704: &state::user::SpotPosition;
    let mut _705: &state::spot_market::SpotMarket;
    let _706: &state::spot_market::SpotMarket;
    let mut _707: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _708: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _709: isize;
    let mut _711: !;
    let mut _712: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _714: ();
    let mut _715: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _716: std::result::Result<(), error::ErrorCode>;
    let mut _717: bool;
    let mut _718: u128;
    let mut _719: ();
    let _721: ();
    let mut _722: &str;
    let _723: &str;
    let mut _724: &std::string::String;
    let _725: &std::string::String;
    let _726: std::string::String;
    let mut _728: std::fmt::Arguments<'_>;
    let mut _729: &[&str];
    let mut _730: &[&str; 2];
    let _731: &[&str; 2];
    let _732: [&str; 2];
    let mut _733: &[core::fmt::rt::Argument<'_>];
    let mut _734: &[core::fmt::rt::Argument<'_>; 1];
    let _735: &[core::fmt::rt::Argument<'_>; 1];
    let _736: [core::fmt::rt::Argument<'_>; 1];
    let mut _737: core::fmt::rt::Argument<'_>;
    let mut _738: &error::ErrorCode;
    let _739: &error::ErrorCode;
    let _740: ();
    let mut _741: &str;
    let _742: &str;
    let mut _743: &std::string::String;
    let _744: &std::string::String;
    let _745: std::string::String;
    let mut _747: std::fmt::Arguments<'_>;
    let mut _748: &[&str];
    let mut _749: &[&str; 1];
    let _750: &[&str; 1];
    let _751: [&str; 1];
    let mut _752: &[core::fmt::rt::Argument<'_>];
    let mut _753: &[core::fmt::rt::Argument<'_>; 1];
    let _754: &[core::fmt::rt::Argument<'_>; 1];
    let _755: [core::fmt::rt::Argument<'_>; 1];
    let mut _756: core::fmt::rt::Argument<'_>;
    let mut _757: &u16;
    let _758: &u16;
    let mut _759: error::ErrorCode;
    let mut _760: isize;
    let mut _762: !;
    let mut _763: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _766: u128;
    let mut _767: i64;
    let mut _768: u32;
    let mut _769: &state::spot_market::SpotMarket;
    let mut _770: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _771: u32;
    let mut _772: &state::spot_market::SpotMarket;
    let mut _773: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _774: u32;
    let mut _775: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _776: std::result::Result<u32, error::ErrorCode>;
    let mut _777: u32;
    let mut _778: &state::spot_market::SpotMarket;
    let mut _779: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _780: math::liquidation::LiquidationMultiplierType;
    let mut _781: isize;
    let mut _783: !;
    let mut _784: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _786: u8;
    let mut _787: &state::spot_market::SpotMarket;
    let mut _788: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _789: i64;
    let _790: ();
    let mut _791: bool;
    let mut _792: u8;
    let mut _793: bool;
    let mut _794: u8;
    let _795: ();
    let mut _796: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _797: std::result::Result<(), error::ErrorCode>;
    let mut _798: bool;
    let mut _799: i64;
    let mut _800: bool;
    let mut _801: i64;
    let mut _802: ();
    let _804: ();
    let mut _805: &str;
    let _806: &str;
    let mut _807: &std::string::String;
    let _808: &std::string::String;
    let _809: std::string::String;
    let mut _811: std::fmt::Arguments<'_>;
    let mut _812: &[&str];
    let mut _813: &[&str; 2];
    let _814: &[&str; 2];
    let _815: [&str; 2];
    let mut _816: &[core::fmt::rt::Argument<'_>];
    let mut _817: &[core::fmt::rt::Argument<'_>; 1];
    let _818: &[core::fmt::rt::Argument<'_>; 1];
    let _819: [core::fmt::rt::Argument<'_>; 1];
    let mut _820: core::fmt::rt::Argument<'_>;
    let mut _821: &error::ErrorCode;
    let _822: &error::ErrorCode;
    let _823: ();
    let mut _824: &str;
    let _825: &str;
    let mut _826: &std::string::String;
    let _827: &std::string::String;
    let _828: std::string::String;
    let mut _830: std::fmt::Arguments<'_>;
    let mut _831: &[&str];
    let mut _832: &[&str; 3];
    let _833: &[&str; 3];
    let _834: [&str; 3];
    let mut _835: &[core::fmt::rt::Argument<'_>];
    let mut _836: &[core::fmt::rt::Argument<'_>; 2];
    let _837: &[core::fmt::rt::Argument<'_>; 2];
    let _838: [core::fmt::rt::Argument<'_>; 2];
    let mut _839: core::fmt::rt::Argument<'_>;
    let mut _840: &i64;
    let _841: &i64;
    let mut _842: core::fmt::rt::Argument<'_>;
    let mut _843: &i64;
    let _844: &i64;
    let mut _845: error::ErrorCode;
    let mut _846: isize;
    let mut _848: !;
    let mut _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _852: state::margin_calculation::MarginContext;
    let mut _853: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _854: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _855: state::margin_calculation::MarginContext;
    let mut _856: u32;
    let mut _857: state::margin_calculation::MarketIdentifier;
    let mut _858: u16;
    let mut _859: isize;
    let mut _861: !;
    let mut _862: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _864: &state::user::User;
    let mut _865: i64;
    let mut _867: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _868: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _869: &mut state::user::User;
    let mut _870: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _871: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _872: &mut state::oracle_map::OracleMap<'_>;
    let mut _873: state::margin_calculation::MarginContext;
    let mut _874: &mut state::user::UserStats;
    let mut _875: i64;
    let mut _876: isize;
    let mut _878: !;
    let mut _879: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _881: ();
    let mut _882: bool;
    let mut _883: &state::user::User;
    let mut _884: bool;
    let mut _885: &state::margin_calculation::MarginCalculation;
    let mut _886: !;
    let _887: ();
    let mut _888: &str;
    let _889: &str;
    let mut _890: &std::string::String;
    let _891: &std::string::String;
    let _892: std::string::String;
    let mut _894: std::fmt::Arguments<'_>;
    let mut _895: &[&str];
    let mut _896: &[&str; 1];
    let _897: &[&str; 1];
    let _898: [&str; 1];
    let mut _899: &[core::fmt::rt::Argument<'_>];
    let mut _900: &[core::fmt::rt::Argument<'_>; 1];
    let _901: &[core::fmt::rt::Argument<'_>; 1];
    let _902: [core::fmt::rt::Argument<'_>; 1];
    let mut _903: core::fmt::rt::Argument<'_>;
    let mut _904: &state::margin_calculation::MarginCalculation;
    let _905: &state::margin_calculation::MarginCalculation;
    let mut _906: error::ErrorCode;
    let mut _907: bool;
    let mut _908: &state::user::User;
    let mut _909: bool;
    let mut _910: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _911: std::result::Result<bool, error::ErrorCode>;
    let mut _912: &state::margin_calculation::MarginCalculation;
    let mut _913: isize;
    let mut _915: !;
    let mut _916: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _918: !;
    let _919: ();
    let mut _920: &mut state::user::User;
    let mut _921: ();
    let mut _923: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _924: std::result::Result<u16, error::ErrorCode>;
    let mut _925: &mut state::user::User;
    let mut _926: u64;
    let mut _927: isize;
    let mut _929: !;
    let mut _930: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _934: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _935: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _936: &mut state::user::User;
    let mut _937: &anchor_lang::prelude::Pubkey;
    let mut _938: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _939: &anchor_lang::prelude::Pubkey;
    let mut _940: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _941: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _942: &mut state::oracle_map::OracleMap<'_>;
    let mut _943: i64;
    let mut _944: u64;
    let mut _945: state::events::OrderActionExplanation;
    let mut _946: std::option::Option<state::user::MarketType>;
    let mut _947: std::option::Option<u16>;
    let mut _948: std::option::Option<controller::position::PositionDirection>;
    let mut _949: isize;
    let mut _951: !;
    let mut _952: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _955: bool;
    let mut _956: &std::vec::Vec<u32>;
    let mut _958: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _959: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _960: &state::user::User;
    let mut _961: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _962: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _963: &mut state::oracle_map::OracleMap<'_>;
    let mut _964: state::margin_calculation::MarginContext;
    let mut _965: state::margin_calculation::MarginContext;
    let mut _966: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _967: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _968: state::margin_calculation::MarginContext;
    let mut _969: u32;
    let mut _970: state::margin_calculation::MarketIdentifier;
    let mut _971: u16;
    let mut _972: isize;
    let mut _974: !;
    let mut _975: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _977: &state::user::User;
    let mut _978: i64;
    let mut _979: isize;
    let mut _981: !;
    let mut _982: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _985: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _986: std::result::Result<u128, error::ErrorCode>;
    let mut _987: &state::margin_calculation::MarginCalculation;
    let mut _988: isize;
    let mut _990: !;
    let mut _991: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _994: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _995: std::result::Result<u128, error::ErrorCode>;
    let mut _996: &state::margin_calculation::MarginCalculation;
    let mut _997: isize;
    let mut _999: !;
    let mut _1000: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1002: u64;
    let mut _1003: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1004: std::result::Result<u64, error::ErrorCode>;
    let mut _1005: u128;
    let mut _1006: u128;
    let mut _1007: u128;
    let mut _1008: isize;
    let mut _1010: !;
    let mut _1011: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1013: ();
    let mut _1014: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1015: std::result::Result<(), error::ErrorCode>;
    let mut _1016: &mut state::user::User;
    let mut _1017: u64;
    let mut _1018: isize;
    let mut _1020: !;
    let mut _1021: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1023: ();
    let mut _1024: bool;
    let mut _1025: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1026: std::result::Result<bool, error::ErrorCode>;
    let mut _1027: &state::margin_calculation::MarginCalculation;
    let mut _1028: isize;
    let mut _1030: !;
    let mut _1031: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1033: !;
    let _1034: ();
    let _1035: ();
    let mut _1036: &[&[u8]];
    let mut _1037: &[&[u8]; 1];
    let _1038: &[&[u8]; 1];
    let _1039: [&[u8]; 1];
    let mut _1040: &[u8];
    let _1041: &[u8];
    let mut _1042: &std::vec::Vec<u8>;
    let _1043: &std::vec::Vec<u8>;
    let _1044: std::vec::Vec<u8>;
    let mut _1045: &state::events::LiquidationRecord;
    let _1046: &state::events::LiquidationRecord;
    let _1047: state::events::LiquidationRecord;
    let mut _1048: i64;
    let mut _1049: u16;
    let mut _1050: state::events::LiquidationType;
    let mut _1051: anchor_lang::prelude::Pubkey;
    let mut _1052: anchor_lang::prelude::Pubkey;
    let mut _1053: u128;
    let mut _1054: i128;
    let mut _1055: bool;
    let mut _1056: &state::user::User;
    let mut _1057: std::vec::Vec<u32>;
    let mut _1058: u64;
    let mut _1059: state::events::LiquidateSpotRecord;
    let mut _1060: u16;
    let mut _1061: i64;
    let mut _1062: u16;
    let mut _1063: i64;
    let mut _1064: state::events::LiquidationRecord;
    let _1065: ();
    let mut _1066: &mut state::user::User;
    let mut _1067: ();
    let mut _1069: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1070: std::result::Result<u128, error::ErrorCode>;
    let mut _1071: &state::margin_calculation::MarginCalculation;
    let mut _1072: isize;
    let mut _1074: !;
    let mut _1075: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1078: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _1079: std::result::Result<u32, error::ErrorCode>;
    let mut _1080: u32;
    let mut _1081: u32;
    let mut _1082: isize;
    let mut _1084: !;
    let mut _1085: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1088: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _1089: std::result::Result<u32, error::ErrorCode>;
    let mut _1090: u128;
    let mut _1091: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1092: std::result::Result<u128, error::ErrorCode>;
    let mut _1093: &state::margin_calculation::MarginCalculation;
    let mut _1094: u128;
    let mut _1095: isize;
    let mut _1097: !;
    let mut _1098: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1100: u128;
    let mut _1101: u32;
    let mut _1102: u32;
    let mut _1103: u32;
    let mut _1104: u32;
    let mut _1105: u32;
    let mut _1106: i64;
    let mut _1107: u32;
    let mut _1108: &state::spot_market::SpotMarket;
    let mut _1109: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1110: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1112: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1113: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1114: &u16;
    let _1115: &u16;
    let mut _1116: isize;
    let mut _1118: !;
    let mut _1119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1121: isize;
    let mut _1123: !;
    let mut _1124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1128: std::result::Result<u128, error::ErrorCode>;
    let mut _1129: u128;
    let mut _1130: u32;
    let mut _1131: u32;
    let mut _1132: u32;
    let mut _1133: u32;
    let mut _1134: u32;
    let mut _1135: i64;
    let mut _1136: u32;
    let mut _1137: isize;
    let mut _1139: !;
    let mut _1140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1144: std::result::Result<u128, error::ErrorCode>;
    let mut _1145: &state::user::User;
    let mut _1146: u128;
    let mut _1147: u64;
    let mut _1148: u128;
    let mut _1149: u128;
    let mut _1150: isize;
    let mut _1152: !;
    let mut _1153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1157: std::result::Result<u128, error::ErrorCode>;
    let mut _1158: u128;
    let mut _1159: u128;
    let mut _1160: u128;
    let mut _1161: isize;
    let mut _1163: !;
    let mut _1164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1166: ();
    let mut _1167: bool;
    let mut _1168: u128;
    let mut _1169: !;
    let _1170: ();
    let mut _1171: &str;
    let _1172: &str;
    let mut _1173: ();
    let mut _1175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1176: std::result::Result<u128, error::ErrorCode>;
    let mut _1177: u128;
    let mut _1178: u32;
    let mut _1179: u32;
    let mut _1180: i64;
    let mut _1181: u32;
    let mut _1182: u32;
    let mut _1183: i64;
    let mut _1184: isize;
    let mut _1186: !;
    let mut _1187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1191: std::result::Result<i128, error::ErrorCode>;
    let mut _1192: i128;
    let mut _1193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1194: std::result::Result<i128, error::ErrorCode>;
    let mut _1195: u128;
    let mut _1196: isize;
    let mut _1198: !;
    let mut _1199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1201: u32;
    let mut _1202: i64;
    let mut _1203: isize;
    let mut _1205: !;
    let mut _1206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1209: bool;
    let mut _1210: i128;
    let mut _1211: i128;
    let mut _1212: (i128, bool);
    let mut _1214: u128;
    let mut _1215: u128;
    let mut _1216: u128;
    let mut _1217: u128;
    let mut _1218: u128;
    let mut _1219: u128;
    let mut _1220: u128;
    let mut _1221: u128;
    let mut _1223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1224: std::result::Result<u128, error::ErrorCode>;
    let mut _1225: u128;
    let mut _1226: u32;
    let mut _1227: u32;
    let mut _1228: i64;
    let mut _1229: u128;
    let mut _1230: u32;
    let mut _1231: u32;
    let mut _1232: i64;
    let mut _1233: isize;
    let mut _1235: !;
    let mut _1236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1238: ();
    let mut _1239: bool;
    let mut _1240: u128;
    let mut _1241: bool;
    let mut _1242: u128;
    let mut _1243: !;
    let _1244: ();
    let mut _1245: &str;
    let _1246: &str;
    let mut _1247: &std::string::String;
    let _1248: &std::string::String;
    let _1249: std::string::String;
    let mut _1251: std::fmt::Arguments<'_>;
    let mut _1252: &[&str];
    let mut _1253: &[&str; 2];
    let _1254: &[&str; 2];
    let _1255: [&str; 2];
    let mut _1256: &[core::fmt::rt::Argument<'_>];
    let mut _1257: &[core::fmt::rt::Argument<'_>; 2];
    let _1258: &[core::fmt::rt::Argument<'_>; 2];
    let _1259: [core::fmt::rt::Argument<'_>; 2];
    let mut _1260: core::fmt::rt::Argument<'_>;
    let mut _1261: &u16;
    let _1262: &u16;
    let mut _1263: core::fmt::rt::Argument<'_>;
    let mut _1264: &u16;
    let _1265: &u16;
    let _1266: ();
    let mut _1267: &str;
    let _1268: &str;
    let mut _1269: &std::string::String;
    let _1270: &std::string::String;
    let _1271: std::string::String;
    let mut _1273: std::fmt::Arguments<'_>;
    let mut _1274: &[&str];
    let mut _1275: &[&str; 3];
    let _1276: &[&str; 3];
    let _1277: [&str; 3];
    let mut _1278: &[core::fmt::rt::Argument<'_>];
    let mut _1279: &[core::fmt::rt::Argument<'_>; 3];
    let _1280: &[core::fmt::rt::Argument<'_>; 3];
    let _1281: [core::fmt::rt::Argument<'_>; 3];
    let mut _1282: core::fmt::rt::Argument<'_>;
    let mut _1283: &u128;
    let _1284: &u128;
    let mut _1285: core::fmt::rt::Argument<'_>;
    let mut _1286: &u128;
    let _1287: &u128;
    let mut _1288: core::fmt::rt::Argument<'_>;
    let mut _1289: &u128;
    let _1290: &u128;
    let _1291: ();
    let mut _1292: &str;
    let _1293: &str;
    let mut _1294: &std::string::String;
    let _1295: &std::string::String;
    let _1296: std::string::String;
    let mut _1298: std::fmt::Arguments<'_>;
    let mut _1299: &[&str];
    let mut _1300: &[&str; 3];
    let _1301: &[&str; 3];
    let _1302: [&str; 3];
    let mut _1303: &[core::fmt::rt::Argument<'_>];
    let mut _1304: &[core::fmt::rt::Argument<'_>; 3];
    let _1305: &[core::fmt::rt::Argument<'_>; 3];
    let _1306: [core::fmt::rt::Argument<'_>; 3];
    let mut _1307: core::fmt::rt::Argument<'_>;
    let mut _1308: &u128;
    let _1309: &u128;
    let mut _1310: core::fmt::rt::Argument<'_>;
    let mut _1311: &u128;
    let _1312: &u128;
    let mut _1313: core::fmt::rt::Argument<'_>;
    let mut _1314: &u128;
    let _1315: &u128;
    let mut _1316: error::ErrorCode;
    let mut _1318: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1319: std::result::Result<bool, error::ErrorCode>;
    let mut _1320: i64;
    let mut _1321: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1322: std::result::Result<i64, error::ErrorCode>;
    let mut _1323: i64;
    let mut _1324: isize;
    let mut _1326: !;
    let mut _1327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1329: i64;
    let mut _1330: &state::spot_market::SpotMarket;
    let mut _1331: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1332: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1334: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1335: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1336: &u16;
    let _1337: &u16;
    let mut _1338: isize;
    let mut _1340: !;
    let mut _1341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1343: i64;
    let mut _1344: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1345: std::result::Result<i64, error::ErrorCode>;
    let mut _1346: u64;
    let mut _1347: &state::state::OracleGuardRails;
    let mut _1348: isize;
    let mut _1350: !;
    let mut _1351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1353: isize;
    let mut _1355: !;
    let mut _1356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1358: ();
    let mut _1359: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1360: std::result::Result<(), error::ErrorCode>;
    let mut _1361: bool;
    let mut _1362: ();
    let _1364: ();
    let mut _1365: &str;
    let _1366: &str;
    let mut _1367: &std::string::String;
    let _1368: &std::string::String;
    let _1369: std::string::String;
    let mut _1371: std::fmt::Arguments<'_>;
    let mut _1372: &[&str];
    let mut _1373: &[&str; 2];
    let _1374: &[&str; 2];
    let _1375: [&str; 2];
    let mut _1376: &[core::fmt::rt::Argument<'_>];
    let mut _1377: &[core::fmt::rt::Argument<'_>; 1];
    let _1378: &[core::fmt::rt::Argument<'_>; 1];
    let _1379: [core::fmt::rt::Argument<'_>; 1];
    let mut _1380: core::fmt::rt::Argument<'_>;
    let mut _1381: &error::ErrorCode;
    let _1382: &error::ErrorCode;
    let _1383: ();
    let mut _1384: &str;
    let _1385: &str;
    let mut _1386: error::ErrorCode;
    let mut _1387: isize;
    let mut _1389: !;
    let mut _1390: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1393: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1394: std::result::Result<bool, error::ErrorCode>;
    let mut _1395: i64;
    let mut _1396: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1397: std::result::Result<i64, error::ErrorCode>;
    let mut _1398: i64;
    let mut _1399: isize;
    let mut _1401: !;
    let mut _1402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1404: i64;
    let mut _1405: &state::spot_market::SpotMarket;
    let mut _1406: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1407: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1408: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1409: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1410: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1411: &u16;
    let _1412: &u16;
    let mut _1413: isize;
    let mut _1415: !;
    let mut _1416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1418: i64;
    let mut _1419: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1420: std::result::Result<i64, error::ErrorCode>;
    let mut _1421: u64;
    let mut _1422: &state::state::OracleGuardRails;
    let mut _1423: isize;
    let mut _1425: !;
    let mut _1426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1428: isize;
    let mut _1430: !;
    let mut _1431: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1433: ();
    let mut _1434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1435: std::result::Result<(), error::ErrorCode>;
    let mut _1436: bool;
    let mut _1437: ();
    let _1439: ();
    let mut _1440: &str;
    let _1441: &str;
    let mut _1442: &std::string::String;
    let _1443: &std::string::String;
    let _1444: std::string::String;
    let mut _1446: std::fmt::Arguments<'_>;
    let mut _1447: &[&str];
    let mut _1448: &[&str; 2];
    let _1449: &[&str; 2];
    let _1450: [&str; 2];
    let mut _1451: &[core::fmt::rt::Argument<'_>];
    let mut _1452: &[core::fmt::rt::Argument<'_>; 1];
    let _1453: &[core::fmt::rt::Argument<'_>; 1];
    let _1454: [core::fmt::rt::Argument<'_>; 1];
    let mut _1455: core::fmt::rt::Argument<'_>;
    let mut _1456: &error::ErrorCode;
    let _1457: &error::ErrorCode;
    let _1458: ();
    let mut _1459: &str;
    let _1460: &str;
    let mut _1461: error::ErrorCode;
    let mut _1462: isize;
    let mut _1464: !;
    let mut _1465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1467: ();
    let mut _1468: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1469: std::result::Result<(), error::ErrorCode>;
    let mut _1470: u128;
    let mut _1471: u128;
    let mut _1472: u32;
    let mut _1473: u32;
    let mut _1474: std::option::Option<u64>;
    let mut _1475: isize;
    let mut _1477: !;
    let mut _1478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1481: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1482: std::result::Result<u128, error::ErrorCode>;
    let mut _1483: u128;
    let mut _1484: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1485: std::result::Result<u128, error::ErrorCode>;
    let mut _1486: u128;
    let mut _1487: u128;
    let mut _1488: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1489: std::result::Result<u128, error::ErrorCode>;
    let mut _1490: u32;
    let mut _1491: isize;
    let mut _1493: !;
    let mut _1494: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1496: isize;
    let mut _1498: !;
    let mut _1499: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1501: isize;
    let mut _1503: !;
    let mut _1504: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1506: ();
    let mut _1508: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1509: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1510: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1511: &u16;
    let _1512: &u16;
    let mut _1513: isize;
    let mut _1515: !;
    let mut _1516: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1518: ();
    let mut _1519: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1520: std::result::Result<(), error::ErrorCode>;
    let mut _1521: u128;
    let mut _1522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1523: std::result::Result<u128, error::ErrorCode>;
    let mut _1524: u128;
    let mut _1525: u128;
    let mut _1526: isize;
    let mut _1528: !;
    let mut _1529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1531: &state::spot_market::SpotBalanceType;
    let _1532: &state::spot_market::SpotBalanceType;
    let _1533: state::spot_market::SpotBalanceType;
    let mut _1534: &mut state::spot_market::SpotMarket;
    let mut _1535: &mut state::spot_market::SpotMarket;
    let mut _1536: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1537: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1538: &mut state::user::SpotPosition;
    let mut _1539: &mut state::user::SpotPosition;
    let mut _1540: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1541: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1542: &mut state::user::User;
    let mut _1543: u16;
    let mut _1544: isize;
    let mut _1546: !;
    let mut _1547: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1549: std::option::Option<u128>;
    let mut _1550: u128;
    let mut _1551: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1552: std::result::Result<u128, error::ErrorCode>;
    let mut _1553: u128;
    let mut _1554: u128;
    let mut _1555: isize;
    let mut _1557: !;
    let mut _1558: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1560: isize;
    let mut _1562: !;
    let mut _1563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1565: ();
    let mut _1566: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1567: std::result::Result<(), error::ErrorCode>;
    let mut _1568: u128;
    let mut _1569: &state::spot_market::SpotBalanceType;
    let _1570: &state::spot_market::SpotBalanceType;
    let _1571: state::spot_market::SpotBalanceType;
    let mut _1572: &mut state::spot_market::SpotMarket;
    let mut _1573: &mut state::spot_market::SpotMarket;
    let mut _1574: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1575: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1576: isize;
    let mut _1578: !;
    let mut _1579: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1581: ();
    let mut _1582: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1583: std::result::Result<(), error::ErrorCode>;
    let mut _1584: u128;
    let mut _1585: &state::spot_market::SpotBalanceType;
    let _1586: &state::spot_market::SpotBalanceType;
    let _1587: state::spot_market::SpotBalanceType;
    let mut _1588: &mut state::spot_market::SpotMarket;
    let mut _1589: &mut state::spot_market::SpotMarket;
    let mut _1590: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1591: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1592: &mut state::user::SpotPosition;
    let mut _1593: &mut state::user::SpotPosition;
    let mut _1594: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1595: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1596: &mut state::user::User;
    let mut _1597: u16;
    let mut _1598: isize;
    let mut _1600: !;
    let mut _1601: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1603: std::option::Option<u128>;
    let mut _1604: u128;
    let mut _1605: isize;
    let mut _1607: !;
    let mut _1608: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1610: ();
    let mut _1612: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1613: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1614: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1615: &u16;
    let _1616: &u16;
    let mut _1617: isize;
    let mut _1619: !;
    let mut _1620: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1622: ();
    let mut _1623: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1624: std::result::Result<(), error::ErrorCode>;
    let mut _1625: u128;
    let mut _1626: &state::spot_market::SpotBalanceType;
    let _1627: &state::spot_market::SpotBalanceType;
    let _1628: state::spot_market::SpotBalanceType;
    let mut _1629: &mut state::spot_market::SpotMarket;
    let mut _1630: &mut state::spot_market::SpotMarket;
    let mut _1631: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1632: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1633: &mut state::user::SpotPosition;
    let mut _1634: &mut state::user::SpotPosition;
    let mut _1635: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1636: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1637: &mut state::user::User;
    let mut _1638: u16;
    let mut _1639: isize;
    let mut _1641: !;
    let mut _1642: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1644: std::option::Option<u128>;
    let mut _1645: u128;
    let mut _1646: isize;
    let mut _1648: !;
    let mut _1649: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1651: ();
    let mut _1652: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1653: std::result::Result<(), error::ErrorCode>;
    let mut _1654: u128;
    let mut _1655: &state::spot_market::SpotBalanceType;
    let _1656: &state::spot_market::SpotBalanceType;
    let _1657: state::spot_market::SpotBalanceType;
    let mut _1658: &mut state::spot_market::SpotMarket;
    let mut _1659: &mut state::spot_market::SpotMarket;
    let mut _1660: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1661: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1662: &mut state::user::SpotPosition;
    let mut _1663: &mut state::user::SpotPosition;
    let mut _1664: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1665: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1666: &mut state::user::User;
    let mut _1667: u16;
    let mut _1668: isize;
    let mut _1670: !;
    let mut _1671: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1673: std::option::Option<u128>;
    let mut _1674: u128;
    let mut _1675: isize;
    let mut _1677: !;
    let mut _1678: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1681: (u64, state::margin_calculation::MarginCalculation);
    let mut _1682: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, state::margin_calculation::MarginCalculation)>;
    let mut _1683: std::result::Result<(u64, state::margin_calculation::MarginCalculation), error::ErrorCode>;
    let mut _1684: &state::user::User;
    let mut _1685: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1686: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1687: &mut state::oracle_map::OracleMap<'_>;
    let mut _1688: u32;
    let mut _1689: u128;
    let mut _1690: isize;
    let mut _1692: !;
    let mut _1693: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1695: u64;
    let mut _1696: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1697: std::result::Result<u64, error::ErrorCode>;
    let mut _1698: u64;
    let mut _1699: u64;
    let mut _1700: isize;
    let mut _1702: !;
    let mut _1703: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1705: ();
    let mut _1706: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1707: std::result::Result<(), error::ErrorCode>;
    let mut _1708: &mut state::user::User;
    let mut _1709: u64;
    let mut _1710: isize;
    let mut _1712: !;
    let mut _1713: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1715: ();
    let mut _1716: bool;
    let mut _1717: u128;
    let mut _1718: u128;
    let _1719: ();
    let mut _1720: &mut state::user::User;
    let mut _1721: bool;
    let mut _1722: &state::user::User;
    let _1723: ();
    let mut _1724: &mut state::user::User;
    let mut _1726: state::margin_calculation::MarginContext;
    let mut _1727: state::margin_calculation::MarginContext;
    let mut _1728: math::margin::MarginRequirementType;
    let mut _1729: [(u16, i128); 2];
    let mut _1730: (u16, i128);
    let mut _1731: u16;
    let mut _1732: i128;
    let mut _1733: i128;
    let mut _1734: u128;
    let mut _1735: bool;
    let mut _1736: (u16, i128);
    let mut _1737: u16;
    let mut _1738: i128;
    let mut _1739: u128;
    let mut _1740: &state::user::User;
    let mut _1741: i64;
    let mut _1743: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1744: std::result::Result<bool, error::ErrorCode>;
    let mut _1745: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _1746: &mut state::user::User;
    let mut _1747: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1748: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1749: &mut state::oracle_map::OracleMap<'_>;
    let mut _1750: state::margin_calculation::MarginContext;
    let mut _1751: &mut state::user::UserStats;
    let mut _1752: i64;
    let mut _1753: {closure@programs/drift/src/controller/liquidation.rs:1708:14: 1708:20};
    let mut _1754: isize;
    let mut _1756: !;
    let mut _1757: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1759: ();
    let mut _1760: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1761: std::result::Result<(), error::ErrorCode>;
    let mut _1762: bool;
    let mut _1763: ();
    let _1765: ();
    let mut _1766: &str;
    let _1767: &str;
    let mut _1768: &std::string::String;
    let _1769: &std::string::String;
    let _1770: std::string::String;
    let mut _1772: std::fmt::Arguments<'_>;
    let mut _1773: &[&str];
    let mut _1774: &[&str; 2];
    let _1775: &[&str; 2];
    let _1776: [&str; 2];
    let mut _1777: &[core::fmt::rt::Argument<'_>];
    let mut _1778: &[core::fmt::rt::Argument<'_>; 1];
    let _1779: &[core::fmt::rt::Argument<'_>; 1];
    let _1780: [core::fmt::rt::Argument<'_>; 1];
    let mut _1781: core::fmt::rt::Argument<'_>;
    let mut _1782: &error::ErrorCode;
    let _1783: &error::ErrorCode;
    let _1784: ();
    let mut _1785: &str;
    let _1786: &str;
    let mut _1787: error::ErrorCode;
    let mut _1788: isize;
    let mut _1790: !;
    let mut _1791: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1793: ();
    let _1794: ();
    let mut _1795: &[&[u8]];
    let mut _1796: &[&[u8]; 1];
    let _1797: &[&[u8]; 1];
    let _1798: [&[u8]; 1];
    let mut _1799: &[u8];
    let _1800: &[u8];
    let mut _1801: &std::vec::Vec<u8>;
    let _1802: &std::vec::Vec<u8>;
    let _1803: std::vec::Vec<u8>;
    let mut _1804: &state::events::LiquidationRecord;
    let _1805: &state::events::LiquidationRecord;
    let _1806: state::events::LiquidationRecord;
    let mut _1807: i64;
    let mut _1808: u16;
    let mut _1809: state::events::LiquidationType;
    let mut _1810: anchor_lang::prelude::Pubkey;
    let mut _1811: anchor_lang::prelude::Pubkey;
    let mut _1812: u128;
    let mut _1813: i128;
    let mut _1814: bool;
    let mut _1815: &state::user::User;
    let mut _1816: u64;
    let mut _1817: state::events::LiquidateSpotRecord;
    let mut _1818: u16;
    let mut _1819: i64;
    let mut _1820: u128;
    let mut _1821: u16;
    let mut _1822: i64;
    let mut _1823: u128;
    let mut _1824: u64;
    let mut _1825: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1826: std::result::Result<u64, error::ErrorCode>;
    let mut _1827: u128;
    let mut _1828: isize;
    let mut _1830: !;
    let mut _1831: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1833: state::events::LiquidationRecord;
    let mut _1834: ();
    let mut _1869: bool;
    let mut _1870: bool;
    let mut _1871: bool;
    let mut _1872: bool;
    let mut _1873: bool;
    let mut _1874: bool;
    let mut _1875: isize;
    let mut _1876: isize;
    let mut _1877: isize;
    let mut _1878: isize;
    let mut _1879: isize;
    let mut _1880: isize;
    let mut _1881: isize;
    let mut _1882: isize;
    let mut _1883: isize;
    let mut _1884: isize;
    let mut _1885: isize;
    let mut _1886: isize;
    let mut _1887: isize;
    let mut _1888: isize;
    let mut _1889: isize;
    let mut _1890: isize;
    let mut _1891: isize;
    let mut _1892: isize;
    let mut _1893: isize;
    let mut _1894: isize;
    let mut _1895: isize;
    let mut _1896: isize;
    let mut _1897: isize;
    let mut _1898: isize;
    let mut _1899: isize;
    let mut _1900: isize;
    let mut _1901: isize;
    let mut _1902: isize;
    let mut _1903: isize;
    let mut _1904: isize;
    let mut _1905: isize;
    let mut _1906: isize;
    let mut _1907: isize;
    let mut _1908: isize;
    let mut _1909: isize;
    let mut _1910: isize;
    let mut _1911: isize;
    let mut _1912: isize;
    let mut _1913: isize;
    let mut _1914: isize;
    let mut _1915: isize;
    let mut _1916: isize;
    let mut _1917: isize;
    let mut _1918: isize;
    let mut _1919: isize;
    let mut _1920: isize;
    let mut _1921: isize;
    let mut _1922: isize;
    let mut _1923: isize;
    let mut _1924: isize;
    scope 1 {
        debug liquidation_margin_buffer_ratio => _17;
        let _18: u128;
        scope 2 {
            debug initial_pct_to_liquidate => _18;
            let _20: u128;
            scope 3 {
                debug liquidation_duration => _20;
                let _28: error::ErrorCode;
                let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _65: ();
                let _72: error::ErrorCode;
                let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _109: ();
                let _110: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _120: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                scope 4 {
                    debug error_code => _28;
                    let _35: std::string::String;
                    let _54: std::string::String;
                    let mut _1867: &[&str; 1];
                    let mut _1868: &[&str; 2];
                    scope 5 {
                        debug res => _35;
                    }
                    scope 6 {
                        debug res => _54;
                    }
                }
                scope 7 {
                    debug residual => _62;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug val => _65;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug error_code => _72;
                    let _79: std::string::String;
                    let _98: std::string::String;
                    let mut _1865: &[&str; 1];
                    let mut _1866: &[&str; 2];
                    scope 12 {
                        debug res => _79;
                    }
                    scope 13 {
                        debug res => _98;
                    }
                }
                scope 14 {
                    debug residual => _106;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _109;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug asset_spot_market => _110;
                    let _130: error::ErrorCode;
                    let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _174: ();
                    let _184: error::ErrorCode;
                    let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _233: ();
                    let _236: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    let _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _246: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    scope 23 {
                        debug error_code => _130;
                        let _137: std::string::String;
                        let _156: std::string::String;
                        let mut _1863: &[&str; 1];
                        let mut _1864: &[&str; 2];
                        scope 24 {
                            debug res => _137;
                        }
                        scope 25 {
                            debug res => _156;
                        }
                    }
                    scope 26 {
                        debug residual => _171;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _174;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug error_code => _184;
                        let _191: std::string::String;
                        let _210: std::string::String;
                        let mut _1861: &[&str; 3];
                        let mut _1862: &[&str; 2];
                        scope 31 {
                            debug res => _191;
                        }
                        scope 32 {
                            debug res => _210;
                        }
                    }
                    scope 33 {
                        debug residual => _230;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _233;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug liability_spot_market => _236;
                        let _256: error::ErrorCode;
                        let _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _300: ();
                        let _310: error::ErrorCode;
                        let _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _359: ();
                        let _371: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _374: &state::user::SpotPosition;
                        let _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _387: &state::user::SpotPosition;
                        let _396: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _399: &mut state::user::SpotPosition;
                        let _408: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _411: &mut state::user::SpotPosition;
                        let _412: u128;
                        let _413: i64;
                        let _414: u32;
                        let _415: u32;
                        let _416: u32;
                        let _417: u8;
                        let _418: i64;
                        let mut _420: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                        let _427: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _430: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                        scope 42 {
                            debug error_code => _256;
                            let _263: std::string::String;
                            let _282: std::string::String;
                            let mut _1859: &[&str; 1];
                            let mut _1860: &[&str; 2];
                            scope 43 {
                                debug res => _263;
                            }
                            scope 44 {
                                debug res => _282;
                            }
                        }
                        scope 45 {
                            debug residual => _297;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _300;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug error_code => _310;
                            let _317: std::string::String;
                            let _336: std::string::String;
                            let mut _1857: &[&str; 3];
                            let mut _1858: &[&str; 2];
                            scope 50 {
                                debug res => _317;
                            }
                            scope 51 {
                                debug res => _336;
                            }
                        }
                        scope 52 {
                            debug residual => _356;
                            scope 53 {
                            }
                        }
                        scope 54 {
                            debug val => _359;
                            scope 55 {
                            }
                        }
                        scope 56 {
                            debug residual => _371;
                            scope 57 {
                            }
                        }
                        scope 58 {
                            debug val => _374;
                            scope 59 {
                            }
                        }
                        scope 60 {
                            debug residual => _384;
                            scope 61 {
                            }
                        }
                        scope 62 {
                            debug val => _387;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug residual => _396;
                            scope 65 {
                            }
                        }
                        scope 66 {
                            debug val => _399;
                            scope 67 {
                            }
                        }
                        scope 68 {
                            debug residual => _408;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug val => _411;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug asset_amount => _412;
                            debug asset_price => _413;
                            debug asset_decimals => _414;
                            debug asset_weight => _415;
                            debug asset_liquidation_multiplier => _416;
                            debug asset_pool_id => _417;
                            debug asset_oracle_delay => _418;
                            let _601: u128;
                            let _602: i64;
                            let _603: u32;
                            let _604: u32;
                            let _605: u32;
                            let _606: u8;
                            let _607: i64;
                            let mut _609: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            let _616: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _619: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                            scope 115 {
                                debug liability_amount => _601;
                                debug liability_price => _602;
                                debug liability_decimals => _603;
                                debug liability_weight => _604;
                                debug liability_liquidation_multiplier => _605;
                                debug liability_pool_id => _606;
                                debug liability_oracle_delay => _607;
                                let _803: error::ErrorCode;
                                let _847: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _850: ();
                                let _851: state::margin_calculation::MarginContext;
                                let _860: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _863: state::margin_calculation::MarginContext;
                                scope 158 {
                                    debug error_code => _803;
                                    let _810: std::string::String;
                                    let _829: std::string::String;
                                    let mut _1847: &[&str; 3];
                                    let mut _1848: &[&str; 2];
                                    scope 159 {
                                        debug res => _810;
                                    }
                                    scope 160 {
                                        debug res => _829;
                                    }
                                }
                                scope 161 {
                                    debug residual => _847;
                                    scope 162 {
                                    }
                                }
                                scope 163 {
                                    debug val => _850;
                                    scope 164 {
                                    }
                                }
                                scope 165 {
                                    debug margin_context => _851;
                                    let _866: state::margin_calculation::MarginCalculation;
                                    let _877: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _880: state::margin_calculation::MarginCalculation;
                                    scope 170 {
                                        debug margin_calculation => _866;
                                        let _893: std::string::String;
                                        let _914: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _917: bool;
                                        let _922: u16;
                                        let _928: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _931: u16;
                                        let mut _1846: &[&str; 1];
                                        scope 175 {
                                            debug res => _893;
                                        }
                                        scope 176 {
                                            debug residual => _914;
                                            scope 177 {
                                            }
                                        }
                                        scope 178 {
                                            debug val => _917;
                                            scope 179 {
                                            }
                                        }
                                        scope 180 {
                                            debug liquidation_id => _922;
                                            let mut _932: u64;
                                            scope 185 {
                                                debug margin_freed => _932;
                                                let _933: std::vec::Vec<u32>;
                                                let _950: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _953: std::vec::Vec<u32>;
                                                scope 186 {
                                                    debug canceled_order_ids => _933;
                                                    let _954: state::margin_calculation::MarginCalculation;
                                                    let _957: state::margin_calculation::MarginCalculation;
                                                    let _973: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _976: state::margin_calculation::MarginContext;
                                                    let _980: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _983: state::margin_calculation::MarginCalculation;
                                                    scope 191 {
                                                        debug intermediate_margin_calculation => _954;
                                                        let _1068: u128;
                                                        let _1073: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1076: u128;
                                                        scope 223 {
                                                            debug margin_shortage => _1068;
                                                            let _1077: u32;
                                                            let _1083: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1086: u32;
                                                            scope 228 {
                                                                debug liability_weight_with_buffer => _1077;
                                                                let _1087: u32;
                                                                let _1096: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1099: u128;
                                                                let _1117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1120: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                let _1122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1125: u32;
                                                                scope 233 {
                                                                    debug liquidation_if_fee => _1087;
                                                                    let _1126: u128;
                                                                    let _1138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _1141: u128;
                                                                    scope 246 {
                                                                        debug liability_transfer_to_cover_margin_shortage => _1126;
                                                                        let _1142: u128;
                                                                        let _1151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _1154: u128;
                                                                        scope 251 {
                                                                            debug max_pct_allowed => _1142;
                                                                            let _1155: u128;
                                                                            let _1162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _1165: u128;
                                                                            scope 256 {
                                                                                debug max_liability_allowed_to_be_transferred => _1155;
                                                                                let _1174: u128;
                                                                                let _1185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1188: u128;
                                                                                scope 261 {
                                                                                    debug liability_transfer_implied_by_asset_amount => _1174;
                                                                                    let _1189: i128;
                                                                                    let _1197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1200: i128;
                                                                                    let _1204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1207: i128;
                                                                                    scope 266 {
                                                                                        debug liability_value => _1189;
                                                                                        let _1208: u128;
                                                                                        scope 275 {
                                                                                            debug minimum_liability_transfer => _1208;
                                                                                            let _1213: u128;
                                                                                            scope 276 {
                                                                                                debug liability_transfer => _1213;
                                                                                                let _1222: u128;
                                                                                                let _1234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1237: u128;
                                                                                                scope 277 {
                                                                                                    debug asset_transfer => _1222;
                                                                                                    let _1250: std::string::String;
                                                                                                    let _1272: std::string::String;
                                                                                                    let _1297: std::string::String;
                                                                                                    let _1317: bool;
                                                                                                    let _1325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1328: i64;
                                                                                                    let _1339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1342: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                    let _1349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1352: i64;
                                                                                                    let _1354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _1357: bool;
                                                                                                    let mut _1835: &[&str; 3];
                                                                                                    let mut _1836: &[&str; 3];
                                                                                                    let mut _1837: &[&str; 2];
                                                                                                    scope 282 {
                                                                                                        debug res => _1250;
                                                                                                    }
                                                                                                    scope 283 {
                                                                                                        debug res => _1272;
                                                                                                    }
                                                                                                    scope 284 {
                                                                                                        debug res => _1297;
                                                                                                    }
                                                                                                    scope 285 {
                                                                                                        debug liability_oracle_too_divergent => _1317;
                                                                                                        let _1363: error::ErrorCode;
                                                                                                        let _1388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1391: ();
                                                                                                        let _1392: bool;
                                                                                                        let _1400: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1403: i64;
                                                                                                        let _1414: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1417: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                                        let _1424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1427: i64;
                                                                                                        let _1429: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _1432: bool;
                                                                                                        scope 302 {
                                                                                                            debug error_code => _1363;
                                                                                                            let _1370: std::string::String;
                                                                                                            let mut _1845: &[&str; 2];
                                                                                                            scope 303 {
                                                                                                                debug res => _1370;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 304 {
                                                                                                            debug residual => _1388;
                                                                                                            scope 305 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 306 {
                                                                                                            debug val => _1391;
                                                                                                            scope 307 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 308 {
                                                                                                            debug asset_oracle_too_divergent => _1392;
                                                                                                            let _1438: error::ErrorCode;
                                                                                                            let _1463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1466: ();
                                                                                                            let _1476: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1479: ();
                                                                                                            let _1480: u128;
                                                                                                            let _1492: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1495: u128;
                                                                                                            let _1497: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1500: u128;
                                                                                                            let _1502: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _1505: u128;
                                                                                                            scope 325 {
                                                                                                                debug error_code => _1438;
                                                                                                                let _1445: std::string::String;
                                                                                                                let mut _1844: &[&str; 2];
                                                                                                                scope 326 {
                                                                                                                    debug res => _1445;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 327 {
                                                                                                                debug residual => _1463;
                                                                                                                scope 328 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 329 {
                                                                                                                debug val => _1466;
                                                                                                                scope 330 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 331 {
                                                                                                                debug residual => _1476;
                                                                                                                scope 332 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 333 {
                                                                                                                debug val => _1479;
                                                                                                                scope 334 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 335 {
                                                                                                                debug if_fee => _1480;
                                                                                                                let mut _1507: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                let _1514: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _1517: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                let mut _1611: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                let _1618: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _1621: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                                                let _1680: u64;
                                                                                                                let _1691: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _1694: (u64, state::margin_calculation::MarginCalculation);
                                                                                                                scope 348 {
                                                                                                                    debug liability_market => _1507;
                                                                                                                    let _1527: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1530: u128;
                                                                                                                    let _1545: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1548: &mut state::user::SpotPosition;
                                                                                                                    let _1556: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1559: u128;
                                                                                                                    let _1561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1564: ();
                                                                                                                    let _1577: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1580: ();
                                                                                                                    let _1599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1602: &mut state::user::SpotPosition;
                                                                                                                    let _1606: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1609: ();
                                                                                                                    let mut _1841: &state::spot_market::SpotBalanceType;
                                                                                                                    let mut _1842: &state::spot_market::SpotBalanceType;
                                                                                                                    let mut _1843: &state::spot_market::SpotBalanceType;
                                                                                                                    scope 353 {
                                                                                                                        debug residual => _1527;
                                                                                                                        scope 354 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 355 {
                                                                                                                        debug val => _1530;
                                                                                                                        scope 356 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 357 {
                                                                                                                        debug residual => _1545;
                                                                                                                        scope 358 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 359 {
                                                                                                                        debug val => _1548;
                                                                                                                        scope 360 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 361 {
                                                                                                                        debug residual => _1556;
                                                                                                                        scope 362 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 363 {
                                                                                                                        debug val => _1559;
                                                                                                                        scope 364 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 365 {
                                                                                                                        debug residual => _1561;
                                                                                                                        scope 366 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 367 {
                                                                                                                        debug val => _1564;
                                                                                                                        scope 368 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 369 {
                                                                                                                        debug residual => _1577;
                                                                                                                        scope 370 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 371 {
                                                                                                                        debug val => _1580;
                                                                                                                        scope 372 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 373 {
                                                                                                                        debug residual => _1599;
                                                                                                                        scope 374 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 375 {
                                                                                                                        debug val => _1602;
                                                                                                                        scope 376 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 377 {
                                                                                                                        debug residual => _1606;
                                                                                                                        scope 378 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 379 {
                                                                                                                        debug val => _1609;
                                                                                                                        scope 380 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 349 {
                                                                                                                    debug residual => _1514;
                                                                                                                    scope 350 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 351 {
                                                                                                                    debug val => _1517;
                                                                                                                    scope 352 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 381 {
                                                                                                                    debug asset_market => _1611;
                                                                                                                    let _1640: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1643: &mut state::user::SpotPosition;
                                                                                                                    let _1647: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1650: ();
                                                                                                                    let _1669: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1672: &mut state::user::SpotPosition;
                                                                                                                    let _1676: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1679: ();
                                                                                                                    let mut _1839: &state::spot_market::SpotBalanceType;
                                                                                                                    let mut _1840: &state::spot_market::SpotBalanceType;
                                                                                                                    scope 386 {
                                                                                                                        debug residual => _1640;
                                                                                                                        scope 387 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 388 {
                                                                                                                        debug val => _1643;
                                                                                                                        scope 389 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 390 {
                                                                                                                        debug residual => _1647;
                                                                                                                        scope 391 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 392 {
                                                                                                                        debug val => _1650;
                                                                                                                        scope 393 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 394 {
                                                                                                                        debug residual => _1669;
                                                                                                                        scope 395 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 396 {
                                                                                                                        debug val => _1672;
                                                                                                                        scope 397 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 398 {
                                                                                                                        debug residual => _1676;
                                                                                                                        scope 399 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 400 {
                                                                                                                        debug val => _1679;
                                                                                                                        scope 401 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 382 {
                                                                                                                    debug residual => _1618;
                                                                                                                    scope 383 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 384 {
                                                                                                                    debug val => _1621;
                                                                                                                    scope 385 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 402 {
                                                                                                                    debug margin_freed_from_liability => _1680;
                                                                                                                    let _1701: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1704: u64;
                                                                                                                    let _1711: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1714: ();
                                                                                                                    let _1725: state::margin_calculation::MarginContext;
                                                                                                                    scope 407 {
                                                                                                                        debug residual => _1701;
                                                                                                                        scope 408 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 409 {
                                                                                                                        debug val => _1704;
                                                                                                                        scope 410 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 411 {
                                                                                                                        debug residual => _1711;
                                                                                                                        scope 412 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 413 {
                                                                                                                        debug val => _1714;
                                                                                                                        scope 414 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 415 {
                                                                                                                        debug liq_margin_context => _1725;
                                                                                                                        let _1742: bool;
                                                                                                                        let _1755: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _1758: bool;
                                                                                                                        scope 416 {
                                                                                                                            debug liquidator_meets_initial_margin_requirement => _1742;
                                                                                                                            let _1764: error::ErrorCode;
                                                                                                                            let _1789: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1792: ();
                                                                                                                            let _1829: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1832: u64;
                                                                                                                            scope 421 {
                                                                                                                                debug error_code => _1764;
                                                                                                                                let _1771: std::string::String;
                                                                                                                                let mut _1838: &[&str; 2];
                                                                                                                                scope 422 {
                                                                                                                                    debug res => _1771;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 423 {
                                                                                                                                debug residual => _1789;
                                                                                                                                scope 424 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 425 {
                                                                                                                                debug val => _1792;
                                                                                                                                scope 426 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 427 {
                                                                                                                                debug residual => _1829;
                                                                                                                                scope 428 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 429 {
                                                                                                                                debug val => _1832;
                                                                                                                                scope 430 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 417 {
                                                                                                                            debug residual => _1755;
                                                                                                                            scope 418 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 419 {
                                                                                                                            debug val => _1758;
                                                                                                                            scope 420 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 403 {
                                                                                                                    debug residual => _1691;
                                                                                                                    scope 404 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 405 {
                                                                                                                    debug val => _1694;
                                                                                                                    scope 406 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 336 {
                                                                                                                debug residual => _1492;
                                                                                                                scope 337 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 338 {
                                                                                                                debug val => _1495;
                                                                                                                scope 339 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 340 {
                                                                                                                debug residual => _1497;
                                                                                                                scope 341 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 342 {
                                                                                                                debug val => _1500;
                                                                                                                scope 343 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 344 {
                                                                                                                debug residual => _1502;
                                                                                                                scope 345 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 346 {
                                                                                                                debug val => _1505;
                                                                                                                scope 347 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 309 {
                                                                                                            debug residual => _1400;
                                                                                                            scope 310 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 311 {
                                                                                                            debug val => _1403;
                                                                                                            scope 312 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 313 {
                                                                                                            debug residual => _1414;
                                                                                                            scope 314 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 315 {
                                                                                                            debug val => _1417;
                                                                                                            scope 316 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 317 {
                                                                                                            debug residual => _1424;
                                                                                                            scope 318 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 319 {
                                                                                                            debug val => _1427;
                                                                                                            scope 320 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 321 {
                                                                                                            debug residual => _1429;
                                                                                                            scope 322 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 323 {
                                                                                                            debug val => _1432;
                                                                                                            scope 324 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 286 {
                                                                                                        debug residual => _1325;
                                                                                                        scope 287 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 288 {
                                                                                                        debug val => _1328;
                                                                                                        scope 289 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 290 {
                                                                                                        debug residual => _1339;
                                                                                                        scope 291 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 292 {
                                                                                                        debug val => _1342;
                                                                                                        scope 293 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 294 {
                                                                                                        debug residual => _1349;
                                                                                                        scope 295 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 296 {
                                                                                                        debug val => _1352;
                                                                                                        scope 297 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 298 {
                                                                                                        debug residual => _1354;
                                                                                                        scope 299 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 300 {
                                                                                                        debug val => _1357;
                                                                                                        scope 301 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 278 {
                                                                                                    debug residual => _1234;
                                                                                                    scope 279 {
                                                                                                    }
                                                                                                }
                                                                                                scope 280 {
                                                                                                    debug val => _1237;
                                                                                                    scope 281 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 267 {
                                                                                        debug residual => _1197;
                                                                                        scope 268 {
                                                                                        }
                                                                                    }
                                                                                    scope 269 {
                                                                                        debug val => _1200;
                                                                                        scope 270 {
                                                                                        }
                                                                                    }
                                                                                    scope 271 {
                                                                                        debug residual => _1204;
                                                                                        scope 272 {
                                                                                        }
                                                                                    }
                                                                                    scope 273 {
                                                                                        debug val => _1207;
                                                                                        scope 274 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 262 {
                                                                                    debug residual => _1185;
                                                                                    scope 263 {
                                                                                    }
                                                                                }
                                                                                scope 264 {
                                                                                    debug val => _1188;
                                                                                    scope 265 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 257 {
                                                                                debug residual => _1162;
                                                                                scope 258 {
                                                                                }
                                                                            }
                                                                            scope 259 {
                                                                                debug val => _1165;
                                                                                scope 260 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 252 {
                                                                            debug residual => _1151;
                                                                            scope 253 {
                                                                            }
                                                                        }
                                                                        scope 254 {
                                                                            debug val => _1154;
                                                                            scope 255 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 247 {
                                                                        debug residual => _1138;
                                                                        scope 248 {
                                                                        }
                                                                    }
                                                                    scope 249 {
                                                                        debug val => _1141;
                                                                        scope 250 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 234 {
                                                                    debug residual => _1096;
                                                                    scope 235 {
                                                                    }
                                                                }
                                                                scope 236 {
                                                                    debug val => _1099;
                                                                    scope 237 {
                                                                    }
                                                                }
                                                                scope 238 {
                                                                    debug residual => _1117;
                                                                    scope 239 {
                                                                    }
                                                                }
                                                                scope 240 {
                                                                    debug val => _1120;
                                                                    scope 241 {
                                                                    }
                                                                }
                                                                scope 242 {
                                                                    debug residual => _1122;
                                                                    scope 243 {
                                                                    }
                                                                }
                                                                scope 244 {
                                                                    debug val => _1125;
                                                                    scope 245 {
                                                                    }
                                                                }
                                                            }
                                                            scope 229 {
                                                                debug residual => _1083;
                                                                scope 230 {
                                                                }
                                                            }
                                                            scope 231 {
                                                                debug val => _1086;
                                                                scope 232 {
                                                                }
                                                            }
                                                        }
                                                        scope 224 {
                                                            debug residual => _1073;
                                                            scope 225 {
                                                            }
                                                        }
                                                        scope 226 {
                                                            debug val => _1076;
                                                            scope 227 {
                                                            }
                                                        }
                                                    }
                                                    scope 192 {
                                                        debug intermediate_margin_calculation => _957;
                                                        let _984: u128;
                                                        let _989: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _992: u128;
                                                        scope 201 {
                                                            debug initial_margin_shortage => _984;
                                                            let _993: u128;
                                                            let _998: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1001: u128;
                                                            scope 206 {
                                                                debug new_margin_shortage => _993;
                                                                let _1009: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1012: u64;
                                                                let _1019: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1022: ();
                                                                let _1029: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1032: bool;
                                                                scope 211 {
                                                                    debug residual => _1009;
                                                                    scope 212 {
                                                                    }
                                                                }
                                                                scope 213 {
                                                                    debug val => _1012;
                                                                    scope 214 {
                                                                    }
                                                                }
                                                                scope 215 {
                                                                    debug residual => _1019;
                                                                    scope 216 {
                                                                    }
                                                                }
                                                                scope 217 {
                                                                    debug val => _1022;
                                                                    scope 218 {
                                                                    }
                                                                }
                                                                scope 219 {
                                                                    debug residual => _1029;
                                                                    scope 220 {
                                                                    }
                                                                }
                                                                scope 221 {
                                                                    debug val => _1032;
                                                                    scope 222 {
                                                                    }
                                                                }
                                                            }
                                                            scope 207 {
                                                                debug residual => _998;
                                                                scope 208 {
                                                                }
                                                            }
                                                            scope 209 {
                                                                debug val => _1001;
                                                                scope 210 {
                                                                }
                                                            }
                                                        }
                                                        scope 202 {
                                                            debug residual => _989;
                                                            scope 203 {
                                                            }
                                                        }
                                                        scope 204 {
                                                            debug val => _992;
                                                            scope 205 {
                                                            }
                                                        }
                                                    }
                                                    scope 193 {
                                                        debug residual => _973;
                                                        scope 194 {
                                                        }
                                                    }
                                                    scope 195 {
                                                        debug val => _976;
                                                        scope 196 {
                                                        }
                                                    }
                                                    scope 197 {
                                                        debug residual => _980;
                                                        scope 198 {
                                                        }
                                                    }
                                                    scope 199 {
                                                        debug val => _983;
                                                        scope 200 {
                                                        }
                                                    }
                                                }
                                                scope 187 {
                                                    debug residual => _950;
                                                    scope 188 {
                                                    }
                                                }
                                                scope 189 {
                                                    debug val => _953;
                                                    scope 190 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 181 {
                                            debug residual => _928;
                                            scope 182 {
                                            }
                                        }
                                        scope 183 {
                                            debug val => _931;
                                            scope 184 {
                                            }
                                        }
                                    }
                                    scope 171 {
                                        debug residual => _877;
                                        scope 172 {
                                        }
                                    }
                                    scope 173 {
                                        debug val => _880;
                                        scope 174 {
                                        }
                                    }
                                }
                                scope 166 {
                                    debug residual => _860;
                                    scope 167 {
                                    }
                                }
                                scope 168 {
                                    debug val => _863;
                                    scope 169 {
                                    }
                                }
                            }
                            scope 116 {
                                debug liability_market => _609;
                                let _620: &state::oracle::OraclePriceData;
                                let _621: &state::state::ValidityGuardRails;
                                let _633: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _636: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
                                scope 121 {
                                    debug liability_price_data => _620;
                                    debug validity_guard_rails => _621;
                                    let _650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _653: ();
                                    let _654: &state::user::SpotPosition;
                                    let _660: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _663: &state::user::SpotPosition;
                                    scope 126 {
                                        debug residual => _650;
                                        scope 127 {
                                        }
                                    }
                                    scope 128 {
                                        debug val => _653;
                                        scope 129 {
                                        }
                                    }
                                    scope 130 {
                                        debug spot_position => _654;
                                        let _672: error::ErrorCode;
                                        let _697: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _700: ();
                                        let _701: u128;
                                        let _710: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _713: u128;
                                        let mut _1852: &state::spot_market::SpotBalanceType;
                                        scope 135 {
                                            debug error_code => _672;
                                            let _679: std::string::String;
                                            let mut _1851: &[&str; 2];
                                            scope 136 {
                                                debug res => _679;
                                            }
                                        }
                                        scope 137 {
                                            debug residual => _697;
                                            scope 138 {
                                            }
                                        }
                                        scope 139 {
                                            debug val => _700;
                                            scope 140 {
                                            }
                                        }
                                        scope 141 {
                                            debug token_amount => _701;
                                            let _720: error::ErrorCode;
                                            let _761: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _764: ();
                                            let _765: i64;
                                            scope 146 {
                                                debug error_code => _720;
                                                let _727: std::string::String;
                                                let _746: std::string::String;
                                                let mut _1849: &[&str; 1];
                                                let mut _1850: &[&str; 2];
                                                scope 147 {
                                                    debug res => _727;
                                                }
                                                scope 148 {
                                                    debug res => _746;
                                                }
                                            }
                                            scope 149 {
                                                debug residual => _761;
                                                scope 150 {
                                                }
                                            }
                                            scope 151 {
                                                debug val => _764;
                                                scope 152 {
                                                }
                                            }
                                            scope 153 {
                                                debug liability_price => _765;
                                                let _782: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _785: u32;
                                                scope 154 {
                                                    debug residual => _782;
                                                    scope 155 {
                                                    }
                                                }
                                                scope 156 {
                                                    debug val => _785;
                                                    scope 157 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 142 {
                                            debug residual => _710;
                                            scope 143 {
                                            }
                                        }
                                        scope 144 {
                                            debug val => _713;
                                            scope 145 {
                                            }
                                        }
                                    }
                                    scope 131 {
                                        debug residual => _660;
                                        scope 132 {
                                        }
                                    }
                                    scope 133 {
                                        debug val => _663;
                                        scope 134 {
                                        }
                                    }
                                }
                                scope 122 {
                                    debug residual => _633;
                                    scope 123 {
                                    }
                                }
                                scope 124 {
                                    debug val => _636;
                                    scope 125 {
                                    }
                                }
                            }
                            scope 117 {
                                debug residual => _616;
                                scope 118 {
                                }
                            }
                            scope 119 {
                                debug val => _619;
                                scope 120 {
                                }
                            }
                        }
                        scope 73 {
                            debug asset_market => _420;
                            let _431: &state::oracle::OraclePriceData;
                            let _432: &state::state::ValidityGuardRails;
                            let _444: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _447: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
                            scope 78 {
                                debug asset_price_data => _431;
                                debug validity_guard_rails => _432;
                                let _461: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _464: ();
                                let _465: &state::user::SpotPosition;
                                let _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _474: &state::user::SpotPosition;
                                scope 83 {
                                    debug residual => _461;
                                    scope 84 {
                                    }
                                }
                                scope 85 {
                                    debug val => _464;
                                    scope 86 {
                                    }
                                }
                                scope 87 {
                                    debug spot_deposit_position => _465;
                                    let _483: error::ErrorCode;
                                    let _508: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _511: ();
                                    let _512: u128;
                                    let _521: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _524: u128;
                                    let mut _1856: &state::spot_market::SpotBalanceType;
                                    scope 92 {
                                        debug error_code => _483;
                                        let _490: std::string::String;
                                        let mut _1855: &[&str; 2];
                                        scope 93 {
                                            debug res => _490;
                                        }
                                    }
                                    scope 94 {
                                        debug residual => _508;
                                        scope 95 {
                                        }
                                    }
                                    scope 96 {
                                        debug val => _511;
                                        scope 97 {
                                        }
                                    }
                                    scope 98 {
                                        debug token_amount => _512;
                                        let _531: error::ErrorCode;
                                        let _572: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _575: ();
                                        let _576: i64;
                                        scope 103 {
                                            debug error_code => _531;
                                            let _538: std::string::String;
                                            let _557: std::string::String;
                                            let mut _1853: &[&str; 1];
                                            let mut _1854: &[&str; 2];
                                            scope 104 {
                                                debug res => _538;
                                            }
                                            scope 105 {
                                                debug res => _557;
                                            }
                                        }
                                        scope 106 {
                                            debug residual => _572;
                                            scope 107 {
                                            }
                                        }
                                        scope 108 {
                                            debug val => _575;
                                            scope 109 {
                                            }
                                        }
                                        scope 110 {
                                            debug asset_price => _576;
                                            let _593: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _596: u32;
                                            scope 111 {
                                                debug residual => _593;
                                                scope 112 {
                                                }
                                            }
                                            scope 113 {
                                                debug val => _596;
                                                scope 114 {
                                                }
                                            }
                                        }
                                    }
                                    scope 99 {
                                        debug residual => _521;
                                        scope 100 {
                                        }
                                    }
                                    scope 101 {
                                        debug val => _524;
                                        scope 102 {
                                        }
                                    }
                                }
                                scope 88 {
                                    debug residual => _471;
                                    scope 89 {
                                    }
                                }
                                scope 90 {
                                    debug val => _474;
                                    scope 91 {
                                    }
                                }
                            }
                            scope 79 {
                                debug residual => _444;
                                scope 80 {
                                }
                            }
                            scope 81 {
                                debug val => _447;
                                scope 82 {
                                }
                            }
                        }
                        scope 74 {
                            debug residual => _427;
                            scope 75 {
                            }
                        }
                        scope 76 {
                            debug val => _430;
                            scope 77 {
                            }
                        }
                    }
                    scope 38 {
                        debug residual => _243;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _246;
                        scope 41 {
                        }
                    }
                }
                scope 19 {
                    debug residual => _117;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _120;
                    scope 22 {
                    }
                }
            }
        }
    }

    bb0: {
        _1874 = const false;
        _1873 = const false;
        _1872 = const false;
        _1871 = const false;
        _1870 = const false;
        _1869 = const false;
        StorageLive(_17);
        _17 = ((*_16).11: u32);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_16).21: u16);
        _18 = move _19 as u128 (IntToInt);
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_16).20: u8);
        _20 = move _21 as u128 (IntToInt);
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_5);
        _25 = User::is_bankrupt(move _26) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _25) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_26);
        StorageLive(_28);
        _28 = error::ErrorCode::UserBankrupt;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _1868 = const _;
        _39 = &(*_1868);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_28;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _46) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        StorageLive(_27);
        _27 = ();
        _24 = std::result::Result::<(), error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        goto -> bb15;
    }

    bb4: {
        StorageDead(_46);
        _44 = [move _45];
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_36);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb7, unwind: bb867];
    }

    bb7: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb8, unwind: bb867];
    }

    bb8: {
        StorageDead(_30);
        drop(_34) -> [return: bb9, unwind: bb868];
    }

    bb9: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _1867 = const _;
        _58 = &(*_1867);
        _57 = &(*_58);
        _56 = move _57 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_57);
        _55 = Arguments::<'_>::new_const(move _56) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_56);
        _54 = format(move _55) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_55);
        StorageDead(_58);
        _53 = move _54;
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = <String as Deref>::deref(move _51) -> [return: bb12, unwind: bb866];
    }

    bb12: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb13, unwind: bb866];
    }

    bb13: {
        StorageDead(_49);
        drop(_53) -> [return: bb14, unwind: bb868];
    }

    bb14: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_60);
        _60 = _28;
        _24 = std::result::Result::<(), error::ErrorCode>::Err(move _60);
        StorageDead(_60);
        StorageDead(_28);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_25);
        _23 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _24) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_24);
        _61 = discriminant(_23);
        switchInt(move _61) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_65);
        _65 = ((_23 as Continue).0: ());
        _22 = _65;
        StorageDead(_65);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_8);
        _69 = User::is_bankrupt(move _70) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_62);
        _62 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb826;
    }

    bb21: {
        switchInt(move _69) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_70);
        StorageLive(_72);
        _72 = error::ErrorCode::UserBankrupt;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _1866 = const _;
        _83 = &(*_1866);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_72;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _90) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_70);
        StorageLive(_71);
        _71 = ();
        _68 = std::result::Result::<(), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_90);
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_80);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb27, unwind: bb865];
    }

    bb27: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb28, unwind: bb865];
    }

    bb28: {
        StorageDead(_74);
        drop(_78) -> [return: bb29, unwind: bb868];
    }

    bb29: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _1865 = const _;
        _102 = &(*_1865);
        _101 = &(*_102);
        _100 = move _101 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_101);
        _99 = Arguments::<'_>::new_const(move _100) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_100);
        _98 = format(move _99) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_99);
        StorageDead(_102);
        _97 = move _98;
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = <String as Deref>::deref(move _95) -> [return: bb32, unwind: bb864];
    }

    bb32: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = solana_program::log::sol_log(move _93) -> [return: bb33, unwind: bb864];
    }

    bb33: {
        StorageDead(_93);
        drop(_97) -> [return: bb34, unwind: bb868];
    }

    bb34: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_104);
        _104 = _72;
        _68 = std::result::Result::<(), error::ErrorCode>::Err(move _104);
        StorageDead(_104);
        StorageDead(_72);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_69);
        _67 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _68) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_68);
        _105 = discriminant(_67);
        switchInt(move _105) -> [0: bb37, 1: bb38, otherwise: bb18];
    }

    bb37: {
        StorageLive(_109);
        _109 = ((_67 as Continue).0: ());
        _66 = _109;
        StorageDead(_109);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_12);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_1;
        _114 = &(*_115);
        _112 = SpotMarketMap::<'_>::get_ref(move _113, move _114) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_106);
        _106 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb826;
    }

    bb40: {
        StorageDead(_114);
        StorageDead(_113);
        _111 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _112) -> [return: bb41, unwind: bb868];
    }

    bb41: {
        StorageDead(_112);
        _116 = discriminant(_111);
        switchInt(move _116) -> [0: bb42, 1: bb43, otherwise: bb18];
    }

    bb42: {
        StorageLive(_120);
        _120 = move ((_111 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1874 = const true;
        _110 = move _120;
        StorageDead(_120);
        _1877 = discriminant(_111);
        StorageDead(_115);
        StorageDead(_111);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_110;
        _126 = <Ref<'_, SpotMarket> as Deref>::deref(move _127) -> [return: bb45, unwind: bb894];
    }

    bb43: {
        StorageLive(_117);
        _117 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb44, unwind: bb895];
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_117);
        _1875 = discriminant(_111);
        StorageDead(_115);
        StorageDead(_111);
        goto -> bb825;
    }

    bb45: {
        _125 = &(*_126);
        StorageDead(_127);
        StorageLive(_128);
        _128 = SpotOperation::Liquidation;
        _124 = SpotMarket::is_operation_paused(move _125, move _128) -> [return: bb46, unwind: bb894];
    }

    bb46: {
        switchInt(move _124) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_126);
        StorageLive(_130);
        _130 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _1864 = const _;
        _141 = &(*_1864);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_130;
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _148) -> [return: bb49, unwind: bb894];
    }

    bb48: {
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_126);
        StorageLive(_129);
        _129 = ();
        _123 = std::result::Result::<(), error::ErrorCode>::Ok(move _129);
        StorageDead(_129);
        goto -> bb61;
    }

    bb49: {
        StorageDead(_148);
        _146 = [move _147];
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb50, unwind: bb894];
    }

    bb50: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb51, unwind: bb894];
    }

    bb51: {
        StorageDead(_138);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb52, unwind: bb863];
    }

    bb52: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb53, unwind: bb863];
    }

    bb53: {
        StorageDead(_132);
        drop(_136) -> [return: bb54, unwind: bb894];
    }

    bb54: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _1863 = const _;
        _160 = &(*_1863);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_1;
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _167) -> [return: bb55, unwind: bb894];
    }

    bb55: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb56, unwind: bb894];
    }

    bb56: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb57, unwind: bb894];
    }

    bb57: {
        StorageDead(_157);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb58, unwind: bb862];
    }

    bb58: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb59, unwind: bb862];
    }

    bb59: {
        StorageDead(_151);
        drop(_155) -> [return: bb60, unwind: bb894];
    }

    bb60: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_169);
        _169 = _130;
        _123 = std::result::Result::<(), error::ErrorCode>::Err(move _169);
        StorageDead(_169);
        StorageDead(_130);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_124);
        _122 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _123) -> [return: bb62, unwind: bb894];
    }

    bb62: {
        StorageDead(_123);
        _170 = discriminant(_122);
        switchInt(move _170) -> [0: bb63, 1: bb64, otherwise: bb18];
    }

    bb63: {
        StorageLive(_174);
        _174 = ((_122 as Continue).0: ());
        _121 = _174;
        StorageDead(_174);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = ((*_8).27: u8);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_110;
        _181 = <Ref<'_, SpotMarket> as Deref>::deref(move _182) -> [return: bb66, unwind: bb894];
    }

    bb64: {
        StorageLive(_171);
        _171 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb65, unwind: bb894];
    }

    bb65: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb879;
    }

    bb66: {
        StorageDead(_182);
        _180 = ((*_181).62: u8);
        _178 = Eq(move _179, move _180);
        switchInt(move _178) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_183);
        _183 = ();
        _177 = std::result::Result::<(), error::ErrorCode>::Ok(move _183);
        StorageDead(_183);
        goto -> bb83;
    }

    bb68: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_184);
        _184 = error::ErrorCode::InvalidPoolId;
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _1862 = const _;
        _195 = &(*_1862);
        _194 = &(*_195);
        _193 = move _194 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_194);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &_184;
        _202 = &(*_203);
        _201 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _202) -> [return: bb69, unwind: bb894];
    }

    bb69: {
        StorageDead(_202);
        _200 = [move _201];
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = move _198 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_198);
        _192 = Arguments::<'_>::new_v1(move _193, move _197) -> [return: bb70, unwind: bb894];
    }

    bb70: {
        StorageDead(_197);
        StorageDead(_193);
        _191 = format(move _192) -> [return: bb71, unwind: bb894];
    }

    bb71: {
        StorageDead(_192);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_195);
        _190 = move _191;
        StorageDead(_191);
        _189 = &_190;
        _188 = &(*_189);
        _187 = <String as Deref>::deref(move _188) -> [return: bb72, unwind: bb861];
    }

    bb72: {
        _186 = &(*_187);
        StorageDead(_188);
        _185 = solana_program::log::sol_log(move _186) -> [return: bb73, unwind: bb861];
    }

    bb73: {
        StorageDead(_186);
        drop(_190) -> [return: bb74, unwind: bb894];
    }

    bb74: {
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_185);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _1861 = const _;
        _214 = &(*_1861);
        _213 = &(*_214);
        _212 = move _213 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_213);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &((*_8).27: u8);
        _221 = &(*_222);
        _220 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _221) -> [return: bb75, unwind: bb894];
    }

    bb75: {
        StorageDead(_221);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_110;
        _226 = <Ref<'_, SpotMarket> as Deref>::deref(move _227) -> [return: bb76, unwind: bb894];
    }

    bb76: {
        StorageDead(_227);
        _225 = &((*_226).62: u8);
        _224 = &(*_225);
        _223 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _224) -> [return: bb77, unwind: bb894];
    }

    bb77: {
        StorageDead(_224);
        _219 = [move _220, move _223];
        StorageDead(_223);
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = move _217 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_217);
        _211 = Arguments::<'_>::new_v1(move _212, move _216) -> [return: bb78, unwind: bb894];
    }

    bb78: {
        StorageDead(_216);
        StorageDead(_212);
        _210 = format(move _211) -> [return: bb79, unwind: bb894];
    }

    bb79: {
        StorageDead(_211);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_214);
        _209 = move _210;
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = <String as Deref>::deref(move _207) -> [return: bb80, unwind: bb860];
    }

    bb80: {
        _205 = &(*_206);
        StorageDead(_207);
        _204 = solana_program::log::sol_log(move _205) -> [return: bb81, unwind: bb860];
    }

    bb81: {
        StorageDead(_205);
        drop(_209) -> [return: bb82, unwind: bb894];
    }

    bb82: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_204);
        StorageLive(_228);
        _228 = _184;
        _177 = std::result::Result::<(), error::ErrorCode>::Err(move _228);
        StorageDead(_228);
        StorageDead(_184);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_178);
        _176 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _177) -> [return: bb84, unwind: bb894];
    }

    bb84: {
        StorageDead(_177);
        _229 = discriminant(_176);
        switchInt(move _229) -> [0: bb85, 1: bb86, otherwise: bb18];
    }

    bb85: {
        StorageLive(_233);
        _233 = ((_176 as Continue).0: ());
        _175 = _233;
        StorageDead(_233);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_234);
        StorageLive(_235);
        _1874 = const false;
        _235 = move _110;
        _234 = std::mem::drop::<Ref<'_, SpotMarket>>(move _235) -> [return: bb88, unwind: bb894];
    }

    bb86: {
        StorageLive(_230);
        _230 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb87, unwind: bb894];
    }

    bb87: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb879;
    }

    bb88: {
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &(*_12);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_2;
        _240 = &(*_241);
        _238 = SpotMarketMap::<'_>::get_ref(move _239, move _240) -> [return: bb89, unwind: bb894];
    }

    bb89: {
        StorageDead(_240);
        StorageDead(_239);
        _237 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _238) -> [return: bb90, unwind: bb894];
    }

    bb90: {
        StorageDead(_238);
        _242 = discriminant(_237);
        switchInt(move _242) -> [0: bb91, 1: bb92, otherwise: bb18];
    }

    bb91: {
        StorageLive(_246);
        _246 = move ((_237 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1873 = const true;
        _236 = move _246;
        StorageDead(_246);
        _1881 = discriminant(_237);
        StorageDead(_241);
        StorageDead(_237);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_236;
        _252 = <Ref<'_, SpotMarket> as Deref>::deref(move _253) -> [return: bb94, unwind: bb891];
    }

    bb92: {
        StorageLive(_243);
        _243 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_245);
        _245 = _243;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _245) -> [return: bb93, unwind: bb892];
    }

    bb93: {
        StorageDead(_245);
        StorageDead(_243);
        _1879 = discriminant(_237);
        StorageDead(_241);
        StorageDead(_237);
        goto -> bb824;
    }

    bb94: {
        _251 = &(*_252);
        StorageDead(_253);
        StorageLive(_254);
        _254 = SpotOperation::Liquidation;
        _250 = SpotMarket::is_operation_paused(move _251, move _254) -> [return: bb95, unwind: bb891];
    }

    bb95: {
        switchInt(move _250) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_252);
        StorageLive(_256);
        _256 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _1860 = const _;
        _267 = &(*_1860);
        _266 = &(*_267);
        _265 = move _266 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_266);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_256;
        _274 = &(*_275);
        _273 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _274) -> [return: bb98, unwind: bb891];
    }

    bb97: {
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_252);
        StorageLive(_255);
        _255 = ();
        _249 = std::result::Result::<(), error::ErrorCode>::Ok(move _255);
        StorageDead(_255);
        goto -> bb110;
    }

    bb98: {
        StorageDead(_274);
        _272 = [move _273];
        StorageDead(_273);
        _271 = &_272;
        _270 = &(*_271);
        _269 = move _270 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_270);
        _264 = Arguments::<'_>::new_v1(move _265, move _269) -> [return: bb99, unwind: bb891];
    }

    bb99: {
        StorageDead(_269);
        StorageDead(_265);
        _263 = format(move _264) -> [return: bb100, unwind: bb891];
    }

    bb100: {
        StorageDead(_264);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_267);
        _262 = move _263;
        StorageDead(_263);
        _261 = &_262;
        _260 = &(*_261);
        _259 = <String as Deref>::deref(move _260) -> [return: bb101, unwind: bb859];
    }

    bb101: {
        _258 = &(*_259);
        StorageDead(_260);
        _257 = solana_program::log::sol_log(move _258) -> [return: bb102, unwind: bb859];
    }

    bb102: {
        StorageDead(_258);
        drop(_262) -> [return: bb103, unwind: bb891];
    }

    bb103: {
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_257);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _1859 = const _;
        _286 = &(*_1859);
        _285 = &(*_286);
        _284 = move _285 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_285);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &_2;
        _293 = &(*_294);
        _292 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _293) -> [return: bb104, unwind: bb891];
    }

    bb104: {
        StorageDead(_293);
        _291 = [move _292];
        StorageDead(_292);
        _290 = &_291;
        _289 = &(*_290);
        _288 = move _289 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_289);
        _283 = Arguments::<'_>::new_v1(move _284, move _288) -> [return: bb105, unwind: bb891];
    }

    bb105: {
        StorageDead(_288);
        StorageDead(_284);
        _282 = format(move _283) -> [return: bb106, unwind: bb891];
    }

    bb106: {
        StorageDead(_283);
        StorageDead(_294);
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_286);
        _281 = move _282;
        StorageDead(_282);
        _280 = &_281;
        _279 = &(*_280);
        _278 = <String as Deref>::deref(move _279) -> [return: bb107, unwind: bb858];
    }

    bb107: {
        _277 = &(*_278);
        StorageDead(_279);
        _276 = solana_program::log::sol_log(move _277) -> [return: bb108, unwind: bb858];
    }

    bb108: {
        StorageDead(_277);
        drop(_281) -> [return: bb109, unwind: bb891];
    }

    bb109: {
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_276);
        StorageLive(_295);
        _295 = _256;
        _249 = std::result::Result::<(), error::ErrorCode>::Err(move _295);
        StorageDead(_295);
        StorageDead(_256);
        goto -> bb110;
    }

    bb110: {
        StorageDead(_250);
        _248 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _249) -> [return: bb111, unwind: bb891];
    }

    bb111: {
        StorageDead(_249);
        _296 = discriminant(_248);
        switchInt(move _296) -> [0: bb112, 1: bb113, otherwise: bb18];
    }

    bb112: {
        StorageLive(_300);
        _300 = ((_248 as Continue).0: ());
        _247 = _300;
        StorageDead(_300);
        StorageDead(_248);
        StorageDead(_247);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = ((*_8).27: u8);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = &_236;
        _307 = <Ref<'_, SpotMarket> as Deref>::deref(move _308) -> [return: bb115, unwind: bb891];
    }

    bb113: {
        StorageLive(_297);
        _297 = ((_248 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_299);
        _299 = _297;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _299) -> [return: bb114, unwind: bb891];
    }

    bb114: {
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_248);
        StorageDead(_247);
        goto -> bb877;
    }

    bb115: {
        StorageDead(_308);
        _306 = ((*_307).62: u8);
        _304 = Eq(move _305, move _306);
        switchInt(move _304) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_309);
        _309 = ();
        _303 = std::result::Result::<(), error::ErrorCode>::Ok(move _309);
        StorageDead(_309);
        goto -> bb132;
    }

    bb117: {
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_310);
        _310 = error::ErrorCode::InvalidPoolId;
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _1858 = const _;
        _321 = &(*_1858);
        _320 = &(*_321);
        _319 = move _320 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_320);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_310;
        _328 = &(*_329);
        _327 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _328) -> [return: bb118, unwind: bb891];
    }

    bb118: {
        StorageDead(_328);
        _326 = [move _327];
        StorageDead(_327);
        _325 = &_326;
        _324 = &(*_325);
        _323 = move _324 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_324);
        _318 = Arguments::<'_>::new_v1(move _319, move _323) -> [return: bb119, unwind: bb891];
    }

    bb119: {
        StorageDead(_323);
        StorageDead(_319);
        _317 = format(move _318) -> [return: bb120, unwind: bb891];
    }

    bb120: {
        StorageDead(_318);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_321);
        _316 = move _317;
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = <String as Deref>::deref(move _314) -> [return: bb121, unwind: bb857];
    }

    bb121: {
        _312 = &(*_313);
        StorageDead(_314);
        _311 = solana_program::log::sol_log(move _312) -> [return: bb122, unwind: bb857];
    }

    bb122: {
        StorageDead(_312);
        drop(_316) -> [return: bb123, unwind: bb891];
    }

    bb123: {
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_311);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _1857 = const _;
        _340 = &(*_1857);
        _339 = &(*_340);
        _338 = move _339 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_339);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &((*_8).27: u8);
        _347 = &(*_348);
        _346 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _347) -> [return: bb124, unwind: bb891];
    }

    bb124: {
        StorageDead(_347);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_236;
        _352 = <Ref<'_, SpotMarket> as Deref>::deref(move _353) -> [return: bb125, unwind: bb891];
    }

    bb125: {
        StorageDead(_353);
        _351 = &((*_352).62: u8);
        _350 = &(*_351);
        _349 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _350) -> [return: bb126, unwind: bb891];
    }

    bb126: {
        StorageDead(_350);
        _345 = [move _346, move _349];
        StorageDead(_349);
        StorageDead(_346);
        _344 = &_345;
        _343 = &(*_344);
        _342 = move _343 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_343);
        _337 = Arguments::<'_>::new_v1(move _338, move _342) -> [return: bb127, unwind: bb891];
    }

    bb127: {
        StorageDead(_342);
        StorageDead(_338);
        _336 = format(move _337) -> [return: bb128, unwind: bb891];
    }

    bb128: {
        StorageDead(_337);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_348);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_340);
        _335 = move _336;
        StorageDead(_336);
        _334 = &_335;
        _333 = &(*_334);
        _332 = <String as Deref>::deref(move _333) -> [return: bb129, unwind: bb856];
    }

    bb129: {
        _331 = &(*_332);
        StorageDead(_333);
        _330 = solana_program::log::sol_log(move _331) -> [return: bb130, unwind: bb856];
    }

    bb130: {
        StorageDead(_331);
        drop(_335) -> [return: bb131, unwind: bb891];
    }

    bb131: {
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageLive(_354);
        _354 = _310;
        _303 = std::result::Result::<(), error::ErrorCode>::Err(move _354);
        StorageDead(_354);
        StorageDead(_310);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_304);
        _302 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _303) -> [return: bb133, unwind: bb891];
    }

    bb133: {
        StorageDead(_303);
        _355 = discriminant(_302);
        switchInt(move _355) -> [0: bb134, 1: bb135, otherwise: bb18];
    }

    bb134: {
        StorageLive(_359);
        _359 = ((_302 as Continue).0: ());
        _301 = _359;
        StorageDead(_359);
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_360);
        StorageLive(_361);
        _1873 = const false;
        _361 = move _236;
        _360 = std::mem::drop::<Ref<'_, SpotMarket>>(move _361) -> [return: bb137, unwind: bb891];
    }

    bb135: {
        StorageLive(_356);
        _356 = ((_302 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_358);
        _358 = _356;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _358) -> [return: bb136, unwind: bb891];
    }

    bb136: {
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb877;
    }

    bb137: {
        StorageDead(_361);
        StorageDead(_360);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = &(*_5);
        StorageLive(_367);
        _367 = _1;
        _365 = User::get_spot_position(move _366, move _367) -> [return: bb138, unwind: bb891];
    }

    bb138: {
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_368);
        StorageLive(_369);
        _369 = &_1;
        _368 = {closure@programs/drift/src/controller/liquidation.rs:1233:56: 1233:59} { asset_market_index: move _369 };
        StorageDead(_369);
        _364 = std::result::Result::<&SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:1233:56: 1233:59}>(move _365, move _368) -> [return: bb139, unwind: bb891];
    }

    bb139: {
        StorageDead(_368);
        StorageDead(_365);
        _363 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _364) -> [return: bb140, unwind: bb891];
    }

    bb140: {
        StorageDead(_364);
        _370 = discriminant(_363);
        switchInt(move _370) -> [0: bb141, 1: bb142, otherwise: bb18];
    }

    bb141: {
        StorageLive(_374);
        _374 = ((_363 as Continue).0: &state::user::SpotPosition);
        _362 = _374;
        StorageDead(_374);
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = &(*_5);
        StorageLive(_380);
        _380 = _2;
        _378 = User::get_spot_position(move _379, move _380) -> [return: bb144, unwind: bb891];
    }

    bb142: {
        StorageLive(_371);
        _371 = ((_363 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_373);
        _373 = _371;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _373) -> [return: bb143, unwind: bb891];
    }

    bb143: {
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_363);
        StorageDead(_362);
        goto -> bb877;
    }

    bb144: {
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_381);
        StorageLive(_382);
        _382 = &_2;
        _381 = {closure@programs/drift/src/controller/liquidation.rs:1242:18: 1242:21} { liability_market_index: move _382 };
        StorageDead(_382);
        _377 = std::result::Result::<&SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:1242:18: 1242:21}>(move _378, move _381) -> [return: bb145, unwind: bb891];
    }

    bb145: {
        StorageDead(_381);
        StorageDead(_378);
        _376 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _377) -> [return: bb146, unwind: bb891];
    }

    bb146: {
        StorageDead(_377);
        _383 = discriminant(_376);
        switchInt(move _383) -> [0: bb147, 1: bb148, otherwise: bb18];
    }

    bb147: {
        StorageLive(_387);
        _387 = ((_376 as Continue).0: &state::user::SpotPosition);
        _375 = _387;
        StorageDead(_387);
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &mut (*_8);
        StorageLive(_393);
        _393 = _1;
        _391 = User::force_get_spot_position_mut(move _392, move _393) -> [return: bb150, unwind: bb891];
    }

    bb148: {
        StorageLive(_384);
        _384 = ((_376 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_386);
        _386 = _384;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _386) -> [return: bb149, unwind: bb891];
    }

    bb149: {
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_376);
        StorageDead(_375);
        goto -> bb877;
    }

    bb150: {
        StorageDead(_393);
        StorageDead(_392);
        StorageLive(_394);
        _394 = {closure@programs/drift/src/controller/liquidation.rs:1252:18: 1252:21};
        _390 = std::result::Result::<&mut SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:1252:18: 1252:21}>(move _391, move _394) -> [return: bb151, unwind: bb891];
    }

    bb151: {
        StorageDead(_394);
        StorageDead(_391);
        _389 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _390) -> [return: bb152, unwind: bb891];
    }

    bb152: {
        StorageDead(_390);
        _395 = discriminant(_389);
        switchInt(move _395) -> [0: bb153, 1: bb154, otherwise: bb18];
    }

    bb153: {
        StorageLive(_399);
        _399 = move ((_389 as Continue).0: &mut state::user::SpotPosition);
        _388 = move _399;
        StorageDead(_399);
        StorageDead(_389);
        StorageDead(_388);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &mut (*_8);
        StorageLive(_405);
        _405 = _2;
        _403 = User::force_get_spot_position_mut(move _404, move _405) -> [return: bb156, unwind: bb891];
    }

    bb154: {
        StorageLive(_396);
        _396 = ((_389 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_398);
        _398 = _396;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _398) -> [return: bb155, unwind: bb891];
    }

    bb155: {
        StorageDead(_398);
        StorageDead(_396);
        StorageDead(_389);
        StorageDead(_388);
        goto -> bb877;
    }

    bb156: {
        StorageDead(_405);
        StorageDead(_404);
        StorageLive(_406);
        _406 = {closure@programs/drift/src/controller/liquidation.rs:1259:18: 1259:21};
        _402 = std::result::Result::<&mut SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:1259:18: 1259:21}>(move _403, move _406) -> [return: bb157, unwind: bb891];
    }

    bb157: {
        StorageDead(_406);
        StorageDead(_403);
        _401 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _402) -> [return: bb158, unwind: bb891];
    }

    bb158: {
        StorageDead(_402);
        _407 = discriminant(_401);
        switchInt(move _407) -> [0: bb159, 1: bb160, otherwise: bb18];
    }

    bb159: {
        StorageLive(_411);
        _411 = move ((_401 as Continue).0: &mut state::user::SpotPosition);
        _400 = move _411;
        StorageDead(_411);
        StorageDead(_401);
        StorageDead(_400);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &(*_12);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_1;
        _424 = &(*_425);
        _422 = SpotMarketMap::<'_>::get_ref_mut(move _423, move _424) -> [return: bb162, unwind: bb891];
    }

    bb160: {
        StorageLive(_408);
        _408 = ((_401 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_410);
        _410 = _408;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _410) -> [return: bb161, unwind: bb891];
    }

    bb161: {
        StorageDead(_410);
        StorageDead(_408);
        StorageDead(_401);
        StorageDead(_400);
        goto -> bb877;
    }

    bb162: {
        StorageDead(_424);
        StorageDead(_423);
        _421 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _422) -> [return: bb163, unwind: bb891];
    }

    bb163: {
        StorageDead(_422);
        _426 = discriminant(_421);
        switchInt(move _426) -> [0: bb164, 1: bb165, otherwise: bb18];
    }

    bb164: {
        StorageLive(_430);
        _430 = move ((_421 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _420 = move _430;
        StorageDead(_430);
        _1885 = discriminant(_421);
        StorageDead(_425);
        StorageDead(_421);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &mut (*_13);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &_420;
        _441 = <RefMut<'_, SpotMarket> as Deref>::deref(move _442) -> [return: bb167, unwind: bb855];
    }

    bb165: {
        StorageLive(_427);
        _427 = ((_421 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_429);
        _429 = _427;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _429) -> [return: bb166, unwind: bb889];
    }

    bb166: {
        StorageDead(_429);
        StorageDead(_427);
        _1883 = discriminant(_421);
        StorageDead(_425);
        StorageDead(_421);
        goto -> bb822;
    }

    bb167: {
        _440 = &(*_441);
        StorageDead(_442);
        _439 = SpotMarket::oracle_id(move _440) -> [return: bb168, unwind: bb855];
    }

    bb168: {
        StorageDead(_440);
        _438 = &_439;
        _437 = &(*_438);
        _435 = OracleMap::<'_>::get_price_data_and_guard_rails(move _436, move _437) -> [return: bb169, unwind: bb855];
    }

    bb169: {
        StorageDead(_437);
        StorageDead(_436);
        _434 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as Try>::branch(move _435) -> [return: bb170, unwind: bb855];
    }

    bb170: {
        StorageDead(_435);
        _443 = discriminant(_434);
        switchInt(move _443) -> [0: bb171, 1: bb172, otherwise: bb18];
    }

    bb171: {
        StorageLive(_447);
        _447 = ((_434 as Continue).0: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails));
        _433 = _447;
        StorageDead(_447);
        StorageLive(_431);
        _431 = (_433.0: &state::oracle::OraclePriceData);
        StorageLive(_432);
        _432 = (_433.1: &state::state::ValidityGuardRails);
        StorageDead(_441);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &mut _420;
        _453 = &mut (*_454);
        _452 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _453) -> [return: bb174, unwind: bb855];
    }

    bb172: {
        StorageLive(_444);
        _444 = ((_434 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_446);
        _446 = _444;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _446) -> [return: bb173, unwind: bb855];
    }

    bb173: {
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_441);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb821;
    }

    bb174: {
        _451 = &mut (*_452);
        StorageDead(_453);
        StorageLive(_455);
        _455 = &(*_431);
        StorageLive(_456);
        _456 = &(*_432);
        StorageLive(_457);
        _457 = _14;
        StorageLive(_458);
        StorageLive(_459);
        _459 = DriftAction::Liquidate;
        _458 = Option::<DriftAction>::Some(move _459);
        StorageDead(_459);
        _450 = update_spot_market_and_check_validity(move _451, move _455, move _456, move _457, move _458) -> [return: bb175, unwind: bb855];
    }

    bb175: {
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_451);
        _449 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _450) -> [return: bb176, unwind: bb855];
    }

    bb176: {
        StorageDead(_450);
        _460 = discriminant(_449);
        switchInt(move _460) -> [0: bb177, 1: bb178, otherwise: bb18];
    }

    bb177: {
        StorageLive(_464);
        _464 = ((_449 as Continue).0: ());
        _448 = _464;
        StorageDead(_464);
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_449);
        StorageDead(_448);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        _468 = &(*_5);
        StorageLive(_469);
        _469 = _1;
        _467 = User::get_spot_position(move _468, move _469) -> [return: bb180, unwind: bb855];
    }

    bb178: {
        StorageLive(_461);
        _461 = ((_449 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_463);
        _463 = _461;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _463) -> [return: bb179, unwind: bb855];
    }

    bb179: {
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_449);
        StorageDead(_448);
        goto -> bb820;
    }

    bb180: {
        StorageDead(_469);
        StorageDead(_468);
        _466 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _467) -> [return: bb181, unwind: bb855];
    }

    bb181: {
        StorageDead(_467);
        _470 = discriminant(_466);
        switchInt(move _470) -> [0: bb182, 1: bb183, otherwise: bb18];
    }

    bb182: {
        StorageLive(_474);
        _474 = ((_466 as Continue).0: &state::user::SpotPosition);
        _465 = _474;
        StorageDead(_474);
        StorageDead(_466);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = &((*_465).5: state::spot_market::SpotBalanceType);
        StorageLive(_480);
        _1856 = const _;
        _480 = &(*_1856);
        _478 = <SpotBalanceType as PartialEq>::eq(move _479, move _480) -> [return: bb185, unwind: bb855];
    }

    bb183: {
        StorageLive(_471);
        _471 = ((_466 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_473);
        _473 = _471;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _473) -> [return: bb184, unwind: bb855];
    }

    bb184: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_466);
        goto -> bb819;
    }

    bb185: {
        switchInt(move _478) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        StorageDead(_480);
        StorageDead(_479);
        StorageLive(_482);
        _482 = ();
        _477 = std::result::Result::<(), error::ErrorCode>::Ok(move _482);
        StorageDead(_482);
        goto -> bb195;
    }

    bb187: {
        StorageDead(_480);
        StorageDead(_479);
        StorageLive(_483);
        _483 = error::ErrorCode::WrongSpotBalanceType;
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _1855 = const _;
        _494 = &(*_1855);
        _493 = &(*_494);
        _492 = move _493 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_493);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &_483;
        _501 = &(*_502);
        _500 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _501) -> [return: bb188, unwind: bb855];
    }

    bb188: {
        StorageDead(_501);
        _499 = [move _500];
        StorageDead(_500);
        _498 = &_499;
        _497 = &(*_498);
        _496 = move _497 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_497);
        _491 = Arguments::<'_>::new_v1(move _492, move _496) -> [return: bb189, unwind: bb855];
    }

    bb189: {
        StorageDead(_496);
        StorageDead(_492);
        _490 = format(move _491) -> [return: bb190, unwind: bb855];
    }

    bb190: {
        StorageDead(_491);
        StorageDead(_502);
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_494);
        _489 = move _490;
        StorageDead(_490);
        _488 = &_489;
        _487 = &(*_488);
        _486 = <String as Deref>::deref(move _487) -> [return: bb191, unwind: bb854];
    }

    bb191: {
        _485 = &(*_486);
        StorageDead(_487);
        _484 = solana_program::log::sol_log(move _485) -> [return: bb192, unwind: bb854];
    }

    bb192: {
        StorageDead(_485);
        drop(_489) -> [return: bb193, unwind: bb855];
    }

    bb193: {
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_484);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = const "User did not have a deposit for the asset market index";
        _504 = &(*_505);
        _503 = solana_program::log::sol_log(move _504) -> [return: bb194, unwind: bb855];
    }

    bb194: {
        StorageDead(_504);
        StorageDead(_505);
        StorageDead(_503);
        StorageLive(_506);
        _506 = _483;
        _477 = std::result::Result::<(), error::ErrorCode>::Err(move _506);
        StorageDead(_506);
        StorageDead(_483);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_478);
        _476 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _477) -> [return: bb196, unwind: bb855];
    }

    bb196: {
        StorageDead(_477);
        _507 = discriminant(_476);
        switchInt(move _507) -> [0: bb197, 1: bb198, otherwise: bb18];
    }

    bb197: {
        StorageLive(_511);
        _511 = ((_476 as Continue).0: ());
        _475 = _511;
        StorageDead(_511);
        StorageDead(_476);
        StorageDead(_475);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &(*_465);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = &_420;
        _518 = &(*_519);
        _517 = <RefMut<'_, SpotMarket> as Deref>::deref(move _518) -> [return: bb200, unwind: bb855];
    }

    bb198: {
        StorageLive(_508);
        _508 = ((_476 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_510);
        _510 = _508;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _510) -> [return: bb199, unwind: bb855];
    }

    bb199: {
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_476);
        StorageDead(_475);
        goto -> bb819;
    }

    bb200: {
        _516 = &(*_517);
        StorageDead(_518);
        _514 = SpotPosition::get_token_amount(move _515, move _516) -> [return: bb201, unwind: bb855];
    }

    bb201: {
        StorageDead(_516);
        StorageDead(_515);
        _513 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _514) -> [return: bb202, unwind: bb855];
    }

    bb202: {
        StorageDead(_514);
        _520 = discriminant(_513);
        switchInt(move _520) -> [0: bb203, 1: bb204, otherwise: bb18];
    }

    bb203: {
        StorageLive(_524);
        _524 = ((_513 as Continue).0: u128);
        _512 = _524;
        StorageDead(_524);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_513);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        _529 = _512;
        _528 = Ne(move _529, const 0_u128);
        switchInt(move _528) -> [0: bb207, otherwise: bb206];
    }

    bb204: {
        StorageLive(_521);
        _521 = ((_513 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_523);
        _523 = _521;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _523) -> [return: bb205, unwind: bb855];
    }

    bb205: {
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_513);
        goto -> bb818;
    }

    bb206: {
        StorageDead(_529);
        StorageLive(_530);
        _530 = ();
        _527 = std::result::Result::<(), error::ErrorCode>::Ok(move _530);
        StorageDead(_530);
        goto -> bb220;
    }

    bb207: {
        StorageDead(_529);
        StorageLive(_531);
        _531 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _1854 = const _;
        _542 = &(*_1854);
        _541 = &(*_542);
        _540 = move _541 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_541);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        _550 = &_531;
        _549 = &(*_550);
        _548 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _549) -> [return: bb208, unwind: bb855];
    }

    bb208: {
        StorageDead(_549);
        _547 = [move _548];
        StorageDead(_548);
        _546 = &_547;
        _545 = &(*_546);
        _544 = move _545 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_545);
        _539 = Arguments::<'_>::new_v1(move _540, move _544) -> [return: bb209, unwind: bb855];
    }

    bb209: {
        StorageDead(_544);
        StorageDead(_540);
        _538 = format(move _539) -> [return: bb210, unwind: bb855];
    }

    bb210: {
        StorageDead(_539);
        StorageDead(_550);
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_542);
        _537 = move _538;
        StorageDead(_538);
        _536 = &_537;
        _535 = &(*_536);
        _534 = <String as Deref>::deref(move _535) -> [return: bb211, unwind: bb853];
    }

    bb211: {
        _533 = &(*_534);
        StorageDead(_535);
        _532 = solana_program::log::sol_log(move _533) -> [return: bb212, unwind: bb853];
    }

    bb212: {
        StorageDead(_533);
        drop(_537) -> [return: bb213, unwind: bb855];
    }

    bb213: {
        StorageDead(_537);
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_532);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        _1853 = const _;
        _561 = &(*_1853);
        _560 = &(*_561);
        _559 = move _560 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_560);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        _569 = &_1;
        _568 = &(*_569);
        _567 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _568) -> [return: bb214, unwind: bb855];
    }

    bb214: {
        StorageDead(_568);
        _566 = [move _567];
        StorageDead(_567);
        _565 = &_566;
        _564 = &(*_565);
        _563 = move _564 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_564);
        _558 = Arguments::<'_>::new_v1(move _559, move _563) -> [return: bb215, unwind: bb855];
    }

    bb215: {
        StorageDead(_563);
        StorageDead(_559);
        _557 = format(move _558) -> [return: bb216, unwind: bb855];
    }

    bb216: {
        StorageDead(_558);
        StorageDead(_569);
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_561);
        _556 = move _557;
        StorageDead(_557);
        _555 = &_556;
        _554 = &(*_555);
        _553 = <String as Deref>::deref(move _554) -> [return: bb217, unwind: bb852];
    }

    bb217: {
        _552 = &(*_553);
        StorageDead(_554);
        _551 = solana_program::log::sol_log(move _552) -> [return: bb218, unwind: bb852];
    }

    bb218: {
        StorageDead(_552);
        drop(_556) -> [return: bb219, unwind: bb855];
    }

    bb219: {
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_553);
        StorageDead(_551);
        StorageLive(_570);
        _570 = _531;
        _527 = std::result::Result::<(), error::ErrorCode>::Err(move _570);
        StorageDead(_570);
        StorageDead(_531);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_528);
        _526 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _527) -> [return: bb221, unwind: bb855];
    }

    bb221: {
        StorageDead(_527);
        _571 = discriminant(_526);
        switchInt(move _571) -> [0: bb222, 1: bb223, otherwise: bb18];
    }

    bb222: {
        StorageLive(_575);
        _575 = ((_526 as Continue).0: ());
        _525 = _575;
        StorageDead(_575);
        StorageDead(_526);
        StorageDead(_525);
        StorageLive(_576);
        _576 = ((*_431).0: i64);
        StorageLive(_577);
        _577 = _512;
        StorageLive(_578);
        _578 = _576;
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        _581 = &_420;
        _580 = <RefMut<'_, SpotMarket> as Deref>::deref(move _581) -> [return: bb225, unwind: bb855];
    }

    bb223: {
        StorageLive(_572);
        _572 = ((_526 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_574);
        _574 = _572;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _574) -> [return: bb224, unwind: bb855];
    }

    bb224: {
        StorageDead(_574);
        StorageDead(_572);
        StorageDead(_526);
        StorageDead(_525);
        goto -> bb818;
    }

    bb225: {
        StorageDead(_581);
        _579 = ((*_580).41: u32);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = &_420;
        _583 = <RefMut<'_, SpotMarket> as Deref>::deref(move _584) -> [return: bb226, unwind: bb855];
    }

    bb226: {
        StorageDead(_584);
        _582 = ((*_583).32: u32);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        _590 = &_420;
        _589 = <RefMut<'_, SpotMarket> as Deref>::deref(move _590) -> [return: bb227, unwind: bb855];
    }

    bb227: {
        StorageDead(_590);
        _588 = ((*_589).36: u32);
        StorageLive(_591);
        _591 = LiquidationMultiplierType::Premium;
        _587 = calculate_liquidation_multiplier(move _588, move _591) -> [return: bb228, unwind: bb855];
    }

    bb228: {
        StorageDead(_591);
        StorageDead(_588);
        _586 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _587) -> [return: bb229, unwind: bb855];
    }

    bb229: {
        StorageDead(_587);
        _592 = discriminant(_586);
        switchInt(move _592) -> [0: bb230, 1: bb231, otherwise: bb18];
    }

    bb230: {
        StorageLive(_596);
        _596 = ((_586 as Continue).0: u32);
        _585 = _596;
        StorageDead(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = &_420;
        _598 = <RefMut<'_, SpotMarket> as Deref>::deref(move _599) -> [return: bb233, unwind: bb855];
    }

    bb231: {
        StorageLive(_593);
        _593 = ((_586 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_595);
        _595 = _593;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _595) -> [return: bb232, unwind: bb855];
    }

    bb232: {
        StorageDead(_595);
        StorageDead(_593);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_576);
        StorageDead(_512);
        StorageDead(_465);
        StorageDead(_432);
        StorageDead(_431);
        drop(_420) -> [return: bb817, unwind: bb891];
    }

    bb233: {
        StorageDead(_599);
        _597 = ((*_598).62: u8);
        StorageLive(_600);
        _600 = ((*_431).2: i64);
        _419 = (move _577, move _578, move _579, move _582, move _585, move _597, move _600);
        StorageDead(_600);
        StorageDead(_597);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_576);
        StorageDead(_512);
        StorageDead(_465);
        StorageDead(_432);
        StorageDead(_431);
        drop(_420) -> [return: bb234, unwind: bb891];
    }

    bb234: {
        StorageDead(_420);
        StorageLive(_412);
        _412 = (_419.0: u128);
        StorageLive(_413);
        _413 = (_419.1: i64);
        StorageLive(_414);
        _414 = (_419.2: u32);
        StorageLive(_415);
        _415 = (_419.3: u32);
        StorageLive(_416);
        _416 = (_419.4: u32);
        StorageLive(_417);
        _417 = (_419.5: u8);
        StorageLive(_418);
        _418 = (_419.6: i64);
        StorageDead(_598);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_583);
        StorageDead(_580);
        StorageDead(_419);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        _612 = &(*_12);
        StorageLive(_613);
        StorageLive(_614);
        _614 = &_2;
        _613 = &(*_614);
        _611 = SpotMarketMap::<'_>::get_ref_mut(move _612, move _613) -> [return: bb235, unwind: bb891];
    }

    bb235: {
        StorageDead(_613);
        StorageDead(_612);
        _610 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _611) -> [return: bb236, unwind: bb891];
    }

    bb236: {
        StorageDead(_611);
        _615 = discriminant(_610);
        switchInt(move _615) -> [0: bb237, 1: bb238, otherwise: bb18];
    }

    bb237: {
        StorageLive(_619);
        _619 = move ((_610 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _609 = move _619;
        StorageDead(_619);
        _1889 = discriminant(_610);
        StorageDead(_614);
        StorageDead(_610);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        _625 = &mut (*_13);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _631 = &_609;
        _630 = <RefMut<'_, SpotMarket> as Deref>::deref(move _631) -> [return: bb240, unwind: bb851];
    }

    bb238: {
        StorageLive(_616);
        _616 = ((_610 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_618);
        _618 = _616;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _618) -> [return: bb239, unwind: bb888];
    }

    bb239: {
        StorageDead(_618);
        StorageDead(_616);
        _1887 = discriminant(_610);
        StorageDead(_614);
        StorageDead(_610);
        goto -> bb814;
    }

    bb240: {
        _629 = &(*_630);
        StorageDead(_631);
        _628 = SpotMarket::oracle_id(move _629) -> [return: bb241, unwind: bb851];
    }

    bb241: {
        StorageDead(_629);
        _627 = &_628;
        _626 = &(*_627);
        _624 = OracleMap::<'_>::get_price_data_and_guard_rails(move _625, move _626) -> [return: bb242, unwind: bb851];
    }

    bb242: {
        StorageDead(_626);
        StorageDead(_625);
        _623 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as Try>::branch(move _624) -> [return: bb243, unwind: bb851];
    }

    bb243: {
        StorageDead(_624);
        _632 = discriminant(_623);
        switchInt(move _632) -> [0: bb244, 1: bb245, otherwise: bb18];
    }

    bb244: {
        StorageLive(_636);
        _636 = ((_623 as Continue).0: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails));
        _622 = _636;
        StorageDead(_636);
        StorageLive(_620);
        _620 = (_622.0: &state::oracle::OraclePriceData);
        StorageLive(_621);
        _621 = (_622.1: &state::state::ValidityGuardRails);
        StorageDead(_630);
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_623);
        StorageDead(_622);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        _643 = &mut _609;
        _642 = &mut (*_643);
        _641 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _642) -> [return: bb247, unwind: bb851];
    }

    bb245: {
        StorageLive(_633);
        _633 = ((_623 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_635);
        _635 = _633;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _635) -> [return: bb246, unwind: bb851];
    }

    bb246: {
        StorageDead(_635);
        StorageDead(_633);
        StorageDead(_630);
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_623);
        StorageDead(_622);
        goto -> bb813;
    }

    bb247: {
        _640 = &mut (*_641);
        StorageDead(_642);
        StorageLive(_644);
        _644 = &(*_620);
        StorageLive(_645);
        _645 = &(*_621);
        StorageLive(_646);
        _646 = _14;
        StorageLive(_647);
        StorageLive(_648);
        _648 = DriftAction::Liquidate;
        _647 = Option::<DriftAction>::Some(move _648);
        StorageDead(_648);
        _639 = update_spot_market_and_check_validity(move _640, move _644, move _645, move _646, move _647) -> [return: bb248, unwind: bb851];
    }

    bb248: {
        StorageDead(_647);
        StorageDead(_646);
        StorageDead(_645);
        StorageDead(_644);
        StorageDead(_640);
        _638 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _639) -> [return: bb249, unwind: bb851];
    }

    bb249: {
        StorageDead(_639);
        _649 = discriminant(_638);
        switchInt(move _649) -> [0: bb250, 1: bb251, otherwise: bb18];
    }

    bb250: {
        StorageLive(_653);
        _653 = ((_638 as Continue).0: ());
        _637 = _653;
        StorageDead(_653);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_638);
        StorageDead(_637);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        _657 = &(*_5);
        StorageLive(_658);
        _658 = _2;
        _656 = User::get_spot_position(move _657, move _658) -> [return: bb253, unwind: bb851];
    }

    bb251: {
        StorageLive(_650);
        _650 = ((_638 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_652);
        _652 = _650;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _652) -> [return: bb252, unwind: bb851];
    }

    bb252: {
        StorageDead(_652);
        StorageDead(_650);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_638);
        StorageDead(_637);
        goto -> bb812;
    }

    bb253: {
        StorageDead(_658);
        StorageDead(_657);
        _655 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _656) -> [return: bb254, unwind: bb851];
    }

    bb254: {
        StorageDead(_656);
        _659 = discriminant(_655);
        switchInt(move _659) -> [0: bb255, 1: bb256, otherwise: bb18];
    }

    bb255: {
        StorageLive(_663);
        _663 = ((_655 as Continue).0: &state::user::SpotPosition);
        _654 = _663;
        StorageDead(_663);
        StorageDead(_655);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        _668 = &((*_654).5: state::spot_market::SpotBalanceType);
        StorageLive(_669);
        _1852 = const _;
        _669 = &(*_1852);
        _667 = <SpotBalanceType as PartialEq>::eq(move _668, move _669) -> [return: bb258, unwind: bb851];
    }

    bb256: {
        StorageLive(_660);
        _660 = ((_655 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_662);
        _662 = _660;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _662) -> [return: bb257, unwind: bb851];
    }

    bb257: {
        StorageDead(_662);
        StorageDead(_660);
        StorageDead(_655);
        goto -> bb811;
    }

    bb258: {
        switchInt(move _667) -> [0: bb260, otherwise: bb259];
    }

    bb259: {
        StorageDead(_669);
        StorageDead(_668);
        StorageLive(_671);
        _671 = ();
        _666 = std::result::Result::<(), error::ErrorCode>::Ok(move _671);
        StorageDead(_671);
        goto -> bb268;
    }

    bb260: {
        StorageDead(_669);
        StorageDead(_668);
        StorageLive(_672);
        _672 = error::ErrorCode::WrongSpotBalanceType;
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        _1851 = const _;
        _683 = &(*_1851);
        _682 = &(*_683);
        _681 = move _682 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_682);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        _691 = &_672;
        _690 = &(*_691);
        _689 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _690) -> [return: bb261, unwind: bb851];
    }

    bb261: {
        StorageDead(_690);
        _688 = [move _689];
        StorageDead(_689);
        _687 = &_688;
        _686 = &(*_687);
        _685 = move _686 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_686);
        _680 = Arguments::<'_>::new_v1(move _681, move _685) -> [return: bb262, unwind: bb851];
    }

    bb262: {
        StorageDead(_685);
        StorageDead(_681);
        _679 = format(move _680) -> [return: bb263, unwind: bb851];
    }

    bb263: {
        StorageDead(_680);
        StorageDead(_691);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_683);
        _678 = move _679;
        StorageDead(_679);
        _677 = &_678;
        _676 = &(*_677);
        _675 = <String as Deref>::deref(move _676) -> [return: bb264, unwind: bb850];
    }

    bb264: {
        _674 = &(*_675);
        StorageDead(_676);
        _673 = solana_program::log::sol_log(move _674) -> [return: bb265, unwind: bb850];
    }

    bb265: {
        StorageDead(_674);
        drop(_678) -> [return: bb266, unwind: bb851];
    }

    bb266: {
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_675);
        StorageDead(_673);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = const "User did not have a borrow for the liability market index";
        _693 = &(*_694);
        _692 = solana_program::log::sol_log(move _693) -> [return: bb267, unwind: bb851];
    }

    bb267: {
        StorageDead(_693);
        StorageDead(_694);
        StorageDead(_692);
        StorageLive(_695);
        _695 = _672;
        _666 = std::result::Result::<(), error::ErrorCode>::Err(move _695);
        StorageDead(_695);
        StorageDead(_672);
        goto -> bb268;
    }

    bb268: {
        StorageDead(_667);
        _665 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _666) -> [return: bb269, unwind: bb851];
    }

    bb269: {
        StorageDead(_666);
        _696 = discriminant(_665);
        switchInt(move _696) -> [0: bb270, 1: bb271, otherwise: bb18];
    }

    bb270: {
        StorageLive(_700);
        _700 = ((_665 as Continue).0: ());
        _664 = _700;
        StorageDead(_700);
        StorageDead(_665);
        StorageDead(_664);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        _704 = &(*_654);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _708 = &_609;
        _707 = &(*_708);
        _706 = <RefMut<'_, SpotMarket> as Deref>::deref(move _707) -> [return: bb273, unwind: bb851];
    }

    bb271: {
        StorageLive(_697);
        _697 = ((_665 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_699);
        _699 = _697;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _699) -> [return: bb272, unwind: bb851];
    }

    bb272: {
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_665);
        StorageDead(_664);
        goto -> bb811;
    }

    bb273: {
        _705 = &(*_706);
        StorageDead(_707);
        _703 = SpotPosition::get_token_amount(move _704, move _705) -> [return: bb274, unwind: bb851];
    }

    bb274: {
        StorageDead(_705);
        StorageDead(_704);
        _702 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _703) -> [return: bb275, unwind: bb851];
    }

    bb275: {
        StorageDead(_703);
        _709 = discriminant(_702);
        switchInt(move _709) -> [0: bb276, 1: bb277, otherwise: bb18];
    }

    bb276: {
        StorageLive(_713);
        _713 = ((_702 as Continue).0: u128);
        _701 = _713;
        StorageDead(_713);
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_702);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _718 = _701;
        _717 = Ne(move _718, const 0_u128);
        switchInt(move _717) -> [0: bb280, otherwise: bb279];
    }

    bb277: {
        StorageLive(_710);
        _710 = ((_702 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_712);
        _712 = _710;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _712) -> [return: bb278, unwind: bb851];
    }

    bb278: {
        StorageDead(_712);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_702);
        goto -> bb810;
    }

    bb279: {
        StorageDead(_718);
        StorageLive(_719);
        _719 = ();
        _716 = std::result::Result::<(), error::ErrorCode>::Ok(move _719);
        StorageDead(_719);
        goto -> bb293;
    }

    bb280: {
        StorageDead(_718);
        StorageLive(_720);
        _720 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        _1850 = const _;
        _731 = &(*_1850);
        _730 = &(*_731);
        _729 = move _730 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_730);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        _739 = &_720;
        _738 = &(*_739);
        _737 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _738) -> [return: bb281, unwind: bb851];
    }

    bb281: {
        StorageDead(_738);
        _736 = [move _737];
        StorageDead(_737);
        _735 = &_736;
        _734 = &(*_735);
        _733 = move _734 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_734);
        _728 = Arguments::<'_>::new_v1(move _729, move _733) -> [return: bb282, unwind: bb851];
    }

    bb282: {
        StorageDead(_733);
        StorageDead(_729);
        _727 = format(move _728) -> [return: bb283, unwind: bb851];
    }

    bb283: {
        StorageDead(_728);
        StorageDead(_739);
        StorageDead(_736);
        StorageDead(_735);
        StorageDead(_731);
        _726 = move _727;
        StorageDead(_727);
        _725 = &_726;
        _724 = &(*_725);
        _723 = <String as Deref>::deref(move _724) -> [return: bb284, unwind: bb849];
    }

    bb284: {
        _722 = &(*_723);
        StorageDead(_724);
        _721 = solana_program::log::sol_log(move _722) -> [return: bb285, unwind: bb849];
    }

    bb285: {
        StorageDead(_722);
        drop(_726) -> [return: bb286, unwind: bb851];
    }

    bb286: {
        StorageDead(_726);
        StorageDead(_725);
        StorageDead(_723);
        StorageDead(_721);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _1849 = const _;
        _750 = &(*_1849);
        _749 = &(*_750);
        _748 = move _749 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_749);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        _758 = &_2;
        _757 = &(*_758);
        _756 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _757) -> [return: bb287, unwind: bb851];
    }

    bb287: {
        StorageDead(_757);
        _755 = [move _756];
        StorageDead(_756);
        _754 = &_755;
        _753 = &(*_754);
        _752 = move _753 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_753);
        _747 = Arguments::<'_>::new_v1(move _748, move _752) -> [return: bb288, unwind: bb851];
    }

    bb288: {
        StorageDead(_752);
        StorageDead(_748);
        _746 = format(move _747) -> [return: bb289, unwind: bb851];
    }

    bb289: {
        StorageDead(_747);
        StorageDead(_758);
        StorageDead(_755);
        StorageDead(_754);
        StorageDead(_750);
        _745 = move _746;
        StorageDead(_746);
        _744 = &_745;
        _743 = &(*_744);
        _742 = <String as Deref>::deref(move _743) -> [return: bb290, unwind: bb848];
    }

    bb290: {
        _741 = &(*_742);
        StorageDead(_743);
        _740 = solana_program::log::sol_log(move _741) -> [return: bb291, unwind: bb848];
    }

    bb291: {
        StorageDead(_741);
        drop(_745) -> [return: bb292, unwind: bb851];
    }

    bb292: {
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_742);
        StorageDead(_740);
        StorageLive(_759);
        _759 = _720;
        _716 = std::result::Result::<(), error::ErrorCode>::Err(move _759);
        StorageDead(_759);
        StorageDead(_720);
        goto -> bb293;
    }

    bb293: {
        StorageDead(_717);
        _715 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _716) -> [return: bb294, unwind: bb851];
    }

    bb294: {
        StorageDead(_716);
        _760 = discriminant(_715);
        switchInt(move _760) -> [0: bb295, 1: bb296, otherwise: bb18];
    }

    bb295: {
        StorageLive(_764);
        _764 = ((_715 as Continue).0: ());
        _714 = _764;
        StorageDead(_764);
        StorageDead(_715);
        StorageDead(_714);
        StorageLive(_765);
        _765 = ((*_620).0: i64);
        StorageLive(_766);
        _766 = _701;
        StorageLive(_767);
        _767 = _765;
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _770 = &_609;
        _769 = <RefMut<'_, SpotMarket> as Deref>::deref(move _770) -> [return: bb298, unwind: bb851];
    }

    bb296: {
        StorageLive(_761);
        _761 = ((_715 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_763);
        _763 = _761;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _763) -> [return: bb297, unwind: bb851];
    }

    bb297: {
        StorageDead(_763);
        StorageDead(_761);
        StorageDead(_715);
        StorageDead(_714);
        goto -> bb810;
    }

    bb298: {
        StorageDead(_770);
        _768 = ((*_769).41: u32);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = &_609;
        _772 = <RefMut<'_, SpotMarket> as Deref>::deref(move _773) -> [return: bb299, unwind: bb851];
    }

    bb299: {
        StorageDead(_773);
        _771 = ((*_772).34: u32);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        _779 = &_609;
        _778 = <RefMut<'_, SpotMarket> as Deref>::deref(move _779) -> [return: bb300, unwind: bb851];
    }

    bb300: {
        StorageDead(_779);
        _777 = ((*_778).36: u32);
        StorageLive(_780);
        _780 = LiquidationMultiplierType::Discount;
        _776 = calculate_liquidation_multiplier(move _777, move _780) -> [return: bb301, unwind: bb851];
    }

    bb301: {
        StorageDead(_780);
        StorageDead(_777);
        _775 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _776) -> [return: bb302, unwind: bb851];
    }

    bb302: {
        StorageDead(_776);
        _781 = discriminant(_775);
        switchInt(move _781) -> [0: bb303, 1: bb304, otherwise: bb18];
    }

    bb303: {
        StorageLive(_785);
        _785 = ((_775 as Continue).0: u32);
        _774 = _785;
        StorageDead(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        _788 = &_609;
        _787 = <RefMut<'_, SpotMarket> as Deref>::deref(move _788) -> [return: bb306, unwind: bb851];
    }

    bb304: {
        StorageLive(_782);
        _782 = ((_775 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_784);
        _784 = _782;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _784) -> [return: bb305, unwind: bb851];
    }

    bb305: {
        StorageDead(_784);
        StorageDead(_782);
        StorageDead(_774);
        StorageDead(_771);
        StorageDead(_768);
        StorageDead(_767);
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_701);
        StorageDead(_654);
        StorageDead(_621);
        StorageDead(_620);
        drop(_609) -> [return: bb809, unwind: bb891];
    }

    bb306: {
        StorageDead(_788);
        _786 = ((*_787).62: u8);
        StorageLive(_789);
        _789 = ((*_620).2: i64);
        _608 = (move _766, move _767, move _768, move _771, move _774, move _786, move _789);
        StorageDead(_789);
        StorageDead(_786);
        StorageDead(_774);
        StorageDead(_771);
        StorageDead(_768);
        StorageDead(_767);
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_701);
        StorageDead(_654);
        StorageDead(_621);
        StorageDead(_620);
        drop(_609) -> [return: bb307, unwind: bb891];
    }

    bb307: {
        StorageDead(_609);
        StorageLive(_601);
        _601 = (_608.0: u128);
        StorageLive(_602);
        _602 = (_608.1: i64);
        StorageLive(_603);
        _603 = (_608.2: u32);
        StorageLive(_604);
        _604 = (_608.3: u32);
        StorageLive(_605);
        _605 = (_608.4: u32);
        StorageLive(_606);
        _606 = (_608.5: u8);
        StorageLive(_607);
        _607 = (_608.6: i64);
        StorageDead(_787);
        StorageDead(_778);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_769);
        StorageDead(_608);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        _792 = _417;
        _791 = Eq(move _792, const _);
        switchInt(move _791) -> [0: bb334, otherwise: bb308];
    }

    bb308: {
        StorageDead(_792);
        StorageLive(_793);
        StorageLive(_794);
        _794 = _606;
        _793 = Eq(move _794, const _);
        switchInt(move _793) -> [0: bb333, otherwise: bb309];
    }

    bb309: {
        StorageDead(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = _418;
        _798 = Eq(move _799, const 0_i64);
        switchInt(move _798) -> [0: bb313, otherwise: bb310];
    }

    bb310: {
        StorageDead(_799);
        StorageLive(_800);
        StorageLive(_801);
        _801 = _607;
        _800 = Eq(move _801, const 0_i64);
        switchInt(move _800) -> [0: bb312, otherwise: bb311];
    }

    bb311: {
        StorageDead(_801);
        StorageLive(_802);
        _802 = ();
        _797 = std::result::Result::<(), error::ErrorCode>::Ok(move _802);
        StorageDead(_802);
        goto -> bb328;
    }

    bb312: {
        StorageDead(_801);
        goto -> bb314;
    }

    bb313: {
        StorageDead(_799);
        goto -> bb314;
    }

    bb314: {
        StorageLive(_803);
        _803 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        _1848 = const _;
        _814 = &(*_1848);
        _813 = &(*_814);
        _812 = move _813 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_813);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        _822 = &_803;
        _821 = &(*_822);
        _820 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _821) -> [return: bb315, unwind: bb891];
    }

    bb315: {
        StorageDead(_821);
        _819 = [move _820];
        StorageDead(_820);
        _818 = &_819;
        _817 = &(*_818);
        _816 = move _817 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_817);
        _811 = Arguments::<'_>::new_v1(move _812, move _816) -> [return: bb316, unwind: bb891];
    }

    bb316: {
        StorageDead(_816);
        StorageDead(_812);
        _810 = format(move _811) -> [return: bb317, unwind: bb891];
    }

    bb317: {
        StorageDead(_811);
        StorageDead(_822);
        StorageDead(_819);
        StorageDead(_818);
        StorageDead(_814);
        _809 = move _810;
        StorageDead(_810);
        _808 = &_809;
        _807 = &(*_808);
        _806 = <String as Deref>::deref(move _807) -> [return: bb318, unwind: bb847];
    }

    bb318: {
        _805 = &(*_806);
        StorageDead(_807);
        _804 = solana_program::log::sol_log(move _805) -> [return: bb319, unwind: bb847];
    }

    bb319: {
        StorageDead(_805);
        drop(_809) -> [return: bb320, unwind: bb891];
    }

    bb320: {
        StorageDead(_809);
        StorageDead(_808);
        StorageDead(_806);
        StorageDead(_804);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        _1847 = const _;
        _833 = &(*_1847);
        _832 = &(*_833);
        _831 = move _832 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_832);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        _841 = &_418;
        _840 = &(*_841);
        _839 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _840) -> [return: bb321, unwind: bb891];
    }

    bb321: {
        StorageDead(_840);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        _844 = &_607;
        _843 = &(*_844);
        _842 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _843) -> [return: bb322, unwind: bb891];
    }

    bb322: {
        StorageDead(_843);
        _838 = [move _839, move _842];
        StorageDead(_842);
        StorageDead(_839);
        _837 = &_838;
        _836 = &(*_837);
        _835 = move _836 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_836);
        _830 = Arguments::<'_>::new_v1(move _831, move _835) -> [return: bb323, unwind: bb891];
    }

    bb323: {
        StorageDead(_835);
        StorageDead(_831);
        _829 = format(move _830) -> [return: bb324, unwind: bb891];
    }

    bb324: {
        StorageDead(_830);
        StorageDead(_844);
        StorageDead(_841);
        StorageDead(_838);
        StorageDead(_837);
        StorageDead(_833);
        _828 = move _829;
        StorageDead(_829);
        _827 = &_828;
        _826 = &(*_827);
        _825 = <String as Deref>::deref(move _826) -> [return: bb325, unwind: bb846];
    }

    bb325: {
        _824 = &(*_825);
        StorageDead(_826);
        _823 = solana_program::log::sol_log(move _824) -> [return: bb326, unwind: bb846];
    }

    bb326: {
        StorageDead(_824);
        drop(_828) -> [return: bb327, unwind: bb891];
    }

    bb327: {
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_825);
        StorageDead(_823);
        StorageLive(_845);
        _845 = _803;
        _797 = std::result::Result::<(), error::ErrorCode>::Err(move _845);
        StorageDead(_845);
        StorageDead(_803);
        goto -> bb328;
    }

    bb328: {
        StorageDead(_800);
        StorageDead(_798);
        _796 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _797) -> [return: bb329, unwind: bb891];
    }

    bb329: {
        StorageDead(_797);
        _846 = discriminant(_796);
        switchInt(move _846) -> [0: bb330, 1: bb331, otherwise: bb18];
    }

    bb330: {
        StorageLive(_850);
        _850 = ((_796 as Continue).0: ());
        _795 = _850;
        StorageDead(_850);
        StorageDead(_796);
        StorageDead(_795);
        _790 = const ();
        goto -> bb336;
    }

    bb331: {
        StorageLive(_847);
        _847 = ((_796 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_849);
        _849 = _847;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _849) -> [return: bb332, unwind: bb891];
    }

    bb332: {
        StorageDead(_849);
        StorageDead(_847);
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_790);
        goto -> bb808;
    }

    bb333: {
        StorageDead(_794);
        goto -> bb335;
    }

    bb334: {
        StorageDead(_792);
        goto -> bb335;
    }

    bb335: {
        _790 = const ();
        goto -> bb336;
    }

    bb336: {
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_790);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        _856 = _17;
        _855 = MarginContext::liquidation(move _856) -> [return: bb337, unwind: bb891];
    }

    bb337: {
        StorageDead(_856);
        StorageLive(_857);
        StorageLive(_858);
        _858 = _2;
        _857 = MarketIdentifier::spot(move _858) -> [return: bb338, unwind: bb891];
    }

    bb338: {
        StorageDead(_858);
        _854 = MarginContext::track_market_margin_requirement(move _855, move _857) -> [return: bb339, unwind: bb891];
    }

    bb339: {
        StorageDead(_857);
        StorageDead(_855);
        _853 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _854) -> [return: bb340, unwind: bb891];
    }

    bb340: {
        StorageDead(_854);
        _859 = discriminant(_853);
        switchInt(move _859) -> [0: bb341, 1: bb342, otherwise: bb18];
    }

    bb341: {
        StorageLive(_863);
        _863 = ((_853 as Continue).0: state::margin_calculation::MarginContext);
        _852 = _863;
        StorageDead(_863);
        StorageLive(_864);
        _864 = &(*_5);
        StorageLive(_865);
        _865 = _14;
        _851 = MarginContext::fuel_numerator(move _852, move _864, move _865) -> [return: bb344, unwind: bb891];
    }

    bb342: {
        StorageLive(_860);
        _860 = ((_853 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_862);
        _862 = _860;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _862) -> [return: bb343, unwind: bb891];
    }

    bb343: {
        StorageDead(_862);
        StorageDead(_860);
        StorageDead(_852);
        StorageDead(_853);
        goto -> bb807;
    }

    bb344: {
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_852);
        StorageDead(_853);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        _869 = &mut (*_5);
        StorageLive(_870);
        _870 = &(*_11);
        StorageLive(_871);
        _871 = &(*_12);
        StorageLive(_872);
        _872 = &mut (*_13);
        StorageLive(_873);
        _873 = _851;
        StorageLive(_874);
        _874 = &mut (*_7);
        StorageLive(_875);
        _875 = _14;
        _868 = User::calculate_margin_and_increment_fuel_bonus(move _869, move _870, move _871, move _872, move _873, move _874, move _875) -> [return: bb345, unwind: bb891];
    }

    bb345: {
        StorageDead(_875);
        StorageDead(_874);
        StorageDead(_873);
        StorageDead(_872);
        StorageDead(_871);
        StorageDead(_870);
        StorageDead(_869);
        _867 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _868) -> [return: bb346, unwind: bb891];
    }

    bb346: {
        StorageDead(_868);
        _876 = discriminant(_867);
        switchInt(move _876) -> [0: bb347, 1: bb348, otherwise: bb18];
    }

    bb347: {
        StorageLive(_880);
        _880 = ((_867 as Continue).0: state::margin_calculation::MarginCalculation);
        _866 = _880;
        StorageDead(_880);
        StorageDead(_867);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        _883 = &(*_5);
        _882 = User::is_being_liquidated(move _883) -> [return: bb350, unwind: bb891];
    }

    bb348: {
        StorageLive(_877);
        _877 = ((_867 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_879);
        _879 = _877;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _879) -> [return: bb349, unwind: bb891];
    }

    bb349: {
        StorageDead(_879);
        StorageDead(_877);
        StorageDead(_867);
        goto -> bb806;
    }

    bb350: {
        switchInt(move _882) -> [0: bb352, otherwise: bb351];
    }

    bb351: {
        StorageDead(_883);
        goto -> bb362;
    }

    bb352: {
        StorageDead(_883);
        StorageLive(_884);
        StorageLive(_885);
        _885 = &_866;
        _884 = MarginCalculation::meets_margin_requirement(move _885) -> [return: bb353, unwind: bb891];
    }

    bb353: {
        switchInt(move _884) -> [0: bb361, otherwise: bb354];
    }

    bb354: {
        StorageDead(_885);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        _1846 = const _;
        _897 = &(*_1846);
        _896 = &(*_897);
        _895 = move _896 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_896);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        _905 = &_866;
        _904 = &(*_905);
        _903 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _904) -> [return: bb355, unwind: bb891];
    }

    bb355: {
        StorageDead(_904);
        _902 = [move _903];
        StorageDead(_903);
        _901 = &_902;
        _900 = &(*_901);
        _899 = move _900 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_900);
        _894 = Arguments::<'_>::new_v1(move _895, move _899) -> [return: bb356, unwind: bb891];
    }

    bb356: {
        StorageDead(_899);
        StorageDead(_895);
        _893 = format(move _894) -> [return: bb357, unwind: bb891];
    }

    bb357: {
        StorageDead(_894);
        StorageDead(_905);
        StorageDead(_902);
        StorageDead(_901);
        StorageDead(_897);
        _892 = move _893;
        StorageDead(_893);
        _891 = &_892;
        _890 = &(*_891);
        _889 = <String as Deref>::deref(move _890) -> [return: bb358, unwind: bb845];
    }

    bb358: {
        _888 = &(*_889);
        StorageDead(_890);
        _887 = solana_program::log::sol_log(move _888) -> [return: bb359, unwind: bb845];
    }

    bb359: {
        StorageDead(_888);
        drop(_892) -> [return: bb360, unwind: bb891];
    }

    bb360: {
        StorageDead(_892);
        StorageDead(_891);
        StorageDead(_889);
        StorageDead(_887);
        StorageLive(_906);
        _906 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _906);
        StorageDead(_906);
        goto -> bb805;
    }

    bb361: {
        StorageDead(_885);
        goto -> bb362;
    }

    bb362: {
        StorageLive(_907);
        StorageLive(_908);
        _908 = &(*_5);
        _907 = User::is_being_liquidated(move _908) -> [return: bb363, unwind: bb891];
    }

    bb363: {
        switchInt(move _907) -> [0: bb373, otherwise: bb364];
    }

    bb364: {
        StorageDead(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        _912 = &_866;
        _911 = MarginCalculation::can_exit_liquidation(move _912) -> [return: bb365, unwind: bb891];
    }

    bb365: {
        StorageDead(_912);
        _910 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _911) -> [return: bb366, unwind: bb891];
    }

    bb366: {
        StorageDead(_911);
        _913 = discriminant(_910);
        switchInt(move _913) -> [0: bb367, 1: bb368, otherwise: bb18];
    }

    bb367: {
        StorageLive(_917);
        _917 = ((_910 as Continue).0: bool);
        _909 = _917;
        StorageDead(_917);
        switchInt(move _909) -> [0: bb371, otherwise: bb370];
    }

    bb368: {
        StorageLive(_914);
        _914 = ((_910 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_916);
        _916 = _914;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _916) -> [return: bb369, unwind: bb891];
    }

    bb369: {
        StorageDead(_916);
        StorageDead(_914);
        StorageDead(_910);
        goto -> bb804;
    }

    bb370: {
        StorageDead(_910);
        StorageLive(_919);
        StorageLive(_920);
        _920 = &mut (*_5);
        _919 = User::exit_liquidation(move _920) -> [return: bb372, unwind: bb891];
    }

    bb371: {
        StorageDead(_910);
        goto -> bb374;
    }

    bb372: {
        StorageDead(_920);
        StorageDead(_919);
        StorageLive(_921);
        _921 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _921);
        StorageDead(_921);
        goto -> bb804;
    }

    bb373: {
        StorageDead(_908);
        goto -> bb374;
    }

    bb374: {
        _881 = const ();
        StorageDead(_909);
        StorageDead(_907);
        StorageDead(_884);
        StorageDead(_882);
        StorageDead(_881);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        _925 = &mut (*_5);
        StorageLive(_926);
        _926 = _15;
        _924 = User::enter_liquidation(move _925, move _926) -> [return: bb375, unwind: bb891];
    }

    bb375: {
        StorageDead(_926);
        StorageDead(_925);
        _923 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _924) -> [return: bb376, unwind: bb891];
    }

    bb376: {
        StorageDead(_924);
        _927 = discriminant(_923);
        switchInt(move _927) -> [0: bb377, 1: bb378, otherwise: bb18];
    }

    bb377: {
        StorageLive(_931);
        _931 = ((_923 as Continue).0: u16);
        _922 = _931;
        StorageDead(_931);
        StorageDead(_923);
        StorageLive(_932);
        _932 = const 0_u64;
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        _936 = &mut (*_5);
        StorageLive(_937);
        _937 = &(*_6);
        StorageLive(_938);
        StorageLive(_939);
        _939 = &(*_9);
        _938 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _939);
        StorageDead(_939);
        StorageLive(_940);
        _940 = &(*_11);
        StorageLive(_941);
        _941 = &(*_12);
        StorageLive(_942);
        _942 = &mut (*_13);
        StorageLive(_943);
        _943 = _14;
        StorageLive(_944);
        _944 = _15;
        StorageLive(_945);
        _945 = OrderActionExplanation::Liquidation;
        StorageLive(_946);
        _946 = Option::<state::user::MarketType>::None;
        StorageLive(_947);
        _947 = Option::<u16>::None;
        StorageLive(_948);
        _948 = Option::<controller::position::PositionDirection>::None;
        _935 = controller::orders::cancel_orders(move _936, move _937, move _938, move _940, move _941, move _942, move _943, move _944, move _945, move _946, move _947, move _948) -> [return: bb380, unwind: bb891];
    }

    bb378: {
        StorageLive(_928);
        _928 = ((_923 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_930);
        _930 = _928;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _930) -> [return: bb379, unwind: bb891];
    }

    bb379: {
        StorageDead(_930);
        StorageDead(_928);
        StorageDead(_923);
        goto -> bb803;
    }

    bb380: {
        StorageDead(_948);
        StorageDead(_947);
        StorageDead(_946);
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_943);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_938);
        StorageDead(_937);
        StorageDead(_936);
        _934 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _935) -> [return: bb381, unwind: bb891];
    }

    bb381: {
        StorageDead(_935);
        _949 = discriminant(_934);
        switchInt(move _949) -> [0: bb382, 1: bb383, otherwise: bb18];
    }

    bb382: {
        StorageLive(_953);
        _953 = move ((_934 as Continue).0: std::vec::Vec<u32>);
        _1872 = const true;
        _933 = move _953;
        StorageDead(_953);
        _1893 = discriminant(_934);
        StorageDead(_934);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        _956 = &_933;
        _955 = Vec::<u32>::is_empty(move _956) -> [return: bb385, unwind: bb886];
    }

    bb383: {
        StorageLive(_950);
        _950 = ((_934 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_952);
        _952 = _950;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _952) -> [return: bb384, unwind: bb887];
    }

    bb384: {
        StorageDead(_952);
        StorageDead(_950);
        _1891 = discriminant(_934);
        StorageDead(_934);
        goto -> bb802;
    }

    bb385: {
        switchInt(move _955) -> [0: bb387, otherwise: bb386];
    }

    bb386: {
        StorageDead(_956);
        _954 = _866;
        goto -> bb438;
    }

    bb387: {
        StorageDead(_956);
        StorageLive(_957);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        _960 = &(*_5);
        StorageLive(_961);
        _961 = &(*_11);
        StorageLive(_962);
        _962 = &(*_12);
        StorageLive(_963);
        _963 = &mut (*_13);
        StorageLive(_964);
        StorageLive(_965);
        StorageLive(_966);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        _969 = _17;
        _968 = MarginContext::liquidation(move _969) -> [return: bb388, unwind: bb886];
    }

    bb388: {
        StorageDead(_969);
        StorageLive(_970);
        StorageLive(_971);
        _971 = _2;
        _970 = MarketIdentifier::spot(move _971) -> [return: bb389, unwind: bb886];
    }

    bb389: {
        StorageDead(_971);
        _967 = MarginContext::track_market_margin_requirement(move _968, move _970) -> [return: bb390, unwind: bb886];
    }

    bb390: {
        StorageDead(_970);
        StorageDead(_968);
        _966 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _967) -> [return: bb391, unwind: bb886];
    }

    bb391: {
        StorageDead(_967);
        _972 = discriminant(_966);
        switchInt(move _972) -> [0: bb392, 1: bb393, otherwise: bb18];
    }

    bb392: {
        StorageLive(_976);
        _976 = ((_966 as Continue).0: state::margin_calculation::MarginContext);
        _965 = _976;
        StorageDead(_976);
        StorageLive(_977);
        _977 = &(*_5);
        StorageLive(_978);
        _978 = _14;
        _964 = MarginContext::fuel_numerator(move _965, move _977, move _978) -> [return: bb395, unwind: bb886];
    }

    bb393: {
        StorageLive(_973);
        _973 = ((_966 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_975);
        _975 = _973;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _975) -> [return: bb394, unwind: bb886];
    }

    bb394: {
        StorageDead(_975);
        StorageDead(_973);
        StorageDead(_965);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_961);
        StorageDead(_960);
        StorageDead(_959);
        goto -> bb799;
    }

    bb395: {
        StorageDead(_978);
        StorageDead(_977);
        StorageDead(_965);
        _959 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _960, move _961, move _962, move _963, move _964) -> [return: bb396, unwind: bb886];
    }

    bb396: {
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_961);
        StorageDead(_960);
        _958 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _959) -> [return: bb397, unwind: bb886];
    }

    bb397: {
        StorageDead(_959);
        _979 = discriminant(_958);
        switchInt(move _979) -> [0: bb398, 1: bb399, otherwise: bb18];
    }

    bb398: {
        StorageLive(_983);
        _983 = ((_958 as Continue).0: state::margin_calculation::MarginCalculation);
        _957 = _983;
        StorageDead(_983);
        StorageDead(_966);
        StorageDead(_958);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        _987 = &_866;
        _986 = MarginCalculation::margin_shortage(move _987) -> [return: bb401, unwind: bb886];
    }

    bb399: {
        StorageLive(_980);
        _980 = ((_958 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_982);
        _982 = _980;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _982) -> [return: bb400, unwind: bb886];
    }

    bb400: {
        StorageDead(_982);
        StorageDead(_980);
        goto -> bb799;
    }

    bb401: {
        StorageDead(_987);
        _985 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _986) -> [return: bb402, unwind: bb886];
    }

    bb402: {
        StorageDead(_986);
        _988 = discriminant(_985);
        switchInt(move _988) -> [0: bb403, 1: bb404, otherwise: bb18];
    }

    bb403: {
        StorageLive(_992);
        _992 = ((_985 as Continue).0: u128);
        _984 = _992;
        StorageDead(_992);
        StorageDead(_985);
        StorageLive(_993);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        _996 = &_957;
        _995 = MarginCalculation::margin_shortage(move _996) -> [return: bb406, unwind: bb886];
    }

    bb404: {
        StorageLive(_989);
        _989 = ((_985 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_991);
        _991 = _989;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _991) -> [return: bb405, unwind: bb886];
    }

    bb405: {
        StorageDead(_991);
        StorageDead(_989);
        StorageDead(_985);
        goto -> bb798;
    }

    bb406: {
        StorageDead(_996);
        _994 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _995) -> [return: bb407, unwind: bb886];
    }

    bb407: {
        StorageDead(_995);
        _997 = discriminant(_994);
        switchInt(move _997) -> [0: bb408, 1: bb409, otherwise: bb18];
    }

    bb408: {
        StorageLive(_1001);
        _1001 = ((_994 as Continue).0: u128);
        _993 = _1001;
        StorageDead(_1001);
        StorageDead(_994);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        _1006 = _984;
        StorageLive(_1007);
        _1007 = _993;
        _1005 = core::num::<impl u128>::saturating_sub(move _1006, move _1007) -> [return: bb411, unwind: bb886];
    }

    bb409: {
        StorageLive(_998);
        _998 = ((_994 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1000);
        _1000 = _998;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1000) -> [return: bb410, unwind: bb886];
    }

    bb410: {
        StorageDead(_1000);
        StorageDead(_998);
        StorageDead(_994);
        goto -> bb797;
    }

    bb411: {
        StorageDead(_1007);
        StorageDead(_1006);
        _1004 = <u128 as Cast>::cast::<u64>(move _1005) -> [return: bb412, unwind: bb886];
    }

    bb412: {
        StorageDead(_1005);
        _1003 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1004) -> [return: bb413, unwind: bb886];
    }

    bb413: {
        StorageDead(_1004);
        _1008 = discriminant(_1003);
        switchInt(move _1008) -> [0: bb414, 1: bb415, otherwise: bb18];
    }

    bb414: {
        StorageLive(_1012);
        _1012 = ((_1003 as Continue).0: u64);
        _1002 = _1012;
        StorageDead(_1012);
        _932 = move _1002;
        StorageDead(_1002);
        StorageDead(_1003);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        _1016 = &mut (*_5);
        StorageLive(_1017);
        _1017 = _932;
        _1015 = User::increment_margin_freed(move _1016, move _1017) -> [return: bb417, unwind: bb886];
    }

    bb415: {
        StorageLive(_1009);
        _1009 = ((_1003 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1011);
        _1011 = _1009;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1011) -> [return: bb416, unwind: bb886];
    }

    bb416: {
        StorageDead(_1011);
        StorageDead(_1009);
        StorageDead(_1002);
        StorageDead(_1003);
        goto -> bb797;
    }

    bb417: {
        StorageDead(_1017);
        StorageDead(_1016);
        _1014 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1015) -> [return: bb418, unwind: bb886];
    }

    bb418: {
        StorageDead(_1015);
        _1018 = discriminant(_1014);
        switchInt(move _1018) -> [0: bb419, 1: bb420, otherwise: bb18];
    }

    bb419: {
        StorageLive(_1022);
        _1022 = ((_1014 as Continue).0: ());
        _1013 = _1022;
        StorageDead(_1022);
        StorageDead(_1014);
        StorageDead(_1013);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        _1027 = &_957;
        _1026 = MarginCalculation::can_exit_liquidation(move _1027) -> [return: bb422, unwind: bb886];
    }

    bb420: {
        StorageLive(_1019);
        _1019 = ((_1014 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1021);
        _1021 = _1019;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1021) -> [return: bb421, unwind: bb886];
    }

    bb421: {
        StorageDead(_1021);
        StorageDead(_1019);
        StorageDead(_1014);
        StorageDead(_1013);
        goto -> bb797;
    }

    bb422: {
        StorageDead(_1027);
        _1025 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1026) -> [return: bb423, unwind: bb886];
    }

    bb423: {
        StorageDead(_1026);
        _1028 = discriminant(_1025);
        switchInt(move _1028) -> [0: bb424, 1: bb425, otherwise: bb18];
    }

    bb424: {
        StorageLive(_1032);
        _1032 = ((_1025 as Continue).0: bool);
        _1024 = _1032;
        StorageDead(_1032);
        switchInt(move _1024) -> [0: bb428, otherwise: bb427];
    }

    bb425: {
        StorageLive(_1029);
        _1029 = ((_1025 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1031);
        _1031 = _1029;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1031) -> [return: bb426, unwind: bb886];
    }

    bb426: {
        StorageDead(_1031);
        StorageDead(_1029);
        StorageDead(_1025);
        goto -> bb796;
    }

    bb427: {
        StorageDead(_1025);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        _1048 = _14;
        StorageLive(_1049);
        _1049 = _922;
        StorageLive(_1050);
        _1050 = LiquidationType::LiquidateSpot;
        StorageLive(_1051);
        _1051 = (*_6);
        StorageLive(_1052);
        _1052 = (*_9);
        StorageLive(_1053);
        _1053 = (_866.3: u128);
        StorageLive(_1054);
        _1054 = (_866.1: i128);
        StorageLive(_1055);
        StorageLive(_1056);
        _1056 = &(*_5);
        _1055 = User::is_bankrupt(move _1056) -> [return: bb429, unwind: bb886];
    }

    bb428: {
        StorageDead(_1025);
        _1023 = const ();
        StorageDead(_1024);
        StorageDead(_1023);
        _954 = _957;
        StorageDead(_993);
        StorageDead(_984);
        StorageDead(_957);
        goto -> bb438;
    }

    bb429: {
        StorageDead(_1056);
        StorageLive(_1057);
        _1872 = const false;
        _1057 = move _933;
        StorageLive(_1058);
        _1058 = _932;
        StorageLive(_1059);
        StorageLive(_1060);
        _1060 = _1;
        StorageLive(_1061);
        _1061 = _413;
        StorageLive(_1062);
        _1062 = _2;
        StorageLive(_1063);
        _1063 = _602;
        _1059 = LiquidateSpotRecord { asset_market_index: move _1060, asset_price: move _1061, asset_transfer: const 0_u128, liability_market_index: move _1062, liability_price: move _1063, liability_transfer: const 0_u128, if_fee: const 0_u64 };
        StorageDead(_1063);
        StorageDead(_1062);
        StorageDead(_1061);
        StorageDead(_1060);
        StorageLive(_1064);
        _1064 = <LiquidationRecord as Default>::default() -> [return: bb430, unwind: bb844];
    }

    bb430: {
        _1047 = LiquidationRecord { ts: move _1048, liquidation_type: move _1050, user: move _1051, liquidator: move _1052, margin_requirement: move _1053, total_collateral: move _1054, margin_freed: move _1058, liquidation_id: move _1049, bankrupt: move _1055, canceled_order_ids: move _1057, liquidate_perp: move (_1064.10: state::events::LiquidatePerpRecord), liquidate_spot: move _1059, liquidate_borrow_for_perp_pnl: move (_1064.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_1064.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_1064.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_1064.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_1059);
        StorageDead(_1058);
        StorageDead(_1057);
        StorageDead(_1055);
        StorageDead(_1054);
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1051);
        StorageDead(_1050);
        StorageDead(_1049);
        StorageDead(_1048);
        _1046 = &_1047;
        _1045 = &(*_1046);
        _1044 = <LiquidationRecord as anchor_lang::Event>::data(move _1045) -> [return: bb431, unwind: bb842];
    }

    bb431: {
        StorageDead(_1045);
        _1043 = &_1044;
        _1042 = &(*_1043);
        _1041 = <Vec<u8> as Deref>::deref(move _1042) -> [return: bb432, unwind: bb841];
    }

    bb432: {
        _1040 = &(*_1041);
        StorageDead(_1042);
        _1039 = [move _1040];
        StorageDead(_1040);
        _1038 = &_1039;
        _1037 = &(*_1038);
        _1036 = move _1037 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1037);
        _1035 = solana_program::log::sol_log_data(move _1036) -> [return: bb433, unwind: bb841];
    }

    bb433: {
        StorageDead(_1036);
        drop(_1044) -> [return: bb434, unwind: bb842];
    }

    bb434: {
        drop(_1047) -> [return: bb435, unwind: bb843];
    }

    bb435: {
        drop(_1064) -> [return: bb436, unwind: bb886];
    }

    bb436: {
        StorageDead(_1064);
        StorageDead(_1047);
        StorageDead(_1046);
        StorageDead(_1044);
        StorageDead(_1043);
        StorageDead(_1041);
        StorageDead(_1039);
        StorageDead(_1038);
        StorageDead(_1035);
        _1034 = const ();
        StorageDead(_1034);
        StorageLive(_1065);
        StorageLive(_1066);
        _1066 = &mut (*_5);
        _1065 = User::exit_liquidation(move _1066) -> [return: bb437, unwind: bb886];
    }

    bb437: {
        StorageDead(_1066);
        StorageDead(_1065);
        StorageLive(_1067);
        _1067 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1067);
        StorageDead(_1067);
        goto -> bb796;
    }

    bb438: {
        StorageDead(_955);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        _1071 = &_954;
        _1070 = MarginCalculation::margin_shortage(move _1071) -> [return: bb439, unwind: bb886];
    }

    bb439: {
        StorageDead(_1071);
        _1069 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1070) -> [return: bb440, unwind: bb886];
    }

    bb440: {
        StorageDead(_1070);
        _1072 = discriminant(_1069);
        switchInt(move _1072) -> [0: bb441, 1: bb442, otherwise: bb18];
    }

    bb441: {
        StorageLive(_1076);
        _1076 = ((_1069 as Continue).0: u128);
        _1068 = _1076;
        StorageDead(_1076);
        StorageDead(_1069);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        _1080 = _604;
        StorageLive(_1081);
        _1081 = _17;
        _1079 = <u32 as SafeMath>::safe_add(move _1080, move _1081) -> [return: bb444, unwind: bb886];
    }

    bb442: {
        StorageLive(_1073);
        _1073 = ((_1069 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1075);
        _1075 = _1073;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1075) -> [return: bb443, unwind: bb886];
    }

    bb443: {
        StorageDead(_1075);
        StorageDead(_1073);
        StorageDead(_1069);
        goto -> bb795;
    }

    bb444: {
        StorageDead(_1081);
        StorageDead(_1080);
        _1078 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _1079) -> [return: bb445, unwind: bb886];
    }

    bb445: {
        StorageDead(_1079);
        _1082 = discriminant(_1078);
        switchInt(move _1082) -> [0: bb446, 1: bb447, otherwise: bb18];
    }

    bb446: {
        StorageLive(_1086);
        _1086 = ((_1078 as Continue).0: u32);
        _1077 = _1086;
        StorageDead(_1086);
        StorageDead(_1078);
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        StorageLive(_1090);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        _1093 = &_954;
        StorageLive(_1094);
        _1094 = _1068;
        _1092 = MarginCalculation::tracked_market_margin_shortage(move _1093, move _1094) -> [return: bb449, unwind: bb886];
    }

    bb447: {
        StorageLive(_1083);
        _1083 = ((_1078 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1085);
        _1085 = _1083;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1085) -> [return: bb448, unwind: bb886];
    }

    bb448: {
        StorageDead(_1085);
        StorageDead(_1083);
        StorageDead(_1078);
        goto -> bb794;
    }

    bb449: {
        StorageDead(_1094);
        StorageDead(_1093);
        _1091 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1092) -> [return: bb450, unwind: bb886];
    }

    bb450: {
        StorageDead(_1092);
        _1095 = discriminant(_1091);
        switchInt(move _1095) -> [0: bb451, 1: bb452, otherwise: bb18];
    }

    bb451: {
        StorageLive(_1099);
        _1099 = ((_1091 as Continue).0: u128);
        _1090 = _1099;
        StorageDead(_1099);
        StorageLive(_1100);
        _1100 = _601;
        StorageLive(_1101);
        _1101 = _415;
        StorageLive(_1102);
        _1102 = _416;
        StorageLive(_1103);
        _1103 = _1077;
        StorageLive(_1104);
        _1104 = _605;
        StorageLive(_1105);
        _1105 = _603;
        StorageLive(_1106);
        _1106 = _602;
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        _1113 = &(*_12);
        StorageLive(_1114);
        StorageLive(_1115);
        _1115 = &_2;
        _1114 = &(*_1115);
        _1112 = SpotMarketMap::<'_>::get_ref(move _1113, move _1114) -> [return: bb454, unwind: bb886];
    }

    bb452: {
        StorageLive(_1096);
        _1096 = ((_1091 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1098);
        _1098 = _1096;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1098) -> [return: bb453, unwind: bb886];
    }

    bb453: {
        StorageDead(_1098);
        StorageDead(_1096);
        StorageDead(_1090);
        StorageDead(_1089);
        goto -> bb792;
    }

    bb454: {
        StorageDead(_1114);
        StorageDead(_1113);
        _1111 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1112) -> [return: bb455, unwind: bb886];
    }

    bb455: {
        _1871 = const true;
        StorageDead(_1112);
        _1116 = discriminant(_1111);
        switchInt(move _1116) -> [0: bb456, 1: bb457, otherwise: bb18];
    }

    bb456: {
        StorageLive(_1120);
        _1120 = move ((_1111 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1110 = move _1120;
        StorageDead(_1120);
        _1109 = &_1110;
        _1108 = <Ref<'_, SpotMarket> as Deref>::deref(move _1109) -> [return: bb459, unwind: bb840];
    }

    bb457: {
        StorageLive(_1117);
        _1117 = ((_1111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1119);
        _1119 = _1117;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1119) -> [return: bb458, unwind: bb884];
    }

    bb458: {
        StorageDead(_1119);
        StorageDead(_1117);
        StorageDead(_1109);
        StorageDead(_1107);
        StorageDead(_1106);
        StorageDead(_1105);
        StorageDead(_1104);
        StorageDead(_1103);
        StorageDead(_1102);
        StorageDead(_1101);
        StorageDead(_1100);
        StorageDead(_1090);
        StorageDead(_1089);
        goto -> bb874;
    }

    bb459: {
        StorageDead(_1109);
        _1107 = ((*_1108).37: u32);
        _1089 = calculate_spot_if_fee(move _1090, move _1100, move _1101, move _1102, move _1103, move _1104, move _1105, move _1106, move _1107) -> [return: bb460, unwind: bb840];
    }

    bb460: {
        StorageDead(_1107);
        StorageDead(_1106);
        StorageDead(_1105);
        StorageDead(_1104);
        StorageDead(_1103);
        StorageDead(_1102);
        StorageDead(_1101);
        StorageDead(_1100);
        StorageDead(_1090);
        _1088 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _1089) -> [return: bb461, unwind: bb840];
    }

    bb461: {
        StorageDead(_1089);
        _1121 = discriminant(_1088);
        switchInt(move _1121) -> [0: bb462, 1: bb463, otherwise: bb18];
    }

    bb462: {
        StorageLive(_1125);
        _1125 = ((_1088 as Continue).0: u32);
        _1087 = _1125;
        StorageDead(_1125);
        drop(_1110) -> [return: bb869, unwind: bb884];
    }

    bb463: {
        StorageLive(_1122);
        _1122 = ((_1088 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1124);
        _1124 = _1122;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1124) -> [return: bb464, unwind: bb840];
    }

    bb464: {
        StorageDead(_1124);
        StorageDead(_1122);
        drop(_1110) -> [return: bb874, unwind: bb884];
    }

    bb465: {
        StorageDead(_1136);
        StorageDead(_1135);
        StorageDead(_1134);
        StorageDead(_1133);
        StorageDead(_1132);
        StorageDead(_1131);
        StorageDead(_1130);
        StorageDead(_1129);
        _1127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1128) -> [return: bb466, unwind: bb886];
    }

    bb466: {
        StorageDead(_1128);
        _1137 = discriminant(_1127);
        switchInt(move _1137) -> [0: bb467, 1: bb468, otherwise: bb18];
    }

    bb467: {
        StorageLive(_1141);
        _1141 = ((_1127 as Continue).0: u128);
        _1126 = _1141;
        StorageDead(_1141);
        StorageDead(_1127);
        StorageLive(_1142);
        StorageLive(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        _1145 = &(*_5);
        StorageLive(_1146);
        _1146 = _1068;
        StorageLive(_1147);
        _1147 = _15;
        StorageLive(_1148);
        _1148 = _18;
        StorageLive(_1149);
        _1149 = _20;
        _1144 = calculate_max_pct_to_liquidate(move _1145, move _1146, move _1147, move _1148, move _1149) -> [return: bb470, unwind: bb886];
    }

    bb468: {
        StorageLive(_1138);
        _1138 = ((_1127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1140);
        _1140 = _1138;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1140) -> [return: bb469, unwind: bb886];
    }

    bb469: {
        StorageDead(_1140);
        StorageDead(_1138);
        StorageDead(_1127);
        goto -> bb791;
    }

    bb470: {
        StorageDead(_1149);
        StorageDead(_1148);
        StorageDead(_1147);
        StorageDead(_1146);
        StorageDead(_1145);
        _1143 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1144) -> [return: bb471, unwind: bb886];
    }

    bb471: {
        StorageDead(_1144);
        _1150 = discriminant(_1143);
        switchInt(move _1150) -> [0: bb472, 1: bb473, otherwise: bb18];
    }

    bb472: {
        StorageLive(_1154);
        _1154 = ((_1143 as Continue).0: u128);
        _1142 = _1154;
        StorageDead(_1154);
        StorageDead(_1143);
        StorageLive(_1155);
        StorageLive(_1156);
        StorageLive(_1157);
        StorageLive(_1158);
        StorageLive(_1159);
        _1159 = _1126;
        StorageLive(_1160);
        _1160 = _1142;
        _1158 = core::num::<impl u128>::saturating_mul(move _1159, move _1160) -> [return: bb475, unwind: bb886];
    }

    bb473: {
        StorageLive(_1151);
        _1151 = ((_1143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1153);
        _1153 = _1151;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1153) -> [return: bb474, unwind: bb886];
    }

    bb474: {
        StorageDead(_1153);
        StorageDead(_1151);
        StorageDead(_1143);
        goto -> bb790;
    }

    bb475: {
        StorageDead(_1160);
        StorageDead(_1159);
        _1157 = <u128 as SafeMath>::safe_div(move _1158, const _) -> [return: bb476, unwind: bb886];
    }

    bb476: {
        StorageDead(_1158);
        _1156 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1157) -> [return: bb477, unwind: bb886];
    }

    bb477: {
        StorageDead(_1157);
        _1161 = discriminant(_1156);
        switchInt(move _1161) -> [0: bb478, 1: bb479, otherwise: bb18];
    }

    bb478: {
        StorageLive(_1165);
        _1165 = ((_1156 as Continue).0: u128);
        _1155 = _1165;
        StorageDead(_1165);
        StorageDead(_1156);
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        _1168 = _1155;
        _1167 = Eq(move _1168, const 0_u128);
        switchInt(move _1167) -> [0: bb482, otherwise: bb481];
    }

    bb479: {
        StorageLive(_1162);
        _1162 = ((_1156 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1164);
        _1164 = _1162;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1164) -> [return: bb480, unwind: bb886];
    }

    bb480: {
        StorageDead(_1164);
        StorageDead(_1162);
        StorageDead(_1156);
        goto -> bb789;
    }

    bb481: {
        StorageDead(_1168);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        _1172 = const "max_liability_allowed_to_be_transferred == 0";
        _1171 = &(*_1172);
        _1170 = solana_program::log::sol_log(move _1171) -> [return: bb483, unwind: bb886];
    }

    bb482: {
        StorageDead(_1168);
        _1166 = const ();
        StorageDead(_1167);
        StorageDead(_1166);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        _1177 = _412;
        StorageLive(_1178);
        _1178 = _416;
        StorageLive(_1179);
        _1179 = _414;
        StorageLive(_1180);
        _1180 = _413;
        StorageLive(_1181);
        _1181 = _605;
        StorageLive(_1182);
        _1182 = _603;
        StorageLive(_1183);
        _1183 = _602;
        _1176 = calculate_liability_transfer_implied_by_asset_amount(move _1177, move _1178, move _1179, move _1180, move _1181, move _1182, move _1183) -> [return: bb484, unwind: bb886];
    }

    bb483: {
        StorageDead(_1171);
        StorageDead(_1172);
        StorageDead(_1170);
        StorageLive(_1173);
        _1173 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1173);
        StorageDead(_1173);
        StorageDead(_1167);
        StorageDead(_1166);
        goto -> bb789;
    }

    bb484: {
        StorageDead(_1183);
        StorageDead(_1182);
        StorageDead(_1181);
        StorageDead(_1180);
        StorageDead(_1179);
        StorageDead(_1178);
        StorageDead(_1177);
        _1175 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1176) -> [return: bb485, unwind: bb886];
    }

    bb485: {
        StorageDead(_1176);
        _1184 = discriminant(_1175);
        switchInt(move _1184) -> [0: bb486, 1: bb487, otherwise: bb18];
    }

    bb486: {
        StorageLive(_1188);
        _1188 = ((_1175 as Continue).0: u128);
        _1174 = _1188;
        StorageDead(_1188);
        StorageDead(_1175);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        StorageLive(_1192);
        StorageLive(_1193);
        StorageLive(_1194);
        StorageLive(_1195);
        _1195 = _601;
        _1194 = <u128 as Cast>::cast::<i128>(move _1195) -> [return: bb489, unwind: bb886];
    }

    bb487: {
        StorageLive(_1185);
        _1185 = ((_1175 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1187);
        _1187 = _1185;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1187) -> [return: bb488, unwind: bb886];
    }

    bb488: {
        StorageDead(_1187);
        StorageDead(_1185);
        StorageDead(_1175);
        goto -> bb788;
    }

    bb489: {
        StorageDead(_1195);
        _1193 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1194) -> [return: bb490, unwind: bb886];
    }

    bb490: {
        StorageDead(_1194);
        _1196 = discriminant(_1193);
        switchInt(move _1196) -> [0: bb491, 1: bb492, otherwise: bb18];
    }

    bb491: {
        StorageLive(_1200);
        _1200 = ((_1193 as Continue).0: i128);
        _1192 = _1200;
        StorageDead(_1200);
        StorageLive(_1201);
        _1201 = _603;
        StorageLive(_1202);
        _1202 = _602;
        _1191 = get_token_value(move _1192, move _1201, move _1202) -> [return: bb494, unwind: bb886];
    }

    bb492: {
        StorageLive(_1197);
        _1197 = ((_1193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1199);
        _1199 = _1197;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1199) -> [return: bb493, unwind: bb886];
    }

    bb493: {
        StorageDead(_1199);
        StorageDead(_1197);
        StorageDead(_1192);
        StorageDead(_1191);
        goto -> bb786;
    }

    bb494: {
        StorageDead(_1202);
        StorageDead(_1201);
        StorageDead(_1192);
        _1190 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1191) -> [return: bb495, unwind: bb886];
    }

    bb495: {
        StorageDead(_1191);
        _1203 = discriminant(_1190);
        switchInt(move _1203) -> [0: bb496, 1: bb497, otherwise: bb18];
    }

    bb496: {
        StorageLive(_1207);
        _1207 = ((_1190 as Continue).0: i128);
        _1189 = _1207;
        StorageDead(_1207);
        StorageDead(_1193);
        StorageDead(_1190);
        StorageLive(_1208);
        StorageLive(_1209);
        StorageLive(_1210);
        _1210 = _1189;
        StorageLive(_1211);
        _1212 = CheckedMul(const 10_i128, const _);
        assert(!move (_1212.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_i128, const _) -> [success: bb499, unwind: bb886];
    }

    bb497: {
        StorageLive(_1204);
        _1204 = ((_1190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1206);
        _1206 = _1204;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1206) -> [return: bb498, unwind: bb886];
    }

    bb498: {
        StorageDead(_1206);
        StorageDead(_1204);
        goto -> bb786;
    }

    bb499: {
        _1211 = move (_1212.0: i128);
        _1209 = Gt(move _1210, move _1211);
        switchInt(move _1209) -> [0: bb501, otherwise: bb500];
    }

    bb500: {
        StorageDead(_1211);
        StorageDead(_1210);
        _1208 = const 0_u128;
        goto -> bb502;
    }

    bb501: {
        StorageDead(_1211);
        StorageDead(_1210);
        _1208 = _601;
        goto -> bb502;
    }

    bb502: {
        StorageDead(_1209);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        StorageLive(_1216);
        _1216 = _3;
        StorageLive(_1217);
        _1217 = _601;
        _1215 = <u128 as Ord>::min(move _1216, move _1217) -> [return: bb503, unwind: bb886];
    }

    bb503: {
        StorageDead(_1217);
        StorageDead(_1216);
        StorageLive(_1218);
        StorageLive(_1219);
        _1219 = _1155;
        StorageLive(_1220);
        _1220 = _1208;
        _1218 = <u128 as Ord>::max(move _1219, move _1220) -> [return: bb504, unwind: bb886];
    }

    bb504: {
        StorageDead(_1220);
        StorageDead(_1219);
        _1214 = <u128 as Ord>::min(move _1215, move _1218) -> [return: bb505, unwind: bb886];
    }

    bb505: {
        StorageDead(_1218);
        StorageDead(_1215);
        StorageLive(_1221);
        _1221 = _1174;
        _1213 = <u128 as Ord>::min(move _1214, move _1221) -> [return: bb506, unwind: bb886];
    }

    bb506: {
        StorageDead(_1221);
        StorageDead(_1214);
        StorageLive(_1222);
        StorageLive(_1223);
        StorageLive(_1224);
        StorageLive(_1225);
        _1225 = _412;
        StorageLive(_1226);
        _1226 = _416;
        StorageLive(_1227);
        _1227 = _414;
        StorageLive(_1228);
        _1228 = _413;
        StorageLive(_1229);
        _1229 = _1213;
        StorageLive(_1230);
        _1230 = _605;
        StorageLive(_1231);
        _1231 = _603;
        StorageLive(_1232);
        _1232 = _602;
        _1224 = calculate_asset_transfer_for_liability_transfer(move _1225, move _1226, move _1227, move _1228, move _1229, move _1230, move _1231, move _1232) -> [return: bb507, unwind: bb886];
    }

    bb507: {
        StorageDead(_1232);
        StorageDead(_1231);
        StorageDead(_1230);
        StorageDead(_1229);
        StorageDead(_1228);
        StorageDead(_1227);
        StorageDead(_1226);
        StorageDead(_1225);
        _1223 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1224) -> [return: bb508, unwind: bb886];
    }

    bb508: {
        StorageDead(_1224);
        _1233 = discriminant(_1223);
        switchInt(move _1233) -> [0: bb509, 1: bb510, otherwise: bb18];
    }

    bb509: {
        StorageLive(_1237);
        _1237 = ((_1223 as Continue).0: u128);
        _1222 = _1237;
        StorageDead(_1237);
        StorageDead(_1223);
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        _1240 = _1222;
        _1239 = Eq(move _1240, const 0_u128);
        switchInt(move _1239) -> [0: bb513, otherwise: bb512];
    }

    bb510: {
        StorageLive(_1234);
        _1234 = ((_1223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1236);
        _1236 = _1234;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1236) -> [return: bb511, unwind: bb886];
    }

    bb511: {
        StorageDead(_1236);
        StorageDead(_1234);
        StorageDead(_1223);
        goto -> bb785;
    }

    bb512: {
        StorageDead(_1240);
        goto -> bb514;
    }

    bb513: {
        StorageDead(_1240);
        StorageLive(_1241);
        StorageLive(_1242);
        _1242 = _1213;
        _1241 = Eq(move _1242, const 0_u128);
        switchInt(move _1241) -> [0: bb515, otherwise: bb514];
    }

    bb514: {
        StorageDead(_1242);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        StorageLive(_1250);
        StorageLive(_1251);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        _1837 = const _;
        _1254 = &(*_1837);
        _1253 = &(*_1254);
        _1252 = move _1253 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1253);
        StorageLive(_1256);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        StorageLive(_1261);
        StorageLive(_1262);
        _1262 = &_1;
        _1261 = &(*_1262);
        _1260 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1261) -> [return: bb516, unwind: bb886];
    }

    bb515: {
        StorageDead(_1242);
        _1238 = const ();
        StorageDead(_1241);
        StorageDead(_1239);
        StorageDead(_1238);
        StorageLive(_1317);
        StorageLive(_1318);
        StorageLive(_1319);
        StorageLive(_1320);
        StorageLive(_1321);
        StorageLive(_1322);
        StorageLive(_1323);
        _1323 = _602;
        _1322 = <i64 as Cast>::cast::<i64>(move _1323) -> [return: bb539, unwind: bb886];
    }

    bb516: {
        StorageDead(_1261);
        StorageLive(_1263);
        StorageLive(_1264);
        StorageLive(_1265);
        _1265 = &_2;
        _1264 = &(*_1265);
        _1263 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1264) -> [return: bb517, unwind: bb886];
    }

    bb517: {
        StorageDead(_1264);
        _1259 = [move _1260, move _1263];
        StorageDead(_1263);
        StorageDead(_1260);
        _1258 = &_1259;
        _1257 = &(*_1258);
        _1256 = move _1257 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1257);
        _1251 = Arguments::<'_>::new_v1(move _1252, move _1256) -> [return: bb518, unwind: bb886];
    }

    bb518: {
        StorageDead(_1256);
        StorageDead(_1252);
        _1250 = format(move _1251) -> [return: bb519, unwind: bb886];
    }

    bb519: {
        StorageDead(_1251);
        StorageDead(_1265);
        StorageDead(_1262);
        StorageDead(_1259);
        StorageDead(_1258);
        StorageDead(_1254);
        _1249 = move _1250;
        StorageDead(_1250);
        _1248 = &_1249;
        _1247 = &(*_1248);
        _1246 = <String as Deref>::deref(move _1247) -> [return: bb520, unwind: bb839];
    }

    bb520: {
        _1245 = &(*_1246);
        StorageDead(_1247);
        _1244 = solana_program::log::sol_log(move _1245) -> [return: bb521, unwind: bb839];
    }

    bb521: {
        StorageDead(_1245);
        drop(_1249) -> [return: bb522, unwind: bb886];
    }

    bb522: {
        StorageDead(_1249);
        StorageDead(_1248);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageLive(_1266);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        _1836 = const _;
        _1276 = &(*_1836);
        _1275 = &(*_1276);
        _1274 = move _1275 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1275);
        StorageLive(_1278);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        _1284 = &_3;
        _1283 = &(*_1284);
        _1282 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1283) -> [return: bb523, unwind: bb886];
    }

    bb523: {
        StorageDead(_1283);
        StorageLive(_1285);
        StorageLive(_1286);
        StorageLive(_1287);
        _1287 = &_601;
        _1286 = &(*_1287);
        _1285 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1286) -> [return: bb524, unwind: bb886];
    }

    bb524: {
        StorageDead(_1286);
        StorageLive(_1288);
        StorageLive(_1289);
        StorageLive(_1290);
        _1290 = &_1126;
        _1289 = &(*_1290);
        _1288 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1289) -> [return: bb525, unwind: bb886];
    }

    bb525: {
        StorageDead(_1289);
        _1281 = [move _1282, move _1285, move _1288];
        StorageDead(_1288);
        StorageDead(_1285);
        StorageDead(_1282);
        _1280 = &_1281;
        _1279 = &(*_1280);
        _1278 = move _1279 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1279);
        _1273 = Arguments::<'_>::new_v1(move _1274, move _1278) -> [return: bb526, unwind: bb886];
    }

    bb526: {
        StorageDead(_1278);
        StorageDead(_1274);
        _1272 = format(move _1273) -> [return: bb527, unwind: bb886];
    }

    bb527: {
        StorageDead(_1273);
        StorageDead(_1290);
        StorageDead(_1287);
        StorageDead(_1284);
        StorageDead(_1281);
        StorageDead(_1280);
        StorageDead(_1276);
        _1271 = move _1272;
        StorageDead(_1272);
        _1270 = &_1271;
        _1269 = &(*_1270);
        _1268 = <String as Deref>::deref(move _1269) -> [return: bb528, unwind: bb838];
    }

    bb528: {
        _1267 = &(*_1268);
        StorageDead(_1269);
        _1266 = solana_program::log::sol_log(move _1267) -> [return: bb529, unwind: bb838];
    }

    bb529: {
        StorageDead(_1267);
        drop(_1271) -> [return: bb530, unwind: bb886];
    }

    bb530: {
        StorageDead(_1271);
        StorageDead(_1270);
        StorageDead(_1268);
        StorageDead(_1266);
        StorageLive(_1291);
        StorageLive(_1292);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        StorageLive(_1296);
        StorageLive(_1297);
        StorageLive(_1298);
        StorageLive(_1299);
        StorageLive(_1300);
        StorageLive(_1301);
        _1835 = const _;
        _1301 = &(*_1835);
        _1300 = &(*_1301);
        _1299 = move _1300 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1300);
        StorageLive(_1303);
        StorageLive(_1304);
        StorageLive(_1305);
        StorageLive(_1306);
        StorageLive(_1307);
        StorageLive(_1308);
        StorageLive(_1309);
        _1309 = &_1174;
        _1308 = &(*_1309);
        _1307 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1308) -> [return: bb531, unwind: bb886];
    }

    bb531: {
        StorageDead(_1308);
        StorageLive(_1310);
        StorageLive(_1311);
        StorageLive(_1312);
        _1312 = &_1213;
        _1311 = &(*_1312);
        _1310 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1311) -> [return: bb532, unwind: bb886];
    }

    bb532: {
        StorageDead(_1311);
        StorageLive(_1313);
        StorageLive(_1314);
        StorageLive(_1315);
        _1315 = &_1222;
        _1314 = &(*_1315);
        _1313 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1314) -> [return: bb533, unwind: bb886];
    }

    bb533: {
        StorageDead(_1314);
        _1306 = [move _1307, move _1310, move _1313];
        StorageDead(_1313);
        StorageDead(_1310);
        StorageDead(_1307);
        _1305 = &_1306;
        _1304 = &(*_1305);
        _1303 = move _1304 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1304);
        _1298 = Arguments::<'_>::new_v1(move _1299, move _1303) -> [return: bb534, unwind: bb886];
    }

    bb534: {
        StorageDead(_1303);
        StorageDead(_1299);
        _1297 = format(move _1298) -> [return: bb535, unwind: bb886];
    }

    bb535: {
        StorageDead(_1298);
        StorageDead(_1315);
        StorageDead(_1312);
        StorageDead(_1309);
        StorageDead(_1306);
        StorageDead(_1305);
        StorageDead(_1301);
        _1296 = move _1297;
        StorageDead(_1297);
        _1295 = &_1296;
        _1294 = &(*_1295);
        _1293 = <String as Deref>::deref(move _1294) -> [return: bb536, unwind: bb837];
    }

    bb536: {
        _1292 = &(*_1293);
        StorageDead(_1294);
        _1291 = solana_program::log::sol_log(move _1292) -> [return: bb537, unwind: bb837];
    }

    bb537: {
        StorageDead(_1292);
        drop(_1296) -> [return: bb538, unwind: bb886];
    }

    bb538: {
        StorageDead(_1296);
        StorageDead(_1295);
        StorageDead(_1293);
        StorageDead(_1291);
        StorageLive(_1316);
        _1316 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1316);
        StorageDead(_1316);
        StorageDead(_1241);
        StorageDead(_1239);
        StorageDead(_1238);
        goto -> bb785;
    }

    bb539: {
        StorageDead(_1323);
        _1321 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1322) -> [return: bb540, unwind: bb886];
    }

    bb540: {
        StorageDead(_1322);
        _1324 = discriminant(_1321);
        switchInt(move _1324) -> [0: bb541, 1: bb542, otherwise: bb18];
    }

    bb541: {
        StorageLive(_1328);
        _1328 = ((_1321 as Continue).0: i64);
        _1320 = _1328;
        StorageDead(_1328);
        StorageLive(_1329);
        StorageLive(_1330);
        StorageLive(_1331);
        StorageLive(_1332);
        StorageLive(_1333);
        StorageLive(_1334);
        StorageLive(_1335);
        _1335 = &(*_12);
        StorageLive(_1336);
        StorageLive(_1337);
        _1337 = &_2;
        _1336 = &(*_1337);
        _1334 = SpotMarketMap::<'_>::get_ref(move _1335, move _1336) -> [return: bb544, unwind: bb886];
    }

    bb542: {
        StorageLive(_1325);
        _1325 = ((_1321 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1327);
        _1327 = _1325;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1327) -> [return: bb543, unwind: bb886];
    }

    bb543: {
        StorageDead(_1327);
        StorageDead(_1325);
        StorageDead(_1320);
        StorageDead(_1319);
        goto -> bb783;
    }

    bb544: {
        StorageDead(_1336);
        StorageDead(_1335);
        _1333 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1334) -> [return: bb545, unwind: bb886];
    }

    bb545: {
        _1870 = const true;
        StorageDead(_1334);
        _1338 = discriminant(_1333);
        switchInt(move _1338) -> [0: bb546, 1: bb547, otherwise: bb18];
    }

    bb546: {
        StorageLive(_1342);
        _1342 = move ((_1333 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1332 = move _1342;
        StorageDead(_1342);
        _1331 = &_1332;
        _1330 = <Ref<'_, SpotMarket> as Deref>::deref(move _1331) -> [return: bb549, unwind: bb836];
    }

    bb547: {
        StorageLive(_1339);
        _1339 = ((_1333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1341);
        _1341 = _1339;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1341) -> [return: bb548, unwind: bb883];
    }

    bb548: {
        StorageDead(_1341);
        StorageDead(_1339);
        StorageDead(_1331);
        StorageDead(_1329);
        StorageDead(_1320);
        StorageDead(_1319);
        goto -> bb873;
    }

    bb549: {
        StorageDead(_1331);
        _1329 = (((*_1330).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_1343);
        StorageLive(_1344);
        StorageLive(_1345);
        StorageLive(_1346);
        StorageLive(_1347);
        _1347 = &((*_16).7: state::state::OracleGuardRails);
        _1346 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1347) -> [return: bb550, unwind: bb836];
    }

    bb550: {
        StorageDead(_1347);
        _1345 = <u64 as Cast>::cast::<i64>(move _1346) -> [return: bb551, unwind: bb836];
    }

    bb551: {
        StorageDead(_1346);
        _1344 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1345) -> [return: bb552, unwind: bb836];
    }

    bb552: {
        StorageDead(_1345);
        _1348 = discriminant(_1344);
        switchInt(move _1348) -> [0: bb553, 1: bb554, otherwise: bb18];
    }

    bb553: {
        StorageLive(_1352);
        _1352 = ((_1344 as Continue).0: i64);
        _1343 = _1352;
        StorageDead(_1352);
        _1319 = math::orders::is_oracle_too_divergent_with_twap_5min(move _1320, move _1329, move _1343) -> [return: bb556, unwind: bb836];
    }

    bb554: {
        StorageLive(_1349);
        _1349 = ((_1344 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1351);
        _1351 = _1349;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1351) -> [return: bb555, unwind: bb836];
    }

    bb555: {
        StorageDead(_1351);
        StorageDead(_1349);
        StorageDead(_1343);
        StorageDead(_1329);
        StorageDead(_1320);
        StorageDead(_1319);
        goto -> bb782;
    }

    bb556: {
        StorageDead(_1343);
        StorageDead(_1329);
        StorageDead(_1320);
        _1318 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1319) -> [return: bb557, unwind: bb836];
    }

    bb557: {
        StorageDead(_1319);
        _1353 = discriminant(_1318);
        switchInt(move _1353) -> [0: bb558, 1: bb559, otherwise: bb18];
    }

    bb558: {
        StorageLive(_1357);
        _1357 = ((_1318 as Continue).0: bool);
        _1317 = _1357;
        StorageDead(_1357);
        StorageDead(_1344);
        drop(_1332) -> [return: bb870, unwind: bb883];
    }

    bb559: {
        StorageLive(_1354);
        _1354 = ((_1318 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1356);
        _1356 = _1354;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1356) -> [return: bb560, unwind: bb836];
    }

    bb560: {
        StorageDead(_1356);
        StorageDead(_1354);
        goto -> bb782;
    }

    bb561: {
        StorageLive(_1362);
        _1362 = ();
        _1360 = std::result::Result::<(), error::ErrorCode>::Ok(move _1362);
        StorageDead(_1362);
        goto -> bb570;
    }

    bb562: {
        StorageLive(_1363);
        _1363 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_1364);
        StorageLive(_1365);
        StorageLive(_1366);
        StorageLive(_1367);
        StorageLive(_1368);
        StorageLive(_1369);
        StorageLive(_1370);
        StorageLive(_1371);
        StorageLive(_1372);
        StorageLive(_1373);
        StorageLive(_1374);
        _1845 = const _;
        _1374 = &(*_1845);
        _1373 = &(*_1374);
        _1372 = move _1373 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1373);
        StorageLive(_1376);
        StorageLive(_1377);
        StorageLive(_1378);
        StorageLive(_1379);
        StorageLive(_1380);
        StorageLive(_1381);
        StorageLive(_1382);
        _1382 = &_1363;
        _1381 = &(*_1382);
        _1380 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1381) -> [return: bb563, unwind: bb886];
    }

    bb563: {
        StorageDead(_1381);
        _1379 = [move _1380];
        StorageDead(_1380);
        _1378 = &_1379;
        _1377 = &(*_1378);
        _1376 = move _1377 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1377);
        _1371 = Arguments::<'_>::new_v1(move _1372, move _1376) -> [return: bb564, unwind: bb886];
    }

    bb564: {
        StorageDead(_1376);
        StorageDead(_1372);
        _1370 = format(move _1371) -> [return: bb565, unwind: bb886];
    }

    bb565: {
        StorageDead(_1371);
        StorageDead(_1382);
        StorageDead(_1379);
        StorageDead(_1378);
        StorageDead(_1374);
        _1369 = move _1370;
        StorageDead(_1370);
        _1368 = &_1369;
        _1367 = &(*_1368);
        _1366 = <String as Deref>::deref(move _1367) -> [return: bb566, unwind: bb835];
    }

    bb566: {
        _1365 = &(*_1366);
        StorageDead(_1367);
        _1364 = solana_program::log::sol_log(move _1365) -> [return: bb567, unwind: bb835];
    }

    bb567: {
        StorageDead(_1365);
        drop(_1369) -> [return: bb568, unwind: bb886];
    }

    bb568: {
        StorageDead(_1369);
        StorageDead(_1368);
        StorageDead(_1366);
        StorageDead(_1364);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        _1385 = const "liability oracle too divergent";
        _1384 = &(*_1385);
        _1383 = solana_program::log::sol_log(move _1384) -> [return: bb569, unwind: bb886];
    }

    bb569: {
        StorageDead(_1384);
        StorageDead(_1385);
        StorageDead(_1383);
        StorageLive(_1386);
        _1386 = _1363;
        _1360 = std::result::Result::<(), error::ErrorCode>::Err(move _1386);
        StorageDead(_1386);
        StorageDead(_1363);
        goto -> bb570;
    }

    bb570: {
        StorageDead(_1361);
        _1359 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1360) -> [return: bb571, unwind: bb886];
    }

    bb571: {
        StorageDead(_1360);
        _1387 = discriminant(_1359);
        switchInt(move _1387) -> [0: bb572, 1: bb573, otherwise: bb18];
    }

    bb572: {
        StorageLive(_1391);
        _1391 = ((_1359 as Continue).0: ());
        _1358 = _1391;
        StorageDead(_1391);
        StorageDead(_1359);
        StorageDead(_1358);
        StorageLive(_1392);
        StorageLive(_1393);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        _1398 = _413;
        _1397 = <i64 as Cast>::cast::<i64>(move _1398) -> [return: bb575, unwind: bb886];
    }

    bb573: {
        StorageLive(_1388);
        _1388 = ((_1359 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1390);
        _1390 = _1388;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1390) -> [return: bb574, unwind: bb886];
    }

    bb574: {
        StorageDead(_1390);
        StorageDead(_1388);
        StorageDead(_1359);
        StorageDead(_1358);
        goto -> bb784;
    }

    bb575: {
        StorageDead(_1398);
        _1396 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1397) -> [return: bb576, unwind: bb886];
    }

    bb576: {
        StorageDead(_1397);
        _1399 = discriminant(_1396);
        switchInt(move _1399) -> [0: bb577, 1: bb578, otherwise: bb18];
    }

    bb577: {
        StorageLive(_1403);
        _1403 = ((_1396 as Continue).0: i64);
        _1395 = _1403;
        StorageDead(_1403);
        StorageLive(_1404);
        StorageLive(_1405);
        StorageLive(_1406);
        StorageLive(_1407);
        StorageLive(_1408);
        StorageLive(_1409);
        StorageLive(_1410);
        _1410 = &(*_12);
        StorageLive(_1411);
        StorageLive(_1412);
        _1412 = &_1;
        _1411 = &(*_1412);
        _1409 = SpotMarketMap::<'_>::get_ref(move _1410, move _1411) -> [return: bb580, unwind: bb886];
    }

    bb578: {
        StorageLive(_1400);
        _1400 = ((_1396 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1402);
        _1402 = _1400;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1402) -> [return: bb579, unwind: bb886];
    }

    bb579: {
        StorageDead(_1402);
        StorageDead(_1400);
        StorageDead(_1395);
        StorageDead(_1394);
        goto -> bb780;
    }

    bb580: {
        StorageDead(_1411);
        StorageDead(_1410);
        _1408 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1409) -> [return: bb581, unwind: bb886];
    }

    bb581: {
        _1869 = const true;
        StorageDead(_1409);
        _1413 = discriminant(_1408);
        switchInt(move _1413) -> [0: bb582, 1: bb583, otherwise: bb18];
    }

    bb582: {
        StorageLive(_1417);
        _1417 = move ((_1408 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1407 = move _1417;
        StorageDead(_1417);
        _1406 = &_1407;
        _1405 = <Ref<'_, SpotMarket> as Deref>::deref(move _1406) -> [return: bb585, unwind: bb834];
    }

    bb583: {
        StorageLive(_1414);
        _1414 = ((_1408 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1416);
        _1416 = _1414;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1416) -> [return: bb584, unwind: bb882];
    }

    bb584: {
        StorageDead(_1416);
        StorageDead(_1414);
        StorageDead(_1406);
        StorageDead(_1404);
        StorageDead(_1395);
        StorageDead(_1394);
        goto -> bb872;
    }

    bb585: {
        StorageDead(_1406);
        _1404 = (((*_1405).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_1418);
        StorageLive(_1419);
        StorageLive(_1420);
        StorageLive(_1421);
        StorageLive(_1422);
        _1422 = &((*_16).7: state::state::OracleGuardRails);
        _1421 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _1422) -> [return: bb586, unwind: bb834];
    }

    bb586: {
        StorageDead(_1422);
        _1420 = <u64 as Cast>::cast::<i64>(move _1421) -> [return: bb587, unwind: bb834];
    }

    bb587: {
        StorageDead(_1421);
        _1419 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1420) -> [return: bb588, unwind: bb834];
    }

    bb588: {
        StorageDead(_1420);
        _1423 = discriminant(_1419);
        switchInt(move _1423) -> [0: bb589, 1: bb590, otherwise: bb18];
    }

    bb589: {
        StorageLive(_1427);
        _1427 = ((_1419 as Continue).0: i64);
        _1418 = _1427;
        StorageDead(_1427);
        _1394 = math::orders::is_oracle_too_divergent_with_twap_5min(move _1395, move _1404, move _1418) -> [return: bb592, unwind: bb834];
    }

    bb590: {
        StorageLive(_1424);
        _1424 = ((_1419 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1426);
        _1426 = _1424;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1426) -> [return: bb591, unwind: bb834];
    }

    bb591: {
        StorageDead(_1426);
        StorageDead(_1424);
        StorageDead(_1418);
        StorageDead(_1404);
        StorageDead(_1395);
        StorageDead(_1394);
        goto -> bb779;
    }

    bb592: {
        StorageDead(_1418);
        StorageDead(_1404);
        StorageDead(_1395);
        _1393 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1394) -> [return: bb593, unwind: bb834];
    }

    bb593: {
        StorageDead(_1394);
        _1428 = discriminant(_1393);
        switchInt(move _1428) -> [0: bb594, 1: bb595, otherwise: bb18];
    }

    bb594: {
        StorageLive(_1432);
        _1432 = ((_1393 as Continue).0: bool);
        _1392 = _1432;
        StorageDead(_1432);
        StorageDead(_1419);
        drop(_1407) -> [return: bb871, unwind: bb882];
    }

    bb595: {
        StorageLive(_1429);
        _1429 = ((_1393 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1431);
        _1431 = _1429;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1431) -> [return: bb596, unwind: bb834];
    }

    bb596: {
        StorageDead(_1431);
        StorageDead(_1429);
        goto -> bb779;
    }

    bb597: {
        StorageLive(_1437);
        _1437 = ();
        _1435 = std::result::Result::<(), error::ErrorCode>::Ok(move _1437);
        StorageDead(_1437);
        goto -> bb606;
    }

    bb598: {
        StorageLive(_1438);
        _1438 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_1439);
        StorageLive(_1440);
        StorageLive(_1441);
        StorageLive(_1442);
        StorageLive(_1443);
        StorageLive(_1444);
        StorageLive(_1445);
        StorageLive(_1446);
        StorageLive(_1447);
        StorageLive(_1448);
        StorageLive(_1449);
        _1844 = const _;
        _1449 = &(*_1844);
        _1448 = &(*_1449);
        _1447 = move _1448 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1448);
        StorageLive(_1451);
        StorageLive(_1452);
        StorageLive(_1453);
        StorageLive(_1454);
        StorageLive(_1455);
        StorageLive(_1456);
        StorageLive(_1457);
        _1457 = &_1438;
        _1456 = &(*_1457);
        _1455 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1456) -> [return: bb599, unwind: bb886];
    }

    bb599: {
        StorageDead(_1456);
        _1454 = [move _1455];
        StorageDead(_1455);
        _1453 = &_1454;
        _1452 = &(*_1453);
        _1451 = move _1452 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1452);
        _1446 = Arguments::<'_>::new_v1(move _1447, move _1451) -> [return: bb600, unwind: bb886];
    }

    bb600: {
        StorageDead(_1451);
        StorageDead(_1447);
        _1445 = format(move _1446) -> [return: bb601, unwind: bb886];
    }

    bb601: {
        StorageDead(_1446);
        StorageDead(_1457);
        StorageDead(_1454);
        StorageDead(_1453);
        StorageDead(_1449);
        _1444 = move _1445;
        StorageDead(_1445);
        _1443 = &_1444;
        _1442 = &(*_1443);
        _1441 = <String as Deref>::deref(move _1442) -> [return: bb602, unwind: bb833];
    }

    bb602: {
        _1440 = &(*_1441);
        StorageDead(_1442);
        _1439 = solana_program::log::sol_log(move _1440) -> [return: bb603, unwind: bb833];
    }

    bb603: {
        StorageDead(_1440);
        drop(_1444) -> [return: bb604, unwind: bb886];
    }

    bb604: {
        StorageDead(_1444);
        StorageDead(_1443);
        StorageDead(_1441);
        StorageDead(_1439);
        StorageLive(_1458);
        StorageLive(_1459);
        StorageLive(_1460);
        _1460 = const "asset oracle too divergent";
        _1459 = &(*_1460);
        _1458 = solana_program::log::sol_log(move _1459) -> [return: bb605, unwind: bb886];
    }

    bb605: {
        StorageDead(_1459);
        StorageDead(_1460);
        StorageDead(_1458);
        StorageLive(_1461);
        _1461 = _1438;
        _1435 = std::result::Result::<(), error::ErrorCode>::Err(move _1461);
        StorageDead(_1461);
        StorageDead(_1438);
        goto -> bb606;
    }

    bb606: {
        StorageDead(_1436);
        _1434 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1435) -> [return: bb607, unwind: bb886];
    }

    bb607: {
        StorageDead(_1435);
        _1462 = discriminant(_1434);
        switchInt(move _1462) -> [0: bb608, 1: bb609, otherwise: bb18];
    }

    bb608: {
        StorageLive(_1466);
        _1466 = ((_1434 as Continue).0: ());
        _1433 = _1466;
        StorageDead(_1466);
        StorageDead(_1434);
        StorageDead(_1433);
        StorageLive(_1467);
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        _1470 = _1222;
        StorageLive(_1471);
        _1471 = _1213;
        StorageLive(_1472);
        _1472 = _414;
        StorageLive(_1473);
        _1473 = _603;
        StorageLive(_1474);
        _1474 = _4;
        _1469 = validate_transfer_satisfies_limit_price(move _1470, move _1471, move _1472, move _1473, move _1474) -> [return: bb611, unwind: bb886];
    }

    bb609: {
        StorageLive(_1463);
        _1463 = ((_1434 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1465);
        _1465 = _1463;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1465) -> [return: bb610, unwind: bb886];
    }

    bb610: {
        StorageDead(_1465);
        StorageDead(_1463);
        StorageDead(_1434);
        StorageDead(_1433);
        goto -> bb781;
    }

    bb611: {
        StorageDead(_1474);
        StorageDead(_1473);
        StorageDead(_1472);
        StorageDead(_1471);
        StorageDead(_1470);
        _1468 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1469) -> [return: bb612, unwind: bb886];
    }

    bb612: {
        StorageDead(_1469);
        _1475 = discriminant(_1468);
        switchInt(move _1475) -> [0: bb613, 1: bb614, otherwise: bb18];
    }

    bb613: {
        StorageLive(_1479);
        _1479 = ((_1468 as Continue).0: ());
        _1467 = _1479;
        StorageDead(_1479);
        StorageDead(_1468);
        StorageDead(_1467);
        StorageLive(_1480);
        StorageLive(_1481);
        StorageLive(_1482);
        StorageLive(_1483);
        StorageLive(_1484);
        StorageLive(_1485);
        StorageLive(_1486);
        _1486 = _1213;
        StorageLive(_1487);
        StorageLive(_1488);
        StorageLive(_1489);
        StorageLive(_1490);
        _1490 = _1087;
        _1489 = <u32 as Cast>::cast::<u128>(move _1490) -> [return: bb616, unwind: bb886];
    }

    bb614: {
        StorageLive(_1476);
        _1476 = ((_1468 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1478);
        _1478 = _1476;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1478) -> [return: bb615, unwind: bb886];
    }

    bb615: {
        StorageDead(_1478);
        StorageDead(_1476);
        StorageDead(_1468);
        StorageDead(_1467);
        goto -> bb781;
    }

    bb616: {
        StorageDead(_1490);
        _1488 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1489) -> [return: bb617, unwind: bb886];
    }

    bb617: {
        StorageDead(_1489);
        _1491 = discriminant(_1488);
        switchInt(move _1491) -> [0: bb618, 1: bb619, otherwise: bb18];
    }

    bb618: {
        StorageLive(_1495);
        _1495 = ((_1488 as Continue).0: u128);
        _1487 = _1495;
        StorageDead(_1495);
        _1485 = <u128 as SafeMath>::safe_mul(move _1486, move _1487) -> [return: bb621, unwind: bb886];
    }

    bb619: {
        StorageLive(_1492);
        _1492 = ((_1488 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1494);
        _1494 = _1492;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1494) -> [return: bb620, unwind: bb886];
    }

    bb620: {
        StorageDead(_1494);
        StorageDead(_1492);
        StorageDead(_1487);
        StorageDead(_1486);
        StorageDead(_1485);
        goto -> bb776;
    }

    bb621: {
        StorageDead(_1487);
        StorageDead(_1486);
        _1484 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1485) -> [return: bb622, unwind: bb886];
    }

    bb622: {
        StorageDead(_1485);
        _1496 = discriminant(_1484);
        switchInt(move _1496) -> [0: bb623, 1: bb624, otherwise: bb18];
    }

    bb623: {
        StorageLive(_1500);
        _1500 = ((_1484 as Continue).0: u128);
        _1483 = _1500;
        StorageDead(_1500);
        _1482 = <u128 as SafeMath>::safe_div(move _1483, const _) -> [return: bb626, unwind: bb886];
    }

    bb624: {
        StorageLive(_1497);
        _1497 = ((_1484 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1499);
        _1499 = _1497;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1499) -> [return: bb625, unwind: bb886];
    }

    bb625: {
        StorageDead(_1499);
        StorageDead(_1497);
        goto -> bb776;
    }

    bb626: {
        StorageDead(_1483);
        _1481 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1482) -> [return: bb627, unwind: bb886];
    }

    bb627: {
        StorageDead(_1482);
        _1501 = discriminant(_1481);
        switchInt(move _1501) -> [0: bb628, 1: bb629, otherwise: bb18];
    }

    bb628: {
        StorageLive(_1505);
        _1505 = ((_1481 as Continue).0: u128);
        _1480 = _1505;
        StorageDead(_1505);
        StorageDead(_1488);
        StorageDead(_1484);
        StorageDead(_1481);
        StorageLive(_1506);
        StorageLive(_1507);
        StorageLive(_1508);
        StorageLive(_1509);
        StorageLive(_1510);
        _1510 = &(*_12);
        StorageLive(_1511);
        StorageLive(_1512);
        _1512 = &_2;
        _1511 = &(*_1512);
        _1509 = SpotMarketMap::<'_>::get_ref_mut(move _1510, move _1511) -> [return: bb631, unwind: bb886];
    }

    bb629: {
        StorageLive(_1502);
        _1502 = ((_1481 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1504);
        _1504 = _1502;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1504) -> [return: bb630, unwind: bb886];
    }

    bb630: {
        StorageDead(_1504);
        StorageDead(_1502);
        goto -> bb777;
    }

    bb631: {
        StorageDead(_1511);
        StorageDead(_1510);
        _1508 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1509) -> [return: bb632, unwind: bb886];
    }

    bb632: {
        StorageDead(_1509);
        _1513 = discriminant(_1508);
        switchInt(move _1513) -> [0: bb633, 1: bb634, otherwise: bb18];
    }

    bb633: {
        StorageLive(_1517);
        _1517 = move ((_1508 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1507 = move _1517;
        StorageDead(_1517);
        _1903 = discriminant(_1508);
        StorageDead(_1512);
        StorageDead(_1508);
        StorageLive(_1518);
        StorageLive(_1519);
        StorageLive(_1520);
        StorageLive(_1521);
        StorageLive(_1522);
        StorageLive(_1523);
        StorageLive(_1524);
        _1524 = _1213;
        StorageLive(_1525);
        _1525 = _1480;
        _1523 = <u128 as SafeMath>::safe_sub(move _1524, move _1525) -> [return: bb636, unwind: bb832];
    }

    bb634: {
        StorageLive(_1514);
        _1514 = ((_1508 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1516);
        _1516 = _1514;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1516) -> [return: bb635, unwind: bb881];
    }

    bb635: {
        StorageDead(_1516);
        StorageDead(_1514);
        _1901 = discriminant(_1508);
        StorageDead(_1512);
        StorageDead(_1508);
        goto -> bb775;
    }

    bb636: {
        StorageDead(_1525);
        StorageDead(_1524);
        _1522 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1523) -> [return: bb637, unwind: bb832];
    }

    bb637: {
        StorageDead(_1523);
        _1526 = discriminant(_1522);
        switchInt(move _1526) -> [0: bb638, 1: bb639, otherwise: bb18];
    }

    bb638: {
        StorageLive(_1530);
        _1530 = ((_1522 as Continue).0: u128);
        _1521 = _1530;
        StorageDead(_1530);
        StorageLive(_1531);
        StorageLive(_1532);
        _1843 = const _;
        _1532 = &(*_1843);
        _1531 = &(*_1532);
        StorageLive(_1534);
        StorageLive(_1535);
        StorageLive(_1536);
        StorageLive(_1537);
        _1537 = &mut _1507;
        _1536 = &mut (*_1537);
        _1535 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1536) -> [return: bb641, unwind: bb832];
    }

    bb639: {
        StorageLive(_1527);
        _1527 = ((_1522 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1529);
        _1529 = _1527;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1529) -> [return: bb640, unwind: bb832];
    }

    bb640: {
        StorageDead(_1529);
        StorageDead(_1527);
        StorageDead(_1521);
        StorageDead(_1520);
        goto -> bb773;
    }

    bb641: {
        _1534 = &mut (*_1535);
        StorageDead(_1536);
        StorageLive(_1538);
        StorageLive(_1539);
        StorageLive(_1540);
        StorageLive(_1541);
        StorageLive(_1542);
        _1542 = &mut (*_5);
        StorageLive(_1543);
        _1543 = _2;
        _1541 = User::get_spot_position_mut(move _1542, move _1543) -> [return: bb642, unwind: bb832];
    }

    bb642: {
        StorageDead(_1543);
        StorageDead(_1542);
        _1540 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1541) -> [return: bb643, unwind: bb832];
    }

    bb643: {
        StorageDead(_1541);
        _1544 = discriminant(_1540);
        switchInt(move _1544) -> [0: bb644, 1: bb645, otherwise: bb18];
    }

    bb644: {
        StorageLive(_1548);
        _1548 = move ((_1540 as Continue).0: &mut state::user::SpotPosition);
        _1539 = &mut (*_1548);
        StorageDead(_1548);
        _1538 = &mut (*_1539);
        StorageLive(_1549);
        StorageLive(_1550);
        StorageLive(_1551);
        StorageLive(_1552);
        StorageLive(_1553);
        _1553 = _1213;
        StorageLive(_1554);
        _1554 = _1480;
        _1552 = <u128 as SafeMath>::safe_sub(move _1553, move _1554) -> [return: bb647, unwind: bb832];
    }

    bb645: {
        StorageLive(_1545);
        _1545 = ((_1540 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1547);
        _1547 = _1545;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1547) -> [return: bb646, unwind: bb832];
    }

    bb646: {
        StorageDead(_1547);
        StorageDead(_1545);
        StorageDead(_1538);
        StorageDead(_1534);
        StorageDead(_1531);
        StorageDead(_1521);
        StorageDead(_1520);
        goto -> bb772;
    }

    bb647: {
        StorageDead(_1554);
        StorageDead(_1553);
        _1551 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1552) -> [return: bb648, unwind: bb832];
    }

    bb648: {
        StorageDead(_1552);
        _1555 = discriminant(_1551);
        switchInt(move _1555) -> [0: bb649, 1: bb650, otherwise: bb18];
    }

    bb649: {
        StorageLive(_1559);
        _1559 = ((_1551 as Continue).0: u128);
        _1550 = _1559;
        StorageDead(_1559);
        _1549 = Option::<u128>::Some(move _1550);
        StorageDead(_1550);
        _1520 = update_spot_balances_and_cumulative_deposits(move _1521, move _1531, move _1534, move _1538, const false, move _1549) -> [return: bb652, unwind: bb832];
    }

    bb650: {
        StorageLive(_1556);
        _1556 = ((_1551 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1558);
        _1558 = _1556;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1558) -> [return: bb651, unwind: bb832];
    }

    bb651: {
        StorageDead(_1558);
        StorageDead(_1556);
        StorageDead(_1550);
        StorageDead(_1549);
        StorageDead(_1538);
        StorageDead(_1534);
        StorageDead(_1531);
        StorageDead(_1521);
        StorageDead(_1520);
        goto -> bb771;
    }

    bb652: {
        StorageDead(_1549);
        StorageDead(_1538);
        StorageDead(_1534);
        StorageDead(_1531);
        StorageDead(_1521);
        _1519 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1520) -> [return: bb653, unwind: bb832];
    }

    bb653: {
        StorageDead(_1520);
        _1560 = discriminant(_1519);
        switchInt(move _1560) -> [0: bb654, 1: bb655, otherwise: bb18];
    }

    bb654: {
        StorageLive(_1564);
        _1564 = ((_1519 as Continue).0: ());
        _1518 = _1564;
        StorageDead(_1564);
        StorageDead(_1551);
        StorageDead(_1540);
        StorageDead(_1539);
        StorageDead(_1537);
        StorageDead(_1535);
        StorageDead(_1532);
        StorageDead(_1522);
        StorageDead(_1519);
        StorageDead(_1518);
        StorageLive(_1565);
        StorageLive(_1566);
        StorageLive(_1567);
        StorageLive(_1568);
        _1568 = _1480;
        StorageLive(_1569);
        StorageLive(_1570);
        _1842 = const _;
        _1570 = &(*_1842);
        _1569 = &(*_1570);
        StorageLive(_1572);
        StorageLive(_1573);
        StorageLive(_1574);
        StorageLive(_1575);
        _1575 = &mut _1507;
        _1574 = &mut (*_1575);
        _1573 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1574) -> [return: bb657, unwind: bb832];
    }

    bb655: {
        StorageLive(_1561);
        _1561 = ((_1519 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1563);
        _1563 = _1561;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1563) -> [return: bb656, unwind: bb832];
    }

    bb656: {
        StorageDead(_1563);
        StorageDead(_1561);
        goto -> bb771;
    }

    bb657: {
        _1572 = &mut (*_1573);
        StorageDead(_1574);
        _1567 = update_revenue_pool_balances(move _1568, move _1569, move _1572) -> [return: bb658, unwind: bb832];
    }

    bb658: {
        StorageDead(_1572);
        StorageDead(_1569);
        StorageDead(_1568);
        _1566 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1567) -> [return: bb659, unwind: bb832];
    }

    bb659: {
        StorageDead(_1567);
        _1576 = discriminant(_1566);
        switchInt(move _1576) -> [0: bb660, 1: bb661, otherwise: bb18];
    }

    bb660: {
        StorageLive(_1580);
        _1580 = ((_1566 as Continue).0: ());
        _1565 = _1580;
        StorageDead(_1580);
        StorageDead(_1575);
        StorageDead(_1573);
        StorageDead(_1570);
        StorageDead(_1566);
        StorageDead(_1565);
        StorageLive(_1581);
        StorageLive(_1582);
        StorageLive(_1583);
        StorageLive(_1584);
        _1584 = _1213;
        StorageLive(_1585);
        StorageLive(_1586);
        _1841 = const _;
        _1586 = &(*_1841);
        _1585 = &(*_1586);
        StorageLive(_1588);
        StorageLive(_1589);
        StorageLive(_1590);
        StorageLive(_1591);
        _1591 = &mut _1507;
        _1590 = &mut (*_1591);
        _1589 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1590) -> [return: bb663, unwind: bb832];
    }

    bb661: {
        StorageLive(_1577);
        _1577 = ((_1566 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1579);
        _1579 = _1577;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1579) -> [return: bb662, unwind: bb832];
    }

    bb662: {
        StorageDead(_1579);
        StorageDead(_1577);
        StorageDead(_1575);
        StorageDead(_1573);
        StorageDead(_1570);
        StorageDead(_1566);
        StorageDead(_1565);
        goto -> bb774;
    }

    bb663: {
        _1588 = &mut (*_1589);
        StorageDead(_1590);
        StorageLive(_1592);
        StorageLive(_1593);
        StorageLive(_1594);
        StorageLive(_1595);
        StorageLive(_1596);
        _1596 = &mut (*_8);
        StorageLive(_1597);
        _1597 = _2;
        _1595 = User::get_spot_position_mut(move _1596, move _1597) -> [return: bb664, unwind: bb832];
    }

    bb664: {
        StorageDead(_1597);
        StorageDead(_1596);
        _1594 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1595) -> [return: bb665, unwind: bb832];
    }

    bb665: {
        StorageDead(_1595);
        _1598 = discriminant(_1594);
        switchInt(move _1598) -> [0: bb666, 1: bb667, otherwise: bb18];
    }

    bb666: {
        StorageLive(_1602);
        _1602 = move ((_1594 as Continue).0: &mut state::user::SpotPosition);
        _1593 = &mut (*_1602);
        StorageDead(_1602);
        _1592 = &mut (*_1593);
        StorageLive(_1603);
        StorageLive(_1604);
        _1604 = _1213;
        _1603 = Option::<u128>::Some(move _1604);
        StorageDead(_1604);
        _1583 = update_spot_balances_and_cumulative_deposits(move _1584, move _1585, move _1588, move _1592, const false, move _1603) -> [return: bb669, unwind: bb832];
    }

    bb667: {
        StorageLive(_1599);
        _1599 = ((_1594 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1601);
        _1601 = _1599;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1601) -> [return: bb668, unwind: bb832];
    }

    bb668: {
        StorageDead(_1601);
        StorageDead(_1599);
        StorageDead(_1592);
        StorageDead(_1588);
        StorageDead(_1585);
        StorageDead(_1584);
        StorageDead(_1583);
        goto -> bb770;
    }

    bb669: {
        StorageDead(_1603);
        StorageDead(_1592);
        StorageDead(_1588);
        StorageDead(_1585);
        StorageDead(_1584);
        _1582 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1583) -> [return: bb670, unwind: bb832];
    }

    bb670: {
        StorageDead(_1583);
        _1605 = discriminant(_1582);
        switchInt(move _1605) -> [0: bb671, 1: bb672, otherwise: bb18];
    }

    bb671: {
        StorageLive(_1609);
        _1609 = ((_1582 as Continue).0: ());
        _1581 = _1609;
        StorageDead(_1609);
        StorageDead(_1594);
        StorageDead(_1593);
        StorageDead(_1591);
        StorageDead(_1589);
        StorageDead(_1586);
        StorageDead(_1582);
        StorageDead(_1581);
        _1506 = const ();
        drop(_1507) -> [return: bb674, unwind: bb886];
    }

    bb672: {
        StorageLive(_1606);
        _1606 = ((_1582 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1608);
        _1608 = _1606;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1608) -> [return: bb673, unwind: bb832];
    }

    bb673: {
        StorageDead(_1608);
        StorageDead(_1606);
        goto -> bb770;
    }

    bb674: {
        StorageDead(_1507);
        StorageDead(_1506);
        StorageLive(_1610);
        StorageLive(_1611);
        StorageLive(_1612);
        StorageLive(_1613);
        StorageLive(_1614);
        _1614 = &(*_12);
        StorageLive(_1615);
        StorageLive(_1616);
        _1616 = &_1;
        _1615 = &(*_1616);
        _1613 = SpotMarketMap::<'_>::get_ref_mut(move _1614, move _1615) -> [return: bb675, unwind: bb886];
    }

    bb675: {
        StorageDead(_1615);
        StorageDead(_1614);
        _1612 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1613) -> [return: bb676, unwind: bb886];
    }

    bb676: {
        StorageDead(_1613);
        _1617 = discriminant(_1612);
        switchInt(move _1617) -> [0: bb677, 1: bb678, otherwise: bb18];
    }

    bb677: {
        StorageLive(_1621);
        _1621 = move ((_1612 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1611 = move _1621;
        StorageDead(_1621);
        _1907 = discriminant(_1612);
        StorageDead(_1616);
        StorageDead(_1612);
        StorageLive(_1622);
        StorageLive(_1623);
        StorageLive(_1624);
        StorageLive(_1625);
        _1625 = _1222;
        StorageLive(_1626);
        StorageLive(_1627);
        _1840 = const _;
        _1627 = &(*_1840);
        _1626 = &(*_1627);
        StorageLive(_1629);
        StorageLive(_1630);
        StorageLive(_1631);
        StorageLive(_1632);
        _1632 = &mut _1611;
        _1631 = &mut (*_1632);
        _1630 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1631) -> [return: bb680, unwind: bb831];
    }

    bb678: {
        StorageLive(_1618);
        _1618 = ((_1612 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1620);
        _1620 = _1618;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1620) -> [return: bb679, unwind: bb880];
    }

    bb679: {
        StorageDead(_1620);
        StorageDead(_1618);
        _1905 = discriminant(_1612);
        StorageDead(_1616);
        StorageDead(_1612);
        goto -> bb769;
    }

    bb680: {
        _1629 = &mut (*_1630);
        StorageDead(_1631);
        StorageLive(_1633);
        StorageLive(_1634);
        StorageLive(_1635);
        StorageLive(_1636);
        StorageLive(_1637);
        _1637 = &mut (*_8);
        StorageLive(_1638);
        _1638 = _1;
        _1636 = User::force_get_spot_position_mut(move _1637, move _1638) -> [return: bb681, unwind: bb831];
    }

    bb681: {
        StorageDead(_1638);
        StorageDead(_1637);
        _1635 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1636) -> [return: bb682, unwind: bb831];
    }

    bb682: {
        StorageDead(_1636);
        _1639 = discriminant(_1635);
        switchInt(move _1639) -> [0: bb683, 1: bb684, otherwise: bb18];
    }

    bb683: {
        StorageLive(_1643);
        _1643 = move ((_1635 as Continue).0: &mut state::user::SpotPosition);
        _1634 = &mut (*_1643);
        StorageDead(_1643);
        _1633 = &mut (*_1634);
        StorageLive(_1644);
        StorageLive(_1645);
        _1645 = _1222;
        _1644 = Option::<u128>::Some(move _1645);
        StorageDead(_1645);
        _1624 = update_spot_balances_and_cumulative_deposits(move _1625, move _1626, move _1629, move _1633, const false, move _1644) -> [return: bb686, unwind: bb831];
    }

    bb684: {
        StorageLive(_1640);
        _1640 = ((_1635 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1642);
        _1642 = _1640;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1642) -> [return: bb685, unwind: bb831];
    }

    bb685: {
        StorageDead(_1642);
        StorageDead(_1640);
        StorageDead(_1633);
        StorageDead(_1629);
        StorageDead(_1626);
        StorageDead(_1625);
        StorageDead(_1624);
        goto -> bb767;
    }

    bb686: {
        StorageDead(_1644);
        StorageDead(_1633);
        StorageDead(_1629);
        StorageDead(_1626);
        StorageDead(_1625);
        _1623 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1624) -> [return: bb687, unwind: bb831];
    }

    bb687: {
        StorageDead(_1624);
        _1646 = discriminant(_1623);
        switchInt(move _1646) -> [0: bb688, 1: bb689, otherwise: bb18];
    }

    bb688: {
        StorageLive(_1650);
        _1650 = ((_1623 as Continue).0: ());
        _1622 = _1650;
        StorageDead(_1650);
        StorageDead(_1635);
        StorageDead(_1634);
        StorageDead(_1632);
        StorageDead(_1630);
        StorageDead(_1627);
        StorageDead(_1623);
        StorageDead(_1622);
        StorageLive(_1651);
        StorageLive(_1652);
        StorageLive(_1653);
        StorageLive(_1654);
        _1654 = _1222;
        StorageLive(_1655);
        StorageLive(_1656);
        _1839 = const _;
        _1656 = &(*_1839);
        _1655 = &(*_1656);
        StorageLive(_1658);
        StorageLive(_1659);
        StorageLive(_1660);
        StorageLive(_1661);
        _1661 = &mut _1611;
        _1660 = &mut (*_1661);
        _1659 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1660) -> [return: bb691, unwind: bb831];
    }

    bb689: {
        StorageLive(_1647);
        _1647 = ((_1623 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1649);
        _1649 = _1647;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1649) -> [return: bb690, unwind: bb831];
    }

    bb690: {
        StorageDead(_1649);
        StorageDead(_1647);
        goto -> bb767;
    }

    bb691: {
        _1658 = &mut (*_1659);
        StorageDead(_1660);
        StorageLive(_1662);
        StorageLive(_1663);
        StorageLive(_1664);
        StorageLive(_1665);
        StorageLive(_1666);
        _1666 = &mut (*_5);
        StorageLive(_1667);
        _1667 = _1;
        _1665 = User::force_get_spot_position_mut(move _1666, move _1667) -> [return: bb692, unwind: bb831];
    }

    bb692: {
        StorageDead(_1667);
        StorageDead(_1666);
        _1664 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1665) -> [return: bb693, unwind: bb831];
    }

    bb693: {
        StorageDead(_1665);
        _1668 = discriminant(_1664);
        switchInt(move _1668) -> [0: bb694, 1: bb695, otherwise: bb18];
    }

    bb694: {
        StorageLive(_1672);
        _1672 = move ((_1664 as Continue).0: &mut state::user::SpotPosition);
        _1663 = &mut (*_1672);
        StorageDead(_1672);
        _1662 = &mut (*_1663);
        StorageLive(_1673);
        StorageLive(_1674);
        _1674 = _1222;
        _1673 = Option::<u128>::Some(move _1674);
        StorageDead(_1674);
        _1653 = update_spot_balances_and_cumulative_deposits(move _1654, move _1655, move _1658, move _1662, const false, move _1673) -> [return: bb697, unwind: bb831];
    }

    bb695: {
        StorageLive(_1669);
        _1669 = ((_1664 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1671);
        _1671 = _1669;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1671) -> [return: bb696, unwind: bb831];
    }

    bb696: {
        StorageDead(_1671);
        StorageDead(_1669);
        StorageDead(_1662);
        StorageDead(_1658);
        StorageDead(_1655);
        StorageDead(_1654);
        StorageDead(_1653);
        goto -> bb766;
    }

    bb697: {
        StorageDead(_1673);
        StorageDead(_1662);
        StorageDead(_1658);
        StorageDead(_1655);
        StorageDead(_1654);
        _1652 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1653) -> [return: bb698, unwind: bb831];
    }

    bb698: {
        StorageDead(_1653);
        _1675 = discriminant(_1652);
        switchInt(move _1675) -> [0: bb699, 1: bb700, otherwise: bb18];
    }

    bb699: {
        StorageLive(_1679);
        _1679 = ((_1652 as Continue).0: ());
        _1651 = _1679;
        StorageDead(_1679);
        StorageDead(_1664);
        StorageDead(_1663);
        StorageDead(_1661);
        StorageDead(_1659);
        StorageDead(_1656);
        StorageDead(_1652);
        StorageDead(_1651);
        _1610 = const ();
        drop(_1611) -> [return: bb702, unwind: bb886];
    }

    bb700: {
        StorageLive(_1676);
        _1676 = ((_1652 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1678);
        _1678 = _1676;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1678) -> [return: bb701, unwind: bb831];
    }

    bb701: {
        StorageDead(_1678);
        StorageDead(_1676);
        goto -> bb766;
    }

    bb702: {
        StorageDead(_1611);
        StorageDead(_1610);
        StorageLive(_1681);
        StorageLive(_1682);
        StorageLive(_1683);
        StorageLive(_1684);
        _1684 = &(*_5);
        StorageLive(_1685);
        _1685 = &(*_11);
        StorageLive(_1686);
        _1686 = &(*_12);
        StorageLive(_1687);
        _1687 = &mut (*_13);
        StorageLive(_1688);
        _1688 = _17;
        StorageLive(_1689);
        _1689 = _1068;
        _1683 = calculate_margin_freed(move _1684, move _1685, move _1686, move _1687, move _1688, move _1689) -> [return: bb703, unwind: bb886];
    }

    bb703: {
        StorageDead(_1689);
        StorageDead(_1688);
        StorageDead(_1687);
        StorageDead(_1686);
        StorageDead(_1685);
        StorageDead(_1684);
        _1682 = <std::result::Result<(u64, MarginCalculation), error::ErrorCode> as Try>::branch(move _1683) -> [return: bb704, unwind: bb886];
    }

    bb704: {
        StorageDead(_1683);
        _1690 = discriminant(_1682);
        switchInt(move _1690) -> [0: bb705, 1: bb706, otherwise: bb18];
    }

    bb705: {
        StorageLive(_1694);
        _1694 = ((_1682 as Continue).0: (u64, state::margin_calculation::MarginCalculation));
        _1681 = _1694;
        StorageDead(_1694);
        StorageLive(_1680);
        _1680 = (_1681.0: u64);
        StorageDead(_1682);
        StorageDead(_1681);
        StorageLive(_1695);
        StorageLive(_1696);
        StorageLive(_1697);
        StorageLive(_1698);
        _1698 = _932;
        StorageLive(_1699);
        _1699 = _1680;
        _1697 = <u64 as SafeMath>::safe_add(move _1698, move _1699) -> [return: bb708, unwind: bb886];
    }

    bb706: {
        StorageLive(_1691);
        _1691 = ((_1682 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1693);
        _1693 = _1691;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1693) -> [return: bb707, unwind: bb886];
    }

    bb707: {
        StorageDead(_1693);
        StorageDead(_1691);
        StorageDead(_1682);
        StorageDead(_1681);
        goto -> bb778;
    }

    bb708: {
        StorageDead(_1699);
        StorageDead(_1698);
        _1696 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1697) -> [return: bb709, unwind: bb886];
    }

    bb709: {
        StorageDead(_1697);
        _1700 = discriminant(_1696);
        switchInt(move _1700) -> [0: bb710, 1: bb711, otherwise: bb18];
    }

    bb710: {
        StorageLive(_1704);
        _1704 = ((_1696 as Continue).0: u64);
        _1695 = _1704;
        StorageDead(_1704);
        _932 = move _1695;
        StorageDead(_1695);
        StorageDead(_1696);
        StorageLive(_1705);
        StorageLive(_1706);
        StorageLive(_1707);
        StorageLive(_1708);
        _1708 = &mut (*_5);
        StorageLive(_1709);
        _1709 = _1680;
        _1707 = User::increment_margin_freed(move _1708, move _1709) -> [return: bb713, unwind: bb886];
    }

    bb711: {
        StorageLive(_1701);
        _1701 = ((_1696 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1703);
        _1703 = _1701;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1703) -> [return: bb712, unwind: bb886];
    }

    bb712: {
        StorageDead(_1703);
        StorageDead(_1701);
        StorageDead(_1695);
        StorageDead(_1696);
        goto -> bb765;
    }

    bb713: {
        StorageDead(_1709);
        StorageDead(_1708);
        _1706 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1707) -> [return: bb714, unwind: bb886];
    }

    bb714: {
        StorageDead(_1707);
        _1710 = discriminant(_1706);
        switchInt(move _1710) -> [0: bb715, 1: bb716, otherwise: bb18];
    }

    bb715: {
        StorageLive(_1714);
        _1714 = ((_1706 as Continue).0: ());
        _1705 = _1714;
        StorageDead(_1714);
        StorageDead(_1706);
        StorageDead(_1705);
        StorageLive(_1715);
        StorageLive(_1716);
        StorageLive(_1717);
        _1717 = _1213;
        StorageLive(_1718);
        _1718 = _1126;
        _1716 = Ge(move _1717, move _1718);
        switchInt(move _1716) -> [0: bb719, otherwise: bb718];
    }

    bb716: {
        StorageLive(_1711);
        _1711 = ((_1706 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1713);
        _1713 = _1711;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1713) -> [return: bb717, unwind: bb886];
    }

    bb717: {
        StorageDead(_1713);
        StorageDead(_1711);
        StorageDead(_1706);
        StorageDead(_1705);
        goto -> bb765;
    }

    bb718: {
        StorageDead(_1718);
        StorageDead(_1717);
        StorageLive(_1719);
        StorageLive(_1720);
        _1720 = &mut (*_5);
        _1719 = User::exit_liquidation(move _1720) -> [return: bb720, unwind: bb886];
    }

    bb719: {
        StorageDead(_1718);
        StorageDead(_1717);
        StorageLive(_1721);
        StorageLive(_1722);
        _1722 = &(*_5);
        _1721 = is_user_bankrupt(move _1722) -> [return: bb721, unwind: bb886];
    }

    bb720: {
        StorageDead(_1720);
        StorageDead(_1719);
        _1715 = const ();
        goto -> bb726;
    }

    bb721: {
        switchInt(move _1721) -> [0: bb724, otherwise: bb722];
    }

    bb722: {
        StorageDead(_1722);
        StorageLive(_1723);
        StorageLive(_1724);
        _1724 = &mut (*_5);
        _1723 = User::enter_bankruptcy(move _1724) -> [return: bb723, unwind: bb886];
    }

    bb723: {
        StorageDead(_1724);
        StorageDead(_1723);
        _1715 = const ();
        goto -> bb725;
    }

    bb724: {
        StorageDead(_1722);
        _1715 = const ();
        goto -> bb725;
    }

    bb725: {
        StorageDead(_1721);
        goto -> bb726;
    }

    bb726: {
        StorageDead(_1716);
        StorageDead(_1715);
        StorageLive(_1725);
        StorageLive(_1726);
        StorageLive(_1727);
        StorageLive(_1728);
        _1728 = math::margin::MarginRequirementType::Initial;
        _1727 = MarginContext::standard(move _1728) -> [return: bb727, unwind: bb886];
    }

    bb727: {
        StorageDead(_1728);
        StorageLive(_1729);
        StorageLive(_1730);
        StorageLive(_1731);
        _1731 = _1;
        StorageLive(_1732);
        StorageLive(_1733);
        StorageLive(_1734);
        _1734 = _1222;
        _1733 = move _1734 as i128 (IntToInt);
        StorageDead(_1734);
        _1735 = Eq(_1733, const i128::MIN);
        assert(!move _1735, "attempt to negate `{}`, which would overflow", _1733) -> [success: bb728, unwind: bb886];
    }

    bb728: {
        _1732 = Neg(move _1733);
        StorageDead(_1733);
        _1730 = (move _1731, move _1732);
        StorageDead(_1732);
        StorageDead(_1731);
        StorageLive(_1736);
        StorageLive(_1737);
        _1737 = _2;
        StorageLive(_1738);
        StorageLive(_1739);
        _1739 = _1213;
        _1738 = move _1739 as i128 (IntToInt);
        StorageDead(_1739);
        _1736 = (move _1737, move _1738);
        StorageDead(_1738);
        StorageDead(_1737);
        _1729 = [move _1730, move _1736];
        StorageDead(_1736);
        StorageDead(_1730);
        _1726 = MarginContext::fuel_spot_deltas(move _1727, move _1729) -> [return: bb729, unwind: bb886];
    }

    bb729: {
        StorageDead(_1729);
        StorageDead(_1727);
        StorageLive(_1740);
        _1740 = &(*_8);
        StorageLive(_1741);
        _1741 = _14;
        _1725 = MarginContext::fuel_numerator(move _1726, move _1740, move _1741) -> [return: bb730, unwind: bb886];
    }

    bb730: {
        StorageDead(_1741);
        StorageDead(_1740);
        StorageDead(_1726);
        StorageLive(_1742);
        StorageLive(_1743);
        StorageLive(_1744);
        StorageLive(_1745);
        StorageLive(_1746);
        _1746 = &mut (*_8);
        StorageLive(_1747);
        _1747 = &(*_11);
        StorageLive(_1748);
        _1748 = &(*_12);
        StorageLive(_1749);
        _1749 = &mut (*_13);
        StorageLive(_1750);
        _1750 = _1725;
        StorageLive(_1751);
        _1751 = &mut (*_10);
        StorageLive(_1752);
        _1752 = _14;
        _1745 = User::calculate_margin_and_increment_fuel_bonus(move _1746, move _1747, move _1748, move _1749, move _1750, move _1751, move _1752) -> [return: bb731, unwind: bb886];
    }

    bb731: {
        StorageDead(_1752);
        StorageDead(_1751);
        StorageDead(_1750);
        StorageDead(_1749);
        StorageDead(_1748);
        StorageDead(_1747);
        StorageDead(_1746);
        StorageLive(_1753);
        _1753 = {closure@programs/drift/src/controller/liquidation.rs:1708:14: 1708:20};
        _1744 = std::result::Result::<MarginCalculation, error::ErrorCode>::map::<bool, {closure@programs/drift/src/controller/liquidation.rs:1708:14: 1708:20}>(move _1745, move _1753) -> [return: bb732, unwind: bb886];
    }

    bb732: {
        StorageDead(_1753);
        StorageDead(_1745);
        _1743 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1744) -> [return: bb733, unwind: bb886];
    }

    bb733: {
        StorageDead(_1744);
        _1754 = discriminant(_1743);
        switchInt(move _1754) -> [0: bb734, 1: bb735, otherwise: bb18];
    }

    bb734: {
        StorageLive(_1758);
        _1758 = ((_1743 as Continue).0: bool);
        _1742 = _1758;
        StorageDead(_1758);
        StorageDead(_1743);
        StorageLive(_1759);
        StorageLive(_1760);
        StorageLive(_1761);
        StorageLive(_1762);
        _1762 = _1742;
        switchInt(move _1762) -> [0: bb738, otherwise: bb737];
    }

    bb735: {
        StorageLive(_1755);
        _1755 = ((_1743 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1757);
        _1757 = _1755;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1757) -> [return: bb736, unwind: bb886];
    }

    bb736: {
        StorageDead(_1757);
        StorageDead(_1755);
        StorageDead(_1743);
        goto -> bb764;
    }

    bb737: {
        StorageLive(_1763);
        _1763 = ();
        _1761 = std::result::Result::<(), error::ErrorCode>::Ok(move _1763);
        StorageDead(_1763);
        goto -> bb746;
    }

    bb738: {
        StorageLive(_1764);
        _1764 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_1765);
        StorageLive(_1766);
        StorageLive(_1767);
        StorageLive(_1768);
        StorageLive(_1769);
        StorageLive(_1770);
        StorageLive(_1771);
        StorageLive(_1772);
        StorageLive(_1773);
        StorageLive(_1774);
        StorageLive(_1775);
        _1838 = const _;
        _1775 = &(*_1838);
        _1774 = &(*_1775);
        _1773 = move _1774 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1774);
        StorageLive(_1777);
        StorageLive(_1778);
        StorageLive(_1779);
        StorageLive(_1780);
        StorageLive(_1781);
        StorageLive(_1782);
        StorageLive(_1783);
        _1783 = &_1764;
        _1782 = &(*_1783);
        _1781 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1782) -> [return: bb739, unwind: bb886];
    }

    bb739: {
        StorageDead(_1782);
        _1780 = [move _1781];
        StorageDead(_1781);
        _1779 = &_1780;
        _1778 = &(*_1779);
        _1777 = move _1778 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1778);
        _1772 = Arguments::<'_>::new_v1(move _1773, move _1777) -> [return: bb740, unwind: bb886];
    }

    bb740: {
        StorageDead(_1777);
        StorageDead(_1773);
        _1771 = format(move _1772) -> [return: bb741, unwind: bb886];
    }

    bb741: {
        StorageDead(_1772);
        StorageDead(_1783);
        StorageDead(_1780);
        StorageDead(_1779);
        StorageDead(_1775);
        _1770 = move _1771;
        StorageDead(_1771);
        _1769 = &_1770;
        _1768 = &(*_1769);
        _1767 = <String as Deref>::deref(move _1768) -> [return: bb742, unwind: bb830];
    }

    bb742: {
        _1766 = &(*_1767);
        StorageDead(_1768);
        _1765 = solana_program::log::sol_log(move _1766) -> [return: bb743, unwind: bb830];
    }

    bb743: {
        StorageDead(_1766);
        drop(_1770) -> [return: bb744, unwind: bb886];
    }

    bb744: {
        StorageDead(_1770);
        StorageDead(_1769);
        StorageDead(_1767);
        StorageDead(_1765);
        StorageLive(_1784);
        StorageLive(_1785);
        StorageLive(_1786);
        _1786 = const "Liquidator doesnt have enough collateral to take over borrow";
        _1785 = &(*_1786);
        _1784 = solana_program::log::sol_log(move _1785) -> [return: bb745, unwind: bb886];
    }

    bb745: {
        StorageDead(_1785);
        StorageDead(_1786);
        StorageDead(_1784);
        StorageLive(_1787);
        _1787 = _1764;
        _1761 = std::result::Result::<(), error::ErrorCode>::Err(move _1787);
        StorageDead(_1787);
        StorageDead(_1764);
        goto -> bb746;
    }

    bb746: {
        StorageDead(_1762);
        _1760 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1761) -> [return: bb747, unwind: bb886];
    }

    bb747: {
        StorageDead(_1761);
        _1788 = discriminant(_1760);
        switchInt(move _1788) -> [0: bb748, 1: bb749, otherwise: bb18];
    }

    bb748: {
        StorageLive(_1792);
        _1792 = ((_1760 as Continue).0: ());
        _1759 = _1792;
        StorageDead(_1792);
        StorageDead(_1760);
        StorageDead(_1759);
        StorageLive(_1793);
        StorageLive(_1794);
        StorageLive(_1795);
        StorageLive(_1796);
        StorageLive(_1797);
        StorageLive(_1798);
        StorageLive(_1799);
        StorageLive(_1800);
        StorageLive(_1801);
        StorageLive(_1802);
        StorageLive(_1803);
        StorageLive(_1804);
        StorageLive(_1805);
        StorageLive(_1806);
        StorageLive(_1807);
        _1807 = _14;
        StorageLive(_1808);
        _1808 = _922;
        StorageLive(_1809);
        _1809 = LiquidationType::LiquidateSpot;
        StorageLive(_1810);
        _1810 = (*_6);
        StorageLive(_1811);
        _1811 = (*_9);
        StorageLive(_1812);
        _1812 = (_866.3: u128);
        StorageLive(_1813);
        _1813 = (_866.1: i128);
        StorageLive(_1814);
        StorageLive(_1815);
        _1815 = &(*_5);
        _1814 = User::is_bankrupt(move _1815) -> [return: bb751, unwind: bb886];
    }

    bb749: {
        StorageLive(_1789);
        _1789 = ((_1760 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1791);
        _1791 = _1789;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1791) -> [return: bb750, unwind: bb886];
    }

    bb750: {
        StorageDead(_1791);
        StorageDead(_1789);
        StorageDead(_1760);
        StorageDead(_1759);
        goto -> bb764;
    }

    bb751: {
        StorageDead(_1815);
        StorageLive(_1816);
        _1816 = _932;
        StorageLive(_1817);
        StorageLive(_1818);
        _1818 = _1;
        StorageLive(_1819);
        _1819 = _413;
        StorageLive(_1820);
        _1820 = _1222;
        StorageLive(_1821);
        _1821 = _2;
        StorageLive(_1822);
        _1822 = _602;
        StorageLive(_1823);
        _1823 = _1213;
        StorageLive(_1824);
        StorageLive(_1825);
        StorageLive(_1826);
        StorageLive(_1827);
        _1827 = _1480;
        _1826 = <u128 as Cast>::cast::<u64>(move _1827) -> [return: bb752, unwind: bb886];
    }

    bb752: {
        StorageDead(_1827);
        _1825 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1826) -> [return: bb753, unwind: bb886];
    }

    bb753: {
        StorageDead(_1826);
        _1828 = discriminant(_1825);
        switchInt(move _1828) -> [0: bb754, 1: bb755, otherwise: bb18];
    }

    bb754: {
        StorageLive(_1832);
        _1832 = ((_1825 as Continue).0: u64);
        _1824 = _1832;
        StorageDead(_1832);
        _1817 = LiquidateSpotRecord { asset_market_index: move _1818, asset_price: move _1819, asset_transfer: move _1820, liability_market_index: move _1821, liability_price: move _1822, liability_transfer: move _1823, if_fee: move _1824 };
        StorageDead(_1824);
        StorageDead(_1823);
        StorageDead(_1822);
        StorageDead(_1821);
        StorageDead(_1820);
        StorageDead(_1819);
        StorageDead(_1818);
        StorageLive(_1833);
        _1833 = <LiquidationRecord as Default>::default() -> [return: bb757, unwind: bb886];
    }

    bb755: {
        StorageLive(_1829);
        _1829 = ((_1825 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1831);
        _1831 = _1829;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1831) -> [return: bb756, unwind: bb886];
    }

    bb756: {
        StorageDead(_1831);
        StorageDead(_1829);
        StorageDead(_1824);
        StorageDead(_1823);
        StorageDead(_1822);
        StorageDead(_1821);
        StorageDead(_1820);
        StorageDead(_1819);
        StorageDead(_1818);
        StorageDead(_1817);
        StorageDead(_1816);
        StorageDead(_1814);
        StorageDead(_1813);
        StorageDead(_1812);
        StorageDead(_1811);
        StorageDead(_1810);
        StorageDead(_1809);
        StorageDead(_1808);
        StorageDead(_1807);
        StorageDead(_1804);
        StorageDead(_1801);
        StorageDead(_1799);
        StorageDead(_1796);
        StorageDead(_1795);
        StorageDead(_1825);
        StorageDead(_1806);
        StorageDead(_1805);
        StorageDead(_1803);
        StorageDead(_1802);
        StorageDead(_1800);
        StorageDead(_1798);
        StorageDead(_1797);
        StorageDead(_1794);
        StorageDead(_1793);
        goto -> bb764;
    }

    bb757: {
        _1806 = LiquidationRecord { ts: move _1807, liquidation_type: move _1809, user: move _1810, liquidator: move _1811, margin_requirement: move _1812, total_collateral: move _1813, margin_freed: move _1816, liquidation_id: move _1808, bankrupt: move _1814, canceled_order_ids: move (_1833.9: std::vec::Vec<u32>), liquidate_perp: move (_1833.10: state::events::LiquidatePerpRecord), liquidate_spot: move _1817, liquidate_borrow_for_perp_pnl: move (_1833.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_1833.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_1833.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_1833.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_1817);
        StorageDead(_1816);
        StorageDead(_1814);
        StorageDead(_1813);
        StorageDead(_1812);
        StorageDead(_1811);
        StorageDead(_1810);
        StorageDead(_1809);
        StorageDead(_1808);
        StorageDead(_1807);
        _1805 = &_1806;
        _1804 = &(*_1805);
        _1803 = <LiquidationRecord as anchor_lang::Event>::data(move _1804) -> [return: bb758, unwind: bb829];
    }

    bb758: {
        StorageDead(_1804);
        _1802 = &_1803;
        _1801 = &(*_1802);
        _1800 = <Vec<u8> as Deref>::deref(move _1801) -> [return: bb759, unwind: bb828];
    }

    bb759: {
        _1799 = &(*_1800);
        StorageDead(_1801);
        _1798 = [move _1799];
        StorageDead(_1799);
        _1797 = &_1798;
        _1796 = &(*_1797);
        _1795 = move _1796 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1796);
        _1794 = solana_program::log::sol_log_data(move _1795) -> [return: bb760, unwind: bb828];
    }

    bb760: {
        StorageDead(_1795);
        drop(_1803) -> [return: bb761, unwind: bb829];
    }

    bb761: {
        drop(_1806) -> [return: bb762, unwind: bb886];
    }

    bb762: {
        StorageDead(_1833);
        StorageDead(_1825);
        StorageDead(_1806);
        StorageDead(_1805);
        StorageDead(_1803);
        StorageDead(_1802);
        StorageDead(_1800);
        StorageDead(_1798);
        StorageDead(_1797);
        StorageDead(_1794);
        _1793 = const ();
        StorageDead(_1793);
        StorageLive(_1834);
        _1834 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1834);
        StorageDead(_1834);
        StorageDead(_1742);
        StorageDead(_1725);
        StorageDead(_1680);
        StorageDead(_1480);
        StorageDead(_1392);
        StorageDead(_1317);
        StorageDead(_1222);
        StorageDead(_1213);
        StorageDead(_1208);
        StorageDead(_1189);
        StorageDead(_1174);
        StorageDead(_1155);
        StorageDead(_1142);
        StorageDead(_1126);
        StorageDead(_1087);
        StorageDead(_1077);
        StorageDead(_1068);
        StorageDead(_954);
        drop(_933) -> [return: bb763, unwind: bb891];
    }

    bb763: {
        _1872 = const false;
        StorageDead(_933);
        StorageDead(_932);
        StorageDead(_922);
        StorageDead(_866);
        StorageDead(_851);
        StorageDead(_607);
        StorageDead(_606);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_414);
        StorageDead(_413);
        StorageDead(_412);
        _1873 = const false;
        StorageDead(_236);
        _1874 = const false;
        StorageDead(_110);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb827;
    }

    bb764: {
        StorageDead(_1742);
        StorageDead(_1725);
        goto -> bb765;
    }

    bb765: {
        StorageDead(_1680);
        goto -> bb778;
    }

    bb766: {
        StorageDead(_1664);
        StorageDead(_1663);
        StorageDead(_1661);
        StorageDead(_1659);
        StorageDead(_1656);
        StorageDead(_1652);
        StorageDead(_1651);
        goto -> bb768;
    }

    bb767: {
        StorageDead(_1635);
        StorageDead(_1634);
        StorageDead(_1632);
        StorageDead(_1630);
        StorageDead(_1627);
        StorageDead(_1623);
        StorageDead(_1622);
        goto -> bb768;
    }

    bb768: {
        drop(_1611) -> [return: bb769, unwind: bb886];
    }

    bb769: {
        StorageDead(_1611);
        StorageDead(_1610);
        goto -> bb778;
    }

    bb770: {
        StorageDead(_1594);
        StorageDead(_1593);
        StorageDead(_1591);
        StorageDead(_1589);
        StorageDead(_1586);
        StorageDead(_1582);
        StorageDead(_1581);
        goto -> bb774;
    }

    bb771: {
        StorageDead(_1551);
        goto -> bb772;
    }

    bb772: {
        StorageDead(_1540);
        StorageDead(_1539);
        StorageDead(_1537);
        StorageDead(_1535);
        StorageDead(_1532);
        goto -> bb773;
    }

    bb773: {
        StorageDead(_1522);
        StorageDead(_1519);
        StorageDead(_1518);
        goto -> bb774;
    }

    bb774: {
        drop(_1507) -> [return: bb775, unwind: bb886];
    }

    bb775: {
        StorageDead(_1507);
        StorageDead(_1506);
        goto -> bb778;
    }

    bb776: {
        StorageDead(_1483);
        StorageDead(_1482);
        goto -> bb777;
    }

    bb777: {
        StorageDead(_1488);
        StorageDead(_1484);
        StorageDead(_1481);
        goto -> bb778;
    }

    bb778: {
        StorageDead(_1480);
        goto -> bb781;
    }

    bb779: {
        StorageDead(_1419);
        drop(_1407) -> [return: bb872, unwind: bb882];
    }

    bb780: {
        StorageDead(_1396);
        StorageDead(_1393);
        goto -> bb781;
    }

    bb781: {
        StorageDead(_1392);
        goto -> bb784;
    }

    bb782: {
        StorageDead(_1344);
        drop(_1332) -> [return: bb873, unwind: bb883];
    }

    bb783: {
        StorageDead(_1321);
        StorageDead(_1318);
        goto -> bb784;
    }

    bb784: {
        StorageDead(_1317);
        goto -> bb785;
    }

    bb785: {
        StorageDead(_1222);
        StorageDead(_1213);
        StorageDead(_1208);
        goto -> bb787;
    }

    bb786: {
        StorageDead(_1193);
        StorageDead(_1190);
        goto -> bb787;
    }

    bb787: {
        StorageDead(_1189);
        goto -> bb788;
    }

    bb788: {
        StorageDead(_1174);
        goto -> bb789;
    }

    bb789: {
        StorageDead(_1155);
        goto -> bb790;
    }

    bb790: {
        StorageDead(_1142);
        goto -> bb791;
    }

    bb791: {
        StorageDead(_1126);
        goto -> bb793;
    }

    bb792: {
        StorageDead(_1091);
        StorageDead(_1088);
        goto -> bb793;
    }

    bb793: {
        StorageDead(_1087);
        goto -> bb794;
    }

    bb794: {
        StorageDead(_1077);
        goto -> bb795;
    }

    bb795: {
        StorageDead(_1068);
        goto -> bb801;
    }

    bb796: {
        StorageDead(_1024);
        StorageDead(_1023);
        goto -> bb797;
    }

    bb797: {
        StorageDead(_993);
        goto -> bb798;
    }

    bb798: {
        StorageDead(_984);
        goto -> bb800;
    }

    bb799: {
        StorageDead(_966);
        StorageDead(_958);
        goto -> bb800;
    }

    bb800: {
        StorageDead(_957);
        StorageDead(_955);
        goto -> bb801;
    }

    bb801: {
        StorageDead(_954);
        switchInt(_1872) -> [0: bb802, otherwise: bb875];
    }

    bb802: {
        _1872 = const false;
        StorageDead(_933);
        StorageDead(_932);
        goto -> bb803;
    }

    bb803: {
        StorageDead(_922);
        goto -> bb806;
    }

    bb804: {
        StorageDead(_909);
        StorageDead(_907);
        goto -> bb805;
    }

    bb805: {
        StorageDead(_884);
        StorageDead(_882);
        StorageDead(_881);
        goto -> bb806;
    }

    bb806: {
        StorageDead(_866);
        goto -> bb807;
    }

    bb807: {
        StorageDead(_851);
        goto -> bb808;
    }

    bb808: {
        StorageDead(_607);
        StorageDead(_606);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_602);
        StorageDead(_601);
        goto -> bb816;
    }

    bb809: {
        StorageDead(_609);
        StorageDead(_778);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_769);
        goto -> bb815;
    }

    bb810: {
        StorageDead(_701);
        goto -> bb811;
    }

    bb811: {
        StorageDead(_654);
        goto -> bb812;
    }

    bb812: {
        StorageDead(_621);
        StorageDead(_620);
        goto -> bb813;
    }

    bb813: {
        drop(_609) -> [return: bb814, unwind: bb891];
    }

    bb814: {
        StorageDead(_609);
        goto -> bb815;
    }

    bb815: {
        StorageDead(_608);
        goto -> bb816;
    }

    bb816: {
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_414);
        StorageDead(_413);
        StorageDead(_412);
        goto -> bb877;
    }

    bb817: {
        StorageDead(_420);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_583);
        StorageDead(_580);
        goto -> bb823;
    }

    bb818: {
        StorageDead(_512);
        goto -> bb819;
    }

    bb819: {
        StorageDead(_465);
        goto -> bb820;
    }

    bb820: {
        StorageDead(_432);
        StorageDead(_431);
        goto -> bb821;
    }

    bb821: {
        drop(_420) -> [return: bb822, unwind: bb891];
    }

    bb822: {
        StorageDead(_420);
        goto -> bb823;
    }

    bb823: {
        StorageDead(_419);
        goto -> bb877;
    }

    bb824: {
        _1873 = const false;
        StorageDead(_236);
        goto -> bb879;
    }

    bb825: {
        _1874 = const false;
        StorageDead(_110);
        goto -> bb826;
    }

    bb826: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb827;
    }

    bb827: {
        return;
    }

    bb828 (cleanup): {
        drop(_1803) -> [return: bb829, unwind terminate(cleanup)];
    }

    bb829 (cleanup): {
        drop(_1806) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb830 (cleanup): {
        drop(_1770) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb831 (cleanup): {
        drop(_1611) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb832 (cleanup): {
        drop(_1507) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb833 (cleanup): {
        drop(_1444) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb834 (cleanup): {
        drop(_1407) -> [return: bb882, unwind terminate(cleanup)];
    }

    bb835 (cleanup): {
        drop(_1369) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb836 (cleanup): {
        drop(_1332) -> [return: bb883, unwind terminate(cleanup)];
    }

    bb837 (cleanup): {
        drop(_1296) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb838 (cleanup): {
        drop(_1271) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb839 (cleanup): {
        drop(_1249) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb840 (cleanup): {
        drop(_1110) -> [return: bb884, unwind terminate(cleanup)];
    }

    bb841 (cleanup): {
        drop(_1044) -> [return: bb842, unwind terminate(cleanup)];
    }

    bb842 (cleanup): {
        drop(_1047) -> [return: bb843, unwind terminate(cleanup)];
    }

    bb843 (cleanup): {
        drop(_1064) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb844 (cleanup): {
        drop(_1057) -> [return: bb886, unwind terminate(cleanup)];
    }

    bb845 (cleanup): {
        drop(_892) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb846 (cleanup): {
        drop(_828) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb847 (cleanup): {
        drop(_809) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb848 (cleanup): {
        drop(_745) -> [return: bb851, unwind terminate(cleanup)];
    }

    bb849 (cleanup): {
        drop(_726) -> [return: bb851, unwind terminate(cleanup)];
    }

    bb850 (cleanup): {
        drop(_678) -> [return: bb851, unwind terminate(cleanup)];
    }

    bb851 (cleanup): {
        drop(_609) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb852 (cleanup): {
        drop(_556) -> [return: bb855, unwind terminate(cleanup)];
    }

    bb853 (cleanup): {
        drop(_537) -> [return: bb855, unwind terminate(cleanup)];
    }

    bb854 (cleanup): {
        drop(_489) -> [return: bb855, unwind terminate(cleanup)];
    }

    bb855 (cleanup): {
        drop(_420) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb856 (cleanup): {
        drop(_335) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb857 (cleanup): {
        drop(_316) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb858 (cleanup): {
        drop(_281) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb859 (cleanup): {
        drop(_262) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb860 (cleanup): {
        drop(_209) -> [return: bb894, unwind terminate(cleanup)];
    }

    bb861 (cleanup): {
        drop(_190) -> [return: bb894, unwind terminate(cleanup)];
    }

    bb862 (cleanup): {
        drop(_155) -> [return: bb894, unwind terminate(cleanup)];
    }

    bb863 (cleanup): {
        drop(_136) -> [return: bb894, unwind terminate(cleanup)];
    }

    bb864 (cleanup): {
        drop(_97) -> [return: bb868, unwind terminate(cleanup)];
    }

    bb865 (cleanup): {
        drop(_78) -> [return: bb868, unwind terminate(cleanup)];
    }

    bb866 (cleanup): {
        drop(_53) -> [return: bb868, unwind terminate(cleanup)];
    }

    bb867 (cleanup): {
        drop(_34) -> [return: bb868, unwind terminate(cleanup)];
    }

    bb868 (cleanup): {
        resume;
    }

    bb869: {
        _1895 = discriminant(_1111);
        StorageDead(_1115);
        _1871 = const false;
        StorageDead(_1111);
        StorageDead(_1110);
        StorageDead(_1108);
        StorageDead(_1091);
        StorageDead(_1088);
        StorageLive(_1126);
        StorageLive(_1127);
        StorageLive(_1128);
        StorageLive(_1129);
        _1129 = _1068;
        StorageLive(_1130);
        _1130 = _415;
        StorageLive(_1131);
        _1131 = _416;
        StorageLive(_1132);
        _1132 = _1077;
        StorageLive(_1133);
        _1133 = _605;
        StorageLive(_1134);
        _1134 = _603;
        StorageLive(_1135);
        _1135 = _602;
        StorageLive(_1136);
        _1136 = _1087;
        _1128 = calculate_liability_transfer_to_cover_margin_shortage(move _1129, move _1130, move _1131, move _1132, move _1133, move _1134, move _1135, move _1136) -> [return: bb465, unwind: bb886];
    }

    bb870: {
        _1897 = discriminant(_1333);
        StorageDead(_1337);
        _1870 = const false;
        StorageDead(_1333);
        StorageDead(_1332);
        StorageDead(_1330);
        StorageDead(_1321);
        StorageDead(_1318);
        StorageLive(_1358);
        StorageLive(_1359);
        StorageLive(_1360);
        StorageLive(_1361);
        _1361 = _1317;
        switchInt(move _1361) -> [0: bb561, otherwise: bb562];
    }

    bb871: {
        _1899 = discriminant(_1408);
        StorageDead(_1412);
        _1869 = const false;
        StorageDead(_1408);
        StorageDead(_1407);
        StorageDead(_1405);
        StorageDead(_1396);
        StorageDead(_1393);
        StorageLive(_1433);
        StorageLive(_1434);
        StorageLive(_1435);
        StorageLive(_1436);
        _1436 = _1392;
        switchInt(move _1436) -> [0: bb597, otherwise: bb598];
    }

    bb872: {
        _1909 = discriminant(_1408);
        StorageDead(_1412);
        _1869 = const false;
        StorageDead(_1408);
        StorageDead(_1407);
        StorageDead(_1405);
        goto -> bb780;
    }

    bb873: {
        _1911 = discriminant(_1333);
        StorageDead(_1337);
        _1870 = const false;
        StorageDead(_1333);
        StorageDead(_1332);
        StorageDead(_1330);
        goto -> bb783;
    }

    bb874: {
        _1913 = discriminant(_1111);
        StorageDead(_1115);
        _1871 = const false;
        StorageDead(_1111);
        StorageDead(_1110);
        StorageDead(_1108);
        goto -> bb792;
    }

    bb875: {
        drop(_933) -> [return: bb802, unwind: bb891];
    }

    bb876: {
        drop(_236) -> [return: bb824, unwind: bb894];
    }

    bb877: {
        switchInt(_1873) -> [0: bb824, otherwise: bb876];
    }

    bb878: {
        drop(_110) -> [return: bb825, unwind: bb868];
    }

    bb879: {
        switchInt(_1874) -> [0: bb825, otherwise: bb878];
    }

    bb880 (cleanup): {
        _1915 = discriminant(_1612);
        goto -> bb886;
    }

    bb881 (cleanup): {
        _1916 = discriminant(_1508);
        goto -> bb886;
    }

    bb882 (cleanup): {
        _1917 = discriminant(_1408);
        goto -> bb886;
    }

    bb883 (cleanup): {
        _1918 = discriminant(_1333);
        goto -> bb886;
    }

    bb884 (cleanup): {
        _1919 = discriminant(_1111);
        goto -> bb886;
    }

    bb885 (cleanup): {
        drop(_933) -> [return: bb891, unwind terminate(cleanup)];
    }

    bb886 (cleanup): {
        switchInt(_1872) -> [0: bb891, otherwise: bb885];
    }

    bb887 (cleanup): {
        _1920 = discriminant(_934);
        goto -> bb891;
    }

    bb888 (cleanup): {
        _1921 = discriminant(_610);
        goto -> bb891;
    }

    bb889 (cleanup): {
        _1922 = discriminant(_421);
        goto -> bb891;
    }

    bb890 (cleanup): {
        drop(_236) -> [return: bb894, unwind terminate(cleanup)];
    }

    bb891 (cleanup): {
        switchInt(_1873) -> [0: bb894, otherwise: bb890];
    }

    bb892 (cleanup): {
        _1923 = discriminant(_237);
        goto -> bb894;
    }

    bb893 (cleanup): {
        drop(_110) -> [return: bb868, unwind terminate(cleanup)];
    }

    bb894 (cleanup): {
        switchInt(_1874) -> [0: bb868, otherwise: bb893];
    }

    bb895 (cleanup): {
        _1924 = discriminant(_111);
        goto -> bb868;
    }
}
