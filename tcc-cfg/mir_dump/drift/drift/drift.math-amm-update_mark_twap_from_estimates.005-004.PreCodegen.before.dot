digraph Mir_0_1793 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_mark_twap_from_estimates(_1: &amp;ReErased mut state::perp_market::AMM, _2: i64, _3: std::option::Option&lt;u64&gt;, _4: std::option::Option&lt;controller::position::PositionDirection&gt;, _5: std::option::Option&lt;i64&gt;) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _6: u64;<br align="left"/>let _7: u64;<br align="left"/>let mut _8: (u64, u64);<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _10: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _11: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _12: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _13: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _18: (u64, u64);<br align="left"/>let mut _19: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _20: i64;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _24: std::option::Option&lt;i64&gt;;<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug now =&gt; _2;<br align="left"/>debug precomputed_trade_price =&gt; _3;<br align="left"/>debug direction =&gt; _4;<br align="left"/>debug sanitize_clamp =&gt; _5;<br align="left"/>debug bid_price =&gt; _6;<br align="left"/>debug ask_price =&gt; _7;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>>;
    bb0__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;mut (*_1)<br/>StorageLive(_12)<br/>_12 = _3<br/>StorageLive(_13)<br/>_13 = _4<br/></td></tr><tr><td align="left">_10 = estimate_best_bid_ask_price(move _11, move _12, move _13)</td></tr></table>>];
    bb1__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb2__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_14 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb3__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_9 as Continue).0: (u64, u64))<br/>_8 = _18<br/>StorageDead(_18)<br/>StorageLive(_6)<br/>_6 = (_8.0: u64)<br/>StorageLive(_7)<br/>_7 = (_8.1: u64)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_19)<br/>_19 = &amp;mut (*_1)<br/>StorageLive(_20)<br/>_20 = _2<br/>StorageLive(_21)<br/>_21 = _6<br/>StorageLive(_22)<br/>_22 = _7<br/>StorageLive(_23)<br/>_23 = _3<br/>StorageLive(_24)<br/>_24 = _5<br/></td></tr><tr><td align="left">_0 = update_mark_twap(move _19, move _20, move _21, move _22, move _23, move _24)</td></tr></table>>];
    bb4__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_17)<br/>_17 = _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb6__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1793 -> bb1__0_1793 [label="return"];
    bb1__0_1793 -> bb2__0_1793 [label="return"];
    bb2__0_1793 -> bb3__0_1793 [label="0"];
    bb2__0_1793 -> bb5__0_1793 [label="1"];
    bb2__0_1793 -> bb4__0_1793 [label="otherwise"];
    bb3__0_1793 -> bb7__0_1793 [label="return"];
    bb5__0_1793 -> bb6__0_1793 [label="return"];
    bb6__0_1793 -> bb8__0_1793 [label=""];
    bb7__0_1793 -> bb8__0_1793 [label=""];
}
