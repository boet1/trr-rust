digraph Mir_0_3529 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn convert_switchboard_decimal(_1: &amp;ReErased switchboard::SwitchboardDecimal) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _2: u128;<br align="left"/>let mut _3: u32;<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u128;<br align="left"/>let mut _6: i128;<br align="left"/>let mut _7: i128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: i128;<br align="left"/>let mut _12: i128;<br align="left"/>let mut _13: u128;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: bool;<br align="left"/>debug switchboard_decimal =&gt; _1;<br align="left"/>debug switchboard_precision =&gt; _2;<br align="left"/>>;
    bb0__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = ((*_1).1: u32)<br/></td></tr><tr><td align="left">_2 = core::num::&lt;impl u128&gt;::pow(const 10_u128, move _3)</td></tr></table>>];
    bb1__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/>_4 = Gt(move _5, const _)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>_6 = ((*_1).0: i128)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/>_10 = Eq(const _, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _10, &quot;attempt to divide `{}` by zero&quot;, _9)</td></tr></table>>];
    bb3__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = Div(move _9, const _)<br/>StorageDead(_9)<br/>_7 = move _8 as i128 (IntToInt)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_0 = &lt;i128 as SafeMath&gt;::safe_div(move _6, move _7)</td></tr></table>>];
    bb4__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_11)<br/>_11 = ((*_1).0: i128)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _2<br/>_15 = Eq(_14, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _15, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb6__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_13 = Div(const _, move _14)<br/>StorageDead(_14)<br/>_12 = move _13 as i128 (IntToInt)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_0 = &lt;i128 as SafeMath&gt;::safe_mul(move _11, move _12)</td></tr></table>>];
    bb7__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_3529 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3529 -> bb1__0_3529 [label="return"];
    bb1__0_3529 -> bb5__0_3529 [label="0"];
    bb1__0_3529 -> bb2__0_3529 [label="otherwise"];
    bb2__0_3529 -> bb3__0_3529 [label="success"];
    bb3__0_3529 -> bb4__0_3529 [label="return"];
    bb4__0_3529 -> bb8__0_3529 [label=""];
    bb5__0_3529 -> bb6__0_3529 [label="success"];
    bb6__0_3529 -> bb7__0_3529 [label="return"];
    bb7__0_3529 -> bb8__0_3529 [label=""];
}
