// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::get_price_data` before PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::get_price_data(_1: &mut OracleMap<'_>, _2: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)) -> std::result::Result<&OraclePriceData, error::ErrorCode> {
    debug self => _1;
    debug id => _2;
    let mut _0: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &state::oracle_map::OracleMap<'_>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::Pubkey;
    let mut _8: !;
    let mut _9: &state::oracle::OraclePriceData;
    let _10: &state::oracle::OraclePriceData;
    let _11: ();
    let mut _12: bool;
    let mut _13: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _14: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _15: !;
    let mut _16: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _17: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _18: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _19: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _21: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let _23: &anchor_lang::prelude::Pubkey;
    let mut _24: isize;
    let _25: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _26: !;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 1];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &anchor_lang::prelude::Pubkey;
    let _45: &anchor_lang::prelude::Pubkey;
    let mut _46: error::ErrorCode;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _49: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _50: &state::oracle::OracleSource;
    let _51: &state::oracle::OracleSource;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: u64;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: std::option::Option<state::oracle::OraclePriceData>;
    let mut _60: &mut std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _61: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _62: state::oracle::OraclePriceData;
    let mut _63: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _64: &std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _65: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _66: &[&str; 1];
    scope 1 {
        debug account_info => _19;
        let _47: state::oracle::OraclePriceData;
        let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _58: state::oracle::OraclePriceData;
        scope 4 {
            debug price_data => _47;
        }
        scope 5 {
            debug residual => _55;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _58;
            scope 8 {
            }
        }
    }
    scope 2 {
        debug account_info => _25;
    }
    scope 3 {
        debug res => _33;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _6 = &(*_7);
        _4 = OracleMap::<'_>::should_get_quote_asset_price_data(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).5: state::oracle::OraclePriceData);
        _9 = &(*_10);
        _0 = std::result::Result::<&OraclePriceData, error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb28;
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_14);
        _14 = &(*_2);
        _12 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::contains_key::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _12) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_18);
        _18 = &(*_2);
        _16 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _17, move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_17);
        _0 = <Option<&OraclePriceData> as SafeUnwrap>::safe_unwrap(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb28;
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _22 = &(*_23);
        _20 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::get::<anchor_lang::prelude::Pubkey>(move _21, move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _66 = const _;
        _37 = &(*_66);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _44) -> [return: bb13, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_20 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _19 = _25;
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_2).1: state::oracle::OracleSource);
        _50 = &(*_51);
        StorageLive(_52);
        _52 = &(*_19);
        StorageLive(_53);
        _53 = ((*_1).3: u64);
        _49 = get_oracle_price(move _50, move _52, move _53) -> [return: bb19, unwind continue];
    }

    bb13: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        StorageDead(_28);
        drop(_32) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_46);
        _46 = error::ErrorCode::OracleNotFound;
        _0 = std::result::Result::<&OraclePriceData, error::ErrorCode>::Err(move _46);
        StorageDead(_46);
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb27;
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _49) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_49);
        _54 = discriminant(_48);
        switchInt(move _54) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_58);
        _58 = ((_48 as Continue).0: state::oracle::OraclePriceData);
        _47 = _58;
        StorageDead(_58);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut ((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_61);
        _61 = (*_2);
        StorageLive(_62);
        _62 = _47;
        _59 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::insert(move _60, move _61, move _62) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_55);
        _55 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<&OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb27;
    }

    bb24: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &((*_1).1: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>);
        StorageLive(_65);
        _65 = &(*_2);
        _63 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::get::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource)>(move _64, move _65) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_64);
        _0 = <Option<&OraclePriceData> as SafeUnwrap>::safe_unwrap(move _63) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_47);
        StorageDead(_19);
        goto -> bb28;
    }

    bb27: {
        StorageDead(_19);
        goto -> bb28;
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_32) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}
