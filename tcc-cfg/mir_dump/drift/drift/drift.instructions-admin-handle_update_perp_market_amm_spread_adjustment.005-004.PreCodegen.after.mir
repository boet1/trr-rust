// MIR for `admin::handle_update_perp_market_amm_spread_adjustment` after PreCodegen

fn admin::handle_update_perp_market_amm_spread_adjustment(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::HotAdminUpdatePerpMarket<'_>>, _2: i8, _3: i8, _4: i32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amm_spread_adjustment => _2;
    debug amm_inventory_spread_adjustment => _3;
    debug reference_price_offset => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _21: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 1];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &u16;
    let _45: &u16;
    let _46: &state::perp_market::PerpMarket;
    let mut _47: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[&str; 2];
    let _58: &[&str; 2];
    let _59: [&str; 2];
    let mut _60: &[core::fmt::rt::Argument<'_>];
    let mut _61: &[core::fmt::rt::Argument<'_>; 2];
    let _62: &[core::fmt::rt::Argument<'_>; 2];
    let _63: [core::fmt::rt::Argument<'_>; 2];
    let mut _64: core::fmt::rt::Argument<'_>;
    let mut _65: &i8;
    let _66: &i8;
    let _67: &state::perp_market::PerpMarket;
    let mut _68: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &i8;
    let _71: &i8;
    let mut _72: i8;
    let mut _73: &mut state::perp_market::PerpMarket;
    let mut _74: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 2];
    let _85: &[&str; 2];
    let _86: [&str; 2];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 2];
    let _89: &[core::fmt::rt::Argument<'_>; 2];
    let _90: [core::fmt::rt::Argument<'_>; 2];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &i8;
    let _93: &i8;
    let _94: &state::perp_market::PerpMarket;
    let mut _95: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _96: core::fmt::rt::Argument<'_>;
    let mut _97: &i8;
    let _98: &i8;
    let mut _99: i8;
    let mut _100: &mut state::perp_market::PerpMarket;
    let mut _101: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: &std::string::String;
    let _106: &std::string::String;
    let _107: std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[&str; 2];
    let _112: &[&str; 2];
    let _113: [&str; 2];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let mut _115: &[core::fmt::rt::Argument<'_>; 2];
    let _116: &[core::fmt::rt::Argument<'_>; 2];
    let _117: [core::fmt::rt::Argument<'_>; 2];
    let mut _118: core::fmt::rt::Argument<'_>;
    let mut _119: &i32;
    let _120: &i32;
    let _121: &state::perp_market::PerpMarket;
    let mut _122: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &i32;
    let _125: &i32;
    let mut _126: i32;
    let mut _127: &mut state::perp_market::PerpMarket;
    let mut _128: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _129: ();
    let mut _134: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _135: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _15;
        let _33: std::string::String;
        let _54: std::string::String;
        let _81: std::string::String;
        let _108: std::string::String;
        let mut _130: &[&str; 2];
        let mut _131: &[&str; 2];
        let mut _132: &[&str; 2];
        let mut _133: &[&str; 1];
        scope 10 {
            debug res => _33;
        }
        scope 11 {
            debug res => _54;
        }
        scope 12 {
            debug res => _81;
        }
        scope 13 {
            debug res => _108;
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _134 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _9 = &((*_134).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _8 = &(*_9);
        _7 = constraints::perp_market_valid(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb54];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _136 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _135 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _20 = &((*_135).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _19 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb56];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _142 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb48;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _18 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _19, move _21) -> [return: bb8, unwind: bb54];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind: bb54];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = move ((_17 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _16 = move _26;
        StorageDead(_26);
        _15 = &mut _16;
        _140 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _133 = const _;
        _37 = &(*_133);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_15);
        _46 = <RefMut<'_, PerpMarket> as Deref>::deref(move _47) -> [return: bb13, unwind: bb53];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _138 = discriminant(_17);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb48;
    }

    bb13: {
        StorageDead(_47);
        _45 = &((*_46).21: u16);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _44) -> [return: bb14, unwind: bb53];
    }

    bb14: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        StorageDead(_28);
        drop(_32) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _132 = const _;
        _58 = &(*_132);
        _57 = &(*_58);
        _56 = move _57 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &(*_15);
        _67 = <RefMut<'_, PerpMarket> as Deref>::deref(move _68) -> [return: bb20, unwind: bb53];
    }

    bb20: {
        StorageDead(_68);
        _66 = &(((*_67).1: state::perp_market::AMM).77: i8);
        _65 = &(*_66);
        _64 = core::fmt::rt::Argument::<'_>::new_debug::<i8>(move _65) -> [return: bb21, unwind: bb53];
    }

    bb21: {
        StorageDead(_65);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_2;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_debug::<i8>(move _70) -> [return: bb22, unwind: bb53];
    }

    bb22: {
        StorageDead(_70);
        _63 = [move _64, move _69];
        StorageDead(_69);
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = move _61 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_61);
        _55 = Arguments::<'_>::new_v1(move _56, move _60) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        StorageDead(_60);
        StorageDead(_56);
        _54 = format(move _55) -> [return: bb24, unwind: bb53];
    }

    bb24: {
        StorageDead(_55);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_58);
        _53 = move _54;
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = <String as Deref>::deref(move _51) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        StorageDead(_49);
        drop(_53) -> [return: bb27, unwind: bb53];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_72);
        _72 = _2;
        StorageLive(_73);
        StorageLive(_74);
        _74 = &mut (*_15);
        _73 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _74) -> [return: bb28, unwind: bb53];
    }

    bb28: {
        StorageDead(_74);
        (((*_73).1: state::perp_market::AMM).77: i8) = move _72;
        StorageDead(_72);
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _131 = const _;
        _85 = &(*_131);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &(*_15);
        _94 = <RefMut<'_, PerpMarket> as Deref>::deref(move _95) -> [return: bb29, unwind: bb53];
    }

    bb29: {
        StorageDead(_95);
        _93 = &(((*_94).1: state::perp_market::AMM).83: i8);
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_debug::<i8>(move _92) -> [return: bb30, unwind: bb53];
    }

    bb30: {
        StorageDead(_92);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_3;
        _97 = &(*_98);
        _96 = core::fmt::rt::Argument::<'_>::new_debug::<i8>(move _97) -> [return: bb31, unwind: bb53];
    }

    bb31: {
        StorageDead(_97);
        _90 = [move _91, move _96];
        StorageDead(_96);
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb32, unwind: bb53];
    }

    bb32: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_98);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        StorageDead(_76);
        drop(_80) -> [return: bb36, unwind: bb53];
    }

    bb36: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_99);
        _99 = _3;
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut (*_15);
        _100 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _101) -> [return: bb37, unwind: bb53];
    }

    bb37: {
        StorageDead(_101);
        (((*_100).1: state::perp_market::AMM).83: i8) = move _99;
        StorageDead(_99);
        StorageDead(_100);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _130 = const _;
        _112 = &(*_130);
        _111 = &(*_112);
        _110 = move _111 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_15);
        _121 = <RefMut<'_, PerpMarket> as Deref>::deref(move _122) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        StorageDead(_122);
        _120 = &(((*_121).1: state::perp_market::AMM).82: i32);
        _119 = &(*_120);
        _118 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(move _119) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        StorageDead(_119);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_4;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(move _124) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        StorageDead(_124);
        _117 = [move _118, move _123];
        StorageDead(_123);
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = move _115 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_115);
        _109 = Arguments::<'_>::new_v1(move _110, move _114) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        StorageDead(_114);
        StorageDead(_110);
        _108 = format(move _109) -> [return: bb42, unwind: bb53];
    }

    bb42: {
        StorageDead(_109);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        _107 = move _108;
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = <String as Deref>::deref(move _105) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        _103 = &(*_104);
        StorageDead(_105);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        StorageDead(_103);
        drop(_107) -> [return: bb45, unwind: bb53];
    }

    bb45: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_126);
        _126 = _4;
        StorageLive(_127);
        StorageLive(_128);
        _128 = &mut (*_15);
        _127 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _128) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        StorageDead(_128);
        (((*_127).1: state::perp_market::AMM).82: i32) = move _126;
        StorageDead(_126);
        StorageDead(_127);
        StorageLive(_129);
        _129 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _129);
        StorageDead(_129);
        drop(_16) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_107) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_80) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_53) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_32) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_16) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        resume;
    }

    bb55 (cleanup): {
        _144 = discriminant(_17);
        goto -> bb54;
    }

    bb56 (cleanup): {
        _145 = discriminant(_6);
        goto -> bb54;
    }
}
