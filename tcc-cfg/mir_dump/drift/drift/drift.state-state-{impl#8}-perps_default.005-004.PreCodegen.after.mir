// MIR for `state::state::<impl at programs/drift/src/state/state.rs:234:1: 234:18>::perps_default` after PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:234:1: 234:18>::perps_default() -> state::state::FeeStructure {
    let mut _0: state::state::FeeStructure;
    let mut _1: [state::state::FeeTier; 10];
    let mut _2: state::state::FeeTier;
    let mut _3: state::state::FeeTier;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: state::state::FeeTier;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: state::state::FeeTier;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: state::state::FeeTier;
    let _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: state::state::FeeTier;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: state::state::FeeTier;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: [state::state::FeeTier; 10];
    let mut _28: state::state::OrderFillerRewardStructure;
    scope 1 {
        debug fee_tiers => _1;
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = <state::state::FeeTier as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = [move _2; 10];
        StorageDead(_2);
        StorageLive(_3);
        _3 = state::state::FeeTier { fee_numerator: const 100_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ };
        StorageLive(_4);
        _4 = const 0_usize;
        _5 = Len(_1);
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb2, unwind continue];
    }

    bb2: {
        _1[_4] = move _3;
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_7);
        _7 = state::state::FeeTier { fee_numerator: const 90_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ };
        StorageLive(_8);
        _8 = const 1_usize;
        _9 = Len(_1);
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb3, unwind continue];
    }

    bb3: {
        _1[_8] = move _7;
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_11);
        _11 = state::state::FeeTier { fee_numerator: const 80_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ };
        StorageLive(_12);
        _12 = const 2_usize;
        _13 = Len(_1);
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb4, unwind continue];
    }

    bb4: {
        _1[_12] = move _11;
        StorageDead(_11);
        StorageDead(_12);
        StorageLive(_15);
        _15 = state::state::FeeTier { fee_numerator: const 70_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ };
        StorageLive(_16);
        _16 = const 3_usize;
        _17 = Len(_1);
        _18 = Lt(_16, _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb5, unwind continue];
    }

    bb5: {
        _1[_16] = move _15;
        StorageDead(_15);
        StorageDead(_16);
        StorageLive(_19);
        _19 = state::state::FeeTier { fee_numerator: const 60_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ };
        StorageLive(_20);
        _20 = const 4_usize;
        _21 = Len(_1);
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb6, unwind continue];
    }

    bb6: {
        _1[_20] = move _19;
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_23);
        _23 = state::state::FeeTier { fee_numerator: const 50_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ };
        StorageLive(_24);
        _24 = const 5_usize;
        _25 = Len(_1);
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> [success: bb7, unwind continue];
    }

    bb7: {
        _1[_24] = move _23;
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_27);
        _27 = _1;
        StorageLive(_28);
        _28 = OrderFillerRewardStructure { reward_numerator: const 10_u32, reward_denominator: const _, time_based_reward_lower_bound: const 10000_u128 };
        _0 = state::state::FeeStructure { fee_tiers: move _27, filler_reward_structure: move _28, referrer_reward_epoch_upper_bound: const _, flat_filler_fee: const 10000_u64 };
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_1);
        return;
    }
}
