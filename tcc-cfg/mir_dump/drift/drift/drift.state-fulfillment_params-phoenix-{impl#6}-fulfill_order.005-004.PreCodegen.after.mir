// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:342:1: 342:72>::fulfill_order` after PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:342:1: 342:72>::fulfill_order(_1: &mut PhoenixFulfillmentParams<'_, '_>, _2: controller::position::PositionDirection, _3: u64, _4: u64, _5: u64) -> std::result::Result<ExternalSpotFill, error::ErrorCode> {
    debug self => _1;
    debug taker_direction => _2;
    debug taker_price => _3;
    debug taker_base_asset_amount => _4;
    debug taker_max_quote_asset_amount => _5;
    let mut _0: std::result::Result<state::spot_fulfillment_params::ExternalSpotFill, error::ErrorCode>;
    let _6: std::cell::Ref<'_, &mut [u8]>;
    let mut _7: &std::cell::RefCell<&mut [u8]>;
    let _8: &std::cell::RefCell<&mut [u8]>;
    let mut _9: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _10: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _13: (&[u8], &[u8]);
    let mut _14: &[u8];
    let _15: &&mut [u8];
    let mut _16: &std::cell::Ref<'_, &mut [u8]>;
    let mut _17: usize;
    let mut _21: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>>;
    let mut _23: std::result::Result<phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>, error::ErrorCode>;
    let mut _24: std::result::Result<phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>, anchor_lang::prelude::ProgramError>;
    let mut _25: &phoenix::program::MarketSizeParams;
    let _26: &phoenix::program::MarketSizeParams;
    let mut _27: &[u8];
    let mut _28: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:396:22: 396:25};
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: (phoenix::state::Side, phoenix::quantities::Ticks);
    let mut _37: isize;
    let mut _38: phoenix::state::Side;
    let mut _39: phoenix::quantities::Ticks;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::quantities::Ticks>;
    let mut _41: std::result::Result<phoenix::quantities::Ticks, error::ErrorCode>;
    let mut _42: u64;
    let mut _43: u64;
    let mut _44: &phoenix::quantities::QuoteLotsPerBaseUnitPerTick;
    let _45: phoenix::quantities::QuoteLotsPerBaseUnitPerTick;
    let mut _46: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _47: &phoenix::program::MarketHeader;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: phoenix::state::Side;
    let mut _54: phoenix::quantities::Ticks;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::quantities::Ticks>;
    let mut _56: std::result::Result<phoenix::quantities::Ticks, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: u64;
    let mut _59: &phoenix::quantities::QuoteLotsPerBaseUnitPerTick;
    let _60: phoenix::quantities::QuoteLotsPerBaseUnitPerTick;
    let mut _61: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _62: &phoenix::program::MarketHeader;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _68: ();
    let mut _69: bool;
    let mut _70: &phoenix::quantities::Ticks;
    let mut _71: &phoenix::quantities::Ticks;
    let _72: phoenix::quantities::Ticks;
    let mut _73: !;
    let _74: ();
    let mut _75: &str;
    let _76: &str;
    let mut _77: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::quantities::BaseLots>;
    let mut _80: std::result::Result<phoenix::quantities::BaseLots, error::ErrorCode>;
    let mut _81: u64;
    let mut _82: u64;
    let mut _83: u64;
    let mut _84: &phoenix::program::MarketHeader;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _90: ();
    let mut _91: bool;
    let mut _92: &phoenix::quantities::BaseLots;
    let mut _93: &u64;
    let _94: u64;
    let mut _95: !;
    let _96: ();
    let mut _97: &str;
    let _98: &str;
    let mut _99: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _101: phoenix::state::Side;
    let mut _102: std::option::Option<phoenix::quantities::Ticks>;
    let mut _103: phoenix::quantities::Ticks;
    let mut _104: phoenix::quantities::BaseLots;
    let mut _105: phoenix::state::SelfTradeBehavior;
    let mut _106: std::option::Option<u64>;
    let mut _107: u128;
    let mut _108: [u8; 16];
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, [u8; 16]>;
    let mut _110: std::result::Result<[u8; 16], error::ErrorCode>;
    let mut _111: std::result::Result<[u8; 16], std::array::TryFromSliceError>;
    let mut _112: &[u8];
    let _113: &[u8];
    let mut _114: &[u8];
    let _115: &[u8];
    let mut _116: &anchor_lang::prelude::Pubkey;
    let mut _117: std::ops::RangeTo<usize>;
    let mut _118: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:454:30: 454:33};
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: std::option::Option<u64>;
    let mut _125: std::option::Option<u64>;
    let mut _127: &phoenix::quantities::QuoteLots;
    let _128: phoenix::quantities::QuoteLots;
    let mut _129: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _131: &anchor_spl::token::spl_token::state::Account;
    let mut _132: &anchor_spl::token::TokenAccount;
    let _133: &anchor_spl::token::TokenAccount;
    let mut _134: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _136: &anchor_spl::token::spl_token::state::Account;
    let mut _137: &anchor_spl::token::TokenAccount;
    let _138: &anchor_spl::token::TokenAccount;
    let mut _139: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let _140: ();
    let mut _141: std::cell::Ref<'_, &mut [u8]>;
    let _142: ();
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _144: std::result::Result<(), error::ErrorCode>;
    let mut _145: &state::fulfillment_params::phoenix::PhoenixFulfillmentParams<'_, '_>;
    let mut _146: phoenix::state::OrderPacket;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: &std::cell::RefCell<&mut [u8]>;
    let _154: &std::cell::RefCell<&mut [u8]>;
    let mut _155: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _156: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _157: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _159: (&[u8], &[u8]);
    let mut _160: &[u8];
    let _161: &&mut [u8];
    let mut _162: &std::cell::Ref<'_, &mut [u8]>;
    let mut _163: usize;
    let _164: ();
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _166: std::result::Result<(), error::ErrorCode>;
    let mut _167: std::result::Result<(), anchor_lang::error::Error>;
    let mut _168: &mut anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _169: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:476:49: 476:53};
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _175: ();
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _177: std::result::Result<(), error::ErrorCode>;
    let mut _178: std::result::Result<(), anchor_lang::error::Error>;
    let mut _179: &mut anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _180: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:480:50: 480:54};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _187: &anchor_spl::token::spl_token::state::Account;
    let mut _188: &anchor_spl::token::TokenAccount;
    let _189: &anchor_spl::token::TokenAccount;
    let mut _190: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _192: &anchor_spl::token::spl_token::state::Account;
    let mut _193: &anchor_spl::token::TokenAccount;
    let _194: &anchor_spl::token::TokenAccount;
    let mut _195: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _197: &phoenix::quantities::QuoteLots;
    let _198: phoenix::quantities::QuoteLots;
    let mut _199: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let _200: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>>;
    let mut _202: std::result::Result<phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>, error::ErrorCode>;
    let mut _203: std::result::Result<phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>, anchor_lang::prelude::ProgramError>;
    let mut _204: &phoenix::program::MarketSizeParams;
    let _205: &phoenix::program::MarketSizeParams;
    let mut _206: &[u8];
    let mut _207: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:488:22: 488:25};
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _215: (state::spot_market::SpotBalanceType, u64);
    let mut _216: bool;
    let mut _217: u64;
    let mut _218: u64;
    let mut _219: state::spot_market::SpotBalanceType;
    let mut _220: u64;
    let mut _221: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _222: std::result::Result<u64, error::ErrorCode>;
    let mut _223: u64;
    let mut _224: u64;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _230: state::spot_market::SpotBalanceType;
    let mut _231: u64;
    let mut _232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _233: std::result::Result<u64, error::ErrorCode>;
    let mut _234: u64;
    let mut _235: u64;
    let mut _236: isize;
    let mut _238: !;
    let mut _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _241: ();
    let mut _242: bool;
    let mut _243: u64;
    let mut _244: !;
    let _245: ();
    let mut _246: &str;
    let _247: &str;
    let mut _248: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _251: std::result::Result<u64, error::ErrorCode>;
    let mut _252: u64;
    let mut _253: u64;
    let mut _254: isize;
    let mut _256: !;
    let mut _257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _261: (state::spot_market::SpotBalanceType, u64);
    let mut _262: bool;
    let mut _263: &state::spot_market::SpotBalanceType;
    let mut _264: &state::spot_market::SpotBalanceType;
    let _265: state::spot_market::SpotBalanceType;
    let mut _267: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _268: std::result::Result<u64, error::ErrorCode>;
    let mut _269: u64;
    let mut _270: u64;
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _276: state::spot_market::SpotBalanceType;
    let mut _277: u64;
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _279: std::result::Result<u64, error::ErrorCode>;
    let mut _280: u64;
    let mut _281: u64;
    let mut _282: isize;
    let mut _284: !;
    let mut _285: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _288: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _289: std::result::Result<u64, error::ErrorCode>;
    let mut _290: u64;
    let mut _291: u64;
    let mut _292: isize;
    let mut _294: !;
    let mut _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _297: state::spot_market::SpotBalanceType;
    let mut _298: u64;
    let mut _299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _300: std::result::Result<u64, error::ErrorCode>;
    let mut _301: u64;
    let mut _302: u64;
    let mut _303: isize;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _308: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _309: u64;
    let mut _310: u64;
    let mut _311: state::spot_market::SpotBalanceType;
    let mut _312: state::spot_market::SpotBalanceType;
    let mut _313: u64;
    let mut _317: &mut [u8];
    let mut _318: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _319: &anchor_lang::prelude::Pubkey;
    let mut _320: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _321: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _322: &mut [u8];
    let mut _323: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _324: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _325: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _326: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _327: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
    let mut _328: bool;
    let mut _329: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _330: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _331: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _332: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _333: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _334: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug market_data => _6;
        let _12: &[u8];
        scope 2 {
            debug market_bytes => _12;
            let _18: &phoenix::program::MarketHeader;
            scope 3 {
                debug header => _18;
                let _19: phoenix::program::MarketSizeParams;
                scope 4 {
                    debug market_size_params => _19;
                    let _20: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
                    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _33: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
                    scope 5 {
                        debug market => _20;
                        let _34: phoenix::state::Side;
                        let _35: phoenix::quantities::Ticks;
                        let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _52: phoenix::quantities::Ticks;
                        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _67: phoenix::quantities::Ticks;
                        scope 10 {
                            debug side => _34;
                            debug price_in_ticks => _35;
                            let _78: phoenix::quantities::BaseLots;
                            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _89: phoenix::quantities::BaseLots;
                            let mut _316: &phoenix::quantities::Ticks;
                            scope 19 {
                                debug num_base_lots => _78;
                                let _100: phoenix::state::OrderPacket;
                                let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _123: [u8; 16];
                                let mut _315: &u64;
                                scope 24 {
                                    debug phoenix_order => _100;
                                    let _126: u64;
                                    scope 29 {
                                        debug market_accrued_fees_before => _126;
                                        let _130: u64;
                                        scope 30 {
                                            debug base_before => _130;
                                            let _135: u64;
                                            scope 31 {
                                                debug quote_before => _135;
                                                let _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _151: ();
                                                let _152: std::cell::Ref<'_, &mut [u8]>;
                                                scope 32 {
                                                    debug residual => _148;
                                                    scope 33 {
                                                    }
                                                }
                                                scope 34 {
                                                    debug val => _151;
                                                    scope 35 {
                                                    }
                                                }
                                                scope 36 {
                                                    debug market_data => _152;
                                                    let _158: &[u8];
                                                    scope 37 {
                                                        debug market_bytes => _158;
                                                        let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _174: ();
                                                        let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _185: ();
                                                        let _186: u64;
                                                        scope 38 {
                                                            debug residual => _171;
                                                            scope 39 {
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug val => _174;
                                                            scope 41 {
                                                            }
                                                        }
                                                        scope 42 {
                                                            debug residual => _182;
                                                            scope 43 {
                                                            }
                                                        }
                                                        scope 44 {
                                                            debug val => _185;
                                                            scope 45 {
                                                            }
                                                        }
                                                        scope 46 {
                                                            debug base_after => _186;
                                                            let _191: u64;
                                                            scope 47 {
                                                                debug quote_after => _191;
                                                                let _196: u64;
                                                                let _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _212: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>;
                                                                scope 48 {
                                                                    debug market_accrued_fees_after => _196;
                                                                    let _213: state::spot_market::SpotBalanceType;
                                                                    let _214: u64;
                                                                    let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _229: u64;
                                                                    let _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _240: u64;
                                                                    scope 53 {
                                                                        debug base_update_direction => _213;
                                                                        debug base_asset_amount_filled => _214;
                                                                        let _249: u64;
                                                                        let _255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _258: u64;
                                                                        scope 62 {
                                                                            debug phoenix_fee => _249;
                                                                            let _259: state::spot_market::SpotBalanceType;
                                                                            let _260: u64;
                                                                            let _266: u64;
                                                                            let _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _275: u64;
                                                                            let _287: u64;
                                                                            let _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _296: u64;
                                                                            let mut _314: &state::spot_market::SpotBalanceType;
                                                                            scope 67 {
                                                                                debug quote_update_direction => _259;
                                                                                debug quote_asset_amount_filled => _260;
                                                                            }
                                                                            scope 68 {
                                                                                debug quote_asset_amount_delta => _266;
                                                                                let _283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _286: u64;
                                                                                scope 73 {
                                                                                    debug residual => _283;
                                                                                    scope 74 {
                                                                                    }
                                                                                }
                                                                                scope 75 {
                                                                                    debug val => _286;
                                                                                    scope 76 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug residual => _272;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug val => _275;
                                                                                scope 72 {
                                                                                }
                                                                            }
                                                                            scope 77 {
                                                                                debug quote_asset_amount_delta => _287;
                                                                                let _304: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _307: u64;
                                                                                scope 82 {
                                                                                    debug residual => _304;
                                                                                    scope 83 {
                                                                                    }
                                                                                }
                                                                                scope 84 {
                                                                                    debug val => _307;
                                                                                    scope 85 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 78 {
                                                                                debug residual => _293;
                                                                                scope 79 {
                                                                                }
                                                                            }
                                                                            scope 80 {
                                                                                debug val => _296;
                                                                                scope 81 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 63 {
                                                                            debug residual => _255;
                                                                            scope 64 {
                                                                            }
                                                                        }
                                                                        scope 65 {
                                                                            debug val => _258;
                                                                            scope 66 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 54 {
                                                                        debug residual => _226;
                                                                        scope 55 {
                                                                        }
                                                                    }
                                                                    scope 56 {
                                                                        debug val => _229;
                                                                        scope 57 {
                                                                        }
                                                                    }
                                                                    scope 58 {
                                                                        debug residual => _237;
                                                                        scope 59 {
                                                                        }
                                                                    }
                                                                    scope 60 {
                                                                        debug val => _240;
                                                                        scope 61 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 49 {
                                                                    debug residual => _209;
                                                                    scope 50 {
                                                                    }
                                                                }
                                                                scope 51 {
                                                                    debug val => _212;
                                                                    scope 52 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _120;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _123;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _86;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _89;
                                scope 23 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _49;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _52;
                            scope 14 {
                            }
                        }
                        scope 15 {
                            debug residual => _64;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _67;
                            scope 18 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _30;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _33;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _328 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _10 = <PhoenixMarketContext<'_, '_> as Deref>::deref(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _8 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &(*_8);
        StorageDead(_9);
        _328 = const true;
        _6 = RefCell::<&mut [u8]>::borrow(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_6;
        _15 = <Ref<'_, &mut [u8]> as Deref>::deref(move _16) -> [return: bb4, unwind: bb163];
    }

    bb4: {
        _317 = deref_copy (*_15);
        _14 = &(*_317);
        StorageDead(_16);
        StorageLive(_17);
        _17 = std::mem::size_of::<MarketHeader>() -> [return: bb5, unwind: bb163];
    }

    bb5: {
        _13 = core::slice::<impl [u8]>::split_at(move _14, move _17) -> [return: bb6, unwind: bb163];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_14);
        StorageLive(_12);
        _12 = (_13.1: &[u8]);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_18);
        _18 = &(((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>).1: phoenix::program::MarketHeader);
        StorageLive(_19);
        _19 = ((*_18).2: phoenix::program::MarketSizeParams);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &_19;
        _25 = &(*_26);
        StorageLive(_27);
        _27 = &(*_12);
        _24 = load_with_dispatch(move _25, move _27) -> [return: bb7, unwind: bb163];
    }

    bb7: {
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_28);
        _28 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:396:22: 396:25};
        _23 = std::result::Result::<MarketWrapper<'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:396:22: 396:25}>(move _24, move _28) -> [return: bb8, unwind: bb163];
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = <std::result::Result<MarketWrapper<'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind: bb163];
    }

    bb9: {
        StorageDead(_23);
        _29 = discriminant(_22);
        switchInt(move _29) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_33);
        _33 = move ((_22 as Continue).0: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>);
        _21 = move _33;
        StorageDead(_33);
        _20 = (_21.0: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_36);
        _37 = discriminant(_2);
        switchInt(move _37) -> [0: bb15, 1: bb14, otherwise: bb11];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb13, unwind: bb163];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb156;
    }

    bb14: {
        StorageLive(_53);
        _53 = phoenix::state::Side::Ask;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _3;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_20);
        _60 = <dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket> as phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>>::get_tick_size(move _61) -> [return: bb23, unwind: bb163];
    }

    bb15: {
        StorageLive(_38);
        _38 = phoenix::state::Side::Bid;
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_20);
        _45 = <dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket> as phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>>::get_tick_size(move _46) -> [return: bb16, unwind: bb163];
    }

    bb16: {
        _44 = &_45;
        StorageDead(_46);
        _43 = <QuoteLotsPerBaseUnitPerTick as phoenix::quantities::WrapperU64>::as_u64(move _44) -> [return: bb17, unwind: bb163];
    }

    bb17: {
        StorageDead(_44);
        StorageLive(_47);
        _47 = &(*_18);
        _41 = taker_price_to_phoenix_price_in_ticks_rounded_down(move _42, move _43, move _47) -> [return: bb18, unwind: bb163];
    }

    bb18: {
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<Ticks, error::ErrorCode> as Try>::branch(move _41) -> [return: bb19, unwind: bb163];
    }

    bb19: {
        StorageDead(_41);
        _48 = discriminant(_40);
        switchInt(move _48) -> [0: bb20, 1: bb21, otherwise: bb11];
    }

    bb20: {
        StorageLive(_52);
        _52 = ((_40 as Continue).0: phoenix::quantities::Ticks);
        _39 = _52;
        StorageDead(_52);
        _36 = (move _38, move _39);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb30;
    }

    bb21: {
        StorageLive(_49);
        _49 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb22, unwind: bb163];
    }

    bb22: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb155;
    }

    bb23: {
        _59 = &_60;
        StorageDead(_61);
        _58 = <QuoteLotsPerBaseUnitPerTick as phoenix::quantities::WrapperU64>::as_u64(move _59) -> [return: bb24, unwind: bb163];
    }

    bb24: {
        StorageDead(_59);
        StorageLive(_62);
        _62 = &(*_18);
        _56 = taker_price_to_phoenix_price_in_ticks_rounded_up(move _57, move _58, move _62) -> [return: bb25, unwind: bb163];
    }

    bb25: {
        StorageDead(_62);
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<Ticks, error::ErrorCode> as Try>::branch(move _56) -> [return: bb26, unwind: bb163];
    }

    bb26: {
        StorageDead(_56);
        _63 = discriminant(_55);
        switchInt(move _63) -> [0: bb27, 1: bb28, otherwise: bb11];
    }

    bb27: {
        StorageLive(_67);
        _67 = ((_55 as Continue).0: phoenix::quantities::Ticks);
        _54 = _67;
        StorageDead(_67);
        _36 = (move _53, move _54);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb30;
    }

    bb28: {
        StorageLive(_64);
        _64 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb29, unwind: bb163];
    }

    bb29: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb155;
    }

    bb30: {
        StorageLive(_34);
        _34 = (_36.0: phoenix::state::Side);
        StorageLive(_35);
        _35 = (_36.1: phoenix::quantities::Ticks);
        StorageDead(_36);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_35;
        StorageLive(_71);
        _316 = const _;
        _71 = &(*_316);
        _69 = <Ticks as PartialEq>::eq(move _70, move _71) -> [return: bb31, unwind: bb163];
    }

    bb31: {
        switchInt(move _69) -> [0: bb35, otherwise: bb32];
    }

    bb32: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = const "Price is too low";
        _75 = &(*_76);
        _74 = solana_program::log::sol_log(move _75) -> [return: bb33, unwind: bb163];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_76);
        StorageDead(_74);
        StorageLive(_77);
        _77 = ExternalSpotFill::empty() -> [return: bb34, unwind: bb163];
    }

    bb34: {
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _77);
        StorageDead(_77);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb154;
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = const ();
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _4;
        StorageLive(_82);
        _82 = _5;
        StorageLive(_83);
        _83 = _3;
        StorageLive(_84);
        _84 = &(*_18);
        _80 = compute_base_lot_size(move _81, move _82, move _83, move _84) -> [return: bb36, unwind: bb163];
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        _79 = <std::result::Result<BaseLots, error::ErrorCode> as Try>::branch(move _80) -> [return: bb37, unwind: bb163];
    }

    bb37: {
        StorageDead(_80);
        _85 = discriminant(_79);
        switchInt(move _85) -> [0: bb38, 1: bb39, otherwise: bb11];
    }

    bb38: {
        StorageLive(_89);
        _89 = ((_79 as Continue).0: phoenix::quantities::BaseLots);
        _78 = _89;
        StorageDead(_89);
        StorageDead(_79);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_78;
        StorageLive(_93);
        _315 = const _;
        _93 = &(*_315);
        _91 = <BaseLots as PartialEq<u64>>::eq(move _92, move _93) -> [return: bb41, unwind: bb163];
    }

    bb39: {
        StorageLive(_86);
        _86 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb40, unwind: bb163];
    }

    bb40: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_79);
        goto -> bb153;
    }

    bb41: {
        switchInt(move _91) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = const "No base lots to fill";
        _97 = &(*_98);
        _96 = solana_program::log::sol_log(move _97) -> [return: bb43, unwind: bb163];
    }

    bb43: {
        StorageDead(_97);
        StorageDead(_98);
        StorageDead(_96);
        StorageLive(_99);
        _99 = ExternalSpotFill::empty() -> [return: bb44, unwind: bb163];
    }

    bb44: {
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _99);
        StorageDead(_99);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb153;
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_92);
        _90 = const ();
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _34;
        StorageLive(_102);
        StorageLive(_103);
        _103 = _35;
        _102 = Option::<Ticks>::Some(move _103);
        StorageDead(_103);
        StorageLive(_104);
        _104 = _78;
        StorageLive(_105);
        _105 = Abort;
        StorageLive(_106);
        _106 = Option::<u64>::Some(const 64_u64);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _318 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _319 = deref_copy ((*_318).0: &anchor_lang::prelude::Pubkey);
        _116 = &(*_319);
        _115 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _116) -> [return: bb46, unwind: bb163];
    }

    bb46: {
        _114 = &(*_115);
        StorageDead(_116);
        StorageLive(_117);
        _117 = RangeTo::<usize> { end: const 16_usize };
        _113 = <[u8] as Index<RangeTo<usize>>>::index(move _114, move _117) -> [return: bb47, unwind: bb163];
    }

    bb47: {
        _112 = &(*_113);
        StorageDead(_117);
        StorageDead(_114);
        _111 = <&[u8] as TryInto<[u8; 16]>>::try_into(move _112) -> [return: bb48, unwind: bb163];
    }

    bb48: {
        StorageDead(_112);
        StorageLive(_118);
        _118 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:454:30: 454:33};
        _110 = std::result::Result::<[u8; 16], TryFromSliceError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:454:30: 454:33}>(move _111, move _118) -> [return: bb49, unwind: bb163];
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_111);
        _109 = <std::result::Result<[u8; 16], error::ErrorCode> as Try>::branch(move _110) -> [return: bb50, unwind: bb163];
    }

    bb50: {
        StorageDead(_110);
        _119 = discriminant(_109);
        switchInt(move _119) -> [0: bb51, 1: bb52, otherwise: bb11];
    }

    bb51: {
        StorageLive(_123);
        _123 = ((_109 as Continue).0: [u8; 16]);
        _108 = _123;
        StorageDead(_123);
        _107 = core::num::<impl u128>::from_le_bytes(move _108) -> [return: bb54, unwind: bb163];
    }

    bb52: {
        StorageLive(_120);
        _120 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb53, unwind: bb163];
    }

    bb53: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_109);
        goto -> bb152;
    }

    bb54: {
        StorageDead(_108);
        StorageLive(_124);
        _124 = Option::<u64>::None;
        StorageLive(_125);
        _125 = Option::<u64>::None;
        _100 = phoenix::state::OrderPacket::ImmediateOrCancel { side: move _101, price_in_ticks: move _102, num_base_lots: move _104, num_quote_lots: const _, min_base_lots_to_fill: const _, min_quote_lots_to_fill: const _, self_trade_behavior: move _105, match_limit: move _106, client_order_id: move _107, use_only_deposited_funds: const false, last_valid_slot: move _124, last_valid_unix_timestamp_in_seconds: move _125 };
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_109);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_20);
        _128 = <dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket> as phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>>::get_uncollected_fee_amount(move _129) -> [return: bb55, unwind: bb163];
    }

    bb55: {
        _127 = &_128;
        StorageDead(_129);
        _126 = <QuoteLots as phoenix::quantities::WrapperU64>::as_u64(move _127) -> [return: bb56, unwind: bb163];
    }

    bb56: {
        StorageDead(_127);
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _320 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _329 = (((_320.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _134 = &(*_329);
        _133 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _134) -> [return: bb57, unwind: bb163];
    }

    bb57: {
        _132 = &(*_133);
        _131 = <anchor_spl::token::TokenAccount as Deref>::deref(move _132) -> [return: bb58, unwind: bb163];
    }

    bb58: {
        StorageDead(_134);
        StorageDead(_132);
        _130 = ((*_131).2: u64);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _321 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _330 = (((_321.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _139 = &(*_330);
        _138 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _139) -> [return: bb59, unwind: bb163];
    }

    bb59: {
        _137 = &(*_138);
        _136 = <anchor_spl::token::TokenAccount as Deref>::deref(move _137) -> [return: bb60, unwind: bb163];
    }

    bb60: {
        StorageDead(_139);
        StorageDead(_137);
        _135 = ((*_136).2: u64);
        StorageDead(_138);
        StorageDead(_136);
        StorageLive(_140);
        StorageLive(_141);
        _328 = const false;
        _141 = move _6;
        _140 = std::mem::drop::<Ref<'_, &mut [u8]>>(move _141) -> [return: bb61, unwind: bb163];
    }

    bb61: {
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = _100;
        _144 = PhoenixFulfillmentParams::<'_, '_>::invoke_new_order(move _145, move _146) -> [return: bb62, unwind: bb163];
    }

    bb62: {
        StorageDead(_146);
        StorageDead(_145);
        _143 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _144) -> [return: bb63, unwind: bb163];
    }

    bb63: {
        StorageDead(_144);
        _147 = discriminant(_143);
        switchInt(move _147) -> [0: bb64, 1: bb65, otherwise: bb11];
    }

    bb64: {
        StorageLive(_151);
        _151 = ((_143 as Continue).0: ());
        _142 = _151;
        StorageDead(_151);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _156 = <PhoenixMarketContext<'_, '_> as Deref>::deref(move _157) -> [return: bb67, unwind: bb163];
    }

    bb65: {
        StorageLive(_148);
        _148 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_150);
        _150 = _148;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _150) -> [return: bb66, unwind: bb163];
    }

    bb66: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb151;
    }

    bb67: {
        StorageDead(_157);
        _155 = &((*_156).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _154 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _155) -> [return: bb68, unwind: bb163];
    }

    bb68: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = RefCell::<&mut [u8]>::borrow(move _153) -> [return: bb69, unwind: bb163];
    }

    bb69: {
        StorageDead(_153);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_152;
        _161 = <Ref<'_, &mut [u8]> as Deref>::deref(move _162) -> [return: bb70, unwind: bb159];
    }

    bb70: {
        _322 = deref_copy (*_161);
        _160 = &(*_322);
        StorageDead(_162);
        StorageLive(_163);
        _163 = std::mem::size_of::<MarketHeader>() -> [return: bb71, unwind: bb159];
    }

    bb71: {
        _159 = core::slice::<impl [u8]>::split_at(move _160, move _163) -> [return: bb72, unwind: bb159];
    }

    bb72: {
        StorageDead(_163);
        StorageDead(_160);
        StorageLive(_158);
        _158 = (_159.1: &[u8]);
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _323 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _331 = (((_323.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _168 = &mut (*_331);
        _167 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::reload(move _168) -> [return: bb73, unwind: bb159];
    }

    bb73: {
        StorageDead(_168);
        StorageLive(_169);
        _169 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:476:49: 476:53};
        _166 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:476:49: 476:53}>(move _167, move _169) -> [return: bb74, unwind: bb159];
    }

    bb74: {
        StorageDead(_169);
        StorageDead(_167);
        _165 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _166) -> [return: bb75, unwind: bb159];
    }

    bb75: {
        StorageDead(_166);
        _170 = discriminant(_165);
        switchInt(move _170) -> [0: bb76, 1: bb77, otherwise: bb11];
    }

    bb76: {
        StorageLive(_174);
        _174 = ((_165 as Continue).0: ());
        _164 = _174;
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _324 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _332 = (((_324.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _179 = &mut (*_332);
        _178 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::reload(move _179) -> [return: bb79, unwind: bb159];
    }

    bb77: {
        StorageLive(_171);
        _171 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb78, unwind: bb159];
    }

    bb78: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb149;
    }

    bb79: {
        StorageDead(_179);
        StorageLive(_180);
        _180 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:480:50: 480:54};
        _177 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:480:50: 480:54}>(move _178, move _180) -> [return: bb80, unwind: bb159];
    }

    bb80: {
        StorageDead(_180);
        StorageDead(_178);
        _176 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _177) -> [return: bb81, unwind: bb159];
    }

    bb81: {
        StorageDead(_177);
        _181 = discriminant(_176);
        switchInt(move _181) -> [0: bb82, 1: bb83, otherwise: bb11];
    }

    bb82: {
        StorageLive(_185);
        _185 = ((_176 as Continue).0: ());
        _175 = _185;
        StorageDead(_185);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _325 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _333 = (((_325.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _190 = &(*_333);
        _189 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _190) -> [return: bb85, unwind: bb159];
    }

    bb83: {
        StorageLive(_182);
        _182 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb84, unwind: bb159];
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb149;
    }

    bb85: {
        _188 = &(*_189);
        _187 = <anchor_spl::token::TokenAccount as Deref>::deref(move _188) -> [return: bb86, unwind: bb159];
    }

    bb86: {
        StorageDead(_190);
        StorageDead(_188);
        _186 = ((*_187).2: u64);
        StorageDead(_189);
        StorageDead(_187);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _326 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _334 = (((_326.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _195 = &(*_334);
        _194 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _195) -> [return: bb87, unwind: bb159];
    }

    bb87: {
        _193 = &(*_194);
        _192 = <anchor_spl::token::TokenAccount as Deref>::deref(move _193) -> [return: bb88, unwind: bb159];
    }

    bb88: {
        StorageDead(_195);
        StorageDead(_193);
        _191 = ((*_192).2: u64);
        StorageDead(_194);
        StorageDead(_192);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_19;
        _204 = &(*_205);
        StorageLive(_206);
        _206 = &(*_158);
        _203 = load_with_dispatch(move _204, move _206) -> [return: bb89, unwind: bb159];
    }

    bb89: {
        StorageDead(_206);
        StorageDead(_204);
        StorageLive(_207);
        _207 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:488:22: 488:25};
        _202 = std::result::Result::<MarketWrapper<'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:488:22: 488:25}>(move _203, move _207) -> [return: bb90, unwind: bb159];
    }

    bb90: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = <std::result::Result<MarketWrapper<'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>, error::ErrorCode> as Try>::branch(move _202) -> [return: bb91, unwind: bb159];
    }

    bb91: {
        StorageDead(_202);
        _208 = discriminant(_201);
        switchInt(move _208) -> [0: bb92, 1: bb93, otherwise: bb11];
    }

    bb92: {
        StorageLive(_212);
        _212 = move ((_201 as Continue).0: phoenix::state::markets::MarketWrapper<'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>);
        _200 = move _212;
        StorageDead(_212);
        _327 = deref_copy (_200.0: &dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket>);
        _199 = &(*_327);
        _198 = <dyn phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket> as phoenix::state::markets::Market<anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket>>::get_uncollected_fee_amount(move _199) -> [return: bb95, unwind: bb159];
    }

    bb93: {
        StorageLive(_209);
        _209 = ((_201 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_211);
        _211 = _209;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _211) -> [return: bb94, unwind: bb159];
    }

    bb94: {
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_205);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_198);
        goto -> bb148;
    }

    bb95: {
        _197 = &_198;
        StorageDead(_199);
        _196 = <QuoteLots as phoenix::quantities::WrapperU64>::as_u64(move _197) -> [return: bb96, unwind: bb159];
    }

    bb96: {
        StorageDead(_197);
        StorageDead(_205);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = _186;
        StorageLive(_218);
        _218 = _130;
        _216 = Gt(move _217, move _218);
        switchInt(move _216) -> [0: bb103, otherwise: bb97];
    }

    bb97: {
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_219);
        _219 = SpotBalanceType::Deposit;
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = _186;
        StorageLive(_224);
        _224 = _130;
        _222 = <u64 as SafeMath>::safe_sub(move _223, move _224) -> [return: bb98, unwind: bb159];
    }

    bb98: {
        StorageDead(_224);
        StorageDead(_223);
        _221 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _222) -> [return: bb99, unwind: bb159];
    }

    bb99: {
        StorageDead(_222);
        _225 = discriminant(_221);
        switchInt(move _225) -> [0: bb100, 1: bb101, otherwise: bb11];
    }

    bb100: {
        StorageLive(_229);
        _229 = ((_221 as Continue).0: u64);
        _220 = _229;
        StorageDead(_229);
        _215 = (move _219, move _220);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_221);
        goto -> bb109;
    }

    bb101: {
        StorageLive(_226);
        _226 = ((_221 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb102, unwind: bb159];
    }

    bb102: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_221);
        goto -> bb147;
    }

    bb103: {
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_230);
        _230 = SpotBalanceType::Borrow;
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = _130;
        StorageLive(_235);
        _235 = _186;
        _233 = <u64 as SafeMath>::safe_sub(move _234, move _235) -> [return: bb104, unwind: bb159];
    }

    bb104: {
        StorageDead(_235);
        StorageDead(_234);
        _232 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _233) -> [return: bb105, unwind: bb159];
    }

    bb105: {
        StorageDead(_233);
        _236 = discriminant(_232);
        switchInt(move _236) -> [0: bb106, 1: bb107, otherwise: bb11];
    }

    bb106: {
        StorageLive(_240);
        _240 = ((_232 as Continue).0: u64);
        _231 = _240;
        StorageDead(_240);
        _215 = (move _230, move _231);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_232);
        goto -> bb109;
    }

    bb107: {
        StorageLive(_237);
        _237 = ((_232 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_239);
        _239 = _237;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _239) -> [return: bb108, unwind: bb159];
    }

    bb108: {
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_232);
        goto -> bb147;
    }

    bb109: {
        StorageDead(_216);
        StorageLive(_213);
        _213 = (_215.0: state::spot_market::SpotBalanceType);
        StorageLive(_214);
        _214 = (_215.1: u64);
        StorageDead(_215);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _214;
        _242 = Eq(move _243, const 0_u64);
        switchInt(move _242) -> [0: bb113, otherwise: bb110];
    }

    bb110: {
        StorageDead(_243);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = const "No base filled on phoenix";
        _246 = &(*_247);
        _245 = solana_program::log::sol_log(move _246) -> [return: bb111, unwind: bb159];
    }

    bb111: {
        StorageDead(_246);
        StorageDead(_247);
        StorageDead(_245);
        StorageLive(_248);
        _248 = ExternalSpotFill::empty() -> [return: bb112, unwind: bb159];
    }

    bb112: {
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _248);
        StorageDead(_248);
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb146;
    }

    bb113: {
        StorageDead(_243);
        _241 = const ();
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = _196;
        StorageLive(_253);
        _253 = _126;
        _251 = <u64 as SafeMath>::safe_sub(move _252, move _253) -> [return: bb114, unwind: bb159];
    }

    bb114: {
        StorageDead(_253);
        StorageDead(_252);
        _250 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _251) -> [return: bb115, unwind: bb159];
    }

    bb115: {
        StorageDead(_251);
        _254 = discriminant(_250);
        switchInt(move _254) -> [0: bb116, 1: bb117, otherwise: bb11];
    }

    bb116: {
        StorageLive(_258);
        _258 = ((_250 as Continue).0: u64);
        _249 = _258;
        StorageDead(_258);
        StorageDead(_250);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_213;
        StorageLive(_264);
        _314 = const _;
        _264 = &(*_314);
        _262 = <SpotBalanceType as PartialEq>::eq(move _263, move _264) -> [return: bb119, unwind: bb159];
    }

    bb117: {
        StorageLive(_255);
        _255 = ((_250 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_257);
        _257 = _255;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _257) -> [return: bb118, unwind: bb159];
    }

    bb118: {
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_250);
        goto -> bb145;
    }

    bb119: {
        switchInt(move _262) -> [0: bb131, otherwise: bb120];
    }

    bb120: {
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = _191;
        StorageLive(_270);
        _270 = _135;
        _268 = <u64 as SafeMath>::safe_sub(move _269, move _270) -> [return: bb121, unwind: bb159];
    }

    bb121: {
        StorageDead(_270);
        StorageDead(_269);
        _267 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _268) -> [return: bb122, unwind: bb159];
    }

    bb122: {
        StorageDead(_268);
        _271 = discriminant(_267);
        switchInt(move _271) -> [0: bb123, 1: bb124, otherwise: bb11];
    }

    bb123: {
        StorageLive(_275);
        _275 = ((_267 as Continue).0: u64);
        _266 = _275;
        StorageDead(_275);
        StorageDead(_267);
        StorageLive(_276);
        _276 = SpotBalanceType::Deposit;
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = _266;
        StorageLive(_281);
        _281 = _249;
        _279 = <u64 as SafeMath>::safe_add(move _280, move _281) -> [return: bb126, unwind: bb159];
    }

    bb124: {
        StorageLive(_272);
        _272 = ((_267 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_274);
        _274 = _272;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _274) -> [return: bb125, unwind: bb159];
    }

    bb125: {
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_267);
        StorageDead(_266);
        goto -> bb144;
    }

    bb126: {
        StorageDead(_281);
        StorageDead(_280);
        _278 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _279) -> [return: bb127, unwind: bb159];
    }

    bb127: {
        StorageDead(_279);
        _282 = discriminant(_278);
        switchInt(move _282) -> [0: bb128, 1: bb129, otherwise: bb11];
    }

    bb128: {
        StorageLive(_286);
        _286 = ((_278 as Continue).0: u64);
        _277 = _286;
        StorageDead(_286);
        _261 = (move _276, move _277);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_266);
        StorageDead(_278);
        goto -> bb142;
    }

    bb129: {
        StorageLive(_283);
        _283 = ((_278 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_285);
        _285 = _283;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _285) -> [return: bb130, unwind: bb159];
    }

    bb130: {
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_266);
        StorageDead(_278);
        goto -> bb144;
    }

    bb131: {
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = _135;
        StorageLive(_291);
        _291 = _191;
        _289 = <u64 as SafeMath>::safe_sub(move _290, move _291) -> [return: bb132, unwind: bb159];
    }

    bb132: {
        StorageDead(_291);
        StorageDead(_290);
        _288 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _289) -> [return: bb133, unwind: bb159];
    }

    bb133: {
        StorageDead(_289);
        _292 = discriminant(_288);
        switchInt(move _292) -> [0: bb134, 1: bb135, otherwise: bb11];
    }

    bb134: {
        StorageLive(_296);
        _296 = ((_288 as Continue).0: u64);
        _287 = _296;
        StorageDead(_296);
        StorageDead(_288);
        StorageLive(_297);
        _297 = SpotBalanceType::Borrow;
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = _287;
        StorageLive(_302);
        _302 = _249;
        _300 = <u64 as SafeMath>::safe_sub(move _301, move _302) -> [return: bb137, unwind: bb159];
    }

    bb135: {
        StorageLive(_293);
        _293 = ((_288 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_295);
        _295 = _293;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _295) -> [return: bb136, unwind: bb159];
    }

    bb136: {
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_288);
        StorageDead(_287);
        goto -> bb144;
    }

    bb137: {
        StorageDead(_302);
        StorageDead(_301);
        _299 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _300) -> [return: bb138, unwind: bb159];
    }

    bb138: {
        StorageDead(_300);
        _303 = discriminant(_299);
        switchInt(move _303) -> [0: bb139, 1: bb140, otherwise: bb11];
    }

    bb139: {
        StorageLive(_307);
        _307 = ((_299 as Continue).0: u64);
        _298 = _307;
        StorageDead(_307);
        _261 = (move _297, move _298);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_287);
        StorageDead(_299);
        goto -> bb142;
    }

    bb140: {
        StorageLive(_304);
        _304 = ((_299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_306);
        _306 = _304;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _306) -> [return: bb141, unwind: bb159];
    }

    bb141: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_287);
        StorageDead(_299);
        goto -> bb144;
    }

    bb142: {
        StorageDead(_262);
        StorageLive(_259);
        _259 = (_261.0: state::spot_market::SpotBalanceType);
        StorageLive(_260);
        _260 = (_261.1: u64);
        StorageDead(_261);
        StorageLive(_308);
        StorageLive(_309);
        _309 = _214;
        StorageLive(_310);
        _310 = _260;
        StorageLive(_311);
        _311 = _213;
        StorageLive(_312);
        _312 = _259;
        StorageLive(_313);
        _313 = _249;
        _308 = ExternalSpotFill { base_asset_amount_filled: move _309, base_update_direction: move _311, quote_asset_amount_filled: move _310, quote_update_direction: move _312, settled_referrer_rebate: const 0_u64, unsettled_referrer_rebate: const 0_u64, fee: move _313 };
        StorageDead(_313);
        StorageDead(_312);
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_309);
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _308);
        StorageDead(_308);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_249);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_196);
        StorageDead(_191);
        StorageDead(_186);
        StorageDead(_158);
        drop(_152) -> [return: bb143, unwind: bb163];
    }

    bb143: {
        StorageDead(_152);
        StorageDead(_135);
        StorageDead(_130);
        StorageDead(_126);
        StorageDead(_100);
        StorageDead(_78);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_12);
        _328 = const false;
        StorageDead(_6);
        goto -> bb158;
    }

    bb144: {
        StorageDead(_262);
        StorageDead(_261);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_249);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_214);
        StorageDead(_213);
        goto -> bb148;
    }

    bb147: {
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_196);
        StorageDead(_191);
        StorageDead(_186);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_158);
        drop(_152) -> [return: bb150, unwind: bb163];
    }

    bb150: {
        StorageDead(_152);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_135);
        StorageDead(_130);
        StorageDead(_126);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_100);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_78);
        goto -> bb154;
    }

    bb154: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb156;
    }

    bb155: {
        StorageDead(_36);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_12);
        switchInt(_328) -> [0: bb157, otherwise: bb161];
    }

    bb157: {
        _328 = const false;
        StorageDead(_6);
        goto -> bb158;
    }

    bb158: {
        return;
    }

    bb159 (cleanup): {
        drop(_152) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        resume;
    }

    bb161: {
        drop(_6) -> [return: bb157, unwind: bb160];
    }

    bb162 (cleanup): {
        drop(_6) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_328) -> [0: bb160, otherwise: bb162];
    }
}
