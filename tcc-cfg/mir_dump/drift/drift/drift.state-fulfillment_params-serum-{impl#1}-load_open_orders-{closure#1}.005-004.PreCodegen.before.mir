// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::load_open_orders::{closure#1}` before PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::load_open_orders::{closure#1}(_1: {closure@programs/drift/src/state/fulfillment_params/serum.rs:84:13: 84:19}, _2: &&mut [u8]) -> &[u8] {
    debug data => _2;
    let mut _0: &[u8];
    let _3: usize;
    let mut _4: usize;
    let mut _5: &[u8];
    let mut _6: (usize, bool);
    let mut _8: (&[u8], &[u8]);
    let mut _9: &[u8];
    let mut _11: (&[u8], &[u8]);
    let mut _12: &[u8];
    let mut _13: usize;
    let mut _14: &mut [u8];
    let mut _15: &mut [u8];
    scope 1 {
        debug data_len => _3;
        let _7: &[u8];
        scope 2 {
            debug rest => _7;
            let _10: &[u8];
            scope 3 {
                debug mid => _10;
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _14 = deref_copy (*_2);
        _5 = &(*_14);
        _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _6 = CheckedSub(_4, const 12_usize);
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, const 12_usize) -> [success: bb2, unwind continue];
    }

    bb2: {
        _3 = move (_6.0: usize);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _15 = deref_copy (*_2);
        _9 = &(*_15);
        _8 = core::slice::<impl [u8]>::split_at(move _9, const 5_usize) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_7);
        _7 = (_8.1: &[u8]);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_7);
        StorageLive(_13);
        _13 = _3;
        _11 = core::slice::<impl [u8]>::split_at(move _12, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_10);
        _10 = (_11.0: &[u8]);
        StorageDead(_11);
        _0 = &(*_10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_3);
        return;
    }
}
