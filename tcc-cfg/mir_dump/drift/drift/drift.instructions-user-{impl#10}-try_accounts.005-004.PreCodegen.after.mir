// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:3933:10: 3933:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:3933:10: 3933:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeUserBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeUserBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeUserBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeUserBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeUserBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _20: ();
    let mut _21: bool;
    let mut _22: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _23: !;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::ErrorCode;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: std::ops::RangeFrom<usize>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::user::InitializeUserBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::user::InitializeUserBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::user::InitializeUserBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::user::InitializeUserBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _97: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::user::InitializeUserBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _112: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::user::InitializeUserBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _127: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _135: (anchor_lang::prelude::Pubkey, u8);
    let mut _136: &[&[u8]];
    let mut _137: &[&[u8]; 3];
    let _138: &[&[u8]; 3];
    let _139: [&[u8]; 3];
    let mut _140: &[u8];
    let mut _141: &[u8; 4];
    let _142: &[u8; 4];
    let mut _143: &[u8];
    let _144: &[u8];
    let mut _145: &anchor_lang::prelude::Pubkey;
    let _146: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _147: &anchor_lang::prelude::Signer<'_>;
    let mut _148: &[u8];
    let _149: &[u8];
    let mut _150: &[u8; 2];
    let _151: [u8; 2];
    let mut _152: u16;
    let mut _153: &anchor_lang::prelude::Pubkey;
    let mut _154: u8;
    let _155: ();
    let mut _156: bool;
    let mut _157: &anchor_lang::prelude::Pubkey;
    let _158: anchor_lang::prelude::Pubkey;
    let mut _159: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: !;
    let mut _162: anchor_lang::error::Error;
    let mut _163: anchor_lang::error::Error;
    let mut _164: anchor_lang::error::Error;
    let mut _165: anchor_lang::error::ErrorCode;
    let mut _166: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _167: anchor_lang::prelude::Pubkey;
    let mut _168: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _169: anchor_lang::prelude::Pubkey;
    let mut _172: &&anchor_lang::prelude::AccountInfo<'_>;
    let _173: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: &&anchor_lang::prelude::Pubkey;
    let mut _180: &&anchor_lang::prelude::Pubkey;
    let _181: &anchor_lang::prelude::Pubkey;
    let _182: anchor_lang::prelude::Pubkey;
    let mut _184: &anchor_lang::prelude::AccountInfo<'_>;
    let _185: ();
    let mut _186: bool;
    let mut _187: u64;
    let mut _190: &anchor_lang::prelude::Rent;
    let mut _191: usize;
    let mut _193: anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: &anchor_lang::prelude::Signer<'_>;
    let mut _195: anchor_lang::prelude::AccountInfo<'_>;
    let mut _196: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _198: anchor_lang::prelude::AccountInfo<'_>;
    let mut _199: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _200: anchor_lang::system_program::CreateAccount<'_>;
    let _201: ();
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _203: std::result::Result<(), anchor_lang::error::Error>;
    let mut _204: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _205: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _206: &[&[&[u8]]];
    let mut _207: &[&[&[u8]]; 1];
    let _208: &[&[&[u8]]; 1];
    let _209: [&[&[u8]]; 1];
    let mut _210: &[&[u8]];
    let _211: &[&[u8]];
    let _212: &[&[u8]];
    let mut _213: &[&[u8]; 4];
    let _214: [&[u8]; 4];
    let mut _215: &[u8];
    let mut _216: &[u8; 4];
    let _217: &[u8; 4];
    let mut _218: &[u8];
    let mut _219: &anchor_lang::prelude::Pubkey;
    let _220: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _221: &anchor_lang::prelude::Signer<'_>;
    let mut _222: &[u8];
    let _223: &[u8];
    let mut _224: &[u8; 2];
    let _225: [u8; 2];
    let mut _226: u16;
    let mut _227: &[u8];
    let _228: &[u8];
    let _229: &[u8];
    let mut _230: &[u8; 1];
    let _231: [u8; 1];
    let mut _232: u8;
    let mut _233: std::ops::RangeFull;
    let mut _234: std::ops::RangeFull;
    let mut _235: u64;
    let mut _236: u64;
    let mut _237: usize;
    let mut _238: &anchor_lang::prelude::Pubkey;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _244: ();
    let mut _245: bool;
    let mut _246: &anchor_lang::prelude::Pubkey;
    let _247: anchor_lang::prelude::Pubkey;
    let mut _248: &anchor_lang::prelude::Signer<'_>;
    let mut _249: &anchor_lang::prelude::Pubkey;
    let _250: anchor_lang::prelude::Pubkey;
    let mut _251: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _252: !;
    let mut _253: anchor_lang::error::Error;
    let mut _254: anchor_lang::error::Error;
    let mut _255: anchor_lang::error::AnchorError;
    let mut _256: std::string::String;
    let mut _257: &anchor_lang::error::ErrorCode;
    let _258: anchor_lang::error::ErrorCode;
    let mut _259: u32;
    let mut _260: anchor_lang::error::ErrorCode;
    let mut _261: std::string::String;
    let mut _262: &anchor_lang::error::ErrorCode;
    let _263: anchor_lang::error::ErrorCode;
    let mut _264: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _265: anchor_lang::error::ErrorOrigin;
    let mut _266: anchor_lang::error::Source;
    let mut _267: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _268: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _269: anchor_lang::prelude::Pubkey;
    let mut _270: &anchor_lang::prelude::Signer<'_>;
    let mut _271: anchor_lang::prelude::Pubkey;
    let mut _272: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _274: u64;
    let mut _275: u64;
    let mut _276: &anchor_lang::prelude::Rent;
    let mut _277: usize;
    let mut _278: u64;
    let _279: ();
    let mut _280: bool;
    let mut _281: u64;
    let mut _283: anchor_lang::prelude::AccountInfo<'_>;
    let mut _284: &anchor_lang::prelude::Signer<'_>;
    let mut _285: anchor_lang::prelude::AccountInfo<'_>;
    let mut _286: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _288: anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _290: anchor_lang::system_program::Transfer<'_>;
    let _291: ();
    let mut _292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _293: std::result::Result<(), anchor_lang::error::Error>;
    let mut _294: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _295: u64;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _302: anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _305: anchor_lang::prelude::AccountInfo<'_>;
    let mut _306: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _307: anchor_lang::system_program::Allocate<'_>;
    let _308: ();
    let mut _309: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _310: std::result::Result<(), anchor_lang::error::Error>;
    let mut _311: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _312: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _313: &[&[&[u8]]];
    let mut _314: &[&[&[u8]]; 1];
    let _315: &[&[&[u8]]; 1];
    let _316: [&[&[u8]]; 1];
    let mut _317: &[&[u8]];
    let _318: &[&[u8]];
    let _319: &[&[u8]];
    let mut _320: &[&[u8]; 4];
    let _321: [&[u8]; 4];
    let mut _322: &[u8];
    let mut _323: &[u8; 4];
    let _324: &[u8; 4];
    let mut _325: &[u8];
    let mut _326: &anchor_lang::prelude::Pubkey;
    let _327: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _328: &anchor_lang::prelude::Signer<'_>;
    let mut _329: &[u8];
    let _330: &[u8];
    let mut _331: &[u8; 2];
    let _332: [u8; 2];
    let mut _333: u16;
    let mut _334: &[u8];
    let _335: &[u8];
    let _336: &[u8];
    let mut _337: &[u8; 1];
    let _338: [u8; 1];
    let mut _339: u8;
    let mut _340: std::ops::RangeFull;
    let mut _341: std::ops::RangeFull;
    let mut _342: u64;
    let mut _343: usize;
    let mut _344: isize;
    let mut _346: !;
    let mut _347: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _350: anchor_lang::prelude::AccountInfo<'_>;
    let mut _351: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _353: anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _355: anchor_lang::system_program::Assign<'_>;
    let _356: ();
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _358: std::result::Result<(), anchor_lang::error::Error>;
    let mut _359: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _360: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _361: &[&[&[u8]]];
    let mut _362: &[&[&[u8]]; 1];
    let _363: &[&[&[u8]]; 1];
    let _364: [&[&[u8]]; 1];
    let mut _365: &[&[u8]];
    let _366: &[&[u8]];
    let _367: &[&[u8]];
    let mut _368: &[&[u8]; 4];
    let _369: [&[u8]; 4];
    let mut _370: &[u8];
    let mut _371: &[u8; 4];
    let _372: &[u8; 4];
    let mut _373: &[u8];
    let mut _374: &anchor_lang::prelude::Pubkey;
    let _375: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _376: &anchor_lang::prelude::Signer<'_>;
    let mut _377: &[u8];
    let _378: &[u8];
    let mut _379: &[u8; 2];
    let _380: [u8; 2];
    let mut _381: u16;
    let mut _382: &[u8];
    let _383: &[u8];
    let _384: &[u8];
    let mut _385: &[u8; 1];
    let _386: [u8; 1];
    let mut _387: u8;
    let mut _388: std::ops::RangeFull;
    let mut _389: std::ops::RangeFull;
    let mut _390: &anchor_lang::prelude::Pubkey;
    let mut _391: isize;
    let mut _393: !;
    let mut _394: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _396: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _397: &anchor_lang::prelude::Pubkey;
    let mut _398: &anchor_lang::prelude::AccountInfo<'_>;
    let _399: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _400: isize;
    let mut _403: !;
    let mut _404: anchor_lang::error::Error;
    let mut _405: anchor_lang::error::Error;
    let mut _406: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _407: &anchor_lang::prelude::AccountInfo<'_>;
    let _408: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _409: isize;
    let mut _412: !;
    let mut _413: anchor_lang::error::Error;
    let mut _414: anchor_lang::error::Error;
    let _415: ();
    let mut _416: bool;
    let _417: ();
    let mut _418: bool;
    let mut _419: usize;
    let mut _420: usize;
    let mut _421: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _422: !;
    let mut _423: anchor_lang::error::Error;
    let mut _424: anchor_lang::error::Error;
    let mut _425: anchor_lang::error::Error;
    let mut _426: anchor_lang::error::ErrorCode;
    let mut _427: (usize, usize);
    let mut _428: usize;
    let mut _429: usize;
    let mut _430: &anchor_lang::prelude::AccountInfo<'_>;
    let _431: ();
    let mut _432: bool;
    let mut _433: &&anchor_lang::prelude::Pubkey;
    let mut _434: &&anchor_lang::prelude::Pubkey;
    let mut _435: !;
    let mut _436: anchor_lang::error::Error;
    let mut _437: anchor_lang::error::Error;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::ErrorCode;
    let mut _440: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _441: anchor_lang::prelude::Pubkey;
    let mut _442: anchor_lang::prelude::Pubkey;
    let mut _444: &anchor_lang::prelude::Rent;
    let mut _445: usize;
    let mut _446: bool;
    let mut _447: u64;
    let mut _448: &anchor_lang::prelude::AccountInfo<'_>;
    let _449: anchor_lang::prelude::AccountInfo<'_>;
    let mut _450: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _451: u64;
    let mut _452: !;
    let mut _453: anchor_lang::error::Error;
    let mut _454: anchor_lang::error::Error;
    let mut _455: anchor_lang::error::ErrorCode;
    let _456: ();
    let mut _457: bool;
    let mut _458: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _459: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _460: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _461: !;
    let mut _462: anchor_lang::error::Error;
    let mut _463: anchor_lang::error::Error;
    let mut _464: anchor_lang::error::ErrorCode;
    let _465: ();
    let mut _466: bool;
    let mut _467: &anchor_lang::prelude::Rent;
    let mut _468: u64;
    let mut _469: &anchor_lang::prelude::AccountInfo<'_>;
    let _470: anchor_lang::prelude::AccountInfo<'_>;
    let mut _471: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _472: usize;
    let mut _473: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _474: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _475: &anchor_lang::prelude::AccountInfo<'_>;
    let _476: anchor_lang::prelude::AccountInfo<'_>;
    let mut _477: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _478: isize;
    let mut _480: !;
    let mut _481: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _483: !;
    let mut _484: anchor_lang::error::Error;
    let mut _485: anchor_lang::error::Error;
    let mut _486: anchor_lang::error::ErrorCode;
    let _487: ();
    let mut _488: bool;
    let mut _489: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _490: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _491: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _492: !;
    let mut _493: anchor_lang::error::Error;
    let mut _494: anchor_lang::error::Error;
    let mut _495: anchor_lang::error::ErrorCode;
    let _496: ();
    let mut _498: &state::user::UserStats;
    let mut _499: &std::cell::Ref<'_, state::user::UserStats>;
    let _500: std::cell::Ref<'_, state::user::UserStats>;
    let mut _501: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _502: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _503: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _504: isize;
    let mut _506: !;
    let mut _507: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _510: &anchor_lang::prelude::Signer<'_>;
    let mut _511: bool;
    let mut _512: &anchor_lang::prelude::Pubkey;
    let mut _513: &anchor_lang::prelude::Pubkey;
    let mut _514: !;
    let mut _515: anchor_lang::error::Error;
    let mut _516: anchor_lang::error::Error;
    let mut _517: anchor_lang::error::Error;
    let mut _518: anchor_lang::error::ErrorCode;
    let mut _519: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _520: anchor_lang::prelude::Pubkey;
    let mut _521: anchor_lang::prelude::Pubkey;
    let _522: ();
    let mut _523: bool;
    let mut _524: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _525: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _526: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _527: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _528: !;
    let mut _529: anchor_lang::error::Error;
    let mut _530: anchor_lang::error::Error;
    let mut _531: anchor_lang::error::ErrorCode;
    let _532: ();
    let mut _533: bool;
    let mut _534: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _535: &anchor_lang::prelude::Signer<'_>;
    let _536: &anchor_lang::prelude::Signer<'_>;
    let mut _537: !;
    let mut _538: anchor_lang::error::Error;
    let mut _539: anchor_lang::error::Error;
    let mut _540: anchor_lang::error::ErrorCode;
    let mut _541: instructions::user::InitializeUser<'_>;
    let mut _542: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _543: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _544: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _545: anchor_lang::prelude::Signer<'_>;
    let mut _546: anchor_lang::prelude::Signer<'_>;
    let mut _547: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _548: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _552: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _553: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _554: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _555: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _556: &anchor_lang::prelude::Pubkey;
    let mut _557: &anchor_lang::prelude::Pubkey;
    let mut _558: &anchor_lang::prelude::Pubkey;
    let mut _559: &anchor_lang::prelude::Pubkey;
    let mut _560: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _561: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _562: bool;
    let mut _563: bool;
    let mut _564: bool;
    let mut _565: bool;
    let mut _566: bool;
    let mut _567: bool;
    let mut _568: bool;
    let mut _569: bool;
    let mut _570: bool;
    let mut _571: bool;
    let mut _572: bool;
    let mut _573: bool;
    let mut _574: bool;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeUserBumps>>::try_accounts::__Args;
        scope 2 {
            debug sub_account_id => _7;
            let _26: &anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug user => _26;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                scope 8 {
                    debug user_stats => _35;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 13 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::Signer<'_>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Signer<'_>;
                        scope 18 {
                            debug authority => _65;
                            let _80: anchor_lang::prelude::Signer<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Signer<'_>;
                            scope 23 {
                                debug payer => _80;
                                let _95: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                scope 28 {
                                    debug rent => _95;
                                    let _110: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                    scope 33 {
                                        debug system_program => _110;
                                        let _125: anchor_lang::prelude::Rent;
                                        let _129: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _132: anchor_lang::prelude::Rent;
                                        scope 38 {
                                            debug __anchor_rent => _125;
                                            let _133: anchor_lang::prelude::Pubkey;
                                            let _134: u8;
                                            scope 43 {
                                                debug __pda_address => _133;
                                                debug __bump => _134;
                                                let _170: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                let _171: &anchor_lang::prelude::AccountInfo<'_>;
                                                scope 44 {
                                                    debug user => _170;
                                                    let _479: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                    let _482: usize;
                                                    let _497: anchor_lang::prelude::Pubkey;
                                                    let _505: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _508: std::cell::Ref<'_, state::user::UserStats>;
                                                    scope 82 {
                                                        debug residual => _479;
                                                        scope 83 {
                                                        }
                                                    }
                                                    scope 84 {
                                                        debug val => _482;
                                                        scope 85 {
                                                        }
                                                    }
                                                    scope 86 {
                                                        debug my_key => _497;
                                                        let _509: anchor_lang::prelude::Pubkey;
                                                        scope 91 {
                                                            debug target_key => _509;
                                                        }
                                                    }
                                                    scope 87 {
                                                        debug residual => _505;
                                                        scope 88 {
                                                        }
                                                    }
                                                    scope 89 {
                                                        debug val => _508;
                                                        scope 90 {
                                                        }
                                                    }
                                                }
                                                scope 45 {
                                                    debug actual_field => _171;
                                                    let _174: &anchor_lang::prelude::Pubkey;
                                                    scope 46 {
                                                        debug actual_owner => _174;
                                                        let _175: usize;
                                                        scope 47 {
                                                            debug space => _175;
                                                            let _176: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                            let _183: u64;
                                                            let _410: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                            let _411: anchor_lang::error::Error;
                                                            let mut _551: &&anchor_lang::prelude::Pubkey;
                                                            scope 48 {
                                                                debug pa => _176;
                                                                let _443: u64;
                                                                scope 81 {
                                                                    debug required_lamports => _443;
                                                                }
                                                            }
                                                            scope 49 {
                                                                debug __current_lamports => _183;
                                                                let _188: usize;
                                                                let _273: u64;
                                                                let _401: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                                let _402: anchor_lang::error::Error;
                                                                let mut _549: &anchor_lang::error::ErrorCode;
                                                                let mut _550: &anchor_lang::error::ErrorCode;
                                                                scope 50 {
                                                                    debug space => _188;
                                                                    let _189: u64;
                                                                    scope 51 {
                                                                        debug lamports => _189;
                                                                        let _192: anchor_lang::system_program::CreateAccount<'_>;
                                                                        scope 52 {
                                                                            debug cpi_accounts => _192;
                                                                            let _197: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                            scope 53 {
                                                                                debug cpi_context => _197;
                                                                                let _240: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _243: ();
                                                                                scope 54 {
                                                                                    debug residual => _240;
                                                                                    scope 55 {
                                                                                    }
                                                                                }
                                                                                scope 56 {
                                                                                    debug val => _243;
                                                                                    scope 57 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug required_lamports => _273;
                                                                    let _282: anchor_lang::system_program::Transfer<'_>;
                                                                    let _301: anchor_lang::system_program::Allocate<'_>;
                                                                    scope 59 {
                                                                        debug cpi_accounts => _282;
                                                                        let _287: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                        scope 60 {
                                                                            debug cpi_context => _287;
                                                                            let _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _300: ();
                                                                            scope 61 {
                                                                                debug residual => _297;
                                                                                scope 62 {
                                                                                }
                                                                            }
                                                                            scope 63 {
                                                                                debug val => _300;
                                                                                scope 64 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 65 {
                                                                        debug cpi_accounts => _301;
                                                                        let _304: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                        scope 66 {
                                                                            debug cpi_context => _304;
                                                                            let _345: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _348: ();
                                                                            let _349: anchor_lang::system_program::Assign<'_>;
                                                                            scope 67 {
                                                                                debug residual => _345;
                                                                                scope 68 {
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug val => _348;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug cpi_accounts => _349;
                                                                                let _352: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                scope 72 {
                                                                                    debug cpi_context => _352;
                                                                                    let _392: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _395: ();
                                                                                    scope 73 {
                                                                                        debug residual => _392;
                                                                                        scope 74 {
                                                                                        }
                                                                                    }
                                                                                    scope 75 {
                                                                                        debug val => _395;
                                                                                        scope 76 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 77 {
                                                                    debug val => _401;
                                                                }
                                                                scope 78 {
                                                                    debug e => _402;
                                                                }
                                                            }
                                                            scope 79 {
                                                                debug val => _410;
                                                            }
                                                            scope 80 {
                                                                debug e => _411;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _129;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _132;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _121;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _124;
                                        scope 37 {
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _106;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _109;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _46;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _49;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _574 = const false;
        _573 = const false;
        _572 = const false;
        _571 = const false;
        _570 = const false;
        _569 = const false;
        _568 = const false;
        _567 = const false;
        _566 = const false;
        _565 = const false;
        _564 = const false;
        _563 = const false;
        _562 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, InitializeUserBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _10 = std::result::Result::<<instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, InitializeUserBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _11, move _14) -> [return: bb2, unwind: bb266];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, InitializeUserBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::user::InitializeUser<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeUserBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _552 = deref_copy (*_2);
        _22 = &(*_552);
        _21 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb256;
    }

    bb8: {
        switchInt(move _21) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = AccountNotEnoughKeys;
        _24 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb255;
    }

    bb11: {
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const 0_usize;
        _553 = deref_copy (*_2);
        _28 = Len((*_553));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb12, unwind continue];
    }

    bb12: {
        _554 = deref_copy (*_2);
        _26 = &(*_554)[_27];
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _555 = deref_copy (*_2);
        _33 = &(*_555);
        StorageLive(_34);
        _34 = RangeFrom::<usize> { start: const 1_usize };
        _32 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _33, move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = &(*_32);
        _30 = &(*_31);
        (*_2) = move _30;
        StorageDead(_30);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, InitializeUserBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _38, move _44) -> [return: bb15, unwind: bb266];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb266];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _35 = move _49;
        StorageDead(_49);
        _575 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeUserBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb302];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _635 = discriminant(_36);
        StorageDead(_36);
        goto -> bb254;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _53, move _59) -> [return: bb21, unwind: bb266];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb266];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _577 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeUserBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb265];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb301];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _633 = discriminant(_51);
        StorageDead(_51);
        goto -> bb253;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _67 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _68, move _74) -> [return: bb27, unwind: bb265];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb265];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _65 = move _79;
        StorageDead(_79);
        _579 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeUserBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb265];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb300];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _631 = discriminant(_66);
        StorageDead(_66);
        goto -> bb252;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _82 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _83, move _89) -> [return: bb33, unwind: bb265];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb265];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _80 = move _94;
        StorageDead(_94);
        _581 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeUserBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb265];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb299];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _629 = discriminant(_81);
        StorageDead(_81);
        goto -> bb251;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _97 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _98, move _104) -> [return: bb39, unwind: bb265];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb265];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _95 = move _109;
        StorageDead(_109);
        _583 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeUserBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb265];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb298];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _627 = discriminant(_96);
        StorageDead(_96);
        goto -> bb250;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18};
        _112 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3933:10: 3933:18}>(move _113, move _119) -> [return: bb45, unwind: bb265];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb265];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _110 = move _124;
        StorageDead(_124);
        _585 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb50, unwind: bb265];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb297];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _625 = discriminant(_111);
        StorageDead(_111);
        goto -> bb249;
    }

    bb50: {
        _126 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _127) -> [return: bb51, unwind: bb265];
    }

    bb51: {
        StorageDead(_127);
        _128 = discriminant(_126);
        switchInt(move _128) -> [0: bb52, 1: bb53, otherwise: bb5];
    }

    bb52: {
        StorageLive(_132);
        _132 = ((_126 as Continue).0: anchor_lang::prelude::Rent);
        _125 = _132;
        StorageDead(_132);
        _587 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = const b"user";
        _141 = &(*_142);
        _140 = move _141 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_65;
        _146 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _147) -> [return: bb55, unwind: bb265];
    }

    bb53: {
        StorageLive(_129);
        _129 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_131);
        _131 = move _129;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _131) -> [return: bb54, unwind: bb296];
    }

    bb54: {
        StorageDead(_131);
        StorageDead(_129);
        _623 = discriminant(_126);
        StorageDead(_126);
        goto -> bb248;
    }

    bb55: {
        StorageDead(_147);
        _556 = deref_copy ((*_146).0: &anchor_lang::prelude::Pubkey);
        _145 = &(*_556);
        _144 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _145) -> [return: bb56, unwind: bb265];
    }

    bb56: {
        _143 = &(*_144);
        StorageDead(_145);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _7;
        _151 = core::num::<impl u16>::to_le_bytes(move _152) -> [return: bb57, unwind: bb265];
    }

    bb57: {
        _150 = &_151;
        StorageDead(_152);
        _149 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _150) -> [return: bb58, unwind: bb265];
    }

    bb58: {
        _148 = &(*_149);
        StorageDead(_150);
        _139 = [move _140, move _143, move _148];
        StorageDead(_148);
        StorageDead(_143);
        StorageDead(_140);
        _138 = &_139;
        _137 = &(*_138);
        _136 = move _137 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_137);
        StorageLive(_153);
        _153 = &(*_1);
        _135 = anchor_lang::prelude::Pubkey::find_program_address(move _136, move _153) -> [return: bb59, unwind: bb265];
    }

    bb59: {
        StorageDead(_153);
        StorageDead(_136);
        StorageLive(_133);
        _133 = (_135.0: anchor_lang::prelude::Pubkey);
        StorageLive(_134);
        _134 = (_135.1: u8);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_135);
        StorageLive(_154);
        _154 = _134;
        ((*_4).0: u8) = move _154;
        StorageDead(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_26);
        _158 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _159) -> [return: bb60, unwind: bb265];
    }

    bb60: {
        _157 = &_158;
        StorageDead(_159);
        StorageLive(_160);
        _160 = &_133;
        _156 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _157, move _160) -> [return: bb61, unwind: bb265];
    }

    bb61: {
        switchInt(move _156) -> [0: bb67, otherwise: bb62];
    }

    bb62: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = ConstraintSeeds;
        _164 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _165) -> [return: bb63, unwind: bb265];
    }

    bb63: {
        StorageDead(_165);
        _163 = anchor_lang::error::Error::with_account_name::<&str>(move _164, const "user") -> [return: bb64, unwind: bb265];
    }

    bb64: {
        _574 = const true;
        StorageDead(_164);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &(*_26);
        _167 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _168) -> [return: bb65, unwind: bb295];
    }

    bb65: {
        StorageDead(_168);
        StorageLive(_169);
        _169 = _133;
        _166 = (move _167, move _169);
        StorageDead(_169);
        StorageDead(_167);
        _574 = const false;
        _162 = anchor_lang::error::Error::with_pubkeys(move _163, move _166) -> [return: bb66, unwind: bb295];
    }

    bb66: {
        StorageDead(_166);
        _574 = const false;
        StorageDead(_163);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _162);
        StorageDead(_162);
        StorageDead(_156);
        StorageDead(_155);
        goto -> bb247;
    }

    bb67: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_157);
        _155 = const ();
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_26;
        _172 = &(*_173);
        _171 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _172) -> [return: bb68, unwind: bb265];
    }

    bb68: {
        StorageDead(_172);
        StorageDead(_173);
        StorageLive(_174);
        _174 = ((*_171).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_175);
        _175 = const _;
        StorageLive(_176);
        StorageLive(_177);
        _177 = const false;
        switchInt(move _177) -> [0: bb71, otherwise: bb69];
    }

    bb69: {
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_174;
        StorageLive(_180);
        _551 = const _;
        _180 = &(*_551);
        _178 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _179, move _180) -> [return: bb70, unwind: bb265];
    }

    bb70: {
        switchInt(move _178) -> [0: bb154, otherwise: bb71];
    }

    bb71: {
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &(*_26);
        _183 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _184) -> [return: bb72, unwind: bb265];
    }

    bb72: {
        StorageDead(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = _183;
        _186 = Eq(move _187, const 0_u64);
        switchInt(move _186) -> [0: bb91, otherwise: bb73];
    }

    bb73: {
        StorageDead(_187);
        StorageLive(_188);
        _188 = _175;
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_125;
        StorageLive(_191);
        _191 = _188;
        _189 = anchor_lang::prelude::Rent::minimum_balance(move _190, move _191) -> [return: bb74, unwind: bb265];
    }

    bb74: {
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_80;
        _193 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _194) -> [return: bb75, unwind: bb265];
    }

    bb75: {
        StorageDead(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &(*_26);
        _195 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _196) -> [return: bb76, unwind: bb264];
    }

    bb76: {
        StorageDead(_196);
        _573 = const true;
        _192 = anchor_lang::system_program::CreateAccount::<'_> { from: move _193, to: move _195 };
        StorageDead(_195);
        StorageDead(_193);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_110;
        _198 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _199) -> [return: bb77, unwind: bb293];
    }

    bb77: {
        StorageDead(_199);
        StorageLive(_200);
        _573 = const false;
        _200 = move _192;
        _197 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _198, move _200) -> [return: bb78, unwind: bb293];
    }

    bb78: {
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _572 = const true;
        _205 = move _197;
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = const b"user";
        _216 = &(*_217);
        _215 = move _216 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &_65;
        _220 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _221) -> [return: bb79, unwind: bb291];
    }

    bb79: {
        StorageDead(_221);
        _557 = deref_copy ((*_220).0: &anchor_lang::prelude::Pubkey);
        _219 = &(*_557);
        _218 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _219) -> [return: bb80, unwind: bb291];
    }

    bb80: {
        StorageDead(_219);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = _7;
        _225 = core::num::<impl u16>::to_le_bytes(move _226) -> [return: bb81, unwind: bb291];
    }

    bb81: {
        _224 = &_225;
        StorageDead(_226);
        _223 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _224) -> [return: bb82, unwind: bb291];
    }

    bb82: {
        _222 = &(*_223);
        StorageDead(_224);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = _134;
        _231 = [move _232];
        _230 = &_231;
        StorageDead(_232);
        StorageLive(_233);
        _233 = RangeFull;
        _229 = <[u8; 1] as Index<RangeFull>>::index(move _230, move _233) -> [return: bb83, unwind: bb291];
    }

    bb83: {
        StorageDead(_233);
        StorageDead(_230);
        _228 = &(*_229);
        _227 = &(*_228);
        _214 = [move _215, move _218, move _222, move _227];
        _213 = &_214;
        StorageDead(_227);
        StorageDead(_222);
        StorageDead(_218);
        StorageDead(_215);
        StorageLive(_234);
        _234 = RangeFull;
        _212 = <[&[u8]; 4] as Index<RangeFull>>::index(move _213, move _234) -> [return: bb84, unwind: bb291];
    }

    bb84: {
        StorageDead(_234);
        StorageDead(_213);
        _211 = &(*_212);
        _210 = &(*_211);
        _209 = [move _210];
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = move _207 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_207);
        _572 = const false;
        _204 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _205, move _206) -> [return: bb85, unwind: bb291];
    }

    bb85: {
        StorageDead(_206);
        _572 = const false;
        StorageDead(_205);
        StorageLive(_235);
        _235 = _189;
        StorageLive(_236);
        StorageLive(_237);
        _237 = _188;
        _236 = move _237 as u64 (IntToInt);
        StorageDead(_237);
        StorageLive(_238);
        _238 = &(*_1);
        _203 = anchor_lang::system_program::create_account(move _204, move _235, move _236, move _238) -> [return: bb86, unwind: bb293];
    }

    bb86: {
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_204);
        _202 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _203) -> [return: bb87, unwind: bb293];
    }

    bb87: {
        StorageDead(_203);
        _239 = discriminant(_202);
        switchInt(move _239) -> [0: bb88, 1: bb89, otherwise: bb5];
    }

    bb88: {
        StorageLive(_243);
        _243 = ((_202 as Continue).0: ());
        _201 = _243;
        StorageDead(_243);
        _589 = discriminant(_202);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_202);
        StorageDead(_201);
        _185 = const ();
        StorageDead(_197);
        _573 = const false;
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb149;
    }

    bb89: {
        StorageLive(_240);
        _240 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_242);
        _242 = move _240;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _242) -> [return: bb90, unwind: bb289];
    }

    bb90: {
        StorageDead(_242);
        StorageDead(_240);
        _621 = discriminant(_202);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_197);
        _573 = const false;
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb243;
    }

    bb91: {
        StorageDead(_187);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_80;
        _247 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _248) -> [return: bb92, unwind: bb265];
    }

    bb92: {
        _246 = &_247;
        StorageDead(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &(*_26);
        _250 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _251) -> [return: bb93, unwind: bb265];
    }

    bb93: {
        _249 = &_250;
        StorageDead(_251);
        _245 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _246, move _249) -> [return: bb94, unwind: bb265];
    }

    bb94: {
        switchInt(move _245) -> [0: bb103, otherwise: bb95];
    }

    bb95: {
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _550 = const _;
        _257 = &(*_550);
        _256 = anchor_lang::error::ErrorCode::name(move _257) -> [return: bb96, unwind: bb265];
    }

    bb96: {
        StorageDead(_257);
        StorageLive(_259);
        StorageLive(_260);
        _260 = TryingToInitPayerAsProgramAccount;
        _259 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _260) -> [return: bb97, unwind: bb263];
    }

    bb97: {
        StorageDead(_260);
        StorageLive(_261);
        StorageLive(_262);
        _549 = const _;
        _262 = &(*_549);
        _261 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _262) -> [return: bb98, unwind: bb263];
    }

    bb98: {
        StorageDead(_262);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/user.rs", line: const 3933_u32 };
        _265 = anchor_lang::error::ErrorOrigin::Source(move _266);
        StorageDead(_266);
        _264 = Option::<ErrorOrigin>::Some(move _265);
        StorageDead(_265);
        StorageLive(_267);
        _267 = Option::<ComparedValues>::None;
        _255 = anchor_lang::error::AnchorError { error_name: move _256, error_code_number: move _259, error_msg: move _261, error_origin: move _264, compared_values: move _267 };
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_256);
        _254 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _255) -> [return: bb99, unwind: bb265];
    }

    bb99: {
        _571 = const true;
        StorageDead(_255);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &_80;
        _269 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _270) -> [return: bb100, unwind: bb288];
    }

    bb100: {
        StorageDead(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &(*_26);
        _271 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _272) -> [return: bb101, unwind: bb288];
    }

    bb101: {
        StorageDead(_272);
        _268 = (move _269, move _271);
        StorageDead(_271);
        StorageDead(_269);
        _571 = const false;
        _253 = anchor_lang::error::Error::with_pubkeys(move _254, move _268) -> [return: bb102, unwind: bb288];
    }

    bb102: {
        StorageDead(_268);
        _571 = const false;
        StorageDead(_254);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _253);
        StorageDead(_253);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb243;
    }

    bb103: {
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        _244 = const ();
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_125;
        StorageLive(_277);
        _277 = _175;
        _275 = anchor_lang::prelude::Rent::minimum_balance(move _276, move _277) -> [return: bb104, unwind: bb265];
    }

    bb104: {
        StorageDead(_277);
        StorageDead(_276);
        _274 = <u64 as Ord>::max(move _275, const 1_u64) -> [return: bb105, unwind: bb265];
    }

    bb105: {
        StorageDead(_275);
        StorageLive(_278);
        _278 = _183;
        _273 = core::num::<impl u64>::saturating_sub(move _274, move _278) -> [return: bb106, unwind: bb265];
    }

    bb106: {
        StorageDead(_278);
        StorageDead(_274);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = _273;
        _280 = Gt(move _281, const 0_u64);
        switchInt(move _280) -> [0: bb117, otherwise: bb107];
    }

    bb107: {
        StorageDead(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = &_80;
        _283 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _284) -> [return: bb108, unwind: bb265];
    }

    bb108: {
        StorageDead(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &(*_26);
        _285 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _286) -> [return: bb109, unwind: bb262];
    }

    bb109: {
        StorageDead(_286);
        _570 = const true;
        _282 = anchor_lang::system_program::Transfer::<'_> { from: move _283, to: move _285 };
        StorageDead(_285);
        StorageDead(_283);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &_110;
        _288 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _289) -> [return: bb110, unwind: bb286];
    }

    bb110: {
        StorageDead(_289);
        StorageLive(_290);
        _570 = const false;
        _290 = move _282;
        _287 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _288, move _290) -> [return: bb111, unwind: bb286];
    }

    bb111: {
        StorageDead(_290);
        StorageDead(_288);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = move _287;
        StorageLive(_295);
        _295 = _273;
        _293 = anchor_lang::system_program::transfer(move _294, move _295) -> [return: bb112, unwind: bb286];
    }

    bb112: {
        StorageDead(_295);
        StorageDead(_294);
        _292 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _293) -> [return: bb113, unwind: bb286];
    }

    bb113: {
        StorageDead(_293);
        _296 = discriminant(_292);
        switchInt(move _296) -> [0: bb114, 1: bb115, otherwise: bb5];
    }

    bb114: {
        StorageLive(_300);
        _300 = ((_292 as Continue).0: ());
        _291 = _300;
        StorageDead(_300);
        _591 = discriminant(_292);
        StorageDead(_292);
        StorageDead(_291);
        _279 = const ();
        StorageDead(_287);
        _570 = const false;
        StorageDead(_282);
        goto -> bb118;
    }

    bb115: {
        StorageLive(_297);
        _297 = move ((_292 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_299);
        _299 = move _297;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _299) -> [return: bb116, unwind: bb284];
    }

    bb116: {
        StorageDead(_299);
        StorageDead(_297);
        _619 = discriminant(_292);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_287);
        _570 = const false;
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb242;
    }

    bb117: {
        StorageDead(_281);
        _279 = const ();
        goto -> bb118;
    }

    bb118: {
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &(*_26);
        _302 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _303) -> [return: bb119, unwind: bb265];
    }

    bb119: {
        StorageDead(_303);
        _569 = const true;
        _301 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _302 };
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_110;
        _305 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _306) -> [return: bb120, unwind: bb283];
    }

    bb120: {
        StorageDead(_306);
        StorageLive(_307);
        _569 = const false;
        _307 = move _301;
        _304 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _305, move _307) -> [return: bb121, unwind: bb283];
    }

    bb121: {
        StorageDead(_307);
        StorageDead(_305);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _568 = const true;
        _312 = move _304;
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = const b"user";
        _323 = &(*_324);
        _322 = move _323 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_323);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = &_65;
        _327 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _328) -> [return: bb122, unwind: bb281];
    }

    bb122: {
        StorageDead(_328);
        _558 = deref_copy ((*_327).0: &anchor_lang::prelude::Pubkey);
        _326 = &(*_558);
        _325 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _326) -> [return: bb123, unwind: bb281];
    }

    bb123: {
        StorageDead(_326);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = _7;
        _332 = core::num::<impl u16>::to_le_bytes(move _333) -> [return: bb124, unwind: bb281];
    }

    bb124: {
        _331 = &_332;
        StorageDead(_333);
        _330 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _331) -> [return: bb125, unwind: bb281];
    }

    bb125: {
        _329 = &(*_330);
        StorageDead(_331);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = _134;
        _338 = [move _339];
        _337 = &_338;
        StorageDead(_339);
        StorageLive(_340);
        _340 = RangeFull;
        _336 = <[u8; 1] as Index<RangeFull>>::index(move _337, move _340) -> [return: bb126, unwind: bb281];
    }

    bb126: {
        StorageDead(_340);
        StorageDead(_337);
        _335 = &(*_336);
        _334 = &(*_335);
        _321 = [move _322, move _325, move _329, move _334];
        _320 = &_321;
        StorageDead(_334);
        StorageDead(_329);
        StorageDead(_325);
        StorageDead(_322);
        StorageLive(_341);
        _341 = RangeFull;
        _319 = <[&[u8]; 4] as Index<RangeFull>>::index(move _320, move _341) -> [return: bb127, unwind: bb281];
    }

    bb127: {
        StorageDead(_341);
        StorageDead(_320);
        _318 = &(*_319);
        _317 = &(*_318);
        _316 = [move _317];
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = move _314 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_314);
        _568 = const false;
        _311 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _312, move _313) -> [return: bb128, unwind: bb281];
    }

    bb128: {
        StorageDead(_313);
        _568 = const false;
        StorageDead(_312);
        StorageLive(_342);
        StorageLive(_343);
        _343 = _175;
        _342 = move _343 as u64 (IntToInt);
        StorageDead(_343);
        _310 = anchor_lang::system_program::allocate(move _311, move _342) -> [return: bb129, unwind: bb283];
    }

    bb129: {
        StorageDead(_342);
        StorageDead(_311);
        _309 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _310) -> [return: bb130, unwind: bb283];
    }

    bb130: {
        StorageDead(_310);
        _344 = discriminant(_309);
        switchInt(move _344) -> [0: bb131, 1: bb132, otherwise: bb5];
    }

    bb131: {
        StorageLive(_348);
        _348 = ((_309 as Continue).0: ());
        _308 = _348;
        StorageDead(_348);
        _593 = discriminant(_309);
        StorageDead(_338);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_309);
        StorageDead(_308);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_26);
        _350 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _351) -> [return: bb134, unwind: bb283];
    }

    bb132: {
        StorageLive(_345);
        _345 = move ((_309 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_347);
        _347 = move _345;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _347) -> [return: bb133, unwind: bb279];
    }

    bb133: {
        StorageDead(_347);
        StorageDead(_345);
        _617 = discriminant(_309);
        StorageDead(_338);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_309);
        StorageDead(_308);
        goto -> bb241;
    }

    bb134: {
        StorageDead(_351);
        _567 = const true;
        _349 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _350 };
        StorageDead(_350);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &_110;
        _353 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _354) -> [return: bb135, unwind: bb278];
    }

    bb135: {
        StorageDead(_354);
        StorageLive(_355);
        _567 = const false;
        _355 = move _349;
        _352 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _353, move _355) -> [return: bb136, unwind: bb278];
    }

    bb136: {
        StorageDead(_355);
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _566 = const true;
        _360 = move _352;
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = const b"user";
        _371 = &(*_372);
        _370 = move _371 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_371);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &_65;
        _375 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _376) -> [return: bb137, unwind: bb276];
    }

    bb137: {
        StorageDead(_376);
        _559 = deref_copy ((*_375).0: &anchor_lang::prelude::Pubkey);
        _374 = &(*_559);
        _373 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _374) -> [return: bb138, unwind: bb276];
    }

    bb138: {
        StorageDead(_374);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = _7;
        _380 = core::num::<impl u16>::to_le_bytes(move _381) -> [return: bb139, unwind: bb276];
    }

    bb139: {
        _379 = &_380;
        StorageDead(_381);
        _378 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _379) -> [return: bb140, unwind: bb276];
    }

    bb140: {
        _377 = &(*_378);
        StorageDead(_379);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = _134;
        _386 = [move _387];
        _385 = &_386;
        StorageDead(_387);
        StorageLive(_388);
        _388 = RangeFull;
        _384 = <[u8; 1] as Index<RangeFull>>::index(move _385, move _388) -> [return: bb141, unwind: bb276];
    }

    bb141: {
        StorageDead(_388);
        StorageDead(_385);
        _383 = &(*_384);
        _382 = &(*_383);
        _369 = [move _370, move _373, move _377, move _382];
        _368 = &_369;
        StorageDead(_382);
        StorageDead(_377);
        StorageDead(_373);
        StorageDead(_370);
        StorageLive(_389);
        _389 = RangeFull;
        _367 = <[&[u8]; 4] as Index<RangeFull>>::index(move _368, move _389) -> [return: bb142, unwind: bb276];
    }

    bb142: {
        StorageDead(_389);
        StorageDead(_368);
        _366 = &(*_367);
        _365 = &(*_366);
        _364 = [move _365];
        StorageDead(_365);
        _363 = &_364;
        _362 = &(*_363);
        _361 = move _362 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_362);
        _566 = const false;
        _359 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _360, move _361) -> [return: bb143, unwind: bb276];
    }

    bb143: {
        StorageDead(_361);
        _566 = const false;
        StorageDead(_360);
        StorageLive(_390);
        _390 = &(*_1);
        _358 = anchor_lang::system_program::assign(move _359, move _390) -> [return: bb144, unwind: bb278];
    }

    bb144: {
        StorageDead(_390);
        StorageDead(_359);
        _357 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _358) -> [return: bb145, unwind: bb278];
    }

    bb145: {
        StorageDead(_358);
        _391 = discriminant(_357);
        switchInt(move _391) -> [0: bb146, 1: bb147, otherwise: bb5];
    }

    bb146: {
        StorageLive(_395);
        _395 = ((_357 as Continue).0: ());
        _356 = _395;
        StorageDead(_395);
        _595 = discriminant(_357);
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_357);
        StorageDead(_356);
        _185 = const ();
        StorageDead(_352);
        _567 = const false;
        StorageDead(_349);
        StorageDead(_304);
        _569 = const false;
        StorageDead(_301);
        StorageDead(_273);
        goto -> bb149;
    }

    bb147: {
        StorageLive(_392);
        _392 = move ((_357 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_394);
        _394 = move _392;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _394) -> [return: bb148, unwind: bb274];
    }

    bb148: {
        StorageDead(_394);
        StorageDead(_392);
        _615 = discriminant(_357);
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_352);
        _567 = const false;
        StorageDead(_349);
        goto -> bb241;
    }

    bb149: {
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &(*_1);
        StorageLive(_398);
        StorageLive(_399);
        _399 = &_26;
        _560 = deref_copy (*_399);
        _398 = &(*_560);
        _396 = anchor_lang::prelude::AccountLoader::<'_, User>::try_from_unchecked(move _397, move _398) -> [return: bb150, unwind: bb265];
    }

    bb150: {
        StorageDead(_398);
        StorageDead(_397);
        _400 = discriminant(_396);
        switchInt(move _400) -> [0: bb152, 1: bb151, otherwise: bb5];
    }

    bb151: {
        StorageLive(_402);
        _402 = move ((_396 as Err).0: anchor_lang::error::Error);
        StorageLive(_404);
        StorageLive(_405);
        _405 = move _402;
        _404 = anchor_lang::error::Error::with_account_name::<&str>(move _405, const "user") -> [return: bb153, unwind: bb273];
    }

    bb152: {
        StorageLive(_401);
        _401 = move ((_396 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _176 = move _401;
        StorageDead(_401);
        StorageDead(_183);
        _597 = discriminant(_396);
        StorageDead(_399);
        StorageDead(_396);
        goto -> bb159;
    }

    bb153: {
        StorageDead(_405);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _404);
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_183);
        _613 = discriminant(_396);
        StorageDead(_399);
        StorageDead(_396);
        goto -> bb244;
    }

    bb154: {
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &_26;
        _561 = deref_copy (*_408);
        _407 = &(*_561);
        _406 = anchor_lang::prelude::AccountLoader::<'_, User>::try_from(move _407) -> [return: bb155, unwind: bb265];
    }

    bb155: {
        StorageDead(_407);
        _409 = discriminant(_406);
        switchInt(move _409) -> [0: bb157, 1: bb156, otherwise: bb5];
    }

    bb156: {
        StorageLive(_411);
        _411 = move ((_406 as Err).0: anchor_lang::error::Error);
        StorageLive(_413);
        StorageLive(_414);
        _414 = move _411;
        _413 = anchor_lang::error::Error::with_account_name::<&str>(move _414, const "user") -> [return: bb158, unwind: bb272];
    }

    bb157: {
        StorageLive(_410);
        _410 = move ((_406 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _176 = move _410;
        StorageDead(_410);
        _599 = discriminant(_406);
        StorageDead(_408);
        StorageDead(_406);
        goto -> bb159;
    }

    bb158: {
        StorageDead(_414);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _413);
        StorageDead(_413);
        StorageDead(_411);
        _611 = discriminant(_406);
        StorageDead(_408);
        StorageDead(_406);
        goto -> bb244;
    }

    bb159: {
        StorageDead(_178);
        StorageDead(_177);
        StorageLive(_415);
        StorageLive(_416);
        _416 = const false;
        switchInt(move _416) -> [0: bb183, otherwise: bb160];
    }

    bb160: {
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = _175;
        StorageLive(_420);
        StorageLive(_421);
        _421 = &(*_171);
        _420 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _421) -> [return: bb161, unwind: bb265];
    }

    bb161: {
        StorageDead(_421);
        _418 = Ne(move _419, move _420);
        switchInt(move _418) -> [0: bb167, otherwise: bb162];
    }

    bb162: {
        StorageDead(_420);
        StorageDead(_419);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = ConstraintSpace;
        _425 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _426) -> [return: bb163, unwind: bb265];
    }

    bb163: {
        StorageDead(_426);
        _424 = anchor_lang::error::Error::with_account_name::<&str>(move _425, const "user") -> [return: bb164, unwind: bb265];
    }

    bb164: {
        _565 = const true;
        StorageDead(_425);
        StorageLive(_427);
        StorageLive(_428);
        _428 = _175;
        StorageLive(_429);
        StorageLive(_430);
        _430 = &(*_171);
        _429 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _430) -> [return: bb165, unwind: bb271];
    }

    bb165: {
        StorageDead(_430);
        _427 = (move _428, move _429);
        StorageDead(_429);
        StorageDead(_428);
        _565 = const false;
        _423 = anchor_lang::error::Error::with_values::<usize, usize>(move _424, move _427) -> [return: bb166, unwind: bb271];
    }

    bb166: {
        StorageDead(_427);
        _565 = const false;
        StorageDead(_424);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _423);
        StorageDead(_423);
        StorageDead(_418);
        StorageDead(_417);
        goto -> bb240;
    }

    bb167: {
        StorageDead(_420);
        StorageDead(_419);
        _417 = const ();
        StorageDead(_418);
        StorageDead(_417);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &_174;
        StorageLive(_434);
        _434 = &_1;
        _432 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _433, move _434) -> [return: bb168, unwind: bb265];
    }

    bb168: {
        switchInt(move _432) -> [0: bb173, otherwise: bb169];
    }

    bb169: {
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = ConstraintOwner;
        _438 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _439) -> [return: bb170, unwind: bb265];
    }

    bb170: {
        StorageDead(_439);
        _437 = anchor_lang::error::Error::with_account_name::<&str>(move _438, const "user") -> [return: bb171, unwind: bb265];
    }

    bb171: {
        StorageDead(_438);
        StorageLive(_440);
        StorageLive(_441);
        _441 = (*_174);
        StorageLive(_442);
        _442 = (*_1);
        _440 = (move _441, move _442);
        StorageDead(_442);
        StorageDead(_441);
        _436 = anchor_lang::error::Error::with_pubkeys(move _437, move _440) -> [return: bb172, unwind: bb265];
    }

    bb172: {
        StorageDead(_440);
        StorageDead(_437);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _436);
        StorageDead(_436);
        StorageDead(_432);
        StorageDead(_431);
        goto -> bb240;
    }

    bb173: {
        StorageDead(_434);
        StorageDead(_433);
        _431 = const ();
        StorageDead(_432);
        StorageDead(_431);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &_125;
        StorageLive(_445);
        _445 = _175;
        _443 = anchor_lang::prelude::Rent::minimum_balance(move _444, move _445) -> [return: bb174, unwind: bb265];
    }

    bb174: {
        StorageDead(_445);
        StorageDead(_444);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _450 = &_176;
        _449 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _450) -> [return: bb175, unwind: bb265];
    }

    bb175: {
        _448 = &_449;
        StorageDead(_450);
        _447 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _448) -> [return: bb176, unwind: bb261];
    }

    bb176: {
        StorageDead(_448);
        StorageLive(_451);
        _451 = _443;
        _446 = Lt(move _447, move _451);
        switchInt(move _446) -> [0: bb181, otherwise: bb177];
    }

    bb177: {
        StorageDead(_451);
        drop(_449) -> [return: bb178, unwind: bb265];
    }

    bb178: {
        StorageDead(_449);
        StorageDead(_447);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = ConstraintRentExempt;
        _454 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _455) -> [return: bb179, unwind: bb265];
    }

    bb179: {
        StorageDead(_455);
        _453 = anchor_lang::error::Error::with_account_name::<&str>(move _454, const "user") -> [return: bb180, unwind: bb265];
    }

    bb180: {
        StorageDead(_454);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _453);
        StorageDead(_453);
        StorageDead(_446);
        StorageDead(_443);
        goto -> bb240;
    }

    bb181: {
        StorageDead(_451);
        drop(_449) -> [return: bb182, unwind: bb265];
    }

    bb182: {
        StorageDead(_449);
        StorageDead(_447);
        _415 = const ();
        StorageDead(_446);
        StorageDead(_443);
        goto -> bb184;
    }

    bb183: {
        _415 = const ();
        goto -> bb184;
    }

    bb184: {
        StorageDead(_416);
        StorageDead(_415);
        _170 = move _176;
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_171);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &_170;
        _459 = &(*_460);
        _458 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _459) -> [return: bb185, unwind: bb265];
    }

    bb185: {
        StorageDead(_459);
        _457 = ((*_458).6: bool);
        switchInt(move _457) -> [0: bb186, otherwise: bb189];
    }

    bb186: {
        StorageDead(_460);
        StorageDead(_458);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = ConstraintMut;
        _463 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _464) -> [return: bb187, unwind: bb265];
    }

    bb187: {
        StorageDead(_464);
        _462 = anchor_lang::error::Error::with_account_name::<&str>(move _463, const "user") -> [return: bb188, unwind: bb265];
    }

    bb188: {
        StorageDead(_463);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _462);
        StorageDead(_462);
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb246;
    }

    bb189: {
        StorageDead(_460);
        StorageDead(_458);
        _456 = const ();
        StorageDead(_457);
        StorageDead(_456);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &_125;
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_170;
        _470 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _471) -> [return: bb190, unwind: bb265];
    }

    bb190: {
        _469 = &_470;
        StorageDead(_471);
        _468 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _469) -> [return: bb191, unwind: bb260];
    }

    bb191: {
        StorageDead(_469);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = &_170;
        _476 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _477) -> [return: bb192, unwind: bb260];
    }

    bb192: {
        _475 = &_476;
        StorageDead(_477);
        _474 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _475) -> [return: bb193, unwind: bb259];
    }

    bb193: {
        StorageDead(_475);
        _473 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _474) -> [return: bb194, unwind: bb259];
    }

    bb194: {
        _564 = const true;
        StorageDead(_474);
        _478 = discriminant(_473);
        switchInt(move _478) -> [0: bb195, 1: bb196, otherwise: bb5];
    }

    bb195: {
        StorageLive(_482);
        _482 = ((_473 as Continue).0: usize);
        _472 = _482;
        StorageDead(_482);
        _466 = anchor_lang::prelude::Rent::is_exempt(move _467, move _468, move _472) -> [return: bb198, unwind: bb269];
    }

    bb196: {
        StorageLive(_479);
        _479 = move ((_473 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_481);
        _481 = move _479;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _481) -> [return: bb197, unwind: bb269];
    }

    bb197: {
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_472);
        StorageDead(_468);
        StorageDead(_467);
        _609 = discriminant(_473);
        drop(_476) -> [return: bb237, unwind: bb260];
    }

    bb198: {
        switchInt(move _466) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        StorageDead(_472);
        StorageDead(_468);
        StorageDead(_467);
        _601 = discriminant(_473);
        drop(_476) -> [return: bb205, unwind: bb260];
    }

    bb200: {
        StorageDead(_472);
        StorageDead(_468);
        StorageDead(_467);
        _603 = discriminant(_473);
        drop(_476) -> [return: bb201, unwind: bb260];
    }

    bb201: {
        StorageDead(_476);
        _564 = const false;
        StorageDead(_473);
        drop(_470) -> [return: bb202, unwind: bb265];
    }

    bb202: {
        StorageDead(_470);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = ConstraintRentExempt;
        _485 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _486) -> [return: bb203, unwind: bb265];
    }

    bb203: {
        StorageDead(_486);
        _484 = anchor_lang::error::Error::with_account_name::<&str>(move _485, const "user") -> [return: bb204, unwind: bb265];
    }

    bb204: {
        StorageDead(_485);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _484);
        StorageDead(_484);
        goto -> bb239;
    }

    bb205: {
        StorageDead(_476);
        _564 = const false;
        StorageDead(_473);
        drop(_470) -> [return: bb206, unwind: bb265];
    }

    bb206: {
        StorageDead(_470);
        _465 = const ();
        StorageDead(_466);
        StorageDead(_465);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _491 = &_35;
        _490 = &(*_491);
        _489 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _490) -> [return: bb207, unwind: bb265];
    }

    bb207: {
        StorageDead(_490);
        _488 = ((*_489).6: bool);
        switchInt(move _488) -> [0: bb208, otherwise: bb211];
    }

    bb208: {
        StorageDead(_491);
        StorageDead(_489);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = ConstraintMut;
        _494 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _495) -> [return: bb209, unwind: bb265];
    }

    bb209: {
        StorageDead(_495);
        _493 = anchor_lang::error::Error::with_account_name::<&str>(move _494, const "user_stats") -> [return: bb210, unwind: bb265];
    }

    bb210: {
        StorageDead(_494);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _493);
        StorageDead(_493);
        StorageDead(_488);
        StorageDead(_487);
        goto -> bb246;
    }

    bb211: {
        StorageDead(_491);
        StorageDead(_489);
        _487 = const ();
        StorageDead(_488);
        StorageDead(_487);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &_35;
        _502 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _503) -> [return: bb212, unwind: bb265];
    }

    bb212: {
        StorageDead(_503);
        _501 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _502) -> [return: bb213, unwind: bb265];
    }

    bb213: {
        _562 = const true;
        _563 = const true;
        StorageDead(_502);
        _504 = discriminant(_501);
        switchInt(move _504) -> [0: bb214, 1: bb215, otherwise: bb5];
    }

    bb214: {
        StorageLive(_508);
        _508 = move ((_501 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _500 = move _508;
        StorageDead(_508);
        _499 = &_500;
        _498 = <Ref<'_, UserStats> as Deref>::deref(move _499) -> [return: bb217, unwind: bb258];
    }

    bb215: {
        StorageLive(_505);
        _505 = move ((_501 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_507);
        _507 = move _505;
        _0 = <std::result::Result<instructions::user::InitializeUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _507) -> [return: bb216, unwind: bb268];
    }

    bb216: {
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_499);
        _607 = discriminant(_501);
        _562 = const false;
        _563 = const false;
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_498);
        goto -> bb236;
    }

    bb217: {
        StorageDead(_499);
        _497 = ((*_498).0: anchor_lang::prelude::Pubkey);
        drop(_500) -> [return: bb267, unwind: bb268];
    }

    bb218: {
        StorageDead(_510);
        StorageLive(_511);
        StorageLive(_512);
        _512 = &_497;
        StorageLive(_513);
        _513 = &_509;
        _511 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _512, move _513) -> [return: bb219, unwind: bb265];
    }

    bb219: {
        switchInt(move _511) -> [0: bb224, otherwise: bb220];
    }

    bb220: {
        StorageDead(_513);
        StorageDead(_512);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        _518 = ConstraintHasOne;
        _517 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _518) -> [return: bb221, unwind: bb265];
    }

    bb221: {
        StorageDead(_518);
        _516 = anchor_lang::error::Error::with_account_name::<&str>(move _517, const "user_stats") -> [return: bb222, unwind: bb265];
    }

    bb222: {
        StorageDead(_517);
        StorageLive(_519);
        StorageLive(_520);
        _520 = _497;
        StorageLive(_521);
        _521 = _509;
        _519 = (move _520, move _521);
        StorageDead(_521);
        StorageDead(_520);
        _515 = anchor_lang::error::Error::with_pubkeys(move _516, move _519) -> [return: bb223, unwind: bb265];
    }

    bb223: {
        StorageDead(_519);
        StorageDead(_516);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _515);
        StorageDead(_515);
        StorageDead(_511);
        StorageDead(_509);
        goto -> bb236;
    }

    bb224: {
        StorageDead(_513);
        StorageDead(_512);
        _496 = const ();
        StorageDead(_511);
        StorageDead(_509);
        StorageDead(_497);
        StorageDead(_496);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = &_50;
        _526 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _527) -> [return: bb225, unwind: bb265];
    }

    bb225: {
        _525 = &(*_526);
        StorageDead(_527);
        _524 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _525) -> [return: bb226, unwind: bb265];
    }

    bb226: {
        StorageDead(_525);
        _523 = ((*_524).6: bool);
        switchInt(move _523) -> [0: bb227, otherwise: bb230];
    }

    bb227: {
        StorageDead(_526);
        StorageDead(_524);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = ConstraintMut;
        _530 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _531) -> [return: bb228, unwind: bb265];
    }

    bb228: {
        StorageDead(_531);
        _529 = anchor_lang::error::Error::with_account_name::<&str>(move _530, const "state") -> [return: bb229, unwind: bb265];
    }

    bb229: {
        StorageDead(_530);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _529);
        StorageDead(_529);
        StorageDead(_523);
        StorageDead(_522);
        goto -> bb246;
    }

    bb230: {
        StorageDead(_526);
        StorageDead(_524);
        _522 = const ();
        StorageDead(_523);
        StorageDead(_522);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &_80;
        _535 = &(*_536);
        _534 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _535) -> [return: bb231, unwind: bb265];
    }

    bb231: {
        StorageDead(_535);
        _533 = ((*_534).6: bool);
        switchInt(move _533) -> [0: bb232, otherwise: bb235];
    }

    bb232: {
        StorageDead(_536);
        StorageDead(_534);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        _540 = ConstraintMut;
        _539 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _540) -> [return: bb233, unwind: bb265];
    }

    bb233: {
        StorageDead(_540);
        _538 = anchor_lang::error::Error::with_account_name::<&str>(move _539, const "payer") -> [return: bb234, unwind: bb265];
    }

    bb234: {
        StorageDead(_539);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Err(move _538);
        StorageDead(_538);
        StorageDead(_533);
        StorageDead(_532);
        goto -> bb246;
    }

    bb235: {
        StorageDead(_536);
        StorageDead(_534);
        _532 = const ();
        StorageDead(_533);
        StorageDead(_532);
        StorageLive(_541);
        StorageLive(_542);
        _542 = move _170;
        StorageLive(_543);
        _543 = move _35;
        StorageLive(_544);
        _544 = move _50;
        StorageLive(_545);
        _545 = move _65;
        StorageLive(_546);
        _546 = move _80;
        StorageLive(_547);
        _547 = move _95;
        StorageLive(_548);
        _548 = move _110;
        _541 = instructions::user::InitializeUser::<'_> { user: move _542, user_stats: move _543, state: move _544, authority: move _545, payer: move _546, rent: move _547, system_program: move _548 };
        StorageDead(_548);
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_545);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_542);
        _0 = std::result::Result::<instructions::user::InitializeUser<'_>, anchor_lang::error::Error>::Ok(move _541);
        StorageDead(_541);
        StorageDead(_170);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_125);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb257;
    }

    bb236: {
        StorageDead(_497);
        StorageDead(_496);
        goto -> bb246;
    }

    bb237: {
        StorageDead(_476);
        _564 = const false;
        StorageDead(_473);
        drop(_470) -> [return: bb238, unwind: bb265];
    }

    bb238: {
        StorageDead(_470);
        goto -> bb239;
    }

    bb239: {
        StorageDead(_466);
        StorageDead(_465);
        goto -> bb246;
    }

    bb240: {
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb245;
    }

    bb241: {
        StorageDead(_304);
        _569 = const false;
        StorageDead(_301);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_273);
        goto -> bb243;
    }

    bb243: {
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_178);
        StorageDead(_177);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_171);
        goto -> bb246;
    }

    bb246: {
        StorageDead(_170);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_125);
        goto -> bb249;
    }

    bb249: {
        StorageDead(_110);
        goto -> bb250;
    }

    bb250: {
        StorageDead(_95);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_80);
        goto -> bb252;
    }

    bb252: {
        StorageDead(_65);
        drop(_50) -> [return: bb253, unwind: bb266];
    }

    bb253: {
        StorageDead(_50);
        goto -> bb254;
    }

    bb254: {
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb255;
    }

    bb255: {
        StorageDead(_7);
        goto -> bb256;
    }

    bb256: {
        StorageDead(_6);
        goto -> bb257;
    }

    bb257: {
        return;
    }

    bb258 (cleanup): {
        drop(_500) -> [return: bb268, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        drop(_476) -> [return: bb260, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        drop(_470) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        drop(_449) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        drop(_283) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        drop(_256) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        drop(_193) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        drop(_50) -> [return: bb266, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        resume;
    }

    bb267: {
        _605 = discriminant(_501);
        _562 = const false;
        _563 = const false;
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_498);
        StorageLive(_509);
        StorageLive(_510);
        _510 = &_65;
        _509 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _510) -> [return: bb218, unwind: bb265];
    }

    bb268 (cleanup): {
        _637 = discriminant(_501);
        goto -> bb265;
    }

    bb269 (cleanup): {
        _638 = discriminant(_473);
        goto -> bb259;
    }

    bb270 (cleanup): {
        drop(_424) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        switchInt(_565) -> [0: bb265, otherwise: bb270];
    }

    bb272 (cleanup): {
        _639 = discriminant(_406);
        goto -> bb265;
    }

    bb273 (cleanup): {
        _640 = discriminant(_396);
        goto -> bb265;
    }

    bb274 (cleanup): {
        _641 = discriminant(_357);
        goto -> bb278;
    }

    bb275 (cleanup): {
        drop(_360) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        switchInt(_566) -> [0: bb278, otherwise: bb275];
    }

    bb277 (cleanup): {
        drop(_349) -> [return: bb283, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        switchInt(_567) -> [0: bb283, otherwise: bb277];
    }

    bb279 (cleanup): {
        _642 = discriminant(_309);
        goto -> bb283;
    }

    bb280 (cleanup): {
        drop(_312) -> [return: bb283, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        switchInt(_568) -> [0: bb283, otherwise: bb280];
    }

    bb282 (cleanup): {
        drop(_301) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        switchInt(_569) -> [0: bb265, otherwise: bb282];
    }

    bb284 (cleanup): {
        _643 = discriminant(_292);
        goto -> bb286;
    }

    bb285 (cleanup): {
        drop(_282) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        switchInt(_570) -> [0: bb265, otherwise: bb285];
    }

    bb287 (cleanup): {
        drop(_254) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb288 (cleanup): {
        switchInt(_571) -> [0: bb265, otherwise: bb287];
    }

    bb289 (cleanup): {
        _644 = discriminant(_202);
        goto -> bb293;
    }

    bb290 (cleanup): {
        drop(_205) -> [return: bb293, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        switchInt(_572) -> [0: bb293, otherwise: bb290];
    }

    bb292 (cleanup): {
        drop(_192) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        switchInt(_573) -> [0: bb265, otherwise: bb292];
    }

    bb294 (cleanup): {
        drop(_163) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        switchInt(_574) -> [0: bb265, otherwise: bb294];
    }

    bb296 (cleanup): {
        _645 = discriminant(_126);
        goto -> bb265;
    }

    bb297 (cleanup): {
        _646 = discriminant(_111);
        goto -> bb265;
    }

    bb298 (cleanup): {
        _647 = discriminant(_96);
        goto -> bb265;
    }

    bb299 (cleanup): {
        _648 = discriminant(_81);
        goto -> bb265;
    }

    bb300 (cleanup): {
        _649 = discriminant(_66);
        goto -> bb265;
    }

    bb301 (cleanup): {
        _650 = discriminant(_51);
        goto -> bb266;
    }

    bb302 (cleanup): {
        _651 = discriminant(_36);
        goto -> bb266;
    }
}

alloc294 (size: 4, align: 1) {
    75 73 65 72                                     │ user
}

alloc293 (size: 4, align: 1) {
    75 73 65 72                                     │ user
}

alloc292 (size: 4, align: 1) {
    75 73 65 72                                     │ user
}

alloc291 (size: 4, align: 1) {
    75 73 65 72                                     │ user
}
