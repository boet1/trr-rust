// MIR for `controller::liquidation::liquidate_perp_pnl_for_deposit` after PreCodegen

fn controller::liquidation::liquidate_perp_pnl_for_deposit(_1: u16, _2: u16, _3: u128, _4: Option<u64>, _5: &mut User, _6: &anchor_lang::prelude::Pubkey, _7: &mut User, _8: &anchor_lang::prelude::Pubkey, _9: &PerpMarketMap<'_>, _10: &SpotMarketMap<'_>, _11: &mut OracleMap<'_>, _12: i64, _13: u64, _14: u32, _15: u128, _16: u128) -> std::result::Result<(), error::ErrorCode> {
    debug perp_market_index => _1;
    debug asset_market_index => _2;
    debug liquidator_max_pnl_transfer => _3;
    debug limit_price => _4;
    debug user => _5;
    debug user_key => _6;
    debug liquidator => _7;
    debug liquidator_key => _8;
    debug perp_market_map => _9;
    debug spot_market_map => _10;
    debug oracle_map => _11;
    debug now => _12;
    debug slot => _13;
    debug liquidation_margin_buffer_ratio => _14;
    debug initial_pct_to_liquidate => _15;
    debug liquidation_duration => _16;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _17: ();
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _19: std::result::Result<(), error::ErrorCode>;
    let mut _20: bool;
    let mut _21: &state::user::User;
    let mut _22: ();
    let _23: error::ErrorCode;
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: &std::string::String;
    let _47: &std::string::String;
    let _48: std::string::String;
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let mut _52: &[&str; 1];
    let _53: &[&str; 1];
    let _54: [&str; 1];
    let mut _55: error::ErrorCode;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let _61: ();
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _63: std::result::Result<(), error::ErrorCode>;
    let mut _64: bool;
    let mut _65: &state::user::User;
    let mut _66: ();
    let _67: error::ErrorCode;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &error::ErrorCode;
    let _86: &error::ErrorCode;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: &std::string::String;
    let _91: &std::string::String;
    let _92: std::string::String;
    let mut _94: std::fmt::Arguments<'_>;
    let mut _95: &[&str];
    let mut _96: &[&str; 1];
    let _97: &[&str; 1];
    let _98: [&str; 1];
    let mut _99: error::ErrorCode;
    let mut _100: isize;
    let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: ();
    let _105: ();
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _107: std::result::Result<(), error::ErrorCode>;
    let mut _108: bool;
    let mut _109: u8;
    let mut _110: ();
    let _111: error::ErrorCode;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 2];
    let _122: &[&str; 2];
    let _123: [&str; 2];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: [core::fmt::rt::Argument<'_>; 1];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &error::ErrorCode;
    let _130: &error::ErrorCode;
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 2];
    let _141: &[&str; 2];
    let _142: [&str; 2];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: [core::fmt::rt::Argument<'_>; 1];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &u8;
    let _149: &u8;
    let mut _150: error::ErrorCode;
    let mut _151: isize;
    let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _155: ();
    let _156: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _158: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _159: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _160: &u16;
    let _161: &u16;
    let mut _162: isize;
    let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _166: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _167: ();
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _169: std::result::Result<(), error::ErrorCode>;
    let mut _170: bool;
    let mut _171: &state::spot_market::SpotMarket;
    let _172: &state::spot_market::SpotMarket;
    let mut _173: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _174: state::paused_operations::SpotOperation;
    let mut _175: ();
    let _177: ();
    let mut _178: &str;
    let _179: &str;
    let mut _180: &std::string::String;
    let _181: &std::string::String;
    let _182: std::string::String;
    let mut _184: std::fmt::Arguments<'_>;
    let mut _185: &[&str];
    let mut _186: &[&str; 2];
    let _187: &[&str; 2];
    let _188: [&str; 2];
    let mut _189: &[core::fmt::rt::Argument<'_>];
    let mut _190: &[core::fmt::rt::Argument<'_>; 1];
    let _191: &[core::fmt::rt::Argument<'_>; 1];
    let _192: [core::fmt::rt::Argument<'_>; 1];
    let mut _193: core::fmt::rt::Argument<'_>;
    let mut _194: &error::ErrorCode;
    let _195: &error::ErrorCode;
    let _196: ();
    let mut _197: &str;
    let _198: &str;
    let mut _199: &std::string::String;
    let _200: &std::string::String;
    let _201: std::string::String;
    let mut _203: std::fmt::Arguments<'_>;
    let mut _204: &[&str];
    let mut _205: &[&str; 1];
    let _206: &[&str; 1];
    let _207: [&str; 1];
    let mut _208: &[core::fmt::rt::Argument<'_>];
    let mut _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: &[core::fmt::rt::Argument<'_>; 1];
    let _211: [core::fmt::rt::Argument<'_>; 1];
    let mut _212: core::fmt::rt::Argument<'_>;
    let mut _213: &u16;
    let _214: &u16;
    let mut _215: error::ErrorCode;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _221: ();
    let mut _222: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _225: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _226: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _227: &u16;
    let _228: &u16;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _234: ();
    let mut _235: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _236: std::result::Result<(), error::ErrorCode>;
    let mut _237: bool;
    let mut _238: &state::perp_market::PerpMarket;
    let _239: &state::perp_market::PerpMarket;
    let mut _240: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _241: state::paused_operations::PerpOperation;
    let mut _242: ();
    let _244: ();
    let mut _245: &str;
    let _246: &str;
    let mut _247: &std::string::String;
    let _248: &std::string::String;
    let _249: std::string::String;
    let mut _251: std::fmt::Arguments<'_>;
    let mut _252: &[&str];
    let mut _253: &[&str; 2];
    let _254: &[&str; 2];
    let _255: [&str; 2];
    let mut _256: &[core::fmt::rt::Argument<'_>];
    let mut _257: &[core::fmt::rt::Argument<'_>; 1];
    let _258: &[core::fmt::rt::Argument<'_>; 1];
    let _259: [core::fmt::rt::Argument<'_>; 1];
    let mut _260: core::fmt::rt::Argument<'_>;
    let mut _261: &error::ErrorCode;
    let _262: &error::ErrorCode;
    let _263: ();
    let mut _264: &str;
    let _265: &str;
    let mut _266: &std::string::String;
    let _267: &std::string::String;
    let _268: std::string::String;
    let mut _270: std::fmt::Arguments<'_>;
    let mut _271: &[&str];
    let mut _272: &[&str; 1];
    let _273: &[&str; 1];
    let _274: [&str; 1];
    let mut _275: &[core::fmt::rt::Argument<'_>];
    let mut _276: &[core::fmt::rt::Argument<'_>; 1];
    let _277: &[core::fmt::rt::Argument<'_>; 1];
    let _278: [core::fmt::rt::Argument<'_>; 1];
    let mut _279: core::fmt::rt::Argument<'_>;
    let mut _280: &u16;
    let _281: &u16;
    let mut _282: error::ErrorCode;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _288: ();
    let mut _289: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _290: &state::user::PerpPosition;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _292: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _293: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _294: &state::user::User;
    let mut _295: u16;
    let mut _296: {closure@programs/drift/src/controller/liquidation.rs:2823:55: 2823:58};
    let mut _297: &u16;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _303: &state::user::SpotPosition;
    let mut _304: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _305: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _306: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _307: &state::user::User;
    let mut _308: u16;
    let mut _309: {closure@programs/drift/src/controller/liquidation.rs:2831:56: 2831:59};
    let mut _310: &u16;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _316: &mut state::user::PerpPosition;
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _318: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _319: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _320: &mut state::user::User;
    let mut _321: u16;
    let mut _322: {closure@programs/drift/src/controller/liquidation.rs:2841:18: 2841:21};
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _328: &mut state::user::SpotPosition;
    let mut _329: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _330: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _331: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _332: &mut state::user::User;
    let mut _333: u16;
    let mut _334: {closure@programs/drift/src/controller/liquidation.rs:2848:18: 2848:21};
    let mut _335: isize;
    let mut _337: !;
    let mut _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _340: ();
    let mut _341: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _342: std::result::Result<(), error::ErrorCode>;
    let mut _343: &mut state::user::User;
    let mut _344: &anchor_lang::prelude::Pubkey;
    let mut _345: &mut state::perp_market::PerpMarket;
    let mut _346: &mut state::perp_market::PerpMarket;
    let mut _347: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _348: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _350: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _351: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _352: &u16;
    let _353: &u16;
    let mut _354: isize;
    let mut _356: !;
    let mut _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _359: i64;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _365: ();
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _367: std::result::Result<(), error::ErrorCode>;
    let mut _368: &mut state::user::User;
    let mut _369: &anchor_lang::prelude::Pubkey;
    let mut _370: &mut state::perp_market::PerpMarket;
    let mut _371: &mut state::perp_market::PerpMarket;
    let mut _372: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _373: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _375: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _376: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _377: &u16;
    let _378: &u16;
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _384: i64;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _396: (u128, i64, state::spot_market::AssetTier, u32, u32, u32);
    let mut _398: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _399: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _400: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _401: &u16;
    let _402: &u16;
    let mut _403: isize;
    let mut _405: !;
    let mut _406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _410: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _411: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails)>;
    let mut _412: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let mut _413: &mut state::oracle_map::OracleMap<'_>;
    let mut _414: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _415: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _416: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _417: &state::spot_market::SpotMarket;
    let _418: &state::spot_market::SpotMarket;
    let mut _419: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _420: isize;
    let mut _422: !;
    let mut _423: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _425: ();
    let mut _426: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _427: std::result::Result<(), error::ErrorCode>;
    let mut _428: &mut state::spot_market::SpotMarket;
    let mut _429: &mut state::spot_market::SpotMarket;
    let mut _430: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _431: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _432: &state::oracle::OraclePriceData;
    let mut _433: &state::state::ValidityGuardRails;
    let mut _434: i64;
    let mut _435: std::option::Option<math::oracle::DriftAction>;
    let mut _436: math::oracle::DriftAction;
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _444: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _445: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _446: &state::user::User;
    let mut _447: u16;
    let mut _448: isize;
    let mut _450: !;
    let mut _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _453: ();
    let mut _454: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _455: std::result::Result<(), error::ErrorCode>;
    let mut _456: bool;
    let mut _457: &state::spot_market::SpotBalanceType;
    let mut _458: &state::spot_market::SpotBalanceType;
    let _459: state::spot_market::SpotBalanceType;
    let mut _460: ();
    let _462: ();
    let mut _463: &str;
    let _464: &str;
    let mut _465: &std::string::String;
    let _466: &std::string::String;
    let _467: std::string::String;
    let mut _469: std::fmt::Arguments<'_>;
    let mut _470: &[&str];
    let mut _471: &[&str; 2];
    let _472: &[&str; 2];
    let _473: [&str; 2];
    let mut _474: &[core::fmt::rt::Argument<'_>];
    let mut _475: &[core::fmt::rt::Argument<'_>; 1];
    let _476: &[core::fmt::rt::Argument<'_>; 1];
    let _477: [core::fmt::rt::Argument<'_>; 1];
    let mut _478: core::fmt::rt::Argument<'_>;
    let mut _479: &error::ErrorCode;
    let _480: &error::ErrorCode;
    let _481: ();
    let mut _482: &str;
    let _483: &str;
    let mut _484: error::ErrorCode;
    let mut _485: isize;
    let mut _487: !;
    let mut _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _491: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _492: std::result::Result<u128, error::ErrorCode>;
    let mut _493: &state::user::SpotPosition;
    let mut _494: &state::spot_market::SpotMarket;
    let _495: &state::spot_market::SpotMarket;
    let mut _496: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _497: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _498: isize;
    let mut _500: !;
    let mut _501: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _503: ();
    let mut _504: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _505: std::result::Result<(), error::ErrorCode>;
    let mut _506: bool;
    let mut _507: u128;
    let mut _508: ();
    let _510: ();
    let mut _511: &str;
    let _512: &str;
    let mut _513: &std::string::String;
    let _514: &std::string::String;
    let _515: std::string::String;
    let mut _517: std::fmt::Arguments<'_>;
    let mut _518: &[&str];
    let mut _519: &[&str; 2];
    let _520: &[&str; 2];
    let _521: [&str; 2];
    let mut _522: &[core::fmt::rt::Argument<'_>];
    let mut _523: &[core::fmt::rt::Argument<'_>; 1];
    let _524: &[core::fmt::rt::Argument<'_>; 1];
    let _525: [core::fmt::rt::Argument<'_>; 1];
    let mut _526: core::fmt::rt::Argument<'_>;
    let mut _527: &error::ErrorCode;
    let _528: &error::ErrorCode;
    let _529: ();
    let mut _530: &str;
    let _531: &str;
    let mut _532: &std::string::String;
    let _533: &std::string::String;
    let _534: std::string::String;
    let mut _536: std::fmt::Arguments<'_>;
    let mut _537: &[&str];
    let mut _538: &[&str; 1];
    let _539: &[&str; 1];
    let _540: [&str; 1];
    let mut _541: &[core::fmt::rt::Argument<'_>];
    let mut _542: &[core::fmt::rt::Argument<'_>; 1];
    let _543: &[core::fmt::rt::Argument<'_>; 1];
    let _544: [core::fmt::rt::Argument<'_>; 1];
    let mut _545: core::fmt::rt::Argument<'_>;
    let mut _546: &u16;
    let _547: &u16;
    let mut _548: error::ErrorCode;
    let mut _549: isize;
    let mut _551: !;
    let mut _552: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _554: u128;
    let mut _555: i64;
    let mut _556: state::spot_market::AssetTier;
    let mut _557: &state::spot_market::SpotMarket;
    let mut _558: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _559: u32;
    let mut _560: &state::spot_market::SpotMarket;
    let mut _561: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _562: u32;
    let mut _563: &state::spot_market::SpotMarket;
    let mut _564: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _565: u32;
    let mut _566: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _567: std::result::Result<u32, error::ErrorCode>;
    let mut _568: u32;
    let mut _569: &state::spot_market::SpotMarket;
    let mut _570: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _571: math::liquidation::LiquidationMultiplierType;
    let mut _572: isize;
    let mut _574: !;
    let mut _575: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _583: (u128, i64, state::perp_market::ContractTier, u32, u32, u32);
    let mut _585: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _586: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _587: &state::user::User;
    let mut _588: u16;
    let mut _589: isize;
    let mut _591: !;
    let mut _592: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _595: ();
    let mut _596: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _597: std::result::Result<(), error::ErrorCode>;
    let mut _598: bool;
    let mut _599: i64;
    let mut _600: ();
    let _602: ();
    let mut _603: &str;
    let _604: &str;
    let mut _605: &std::string::String;
    let _606: &std::string::String;
    let _607: std::string::String;
    let mut _609: std::fmt::Arguments<'_>;
    let mut _610: &[&str];
    let mut _611: &[&str; 2];
    let _612: &[&str; 2];
    let _613: [&str; 2];
    let mut _614: &[core::fmt::rt::Argument<'_>];
    let mut _615: &[core::fmt::rt::Argument<'_>; 1];
    let _616: &[core::fmt::rt::Argument<'_>; 1];
    let _617: [core::fmt::rt::Argument<'_>; 1];
    let mut _618: core::fmt::rt::Argument<'_>;
    let mut _619: &error::ErrorCode;
    let _620: &error::ErrorCode;
    let _621: ();
    let mut _622: &str;
    let _623: &str;
    let mut _624: &std::string::String;
    let _625: &std::string::String;
    let _626: std::string::String;
    let mut _628: std::fmt::Arguments<'_>;
    let mut _629: &[&str];
    let mut _630: &[&str; 2];
    let _631: &[&str; 2];
    let _632: [&str; 2];
    let mut _633: &[core::fmt::rt::Argument<'_>];
    let mut _634: &[core::fmt::rt::Argument<'_>; 1];
    let _635: &[core::fmt::rt::Argument<'_>; 1];
    let _636: [core::fmt::rt::Argument<'_>; 1];
    let mut _637: core::fmt::rt::Argument<'_>;
    let mut _638: &i64;
    let _639: &i64;
    let mut _640: error::ErrorCode;
    let mut _641: isize;
    let mut _643: !;
    let mut _644: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _647: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _648: std::result::Result<i128, error::ErrorCode>;
    let mut _649: i64;
    let mut _650: isize;
    let mut _652: !;
    let mut _653: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _655: ();
    let mut _656: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _657: std::result::Result<(), error::ErrorCode>;
    let mut _658: bool;
    let mut _659: i128;
    let mut _660: ();
    let _662: ();
    let mut _663: &str;
    let _664: &str;
    let mut _665: &std::string::String;
    let _666: &std::string::String;
    let _667: std::string::String;
    let mut _669: std::fmt::Arguments<'_>;
    let mut _670: &[&str];
    let mut _671: &[&str; 2];
    let _672: &[&str; 2];
    let _673: [&str; 2];
    let mut _674: &[core::fmt::rt::Argument<'_>];
    let mut _675: &[core::fmt::rt::Argument<'_>; 1];
    let _676: &[core::fmt::rt::Argument<'_>; 1];
    let _677: [core::fmt::rt::Argument<'_>; 1];
    let mut _678: core::fmt::rt::Argument<'_>;
    let mut _679: &error::ErrorCode;
    let _680: &error::ErrorCode;
    let _681: ();
    let mut _682: &str;
    let _683: &str;
    let mut _684: error::ErrorCode;
    let mut _685: isize;
    let mut _687: !;
    let mut _688: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _691: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _692: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _693: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _694: &u16;
    let _695: &u16;
    let mut _696: isize;
    let mut _698: !;
    let mut _699: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _702: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _703: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _704: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _705: &u16;
    let _706: &u16;
    let _707: &state::perp_market::PerpMarket;
    let mut _708: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _709: isize;
    let mut _711: !;
    let mut _712: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _715: &state::oracle::OraclePriceData;
    let mut _716: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _717: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _718: &mut state::oracle_map::OracleMap<'_>;
    let mut _719: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _720: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _721: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _722: &state::spot_market::SpotMarket;
    let _723: &state::spot_market::SpotMarket;
    let mut _724: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _725: isize;
    let mut _727: !;
    let mut _728: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _730: u128;
    let mut _731: i128;
    let mut _732: i64;
    let mut _733: state::perp_market::ContractTier;
    let mut _734: &state::perp_market::PerpMarket;
    let mut _735: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _736: u32;
    let mut _737: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _738: std::result::Result<u32, error::ErrorCode>;
    let mut _739: u32;
    let mut _740: &state::perp_market::PerpMarket;
    let mut _741: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _742: math::liquidation::LiquidationMultiplierType;
    let mut _743: isize;
    let mut _745: !;
    let mut _746: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _749: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _750: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _751: &state::user::User;
    let mut _752: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _753: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _754: &mut state::oracle_map::OracleMap<'_>;
    let mut _755: state::margin_calculation::MarginContext;
    let mut _756: u32;
    let mut _757: isize;
    let mut _759: !;
    let mut _760: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _762: ();
    let mut _763: bool;
    let mut _764: &state::user::User;
    let mut _765: bool;
    let mut _766: &state::margin_calculation::MarginCalculation;
    let mut _767: !;
    let _768: ();
    let mut _769: &str;
    let _770: &str;
    let mut _771: &std::string::String;
    let _772: &std::string::String;
    let _773: std::string::String;
    let mut _775: std::fmt::Arguments<'_>;
    let mut _776: &[&str];
    let mut _777: &[&str; 1];
    let _778: &[&str; 1];
    let _779: [&str; 1];
    let mut _780: &[core::fmt::rt::Argument<'_>];
    let mut _781: &[core::fmt::rt::Argument<'_>; 1];
    let _782: &[core::fmt::rt::Argument<'_>; 1];
    let _783: [core::fmt::rt::Argument<'_>; 1];
    let mut _784: core::fmt::rt::Argument<'_>;
    let mut _785: &state::margin_calculation::MarginCalculation;
    let _786: &state::margin_calculation::MarginCalculation;
    let mut _787: error::ErrorCode;
    let mut _788: bool;
    let mut _789: &state::user::User;
    let mut _790: bool;
    let mut _791: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _792: std::result::Result<bool, error::ErrorCode>;
    let mut _793: &state::margin_calculation::MarginCalculation;
    let mut _794: isize;
    let mut _796: !;
    let mut _797: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _799: !;
    let _800: ();
    let mut _801: &mut state::user::User;
    let mut _802: ();
    let mut _804: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _805: std::result::Result<u16, error::ErrorCode>;
    let mut _806: &mut state::user::User;
    let mut _807: u64;
    let mut _808: isize;
    let mut _810: !;
    let mut _811: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _815: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _816: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _817: &mut state::user::User;
    let mut _818: &anchor_lang::prelude::Pubkey;
    let mut _819: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _820: &anchor_lang::prelude::Pubkey;
    let mut _821: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _822: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _823: &mut state::oracle_map::OracleMap<'_>;
    let mut _824: i64;
    let mut _825: u64;
    let mut _826: state::events::OrderActionExplanation;
    let mut _827: std::option::Option<state::user::MarketType>;
    let mut _828: std::option::Option<u16>;
    let mut _829: std::option::Option<controller::position::PositionDirection>;
    let mut _830: isize;
    let mut _832: !;
    let mut _833: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _837: (state::spot_market::AssetTier, state::perp_market::ContractTier);
    let mut _838: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (state::spot_market::AssetTier, state::perp_market::ContractTier)>;
    let mut _839: std::result::Result<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode>;
    let mut _840: &state::user::User;
    let mut _841: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _842: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _843: isize;
    let mut _845: !;
    let mut _846: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _849: bool;
    let mut _850: &state::perp_market::ContractTier;
    let mut _851: &state::perp_market::ContractTier;
    let _852: &state::perp_market::ContractTier;
    let mut _853: &state::spot_market::AssetTier;
    let _854: &state::spot_market::AssetTier;
    let mut _856: bool;
    let mut _857: &std::vec::Vec<u32>;
    let mut _859: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _860: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _861: &state::user::User;
    let mut _862: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _863: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _864: &mut state::oracle_map::OracleMap<'_>;
    let mut _865: state::margin_calculation::MarginContext;
    let mut _866: u32;
    let mut _867: isize;
    let mut _869: !;
    let mut _870: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _873: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _874: std::result::Result<u128, error::ErrorCode>;
    let mut _875: &state::margin_calculation::MarginCalculation;
    let mut _876: isize;
    let mut _878: !;
    let mut _879: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _882: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _883: std::result::Result<u128, error::ErrorCode>;
    let mut _884: &state::margin_calculation::MarginCalculation;
    let mut _885: isize;
    let mut _887: !;
    let mut _888: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _890: u64;
    let mut _891: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _892: std::result::Result<u64, error::ErrorCode>;
    let mut _893: u128;
    let mut _894: u128;
    let mut _895: u128;
    let mut _896: isize;
    let mut _898: !;
    let mut _899: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _901: ();
    let mut _902: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _903: std::result::Result<(), error::ErrorCode>;
    let mut _904: &mut state::user::User;
    let mut _905: u64;
    let mut _906: isize;
    let mut _908: !;
    let mut _909: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _912: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _913: std::result::Result<bool, error::ErrorCode>;
    let mut _914: &state::margin_calculation::MarginCalculation;
    let mut _915: isize;
    let mut _917: !;
    let mut _918: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _920: ();
    let mut _921: bool;
    let mut _922: bool;
    let mut _923: !;
    let mut _925: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _926: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _927: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _928: &u16;
    let _929: &u16;
    let mut _930: isize;
    let mut _932: !;
    let mut _933: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _936: &state::oracle::OraclePriceData;
    let mut _937: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _938: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _939: &mut state::oracle_map::OracleMap<'_>;
    let mut _940: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _941: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _942: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _943: &state::perp_market::PerpMarket;
    let _944: &state::perp_market::PerpMarket;
    let mut _945: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _946: isize;
    let mut _948: !;
    let mut _949: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _951: ();
    let _952: ();
    let mut _953: &[&[u8]];
    let mut _954: &[&[u8]; 1];
    let _955: &[&[u8]; 1];
    let _956: [&[u8]; 1];
    let mut _957: &[u8];
    let _958: &[u8];
    let mut _959: &std::vec::Vec<u8>;
    let _960: &std::vec::Vec<u8>;
    let _961: std::vec::Vec<u8>;
    let mut _962: &state::events::LiquidationRecord;
    let _963: &state::events::LiquidationRecord;
    let _964: state::events::LiquidationRecord;
    let mut _965: i64;
    let mut _966: u16;
    let mut _967: state::events::LiquidationType;
    let mut _968: anchor_lang::prelude::Pubkey;
    let mut _969: anchor_lang::prelude::Pubkey;
    let mut _970: u128;
    let mut _971: i128;
    let mut _972: bool;
    let mut _973: &state::user::User;
    let mut _974: std::vec::Vec<u32>;
    let mut _975: u64;
    let mut _976: state::events::LiquidatePerpPnlForDepositRecord;
    let mut _977: u16;
    let mut _978: i64;
    let mut _979: u16;
    let mut _980: i64;
    let mut _981: state::events::LiquidationRecord;
    let _982: ();
    let mut _983: bool;
    let _984: ();
    let mut _985: &mut state::user::User;
    let mut _986: bool;
    let _987: ();
    let mut _988: &str;
    let _989: &str;
    let mut _990: &std::string::String;
    let _991: &std::string::String;
    let _992: std::string::String;
    let mut _994: std::fmt::Arguments<'_>;
    let mut _995: &[&str];
    let mut _996: &[&str; 3];
    let _997: &[&str; 3];
    let _998: [&str; 3];
    let mut _999: &[core::fmt::rt::Argument<'_>];
    let mut _1000: &[core::fmt::rt::Argument<'_>; 3];
    let _1001: &[core::fmt::rt::Argument<'_>; 3];
    let _1002: [core::fmt::rt::Argument<'_>; 3];
    let mut _1003: core::fmt::rt::Argument<'_>;
    let mut _1004: &state::perp_market::ContractTier;
    let _1005: &state::perp_market::ContractTier;
    let mut _1006: core::fmt::rt::Argument<'_>;
    let mut _1007: &state::perp_market::ContractTier;
    let _1008: &state::perp_market::ContractTier;
    let mut _1009: core::fmt::rt::Argument<'_>;
    let mut _1010: &state::spot_market::AssetTier;
    let _1011: &state::spot_market::AssetTier;
    let mut _1012: ();
    let _1013: ();
    let mut _1014: bool;
    let mut _1015: !;
    let _1016: ();
    let mut _1017: &str;
    let _1018: &str;
    let mut _1019: &std::string::String;
    let _1020: &std::string::String;
    let _1021: std::string::String;
    let mut _1023: std::fmt::Arguments<'_>;
    let mut _1024: &[&str];
    let mut _1025: &[&str; 3];
    let _1026: &[&str; 3];
    let _1027: [&str; 3];
    let mut _1028: &[core::fmt::rt::Argument<'_>];
    let mut _1029: &[core::fmt::rt::Argument<'_>; 3];
    let _1030: &[core::fmt::rt::Argument<'_>; 3];
    let _1031: [core::fmt::rt::Argument<'_>; 3];
    let mut _1032: core::fmt::rt::Argument<'_>;
    let mut _1033: &state::perp_market::ContractTier;
    let _1034: &state::perp_market::ContractTier;
    let mut _1035: core::fmt::rt::Argument<'_>;
    let mut _1036: &state::perp_market::ContractTier;
    let _1037: &state::perp_market::ContractTier;
    let mut _1038: core::fmt::rt::Argument<'_>;
    let mut _1039: &state::spot_market::AssetTier;
    let _1040: &state::spot_market::AssetTier;
    let mut _1041: error::ErrorCode;
    let mut _1043: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1044: std::result::Result<u128, error::ErrorCode>;
    let mut _1045: &state::margin_calculation::MarginCalculation;
    let mut _1046: isize;
    let mut _1048: !;
    let mut _1049: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1052: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _1053: std::result::Result<u32, error::ErrorCode>;
    let mut _1054: u32;
    let mut _1055: u32;
    let mut _1056: isize;
    let mut _1058: !;
    let mut _1059: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1062: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1063: std::result::Result<u128, error::ErrorCode>;
    let mut _1064: u128;
    let mut _1065: u32;
    let mut _1066: u32;
    let mut _1067: u32;
    let mut _1068: u32;
    let mut _1069: u32;
    let mut _1070: i64;
    let mut _1071: isize;
    let mut _1073: !;
    let mut _1074: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1077: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1078: std::result::Result<u128, error::ErrorCode>;
    let mut _1079: &state::user::User;
    let mut _1080: u128;
    let mut _1081: u64;
    let mut _1082: u128;
    let mut _1083: u128;
    let mut _1084: isize;
    let mut _1086: !;
    let mut _1087: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1090: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1091: std::result::Result<u128, error::ErrorCode>;
    let mut _1092: u128;
    let mut _1093: u128;
    let mut _1094: u128;
    let mut _1095: isize;
    let mut _1097: !;
    let mut _1098: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1100: ();
    let mut _1101: bool;
    let mut _1102: u128;
    let mut _1103: !;
    let _1104: ();
    let mut _1105: &str;
    let _1106: &str;
    let mut _1107: ();
    let mut _1109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1110: std::result::Result<u128, error::ErrorCode>;
    let mut _1111: u128;
    let mut _1112: u32;
    let mut _1113: u32;
    let mut _1114: i64;
    let mut _1115: u32;
    let mut _1116: u32;
    let mut _1117: i64;
    let mut _1118: isize;
    let mut _1120: !;
    let mut _1121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1124: bool;
    let mut _1125: u128;
    let mut _1126: u128;
    let mut _1127: (u128, bool);
    let mut _1129: u128;
    let mut _1130: u128;
    let mut _1131: u128;
    let mut _1132: u128;
    let mut _1133: u128;
    let mut _1134: u128;
    let mut _1135: u128;
    let mut _1136: u128;
    let mut _1138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1139: std::result::Result<u128, error::ErrorCode>;
    let mut _1140: u128;
    let mut _1141: u32;
    let mut _1142: u32;
    let mut _1143: i64;
    let mut _1144: u128;
    let mut _1145: u32;
    let mut _1146: u32;
    let mut _1147: i64;
    let mut _1148: isize;
    let mut _1150: !;
    let mut _1151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1153: ();
    let mut _1154: bool;
    let mut _1155: u128;
    let mut _1156: bool;
    let mut _1157: u128;
    let mut _1158: !;
    let _1159: ();
    let mut _1160: &str;
    let _1161: &str;
    let mut _1162: &std::string::String;
    let _1163: &std::string::String;
    let _1164: std::string::String;
    let mut _1166: std::fmt::Arguments<'_>;
    let mut _1167: &[&str];
    let mut _1168: &[&str; 2];
    let _1169: &[&str; 2];
    let _1170: [&str; 2];
    let mut _1171: &[core::fmt::rt::Argument<'_>];
    let mut _1172: &[core::fmt::rt::Argument<'_>; 2];
    let _1173: &[core::fmt::rt::Argument<'_>; 2];
    let _1174: [core::fmt::rt::Argument<'_>; 2];
    let mut _1175: core::fmt::rt::Argument<'_>;
    let mut _1176: &u16;
    let _1177: &u16;
    let mut _1178: core::fmt::rt::Argument<'_>;
    let mut _1179: &u16;
    let _1180: &u16;
    let _1181: ();
    let mut _1182: &str;
    let _1183: &str;
    let mut _1184: &std::string::String;
    let _1185: &std::string::String;
    let _1186: std::string::String;
    let mut _1188: std::fmt::Arguments<'_>;
    let mut _1189: &[&str];
    let mut _1190: &[&str; 3];
    let _1191: &[&str; 3];
    let _1192: [&str; 3];
    let mut _1193: &[core::fmt::rt::Argument<'_>];
    let mut _1194: &[core::fmt::rt::Argument<'_>; 3];
    let _1195: &[core::fmt::rt::Argument<'_>; 3];
    let _1196: [core::fmt::rt::Argument<'_>; 3];
    let mut _1197: core::fmt::rt::Argument<'_>;
    let mut _1198: &u128;
    let _1199: &u128;
    let mut _1200: core::fmt::rt::Argument<'_>;
    let mut _1201: &u128;
    let _1202: &u128;
    let mut _1203: core::fmt::rt::Argument<'_>;
    let mut _1204: &u128;
    let _1205: &u128;
    let _1206: ();
    let mut _1207: &str;
    let _1208: &str;
    let mut _1209: &std::string::String;
    let _1210: &std::string::String;
    let _1211: std::string::String;
    let mut _1213: std::fmt::Arguments<'_>;
    let mut _1214: &[&str];
    let mut _1215: &[&str; 3];
    let _1216: &[&str; 3];
    let _1217: [&str; 3];
    let mut _1218: &[core::fmt::rt::Argument<'_>];
    let mut _1219: &[core::fmt::rt::Argument<'_>; 3];
    let _1220: &[core::fmt::rt::Argument<'_>; 3];
    let _1221: [core::fmt::rt::Argument<'_>; 3];
    let mut _1222: core::fmt::rt::Argument<'_>;
    let mut _1223: &u128;
    let _1224: &u128;
    let mut _1225: core::fmt::rt::Argument<'_>;
    let mut _1226: &u128;
    let _1227: &u128;
    let mut _1228: core::fmt::rt::Argument<'_>;
    let mut _1229: &u128;
    let _1230: &u128;
    let mut _1231: error::ErrorCode;
    let _1232: ();
    let mut _1233: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1234: std::result::Result<(), error::ErrorCode>;
    let mut _1235: u128;
    let mut _1236: u128;
    let mut _1237: u32;
    let mut _1238: u32;
    let mut _1239: std::option::Option<u64>;
    let mut _1240: isize;
    let mut _1242: !;
    let mut _1243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1245: ();
    let mut _1247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1248: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1249: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1250: &u16;
    let _1251: &u16;
    let mut _1252: isize;
    let mut _1254: !;
    let mut _1255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1257: ();
    let mut _1258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1259: std::result::Result<(), error::ErrorCode>;
    let mut _1260: u128;
    let mut _1261: &state::spot_market::SpotBalanceType;
    let _1262: &state::spot_market::SpotBalanceType;
    let _1263: state::spot_market::SpotBalanceType;
    let mut _1264: &mut state::spot_market::SpotMarket;
    let mut _1265: &mut state::spot_market::SpotMarket;
    let mut _1266: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1267: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1268: &mut state::user::SpotPosition;
    let mut _1269: &mut state::user::SpotPosition;
    let mut _1270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1271: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1272: &mut state::user::User;
    let mut _1273: u16;
    let mut _1274: isize;
    let mut _1276: !;
    let mut _1277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1279: std::option::Option<u128>;
    let mut _1280: u128;
    let mut _1281: isize;
    let mut _1283: !;
    let mut _1284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1286: ();
    let mut _1287: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1288: std::result::Result<(), error::ErrorCode>;
    let mut _1289: u128;
    let mut _1290: &state::spot_market::SpotBalanceType;
    let _1291: &state::spot_market::SpotBalanceType;
    let _1292: state::spot_market::SpotBalanceType;
    let mut _1293: &mut state::spot_market::SpotMarket;
    let mut _1294: &mut state::spot_market::SpotMarket;
    let mut _1295: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1296: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1297: &mut state::user::SpotPosition;
    let mut _1298: &mut state::user::SpotPosition;
    let mut _1299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1300: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1301: &mut state::user::User;
    let mut _1302: u16;
    let mut _1303: isize;
    let mut _1305: !;
    let mut _1306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1308: std::option::Option<u128>;
    let mut _1309: u128;
    let mut _1310: isize;
    let mut _1312: !;
    let mut _1313: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1315: ();
    let mut _1317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1318: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1319: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1320: &u16;
    let _1321: &u16;
    let mut _1322: isize;
    let mut _1324: !;
    let mut _1325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1328: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1329: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1330: &mut state::user::User;
    let mut _1331: u16;
    let mut _1332: isize;
    let mut _1334: !;
    let mut _1335: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1337: ();
    let mut _1338: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1339: std::result::Result<(), error::ErrorCode>;
    let mut _1340: &mut state::user::PerpPosition;
    let mut _1341: &mut state::perp_market::PerpMarket;
    let mut _1342: &mut state::perp_market::PerpMarket;
    let mut _1343: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1344: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1345: i64;
    let mut _1346: i64;
    let mut _1347: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1348: std::result::Result<i64, error::ErrorCode>;
    let mut _1349: u128;
    let mut _1350: isize;
    let mut _1352: !;
    let mut _1353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1355: bool;
    let mut _1356: isize;
    let mut _1358: !;
    let mut _1359: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1362: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1363: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1364: &mut state::user::User;
    let mut _1365: u16;
    let mut _1366: isize;
    let mut _1368: !;
    let mut _1369: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1371: ();
    let mut _1372: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1373: std::result::Result<(), error::ErrorCode>;
    let mut _1374: &mut state::user::PerpPosition;
    let mut _1375: &mut state::perp_market::PerpMarket;
    let mut _1376: &mut state::perp_market::PerpMarket;
    let mut _1377: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1378: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1379: i64;
    let mut _1380: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1381: std::result::Result<i64, error::ErrorCode>;
    let mut _1382: u128;
    let mut _1383: isize;
    let mut _1385: !;
    let mut _1386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1388: isize;
    let mut _1390: !;
    let mut _1391: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1394: (u64, state::margin_calculation::MarginCalculation);
    let mut _1395: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, state::margin_calculation::MarginCalculation)>;
    let mut _1396: std::result::Result<(u64, state::margin_calculation::MarginCalculation), error::ErrorCode>;
    let mut _1397: &state::user::User;
    let mut _1398: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1399: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1400: &mut state::oracle_map::OracleMap<'_>;
    let mut _1401: u32;
    let mut _1402: u128;
    let mut _1403: isize;
    let mut _1405: !;
    let mut _1406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1408: u64;
    let mut _1409: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1410: std::result::Result<u64, error::ErrorCode>;
    let mut _1411: u64;
    let mut _1412: u64;
    let mut _1413: isize;
    let mut _1415: !;
    let mut _1416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1418: ();
    let mut _1419: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1420: std::result::Result<(), error::ErrorCode>;
    let mut _1421: &mut state::user::User;
    let mut _1422: u64;
    let mut _1423: isize;
    let mut _1425: !;
    let mut _1426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1428: ();
    let mut _1429: bool;
    let mut _1430: u128;
    let mut _1431: u128;
    let _1432: ();
    let mut _1433: &mut state::user::User;
    let mut _1434: bool;
    let mut _1435: &state::user::User;
    let _1436: ();
    let mut _1437: &mut state::user::User;
    let mut _1439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1440: std::result::Result<bool, error::ErrorCode>;
    let mut _1441: &state::user::User;
    let mut _1442: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1443: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1444: &mut state::oracle_map::OracleMap<'_>;
    let mut _1445: isize;
    let mut _1447: !;
    let mut _1448: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1450: ();
    let mut _1451: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1452: std::result::Result<(), error::ErrorCode>;
    let mut _1453: bool;
    let mut _1454: ();
    let _1456: ();
    let mut _1457: &str;
    let _1458: &str;
    let mut _1459: &std::string::String;
    let _1460: &std::string::String;
    let _1461: std::string::String;
    let mut _1463: std::fmt::Arguments<'_>;
    let mut _1464: &[&str];
    let mut _1465: &[&str; 2];
    let _1466: &[&str; 2];
    let _1467: [&str; 2];
    let mut _1468: &[core::fmt::rt::Argument<'_>];
    let mut _1469: &[core::fmt::rt::Argument<'_>; 1];
    let _1470: &[core::fmt::rt::Argument<'_>; 1];
    let _1471: [core::fmt::rt::Argument<'_>; 1];
    let mut _1472: core::fmt::rt::Argument<'_>;
    let mut _1473: &error::ErrorCode;
    let _1474: &error::ErrorCode;
    let _1475: ();
    let mut _1476: &str;
    let _1477: &str;
    let mut _1478: error::ErrorCode;
    let mut _1479: isize;
    let mut _1481: !;
    let mut _1482: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1486: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1487: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1488: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1489: &u16;
    let _1490: &u16;
    let mut _1491: isize;
    let mut _1493: !;
    let mut _1494: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1496: &state::oracle::OraclePriceData;
    let mut _1497: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _1498: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _1499: &mut state::oracle_map::OracleMap<'_>;
    let mut _1500: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1501: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1502: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _1503: &state::perp_market::PerpMarket;
    let _1504: &state::perp_market::PerpMarket;
    let mut _1505: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1506: isize;
    let mut _1508: !;
    let mut _1509: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1511: ();
    let _1512: ();
    let mut _1513: &[&[u8]];
    let mut _1514: &[&[u8]; 1];
    let _1515: &[&[u8]; 1];
    let _1516: [&[u8]; 1];
    let mut _1517: &[u8];
    let _1518: &[u8];
    let mut _1519: &std::vec::Vec<u8>;
    let _1520: &std::vec::Vec<u8>;
    let _1521: std::vec::Vec<u8>;
    let mut _1522: &state::events::LiquidationRecord;
    let _1523: &state::events::LiquidationRecord;
    let _1524: state::events::LiquidationRecord;
    let mut _1525: i64;
    let mut _1526: u16;
    let mut _1527: state::events::LiquidationType;
    let mut _1528: anchor_lang::prelude::Pubkey;
    let mut _1529: anchor_lang::prelude::Pubkey;
    let mut _1530: u128;
    let mut _1531: i128;
    let mut _1532: bool;
    let mut _1533: &state::user::User;
    let mut _1534: u64;
    let mut _1535: state::events::LiquidatePerpPnlForDepositRecord;
    let mut _1536: u16;
    let mut _1537: i64;
    let mut _1538: u128;
    let mut _1539: u16;
    let mut _1540: i64;
    let mut _1541: u128;
    let mut _1542: state::events::LiquidationRecord;
    let mut _1543: ();
    let mut _1570: bool;
    let mut _1571: bool;
    let mut _1572: bool;
    let mut _1573: bool;
    let mut _1574: bool;
    let mut _1575: isize;
    let mut _1576: isize;
    let mut _1577: isize;
    let mut _1578: isize;
    let mut _1579: isize;
    let mut _1580: isize;
    let mut _1581: isize;
    let mut _1582: isize;
    let mut _1583: isize;
    let mut _1584: isize;
    let mut _1585: isize;
    let mut _1586: isize;
    let mut _1587: isize;
    let mut _1588: isize;
    let mut _1589: isize;
    let mut _1590: isize;
    let mut _1591: isize;
    let mut _1592: isize;
    let mut _1593: isize;
    let mut _1594: isize;
    let mut _1595: isize;
    let mut _1596: isize;
    let mut _1597: isize;
    let mut _1598: isize;
    let mut _1599: isize;
    let mut _1600: isize;
    let mut _1601: isize;
    let mut _1602: isize;
    let mut _1603: isize;
    let mut _1604: isize;
    let mut _1605: isize;
    let mut _1606: isize;
    let mut _1607: isize;
    let mut _1608: isize;
    let mut _1609: isize;
    let mut _1610: isize;
    let mut _1611: isize;
    let mut _1612: isize;
    let mut _1613: isize;
    let mut _1614: isize;
    let mut _1615: isize;
    let mut _1616: isize;
    let mut _1617: isize;
    let mut _1618: isize;
    let mut _1619: isize;
    let mut _1620: isize;
    let mut _1621: isize;
    let mut _1622: isize;
    let mut _1623: isize;
    let mut _1624: isize;
    let mut _1625: isize;
    let mut _1626: isize;
    let mut _1627: isize;
    let mut _1628: isize;
    let mut _1629: isize;
    let mut _1630: isize;
    let mut _1631: isize;
    let mut _1632: isize;
    let mut _1633: isize;
    let mut _1634: isize;
    scope 1 {
        debug error_code => _23;
        let _30: std::string::String;
        let _49: std::string::String;
        let mut _1568: &[&str; 1];
        let mut _1569: &[&str; 2];
        scope 2 {
            debug res => _30;
        }
        scope 3 {
            debug res => _49;
        }
    }
    scope 4 {
        debug residual => _57;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _60;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _67;
        let _74: std::string::String;
        let _93: std::string::String;
        let mut _1566: &[&str; 1];
        let mut _1567: &[&str; 2];
        scope 9 {
            debug res => _74;
        }
        scope 10 {
            debug res => _93;
        }
    }
    scope 11 {
        debug residual => _101;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _104;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _111;
        let _118: std::string::String;
        let _137: std::string::String;
        let mut _1564: &[&str; 2];
        let mut _1565: &[&str; 2];
        scope 16 {
            debug res => _118;
        }
        scope 17 {
            debug res => _137;
        }
    }
    scope 18 {
        debug residual => _152;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _155;
        scope 21 {
        }
    }
    scope 22 {
        debug asset_spot_market => _156;
        let _176: error::ErrorCode;
        let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _220: ();
        let _223: std::cell::Ref<'_, state::perp_market::PerpMarket>;
        let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _233: std::cell::Ref<'_, state::perp_market::PerpMarket>;
        scope 27 {
            debug error_code => _176;
            let _183: std::string::String;
            let _202: std::string::String;
            let mut _1562: &[&str; 1];
            let mut _1563: &[&str; 2];
            scope 28 {
                debug res => _183;
            }
            scope 29 {
                debug res => _202;
            }
        }
        scope 30 {
            debug residual => _217;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _220;
            scope 33 {
            }
        }
        scope 34 {
            debug perp_market => _223;
            let _243: error::ErrorCode;
            let _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _287: ();
            let _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _302: &state::user::PerpPosition;
            let _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _315: &state::user::SpotPosition;
            let _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _327: &mut state::user::PerpPosition;
            let _336: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _339: &mut state::user::SpotPosition;
            let _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _358: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            let _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _364: ();
            let _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _383: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            let _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _389: ();
            let _390: u128;
            let _391: i64;
            let _392: state::spot_market::AssetTier;
            let _393: u32;
            let _394: u32;
            let _395: u32;
            let mut _397: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            let _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _407: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
            scope 39 {
                debug error_code => _243;
                let _250: std::string::String;
                let _269: std::string::String;
                let mut _1560: &[&str; 1];
                let mut _1561: &[&str; 2];
                scope 40 {
                    debug res => _250;
                }
                scope 41 {
                    debug res => _269;
                }
            }
            scope 42 {
                debug residual => _284;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _287;
                scope 45 {
                }
            }
            scope 46 {
                debug residual => _299;
                scope 47 {
                }
            }
            scope 48 {
                debug val => _302;
                scope 49 {
                }
            }
            scope 50 {
                debug residual => _312;
                scope 51 {
                }
            }
            scope 52 {
                debug val => _315;
                scope 53 {
                }
            }
            scope 54 {
                debug residual => _324;
                scope 55 {
                }
            }
            scope 56 {
                debug val => _327;
                scope 57 {
                }
            }
            scope 58 {
                debug residual => _336;
                scope 59 {
                }
            }
            scope 60 {
                debug val => _339;
                scope 61 {
                }
            }
            scope 62 {
                debug residual => _355;
                scope 63 {
                }
            }
            scope 64 {
                debug val => _358;
                scope 65 {
                }
            }
            scope 66 {
                debug residual => _361;
                scope 67 {
                }
            }
            scope 68 {
                debug val => _364;
                scope 69 {
                }
            }
            scope 70 {
                debug residual => _380;
                scope 71 {
                }
            }
            scope 72 {
                debug val => _383;
                scope 73 {
                }
            }
            scope 74 {
                debug residual => _386;
                scope 75 {
                }
            }
            scope 76 {
                debug val => _389;
                scope 77 {
                }
            }
            scope 78 {
                debug asset_amount => _390;
                debug asset_price => _391;
                debug _asset_tier => _392;
                debug asset_decimals => _393;
                debug asset_weight => _394;
                debug asset_liquidation_multiplier => _395;
                let _577: u128;
                let _578: i64;
                let _579: state::perp_market::ContractTier;
                let _580: u32;
                let _581: u32;
                let _582: u32;
                let _584: &state::user::PerpPosition;
                let _590: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _593: &state::user::PerpPosition;
                scope 121 {
                    debug unsettled_pnl => _577;
                    debug quote_price => _578;
                    debug contract_tier => _579;
                    debug quote_decimals => _580;
                    debug pnl_liability_weight => _581;
                    debug pnl_liquidation_multiplier => _582;
                    let _748: state::margin_calculation::MarginCalculation;
                    let _758: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _761: state::margin_calculation::MarginCalculation;
                    scope 165 {
                        debug margin_calculation => _748;
                        let _774: std::string::String;
                        let _795: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _798: bool;
                        let _803: u16;
                        let _809: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _812: u16;
                        let mut _1552: &[&str; 1];
                        scope 170 {
                            debug res => _774;
                        }
                        scope 171 {
                            debug residual => _795;
                            scope 172 {
                            }
                        }
                        scope 173 {
                            debug val => _798;
                            scope 174 {
                            }
                        }
                        scope 175 {
                            debug liquidation_id => _803;
                            let mut _813: u64;
                            scope 180 {
                                debug margin_freed => _813;
                                let _814: std::vec::Vec<u32>;
                                let _831: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _834: std::vec::Vec<u32>;
                                scope 181 {
                                    debug canceled_order_ids => _814;
                                    let _835: state::spot_market::AssetTier;
                                    let _836: state::perp_market::ContractTier;
                                    let _844: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _847: (state::spot_market::AssetTier, state::perp_market::ContractTier);
                                    scope 186 {
                                        debug safest_tier_spot_liability => _835;
                                        debug safest_tier_perp_liability => _836;
                                        let _848: bool;
                                        scope 191 {
                                            debug is_contract_tier_violation => _848;
                                            let _855: state::margin_calculation::MarginCalculation;
                                            let _858: state::margin_calculation::MarginCalculation;
                                            let _868: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _871: state::margin_calculation::MarginCalculation;
                                            scope 192 {
                                                debug intermediate_margin_calculation => _855;
                                                let _1022: std::string::String;
                                                let _1042: u128;
                                                let _1047: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _1050: u128;
                                                let mut _1544: &[&str; 3];
                                                scope 232 {
                                                    debug res => _1022;
                                                }
                                                scope 233 {
                                                    debug margin_shortage => _1042;
                                                    let _1051: u32;
                                                    let _1057: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _1060: u32;
                                                    scope 238 {
                                                        debug pnl_liability_weight_plus_buffer => _1051;
                                                        let _1061: u128;
                                                        let _1072: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1075: u128;
                                                        scope 243 {
                                                            debug pnl_transfer_to_cover_margin_shortage => _1061;
                                                            let _1076: u128;
                                                            let _1085: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1088: u128;
                                                            scope 248 {
                                                                debug max_pct_allowed => _1076;
                                                                let _1089: u128;
                                                                let _1096: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1099: u128;
                                                                scope 253 {
                                                                    debug max_pnl_allowed_to_be_transferred => _1089;
                                                                    let _1108: u128;
                                                                    let _1119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _1122: u128;
                                                                    scope 258 {
                                                                        debug pnl_transfer_implied_by_asset_amount => _1108;
                                                                        let _1123: u128;
                                                                        scope 263 {
                                                                            debug minimum_pnl_transfer => _1123;
                                                                            let _1128: u128;
                                                                            scope 264 {
                                                                                debug pnl_transfer => _1128;
                                                                                let _1137: u128;
                                                                                let _1149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1152: u128;
                                                                                scope 265 {
                                                                                    debug asset_transfer => _1137;
                                                                                    let _1165: std::string::String;
                                                                                    let _1187: std::string::String;
                                                                                    let _1212: std::string::String;
                                                                                    let _1241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1244: ();
                                                                                    let mut _1246: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                    let _1253: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1256: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                    let mut _1316: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                    let _1323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1326: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                    let _1393: u64;
                                                                                    let _1404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1407: (u64, state::margin_calculation::MarginCalculation);
                                                                                    let mut _1545: &[&str; 3];
                                                                                    let mut _1546: &[&str; 3];
                                                                                    let mut _1547: &[&str; 2];
                                                                                    scope 270 {
                                                                                        debug res => _1165;
                                                                                    }
                                                                                    scope 271 {
                                                                                        debug res => _1187;
                                                                                    }
                                                                                    scope 272 {
                                                                                        debug res => _1212;
                                                                                    }
                                                                                    scope 273 {
                                                                                        debug residual => _1241;
                                                                                        scope 274 {
                                                                                        }
                                                                                    }
                                                                                    scope 275 {
                                                                                        debug val => _1244;
                                                                                        scope 276 {
                                                                                        }
                                                                                    }
                                                                                    scope 277 {
                                                                                        debug asset_market => _1246;
                                                                                        let _1275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1278: &mut state::user::SpotPosition;
                                                                                        let _1282: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1285: ();
                                                                                        let _1304: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1307: &mut state::user::SpotPosition;
                                                                                        let _1311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1314: ();
                                                                                        let mut _1549: &state::spot_market::SpotBalanceType;
                                                                                        let mut _1550: &state::spot_market::SpotBalanceType;
                                                                                        scope 282 {
                                                                                            debug residual => _1275;
                                                                                            scope 283 {
                                                                                            }
                                                                                        }
                                                                                        scope 284 {
                                                                                            debug val => _1278;
                                                                                            scope 285 {
                                                                                            }
                                                                                        }
                                                                                        scope 286 {
                                                                                            debug residual => _1282;
                                                                                            scope 287 {
                                                                                            }
                                                                                        }
                                                                                        scope 288 {
                                                                                            debug val => _1285;
                                                                                            scope 289 {
                                                                                            }
                                                                                        }
                                                                                        scope 290 {
                                                                                            debug residual => _1304;
                                                                                            scope 291 {
                                                                                            }
                                                                                        }
                                                                                        scope 292 {
                                                                                            debug val => _1307;
                                                                                            scope 293 {
                                                                                            }
                                                                                        }
                                                                                        scope 294 {
                                                                                            debug residual => _1311;
                                                                                            scope 295 {
                                                                                            }
                                                                                        }
                                                                                        scope 296 {
                                                                                            debug val => _1314;
                                                                                            scope 297 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 278 {
                                                                                        debug residual => _1253;
                                                                                        scope 279 {
                                                                                        }
                                                                                    }
                                                                                    scope 280 {
                                                                                        debug val => _1256;
                                                                                        scope 281 {
                                                                                        }
                                                                                    }
                                                                                    scope 298 {
                                                                                        debug perp_market => _1316;
                                                                                        let _1327: &mut state::user::PerpPosition;
                                                                                        let _1333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1336: &mut state::user::PerpPosition;
                                                                                        scope 303 {
                                                                                            debug liquidator_position => _1327;
                                                                                            let _1351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1354: i64;
                                                                                            let _1357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1360: ();
                                                                                            let _1361: &mut state::user::PerpPosition;
                                                                                            let _1367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1370: &mut state::user::PerpPosition;
                                                                                            scope 308 {
                                                                                                debug residual => _1351;
                                                                                                scope 309 {
                                                                                                }
                                                                                            }
                                                                                            scope 310 {
                                                                                                debug val => _1354;
                                                                                                scope 311 {
                                                                                                }
                                                                                            }
                                                                                            scope 312 {
                                                                                                debug residual => _1357;
                                                                                                scope 313 {
                                                                                                }
                                                                                            }
                                                                                            scope 314 {
                                                                                                debug val => _1360;
                                                                                                scope 315 {
                                                                                                }
                                                                                            }
                                                                                            scope 316 {
                                                                                                debug user_position => _1361;
                                                                                                let _1384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1387: i64;
                                                                                                let _1389: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1392: ();
                                                                                                scope 321 {
                                                                                                    debug residual => _1384;
                                                                                                    scope 322 {
                                                                                                    }
                                                                                                }
                                                                                                scope 323 {
                                                                                                    debug val => _1387;
                                                                                                    scope 324 {
                                                                                                    }
                                                                                                }
                                                                                                scope 325 {
                                                                                                    debug residual => _1389;
                                                                                                    scope 326 {
                                                                                                    }
                                                                                                }
                                                                                                scope 327 {
                                                                                                    debug val => _1392;
                                                                                                    scope 328 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 317 {
                                                                                                debug residual => _1367;
                                                                                                scope 318 {
                                                                                                }
                                                                                            }
                                                                                            scope 319 {
                                                                                                debug val => _1370;
                                                                                                scope 320 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 304 {
                                                                                            debug residual => _1333;
                                                                                            scope 305 {
                                                                                            }
                                                                                        }
                                                                                        scope 306 {
                                                                                            debug val => _1336;
                                                                                            scope 307 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 299 {
                                                                                        debug residual => _1323;
                                                                                        scope 300 {
                                                                                        }
                                                                                    }
                                                                                    scope 301 {
                                                                                        debug val => _1326;
                                                                                        scope 302 {
                                                                                        }
                                                                                    }
                                                                                    scope 329 {
                                                                                        debug margin_freed_from_liability => _1393;
                                                                                        let _1414: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1417: u64;
                                                                                        let _1424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1427: ();
                                                                                        let _1438: bool;
                                                                                        let _1446: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1449: bool;
                                                                                        scope 334 {
                                                                                            debug residual => _1414;
                                                                                            scope 335 {
                                                                                            }
                                                                                        }
                                                                                        scope 336 {
                                                                                            debug val => _1417;
                                                                                            scope 337 {
                                                                                            }
                                                                                        }
                                                                                        scope 338 {
                                                                                            debug residual => _1424;
                                                                                            scope 339 {
                                                                                            }
                                                                                        }
                                                                                        scope 340 {
                                                                                            debug val => _1427;
                                                                                            scope 341 {
                                                                                            }
                                                                                        }
                                                                                        scope 342 {
                                                                                            debug liquidator_meets_initial_margin_requirement => _1438;
                                                                                            let _1455: error::ErrorCode;
                                                                                            let _1480: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1483: ();
                                                                                            let _1484: i64;
                                                                                            let _1485: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                            let _1492: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1495: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                            scope 347 {
                                                                                                debug error_code => _1455;
                                                                                                let _1462: std::string::String;
                                                                                                let mut _1548: &[&str; 2];
                                                                                                scope 348 {
                                                                                                    debug res => _1462;
                                                                                                }
                                                                                            }
                                                                                            scope 349 {
                                                                                                debug residual => _1480;
                                                                                                scope 350 {
                                                                                                }
                                                                                            }
                                                                                            scope 351 {
                                                                                                debug val => _1483;
                                                                                                scope 352 {
                                                                                                }
                                                                                            }
                                                                                            scope 353 {
                                                                                                debug market_oracle_price => _1484;
                                                                                            }
                                                                                            scope 354 {
                                                                                                debug market => _1485;
                                                                                                let _1507: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1510: &state::oracle::OraclePriceData;
                                                                                                scope 359 {
                                                                                                    debug residual => _1507;
                                                                                                    scope 360 {
                                                                                                    }
                                                                                                }
                                                                                                scope 361 {
                                                                                                    debug val => _1510;
                                                                                                    scope 362 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 355 {
                                                                                                debug residual => _1492;
                                                                                                scope 356 {
                                                                                                }
                                                                                            }
                                                                                            scope 357 {
                                                                                                debug val => _1495;
                                                                                                scope 358 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 343 {
                                                                                            debug residual => _1446;
                                                                                            scope 344 {
                                                                                            }
                                                                                        }
                                                                                        scope 345 {
                                                                                            debug val => _1449;
                                                                                            scope 346 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 330 {
                                                                                        debug residual => _1404;
                                                                                        scope 331 {
                                                                                        }
                                                                                    }
                                                                                    scope 332 {
                                                                                        debug val => _1407;
                                                                                        scope 333 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 266 {
                                                                                    debug residual => _1149;
                                                                                    scope 267 {
                                                                                    }
                                                                                }
                                                                                scope 268 {
                                                                                    debug val => _1152;
                                                                                    scope 269 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 259 {
                                                                        debug residual => _1119;
                                                                        scope 260 {
                                                                        }
                                                                    }
                                                                    scope 261 {
                                                                        debug val => _1122;
                                                                        scope 262 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 254 {
                                                                    debug residual => _1096;
                                                                    scope 255 {
                                                                    }
                                                                }
                                                                scope 256 {
                                                                    debug val => _1099;
                                                                    scope 257 {
                                                                    }
                                                                }
                                                            }
                                                            scope 249 {
                                                                debug residual => _1085;
                                                                scope 250 {
                                                                }
                                                            }
                                                            scope 251 {
                                                                debug val => _1088;
                                                                scope 252 {
                                                                }
                                                            }
                                                        }
                                                        scope 244 {
                                                            debug residual => _1072;
                                                            scope 245 {
                                                            }
                                                        }
                                                        scope 246 {
                                                            debug val => _1075;
                                                            scope 247 {
                                                            }
                                                        }
                                                    }
                                                    scope 239 {
                                                        debug residual => _1057;
                                                        scope 240 {
                                                        }
                                                    }
                                                    scope 241 {
                                                        debug val => _1060;
                                                        scope 242 {
                                                        }
                                                    }
                                                }
                                                scope 234 {
                                                    debug residual => _1047;
                                                    scope 235 {
                                                    }
                                                }
                                                scope 236 {
                                                    debug val => _1050;
                                                    scope 237 {
                                                    }
                                                }
                                            }
                                            scope 193 {
                                                debug intermediate_margin_calculation => _858;
                                                let _872: u128;
                                                let _877: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _880: u128;
                                                scope 198 {
                                                    debug initial_margin_shortage => _872;
                                                    let _881: u128;
                                                    let _886: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _889: u128;
                                                    scope 203 {
                                                        debug new_margin_shortage => _881;
                                                        let _897: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _900: u64;
                                                        let _907: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _910: ();
                                                        let _911: bool;
                                                        let _916: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _919: bool;
                                                        scope 208 {
                                                            debug residual => _897;
                                                            scope 209 {
                                                            }
                                                        }
                                                        scope 210 {
                                                            debug val => _900;
                                                            scope 211 {
                                                            }
                                                        }
                                                        scope 212 {
                                                            debug residual => _907;
                                                            scope 213 {
                                                            }
                                                        }
                                                        scope 214 {
                                                            debug val => _910;
                                                            scope 215 {
                                                            }
                                                        }
                                                        scope 216 {
                                                            debug exiting_liq_territory => _911;
                                                            let _924: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                            let _931: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _934: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                            scope 221 {
                                                                debug market => _924;
                                                                let _935: i64;
                                                                let _947: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _950: &state::oracle::OraclePriceData;
                                                                scope 226 {
                                                                    debug market_oracle_price => _935;
                                                                    let _993: std::string::String;
                                                                    let mut _1551: &[&str; 3];
                                                                    scope 231 {
                                                                        debug res => _993;
                                                                    }
                                                                }
                                                                scope 227 {
                                                                    debug residual => _947;
                                                                    scope 228 {
                                                                    }
                                                                }
                                                                scope 229 {
                                                                    debug val => _950;
                                                                    scope 230 {
                                                                    }
                                                                }
                                                            }
                                                            scope 222 {
                                                                debug residual => _931;
                                                                scope 223 {
                                                                }
                                                            }
                                                            scope 224 {
                                                                debug val => _934;
                                                                scope 225 {
                                                                }
                                                            }
                                                        }
                                                        scope 217 {
                                                            debug residual => _916;
                                                            scope 218 {
                                                            }
                                                        }
                                                        scope 219 {
                                                            debug val => _919;
                                                            scope 220 {
                                                            }
                                                        }
                                                    }
                                                    scope 204 {
                                                        debug residual => _886;
                                                        scope 205 {
                                                        }
                                                    }
                                                    scope 206 {
                                                        debug val => _889;
                                                        scope 207 {
                                                        }
                                                    }
                                                }
                                                scope 199 {
                                                    debug residual => _877;
                                                    scope 200 {
                                                    }
                                                }
                                                scope 201 {
                                                    debug val => _880;
                                                    scope 202 {
                                                    }
                                                }
                                            }
                                            scope 194 {
                                                debug residual => _868;
                                                scope 195 {
                                                }
                                            }
                                            scope 196 {
                                                debug val => _871;
                                                scope 197 {
                                                }
                                            }
                                        }
                                    }
                                    scope 187 {
                                        debug residual => _844;
                                        scope 188 {
                                        }
                                    }
                                    scope 189 {
                                        debug val => _847;
                                        scope 190 {
                                        }
                                    }
                                }
                                scope 182 {
                                    debug residual => _831;
                                    scope 183 {
                                    }
                                }
                                scope 184 {
                                    debug val => _834;
                                    scope 185 {
                                    }
                                }
                            }
                        }
                        scope 176 {
                            debug residual => _809;
                            scope 177 {
                            }
                        }
                        scope 178 {
                            debug val => _812;
                            scope 179 {
                            }
                        }
                    }
                    scope 166 {
                        debug residual => _758;
                        scope 167 {
                        }
                    }
                    scope 168 {
                        debug val => _761;
                        scope 169 {
                        }
                    }
                }
                scope 122 {
                    debug user_position => _584;
                    let _594: i64;
                    scope 127 {
                        debug base_asset_amount => _594;
                        let _601: error::ErrorCode;
                        let _642: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _645: ();
                        let _646: i128;
                        let _651: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _654: i128;
                        scope 128 {
                            debug error_code => _601;
                            let _608: std::string::String;
                            let _627: std::string::String;
                            let mut _1554: &[&str; 2];
                            let mut _1555: &[&str; 2];
                            scope 129 {
                                debug res => _608;
                            }
                            scope 130 {
                                debug res => _627;
                            }
                        }
                        scope 131 {
                            debug residual => _642;
                            scope 132 {
                            }
                        }
                        scope 133 {
                            debug val => _645;
                            scope 134 {
                            }
                        }
                        scope 135 {
                            debug unsettled_pnl => _646;
                            let _661: error::ErrorCode;
                            let _686: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _689: ();
                            let _690: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                            let _697: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _700: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                            scope 140 {
                                debug error_code => _661;
                                let _668: std::string::String;
                                let mut _1553: &[&str; 2];
                                scope 141 {
                                    debug res => _668;
                                }
                            }
                            scope 142 {
                                debug residual => _686;
                                scope 143 {
                                }
                            }
                            scope 144 {
                                debug val => _689;
                                scope 145 {
                                }
                            }
                            scope 146 {
                                debug market => _690;
                                let _701: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                let _710: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _713: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                scope 151 {
                                    debug quote_spot_market => _701;
                                    let _714: i64;
                                    let _726: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _729: &state::oracle::OraclePriceData;
                                    scope 156 {
                                        debug quote_price => _714;
                                        let _744: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _747: u32;
                                        scope 161 {
                                            debug residual => _744;
                                            scope 162 {
                                            }
                                        }
                                        scope 163 {
                                            debug val => _747;
                                            scope 164 {
                                            }
                                        }
                                    }
                                    scope 157 {
                                        debug residual => _726;
                                        scope 158 {
                                        }
                                    }
                                    scope 159 {
                                        debug val => _729;
                                        scope 160 {
                                        }
                                    }
                                }
                                scope 152 {
                                    debug residual => _710;
                                    scope 153 {
                                    }
                                }
                                scope 154 {
                                    debug val => _713;
                                    scope 155 {
                                    }
                                }
                            }
                            scope 147 {
                                debug residual => _697;
                                scope 148 {
                                }
                            }
                            scope 149 {
                                debug val => _700;
                                scope 150 {
                                }
                            }
                        }
                        scope 136 {
                            debug residual => _651;
                            scope 137 {
                            }
                        }
                        scope 138 {
                            debug val => _654;
                            scope 139 {
                            }
                        }
                    }
                }
                scope 123 {
                    debug residual => _590;
                    scope 124 {
                    }
                }
                scope 125 {
                    debug val => _593;
                    scope 126 {
                    }
                }
            }
            scope 79 {
                debug asset_market => _397;
                let _408: &state::oracle::OraclePriceData;
                let _409: &state::state::ValidityGuardRails;
                let _421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _424: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
                scope 84 {
                    debug asset_price_data => _408;
                    debug validity_guard_rails => _409;
                    let _438: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _441: ();
                    let _442: i64;
                    scope 89 {
                        debug residual => _438;
                        scope 90 {
                        }
                    }
                    scope 91 {
                        debug val => _441;
                        scope 92 {
                        }
                    }
                    scope 93 {
                        debug token_price => _442;
                        let _443: &state::user::SpotPosition;
                        let _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _452: &state::user::SpotPosition;
                        scope 94 {
                            debug spot_position => _443;
                            let _461: error::ErrorCode;
                            let _486: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _489: ();
                            let _490: u128;
                            let _499: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _502: u128;
                            let mut _1559: &state::spot_market::SpotBalanceType;
                            scope 99 {
                                debug error_code => _461;
                                let _468: std::string::String;
                                let mut _1558: &[&str; 2];
                                scope 100 {
                                    debug res => _468;
                                }
                            }
                            scope 101 {
                                debug residual => _486;
                                scope 102 {
                                }
                            }
                            scope 103 {
                                debug val => _489;
                                scope 104 {
                                }
                            }
                            scope 105 {
                                debug token_amount => _490;
                                let _509: error::ErrorCode;
                                let _550: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _553: ();
                                let _573: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _576: u32;
                                scope 110 {
                                    debug error_code => _509;
                                    let _516: std::string::String;
                                    let _535: std::string::String;
                                    let mut _1556: &[&str; 1];
                                    let mut _1557: &[&str; 2];
                                    scope 111 {
                                        debug res => _516;
                                    }
                                    scope 112 {
                                        debug res => _535;
                                    }
                                }
                                scope 113 {
                                    debug residual => _550;
                                    scope 114 {
                                    }
                                }
                                scope 115 {
                                    debug val => _553;
                                    scope 116 {
                                    }
                                }
                                scope 117 {
                                    debug residual => _573;
                                    scope 118 {
                                    }
                                }
                                scope 119 {
                                    debug val => _576;
                                    scope 120 {
                                    }
                                }
                            }
                            scope 106 {
                                debug residual => _499;
                                scope 107 {
                                }
                            }
                            scope 108 {
                                debug val => _502;
                                scope 109 {
                                }
                            }
                        }
                        scope 95 {
                            debug residual => _449;
                            scope 96 {
                            }
                        }
                        scope 97 {
                            debug val => _452;
                            scope 98 {
                            }
                        }
                    }
                }
                scope 85 {
                    debug residual => _421;
                    scope 86 {
                    }
                }
                scope 87 {
                    debug val => _424;
                    scope 88 {
                    }
                }
            }
            scope 80 {
                debug residual => _404;
                scope 81 {
                }
            }
            scope 82 {
                debug val => _407;
                scope 83 {
                }
            }
        }
        scope 35 {
            debug residual => _230;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _233;
            scope 38 {
            }
        }
    }
    scope 23 {
        debug residual => _163;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _166;
        scope 26 {
        }
    }

    bb0: {
        _1574 = const false;
        _1573 = const false;
        _1570 = const false;
        _1572 = const false;
        _1571 = const false;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_5);
        _20 = User::is_bankrupt(move _21) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _20) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_21);
        StorageLive(_23);
        _23 = error::ErrorCode::UserBankrupt;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _1569 = const _;
        _34 = &(*_1569);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = ();
        _19 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb15;
    }

    bb4: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb7, unwind: bb732];
    }

    bb7: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb8, unwind: bb732];
    }

    bb8: {
        StorageDead(_25);
        drop(_29) -> [return: bb9, unwind: bb733];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _1568 = const _;
        _53 = &(*_1568);
        _52 = &(*_53);
        _51 = move _52 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_52);
        _50 = Arguments::<'_>::new_const(move _51) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_51);
        _49 = format(move _50) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_50);
        StorageDead(_53);
        _48 = move _49;
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = <String as Deref>::deref(move _46) -> [return: bb12, unwind: bb731];
    }

    bb12: {
        _44 = &(*_45);
        StorageDead(_46);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb13, unwind: bb731];
    }

    bb13: {
        StorageDead(_44);
        drop(_48) -> [return: bb14, unwind: bb733];
    }

    bb14: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_55);
        _55 = _23;
        _19 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        StorageDead(_23);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_20);
        _18 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _19) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_19);
        _56 = discriminant(_18);
        switchInt(move _56) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_60);
        _60 = ((_18 as Continue).0: ());
        _17 = _60;
        StorageDead(_60);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_7);
        _64 = User::is_bankrupt(move _65) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_57);
        _57 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb694;
    }

    bb21: {
        switchInt(move _64) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_65);
        StorageLive(_67);
        _67 = error::ErrorCode::UserBankrupt;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _1567 = const _;
        _78 = &(*_1567);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_67;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _85) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = ();
        _63 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_85);
        _83 = [move _84];
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_75);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb27, unwind: bb730];
    }

    bb27: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb28, unwind: bb730];
    }

    bb28: {
        StorageDead(_69);
        drop(_73) -> [return: bb29, unwind: bb733];
    }

    bb29: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _1566 = const _;
        _97 = &(*_1566);
        _96 = &(*_97);
        _95 = move _96 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_96);
        _94 = Arguments::<'_>::new_const(move _95) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_95);
        _93 = format(move _94) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_94);
        StorageDead(_97);
        _92 = move _93;
        StorageDead(_93);
        _91 = &_92;
        _90 = &(*_91);
        _89 = <String as Deref>::deref(move _90) -> [return: bb32, unwind: bb729];
    }

    bb32: {
        _88 = &(*_89);
        StorageDead(_90);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb33, unwind: bb729];
    }

    bb33: {
        StorageDead(_88);
        drop(_92) -> [return: bb34, unwind: bb733];
    }

    bb34: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_99);
        _99 = _67;
        _63 = std::result::Result::<(), error::ErrorCode>::Err(move _99);
        StorageDead(_99);
        StorageDead(_67);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_64);
        _62 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _63) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_63);
        _100 = discriminant(_62);
        switchInt(move _100) -> [0: bb37, 1: bb38, otherwise: bb18];
    }

    bb37: {
        StorageLive(_104);
        _104 = ((_62 as Continue).0: ());
        _61 = _104;
        StorageDead(_104);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = ((*_7).27: u8);
        _108 = Eq(move _109, const 0_u8);
        switchInt(move _108) -> [0: bb41, otherwise: bb40];
    }

    bb38: {
        StorageLive(_101);
        _101 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb694;
    }

    bb40: {
        StorageDead(_109);
        StorageLive(_110);
        _110 = ();
        _107 = std::result::Result::<(), error::ErrorCode>::Ok(move _110);
        StorageDead(_110);
        goto -> bb54;
    }

    bb41: {
        StorageDead(_109);
        StorageLive(_111);
        _111 = error::ErrorCode::InvalidPoolId;
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _1565 = const _;
        _122 = &(*_1565);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_111;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _129) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_129);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <String as Deref>::deref(move _115) -> [return: bb45, unwind: bb728];
    }

    bb45: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb46, unwind: bb728];
    }

    bb46: {
        StorageDead(_113);
        drop(_117) -> [return: bb47, unwind: bb733];
    }

    bb47: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _1564 = const _;
        _141 = &(*_1564);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &((*_7).27: u8);
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _148) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_148);
        _146 = [move _147];
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_138);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb51, unwind: bb727];
    }

    bb51: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb52, unwind: bb727];
    }

    bb52: {
        StorageDead(_132);
        drop(_136) -> [return: bb53, unwind: bb733];
    }

    bb53: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_150);
        _150 = _111;
        _107 = std::result::Result::<(), error::ErrorCode>::Err(move _150);
        StorageDead(_150);
        StorageDead(_111);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_108);
        _106 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _107) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_107);
        _151 = discriminant(_106);
        switchInt(move _151) -> [0: bb56, 1: bb57, otherwise: bb18];
    }

    bb56: {
        StorageLive(_155);
        _155 = ((_106 as Continue).0: ());
        _105 = _155;
        StorageDead(_155);
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_10);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_2;
        _160 = &(*_161);
        _158 = SpotMarketMap::<'_>::get_ref(move _159, move _160) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_152);
        _152 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb694;
    }

    bb59: {
        StorageDead(_160);
        StorageDead(_159);
        _157 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _158) -> [return: bb60, unwind: bb733];
    }

    bb60: {
        StorageDead(_158);
        _162 = discriminant(_157);
        switchInt(move _162) -> [0: bb61, 1: bb62, otherwise: bb18];
    }

    bb61: {
        StorageLive(_166);
        _166 = move ((_157 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1574 = const true;
        _156 = move _166;
        StorageDead(_166);
        _1577 = discriminant(_157);
        StorageDead(_161);
        StorageDead(_157);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_156;
        _172 = <Ref<'_, SpotMarket> as Deref>::deref(move _173) -> [return: bb64, unwind: bb760];
    }

    bb62: {
        StorageLive(_163);
        _163 = ((_157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb63, unwind: bb761];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_163);
        _1575 = discriminant(_157);
        StorageDead(_161);
        StorageDead(_157);
        goto -> bb693;
    }

    bb64: {
        _171 = &(*_172);
        StorageDead(_173);
        StorageLive(_174);
        _174 = SpotOperation::Liquidation;
        _170 = SpotMarket::is_operation_paused(move _171, move _174) -> [return: bb65, unwind: bb760];
    }

    bb65: {
        switchInt(move _170) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_172);
        StorageLive(_176);
        _176 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _1563 = const _;
        _187 = &(*_1563);
        _186 = &(*_187);
        _185 = move _186 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_176;
        _194 = &(*_195);
        _193 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _194) -> [return: bb68, unwind: bb760];
    }

    bb67: {
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_172);
        StorageLive(_175);
        _175 = ();
        _169 = std::result::Result::<(), error::ErrorCode>::Ok(move _175);
        StorageDead(_175);
        goto -> bb80;
    }

    bb68: {
        StorageDead(_194);
        _192 = [move _193];
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = move _190 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_190);
        _184 = Arguments::<'_>::new_v1(move _185, move _189) -> [return: bb69, unwind: bb760];
    }

    bb69: {
        StorageDead(_189);
        StorageDead(_185);
        _183 = format(move _184) -> [return: bb70, unwind: bb760];
    }

    bb70: {
        StorageDead(_184);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_187);
        _182 = move _183;
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = <String as Deref>::deref(move _180) -> [return: bb71, unwind: bb726];
    }

    bb71: {
        _178 = &(*_179);
        StorageDead(_180);
        _177 = solana_program::log::sol_log(move _178) -> [return: bb72, unwind: bb726];
    }

    bb72: {
        StorageDead(_178);
        drop(_182) -> [return: bb73, unwind: bb760];
    }

    bb73: {
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_177);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _1562 = const _;
        _206 = &(*_1562);
        _205 = &(*_206);
        _204 = move _205 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_205);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_2;
        _213 = &(*_214);
        _212 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _213) -> [return: bb74, unwind: bb760];
    }

    bb74: {
        StorageDead(_213);
        _211 = [move _212];
        StorageDead(_212);
        _210 = &_211;
        _209 = &(*_210);
        _208 = move _209 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_209);
        _203 = Arguments::<'_>::new_v1(move _204, move _208) -> [return: bb75, unwind: bb760];
    }

    bb75: {
        StorageDead(_208);
        StorageDead(_204);
        _202 = format(move _203) -> [return: bb76, unwind: bb760];
    }

    bb76: {
        StorageDead(_203);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_206);
        _201 = move _202;
        StorageDead(_202);
        _200 = &_201;
        _199 = &(*_200);
        _198 = <String as Deref>::deref(move _199) -> [return: bb77, unwind: bb725];
    }

    bb77: {
        _197 = &(*_198);
        StorageDead(_199);
        _196 = solana_program::log::sol_log(move _197) -> [return: bb78, unwind: bb725];
    }

    bb78: {
        StorageDead(_197);
        drop(_201) -> [return: bb79, unwind: bb760];
    }

    bb79: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_196);
        StorageLive(_215);
        _215 = _176;
        _169 = std::result::Result::<(), error::ErrorCode>::Err(move _215);
        StorageDead(_215);
        StorageDead(_176);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_170);
        _168 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _169) -> [return: bb81, unwind: bb760];
    }

    bb81: {
        StorageDead(_169);
        _216 = discriminant(_168);
        switchInt(move _216) -> [0: bb82, 1: bb83, otherwise: bb18];
    }

    bb82: {
        StorageLive(_220);
        _220 = ((_168 as Continue).0: ());
        _167 = _220;
        StorageDead(_220);
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_221);
        StorageLive(_222);
        _1574 = const false;
        _222 = move _156;
        _221 = std::mem::drop::<Ref<'_, SpotMarket>>(move _222) -> [return: bb85, unwind: bb760];
    }

    bb83: {
        StorageLive(_217);
        _217 = ((_168 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb84, unwind: bb760];
    }

    bb84: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_168);
        StorageDead(_167);
        goto -> bb743;
    }

    bb85: {
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(*_9);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_1;
        _227 = &(*_228);
        _225 = PerpMarketMap::<'_>::get_ref(move _226, move _227) -> [return: bb86, unwind: bb760];
    }

    bb86: {
        StorageDead(_227);
        StorageDead(_226);
        _224 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _225) -> [return: bb87, unwind: bb760];
    }

    bb87: {
        StorageDead(_225);
        _229 = discriminant(_224);
        switchInt(move _229) -> [0: bb88, 1: bb89, otherwise: bb18];
    }

    bb88: {
        StorageLive(_233);
        _233 = move ((_224 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1573 = const true;
        _223 = move _233;
        StorageDead(_233);
        _1581 = discriminant(_224);
        StorageDead(_228);
        StorageDead(_224);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_223;
        _239 = <Ref<'_, PerpMarket> as Deref>::deref(move _240) -> [return: bb91, unwind: bb757];
    }

    bb89: {
        StorageLive(_230);
        _230 = ((_224 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb90, unwind: bb758];
    }

    bb90: {
        StorageDead(_232);
        StorageDead(_230);
        _1579 = discriminant(_224);
        StorageDead(_228);
        StorageDead(_224);
        goto -> bb692;
    }

    bb91: {
        _238 = &(*_239);
        StorageDead(_240);
        StorageLive(_241);
        _241 = PerpOperation::Liquidation;
        _237 = PerpMarket::is_operation_paused(move _238, move _241) -> [return: bb92, unwind: bb757];
    }

    bb92: {
        switchInt(move _237) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_239);
        StorageLive(_243);
        _243 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _1561 = const _;
        _254 = &(*_1561);
        _253 = &(*_254);
        _252 = move _253 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_253);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_243;
        _261 = &(*_262);
        _260 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _261) -> [return: bb95, unwind: bb757];
    }

    bb94: {
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_239);
        StorageLive(_242);
        _242 = ();
        _236 = std::result::Result::<(), error::ErrorCode>::Ok(move _242);
        StorageDead(_242);
        goto -> bb107;
    }

    bb95: {
        StorageDead(_261);
        _259 = [move _260];
        StorageDead(_260);
        _258 = &_259;
        _257 = &(*_258);
        _256 = move _257 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_257);
        _251 = Arguments::<'_>::new_v1(move _252, move _256) -> [return: bb96, unwind: bb757];
    }

    bb96: {
        StorageDead(_256);
        StorageDead(_252);
        _250 = format(move _251) -> [return: bb97, unwind: bb757];
    }

    bb97: {
        StorageDead(_251);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_254);
        _249 = move _250;
        StorageDead(_250);
        _248 = &_249;
        _247 = &(*_248);
        _246 = <String as Deref>::deref(move _247) -> [return: bb98, unwind: bb724];
    }

    bb98: {
        _245 = &(*_246);
        StorageDead(_247);
        _244 = solana_program::log::sol_log(move _245) -> [return: bb99, unwind: bb724];
    }

    bb99: {
        StorageDead(_245);
        drop(_249) -> [return: bb100, unwind: bb757];
    }

    bb100: {
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _1560 = const _;
        _273 = &(*_1560);
        _272 = &(*_273);
        _271 = move _272 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_1;
        _280 = &(*_281);
        _279 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _280) -> [return: bb101, unwind: bb757];
    }

    bb101: {
        StorageDead(_280);
        _278 = [move _279];
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = move _276 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_276);
        _270 = Arguments::<'_>::new_v1(move _271, move _275) -> [return: bb102, unwind: bb757];
    }

    bb102: {
        StorageDead(_275);
        StorageDead(_271);
        _269 = format(move _270) -> [return: bb103, unwind: bb757];
    }

    bb103: {
        StorageDead(_270);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_273);
        _268 = move _269;
        StorageDead(_269);
        _267 = &_268;
        _266 = &(*_267);
        _265 = <String as Deref>::deref(move _266) -> [return: bb104, unwind: bb723];
    }

    bb104: {
        _264 = &(*_265);
        StorageDead(_266);
        _263 = solana_program::log::sol_log(move _264) -> [return: bb105, unwind: bb723];
    }

    bb105: {
        StorageDead(_264);
        drop(_268) -> [return: bb106, unwind: bb757];
    }

    bb106: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_263);
        StorageLive(_282);
        _282 = _243;
        _236 = std::result::Result::<(), error::ErrorCode>::Err(move _282);
        StorageDead(_282);
        StorageDead(_243);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_237);
        _235 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _236) -> [return: bb108, unwind: bb757];
    }

    bb108: {
        StorageDead(_236);
        _283 = discriminant(_235);
        switchInt(move _283) -> [0: bb109, 1: bb110, otherwise: bb18];
    }

    bb109: {
        StorageLive(_287);
        _287 = ((_235 as Continue).0: ());
        _234 = _287;
        StorageDead(_287);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_288);
        StorageLive(_289);
        _1573 = const false;
        _289 = move _223;
        _288 = std::mem::drop::<Ref<'_, PerpMarket>>(move _289) -> [return: bb112, unwind: bb757];
    }

    bb110: {
        StorageLive(_284);
        _284 = ((_235 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_286);
        _286 = _284;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _286) -> [return: bb111, unwind: bb757];
    }

    bb111: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb741;
    }

    bb112: {
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &(*_5);
        StorageLive(_295);
        _295 = _1;
        _293 = User::get_perp_position(move _294, move _295) -> [return: bb113, unwind: bb757];
    }

    bb113: {
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &_1;
        _296 = {closure@programs/drift/src/controller/liquidation.rs:2823:55: 2823:58} { perp_market_index: move _297 };
        StorageDead(_297);
        _292 = std::result::Result::<&PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2823:55: 2823:58}>(move _293, move _296) -> [return: bb114, unwind: bb757];
    }

    bb114: {
        StorageDead(_296);
        StorageDead(_293);
        _291 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _292) -> [return: bb115, unwind: bb757];
    }

    bb115: {
        StorageDead(_292);
        _298 = discriminant(_291);
        switchInt(move _298) -> [0: bb116, 1: bb117, otherwise: bb18];
    }

    bb116: {
        StorageLive(_302);
        _302 = ((_291 as Continue).0: &state::user::PerpPosition);
        _290 = _302;
        StorageDead(_302);
        StorageDead(_291);
        StorageDead(_290);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &(*_5);
        StorageLive(_308);
        _308 = _2;
        _306 = User::get_spot_position(move _307, move _308) -> [return: bb119, unwind: bb757];
    }

    bb117: {
        StorageLive(_299);
        _299 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_301);
        _301 = _299;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _301) -> [return: bb118, unwind: bb757];
    }

    bb118: {
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_291);
        StorageDead(_290);
        goto -> bb741;
    }

    bb119: {
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_2;
        _309 = {closure@programs/drift/src/controller/liquidation.rs:2831:56: 2831:59} { asset_market_index: move _310 };
        StorageDead(_310);
        _305 = std::result::Result::<&SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2831:56: 2831:59}>(move _306, move _309) -> [return: bb120, unwind: bb757];
    }

    bb120: {
        StorageDead(_309);
        StorageDead(_306);
        _304 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _305) -> [return: bb121, unwind: bb757];
    }

    bb121: {
        StorageDead(_305);
        _311 = discriminant(_304);
        switchInt(move _311) -> [0: bb122, 1: bb123, otherwise: bb18];
    }

    bb122: {
        StorageLive(_315);
        _315 = ((_304 as Continue).0: &state::user::SpotPosition);
        _303 = _315;
        StorageDead(_315);
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &mut (*_7);
        StorageLive(_321);
        _321 = _1;
        _319 = User::force_get_perp_position_mut(move _320, move _321) -> [return: bb125, unwind: bb757];
    }

    bb123: {
        StorageLive(_312);
        _312 = ((_304 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_314);
        _314 = _312;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _314) -> [return: bb124, unwind: bb757];
    }

    bb124: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_304);
        StorageDead(_303);
        goto -> bb741;
    }

    bb125: {
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_322);
        _322 = {closure@programs/drift/src/controller/liquidation.rs:2841:18: 2841:21};
        _318 = std::result::Result::<&mut PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2841:18: 2841:21}>(move _319, move _322) -> [return: bb126, unwind: bb757];
    }

    bb126: {
        StorageDead(_322);
        StorageDead(_319);
        _317 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _318) -> [return: bb127, unwind: bb757];
    }

    bb127: {
        StorageDead(_318);
        _323 = discriminant(_317);
        switchInt(move _323) -> [0: bb128, 1: bb129, otherwise: bb18];
    }

    bb128: {
        StorageLive(_327);
        _327 = move ((_317 as Continue).0: &mut state::user::PerpPosition);
        _316 = move _327;
        StorageDead(_327);
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &mut (*_7);
        StorageLive(_333);
        _333 = _2;
        _331 = User::force_get_spot_position_mut(move _332, move _333) -> [return: bb131, unwind: bb757];
    }

    bb129: {
        StorageLive(_324);
        _324 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_326);
        _326 = _324;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _326) -> [return: bb130, unwind: bb757];
    }

    bb130: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb741;
    }

    bb131: {
        StorageDead(_333);
        StorageDead(_332);
        StorageLive(_334);
        _334 = {closure@programs/drift/src/controller/liquidation.rs:2848:18: 2848:21};
        _330 = std::result::Result::<&mut SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2848:18: 2848:21}>(move _331, move _334) -> [return: bb132, unwind: bb757];
    }

    bb132: {
        StorageDead(_334);
        StorageDead(_331);
        _329 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _330) -> [return: bb133, unwind: bb757];
    }

    bb133: {
        StorageDead(_330);
        _335 = discriminant(_329);
        switchInt(move _335) -> [0: bb134, 1: bb135, otherwise: bb18];
    }

    bb134: {
        StorageLive(_339);
        _339 = move ((_329 as Continue).0: &mut state::user::SpotPosition);
        _328 = move _339;
        StorageDead(_339);
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &mut (*_5);
        StorageLive(_344);
        _344 = &(*_6);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_9);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_1;
        _352 = &(*_353);
        _350 = PerpMarketMap::<'_>::get_ref_mut(move _351, move _352) -> [return: bb137, unwind: bb757];
    }

    bb135: {
        StorageLive(_336);
        _336 = ((_329 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_338);
        _338 = _336;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _338) -> [return: bb136, unwind: bb757];
    }

    bb136: {
        StorageDead(_338);
        StorageDead(_336);
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb741;
    }

    bb137: {
        StorageDead(_352);
        StorageDead(_351);
        _349 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _350) -> [return: bb138, unwind: bb757];
    }

    bb138: {
        _1572 = const true;
        StorageDead(_350);
        _354 = discriminant(_349);
        switchInt(move _354) -> [0: bb139, 1: bb140, otherwise: bb18];
    }

    bb139: {
        StorageLive(_358);
        _358 = move ((_349 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _348 = move _358;
        StorageDead(_358);
        _347 = &mut _348;
        _346 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _347) -> [return: bb142, unwind: bb722];
    }

    bb140: {
        StorageLive(_355);
        _355 = ((_349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_357);
        _357 = _355;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _357) -> [return: bb141, unwind: bb755];
    }

    bb141: {
        StorageDead(_357);
        StorageDead(_355);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        goto -> bb739;
    }

    bb142: {
        _345 = &mut (*_346);
        StorageDead(_347);
        StorageLive(_359);
        _359 = _12;
        _342 = controller::funding::settle_funding_payment(move _343, move _344, move _345, move _359) -> [return: bb143, unwind: bb722];
    }

    bb143: {
        StorageDead(_359);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        _341 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _342) -> [return: bb144, unwind: bb722];
    }

    bb144: {
        StorageDead(_342);
        _360 = discriminant(_341);
        switchInt(move _360) -> [0: bb145, 1: bb146, otherwise: bb18];
    }

    bb145: {
        StorageLive(_364);
        _364 = ((_341 as Continue).0: ());
        _340 = _364;
        StorageDead(_364);
        drop(_348) -> [return: bb734, unwind: bb755];
    }

    bb146: {
        StorageLive(_361);
        _361 = ((_341 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_363);
        _363 = _361;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _363) -> [return: bb147, unwind: bb722];
    }

    bb147: {
        StorageDead(_363);
        StorageDead(_361);
        drop(_348) -> [return: bb739, unwind: bb755];
    }

    bb148: {
        StorageDead(_377);
        StorageDead(_376);
        _374 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _375) -> [return: bb149, unwind: bb757];
    }

    bb149: {
        _1571 = const true;
        StorageDead(_375);
        _379 = discriminant(_374);
        switchInt(move _379) -> [0: bb150, 1: bb151, otherwise: bb18];
    }

    bb150: {
        StorageLive(_383);
        _383 = move ((_374 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _373 = move _383;
        StorageDead(_383);
        _372 = &mut _373;
        _371 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _372) -> [return: bb153, unwind: bb721];
    }

    bb151: {
        StorageLive(_380);
        _380 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_382);
        _382 = _380;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _382) -> [return: bb152, unwind: bb754];
    }

    bb152: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_367);
        goto -> bb738;
    }

    bb153: {
        _370 = &mut (*_371);
        StorageDead(_372);
        StorageLive(_384);
        _384 = _12;
        _367 = controller::funding::settle_funding_payment(move _368, move _369, move _370, move _384) -> [return: bb154, unwind: bb721];
    }

    bb154: {
        StorageDead(_384);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        _366 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _367) -> [return: bb155, unwind: bb721];
    }

    bb155: {
        StorageDead(_367);
        _385 = discriminant(_366);
        switchInt(move _385) -> [0: bb156, 1: bb157, otherwise: bb18];
    }

    bb156: {
        StorageLive(_389);
        _389 = ((_366 as Continue).0: ());
        _365 = _389;
        StorageDead(_389);
        drop(_373) -> [return: bb735, unwind: bb754];
    }

    bb157: {
        StorageLive(_386);
        _386 = ((_366 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_388);
        _388 = _386;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _388) -> [return: bb158, unwind: bb721];
    }

    bb158: {
        StorageDead(_388);
        StorageDead(_386);
        drop(_373) -> [return: bb738, unwind: bb754];
    }

    bb159: {
        StorageDead(_401);
        StorageDead(_400);
        _398 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _399) -> [return: bb160, unwind: bb757];
    }

    bb160: {
        StorageDead(_399);
        _403 = discriminant(_398);
        switchInt(move _403) -> [0: bb161, 1: bb162, otherwise: bb18];
    }

    bb161: {
        StorageLive(_407);
        _407 = move ((_398 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _397 = move _407;
        StorageDead(_407);
        _1589 = discriminant(_398);
        StorageDead(_402);
        StorageDead(_398);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &mut (*_11);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &_397;
        _418 = <RefMut<'_, SpotMarket> as Deref>::deref(move _419) -> [return: bb164, unwind: bb720];
    }

    bb162: {
        StorageLive(_404);
        _404 = ((_398 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_406);
        _406 = _404;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _406) -> [return: bb163, unwind: bb753];
    }

    bb163: {
        StorageDead(_406);
        StorageDead(_404);
        _1587 = discriminant(_398);
        StorageDead(_402);
        StorageDead(_398);
        goto -> bb690;
    }

    bb164: {
        _417 = &(*_418);
        StorageDead(_419);
        _416 = SpotMarket::oracle_id(move _417) -> [return: bb165, unwind: bb720];
    }

    bb165: {
        StorageDead(_417);
        _415 = &_416;
        _414 = &(*_415);
        _412 = OracleMap::<'_>::get_price_data_and_guard_rails(move _413, move _414) -> [return: bb166, unwind: bb720];
    }

    bb166: {
        StorageDead(_414);
        StorageDead(_413);
        _411 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as Try>::branch(move _412) -> [return: bb167, unwind: bb720];
    }

    bb167: {
        StorageDead(_412);
        _420 = discriminant(_411);
        switchInt(move _420) -> [0: bb168, 1: bb169, otherwise: bb18];
    }

    bb168: {
        StorageLive(_424);
        _424 = ((_411 as Continue).0: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails));
        _410 = _424;
        StorageDead(_424);
        StorageLive(_408);
        _408 = (_410.0: &state::oracle::OraclePriceData);
        StorageLive(_409);
        _409 = (_410.1: &state::state::ValidityGuardRails);
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &mut _397;
        _430 = &mut (*_431);
        _429 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _430) -> [return: bb171, unwind: bb720];
    }

    bb169: {
        StorageLive(_421);
        _421 = ((_411 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_423);
        _423 = _421;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _423) -> [return: bb170, unwind: bb720];
    }

    bb170: {
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb689;
    }

    bb171: {
        _428 = &mut (*_429);
        StorageDead(_430);
        StorageLive(_432);
        _432 = &(*_408);
        StorageLive(_433);
        _433 = &(*_409);
        StorageLive(_434);
        _434 = _12;
        StorageLive(_435);
        StorageLive(_436);
        _436 = DriftAction::Liquidate;
        _435 = Option::<DriftAction>::Some(move _436);
        StorageDead(_436);
        _427 = update_spot_market_and_check_validity(move _428, move _432, move _433, move _434, move _435) -> [return: bb172, unwind: bb720];
    }

    bb172: {
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_428);
        _426 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _427) -> [return: bb173, unwind: bb720];
    }

    bb173: {
        StorageDead(_427);
        _437 = discriminant(_426);
        switchInt(move _437) -> [0: bb174, 1: bb175, otherwise: bb18];
    }

    bb174: {
        StorageLive(_441);
        _441 = ((_426 as Continue).0: ());
        _425 = _441;
        StorageDead(_441);
        StorageDead(_431);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        StorageLive(_442);
        _442 = ((*_408).0: i64);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &(*_5);
        StorageLive(_447);
        _447 = _2;
        _445 = User::get_spot_position(move _446, move _447) -> [return: bb177, unwind: bb720];
    }

    bb175: {
        StorageLive(_438);
        _438 = ((_426 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_440);
        _440 = _438;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _440) -> [return: bb176, unwind: bb720];
    }

    bb176: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_431);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        goto -> bb688;
    }

    bb177: {
        StorageDead(_447);
        StorageDead(_446);
        _444 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _445) -> [return: bb178, unwind: bb720];
    }

    bb178: {
        StorageDead(_445);
        _448 = discriminant(_444);
        switchInt(move _448) -> [0: bb179, 1: bb180, otherwise: bb18];
    }

    bb179: {
        StorageLive(_452);
        _452 = ((_444 as Continue).0: &state::user::SpotPosition);
        _443 = _452;
        StorageDead(_452);
        StorageDead(_444);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _457 = &((*_443).5: state::spot_market::SpotBalanceType);
        StorageLive(_458);
        _1559 = const _;
        _458 = &(*_1559);
        _456 = <SpotBalanceType as PartialEq>::eq(move _457, move _458) -> [return: bb182, unwind: bb720];
    }

    bb180: {
        StorageLive(_449);
        _449 = ((_444 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_451);
        _451 = _449;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _451) -> [return: bb181, unwind: bb720];
    }

    bb181: {
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_444);
        goto -> bb687;
    }

    bb182: {
        switchInt(move _456) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_460);
        _460 = ();
        _455 = std::result::Result::<(), error::ErrorCode>::Ok(move _460);
        StorageDead(_460);
        goto -> bb192;
    }

    bb184: {
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_461);
        _461 = error::ErrorCode::WrongSpotBalanceType;
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _1558 = const _;
        _472 = &(*_1558);
        _471 = &(*_472);
        _470 = move _471 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_471);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_461;
        _479 = &(*_480);
        _478 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _479) -> [return: bb185, unwind: bb720];
    }

    bb185: {
        StorageDead(_479);
        _477 = [move _478];
        StorageDead(_478);
        _476 = &_477;
        _475 = &(*_476);
        _474 = move _475 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_475);
        _469 = Arguments::<'_>::new_v1(move _470, move _474) -> [return: bb186, unwind: bb720];
    }

    bb186: {
        StorageDead(_474);
        StorageDead(_470);
        _468 = format(move _469) -> [return: bb187, unwind: bb720];
    }

    bb187: {
        StorageDead(_469);
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_472);
        _467 = move _468;
        StorageDead(_468);
        _466 = &_467;
        _465 = &(*_466);
        _464 = <String as Deref>::deref(move _465) -> [return: bb188, unwind: bb719];
    }

    bb188: {
        _463 = &(*_464);
        StorageDead(_465);
        _462 = solana_program::log::sol_log(move _463) -> [return: bb189, unwind: bb719];
    }

    bb189: {
        StorageDead(_463);
        drop(_467) -> [return: bb190, unwind: bb720];
    }

    bb190: {
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_462);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = const "User did not have a deposit for the asset market";
        _482 = &(*_483);
        _481 = solana_program::log::sol_log(move _482) -> [return: bb191, unwind: bb720];
    }

    bb191: {
        StorageDead(_482);
        StorageDead(_483);
        StorageDead(_481);
        StorageLive(_484);
        _484 = _461;
        _455 = std::result::Result::<(), error::ErrorCode>::Err(move _484);
        StorageDead(_484);
        StorageDead(_461);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_456);
        _454 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _455) -> [return: bb193, unwind: bb720];
    }

    bb193: {
        StorageDead(_455);
        _485 = discriminant(_454);
        switchInt(move _485) -> [0: bb194, 1: bb195, otherwise: bb18];
    }

    bb194: {
        StorageLive(_489);
        _489 = ((_454 as Continue).0: ());
        _453 = _489;
        StorageDead(_489);
        StorageDead(_454);
        StorageDead(_453);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &(*_443);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        _497 = &_397;
        _496 = &(*_497);
        _495 = <RefMut<'_, SpotMarket> as Deref>::deref(move _496) -> [return: bb197, unwind: bb720];
    }

    bb195: {
        StorageLive(_486);
        _486 = ((_454 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_488);
        _488 = _486;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _488) -> [return: bb196, unwind: bb720];
    }

    bb196: {
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_454);
        StorageDead(_453);
        goto -> bb687;
    }

    bb197: {
        _494 = &(*_495);
        StorageDead(_496);
        _492 = SpotPosition::get_token_amount(move _493, move _494) -> [return: bb198, unwind: bb720];
    }

    bb198: {
        StorageDead(_494);
        StorageDead(_493);
        _491 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _492) -> [return: bb199, unwind: bb720];
    }

    bb199: {
        StorageDead(_492);
        _498 = discriminant(_491);
        switchInt(move _498) -> [0: bb200, 1: bb201, otherwise: bb18];
    }

    bb200: {
        StorageLive(_502);
        _502 = ((_491 as Continue).0: u128);
        _490 = _502;
        StorageDead(_502);
        StorageDead(_497);
        StorageDead(_495);
        StorageDead(_491);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = _490;
        _506 = Ne(move _507, const 0_u128);
        switchInt(move _506) -> [0: bb204, otherwise: bb203];
    }

    bb201: {
        StorageLive(_499);
        _499 = ((_491 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_501);
        _501 = _499;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _501) -> [return: bb202, unwind: bb720];
    }

    bb202: {
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_497);
        StorageDead(_495);
        StorageDead(_491);
        goto -> bb686;
    }

    bb203: {
        StorageDead(_507);
        StorageLive(_508);
        _508 = ();
        _505 = std::result::Result::<(), error::ErrorCode>::Ok(move _508);
        StorageDead(_508);
        goto -> bb217;
    }

    bb204: {
        StorageDead(_507);
        StorageLive(_509);
        _509 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _1557 = const _;
        _520 = &(*_1557);
        _519 = &(*_520);
        _518 = move _519 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_519);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = &_509;
        _527 = &(*_528);
        _526 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _527) -> [return: bb205, unwind: bb720];
    }

    bb205: {
        StorageDead(_527);
        _525 = [move _526];
        StorageDead(_526);
        _524 = &_525;
        _523 = &(*_524);
        _522 = move _523 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_523);
        _517 = Arguments::<'_>::new_v1(move _518, move _522) -> [return: bb206, unwind: bb720];
    }

    bb206: {
        StorageDead(_522);
        StorageDead(_518);
        _516 = format(move _517) -> [return: bb207, unwind: bb720];
    }

    bb207: {
        StorageDead(_517);
        StorageDead(_528);
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_520);
        _515 = move _516;
        StorageDead(_516);
        _514 = &_515;
        _513 = &(*_514);
        _512 = <String as Deref>::deref(move _513) -> [return: bb208, unwind: bb718];
    }

    bb208: {
        _511 = &(*_512);
        StorageDead(_513);
        _510 = solana_program::log::sol_log(move _511) -> [return: bb209, unwind: bb718];
    }

    bb209: {
        StorageDead(_511);
        drop(_515) -> [return: bb210, unwind: bb720];
    }

    bb210: {
        StorageDead(_515);
        StorageDead(_514);
        StorageDead(_512);
        StorageDead(_510);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _1556 = const _;
        _539 = &(*_1556);
        _538 = &(*_539);
        _537 = move _538 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_538);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _547 = &_2;
        _546 = &(*_547);
        _545 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _546) -> [return: bb211, unwind: bb720];
    }

    bb211: {
        StorageDead(_546);
        _544 = [move _545];
        StorageDead(_545);
        _543 = &_544;
        _542 = &(*_543);
        _541 = move _542 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_542);
        _536 = Arguments::<'_>::new_v1(move _537, move _541) -> [return: bb212, unwind: bb720];
    }

    bb212: {
        StorageDead(_541);
        StorageDead(_537);
        _535 = format(move _536) -> [return: bb213, unwind: bb720];
    }

    bb213: {
        StorageDead(_536);
        StorageDead(_547);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_539);
        _534 = move _535;
        StorageDead(_535);
        _533 = &_534;
        _532 = &(*_533);
        _531 = <String as Deref>::deref(move _532) -> [return: bb214, unwind: bb717];
    }

    bb214: {
        _530 = &(*_531);
        StorageDead(_532);
        _529 = solana_program::log::sol_log(move _530) -> [return: bb215, unwind: bb717];
    }

    bb215: {
        StorageDead(_530);
        drop(_534) -> [return: bb216, unwind: bb720];
    }

    bb216: {
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_529);
        StorageLive(_548);
        _548 = _509;
        _505 = std::result::Result::<(), error::ErrorCode>::Err(move _548);
        StorageDead(_548);
        StorageDead(_509);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_506);
        _504 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _505) -> [return: bb218, unwind: bb720];
    }

    bb218: {
        StorageDead(_505);
        _549 = discriminant(_504);
        switchInt(move _549) -> [0: bb219, 1: bb220, otherwise: bb18];
    }

    bb219: {
        StorageLive(_553);
        _553 = ((_504 as Continue).0: ());
        _503 = _553;
        StorageDead(_553);
        StorageDead(_504);
        StorageDead(_503);
        StorageLive(_554);
        _554 = _490;
        StorageLive(_555);
        _555 = _442;
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &_397;
        _557 = <RefMut<'_, SpotMarket> as Deref>::deref(move _558) -> [return: bb222, unwind: bb720];
    }

    bb220: {
        StorageLive(_550);
        _550 = ((_504 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_552);
        _552 = _550;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _552) -> [return: bb221, unwind: bb720];
    }

    bb221: {
        StorageDead(_552);
        StorageDead(_550);
        StorageDead(_504);
        StorageDead(_503);
        goto -> bb686;
    }

    bb222: {
        StorageDead(_558);
        _556 = ((*_557).46: state::spot_market::AssetTier);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        _561 = &_397;
        _560 = <RefMut<'_, SpotMarket> as Deref>::deref(move _561) -> [return: bb223, unwind: bb720];
    }

    bb223: {
        StorageDead(_561);
        _559 = ((*_560).41: u32);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _564 = &_397;
        _563 = <RefMut<'_, SpotMarket> as Deref>::deref(move _564) -> [return: bb224, unwind: bb720];
    }

    bb224: {
        StorageDead(_564);
        _562 = ((*_563).32: u32);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        _570 = &_397;
        _569 = <RefMut<'_, SpotMarket> as Deref>::deref(move _570) -> [return: bb225, unwind: bb720];
    }

    bb225: {
        StorageDead(_570);
        _568 = ((*_569).36: u32);
        StorageLive(_571);
        _571 = LiquidationMultiplierType::Premium;
        _567 = calculate_liquidation_multiplier(move _568, move _571) -> [return: bb226, unwind: bb720];
    }

    bb226: {
        StorageDead(_571);
        StorageDead(_568);
        _566 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _567) -> [return: bb227, unwind: bb720];
    }

    bb227: {
        StorageDead(_567);
        _572 = discriminant(_566);
        switchInt(move _572) -> [0: bb228, 1: bb229, otherwise: bb18];
    }

    bb228: {
        StorageLive(_576);
        _576 = ((_566 as Continue).0: u32);
        _565 = _576;
        StorageDead(_576);
        _396 = (move _554, move _555, move _556, move _559, move _562, move _565);
        StorageDead(_565);
        StorageDead(_562);
        StorageDead(_559);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_554);
        StorageDead(_490);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_409);
        StorageDead(_408);
        drop(_397) -> [return: bb231, unwind: bb757];
    }

    bb229: {
        StorageLive(_573);
        _573 = ((_566 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_575);
        _575 = _573;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _575) -> [return: bb230, unwind: bb720];
    }

    bb230: {
        StorageDead(_575);
        StorageDead(_573);
        StorageDead(_565);
        StorageDead(_562);
        StorageDead(_559);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_554);
        StorageDead(_490);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_409);
        StorageDead(_408);
        drop(_397) -> [return: bb685, unwind: bb757];
    }

    bb231: {
        StorageDead(_397);
        StorageLive(_390);
        _390 = (_396.0: u128);
        StorageLive(_391);
        _391 = (_396.1: i64);
        StorageLive(_392);
        _392 = (_396.2: state::spot_market::AssetTier);
        StorageLive(_393);
        _393 = (_396.3: u32);
        StorageLive(_394);
        _394 = (_396.4: u32);
        StorageLive(_395);
        _395 = (_396.5: u32);
        StorageDead(_569);
        StorageDead(_566);
        StorageDead(_563);
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_396);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        _587 = &(*_5);
        StorageLive(_588);
        _588 = _1;
        _586 = User::get_perp_position(move _587, move _588) -> [return: bb232, unwind: bb757];
    }

    bb232: {
        StorageDead(_588);
        StorageDead(_587);
        _585 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _586) -> [return: bb233, unwind: bb757];
    }

    bb233: {
        StorageDead(_586);
        _589 = discriminant(_585);
        switchInt(move _589) -> [0: bb234, 1: bb235, otherwise: bb18];
    }

    bb234: {
        StorageLive(_593);
        _593 = ((_585 as Continue).0: &state::user::PerpPosition);
        _584 = _593;
        StorageDead(_593);
        StorageDead(_585);
        StorageLive(_594);
        _594 = ((*_584).1: i64);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = _594;
        _598 = Eq(move _599, const 0_i64);
        switchInt(move _598) -> [0: bb238, otherwise: bb237];
    }

    bb235: {
        StorageLive(_590);
        _590 = ((_585 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_592);
        _592 = _590;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _592) -> [return: bb236, unwind: bb757];
    }

    bb236: {
        StorageDead(_592);
        StorageDead(_590);
        StorageDead(_585);
        goto -> bb682;
    }

    bb237: {
        StorageDead(_599);
        StorageLive(_600);
        _600 = ();
        _597 = std::result::Result::<(), error::ErrorCode>::Ok(move _600);
        StorageDead(_600);
        goto -> bb251;
    }

    bb238: {
        StorageDead(_599);
        StorageLive(_601);
        _601 = error::ErrorCode::InvalidPerpPositionToLiquidate;
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        _1555 = const _;
        _612 = &(*_1555);
        _611 = &(*_612);
        _610 = move _611 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_611);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        _620 = &_601;
        _619 = &(*_620);
        _618 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _619) -> [return: bb239, unwind: bb757];
    }

    bb239: {
        StorageDead(_619);
        _617 = [move _618];
        StorageDead(_618);
        _616 = &_617;
        _615 = &(*_616);
        _614 = move _615 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_615);
        _609 = Arguments::<'_>::new_v1(move _610, move _614) -> [return: bb240, unwind: bb757];
    }

    bb240: {
        StorageDead(_614);
        StorageDead(_610);
        _608 = format(move _609) -> [return: bb241, unwind: bb757];
    }

    bb241: {
        StorageDead(_609);
        StorageDead(_620);
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_612);
        _607 = move _608;
        StorageDead(_608);
        _606 = &_607;
        _605 = &(*_606);
        _604 = <String as Deref>::deref(move _605) -> [return: bb242, unwind: bb716];
    }

    bb242: {
        _603 = &(*_604);
        StorageDead(_605);
        _602 = solana_program::log::sol_log(move _603) -> [return: bb243, unwind: bb716];
    }

    bb243: {
        StorageDead(_603);
        drop(_607) -> [return: bb244, unwind: bb757];
    }

    bb244: {
        StorageDead(_607);
        StorageDead(_606);
        StorageDead(_604);
        StorageDead(_602);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _1554 = const _;
        _631 = &(*_1554);
        _630 = &(*_631);
        _629 = move _630 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_630);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &_594;
        _638 = &(*_639);
        _637 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _638) -> [return: bb245, unwind: bb757];
    }

    bb245: {
        StorageDead(_638);
        _636 = [move _637];
        StorageDead(_637);
        _635 = &_636;
        _634 = &(*_635);
        _633 = move _634 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_634);
        _628 = Arguments::<'_>::new_v1(move _629, move _633) -> [return: bb246, unwind: bb757];
    }

    bb246: {
        StorageDead(_633);
        StorageDead(_629);
        _627 = format(move _628) -> [return: bb247, unwind: bb757];
    }

    bb247: {
        StorageDead(_628);
        StorageDead(_639);
        StorageDead(_636);
        StorageDead(_635);
        StorageDead(_631);
        _626 = move _627;
        StorageDead(_627);
        _625 = &_626;
        _624 = &(*_625);
        _623 = <String as Deref>::deref(move _624) -> [return: bb248, unwind: bb715];
    }

    bb248: {
        _622 = &(*_623);
        StorageDead(_624);
        _621 = solana_program::log::sol_log(move _622) -> [return: bb249, unwind: bb715];
    }

    bb249: {
        StorageDead(_622);
        drop(_626) -> [return: bb250, unwind: bb757];
    }

    bb250: {
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_621);
        StorageLive(_640);
        _640 = _601;
        _597 = std::result::Result::<(), error::ErrorCode>::Err(move _640);
        StorageDead(_640);
        StorageDead(_601);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_598);
        _596 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _597) -> [return: bb252, unwind: bb757];
    }

    bb252: {
        StorageDead(_597);
        _641 = discriminant(_596);
        switchInt(move _641) -> [0: bb253, 1: bb254, otherwise: bb18];
    }

    bb253: {
        StorageLive(_645);
        _645 = ((_596 as Continue).0: ());
        _595 = _645;
        StorageDead(_645);
        StorageDead(_596);
        StorageDead(_595);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = ((*_584).2: i64);
        _648 = <i64 as Cast>::cast::<i128>(move _649) -> [return: bb256, unwind: bb757];
    }

    bb254: {
        StorageLive(_642);
        _642 = ((_596 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_644);
        _644 = _642;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _644) -> [return: bb255, unwind: bb757];
    }

    bb255: {
        StorageDead(_644);
        StorageDead(_642);
        StorageDead(_596);
        StorageDead(_595);
        goto -> bb681;
    }

    bb256: {
        StorageDead(_649);
        _647 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _648) -> [return: bb257, unwind: bb757];
    }

    bb257: {
        StorageDead(_648);
        _650 = discriminant(_647);
        switchInt(move _650) -> [0: bb258, 1: bb259, otherwise: bb18];
    }

    bb258: {
        StorageLive(_654);
        _654 = ((_647 as Continue).0: i128);
        _646 = _654;
        StorageDead(_654);
        StorageDead(_647);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = _646;
        _658 = Lt(move _659, const 0_i128);
        switchInt(move _658) -> [0: bb262, otherwise: bb261];
    }

    bb259: {
        StorageLive(_651);
        _651 = ((_647 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_653);
        _653 = _651;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _653) -> [return: bb260, unwind: bb757];
    }

    bb260: {
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_647);
        goto -> bb680;
    }

    bb261: {
        StorageDead(_659);
        StorageLive(_660);
        _660 = ();
        _657 = std::result::Result::<(), error::ErrorCode>::Ok(move _660);
        StorageDead(_660);
        goto -> bb270;
    }

    bb262: {
        StorageDead(_659);
        StorageLive(_661);
        _661 = error::ErrorCode::InvalidPerpPositionToLiquidate;
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        _1553 = const _;
        _672 = &(*_1553);
        _671 = &(*_672);
        _670 = move _671 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_671);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        _680 = &_661;
        _679 = &(*_680);
        _678 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _679) -> [return: bb263, unwind: bb757];
    }

    bb263: {
        StorageDead(_679);
        _677 = [move _678];
        StorageDead(_678);
        _676 = &_677;
        _675 = &(*_676);
        _674 = move _675 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_675);
        _669 = Arguments::<'_>::new_v1(move _670, move _674) -> [return: bb264, unwind: bb757];
    }

    bb264: {
        StorageDead(_674);
        StorageDead(_670);
        _668 = format(move _669) -> [return: bb265, unwind: bb757];
    }

    bb265: {
        StorageDead(_669);
        StorageDead(_680);
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_672);
        _667 = move _668;
        StorageDead(_668);
        _666 = &_667;
        _665 = &(*_666);
        _664 = <String as Deref>::deref(move _665) -> [return: bb266, unwind: bb714];
    }

    bb266: {
        _663 = &(*_664);
        StorageDead(_665);
        _662 = solana_program::log::sol_log(move _663) -> [return: bb267, unwind: bb714];
    }

    bb267: {
        StorageDead(_663);
        drop(_667) -> [return: bb268, unwind: bb757];
    }

    bb268: {
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_664);
        StorageDead(_662);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        _683 = const "Perp position must have negative pnl";
        _682 = &(*_683);
        _681 = solana_program::log::sol_log(move _682) -> [return: bb269, unwind: bb757];
    }

    bb269: {
        StorageDead(_682);
        StorageDead(_683);
        StorageDead(_681);
        StorageLive(_684);
        _684 = _661;
        _657 = std::result::Result::<(), error::ErrorCode>::Err(move _684);
        StorageDead(_684);
        StorageDead(_661);
        goto -> bb270;
    }

    bb270: {
        StorageDead(_658);
        _656 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _657) -> [return: bb271, unwind: bb757];
    }

    bb271: {
        StorageDead(_657);
        _685 = discriminant(_656);
        switchInt(move _685) -> [0: bb272, 1: bb273, otherwise: bb18];
    }

    bb272: {
        StorageLive(_689);
        _689 = ((_656 as Continue).0: ());
        _655 = _689;
        StorageDead(_689);
        StorageDead(_656);
        StorageDead(_655);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        _693 = &(*_9);
        StorageLive(_694);
        StorageLive(_695);
        _695 = &_1;
        _694 = &(*_695);
        _692 = PerpMarketMap::<'_>::get_ref(move _693, move _694) -> [return: bb275, unwind: bb757];
    }

    bb273: {
        StorageLive(_686);
        _686 = ((_656 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_688);
        _688 = _686;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _688) -> [return: bb274, unwind: bb757];
    }

    bb274: {
        StorageDead(_688);
        StorageDead(_686);
        StorageDead(_656);
        StorageDead(_655);
        goto -> bb680;
    }

    bb275: {
        StorageDead(_694);
        StorageDead(_693);
        _691 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _692) -> [return: bb276, unwind: bb757];
    }

    bb276: {
        StorageDead(_692);
        _696 = discriminant(_691);
        switchInt(move _696) -> [0: bb277, 1: bb278, otherwise: bb18];
    }

    bb277: {
        StorageLive(_700);
        _700 = move ((_691 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _690 = move _700;
        StorageDead(_700);
        _1593 = discriminant(_691);
        StorageDead(_695);
        StorageDead(_691);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        _704 = &(*_10);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _708 = &_690;
        _707 = <Ref<'_, PerpMarket> as Deref>::deref(move _708) -> [return: bb280, unwind: bb713];
    }

    bb278: {
        StorageLive(_697);
        _697 = ((_691 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_699);
        _699 = _697;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _699) -> [return: bb279, unwind: bb752];
    }

    bb279: {
        StorageDead(_699);
        StorageDead(_697);
        _1591 = discriminant(_691);
        StorageDead(_695);
        StorageDead(_691);
        goto -> bb679;
    }

    bb280: {
        StorageDead(_708);
        _706 = &((*_707).26: u16);
        _705 = &(*_706);
        _703 = SpotMarketMap::<'_>::get_ref(move _704, move _705) -> [return: bb281, unwind: bb713];
    }

    bb281: {
        StorageDead(_705);
        StorageDead(_704);
        _702 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _703) -> [return: bb282, unwind: bb713];
    }

    bb282: {
        StorageDead(_703);
        _709 = discriminant(_702);
        switchInt(move _709) -> [0: bb283, 1: bb284, otherwise: bb18];
    }

    bb283: {
        StorageLive(_713);
        _713 = move ((_702 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _701 = move _713;
        StorageDead(_713);
        _1597 = discriminant(_702);
        StorageDead(_707);
        StorageDead(_706);
        StorageDead(_702);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _718 = &mut (*_11);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        _724 = &_701;
        _723 = <Ref<'_, SpotMarket> as Deref>::deref(move _724) -> [return: bb286, unwind: bb712];
    }

    bb284: {
        StorageLive(_710);
        _710 = ((_702 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_712);
        _712 = _710;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _712) -> [return: bb285, unwind: bb751];
    }

    bb285: {
        StorageDead(_712);
        StorageDead(_710);
        _1595 = discriminant(_702);
        StorageDead(_707);
        StorageDead(_706);
        StorageDead(_702);
        goto -> bb678;
    }

    bb286: {
        _722 = &(*_723);
        StorageDead(_724);
        _721 = SpotMarket::oracle_id(move _722) -> [return: bb287, unwind: bb712];
    }

    bb287: {
        StorageDead(_722);
        _720 = &_721;
        _719 = &(*_720);
        _717 = OracleMap::<'_>::get_price_data(move _718, move _719) -> [return: bb288, unwind: bb712];
    }

    bb288: {
        StorageDead(_719);
        StorageDead(_718);
        _716 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _717) -> [return: bb289, unwind: bb712];
    }

    bb289: {
        StorageDead(_717);
        _725 = discriminant(_716);
        switchInt(move _725) -> [0: bb290, 1: bb291, otherwise: bb18];
    }

    bb290: {
        StorageLive(_729);
        _729 = ((_716 as Continue).0: &state::oracle::OraclePriceData);
        _715 = _729;
        StorageDead(_729);
        _714 = ((*_715).0: i64);
        StorageDead(_723);
        StorageDead(_721);
        StorageDead(_720);
        StorageDead(_716);
        StorageDead(_715);
        StorageLive(_730);
        StorageLive(_731);
        _731 = _646;
        _730 = core::num::<impl i128>::unsigned_abs(move _731) -> [return: bb293, unwind: bb712];
    }

    bb291: {
        StorageLive(_726);
        _726 = ((_716 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_728);
        _728 = _726;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _728) -> [return: bb292, unwind: bb712];
    }

    bb292: {
        StorageDead(_728);
        StorageDead(_726);
        StorageDead(_723);
        StorageDead(_721);
        StorageDead(_720);
        StorageDead(_716);
        StorageDead(_715);
        StorageDead(_714);
        drop(_701) -> [return: bb678, unwind: bb713];
    }

    bb293: {
        StorageDead(_731);
        StorageLive(_732);
        _732 = _714;
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _735 = &_690;
        _734 = <Ref<'_, PerpMarket> as Deref>::deref(move _735) -> [return: bb294, unwind: bb712];
    }

    bb294: {
        StorageDead(_735);
        _733 = ((*_734).24: state::perp_market::ContractTier);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = &_690;
        _740 = <Ref<'_, PerpMarket> as Deref>::deref(move _741) -> [return: bb295, unwind: bb712];
    }

    bb295: {
        StorageDead(_741);
        _739 = ((*_740).13: u32);
        StorageLive(_742);
        _742 = LiquidationMultiplierType::Discount;
        _738 = calculate_liquidation_multiplier(move _739, move _742) -> [return: bb296, unwind: bb712];
    }

    bb296: {
        StorageDead(_742);
        StorageDead(_739);
        _737 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _738) -> [return: bb297, unwind: bb712];
    }

    bb297: {
        StorageDead(_738);
        _743 = discriminant(_737);
        switchInt(move _743) -> [0: bb298, 1: bb299, otherwise: bb18];
    }

    bb298: {
        StorageLive(_747);
        _747 = ((_737 as Continue).0: u32);
        _736 = _747;
        StorageDead(_747);
        _583 = (move _730, move _732, move _733, const 6_u32, const _, move _736);
        StorageDead(_736);
        StorageDead(_733);
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_714);
        drop(_701) -> [return: bb301, unwind: bb713];
    }

    bb299: {
        StorageLive(_744);
        _744 = ((_737 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_746);
        _746 = _744;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _746) -> [return: bb300, unwind: bb712];
    }

    bb300: {
        StorageDead(_746);
        StorageDead(_744);
        StorageDead(_736);
        StorageDead(_733);
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_714);
        drop(_701) -> [return: bb676, unwind: bb713];
    }

    bb301: {
        StorageDead(_701);
        drop(_690) -> [return: bb302, unwind: bb757];
    }

    bb302: {
        StorageDead(_690);
        StorageDead(_646);
        StorageDead(_594);
        StorageDead(_584);
        StorageLive(_577);
        _577 = (_583.0: u128);
        StorageLive(_578);
        _578 = (_583.1: i64);
        StorageLive(_579);
        _579 = (_583.2: state::perp_market::ContractTier);
        StorageLive(_580);
        _580 = (_583.3: u32);
        StorageLive(_581);
        _581 = (_583.4: u32);
        StorageLive(_582);
        _582 = (_583.5: u32);
        StorageDead(_740);
        StorageDead(_737);
        StorageDead(_734);
        StorageDead(_583);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        _751 = &(*_5);
        StorageLive(_752);
        _752 = &(*_9);
        StorageLive(_753);
        _753 = &(*_10);
        StorageLive(_754);
        _754 = &mut (*_11);
        StorageLive(_755);
        StorageLive(_756);
        _756 = _14;
        _755 = MarginContext::liquidation(move _756) -> [return: bb303, unwind: bb757];
    }

    bb303: {
        StorageDead(_756);
        _750 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _751, move _752, move _753, move _754, move _755) -> [return: bb304, unwind: bb757];
    }

    bb304: {
        StorageDead(_755);
        StorageDead(_754);
        StorageDead(_753);
        StorageDead(_752);
        StorageDead(_751);
        _749 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _750) -> [return: bb305, unwind: bb757];
    }

    bb305: {
        StorageDead(_750);
        _757 = discriminant(_749);
        switchInt(move _757) -> [0: bb306, 1: bb307, otherwise: bb18];
    }

    bb306: {
        StorageLive(_761);
        _761 = ((_749 as Continue).0: state::margin_calculation::MarginCalculation);
        _748 = _761;
        StorageDead(_761);
        StorageDead(_749);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        _764 = &(*_5);
        _763 = User::is_being_liquidated(move _764) -> [return: bb309, unwind: bb757];
    }

    bb307: {
        StorageLive(_758);
        _758 = ((_749 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_760);
        _760 = _758;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _760) -> [return: bb308, unwind: bb757];
    }

    bb308: {
        StorageDead(_760);
        StorageDead(_758);
        StorageDead(_749);
        goto -> bb675;
    }

    bb309: {
        switchInt(move _763) -> [0: bb311, otherwise: bb310];
    }

    bb310: {
        StorageDead(_764);
        goto -> bb321;
    }

    bb311: {
        StorageDead(_764);
        StorageLive(_765);
        StorageLive(_766);
        _766 = &_748;
        _765 = MarginCalculation::meets_margin_requirement(move _766) -> [return: bb312, unwind: bb757];
    }

    bb312: {
        switchInt(move _765) -> [0: bb320, otherwise: bb313];
    }

    bb313: {
        StorageDead(_766);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        _1552 = const _;
        _778 = &(*_1552);
        _777 = &(*_778);
        _776 = move _777 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_777);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        _786 = &_748;
        _785 = &(*_786);
        _784 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _785) -> [return: bb314, unwind: bb757];
    }

    bb314: {
        StorageDead(_785);
        _783 = [move _784];
        StorageDead(_784);
        _782 = &_783;
        _781 = &(*_782);
        _780 = move _781 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_781);
        _775 = Arguments::<'_>::new_v1(move _776, move _780) -> [return: bb315, unwind: bb757];
    }

    bb315: {
        StorageDead(_780);
        StorageDead(_776);
        _774 = format(move _775) -> [return: bb316, unwind: bb757];
    }

    bb316: {
        StorageDead(_775);
        StorageDead(_786);
        StorageDead(_783);
        StorageDead(_782);
        StorageDead(_778);
        _773 = move _774;
        StorageDead(_774);
        _772 = &_773;
        _771 = &(*_772);
        _770 = <String as Deref>::deref(move _771) -> [return: bb317, unwind: bb711];
    }

    bb317: {
        _769 = &(*_770);
        StorageDead(_771);
        _768 = solana_program::log::sol_log(move _769) -> [return: bb318, unwind: bb711];
    }

    bb318: {
        StorageDead(_769);
        drop(_773) -> [return: bb319, unwind: bb757];
    }

    bb319: {
        StorageDead(_773);
        StorageDead(_772);
        StorageDead(_770);
        StorageDead(_768);
        StorageLive(_787);
        _787 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _787);
        StorageDead(_787);
        goto -> bb674;
    }

    bb320: {
        StorageDead(_766);
        goto -> bb321;
    }

    bb321: {
        StorageLive(_788);
        StorageLive(_789);
        _789 = &(*_5);
        _788 = User::is_being_liquidated(move _789) -> [return: bb322, unwind: bb757];
    }

    bb322: {
        switchInt(move _788) -> [0: bb332, otherwise: bb323];
    }

    bb323: {
        StorageDead(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        _793 = &_748;
        _792 = MarginCalculation::can_exit_liquidation(move _793) -> [return: bb324, unwind: bb757];
    }

    bb324: {
        StorageDead(_793);
        _791 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _792) -> [return: bb325, unwind: bb757];
    }

    bb325: {
        StorageDead(_792);
        _794 = discriminant(_791);
        switchInt(move _794) -> [0: bb326, 1: bb327, otherwise: bb18];
    }

    bb326: {
        StorageLive(_798);
        _798 = ((_791 as Continue).0: bool);
        _790 = _798;
        StorageDead(_798);
        switchInt(move _790) -> [0: bb330, otherwise: bb329];
    }

    bb327: {
        StorageLive(_795);
        _795 = ((_791 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_797);
        _797 = _795;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _797) -> [return: bb328, unwind: bb757];
    }

    bb328: {
        StorageDead(_797);
        StorageDead(_795);
        StorageDead(_791);
        goto -> bb673;
    }

    bb329: {
        StorageDead(_791);
        StorageLive(_800);
        StorageLive(_801);
        _801 = &mut (*_5);
        _800 = User::exit_liquidation(move _801) -> [return: bb331, unwind: bb757];
    }

    bb330: {
        StorageDead(_791);
        goto -> bb333;
    }

    bb331: {
        StorageDead(_801);
        StorageDead(_800);
        StorageLive(_802);
        _802 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _802);
        StorageDead(_802);
        goto -> bb673;
    }

    bb332: {
        StorageDead(_789);
        goto -> bb333;
    }

    bb333: {
        _762 = const ();
        StorageDead(_790);
        StorageDead(_788);
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_762);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        _806 = &mut (*_5);
        StorageLive(_807);
        _807 = _13;
        _805 = User::enter_liquidation(move _806, move _807) -> [return: bb334, unwind: bb757];
    }

    bb334: {
        StorageDead(_807);
        StorageDead(_806);
        _804 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _805) -> [return: bb335, unwind: bb757];
    }

    bb335: {
        StorageDead(_805);
        _808 = discriminant(_804);
        switchInt(move _808) -> [0: bb336, 1: bb337, otherwise: bb18];
    }

    bb336: {
        StorageLive(_812);
        _812 = ((_804 as Continue).0: u16);
        _803 = _812;
        StorageDead(_812);
        StorageDead(_804);
        StorageLive(_813);
        _813 = const 0_u64;
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        _817 = &mut (*_5);
        StorageLive(_818);
        _818 = &(*_6);
        StorageLive(_819);
        StorageLive(_820);
        _820 = &(*_8);
        _819 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _820);
        StorageDead(_820);
        StorageLive(_821);
        _821 = &(*_9);
        StorageLive(_822);
        _822 = &(*_10);
        StorageLive(_823);
        _823 = &mut (*_11);
        StorageLive(_824);
        _824 = _12;
        StorageLive(_825);
        _825 = _13;
        StorageLive(_826);
        _826 = OrderActionExplanation::Liquidation;
        StorageLive(_827);
        _827 = Option::<state::user::MarketType>::None;
        StorageLive(_828);
        _828 = Option::<u16>::None;
        StorageLive(_829);
        _829 = Option::<controller::position::PositionDirection>::None;
        _816 = controller::orders::cancel_orders(move _817, move _818, move _819, move _821, move _822, move _823, move _824, move _825, move _826, move _827, move _828, move _829) -> [return: bb339, unwind: bb757];
    }

    bb337: {
        StorageLive(_809);
        _809 = ((_804 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_811);
        _811 = _809;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _811) -> [return: bb338, unwind: bb757];
    }

    bb338: {
        StorageDead(_811);
        StorageDead(_809);
        StorageDead(_804);
        goto -> bb672;
    }

    bb339: {
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_826);
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_819);
        StorageDead(_818);
        StorageDead(_817);
        _815 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _816) -> [return: bb340, unwind: bb757];
    }

    bb340: {
        StorageDead(_816);
        _830 = discriminant(_815);
        switchInt(move _830) -> [0: bb341, 1: bb342, otherwise: bb18];
    }

    bb341: {
        StorageLive(_834);
        _834 = move ((_815 as Continue).0: std::vec::Vec<u32>);
        _1570 = const true;
        _814 = move _834;
        StorageDead(_834);
        _1601 = discriminant(_815);
        StorageDead(_815);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        _840 = &(*_5);
        StorageLive(_841);
        _841 = &(*_9);
        StorageLive(_842);
        _842 = &(*_10);
        _839 = calculate_user_safest_position_tiers(move _840, move _841, move _842) -> [return: bb344, unwind: bb749];
    }

    bb342: {
        StorageLive(_831);
        _831 = ((_815 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_833);
        _833 = _831;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _833) -> [return: bb343, unwind: bb750];
    }

    bb343: {
        StorageDead(_833);
        StorageDead(_831);
        _1599 = discriminant(_815);
        StorageDead(_815);
        goto -> bb671;
    }

    bb344: {
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_840);
        _838 = <std::result::Result<(state::spot_market::AssetTier, state::perp_market::ContractTier), error::ErrorCode> as Try>::branch(move _839) -> [return: bb345, unwind: bb749];
    }

    bb345: {
        StorageDead(_839);
        _843 = discriminant(_838);
        switchInt(move _843) -> [0: bb346, 1: bb347, otherwise: bb18];
    }

    bb346: {
        StorageLive(_847);
        _847 = ((_838 as Continue).0: (state::spot_market::AssetTier, state::perp_market::ContractTier));
        _837 = _847;
        StorageDead(_847);
        StorageLive(_835);
        _835 = (_837.0: state::spot_market::AssetTier);
        StorageLive(_836);
        _836 = (_837.1: state::perp_market::ContractTier);
        StorageDead(_838);
        StorageDead(_837);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        _850 = &_579;
        StorageLive(_851);
        StorageLive(_852);
        _852 = &_836;
        _851 = &(*_852);
        StorageLive(_853);
        StorageLive(_854);
        _854 = &_835;
        _853 = &(*_854);
        _849 = state::perp_market::ContractTier::is_as_safe_as(move _850, move _851, move _853) -> [return: bb349, unwind: bb749];
    }

    bb347: {
        StorageLive(_844);
        _844 = ((_838 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_846);
        _846 = _844;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _846) -> [return: bb348, unwind: bb749];
    }

    bb348: {
        StorageDead(_846);
        StorageDead(_844);
        StorageDead(_838);
        StorageDead(_837);
        goto -> bb737;
    }

    bb349: {
        StorageDead(_853);
        StorageDead(_851);
        StorageDead(_850);
        _848 = Not(move _849);
        StorageDead(_849);
        StorageDead(_854);
        StorageDead(_852);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        _857 = &_814;
        _856 = Vec::<u32>::is_empty(move _857) -> [return: bb350, unwind: bb749];
    }

    bb350: {
        switchInt(move _856) -> [0: bb352, otherwise: bb351];
    }

    bb351: {
        StorageDead(_857);
        _855 = _748;
        goto -> bb423;
    }

    bb352: {
        StorageDead(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = &(*_5);
        StorageLive(_862);
        _862 = &(*_9);
        StorageLive(_863);
        _863 = &(*_10);
        StorageLive(_864);
        _864 = &mut (*_11);
        StorageLive(_865);
        StorageLive(_866);
        _866 = _14;
        _865 = MarginContext::liquidation(move _866) -> [return: bb353, unwind: bb749];
    }

    bb353: {
        StorageDead(_866);
        _860 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _861, move _862, move _863, move _864, move _865) -> [return: bb354, unwind: bb749];
    }

    bb354: {
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_863);
        StorageDead(_862);
        StorageDead(_861);
        _859 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _860) -> [return: bb355, unwind: bb749];
    }

    bb355: {
        StorageDead(_860);
        _867 = discriminant(_859);
        switchInt(move _867) -> [0: bb356, 1: bb357, otherwise: bb18];
    }

    bb356: {
        StorageLive(_871);
        _871 = ((_859 as Continue).0: state::margin_calculation::MarginCalculation);
        _858 = _871;
        StorageDead(_871);
        StorageDead(_859);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        _875 = &_748;
        _874 = MarginCalculation::margin_shortage(move _875) -> [return: bb359, unwind: bb749];
    }

    bb357: {
        StorageLive(_868);
        _868 = ((_859 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_870);
        _870 = _868;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _870) -> [return: bb358, unwind: bb749];
    }

    bb358: {
        StorageDead(_870);
        StorageDead(_868);
        StorageDead(_859);
        goto -> bb669;
    }

    bb359: {
        StorageDead(_875);
        _873 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _874) -> [return: bb360, unwind: bb749];
    }

    bb360: {
        StorageDead(_874);
        _876 = discriminant(_873);
        switchInt(move _876) -> [0: bb361, 1: bb362, otherwise: bb18];
    }

    bb361: {
        StorageLive(_880);
        _880 = ((_873 as Continue).0: u128);
        _872 = _880;
        StorageDead(_880);
        StorageDead(_873);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        StorageLive(_884);
        _884 = &_858;
        _883 = MarginCalculation::margin_shortage(move _884) -> [return: bb364, unwind: bb749];
    }

    bb362: {
        StorageLive(_877);
        _877 = ((_873 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_879);
        _879 = _877;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _879) -> [return: bb363, unwind: bb749];
    }

    bb363: {
        StorageDead(_879);
        StorageDead(_877);
        StorageDead(_873);
        goto -> bb668;
    }

    bb364: {
        StorageDead(_884);
        _882 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _883) -> [return: bb365, unwind: bb749];
    }

    bb365: {
        StorageDead(_883);
        _885 = discriminant(_882);
        switchInt(move _885) -> [0: bb366, 1: bb367, otherwise: bb18];
    }

    bb366: {
        StorageLive(_889);
        _889 = ((_882 as Continue).0: u128);
        _881 = _889;
        StorageDead(_889);
        StorageDead(_882);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        _894 = _872;
        StorageLive(_895);
        _895 = _881;
        _893 = core::num::<impl u128>::saturating_sub(move _894, move _895) -> [return: bb369, unwind: bb749];
    }

    bb367: {
        StorageLive(_886);
        _886 = ((_882 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_888);
        _888 = _886;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _888) -> [return: bb368, unwind: bb749];
    }

    bb368: {
        StorageDead(_888);
        StorageDead(_886);
        StorageDead(_882);
        goto -> bb667;
    }

    bb369: {
        StorageDead(_895);
        StorageDead(_894);
        _892 = <u128 as Cast>::cast::<u64>(move _893) -> [return: bb370, unwind: bb749];
    }

    bb370: {
        StorageDead(_893);
        _891 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _892) -> [return: bb371, unwind: bb749];
    }

    bb371: {
        StorageDead(_892);
        _896 = discriminant(_891);
        switchInt(move _896) -> [0: bb372, 1: bb373, otherwise: bb18];
    }

    bb372: {
        StorageLive(_900);
        _900 = ((_891 as Continue).0: u64);
        _890 = _900;
        StorageDead(_900);
        _813 = move _890;
        StorageDead(_890);
        StorageDead(_891);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        _904 = &mut (*_5);
        StorageLive(_905);
        _905 = _813;
        _903 = User::increment_margin_freed(move _904, move _905) -> [return: bb375, unwind: bb749];
    }

    bb373: {
        StorageLive(_897);
        _897 = ((_891 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_899);
        _899 = _897;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _899) -> [return: bb374, unwind: bb749];
    }

    bb374: {
        StorageDead(_899);
        StorageDead(_897);
        StorageDead(_890);
        StorageDead(_891);
        goto -> bb667;
    }

    bb375: {
        StorageDead(_905);
        StorageDead(_904);
        _902 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _903) -> [return: bb376, unwind: bb749];
    }

    bb376: {
        StorageDead(_903);
        _906 = discriminant(_902);
        switchInt(move _906) -> [0: bb377, 1: bb378, otherwise: bb18];
    }

    bb377: {
        StorageLive(_910);
        _910 = ((_902 as Continue).0: ());
        _901 = _910;
        StorageDead(_910);
        StorageDead(_902);
        StorageDead(_901);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        _914 = &_858;
        _913 = MarginCalculation::can_exit_liquidation(move _914) -> [return: bb380, unwind: bb749];
    }

    bb378: {
        StorageLive(_907);
        _907 = ((_902 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_909);
        _909 = _907;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _909) -> [return: bb379, unwind: bb749];
    }

    bb379: {
        StorageDead(_909);
        StorageDead(_907);
        StorageDead(_902);
        StorageDead(_901);
        goto -> bb667;
    }

    bb380: {
        StorageDead(_914);
        _912 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _913) -> [return: bb381, unwind: bb749];
    }

    bb381: {
        StorageDead(_913);
        _915 = discriminant(_912);
        switchInt(move _915) -> [0: bb382, 1: bb383, otherwise: bb18];
    }

    bb382: {
        StorageLive(_919);
        _919 = ((_912 as Continue).0: bool);
        _911 = _919;
        StorageDead(_919);
        StorageDead(_912);
        StorageLive(_920);
        StorageLive(_921);
        _921 = _911;
        switchInt(move _921) -> [0: bb385, otherwise: bb386];
    }

    bb383: {
        StorageLive(_916);
        _916 = ((_912 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_918);
        _918 = _916;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _918) -> [return: bb384, unwind: bb749];
    }

    bb384: {
        StorageDead(_918);
        StorageDead(_916);
        StorageDead(_912);
        goto -> bb666;
    }

    bb385: {
        StorageLive(_922);
        _922 = _848;
        switchInt(move _922) -> [0: bb387, otherwise: bb386];
    }

    bb386: {
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        _927 = &(*_9);
        StorageLive(_928);
        StorageLive(_929);
        _929 = &_1;
        _928 = &(*_929);
        _926 = PerpMarketMap::<'_>::get_ref(move _927, move _928) -> [return: bb388, unwind: bb749];
    }

    bb387: {
        _920 = const ();
        StorageDead(_922);
        StorageDead(_921);
        StorageDead(_920);
        _855 = _858;
        StorageDead(_911);
        StorageDead(_881);
        StorageDead(_872);
        StorageDead(_858);
        goto -> bb423;
    }

    bb388: {
        StorageDead(_928);
        StorageDead(_927);
        _925 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _926) -> [return: bb389, unwind: bb749];
    }

    bb389: {
        StorageDead(_926);
        _930 = discriminant(_925);
        switchInt(move _930) -> [0: bb390, 1: bb391, otherwise: bb18];
    }

    bb390: {
        StorageLive(_934);
        _934 = move ((_925 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _924 = move _934;
        StorageDead(_934);
        _1605 = discriminant(_925);
        StorageDead(_929);
        StorageDead(_925);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        _939 = &mut (*_11);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        _945 = &_924;
        _944 = <Ref<'_, PerpMarket> as Deref>::deref(move _945) -> [return: bb393, unwind: bb710];
    }

    bb391: {
        StorageLive(_931);
        _931 = ((_925 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_933);
        _933 = _931;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _933) -> [return: bb392, unwind: bb747];
    }

    bb392: {
        StorageDead(_933);
        StorageDead(_931);
        _1603 = discriminant(_925);
        StorageDead(_929);
        StorageDead(_925);
        goto -> bb665;
    }

    bb393: {
        _943 = &(*_944);
        StorageDead(_945);
        _942 = PerpMarket::oracle_id(move _943) -> [return: bb394, unwind: bb710];
    }

    bb394: {
        StorageDead(_943);
        _941 = &_942;
        _940 = &(*_941);
        _938 = OracleMap::<'_>::get_price_data(move _939, move _940) -> [return: bb395, unwind: bb710];
    }

    bb395: {
        StorageDead(_940);
        StorageDead(_939);
        _937 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _938) -> [return: bb396, unwind: bb710];
    }

    bb396: {
        StorageDead(_938);
        _946 = discriminant(_937);
        switchInt(move _946) -> [0: bb397, 1: bb398, otherwise: bb18];
    }

    bb397: {
        StorageLive(_950);
        _950 = ((_937 as Continue).0: &state::oracle::OraclePriceData);
        _936 = _950;
        StorageDead(_950);
        _935 = ((*_936).0: i64);
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_937);
        StorageDead(_936);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        _965 = _12;
        StorageLive(_966);
        _966 = _803;
        StorageLive(_967);
        _967 = LiquidationType::LiquidatePerpPnlForDeposit;
        StorageLive(_968);
        _968 = (*_6);
        StorageLive(_969);
        _969 = (*_8);
        StorageLive(_970);
        _970 = (_748.3: u128);
        StorageLive(_971);
        _971 = (_748.1: i128);
        StorageLive(_972);
        StorageLive(_973);
        _973 = &(*_5);
        _972 = User::is_bankrupt(move _973) -> [return: bb400, unwind: bb710];
    }

    bb398: {
        StorageLive(_947);
        _947 = ((_937 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_949);
        _949 = _947;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _949) -> [return: bb399, unwind: bb710];
    }

    bb399: {
        StorageDead(_949);
        StorageDead(_947);
        StorageDead(_944);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_937);
        StorageDead(_936);
        goto -> bb664;
    }

    bb400: {
        StorageDead(_973);
        StorageLive(_974);
        _1570 = const false;
        _974 = move _814;
        StorageLive(_975);
        _975 = _813;
        StorageLive(_976);
        StorageLive(_977);
        _977 = _1;
        StorageLive(_978);
        _978 = _935;
        StorageLive(_979);
        _979 = _2;
        StorageLive(_980);
        _980 = _391;
        _976 = LiquidatePerpPnlForDepositRecord { perp_market_index: move _977, market_oracle_price: move _978, pnl_transfer: const 0_u128, asset_market_index: move _979, asset_price: move _980, asset_transfer: const 0_u128 };
        StorageDead(_980);
        StorageDead(_979);
        StorageDead(_978);
        StorageDead(_977);
        StorageLive(_981);
        _981 = <LiquidationRecord as Default>::default() -> [return: bb401, unwind: bb709];
    }

    bb401: {
        _964 = LiquidationRecord { ts: move _965, liquidation_type: move _967, user: move _968, liquidator: move _969, margin_requirement: move _970, total_collateral: move _971, margin_freed: move _975, liquidation_id: move _966, bankrupt: move _972, canceled_order_ids: move _974, liquidate_perp: move (_981.10: state::events::LiquidatePerpRecord), liquidate_spot: move (_981.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_981.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move _976, perp_bankruptcy: move (_981.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_981.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_976);
        StorageDead(_975);
        StorageDead(_974);
        StorageDead(_972);
        StorageDead(_971);
        StorageDead(_970);
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        _963 = &_964;
        _962 = &(*_963);
        _961 = <LiquidationRecord as anchor_lang::Event>::data(move _962) -> [return: bb402, unwind: bb707];
    }

    bb402: {
        StorageDead(_962);
        _960 = &_961;
        _959 = &(*_960);
        _958 = <Vec<u8> as Deref>::deref(move _959) -> [return: bb403, unwind: bb706];
    }

    bb403: {
        _957 = &(*_958);
        StorageDead(_959);
        _956 = [move _957];
        StorageDead(_957);
        _955 = &_956;
        _954 = &(*_955);
        _953 = move _954 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_954);
        _952 = solana_program::log::sol_log_data(move _953) -> [return: bb404, unwind: bb706];
    }

    bb404: {
        StorageDead(_953);
        drop(_961) -> [return: bb405, unwind: bb707];
    }

    bb405: {
        drop(_964) -> [return: bb406, unwind: bb708];
    }

    bb406: {
        drop(_981) -> [return: bb407, unwind: bb710];
    }

    bb407: {
        StorageDead(_981);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_961);
        StorageDead(_960);
        StorageDead(_958);
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_952);
        _951 = const ();
        StorageDead(_951);
        StorageLive(_982);
        StorageLive(_983);
        _983 = _911;
        switchInt(move _983) -> [0: bb410, otherwise: bb408];
    }

    bb408: {
        StorageLive(_984);
        StorageLive(_985);
        _985 = &mut (*_5);
        _984 = User::exit_liquidation(move _985) -> [return: bb409, unwind: bb710];
    }

    bb409: {
        StorageDead(_985);
        StorageDead(_984);
        _982 = const ();
        goto -> bb422;
    }

    bb410: {
        StorageLive(_986);
        _986 = _848;
        switchInt(move _986) -> [0: bb420, otherwise: bb411];
    }

    bb411: {
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        _1551 = const _;
        _997 = &(*_1551);
        _996 = &(*_997);
        _995 = move _996 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_996);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1005 = &_579;
        _1004 = &(*_1005);
        _1003 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::ContractTier>(move _1004) -> [return: bb412, unwind: bb710];
    }

    bb412: {
        StorageDead(_1004);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        _1008 = &_836;
        _1007 = &(*_1008);
        _1006 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::ContractTier>(move _1007) -> [return: bb413, unwind: bb710];
    }

    bb413: {
        StorageDead(_1007);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        _1011 = &_835;
        _1010 = &(*_1011);
        _1009 = core::fmt::rt::Argument::<'_>::new_debug::<state::spot_market::AssetTier>(move _1010) -> [return: bb414, unwind: bb710];
    }

    bb414: {
        StorageDead(_1010);
        _1002 = [move _1003, move _1006, move _1009];
        StorageDead(_1009);
        StorageDead(_1006);
        StorageDead(_1003);
        _1001 = &_1002;
        _1000 = &(*_1001);
        _999 = move _1000 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1000);
        _994 = Arguments::<'_>::new_v1(move _995, move _999) -> [return: bb415, unwind: bb710];
    }

    bb415: {
        StorageDead(_999);
        StorageDead(_995);
        _993 = format(move _994) -> [return: bb416, unwind: bb710];
    }

    bb416: {
        StorageDead(_994);
        StorageDead(_1011);
        StorageDead(_1008);
        StorageDead(_1005);
        StorageDead(_1002);
        StorageDead(_1001);
        StorageDead(_997);
        _992 = move _993;
        StorageDead(_993);
        _991 = &_992;
        _990 = &(*_991);
        _989 = <String as Deref>::deref(move _990) -> [return: bb417, unwind: bb705];
    }

    bb417: {
        _988 = &(*_989);
        StorageDead(_990);
        _987 = solana_program::log::sol_log(move _988) -> [return: bb418, unwind: bb705];
    }

    bb418: {
        StorageDead(_988);
        drop(_992) -> [return: bb419, unwind: bb710];
    }

    bb419: {
        StorageDead(_992);
        StorageDead(_991);
        StorageDead(_989);
        StorageDead(_987);
        _982 = const ();
        goto -> bb421;
    }

    bb420: {
        _982 = const ();
        goto -> bb421;
    }

    bb421: {
        StorageDead(_986);
        goto -> bb422;
    }

    bb422: {
        StorageDead(_983);
        StorageDead(_982);
        StorageLive(_1012);
        _1012 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1012);
        StorageDead(_1012);
        goto -> bb664;
    }

    bb423: {
        StorageDead(_856);
        StorageLive(_1013);
        StorageLive(_1014);
        _1014 = _848;
        switchInt(move _1014) -> [0: bb433, otherwise: bb424];
    }

    bb424: {
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        _1544 = const _;
        _1026 = &(*_1544);
        _1025 = &(*_1026);
        _1024 = move _1025 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1025);
        StorageLive(_1028);
        StorageLive(_1029);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        _1034 = &_579;
        _1033 = &(*_1034);
        _1032 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::ContractTier>(move _1033) -> [return: bb425, unwind: bb749];
    }

    bb425: {
        StorageDead(_1033);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        _1037 = &_836;
        _1036 = &(*_1037);
        _1035 = core::fmt::rt::Argument::<'_>::new_debug::<state::perp_market::ContractTier>(move _1036) -> [return: bb426, unwind: bb749];
    }

    bb426: {
        StorageDead(_1036);
        StorageLive(_1038);
        StorageLive(_1039);
        StorageLive(_1040);
        _1040 = &_835;
        _1039 = &(*_1040);
        _1038 = core::fmt::rt::Argument::<'_>::new_debug::<state::spot_market::AssetTier>(move _1039) -> [return: bb427, unwind: bb749];
    }

    bb427: {
        StorageDead(_1039);
        _1031 = [move _1032, move _1035, move _1038];
        StorageDead(_1038);
        StorageDead(_1035);
        StorageDead(_1032);
        _1030 = &_1031;
        _1029 = &(*_1030);
        _1028 = move _1029 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1029);
        _1023 = Arguments::<'_>::new_v1(move _1024, move _1028) -> [return: bb428, unwind: bb749];
    }

    bb428: {
        StorageDead(_1028);
        StorageDead(_1024);
        _1022 = format(move _1023) -> [return: bb429, unwind: bb749];
    }

    bb429: {
        StorageDead(_1023);
        StorageDead(_1040);
        StorageDead(_1037);
        StorageDead(_1034);
        StorageDead(_1031);
        StorageDead(_1030);
        StorageDead(_1026);
        _1021 = move _1022;
        StorageDead(_1022);
        _1020 = &_1021;
        _1019 = &(*_1020);
        _1018 = <String as Deref>::deref(move _1019) -> [return: bb430, unwind: bb704];
    }

    bb430: {
        _1017 = &(*_1018);
        StorageDead(_1019);
        _1016 = solana_program::log::sol_log(move _1017) -> [return: bb431, unwind: bb704];
    }

    bb431: {
        StorageDead(_1017);
        drop(_1021) -> [return: bb432, unwind: bb749];
    }

    bb432: {
        StorageDead(_1021);
        StorageDead(_1020);
        StorageDead(_1018);
        StorageDead(_1016);
        StorageLive(_1041);
        _1041 = error::ErrorCode::TierViolationLiquidatingPerpPnl;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1041);
        StorageDead(_1041);
        StorageDead(_1014);
        StorageDead(_1013);
        goto -> bb670;
    }

    bb433: {
        _1013 = const ();
        StorageDead(_1014);
        StorageDead(_1013);
        StorageLive(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        StorageLive(_1045);
        _1045 = &_855;
        _1044 = MarginCalculation::margin_shortage(move _1045) -> [return: bb434, unwind: bb749];
    }

    bb434: {
        StorageDead(_1045);
        _1043 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1044) -> [return: bb435, unwind: bb749];
    }

    bb435: {
        StorageDead(_1044);
        _1046 = discriminant(_1043);
        switchInt(move _1046) -> [0: bb436, 1: bb437, otherwise: bb18];
    }

    bb436: {
        StorageLive(_1050);
        _1050 = ((_1043 as Continue).0: u128);
        _1042 = _1050;
        StorageDead(_1050);
        StorageDead(_1043);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        _1054 = _581;
        StorageLive(_1055);
        _1055 = _14;
        _1053 = <u32 as SafeMath>::safe_add(move _1054, move _1055) -> [return: bb439, unwind: bb749];
    }

    bb437: {
        StorageLive(_1047);
        _1047 = ((_1043 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1049);
        _1049 = _1047;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1049) -> [return: bb438, unwind: bb749];
    }

    bb438: {
        StorageDead(_1049);
        StorageDead(_1047);
        StorageDead(_1043);
        goto -> bb663;
    }

    bb439: {
        StorageDead(_1055);
        StorageDead(_1054);
        _1052 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _1053) -> [return: bb440, unwind: bb749];
    }

    bb440: {
        StorageDead(_1053);
        _1056 = discriminant(_1052);
        switchInt(move _1056) -> [0: bb441, 1: bb442, otherwise: bb18];
    }

    bb441: {
        StorageLive(_1060);
        _1060 = ((_1052 as Continue).0: u32);
        _1051 = _1060;
        StorageDead(_1060);
        StorageDead(_1052);
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        _1064 = _1042;
        StorageLive(_1065);
        _1065 = _394;
        StorageLive(_1066);
        _1066 = _395;
        StorageLive(_1067);
        _1067 = _1051;
        StorageLive(_1068);
        _1068 = _582;
        StorageLive(_1069);
        _1069 = _580;
        StorageLive(_1070);
        _1070 = _578;
        _1063 = calculate_liability_transfer_to_cover_margin_shortage(move _1064, move _1065, move _1066, move _1067, move _1068, move _1069, move _1070, const 0_u32) -> [return: bb444, unwind: bb749];
    }

    bb442: {
        StorageLive(_1057);
        _1057 = ((_1052 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1059);
        _1059 = _1057;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1059) -> [return: bb443, unwind: bb749];
    }

    bb443: {
        StorageDead(_1059);
        StorageDead(_1057);
        StorageDead(_1052);
        goto -> bb662;
    }

    bb444: {
        StorageDead(_1070);
        StorageDead(_1069);
        StorageDead(_1068);
        StorageDead(_1067);
        StorageDead(_1066);
        StorageDead(_1065);
        StorageDead(_1064);
        _1062 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1063) -> [return: bb445, unwind: bb749];
    }

    bb445: {
        StorageDead(_1063);
        _1071 = discriminant(_1062);
        switchInt(move _1071) -> [0: bb446, 1: bb447, otherwise: bb18];
    }

    bb446: {
        StorageLive(_1075);
        _1075 = ((_1062 as Continue).0: u128);
        _1061 = _1075;
        StorageDead(_1075);
        StorageDead(_1062);
        StorageLive(_1076);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        _1079 = &(*_5);
        StorageLive(_1080);
        _1080 = _1042;
        StorageLive(_1081);
        _1081 = _13;
        StorageLive(_1082);
        _1082 = _15;
        StorageLive(_1083);
        _1083 = _16;
        _1078 = calculate_max_pct_to_liquidate(move _1079, move _1080, move _1081, move _1082, move _1083) -> [return: bb449, unwind: bb749];
    }

    bb447: {
        StorageLive(_1072);
        _1072 = ((_1062 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1074);
        _1074 = _1072;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1074) -> [return: bb448, unwind: bb749];
    }

    bb448: {
        StorageDead(_1074);
        StorageDead(_1072);
        StorageDead(_1062);
        goto -> bb661;
    }

    bb449: {
        StorageDead(_1083);
        StorageDead(_1082);
        StorageDead(_1081);
        StorageDead(_1080);
        StorageDead(_1079);
        _1077 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1078) -> [return: bb450, unwind: bb749];
    }

    bb450: {
        StorageDead(_1078);
        _1084 = discriminant(_1077);
        switchInt(move _1084) -> [0: bb451, 1: bb452, otherwise: bb18];
    }

    bb451: {
        StorageLive(_1088);
        _1088 = ((_1077 as Continue).0: u128);
        _1076 = _1088;
        StorageDead(_1088);
        StorageDead(_1077);
        StorageLive(_1089);
        StorageLive(_1090);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        _1093 = _1061;
        StorageLive(_1094);
        _1094 = _1076;
        _1092 = core::num::<impl u128>::saturating_mul(move _1093, move _1094) -> [return: bb454, unwind: bb749];
    }

    bb452: {
        StorageLive(_1085);
        _1085 = ((_1077 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1087);
        _1087 = _1085;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1087) -> [return: bb453, unwind: bb749];
    }

    bb453: {
        StorageDead(_1087);
        StorageDead(_1085);
        StorageDead(_1077);
        goto -> bb660;
    }

    bb454: {
        StorageDead(_1094);
        StorageDead(_1093);
        _1091 = <u128 as SafeMath>::safe_div(move _1092, const _) -> [return: bb455, unwind: bb749];
    }

    bb455: {
        StorageDead(_1092);
        _1090 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1091) -> [return: bb456, unwind: bb749];
    }

    bb456: {
        StorageDead(_1091);
        _1095 = discriminant(_1090);
        switchInt(move _1095) -> [0: bb457, 1: bb458, otherwise: bb18];
    }

    bb457: {
        StorageLive(_1099);
        _1099 = ((_1090 as Continue).0: u128);
        _1089 = _1099;
        StorageDead(_1099);
        StorageDead(_1090);
        StorageLive(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        _1102 = _1089;
        _1101 = Eq(move _1102, const 0_u128);
        switchInt(move _1101) -> [0: bb461, otherwise: bb460];
    }

    bb458: {
        StorageLive(_1096);
        _1096 = ((_1090 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1098);
        _1098 = _1096;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1098) -> [return: bb459, unwind: bb749];
    }

    bb459: {
        StorageDead(_1098);
        StorageDead(_1096);
        StorageDead(_1090);
        goto -> bb659;
    }

    bb460: {
        StorageDead(_1102);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        _1106 = const "max_pnl_allowed_to_be_transferred == 0";
        _1105 = &(*_1106);
        _1104 = solana_program::log::sol_log(move _1105) -> [return: bb462, unwind: bb749];
    }

    bb461: {
        StorageDead(_1102);
        _1100 = const ();
        StorageDead(_1101);
        StorageDead(_1100);
        StorageLive(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        _1111 = _390;
        StorageLive(_1112);
        _1112 = _395;
        StorageLive(_1113);
        _1113 = _393;
        StorageLive(_1114);
        _1114 = _391;
        StorageLive(_1115);
        _1115 = _582;
        StorageLive(_1116);
        _1116 = _580;
        StorageLive(_1117);
        _1117 = _578;
        _1110 = calculate_liability_transfer_implied_by_asset_amount(move _1111, move _1112, move _1113, move _1114, move _1115, move _1116, move _1117) -> [return: bb463, unwind: bb749];
    }

    bb462: {
        StorageDead(_1105);
        StorageDead(_1106);
        StorageDead(_1104);
        StorageLive(_1107);
        _1107 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1107);
        StorageDead(_1107);
        StorageDead(_1101);
        StorageDead(_1100);
        goto -> bb659;
    }

    bb463: {
        StorageDead(_1117);
        StorageDead(_1116);
        StorageDead(_1115);
        StorageDead(_1114);
        StorageDead(_1113);
        StorageDead(_1112);
        StorageDead(_1111);
        _1109 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1110) -> [return: bb464, unwind: bb749];
    }

    bb464: {
        StorageDead(_1110);
        _1118 = discriminant(_1109);
        switchInt(move _1118) -> [0: bb465, 1: bb466, otherwise: bb18];
    }

    bb465: {
        StorageLive(_1122);
        _1122 = ((_1109 as Continue).0: u128);
        _1108 = _1122;
        StorageDead(_1122);
        StorageDead(_1109);
        StorageLive(_1123);
        StorageLive(_1124);
        StorageLive(_1125);
        _1125 = _577;
        StorageLive(_1126);
        _1127 = CheckedMul(const 10_u128, const _);
        assert(!move (_1127.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_u128, const _) -> [success: bb468, unwind: bb749];
    }

    bb466: {
        StorageLive(_1119);
        _1119 = ((_1109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1121);
        _1121 = _1119;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1121) -> [return: bb467, unwind: bb749];
    }

    bb467: {
        StorageDead(_1121);
        StorageDead(_1119);
        StorageDead(_1109);
        goto -> bb658;
    }

    bb468: {
        _1126 = move (_1127.0: u128);
        _1124 = Gt(move _1125, move _1126);
        switchInt(move _1124) -> [0: bb470, otherwise: bb469];
    }

    bb469: {
        StorageDead(_1126);
        StorageDead(_1125);
        _1123 = const 0_u128;
        goto -> bb471;
    }

    bb470: {
        StorageDead(_1126);
        StorageDead(_1125);
        _1123 = _577;
        goto -> bb471;
    }

    bb471: {
        StorageDead(_1124);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        StorageLive(_1131);
        _1131 = _3;
        StorageLive(_1132);
        _1132 = _577;
        _1130 = <u128 as Ord>::min(move _1131, move _1132) -> [return: bb472, unwind: bb749];
    }

    bb472: {
        StorageDead(_1132);
        StorageDead(_1131);
        StorageLive(_1133);
        StorageLive(_1134);
        _1134 = _1089;
        StorageLive(_1135);
        _1135 = _1123;
        _1133 = <u128 as Ord>::max(move _1134, move _1135) -> [return: bb473, unwind: bb749];
    }

    bb473: {
        StorageDead(_1135);
        StorageDead(_1134);
        _1129 = <u128 as Ord>::min(move _1130, move _1133) -> [return: bb474, unwind: bb749];
    }

    bb474: {
        StorageDead(_1133);
        StorageDead(_1130);
        StorageLive(_1136);
        _1136 = _1108;
        _1128 = <u128 as Ord>::min(move _1129, move _1136) -> [return: bb475, unwind: bb749];
    }

    bb475: {
        StorageDead(_1136);
        StorageDead(_1129);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        _1140 = _390;
        StorageLive(_1141);
        _1141 = _395;
        StorageLive(_1142);
        _1142 = _393;
        StorageLive(_1143);
        _1143 = _391;
        StorageLive(_1144);
        _1144 = _1128;
        StorageLive(_1145);
        _1145 = _582;
        StorageLive(_1146);
        _1146 = _580;
        StorageLive(_1147);
        _1147 = _578;
        _1139 = calculate_asset_transfer_for_liability_transfer(move _1140, move _1141, move _1142, move _1143, move _1144, move _1145, move _1146, move _1147) -> [return: bb476, unwind: bb749];
    }

    bb476: {
        StorageDead(_1147);
        StorageDead(_1146);
        StorageDead(_1145);
        StorageDead(_1144);
        StorageDead(_1143);
        StorageDead(_1142);
        StorageDead(_1141);
        StorageDead(_1140);
        _1138 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1139) -> [return: bb477, unwind: bb749];
    }

    bb477: {
        StorageDead(_1139);
        _1148 = discriminant(_1138);
        switchInt(move _1148) -> [0: bb478, 1: bb479, otherwise: bb18];
    }

    bb478: {
        StorageLive(_1152);
        _1152 = ((_1138 as Continue).0: u128);
        _1137 = _1152;
        StorageDead(_1152);
        StorageDead(_1138);
        StorageLive(_1153);
        StorageLive(_1154);
        StorageLive(_1155);
        _1155 = _1137;
        _1154 = Eq(move _1155, const 0_u128);
        switchInt(move _1154) -> [0: bb482, otherwise: bb481];
    }

    bb479: {
        StorageLive(_1149);
        _1149 = ((_1138 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1151);
        _1151 = _1149;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1151) -> [return: bb480, unwind: bb749];
    }

    bb480: {
        StorageDead(_1151);
        StorageDead(_1149);
        StorageDead(_1138);
        goto -> bb657;
    }

    bb481: {
        StorageDead(_1155);
        goto -> bb483;
    }

    bb482: {
        StorageDead(_1155);
        StorageLive(_1156);
        StorageLive(_1157);
        _1157 = _1128;
        _1156 = Eq(move _1157, const 0_u128);
        switchInt(move _1156) -> [0: bb484, otherwise: bb483];
    }

    bb483: {
        StorageDead(_1157);
        StorageLive(_1159);
        StorageLive(_1160);
        StorageLive(_1161);
        StorageLive(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        StorageLive(_1169);
        _1547 = const _;
        _1169 = &(*_1547);
        _1168 = &(*_1169);
        _1167 = move _1168 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1168);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        _1177 = &_2;
        _1176 = &(*_1177);
        _1175 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1176) -> [return: bb485, unwind: bb749];
    }

    bb484: {
        StorageDead(_1157);
        _1153 = const ();
        StorageDead(_1156);
        StorageDead(_1154);
        StorageDead(_1153);
        StorageLive(_1232);
        StorageLive(_1233);
        StorageLive(_1234);
        StorageLive(_1235);
        _1235 = _1137;
        StorageLive(_1236);
        _1236 = _1128;
        StorageLive(_1237);
        _1237 = _393;
        StorageLive(_1238);
        _1238 = _580;
        StorageLive(_1239);
        _1239 = _4;
        _1234 = validate_transfer_satisfies_limit_price(move _1235, move _1236, move _1237, move _1238, move _1239) -> [return: bb508, unwind: bb749];
    }

    bb485: {
        StorageDead(_1176);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        _1180 = &_1;
        _1179 = &(*_1180);
        _1178 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1179) -> [return: bb486, unwind: bb749];
    }

    bb486: {
        StorageDead(_1179);
        _1174 = [move _1175, move _1178];
        StorageDead(_1178);
        StorageDead(_1175);
        _1173 = &_1174;
        _1172 = &(*_1173);
        _1171 = move _1172 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1172);
        _1166 = Arguments::<'_>::new_v1(move _1167, move _1171) -> [return: bb487, unwind: bb749];
    }

    bb487: {
        StorageDead(_1171);
        StorageDead(_1167);
        _1165 = format(move _1166) -> [return: bb488, unwind: bb749];
    }

    bb488: {
        StorageDead(_1166);
        StorageDead(_1180);
        StorageDead(_1177);
        StorageDead(_1174);
        StorageDead(_1173);
        StorageDead(_1169);
        _1164 = move _1165;
        StorageDead(_1165);
        _1163 = &_1164;
        _1162 = &(*_1163);
        _1161 = <String as Deref>::deref(move _1162) -> [return: bb489, unwind: bb703];
    }

    bb489: {
        _1160 = &(*_1161);
        StorageDead(_1162);
        _1159 = solana_program::log::sol_log(move _1160) -> [return: bb490, unwind: bb703];
    }

    bb490: {
        StorageDead(_1160);
        drop(_1164) -> [return: bb491, unwind: bb749];
    }

    bb491: {
        StorageDead(_1164);
        StorageDead(_1163);
        StorageDead(_1161);
        StorageDead(_1159);
        StorageLive(_1181);
        StorageLive(_1182);
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        _1546 = const _;
        _1191 = &(*_1546);
        _1190 = &(*_1191);
        _1189 = move _1190 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1190);
        StorageLive(_1193);
        StorageLive(_1194);
        StorageLive(_1195);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        StorageLive(_1199);
        _1199 = &_3;
        _1198 = &(*_1199);
        _1197 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1198) -> [return: bb492, unwind: bb749];
    }

    bb492: {
        StorageDead(_1198);
        StorageLive(_1200);
        StorageLive(_1201);
        StorageLive(_1202);
        _1202 = &_577;
        _1201 = &(*_1202);
        _1200 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1201) -> [return: bb493, unwind: bb749];
    }

    bb493: {
        StorageDead(_1201);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        _1205 = &_1061;
        _1204 = &(*_1205);
        _1203 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1204) -> [return: bb494, unwind: bb749];
    }

    bb494: {
        StorageDead(_1204);
        _1196 = [move _1197, move _1200, move _1203];
        StorageDead(_1203);
        StorageDead(_1200);
        StorageDead(_1197);
        _1195 = &_1196;
        _1194 = &(*_1195);
        _1193 = move _1194 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1194);
        _1188 = Arguments::<'_>::new_v1(move _1189, move _1193) -> [return: bb495, unwind: bb749];
    }

    bb495: {
        StorageDead(_1193);
        StorageDead(_1189);
        _1187 = format(move _1188) -> [return: bb496, unwind: bb749];
    }

    bb496: {
        StorageDead(_1188);
        StorageDead(_1205);
        StorageDead(_1202);
        StorageDead(_1199);
        StorageDead(_1196);
        StorageDead(_1195);
        StorageDead(_1191);
        _1186 = move _1187;
        StorageDead(_1187);
        _1185 = &_1186;
        _1184 = &(*_1185);
        _1183 = <String as Deref>::deref(move _1184) -> [return: bb497, unwind: bb702];
    }

    bb497: {
        _1182 = &(*_1183);
        StorageDead(_1184);
        _1181 = solana_program::log::sol_log(move _1182) -> [return: bb498, unwind: bb702];
    }

    bb498: {
        StorageDead(_1182);
        drop(_1186) -> [return: bb499, unwind: bb749];
    }

    bb499: {
        StorageDead(_1186);
        StorageDead(_1185);
        StorageDead(_1183);
        StorageDead(_1181);
        StorageLive(_1206);
        StorageLive(_1207);
        StorageLive(_1208);
        StorageLive(_1209);
        StorageLive(_1210);
        StorageLive(_1211);
        StorageLive(_1212);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        StorageLive(_1216);
        _1545 = const _;
        _1216 = &(*_1545);
        _1215 = &(*_1216);
        _1214 = move _1215 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1215);
        StorageLive(_1218);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        StorageLive(_1223);
        StorageLive(_1224);
        _1224 = &_1108;
        _1223 = &(*_1224);
        _1222 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1223) -> [return: bb500, unwind: bb749];
    }

    bb500: {
        StorageDead(_1223);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        _1227 = &_1128;
        _1226 = &(*_1227);
        _1225 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1226) -> [return: bb501, unwind: bb749];
    }

    bb501: {
        StorageDead(_1226);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        _1230 = &_1137;
        _1229 = &(*_1230);
        _1228 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1229) -> [return: bb502, unwind: bb749];
    }

    bb502: {
        StorageDead(_1229);
        _1221 = [move _1222, move _1225, move _1228];
        StorageDead(_1228);
        StorageDead(_1225);
        StorageDead(_1222);
        _1220 = &_1221;
        _1219 = &(*_1220);
        _1218 = move _1219 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1219);
        _1213 = Arguments::<'_>::new_v1(move _1214, move _1218) -> [return: bb503, unwind: bb749];
    }

    bb503: {
        StorageDead(_1218);
        StorageDead(_1214);
        _1212 = format(move _1213) -> [return: bb504, unwind: bb749];
    }

    bb504: {
        StorageDead(_1213);
        StorageDead(_1230);
        StorageDead(_1227);
        StorageDead(_1224);
        StorageDead(_1221);
        StorageDead(_1220);
        StorageDead(_1216);
        _1211 = move _1212;
        StorageDead(_1212);
        _1210 = &_1211;
        _1209 = &(*_1210);
        _1208 = <String as Deref>::deref(move _1209) -> [return: bb505, unwind: bb701];
    }

    bb505: {
        _1207 = &(*_1208);
        StorageDead(_1209);
        _1206 = solana_program::log::sol_log(move _1207) -> [return: bb506, unwind: bb701];
    }

    bb506: {
        StorageDead(_1207);
        drop(_1211) -> [return: bb507, unwind: bb749];
    }

    bb507: {
        StorageDead(_1211);
        StorageDead(_1210);
        StorageDead(_1208);
        StorageDead(_1206);
        StorageLive(_1231);
        _1231 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1231);
        StorageDead(_1231);
        StorageDead(_1156);
        StorageDead(_1154);
        StorageDead(_1153);
        goto -> bb657;
    }

    bb508: {
        StorageDead(_1239);
        StorageDead(_1238);
        StorageDead(_1237);
        StorageDead(_1236);
        StorageDead(_1235);
        _1233 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1234) -> [return: bb509, unwind: bb749];
    }

    bb509: {
        StorageDead(_1234);
        _1240 = discriminant(_1233);
        switchInt(move _1240) -> [0: bb510, 1: bb511, otherwise: bb18];
    }

    bb510: {
        StorageLive(_1244);
        _1244 = ((_1233 as Continue).0: ());
        _1232 = _1244;
        StorageDead(_1244);
        StorageDead(_1233);
        StorageDead(_1232);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        _1249 = &(*_10);
        StorageLive(_1250);
        StorageLive(_1251);
        _1251 = &_2;
        _1250 = &(*_1251);
        _1248 = SpotMarketMap::<'_>::get_ref_mut(move _1249, move _1250) -> [return: bb513, unwind: bb749];
    }

    bb511: {
        StorageLive(_1241);
        _1241 = ((_1233 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1243);
        _1243 = _1241;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1243) -> [return: bb512, unwind: bb749];
    }

    bb512: {
        StorageDead(_1243);
        StorageDead(_1241);
        StorageDead(_1233);
        StorageDead(_1232);
        goto -> bb657;
    }

    bb513: {
        StorageDead(_1250);
        StorageDead(_1249);
        _1247 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1248) -> [return: bb514, unwind: bb749];
    }

    bb514: {
        StorageDead(_1248);
        _1252 = discriminant(_1247);
        switchInt(move _1252) -> [0: bb515, 1: bb516, otherwise: bb18];
    }

    bb515: {
        StorageLive(_1256);
        _1256 = move ((_1247 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1246 = move _1256;
        StorageDead(_1256);
        _1609 = discriminant(_1247);
        StorageDead(_1251);
        StorageDead(_1247);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        _1260 = _1137;
        StorageLive(_1261);
        StorageLive(_1262);
        _1550 = const _;
        _1262 = &(*_1550);
        _1261 = &(*_1262);
        StorageLive(_1264);
        StorageLive(_1265);
        StorageLive(_1266);
        StorageLive(_1267);
        _1267 = &mut _1246;
        _1266 = &mut (*_1267);
        _1265 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1266) -> [return: bb518, unwind: bb700];
    }

    bb516: {
        StorageLive(_1253);
        _1253 = ((_1247 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1255);
        _1255 = _1253;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1255) -> [return: bb517, unwind: bb746];
    }

    bb517: {
        StorageDead(_1255);
        StorageDead(_1253);
        _1607 = discriminant(_1247);
        StorageDead(_1251);
        StorageDead(_1247);
        goto -> bb656;
    }

    bb518: {
        _1264 = &mut (*_1265);
        StorageDead(_1266);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        _1272 = &mut (*_7);
        StorageLive(_1273);
        _1273 = _2;
        _1271 = User::get_spot_position_mut(move _1272, move _1273) -> [return: bb519, unwind: bb700];
    }

    bb519: {
        StorageDead(_1273);
        StorageDead(_1272);
        _1270 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1271) -> [return: bb520, unwind: bb700];
    }

    bb520: {
        StorageDead(_1271);
        _1274 = discriminant(_1270);
        switchInt(move _1274) -> [0: bb521, 1: bb522, otherwise: bb18];
    }

    bb521: {
        StorageLive(_1278);
        _1278 = move ((_1270 as Continue).0: &mut state::user::SpotPosition);
        _1269 = &mut (*_1278);
        StorageDead(_1278);
        _1268 = &mut (*_1269);
        StorageLive(_1279);
        StorageLive(_1280);
        _1280 = _1137;
        _1279 = Option::<u128>::Some(move _1280);
        StorageDead(_1280);
        _1259 = update_spot_balances_and_cumulative_deposits(move _1260, move _1261, move _1264, move _1268, const false, move _1279) -> [return: bb524, unwind: bb700];
    }

    bb522: {
        StorageLive(_1275);
        _1275 = ((_1270 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1277);
        _1277 = _1275;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1277) -> [return: bb523, unwind: bb700];
    }

    bb523: {
        StorageDead(_1277);
        StorageDead(_1275);
        StorageDead(_1268);
        StorageDead(_1264);
        StorageDead(_1261);
        StorageDead(_1260);
        StorageDead(_1259);
        goto -> bb654;
    }

    bb524: {
        StorageDead(_1279);
        StorageDead(_1268);
        StorageDead(_1264);
        StorageDead(_1261);
        StorageDead(_1260);
        _1258 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1259) -> [return: bb525, unwind: bb700];
    }

    bb525: {
        StorageDead(_1259);
        _1281 = discriminant(_1258);
        switchInt(move _1281) -> [0: bb526, 1: bb527, otherwise: bb18];
    }

    bb526: {
        StorageLive(_1285);
        _1285 = ((_1258 as Continue).0: ());
        _1257 = _1285;
        StorageDead(_1285);
        StorageDead(_1270);
        StorageDead(_1269);
        StorageDead(_1267);
        StorageDead(_1265);
        StorageDead(_1262);
        StorageDead(_1258);
        StorageDead(_1257);
        StorageLive(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        StorageLive(_1289);
        _1289 = _1137;
        StorageLive(_1290);
        StorageLive(_1291);
        _1549 = const _;
        _1291 = &(*_1549);
        _1290 = &(*_1291);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        StorageLive(_1296);
        _1296 = &mut _1246;
        _1295 = &mut (*_1296);
        _1294 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1295) -> [return: bb529, unwind: bb700];
    }

    bb527: {
        StorageLive(_1282);
        _1282 = ((_1258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1284);
        _1284 = _1282;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1284) -> [return: bb528, unwind: bb700];
    }

    bb528: {
        StorageDead(_1284);
        StorageDead(_1282);
        goto -> bb654;
    }

    bb529: {
        _1293 = &mut (*_1294);
        StorageDead(_1295);
        StorageLive(_1297);
        StorageLive(_1298);
        StorageLive(_1299);
        StorageLive(_1300);
        StorageLive(_1301);
        _1301 = &mut (*_5);
        StorageLive(_1302);
        _1302 = _2;
        _1300 = User::get_spot_position_mut(move _1301, move _1302) -> [return: bb530, unwind: bb700];
    }

    bb530: {
        StorageDead(_1302);
        StorageDead(_1301);
        _1299 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1300) -> [return: bb531, unwind: bb700];
    }

    bb531: {
        StorageDead(_1300);
        _1303 = discriminant(_1299);
        switchInt(move _1303) -> [0: bb532, 1: bb533, otherwise: bb18];
    }

    bb532: {
        StorageLive(_1307);
        _1307 = move ((_1299 as Continue).0: &mut state::user::SpotPosition);
        _1298 = &mut (*_1307);
        StorageDead(_1307);
        _1297 = &mut (*_1298);
        StorageLive(_1308);
        StorageLive(_1309);
        _1309 = _1137;
        _1308 = Option::<u128>::Some(move _1309);
        StorageDead(_1309);
        _1288 = update_spot_balances_and_cumulative_deposits(move _1289, move _1290, move _1293, move _1297, const false, move _1308) -> [return: bb535, unwind: bb700];
    }

    bb533: {
        StorageLive(_1304);
        _1304 = ((_1299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1306);
        _1306 = _1304;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1306) -> [return: bb534, unwind: bb700];
    }

    bb534: {
        StorageDead(_1306);
        StorageDead(_1304);
        StorageDead(_1297);
        StorageDead(_1293);
        StorageDead(_1290);
        StorageDead(_1289);
        StorageDead(_1288);
        goto -> bb653;
    }

    bb535: {
        StorageDead(_1308);
        StorageDead(_1297);
        StorageDead(_1293);
        StorageDead(_1290);
        StorageDead(_1289);
        _1287 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1288) -> [return: bb536, unwind: bb700];
    }

    bb536: {
        StorageDead(_1288);
        _1310 = discriminant(_1287);
        switchInt(move _1310) -> [0: bb537, 1: bb538, otherwise: bb18];
    }

    bb537: {
        StorageLive(_1314);
        _1314 = ((_1287 as Continue).0: ());
        _1286 = _1314;
        StorageDead(_1314);
        StorageDead(_1299);
        StorageDead(_1298);
        StorageDead(_1296);
        StorageDead(_1294);
        StorageDead(_1291);
        StorageDead(_1287);
        StorageDead(_1286);
        _1245 = const ();
        drop(_1246) -> [return: bb540, unwind: bb749];
    }

    bb538: {
        StorageLive(_1311);
        _1311 = ((_1287 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1313);
        _1313 = _1311;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1313) -> [return: bb539, unwind: bb700];
    }

    bb539: {
        StorageDead(_1313);
        StorageDead(_1311);
        goto -> bb653;
    }

    bb540: {
        StorageDead(_1246);
        StorageDead(_1245);
        StorageLive(_1315);
        StorageLive(_1316);
        StorageLive(_1317);
        StorageLive(_1318);
        StorageLive(_1319);
        _1319 = &(*_9);
        StorageLive(_1320);
        StorageLive(_1321);
        _1321 = &_1;
        _1320 = &(*_1321);
        _1318 = PerpMarketMap::<'_>::get_ref_mut(move _1319, move _1320) -> [return: bb541, unwind: bb749];
    }

    bb541: {
        StorageDead(_1320);
        StorageDead(_1319);
        _1317 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1318) -> [return: bb542, unwind: bb749];
    }

    bb542: {
        StorageDead(_1318);
        _1322 = discriminant(_1317);
        switchInt(move _1322) -> [0: bb543, 1: bb544, otherwise: bb18];
    }

    bb543: {
        StorageLive(_1326);
        _1326 = move ((_1317 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1316 = move _1326;
        StorageDead(_1326);
        _1613 = discriminant(_1317);
        StorageDead(_1321);
        StorageDead(_1317);
        StorageLive(_1327);
        StorageLive(_1328);
        StorageLive(_1329);
        StorageLive(_1330);
        _1330 = &mut (*_7);
        StorageLive(_1331);
        _1331 = _1;
        _1329 = User::force_get_perp_position_mut(move _1330, move _1331) -> [return: bb546, unwind: bb699];
    }

    bb544: {
        StorageLive(_1323);
        _1323 = ((_1317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1325);
        _1325 = _1323;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1325) -> [return: bb545, unwind: bb745];
    }

    bb545: {
        StorageDead(_1325);
        StorageDead(_1323);
        _1611 = discriminant(_1317);
        StorageDead(_1321);
        StorageDead(_1317);
        goto -> bb652;
    }

    bb546: {
        StorageDead(_1331);
        StorageDead(_1330);
        _1328 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1329) -> [return: bb547, unwind: bb699];
    }

    bb547: {
        StorageDead(_1329);
        _1332 = discriminant(_1328);
        switchInt(move _1332) -> [0: bb548, 1: bb549, otherwise: bb18];
    }

    bb548: {
        StorageLive(_1336);
        _1336 = move ((_1328 as Continue).0: &mut state::user::PerpPosition);
        _1327 = move _1336;
        StorageDead(_1336);
        StorageDead(_1328);
        StorageLive(_1337);
        StorageLive(_1338);
        StorageLive(_1339);
        StorageLive(_1340);
        _1340 = &mut (*_1327);
        StorageLive(_1341);
        StorageLive(_1342);
        StorageLive(_1343);
        StorageLive(_1344);
        _1344 = &mut _1316;
        _1343 = &mut (*_1344);
        _1342 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1343) -> [return: bb551, unwind: bb699];
    }

    bb549: {
        StorageLive(_1333);
        _1333 = ((_1328 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1335);
        _1335 = _1333;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1335) -> [return: bb550, unwind: bb699];
    }

    bb550: {
        StorageDead(_1335);
        StorageDead(_1333);
        StorageDead(_1328);
        goto -> bb651;
    }

    bb551: {
        _1341 = &mut (*_1342);
        StorageDead(_1343);
        StorageLive(_1345);
        StorageLive(_1346);
        StorageLive(_1347);
        StorageLive(_1348);
        StorageLive(_1349);
        _1349 = _1128;
        _1348 = <u128 as Cast>::cast::<i64>(move _1349) -> [return: bb552, unwind: bb699];
    }

    bb552: {
        StorageDead(_1349);
        _1347 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1348) -> [return: bb553, unwind: bb699];
    }

    bb553: {
        StorageDead(_1348);
        _1350 = discriminant(_1347);
        switchInt(move _1350) -> [0: bb554, 1: bb555, otherwise: bb18];
    }

    bb554: {
        StorageLive(_1354);
        _1354 = ((_1347 as Continue).0: i64);
        _1346 = _1354;
        StorageDead(_1354);
        _1355 = Eq(_1346, const i64::MIN);
        assert(!move _1355, "attempt to negate `{}`, which would overflow", _1346) -> [success: bb557, unwind: bb699];
    }

    bb555: {
        StorageLive(_1351);
        _1351 = ((_1347 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1353);
        _1353 = _1351;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1353) -> [return: bb556, unwind: bb699];
    }

    bb556: {
        StorageDead(_1353);
        StorageDead(_1351);
        StorageDead(_1346);
        StorageDead(_1345);
        StorageDead(_1341);
        StorageDead(_1340);
        StorageDead(_1339);
        goto -> bb650;
    }

    bb557: {
        _1345 = Neg(move _1346);
        StorageDead(_1346);
        _1339 = update_quote_asset_amount(move _1340, move _1341, move _1345) -> [return: bb558, unwind: bb699];
    }

    bb558: {
        StorageDead(_1345);
        StorageDead(_1341);
        StorageDead(_1340);
        _1338 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1339) -> [return: bb559, unwind: bb699];
    }

    bb559: {
        StorageDead(_1339);
        _1356 = discriminant(_1338);
        switchInt(move _1356) -> [0: bb560, 1: bb561, otherwise: bb18];
    }

    bb560: {
        StorageLive(_1360);
        _1360 = ((_1338 as Continue).0: ());
        _1337 = _1360;
        StorageDead(_1360);
        StorageDead(_1347);
        StorageDead(_1344);
        StorageDead(_1342);
        StorageDead(_1338);
        StorageDead(_1337);
        StorageLive(_1361);
        StorageLive(_1362);
        StorageLive(_1363);
        StorageLive(_1364);
        _1364 = &mut (*_5);
        StorageLive(_1365);
        _1365 = _1;
        _1363 = User::get_perp_position_mut(move _1364, move _1365) -> [return: bb563, unwind: bb699];
    }

    bb561: {
        StorageLive(_1357);
        _1357 = ((_1338 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1359);
        _1359 = _1357;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1359) -> [return: bb562, unwind: bb699];
    }

    bb562: {
        StorageDead(_1359);
        StorageDead(_1357);
        goto -> bb650;
    }

    bb563: {
        StorageDead(_1365);
        StorageDead(_1364);
        _1362 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1363) -> [return: bb564, unwind: bb699];
    }

    bb564: {
        StorageDead(_1363);
        _1366 = discriminant(_1362);
        switchInt(move _1366) -> [0: bb565, 1: bb566, otherwise: bb18];
    }

    bb565: {
        StorageLive(_1370);
        _1370 = move ((_1362 as Continue).0: &mut state::user::PerpPosition);
        _1361 = move _1370;
        StorageDead(_1370);
        StorageDead(_1362);
        StorageLive(_1371);
        StorageLive(_1372);
        StorageLive(_1373);
        StorageLive(_1374);
        _1374 = &mut (*_1361);
        StorageLive(_1375);
        StorageLive(_1376);
        StorageLive(_1377);
        StorageLive(_1378);
        _1378 = &mut _1316;
        _1377 = &mut (*_1378);
        _1376 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1377) -> [return: bb568, unwind: bb699];
    }

    bb566: {
        StorageLive(_1367);
        _1367 = ((_1362 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1369);
        _1369 = _1367;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1369) -> [return: bb567, unwind: bb699];
    }

    bb567: {
        StorageDead(_1369);
        StorageDead(_1367);
        StorageDead(_1362);
        goto -> bb649;
    }

    bb568: {
        _1375 = &mut (*_1376);
        StorageDead(_1377);
        StorageLive(_1379);
        StorageLive(_1380);
        StorageLive(_1381);
        StorageLive(_1382);
        _1382 = _1128;
        _1381 = <u128 as Cast>::cast::<i64>(move _1382) -> [return: bb569, unwind: bb699];
    }

    bb569: {
        StorageDead(_1382);
        _1380 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1381) -> [return: bb570, unwind: bb699];
    }

    bb570: {
        StorageDead(_1381);
        _1383 = discriminant(_1380);
        switchInt(move _1383) -> [0: bb571, 1: bb572, otherwise: bb18];
    }

    bb571: {
        StorageLive(_1387);
        _1387 = ((_1380 as Continue).0: i64);
        _1379 = _1387;
        StorageDead(_1387);
        _1373 = update_quote_asset_amount(move _1374, move _1375, move _1379) -> [return: bb574, unwind: bb699];
    }

    bb572: {
        StorageLive(_1384);
        _1384 = ((_1380 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1386);
        _1386 = _1384;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1386) -> [return: bb573, unwind: bb699];
    }

    bb573: {
        StorageDead(_1386);
        StorageDead(_1384);
        StorageDead(_1379);
        StorageDead(_1375);
        StorageDead(_1374);
        StorageDead(_1373);
        goto -> bb648;
    }

    bb574: {
        StorageDead(_1379);
        StorageDead(_1375);
        StorageDead(_1374);
        _1372 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1373) -> [return: bb575, unwind: bb699];
    }

    bb575: {
        StorageDead(_1373);
        _1388 = discriminant(_1372);
        switchInt(move _1388) -> [0: bb576, 1: bb577, otherwise: bb18];
    }

    bb576: {
        StorageLive(_1392);
        _1392 = ((_1372 as Continue).0: ());
        _1371 = _1392;
        StorageDead(_1392);
        StorageDead(_1380);
        StorageDead(_1378);
        StorageDead(_1376);
        StorageDead(_1372);
        StorageDead(_1371);
        _1315 = const ();
        StorageDead(_1361);
        StorageDead(_1327);
        drop(_1316) -> [return: bb579, unwind: bb749];
    }

    bb577: {
        StorageLive(_1389);
        _1389 = ((_1372 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1391);
        _1391 = _1389;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1391) -> [return: bb578, unwind: bb699];
    }

    bb578: {
        StorageDead(_1391);
        StorageDead(_1389);
        goto -> bb648;
    }

    bb579: {
        StorageDead(_1316);
        StorageDead(_1315);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        _1397 = &(*_5);
        StorageLive(_1398);
        _1398 = &(*_9);
        StorageLive(_1399);
        _1399 = &(*_10);
        StorageLive(_1400);
        _1400 = &mut (*_11);
        StorageLive(_1401);
        _1401 = _14;
        StorageLive(_1402);
        _1402 = _1042;
        _1396 = calculate_margin_freed(move _1397, move _1398, move _1399, move _1400, move _1401, move _1402) -> [return: bb580, unwind: bb749];
    }

    bb580: {
        StorageDead(_1402);
        StorageDead(_1401);
        StorageDead(_1400);
        StorageDead(_1399);
        StorageDead(_1398);
        StorageDead(_1397);
        _1395 = <std::result::Result<(u64, MarginCalculation), error::ErrorCode> as Try>::branch(move _1396) -> [return: bb581, unwind: bb749];
    }

    bb581: {
        StorageDead(_1396);
        _1403 = discriminant(_1395);
        switchInt(move _1403) -> [0: bb582, 1: bb583, otherwise: bb18];
    }

    bb582: {
        StorageLive(_1407);
        _1407 = ((_1395 as Continue).0: (u64, state::margin_calculation::MarginCalculation));
        _1394 = _1407;
        StorageDead(_1407);
        StorageLive(_1393);
        _1393 = (_1394.0: u64);
        StorageDead(_1395);
        StorageDead(_1394);
        StorageLive(_1408);
        StorageLive(_1409);
        StorageLive(_1410);
        StorageLive(_1411);
        _1411 = _813;
        StorageLive(_1412);
        _1412 = _1393;
        _1410 = <u64 as SafeMath>::safe_add(move _1411, move _1412) -> [return: bb585, unwind: bb749];
    }

    bb583: {
        StorageLive(_1404);
        _1404 = ((_1395 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1406);
        _1406 = _1404;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1406) -> [return: bb584, unwind: bb749];
    }

    bb584: {
        StorageDead(_1406);
        StorageDead(_1404);
        StorageDead(_1395);
        StorageDead(_1394);
        goto -> bb657;
    }

    bb585: {
        StorageDead(_1412);
        StorageDead(_1411);
        _1409 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1410) -> [return: bb586, unwind: bb749];
    }

    bb586: {
        StorageDead(_1410);
        _1413 = discriminant(_1409);
        switchInt(move _1413) -> [0: bb587, 1: bb588, otherwise: bb18];
    }

    bb587: {
        StorageLive(_1417);
        _1417 = ((_1409 as Continue).0: u64);
        _1408 = _1417;
        StorageDead(_1417);
        _813 = move _1408;
        StorageDead(_1408);
        StorageDead(_1409);
        StorageLive(_1418);
        StorageLive(_1419);
        StorageLive(_1420);
        StorageLive(_1421);
        _1421 = &mut (*_5);
        StorageLive(_1422);
        _1422 = _1393;
        _1420 = User::increment_margin_freed(move _1421, move _1422) -> [return: bb590, unwind: bb749];
    }

    bb588: {
        StorageLive(_1414);
        _1414 = ((_1409 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1416);
        _1416 = _1414;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1416) -> [return: bb589, unwind: bb749];
    }

    bb589: {
        StorageDead(_1416);
        StorageDead(_1414);
        StorageDead(_1408);
        StorageDead(_1409);
        goto -> bb647;
    }

    bb590: {
        StorageDead(_1422);
        StorageDead(_1421);
        _1419 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1420) -> [return: bb591, unwind: bb749];
    }

    bb591: {
        StorageDead(_1420);
        _1423 = discriminant(_1419);
        switchInt(move _1423) -> [0: bb592, 1: bb593, otherwise: bb18];
    }

    bb592: {
        StorageLive(_1427);
        _1427 = ((_1419 as Continue).0: ());
        _1418 = _1427;
        StorageDead(_1427);
        StorageDead(_1419);
        StorageDead(_1418);
        StorageLive(_1428);
        StorageLive(_1429);
        StorageLive(_1430);
        _1430 = _1128;
        StorageLive(_1431);
        _1431 = _1061;
        _1429 = Ge(move _1430, move _1431);
        switchInt(move _1429) -> [0: bb596, otherwise: bb595];
    }

    bb593: {
        StorageLive(_1424);
        _1424 = ((_1419 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1426);
        _1426 = _1424;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1426) -> [return: bb594, unwind: bb749];
    }

    bb594: {
        StorageDead(_1426);
        StorageDead(_1424);
        StorageDead(_1419);
        StorageDead(_1418);
        goto -> bb647;
    }

    bb595: {
        StorageDead(_1431);
        StorageDead(_1430);
        StorageLive(_1432);
        StorageLive(_1433);
        _1433 = &mut (*_5);
        _1432 = User::exit_liquidation(move _1433) -> [return: bb597, unwind: bb749];
    }

    bb596: {
        StorageDead(_1431);
        StorageDead(_1430);
        StorageLive(_1434);
        StorageLive(_1435);
        _1435 = &(*_5);
        _1434 = is_user_bankrupt(move _1435) -> [return: bb598, unwind: bb749];
    }

    bb597: {
        StorageDead(_1433);
        StorageDead(_1432);
        _1428 = const ();
        goto -> bb603;
    }

    bb598: {
        switchInt(move _1434) -> [0: bb601, otherwise: bb599];
    }

    bb599: {
        StorageDead(_1435);
        StorageLive(_1436);
        StorageLive(_1437);
        _1437 = &mut (*_5);
        _1436 = User::enter_bankruptcy(move _1437) -> [return: bb600, unwind: bb749];
    }

    bb600: {
        StorageDead(_1437);
        StorageDead(_1436);
        _1428 = const ();
        goto -> bb602;
    }

    bb601: {
        StorageDead(_1435);
        _1428 = const ();
        goto -> bb602;
    }

    bb602: {
        StorageDead(_1434);
        goto -> bb603;
    }

    bb603: {
        StorageDead(_1429);
        StorageDead(_1428);
        StorageLive(_1438);
        StorageLive(_1439);
        StorageLive(_1440);
        StorageLive(_1441);
        _1441 = &(*_7);
        StorageLive(_1442);
        _1442 = &(*_9);
        StorageLive(_1443);
        _1443 = &(*_10);
        StorageLive(_1444);
        _1444 = &mut (*_11);
        _1440 = math::margin::meets_initial_margin_requirement(move _1441, move _1442, move _1443, move _1444) -> [return: bb604, unwind: bb749];
    }

    bb604: {
        StorageDead(_1444);
        StorageDead(_1443);
        StorageDead(_1442);
        StorageDead(_1441);
        _1439 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1440) -> [return: bb605, unwind: bb749];
    }

    bb605: {
        StorageDead(_1440);
        _1445 = discriminant(_1439);
        switchInt(move _1445) -> [0: bb606, 1: bb607, otherwise: bb18];
    }

    bb606: {
        StorageLive(_1449);
        _1449 = ((_1439 as Continue).0: bool);
        _1438 = _1449;
        StorageDead(_1449);
        StorageDead(_1439);
        StorageLive(_1450);
        StorageLive(_1451);
        StorageLive(_1452);
        StorageLive(_1453);
        _1453 = _1438;
        switchInt(move _1453) -> [0: bb610, otherwise: bb609];
    }

    bb607: {
        StorageLive(_1446);
        _1446 = ((_1439 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1448);
        _1448 = _1446;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1448) -> [return: bb608, unwind: bb749];
    }

    bb608: {
        StorageDead(_1448);
        StorageDead(_1446);
        StorageDead(_1439);
        goto -> bb646;
    }

    bb609: {
        StorageLive(_1454);
        _1454 = ();
        _1452 = std::result::Result::<(), error::ErrorCode>::Ok(move _1454);
        StorageDead(_1454);
        goto -> bb618;
    }

    bb610: {
        StorageLive(_1455);
        _1455 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_1456);
        StorageLive(_1457);
        StorageLive(_1458);
        StorageLive(_1459);
        StorageLive(_1460);
        StorageLive(_1461);
        StorageLive(_1462);
        StorageLive(_1463);
        StorageLive(_1464);
        StorageLive(_1465);
        StorageLive(_1466);
        _1548 = const _;
        _1466 = &(*_1548);
        _1465 = &(*_1466);
        _1464 = move _1465 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1465);
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        StorageLive(_1471);
        StorageLive(_1472);
        StorageLive(_1473);
        StorageLive(_1474);
        _1474 = &_1455;
        _1473 = &(*_1474);
        _1472 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1473) -> [return: bb611, unwind: bb749];
    }

    bb611: {
        StorageDead(_1473);
        _1471 = [move _1472];
        StorageDead(_1472);
        _1470 = &_1471;
        _1469 = &(*_1470);
        _1468 = move _1469 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1469);
        _1463 = Arguments::<'_>::new_v1(move _1464, move _1468) -> [return: bb612, unwind: bb749];
    }

    bb612: {
        StorageDead(_1468);
        StorageDead(_1464);
        _1462 = format(move _1463) -> [return: bb613, unwind: bb749];
    }

    bb613: {
        StorageDead(_1463);
        StorageDead(_1474);
        StorageDead(_1471);
        StorageDead(_1470);
        StorageDead(_1466);
        _1461 = move _1462;
        StorageDead(_1462);
        _1460 = &_1461;
        _1459 = &(*_1460);
        _1458 = <String as Deref>::deref(move _1459) -> [return: bb614, unwind: bb698];
    }

    bb614: {
        _1457 = &(*_1458);
        StorageDead(_1459);
        _1456 = solana_program::log::sol_log(move _1457) -> [return: bb615, unwind: bb698];
    }

    bb615: {
        StorageDead(_1457);
        drop(_1461) -> [return: bb616, unwind: bb749];
    }

    bb616: {
        StorageDead(_1461);
        StorageDead(_1460);
        StorageDead(_1458);
        StorageDead(_1456);
        StorageLive(_1475);
        StorageLive(_1476);
        StorageLive(_1477);
        _1477 = const "Liquidator doesnt have enough collateral to take over borrow";
        _1476 = &(*_1477);
        _1475 = solana_program::log::sol_log(move _1476) -> [return: bb617, unwind: bb749];
    }

    bb617: {
        StorageDead(_1476);
        StorageDead(_1477);
        StorageDead(_1475);
        StorageLive(_1478);
        _1478 = _1455;
        _1452 = std::result::Result::<(), error::ErrorCode>::Err(move _1478);
        StorageDead(_1478);
        StorageDead(_1455);
        goto -> bb618;
    }

    bb618: {
        StorageDead(_1453);
        _1451 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1452) -> [return: bb619, unwind: bb749];
    }

    bb619: {
        StorageDead(_1452);
        _1479 = discriminant(_1451);
        switchInt(move _1479) -> [0: bb620, 1: bb621, otherwise: bb18];
    }

    bb620: {
        StorageLive(_1483);
        _1483 = ((_1451 as Continue).0: ());
        _1450 = _1483;
        StorageDead(_1483);
        StorageDead(_1451);
        StorageDead(_1450);
        StorageLive(_1484);
        StorageLive(_1485);
        StorageLive(_1486);
        StorageLive(_1487);
        StorageLive(_1488);
        _1488 = &(*_9);
        StorageLive(_1489);
        StorageLive(_1490);
        _1490 = &_1;
        _1489 = &(*_1490);
        _1487 = PerpMarketMap::<'_>::get_ref_mut(move _1488, move _1489) -> [return: bb623, unwind: bb749];
    }

    bb621: {
        StorageLive(_1480);
        _1480 = ((_1451 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1482);
        _1482 = _1480;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1482) -> [return: bb622, unwind: bb749];
    }

    bb622: {
        StorageDead(_1482);
        StorageDead(_1480);
        StorageDead(_1451);
        StorageDead(_1450);
        goto -> bb646;
    }

    bb623: {
        StorageDead(_1489);
        StorageDead(_1488);
        _1486 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1487) -> [return: bb624, unwind: bb749];
    }

    bb624: {
        StorageDead(_1487);
        _1491 = discriminant(_1486);
        switchInt(move _1491) -> [0: bb625, 1: bb626, otherwise: bb18];
    }

    bb625: {
        StorageLive(_1495);
        _1495 = move ((_1486 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1485 = move _1495;
        StorageDead(_1495);
        _1617 = discriminant(_1486);
        StorageDead(_1490);
        StorageDead(_1486);
        StorageLive(_1496);
        StorageLive(_1497);
        StorageLive(_1498);
        StorageLive(_1499);
        _1499 = &mut (*_11);
        StorageLive(_1500);
        StorageLive(_1501);
        StorageLive(_1502);
        StorageLive(_1503);
        StorageLive(_1504);
        StorageLive(_1505);
        _1505 = &_1485;
        _1504 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1505) -> [return: bb628, unwind: bb697];
    }

    bb626: {
        StorageLive(_1492);
        _1492 = ((_1486 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1494);
        _1494 = _1492;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1494) -> [return: bb627, unwind: bb744];
    }

    bb627: {
        StorageDead(_1494);
        StorageDead(_1492);
        _1615 = discriminant(_1486);
        StorageDead(_1490);
        StorageDead(_1486);
        StorageDead(_1485);
        goto -> bb645;
    }

    bb628: {
        _1503 = &(*_1504);
        StorageDead(_1505);
        _1502 = PerpMarket::oracle_id(move _1503) -> [return: bb629, unwind: bb697];
    }

    bb629: {
        StorageDead(_1503);
        _1501 = &_1502;
        _1500 = &(*_1501);
        _1498 = OracleMap::<'_>::get_price_data(move _1499, move _1500) -> [return: bb630, unwind: bb697];
    }

    bb630: {
        StorageDead(_1500);
        StorageDead(_1499);
        _1497 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _1498) -> [return: bb631, unwind: bb697];
    }

    bb631: {
        StorageDead(_1498);
        _1506 = discriminant(_1497);
        switchInt(move _1506) -> [0: bb632, 1: bb633, otherwise: bb18];
    }

    bb632: {
        StorageLive(_1510);
        _1510 = ((_1497 as Continue).0: &state::oracle::OraclePriceData);
        _1496 = _1510;
        StorageDead(_1510);
        _1484 = ((*_1496).0: i64);
        drop(_1485) -> [return: bb635, unwind: bb749];
    }

    bb633: {
        StorageLive(_1507);
        _1507 = ((_1497 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1509);
        _1509 = _1507;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1509) -> [return: bb634, unwind: bb697];
    }

    bb634: {
        StorageDead(_1509);
        StorageDead(_1507);
        drop(_1485) -> [return: bb644, unwind: bb749];
    }

    bb635: {
        StorageDead(_1485);
        StorageDead(_1504);
        StorageDead(_1502);
        StorageDead(_1501);
        StorageDead(_1497);
        StorageDead(_1496);
        StorageLive(_1511);
        StorageLive(_1512);
        StorageLive(_1513);
        StorageLive(_1514);
        StorageLive(_1515);
        StorageLive(_1516);
        StorageLive(_1517);
        StorageLive(_1518);
        StorageLive(_1519);
        StorageLive(_1520);
        StorageLive(_1521);
        StorageLive(_1522);
        StorageLive(_1523);
        StorageLive(_1524);
        StorageLive(_1525);
        _1525 = _12;
        StorageLive(_1526);
        _1526 = _803;
        StorageLive(_1527);
        _1527 = LiquidationType::LiquidatePerpPnlForDeposit;
        StorageLive(_1528);
        _1528 = (*_6);
        StorageLive(_1529);
        _1529 = (*_8);
        StorageLive(_1530);
        _1530 = (_748.3: u128);
        StorageLive(_1531);
        _1531 = (_748.1: i128);
        StorageLive(_1532);
        StorageLive(_1533);
        _1533 = &(*_5);
        _1532 = User::is_bankrupt(move _1533) -> [return: bb636, unwind: bb749];
    }

    bb636: {
        StorageDead(_1533);
        StorageLive(_1534);
        _1534 = _813;
        StorageLive(_1535);
        StorageLive(_1536);
        _1536 = _1;
        StorageLive(_1537);
        _1537 = _1484;
        StorageLive(_1538);
        _1538 = _1128;
        StorageLive(_1539);
        _1539 = _2;
        StorageLive(_1540);
        _1540 = _391;
        StorageLive(_1541);
        _1541 = _1137;
        _1535 = LiquidatePerpPnlForDepositRecord { perp_market_index: move _1536, market_oracle_price: move _1537, pnl_transfer: move _1538, asset_market_index: move _1539, asset_price: move _1540, asset_transfer: move _1541 };
        StorageDead(_1541);
        StorageDead(_1540);
        StorageDead(_1539);
        StorageDead(_1538);
        StorageDead(_1537);
        StorageDead(_1536);
        StorageLive(_1542);
        _1542 = <LiquidationRecord as Default>::default() -> [return: bb637, unwind: bb749];
    }

    bb637: {
        _1524 = LiquidationRecord { ts: move _1525, liquidation_type: move _1527, user: move _1528, liquidator: move _1529, margin_requirement: move _1530, total_collateral: move _1531, margin_freed: move _1534, liquidation_id: move _1526, bankrupt: move _1532, canceled_order_ids: move (_1542.9: std::vec::Vec<u32>), liquidate_perp: move (_1542.10: state::events::LiquidatePerpRecord), liquidate_spot: move (_1542.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_1542.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move _1535, perp_bankruptcy: move (_1542.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_1542.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_1535);
        StorageDead(_1534);
        StorageDead(_1532);
        StorageDead(_1531);
        StorageDead(_1530);
        StorageDead(_1529);
        StorageDead(_1528);
        StorageDead(_1527);
        StorageDead(_1526);
        StorageDead(_1525);
        _1523 = &_1524;
        _1522 = &(*_1523);
        _1521 = <LiquidationRecord as anchor_lang::Event>::data(move _1522) -> [return: bb638, unwind: bb696];
    }

    bb638: {
        StorageDead(_1522);
        _1520 = &_1521;
        _1519 = &(*_1520);
        _1518 = <Vec<u8> as Deref>::deref(move _1519) -> [return: bb639, unwind: bb695];
    }

    bb639: {
        _1517 = &(*_1518);
        StorageDead(_1519);
        _1516 = [move _1517];
        StorageDead(_1517);
        _1515 = &_1516;
        _1514 = &(*_1515);
        _1513 = move _1514 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1514);
        _1512 = solana_program::log::sol_log_data(move _1513) -> [return: bb640, unwind: bb695];
    }

    bb640: {
        StorageDead(_1513);
        drop(_1521) -> [return: bb641, unwind: bb696];
    }

    bb641: {
        drop(_1524) -> [return: bb642, unwind: bb749];
    }

    bb642: {
        StorageDead(_1542);
        StorageDead(_1524);
        StorageDead(_1523);
        StorageDead(_1521);
        StorageDead(_1520);
        StorageDead(_1518);
        StorageDead(_1516);
        StorageDead(_1515);
        StorageDead(_1512);
        _1511 = const ();
        StorageDead(_1511);
        StorageLive(_1543);
        _1543 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1543);
        StorageDead(_1543);
        StorageDead(_1484);
        StorageDead(_1438);
        StorageDead(_1393);
        StorageDead(_1137);
        StorageDead(_1128);
        StorageDead(_1123);
        StorageDead(_1108);
        StorageDead(_1089);
        StorageDead(_1076);
        StorageDead(_1061);
        StorageDead(_1051);
        StorageDead(_1042);
        StorageDead(_855);
        StorageDead(_848);
        StorageDead(_836);
        StorageDead(_835);
        drop(_814) -> [return: bb643, unwind: bb757];
    }

    bb643: {
        _1570 = const false;
        StorageDead(_814);
        StorageDead(_813);
        StorageDead(_803);
        StorageDead(_748);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        _1573 = const false;
        StorageDead(_223);
        _1574 = const false;
        StorageDead(_156);
        goto -> bb694;
    }

    bb644: {
        StorageDead(_1485);
        StorageDead(_1504);
        StorageDead(_1502);
        StorageDead(_1501);
        StorageDead(_1497);
        StorageDead(_1496);
        goto -> bb645;
    }

    bb645: {
        StorageDead(_1484);
        goto -> bb646;
    }

    bb646: {
        StorageDead(_1438);
        goto -> bb647;
    }

    bb647: {
        StorageDead(_1393);
        goto -> bb657;
    }

    bb648: {
        StorageDead(_1380);
        StorageDead(_1378);
        StorageDead(_1376);
        StorageDead(_1372);
        StorageDead(_1371);
        goto -> bb649;
    }

    bb649: {
        StorageDead(_1361);
        goto -> bb651;
    }

    bb650: {
        StorageDead(_1347);
        StorageDead(_1344);
        StorageDead(_1342);
        StorageDead(_1338);
        StorageDead(_1337);
        goto -> bb651;
    }

    bb651: {
        StorageDead(_1327);
        drop(_1316) -> [return: bb652, unwind: bb749];
    }

    bb652: {
        StorageDead(_1316);
        StorageDead(_1315);
        goto -> bb657;
    }

    bb653: {
        StorageDead(_1299);
        StorageDead(_1298);
        StorageDead(_1296);
        StorageDead(_1294);
        StorageDead(_1291);
        StorageDead(_1287);
        StorageDead(_1286);
        goto -> bb655;
    }

    bb654: {
        StorageDead(_1270);
        StorageDead(_1269);
        StorageDead(_1267);
        StorageDead(_1265);
        StorageDead(_1262);
        StorageDead(_1258);
        StorageDead(_1257);
        goto -> bb655;
    }

    bb655: {
        drop(_1246) -> [return: bb656, unwind: bb749];
    }

    bb656: {
        StorageDead(_1246);
        StorageDead(_1245);
        goto -> bb657;
    }

    bb657: {
        StorageDead(_1137);
        StorageDead(_1128);
        StorageDead(_1123);
        goto -> bb658;
    }

    bb658: {
        StorageDead(_1108);
        goto -> bb659;
    }

    bb659: {
        StorageDead(_1089);
        goto -> bb660;
    }

    bb660: {
        StorageDead(_1076);
        goto -> bb661;
    }

    bb661: {
        StorageDead(_1061);
        goto -> bb662;
    }

    bb662: {
        StorageDead(_1051);
        goto -> bb663;
    }

    bb663: {
        StorageDead(_1042);
        goto -> bb670;
    }

    bb664: {
        StorageDead(_935);
        drop(_924) -> [return: bb665, unwind: bb749];
    }

    bb665: {
        StorageDead(_924);
        StorageDead(_922);
        StorageDead(_921);
        StorageDead(_920);
        goto -> bb666;
    }

    bb666: {
        StorageDead(_911);
        goto -> bb667;
    }

    bb667: {
        StorageDead(_881);
        goto -> bb668;
    }

    bb668: {
        StorageDead(_872);
        goto -> bb669;
    }

    bb669: {
        StorageDead(_858);
        StorageDead(_856);
        goto -> bb670;
    }

    bb670: {
        StorageDead(_855);
        StorageDead(_848);
        StorageDead(_836);
        StorageDead(_835);
        goto -> bb737;
    }

    bb671: {
        _1570 = const false;
        StorageDead(_814);
        StorageDead(_813);
        goto -> bb672;
    }

    bb672: {
        StorageDead(_803);
        goto -> bb675;
    }

    bb673: {
        StorageDead(_790);
        StorageDead(_788);
        goto -> bb674;
    }

    bb674: {
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_762);
        goto -> bb675;
    }

    bb675: {
        StorageDead(_748);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_577);
        goto -> bb684;
    }

    bb676: {
        StorageDead(_701);
        drop(_690) -> [return: bb677, unwind: bb757];
    }

    bb677: {
        StorageDead(_690);
        StorageDead(_646);
        StorageDead(_594);
        StorageDead(_584);
        StorageDead(_740);
        StorageDead(_737);
        StorageDead(_734);
        goto -> bb683;
    }

    bb678: {
        StorageDead(_701);
        drop(_690) -> [return: bb679, unwind: bb757];
    }

    bb679: {
        StorageDead(_690);
        goto -> bb680;
    }

    bb680: {
        StorageDead(_646);
        goto -> bb681;
    }

    bb681: {
        StorageDead(_594);
        goto -> bb682;
    }

    bb682: {
        StorageDead(_584);
        goto -> bb683;
    }

    bb683: {
        StorageDead(_583);
        goto -> bb684;
    }

    bb684: {
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb741;
    }

    bb685: {
        StorageDead(_397);
        StorageDead(_569);
        StorageDead(_566);
        StorageDead(_563);
        StorageDead(_560);
        StorageDead(_557);
        goto -> bb691;
    }

    bb686: {
        StorageDead(_490);
        goto -> bb687;
    }

    bb687: {
        StorageDead(_443);
        StorageDead(_442);
        goto -> bb688;
    }

    bb688: {
        StorageDead(_409);
        StorageDead(_408);
        goto -> bb689;
    }

    bb689: {
        drop(_397) -> [return: bb690, unwind: bb757];
    }

    bb690: {
        StorageDead(_397);
        goto -> bb691;
    }

    bb691: {
        StorageDead(_396);
        goto -> bb741;
    }

    bb692: {
        _1573 = const false;
        StorageDead(_223);
        goto -> bb743;
    }

    bb693: {
        _1574 = const false;
        StorageDead(_156);
        goto -> bb694;
    }

    bb694: {
        return;
    }

    bb695 (cleanup): {
        drop(_1521) -> [return: bb696, unwind terminate(cleanup)];
    }

    bb696 (cleanup): {
        drop(_1524) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb697 (cleanup): {
        drop(_1485) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb698 (cleanup): {
        drop(_1461) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb699 (cleanup): {
        drop(_1316) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb700 (cleanup): {
        drop(_1246) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb701 (cleanup): {
        drop(_1211) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb702 (cleanup): {
        drop(_1186) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb703 (cleanup): {
        drop(_1164) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb704 (cleanup): {
        drop(_1021) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb705 (cleanup): {
        drop(_992) -> [return: bb710, unwind terminate(cleanup)];
    }

    bb706 (cleanup): {
        drop(_961) -> [return: bb707, unwind terminate(cleanup)];
    }

    bb707 (cleanup): {
        drop(_964) -> [return: bb708, unwind terminate(cleanup)];
    }

    bb708 (cleanup): {
        drop(_981) -> [return: bb710, unwind terminate(cleanup)];
    }

    bb709 (cleanup): {
        drop(_974) -> [return: bb710, unwind terminate(cleanup)];
    }

    bb710 (cleanup): {
        drop(_924) -> [return: bb749, unwind terminate(cleanup)];
    }

    bb711 (cleanup): {
        drop(_773) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb712 (cleanup): {
        drop(_701) -> [return: bb713, unwind terminate(cleanup)];
    }

    bb713 (cleanup): {
        drop(_690) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb714 (cleanup): {
        drop(_667) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb715 (cleanup): {
        drop(_626) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb716 (cleanup): {
        drop(_607) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb717 (cleanup): {
        drop(_534) -> [return: bb720, unwind terminate(cleanup)];
    }

    bb718 (cleanup): {
        drop(_515) -> [return: bb720, unwind terminate(cleanup)];
    }

    bb719 (cleanup): {
        drop(_467) -> [return: bb720, unwind terminate(cleanup)];
    }

    bb720 (cleanup): {
        drop(_397) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb721 (cleanup): {
        drop(_373) -> [return: bb754, unwind terminate(cleanup)];
    }

    bb722 (cleanup): {
        drop(_348) -> [return: bb755, unwind terminate(cleanup)];
    }

    bb723 (cleanup): {
        drop(_268) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb724 (cleanup): {
        drop(_249) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb725 (cleanup): {
        drop(_201) -> [return: bb760, unwind terminate(cleanup)];
    }

    bb726 (cleanup): {
        drop(_182) -> [return: bb760, unwind terminate(cleanup)];
    }

    bb727 (cleanup): {
        drop(_136) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb728 (cleanup): {
        drop(_117) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb729 (cleanup): {
        drop(_92) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb730 (cleanup): {
        drop(_73) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb731 (cleanup): {
        drop(_48) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb732 (cleanup): {
        drop(_29) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb733 (cleanup): {
        resume;
    }

    bb734: {
        _1583 = discriminant(_349);
        StorageDead(_353);
        _1572 = const false;
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &mut (*_7);
        StorageLive(_369);
        _369 = &(*_8);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &(*_9);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_1;
        _377 = &(*_378);
        _375 = PerpMarketMap::<'_>::get_ref_mut(move _376, move _377) -> [return: bb148, unwind: bb757];
    }

    bb735: {
        _1585 = discriminant(_374);
        StorageDead(_378);
        _1571 = const false;
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_366);
        StorageDead(_365);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &(*_10);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &_2;
        _401 = &(*_402);
        _399 = SpotMarketMap::<'_>::get_ref_mut(move _400, move _401) -> [return: bb159, unwind: bb757];
    }

    bb736: {
        drop(_814) -> [return: bb671, unwind: bb757];
    }

    bb737: {
        switchInt(_1570) -> [0: bb671, otherwise: bb736];
    }

    bb738: {
        _1619 = discriminant(_374);
        StorageDead(_378);
        _1571 = const false;
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_366);
        StorageDead(_365);
        goto -> bb741;
    }

    bb739: {
        _1621 = discriminant(_349);
        StorageDead(_353);
        _1572 = const false;
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb741;
    }

    bb740: {
        drop(_223) -> [return: bb692, unwind: bb760];
    }

    bb741: {
        switchInt(_1573) -> [0: bb692, otherwise: bb740];
    }

    bb742: {
        drop(_156) -> [return: bb693, unwind: bb733];
    }

    bb743: {
        switchInt(_1574) -> [0: bb693, otherwise: bb742];
    }

    bb744 (cleanup): {
        _1623 = discriminant(_1486);
        goto -> bb749;
    }

    bb745 (cleanup): {
        _1624 = discriminant(_1317);
        goto -> bb749;
    }

    bb746 (cleanup): {
        _1625 = discriminant(_1247);
        goto -> bb749;
    }

    bb747 (cleanup): {
        _1626 = discriminant(_925);
        goto -> bb749;
    }

    bb748 (cleanup): {
        drop(_814) -> [return: bb757, unwind terminate(cleanup)];
    }

    bb749 (cleanup): {
        switchInt(_1570) -> [0: bb757, otherwise: bb748];
    }

    bb750 (cleanup): {
        _1627 = discriminant(_815);
        goto -> bb757;
    }

    bb751 (cleanup): {
        _1628 = discriminant(_702);
        goto -> bb713;
    }

    bb752 (cleanup): {
        _1629 = discriminant(_691);
        goto -> bb757;
    }

    bb753 (cleanup): {
        _1630 = discriminant(_398);
        goto -> bb757;
    }

    bb754 (cleanup): {
        _1631 = discriminant(_374);
        goto -> bb757;
    }

    bb755 (cleanup): {
        _1632 = discriminant(_349);
        goto -> bb757;
    }

    bb756 (cleanup): {
        drop(_223) -> [return: bb760, unwind terminate(cleanup)];
    }

    bb757 (cleanup): {
        switchInt(_1573) -> [0: bb760, otherwise: bb756];
    }

    bb758 (cleanup): {
        _1633 = discriminant(_224);
        goto -> bb760;
    }

    bb759 (cleanup): {
        drop(_156) -> [return: bb733, unwind terminate(cleanup)];
    }

    bb760 (cleanup): {
        switchInt(_1574) -> [0: bb733, otherwise: bb759];
    }

    bb761 (cleanup): {
        _1634 = discriminant(_157);
        goto -> bb733;
    }
}
