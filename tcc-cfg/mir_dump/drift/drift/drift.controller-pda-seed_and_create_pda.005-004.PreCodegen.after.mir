// MIR for `seed_and_create_pda` after PreCodegen

fn seed_and_create_pda(_1: &anchor_lang::prelude::Pubkey, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: &anchor_lang::prelude::Rent, _4: usize, _5: &anchor_lang::prelude::Pubkey, _6: &anchor_lang::prelude::AccountInfo<'_>, _7: &anchor_lang::prelude::AccountInfo<'_>, _8: &[&[u8]]) -> std::result::Result<(), error::ErrorCode> {
    debug program_id => _1;
    debug funder => _2;
    debug rent => _3;
    debug space => _4;
    debug owner => _5;
    debug system_program => _6;
    debug pda_account => _7;
    debug seeds => _8;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _9: anchor_lang::prelude::Pubkey;
    let _10: u8;
    let mut _11: (anchor_lang::prelude::Pubkey, u8);
    let mut _12: &[&[u8]];
    let mut _13: &anchor_lang::prelude::Pubkey;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: &&anchor_lang::prelude::Pubkey;
    let _19: &anchor_lang::prelude::Pubkey;
    let mut _20: &&anchor_lang::prelude::Pubkey;
    let mut _21: ();
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let mut _42: error::ErrorCode;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: u8;
    let mut _51: &[&[&[u8]]; 1];
    let _52: &[&[&[u8]]; 1];
    let _53: [&[&[u8]]; 1];
    let mut _54: &[&[u8]];
    let _55: &[&[u8]];
    let mut _56: &std::vec::Vec<&[u8]>;
    let _57: &std::vec::Vec<&[u8]>;
    let _58: std::vec::Vec<&[u8]>;
    let mut _59: &[&[&[u8]]];
    let mut _60: &[&[&[u8]]; 2];
    let _61: [&[&[u8]]; 2];
    let mut _62: &[&[u8]];
    let mut _63: &[&[u8]];
    let mut _64: &[&[u8]; 1];
    let _65: &[&[u8]; 1];
    let _66: [&[u8]; 1];
    let mut _67: &[u8];
    let mut _68: &[u8; 1];
    let _69: &[u8; 1];
    let _70: ();
    let mut _71: bool;
    let mut _72: u64;
    let mut _73: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: &anchor_lang::prelude::Rent;
    let mut _78: usize;
    let mut _79: u64;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let _81: ();
    let mut _82: bool;
    let mut _83: u64;
    let _84: ();
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _86: std::result::Result<(), error::ErrorCode>;
    let mut _87: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _88: &solana_program::instruction::Instruction;
    let _89: &solana_program::instruction::Instruction;
    let _90: solana_program::instruction::Instruction;
    let mut _91: &anchor_lang::prelude::Pubkey;
    let mut _92: &anchor_lang::prelude::Pubkey;
    let mut _93: u64;
    let mut _94: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _95: &[anchor_lang::prelude::AccountInfo<'_>; 3];
    let _96: &[anchor_lang::prelude::AccountInfo<'_>; 3];
    let _97: [anchor_lang::prelude::AccountInfo<'_>; 3];
    let mut _98: anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _100: anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _102: anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _104: &[&[&[u8]]];
    let mut _105: {closure@programs/drift/src/controller/pda.rs:39:22: 39:25};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _111: ();
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _113: std::result::Result<(), error::ErrorCode>;
    let mut _114: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _115: &solana_program::instruction::Instruction;
    let _116: &solana_program::instruction::Instruction;
    let _117: solana_program::instruction::Instruction;
    let mut _118: &anchor_lang::prelude::Pubkey;
    let mut _119: u64;
    let mut _120: usize;
    let mut _121: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _122: &[anchor_lang::prelude::AccountInfo<'_>; 2];
    let _123: &[anchor_lang::prelude::AccountInfo<'_>; 2];
    let _124: [anchor_lang::prelude::AccountInfo<'_>; 2];
    let mut _125: anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _127: anchor_lang::prelude::AccountInfo<'_>;
    let mut _128: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _129: &[&[&[u8]]];
    let mut _130: {closure@programs/drift/src/controller/pda.rs:50:18: 50:21};
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _136: ();
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _138: std::result::Result<(), error::ErrorCode>;
    let mut _139: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _140: &solana_program::instruction::Instruction;
    let _141: &solana_program::instruction::Instruction;
    let _142: solana_program::instruction::Instruction;
    let mut _143: &anchor_lang::prelude::Pubkey;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _146: &[anchor_lang::prelude::AccountInfo<'_>; 2];
    let _147: &[anchor_lang::prelude::AccountInfo<'_>; 2];
    let _148: [anchor_lang::prelude::AccountInfo<'_>; 2];
    let mut _149: anchor_lang::prelude::AccountInfo<'_>;
    let mut _150: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _151: anchor_lang::prelude::AccountInfo<'_>;
    let mut _152: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _153: &[&[&[u8]]];
    let mut _154: {closure@programs/drift/src/controller/pda.rs:60:18: 60:21};
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _160: ();
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _162: std::result::Result<(), error::ErrorCode>;
    let mut _163: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _164: &solana_program::instruction::Instruction;
    let _165: &solana_program::instruction::Instruction;
    let _166: solana_program::instruction::Instruction;
    let mut _167: &anchor_lang::prelude::Pubkey;
    let mut _168: &anchor_lang::prelude::Pubkey;
    let mut _169: u64;
    let mut _170: u64;
    let mut _171: &anchor_lang::prelude::Rent;
    let mut _172: usize;
    let mut _173: u64;
    let mut _174: usize;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[anchor_lang::prelude::AccountInfo<'_>; 3];
    let _178: &[anchor_lang::prelude::AccountInfo<'_>; 3];
    let _179: [anchor_lang::prelude::AccountInfo<'_>; 3];
    let mut _180: anchor_lang::prelude::AccountInfo<'_>;
    let mut _181: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _182: anchor_lang::prelude::AccountInfo<'_>;
    let mut _183: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _184: anchor_lang::prelude::AccountInfo<'_>;
    let mut _185: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _186: &[&[&[u8]]];
    let mut _187: {closure@programs/drift/src/controller/pda.rs:76:18: 76:21};
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: ();
    let mut _195: &anchor_lang::prelude::Pubkey;
    let mut _196: &anchor_lang::prelude::Pubkey;
    let mut _197: &anchor_lang::prelude::Pubkey;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let mut _199: &anchor_lang::prelude::Pubkey;
    let mut _200: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug pda_address => _9;
        debug bump => _10;
        let _22: error::ErrorCode;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: ();
        let _48: [u8; 1];
        scope 2 {
            debug error_code => _22;
            let _29: std::string::String;
            let mut _194: &[&str; 2];
            scope 3 {
                debug res => _29;
            }
        }
        scope 4 {
            debug residual => _44;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _47;
            scope 7 {
            }
        }
        scope 8 {
            debug bump_seed => _48;
            let _50: &[&[&[u8]]];
            scope 9 {
                debug pda_signer_seeds => _50;
                let _74: u64;
                let _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _192: ();
                scope 10 {
                    debug required_lamports => _74;
                    let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _110: ();
                    let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _135: ();
                    let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _159: ();
                    scope 11 {
                        debug residual => _107;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug val => _110;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug residual => _132;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _135;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug residual => _156;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _159;
                        scope 22 {
                        }
                    }
                }
                scope 23 {
                    debug residual => _189;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug val => _192;
                    scope 26 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_8);
        StorageLive(_13);
        _13 = &(*_1);
        _11 = anchor_lang::prelude::Pubkey::find_program_address(move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_9);
        _9 = (_11.0: anchor_lang::prelude::Pubkey);
        StorageLive(_10);
        _10 = (_11.1: u8);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_9;
        _18 = &_19;
        StorageLive(_20);
        _20 = &((*_7).0: &anchor_lang::prelude::Pubkey);
        _17 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _18, move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        _21 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb11;
    }

    bb4: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        _22 = error::ErrorCode::InvalidPDA;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _194 = const _;
        _33 = &(*_194);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb8, unwind: bb107];
    }

    bb8: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb9, unwind: bb107];
    }

    bb9: {
        StorageDead(_24);
        drop(_28) -> [return: bb10, unwind: bb108];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_42);
        _42 = _22;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _42);
        StorageDead(_42);
        StorageDead(_22);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_16);
        _43 = discriminant(_15);
        switchInt(move _43) -> [0: bb13, 1: bb15, otherwise: bb14];
    }

    bb13: {
        StorageLive(_47);
        _47 = ((_15 as Continue).0: ());
        _14 = _47;
        StorageDead(_47);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _10;
        _48 = [move _49];
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _8;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_48;
        _68 = &(*_69);
        _67 = move _68 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_68);
        _66 = [move _67];
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = move _64 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_64);
        _61 = [move _62, move _63];
        _60 = &_61;
        _59 = move _60 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        _58 = std::slice::<impl [&[&[u8]]]>::concat::<&[u8]>(move _59) -> [return: bb17, unwind continue];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        StorageLive(_44);
        _44 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb90;
    }

    bb17: {
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <Vec<&[u8]> as Deref>::deref(move _56) -> [return: bb18, unwind: bb106];
    }

    bb18: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = [move _54];
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_51);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_7);
        _72 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _73) -> [return: bb19, unwind: bb106];
    }

    bb19: {
        StorageDead(_73);
        _71 = Gt(move _72, const 0_u64);
        switchInt(move _71) -> [0: bb62, otherwise: bb20];
    }

    bb20: {
        StorageDead(_72);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_3);
        StorageLive(_78);
        _78 = _4;
        _76 = anchor_lang::prelude::Rent::minimum_balance(move _77, move _78) -> [return: bb21, unwind: bb106];
    }

    bb21: {
        StorageDead(_78);
        StorageDead(_77);
        _75 = <u64 as Ord>::max(move _76, const 1_u64) -> [return: bb22, unwind: bb106];
    }

    bb22: {
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &(*_7);
        _79 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _80) -> [return: bb23, unwind: bb106];
    }

    bb23: {
        StorageDead(_80);
        _74 = core::num::<impl u64>::saturating_sub(move _75, move _79) -> [return: bb24, unwind: bb106];
    }

    bb24: {
        StorageDead(_79);
        StorageDead(_75);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _74;
        _82 = Gt(move _83, const 0_u64);
        switchInt(move _82) -> [0: bb38, otherwise: bb25];
    }

    bb25: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _195 = deref_copy ((*_2).0: &anchor_lang::prelude::Pubkey);
        _91 = &(*_195);
        StorageLive(_92);
        _196 = deref_copy ((*_7).0: &anchor_lang::prelude::Pubkey);
        _92 = &(*_196);
        StorageLive(_93);
        _93 = _74;
        _90 = solana_program::system_instruction::transfer(move _91, move _92, move _93) -> [return: bb26, unwind: bb106];
    }

    bb26: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_2);
        _98 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _99) -> [return: bb27, unwind: bb105];
    }

    bb27: {
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &(*_7);
        _100 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _101) -> [return: bb28, unwind: bb104];
    }

    bb28: {
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_6);
        _102 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _103) -> [return: bb29, unwind: bb103];
    }

    bb29: {
        StorageDead(_103);
        _97 = [move _98, move _100, move _102];
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_104);
        _104 = &(*_50);
        _87 = invoke_signed_unchecked(move _88, move _94, move _104) -> [return: bb30, unwind: bb102];
    }

    bb30: {
        StorageDead(_104);
        StorageDead(_94);
        StorageDead(_88);
        StorageLive(_105);
        _105 = {closure@programs/drift/src/controller/pda.rs:39:22: 39:25};
        _86 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/pda.rs:39:22: 39:25}>(move _87, move _105) -> [return: bb31, unwind: bb102];
    }

    bb31: {
        StorageDead(_105);
        StorageDead(_87);
        _85 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _86) -> [return: bb32, unwind: bb102];
    }

    bb32: {
        StorageDead(_86);
        _106 = discriminant(_85);
        switchInt(move _106) -> [0: bb33, 1: bb34, otherwise: bb14];
    }

    bb33: {
        StorageLive(_110);
        _110 = ((_85 as Continue).0: ());
        _84 = _110;
        StorageDead(_110);
        drop(_97) -> [return: bb36, unwind: bb105];
    }

    bb34: {
        StorageLive(_107);
        _107 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb35, unwind: bb102];
    }

    bb35: {
        StorageDead(_109);
        StorageDead(_107);
        drop(_97) -> [return: bb85, unwind: bb105];
    }

    bb36: {
        StorageDead(_97);
        StorageDead(_96);
        drop(_90) -> [return: bb37, unwind: bb106];
    }

    bb37: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        _81 = const ();
        goto -> bb39;
    }

    bb38: {
        StorageDead(_83);
        _81 = const ();
        goto -> bb39;
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _197 = deref_copy ((*_7).0: &anchor_lang::prelude::Pubkey);
        _118 = &(*_197);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _4;
        _119 = move _120 as u64 (IntToInt);
        StorageDead(_120);
        _117 = solana_program::system_instruction::allocate(move _118, move _119) -> [return: bb40, unwind: bb106];
    }

    bb40: {
        StorageDead(_119);
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &(*_7);
        _125 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _126) -> [return: bb41, unwind: bb101];
    }

    bb41: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(*_6);
        _127 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _128) -> [return: bb42, unwind: bb100];
    }

    bb42: {
        StorageDead(_128);
        _124 = [move _125, move _127];
        StorageDead(_127);
        StorageDead(_125);
        _123 = &_124;
        _122 = &(*_123);
        _121 = move _122 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_122);
        StorageLive(_129);
        _129 = &(*_50);
        _114 = invoke_signed_unchecked(move _115, move _121, move _129) -> [return: bb43, unwind: bb99];
    }

    bb43: {
        StorageDead(_129);
        StorageDead(_121);
        StorageDead(_115);
        StorageLive(_130);
        _130 = {closure@programs/drift/src/controller/pda.rs:50:18: 50:21};
        _113 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/pda.rs:50:18: 50:21}>(move _114, move _130) -> [return: bb44, unwind: bb99];
    }

    bb44: {
        StorageDead(_130);
        StorageDead(_114);
        _112 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _113) -> [return: bb45, unwind: bb99];
    }

    bb45: {
        StorageDead(_113);
        _131 = discriminant(_112);
        switchInt(move _131) -> [0: bb46, 1: bb47, otherwise: bb14];
    }

    bb46: {
        StorageLive(_135);
        _135 = ((_112 as Continue).0: ());
        _111 = _135;
        StorageDead(_135);
        drop(_124) -> [return: bb49, unwind: bb101];
    }

    bb47: {
        StorageLive(_132);
        _132 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb48, unwind: bb99];
    }

    bb48: {
        StorageDead(_134);
        StorageDead(_132);
        drop(_124) -> [return: bb83, unwind: bb101];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_123);
        drop(_117) -> [return: bb50, unwind: bb106];
    }

    bb50: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _198 = deref_copy ((*_7).0: &anchor_lang::prelude::Pubkey);
        _143 = &(*_198);
        StorageLive(_144);
        _144 = &(*_5);
        _142 = solana_program::system_instruction::assign(move _143, move _144) -> [return: bb51, unwind: bb106];
    }

    bb51: {
        StorageDead(_144);
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(*_7);
        _149 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _150) -> [return: bb52, unwind: bb98];
    }

    bb52: {
        StorageDead(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_6);
        _151 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _152) -> [return: bb53, unwind: bb97];
    }

    bb53: {
        StorageDead(_152);
        _148 = [move _149, move _151];
        StorageDead(_151);
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_153);
        _153 = &(*_50);
        _139 = invoke_signed_unchecked(move _140, move _145, move _153) -> [return: bb54, unwind: bb96];
    }

    bb54: {
        StorageDead(_153);
        StorageDead(_145);
        StorageDead(_140);
        StorageLive(_154);
        _154 = {closure@programs/drift/src/controller/pda.rs:60:18: 60:21};
        _138 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/pda.rs:60:18: 60:21}>(move _139, move _154) -> [return: bb55, unwind: bb96];
    }

    bb55: {
        StorageDead(_154);
        StorageDead(_139);
        _137 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _138) -> [return: bb56, unwind: bb96];
    }

    bb56: {
        StorageDead(_138);
        _155 = discriminant(_137);
        switchInt(move _155) -> [0: bb57, 1: bb58, otherwise: bb14];
    }

    bb57: {
        StorageLive(_159);
        _159 = ((_137 as Continue).0: ());
        _136 = _159;
        StorageDead(_159);
        drop(_148) -> [return: bb60, unwind: bb98];
    }

    bb58: {
        StorageLive(_156);
        _156 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb59, unwind: bb96];
    }

    bb59: {
        StorageDead(_158);
        StorageDead(_156);
        drop(_148) -> [return: bb81, unwind: bb98];
    }

    bb60: {
        StorageDead(_148);
        StorageDead(_147);
        drop(_142) -> [return: bb61, unwind: bb106];
    }

    bb61: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_136);
        _70 = const ();
        StorageDead(_74);
        goto -> bb77;
    }

    bb62: {
        StorageDead(_72);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _199 = deref_copy ((*_2).0: &anchor_lang::prelude::Pubkey);
        _167 = &(*_199);
        StorageLive(_168);
        _200 = deref_copy ((*_7).0: &anchor_lang::prelude::Pubkey);
        _168 = &(*_200);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &(*_3);
        StorageLive(_172);
        _172 = _4;
        _170 = anchor_lang::prelude::Rent::minimum_balance(move _171, move _172) -> [return: bb63, unwind: bb106];
    }

    bb63: {
        StorageDead(_172);
        StorageDead(_171);
        _169 = <u64 as Ord>::max(move _170, const 1_u64) -> [return: bb64, unwind: bb106];
    }

    bb64: {
        StorageDead(_170);
        StorageLive(_173);
        StorageLive(_174);
        _174 = _4;
        _173 = move _174 as u64 (IntToInt);
        StorageDead(_174);
        StorageLive(_175);
        _175 = &(*_5);
        _166 = solana_program::system_instruction::create_account(move _167, move _168, move _169, move _173, move _175) -> [return: bb65, unwind: bb106];
    }

    bb65: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        _165 = &_166;
        _164 = &(*_165);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &(*_2);
        _180 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _181) -> [return: bb66, unwind: bb95];
    }

    bb66: {
        StorageDead(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &(*_7);
        _182 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _183) -> [return: bb67, unwind: bb94];
    }

    bb67: {
        StorageDead(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &(*_6);
        _184 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _185) -> [return: bb68, unwind: bb93];
    }

    bb68: {
        StorageDead(_185);
        _179 = [move _180, move _182, move _184];
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = move _177 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_177);
        StorageLive(_186);
        _186 = &(*_50);
        _163 = invoke_signed_unchecked(move _164, move _176, move _186) -> [return: bb69, unwind: bb92];
    }

    bb69: {
        StorageDead(_186);
        StorageDead(_176);
        StorageDead(_164);
        StorageLive(_187);
        _187 = {closure@programs/drift/src/controller/pda.rs:76:18: 76:21};
        _162 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/pda.rs:76:18: 76:21}>(move _163, move _187) -> [return: bb70, unwind: bb92];
    }

    bb70: {
        StorageDead(_187);
        StorageDead(_163);
        _161 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _162) -> [return: bb71, unwind: bb92];
    }

    bb71: {
        StorageDead(_162);
        _188 = discriminant(_161);
        switchInt(move _188) -> [0: bb72, 1: bb73, otherwise: bb14];
    }

    bb72: {
        StorageLive(_192);
        _192 = ((_161 as Continue).0: ());
        _160 = _192;
        StorageDead(_192);
        drop(_179) -> [return: bb75, unwind: bb95];
    }

    bb73: {
        StorageLive(_189);
        _189 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_191);
        _191 = _189;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _191) -> [return: bb74, unwind: bb92];
    }

    bb74: {
        StorageDead(_191);
        StorageDead(_189);
        drop(_179) -> [return: bb79, unwind: bb95];
    }

    bb75: {
        StorageDead(_179);
        StorageDead(_178);
        drop(_166) -> [return: bb76, unwind: bb106];
    }

    bb76: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_161);
        StorageDead(_160);
        _70 = const ();
        goto -> bb77;
    }

    bb77: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_193);
        _193 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        drop(_58) -> [return: bb78, unwind: bb108];
    }

    bb78: {
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb91;
    }

    bb79: {
        StorageDead(_179);
        StorageDead(_178);
        drop(_166) -> [return: bb80, unwind: bb106];
    }

    bb80: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb88;
    }

    bb81: {
        StorageDead(_148);
        StorageDead(_147);
        drop(_142) -> [return: bb82, unwind: bb106];
    }

    bb82: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb87;
    }

    bb83: {
        StorageDead(_124);
        StorageDead(_123);
        drop(_117) -> [return: bb84, unwind: bb106];
    }

    bb84: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb87;
    }

    bb85: {
        StorageDead(_97);
        StorageDead(_96);
        drop(_90) -> [return: bb86, unwind: bb106];
    }

    bb86: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_74);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_71);
        StorageDead(_70);
        drop(_58) -> [return: bb89, unwind: bb108];
    }

    bb89: {
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb91;
    }

    bb91: {
        return;
    }

    bb92 (cleanup): {
        drop(_179) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_182) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_180) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_166) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_148) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_149) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_142) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_124) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_125) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_117) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_97) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_100) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_98) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_90) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_58) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_28) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        resume;
    }
}
