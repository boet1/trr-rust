digraph Mir_0_1129 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_update_amm_spread_adjustment_native(_1: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _2: &amp;ReErased [u8]) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: bool;<br align="left"/>let _7: ();<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _11: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _12: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _13: !;<br align="left"/>let _14: !;<br align="left"/>let mut _15: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _16: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _17: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _18: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _19: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _20: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _21: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _22: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _23: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _24: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _25: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _26: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _27: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _28: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _29: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _30: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _31: std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _32: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let _33: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _34: &amp;ReErased std::rc::Rc&lt;std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;, std::alloc::Global&gt;;<br align="left"/>let _35: usize;<br align="left"/>let mut _36: usize;<br align="left"/>let mut _37: bool;<br align="left"/>let _38: ();<br align="left"/>let mut _39: &amp;ReErased mut [u8];<br align="left"/>let mut _40: &amp;ReErased mut [u8];<br align="left"/>let mut _41: &amp;ReErased mut [u8];<br align="left"/>let mut _42: &amp;ReErased mut &amp;ReErased mut [u8];<br align="left"/>let mut _43: &amp;ReErased mut std::cell::RefMut&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _44: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _45: &amp;ReErased [u8];<br align="left"/>let mut _46: &amp;ReErased [u8; 1_usize];<br align="left"/>let _47: &amp;ReErased [u8; 1_usize];<br align="left"/>let _48: [u8; 1_usize];<br align="left"/>let mut _49: u8;<br align="left"/>let _50: usize;<br align="left"/>let mut _51: usize;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: ();<br align="left"/>let mut _54: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _55: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _56: &amp;ReErased mut [u8];<br align="left"/>debug accounts =&gt; _1;<br align="left"/>debug data =&gt; _2;<br align="left"/>debug signer_account =&gt; _3;<br align="left"/>debug perp_market =&gt; _31;<br align="left"/>>;
    bb0__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = const 1_usize<br/>_5 = Len((*_1))<br/>_6 = Lt(_4, _5)<br/></td></tr><tr><td align="left">assert(move _6, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _5, _4)</td></tr></table>>];
    bb1__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = &amp;(*_1)[_4]<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_3).5: bool)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb2__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>StorageLive(_10)<br/>_55 = deref_copy ((*_3).0: &amp;anchor_lang::prelude::Pubkey)<br/>_10 = &amp;(*_55)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/></td></tr><tr><td align="left">_12 = amm_spread_adjust_wallet::id()</td></tr></table>>];
    bb3__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_11 = &amp;_12<br/></td></tr><tr><td align="left">_9 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _10, move _11)</td></tr></table>>];
    bb4__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb5__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>_7 = const ()<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = const 0_usize<br/>_36 = Len((*_1))<br/>_37 = Lt(_35, _36)<br/></td></tr><tr><td align="left">assert(move _37, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _36, _35)</td></tr></table>>];
    bb6__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_54 = const _<br/>_18 = &amp;(*_54)<br/>_17 = &amp;(*_18)<br/>_16 = move _17 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_17)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;((*_3).0: &amp;anchor_lang::prelude::Pubkey)<br/>_25 = &amp;(*_26)<br/></td></tr><tr><td align="left">_24 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;anchor_lang::prelude::Pubkey&gt;(move _25)</td></tr></table>>];
    bb8__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/></td></tr><tr><td align="left">_30 = amm_spread_adjust_wallet::id()</td></tr></table>>];
    bb9__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_29 = &amp;_30<br/>_28 = &amp;(*_29)<br/></td></tr><tr><td align="left">_27 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;anchor_lang::prelude::Pubkey&gt;(move _28)</td></tr></table>>];
    bb10__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_23 = [move _24, move _27]<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>_22 = &amp;_23<br/>_21 = &amp;(*_22)<br/>_20 = move _21 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_15 = Arguments::&lt;'_&gt;::new_v1(move _16, move _20)</td></tr></table>>];
    bb11__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = panic_fmt(move _15)</td></tr></table>>];
    bb12__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_34 = &amp;((*_1)[_35].2: std::rc::Rc&lt;std::cell::RefCell&lt;&amp;mut [u8]&gt;&gt;)<br/></td></tr><tr><td align="left">_33 = &lt;Rc&lt;RefCell&lt;&amp;mut [u8]&gt;&gt; as Deref&gt;::deref(move _34)</td></tr></table>>];
    bb13__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_32 = &amp;(*_33)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_31 = RefCell::&lt;&amp;mut [u8]&gt;::borrow_mut(move _32)</td></tr></table>>];
    bb14__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_35)<br/>StorageDead(_33)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = &amp;mut _31<br/></td></tr><tr><td align="left">_42 = &lt;RefMut&lt;'_, &amp;mut [u8]&gt; as DerefMut&gt;::deref_mut(move _43)</td></tr></table>>];
    bb15__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_56 = deref_copy (*_42)<br/>_41 = &amp;mut (*_56)<br/>StorageDead(_43)<br/>StorageLive(_44)<br/>_44 = std::ops::Range::&lt;usize&gt; { start: const 934_usize, end: const 935_usize }<br/></td></tr><tr><td align="left">_40 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _41, move _44)</td></tr></table>>];
    bb16__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_39 = &amp;mut (*_40)<br/>StorageDead(_44)<br/>StorageDead(_41)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = const 0_usize<br/>_51 = Len((*_2))<br/>_52 = Lt(_50, _51)<br/></td></tr><tr><td align="left">assert(move _52, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _51, _50)</td></tr></table>>];
    bb17__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_49 = (*_2)[_50]<br/>_48 = [move _49]<br/>StorageDead(_49)<br/>_47 = &amp;_48<br/>_46 = &amp;(*_47)<br/>_45 = move _46 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_38 = core::slice::&lt;impl [u8]&gt;::copy_from_slice(move _39, move _45)</td></tr></table>>];
    bb18__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_39)<br/>StorageDead(_50)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_38)<br/>StorageLive(_53)<br/>_53 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _53)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">drop(_31)</td></tr></table>>];
    bb19__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb20__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_31)</td></tr></table>>];
    bb21__0_1129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1129 -> bb1__0_1129 [label="success"];
    bb1__0_1129 -> bb7__0_1129 [label="0"];
    bb1__0_1129 -> bb2__0_1129 [label="otherwise"];
    bb2__0_1129 -> bb3__0_1129 [label="return"];
    bb3__0_1129 -> bb4__0_1129 [label="return"];
    bb4__0_1129 -> bb6__0_1129 [label="0"];
    bb4__0_1129 -> bb5__0_1129 [label="otherwise"];
    bb5__0_1129 -> bb12__0_1129 [label="success"];
    bb6__0_1129 -> bb7__0_1129 [label=""];
    bb7__0_1129 -> bb8__0_1129 [label="return"];
    bb8__0_1129 -> bb9__0_1129 [label="return"];
    bb9__0_1129 -> bb10__0_1129 [label="return"];
    bb10__0_1129 -> bb11__0_1129 [label="return"];
    bb12__0_1129 -> bb13__0_1129 [label="return"];
    bb13__0_1129 -> bb14__0_1129 [label="return"];
    bb14__0_1129 -> bb15__0_1129 [label="return"];
    bb14__0_1129 -> bb20__0_1129 [label="unwind"];
    bb15__0_1129 -> bb16__0_1129 [label="return"];
    bb15__0_1129 -> bb20__0_1129 [label="unwind"];
    bb16__0_1129 -> bb17__0_1129 [label="success"];
    bb16__0_1129 -> bb20__0_1129 [label="unwind"];
    bb17__0_1129 -> bb18__0_1129 [label="return"];
    bb17__0_1129 -> bb20__0_1129 [label="unwind"];
    bb18__0_1129 -> bb19__0_1129 [label="return"];
    bb18__0_1129 -> bb21__0_1129 [label="unwind"];
    bb20__0_1129 -> bb21__0_1129 [label="return"];
}
