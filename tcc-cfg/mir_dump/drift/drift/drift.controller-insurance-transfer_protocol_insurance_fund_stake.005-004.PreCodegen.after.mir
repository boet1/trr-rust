// MIR for `transfer_protocol_insurance_fund_stake` after PreCodegen

fn transfer_protocol_insurance_fund_stake(_1: u64, _2: u128, _3: &mut InsuranceFundStake, _4: &mut UserStats, _5: &mut SpotMarket, _6: i64, _7: anchor_lang::prelude::Pubkey) -> std::result::Result<u64, error::ErrorCode> {
    debug insurance_vault_amount => _1;
    debug n_shares => _2;
    debug target_insurance_fund_stake => _3;
    debug user_stats => _4;
    debug spot_market => _5;
    debug now => _6;
    debug signer_pubkey => _7;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _10: std::result::Result<(), error::ErrorCode>;
    let mut _11: u64;
    let mut _12: &mut state::spot_market::SpotMarket;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: ();
    let _18: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _34: &state::spot_market::SpotMarket;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _42: std::result::Result<(), error::ErrorCode>;
    let mut _43: bool;
    let mut _44: u128;
    let mut _45: u128;
    let mut _46: ();
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[&str; 2];
    let _58: &[&str; 2];
    let _59: [&str; 2];
    let mut _60: &[core::fmt::rt::Argument<'_>];
    let mut _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: [core::fmt::rt::Argument<'_>; 1];
    let mut _64: core::fmt::rt::Argument<'_>;
    let mut _65: &error::ErrorCode;
    let _66: &error::ErrorCode;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 2];
    let _81: &[core::fmt::rt::Argument<'_>; 2];
    let _82: [core::fmt::rt::Argument<'_>; 2];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &u128;
    let _85: &u128;
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &u128;
    let _88: &u128;
    let mut _89: error::ErrorCode;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: u128;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _97: std::result::Result<u128, error::ErrorCode>;
    let mut _98: u128;
    let mut _99: u128;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _105: ();
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _107: std::result::Result<(), error::ErrorCode>;
    let mut _108: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _109: u128;
    let mut _110: &state::spot_market::SpotMarket;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _118: std::result::Result<u128, error::ErrorCode>;
    let mut _119: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _120: &state::spot_market::SpotMarket;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _126: ();
    let mut _127: bool;
    let mut _128: u16;
    let mut _129: u64;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _131: std::result::Result<u64, error::ErrorCode>;
    let mut _132: u128;
    let mut _133: u128;
    let mut _134: u64;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: bool;
    let mut _141: u16;
    let mut _142: u64;
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _144: std::result::Result<u64, error::ErrorCode>;
    let mut _145: u128;
    let mut _146: u128;
    let mut _147: u64;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _155: std::result::Result<u64, error::ErrorCode>;
    let mut _156: u128;
    let mut _157: u128;
    let mut _158: u64;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _167: std::result::Result<u128, error::ErrorCode>;
    let mut _168: u128;
    let mut _169: u128;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _175: ();
    let _176: ();
    let mut _177: &[&[u8]];
    let mut _178: &[&[u8]; 1];
    let _179: &[&[u8]; 1];
    let _180: [&[u8]; 1];
    let mut _181: &[u8];
    let _182: &[u8];
    let mut _183: &std::vec::Vec<u8>;
    let _184: &std::vec::Vec<u8>;
    let _185: std::vec::Vec<u8>;
    let mut _186: &state::events::InsuranceFundStakeRecord;
    let _187: &state::events::InsuranceFundStakeRecord;
    let _188: state::events::InsuranceFundStakeRecord;
    let mut _189: i64;
    let mut _190: anchor_lang::prelude::Pubkey;
    let mut _191: state::events::StakeAction;
    let mut _192: u64;
    let mut _193: u16;
    let mut _194: u64;
    let mut _195: u128;
    let mut _196: u128;
    let mut _197: u128;
    let mut _198: u128;
    let mut _199: u128;
    let mut _200: u128;
    let _201: ();
    let _202: ();
    let mut _203: &[&[u8]];
    let mut _204: &[&[u8]; 1];
    let _205: &[&[u8]; 1];
    let _206: [&[u8]; 1];
    let mut _207: &[u8];
    let _208: &[u8];
    let mut _209: &std::vec::Vec<u8>;
    let _210: &std::vec::Vec<u8>;
    let _211: std::vec::Vec<u8>;
    let mut _212: &state::events::InsuranceFundStakeRecord;
    let _213: &state::events::InsuranceFundStakeRecord;
    let _214: state::events::InsuranceFundStakeRecord;
    let mut _215: i64;
    let mut _216: anchor_lang::prelude::Pubkey;
    let mut _217: state::events::StakeAction;
    let mut _218: u64;
    let mut _219: u16;
    let mut _220: u64;
    let mut _221: u128;
    let mut _222: u128;
    let mut _223: u128;
    let mut _224: u128;
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _226: std::result::Result<u128, error::ErrorCode>;
    let mut _227: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _228: &state::spot_market::SpotMarket;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _234: u128;
    let mut _235: u128;
    let mut _236: u64;
    scope 1 {
        debug residual => _14;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;
        scope 4 {
        }
    }
    scope 5 {
        debug total_if_shares_before => _18;
        let _19: u128;
        scope 6 {
            debug user_if_shares_before => _19;
            let _20: u128;
            let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _29: u128;
            scope 7 {
                debug if_shares_before => _20;
                let _30: u128;
                let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _39: u128;
                scope 12 {
                    debug target_if_shares_before => _30;
                    let _47: error::ErrorCode;
                    let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _94: ();
                    let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _104: u128;
                    let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _115: ();
                    let _116: u128;
                    let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _125: u128;
                    scope 17 {
                        debug error_code => _47;
                        let _54: std::string::String;
                        let _73: std::string::String;
                        let mut _237: &[&str; 2];
                        let mut _238: &[&str; 2];
                        scope 18 {
                            debug res => _54;
                        }
                        scope 19 {
                            debug res => _73;
                        }
                    }
                    scope 20 {
                        debug residual => _91;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _94;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug residual => _101;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _104;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug residual => _112;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug val => _115;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug target_if_shares_after => _116;
                        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _139: u64;
                        let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _152: u64;
                        let _153: u64;
                        let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _163: u64;
                        scope 37 {
                            debug residual => _136;
                            scope 38 {
                            }
                        }
                        scope 39 {
                            debug val => _139;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug residual => _149;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug val => _152;
                            scope 44 {
                            }
                        }
                        scope 45 {
                            debug withdraw_amount => _153;
                            let _164: u128;
                            scope 50 {
                                debug user_if_shares_after => _164;
                                let _165: u128;
                                let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _174: u128;
                                scope 51 {
                                    debug protocol_if_shares_after => _165;
                                    let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _233: u128;
                                    scope 56 {
                                        debug residual => _230;
                                        scope 57 {
                                        }
                                    }
                                    scope 58 {
                                        debug val => _233;
                                        scope 59 {
                                        }
                                    }
                                }
                                scope 52 {
                                    debug residual => _171;
                                    scope 53 {
                                    }
                                }
                                scope 54 {
                                    debug val => _174;
                                    scope 55 {
                                    }
                                }
                            }
                        }
                        scope 46 {
                            debug residual => _160;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug val => _163;
                            scope 49 {
                            }
                        }
                    }
                    scope 33 {
                        debug residual => _122;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _125;
                        scope 36 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _36;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _39;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _26;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _29;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        _12 = &mut (*_5);
        _10 = apply_rebase_to_insurance_fund(move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: ());
        _8 = _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_18);
        _18 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_19);
        _19 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _18;
        StorageLive(_24);
        _24 = _19;
        _22 = <u128 as SafeMath>::safe_sub(move _23, move _24) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb97;
    }

    bb7: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: u128);
        _20 = _29;
        StorageDead(_29);
        StorageDead(_21);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(*_3);
        StorageLive(_34);
        _34 = &(*_5);
        _32 = InsuranceFundStake::checked_if_shares(move _33, move _34) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        goto -> bb96;
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_39);
        _39 = ((_31 as Continue).0: u128);
        _30 = _39;
        StorageDead(_39);
        StorageDead(_31);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _20;
        StorageLive(_45);
        _45 = _2;
        _43 = Ge(move _44, move _45);
        switchInt(move _43) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        goto -> bb95;
    }

    bb17: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_46);
        _46 = ();
        _42 = std::result::Result::<(), error::ErrorCode>::Ok(move _46);
        StorageDead(_46);
        goto -> bb32;
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_47);
        _47 = error::ErrorCode::InsufficientIFShares;
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _238 = const _;
        _58 = &(*_238);
        _57 = &(*_58);
        _56 = move _57 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_47;
        _65 = &(*_66);
        _64 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _65) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_65);
        _63 = [move _64];
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = move _61 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_61);
        _55 = Arguments::<'_>::new_v1(move _56, move _60) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_60);
        StorageDead(_56);
        _54 = format(move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_58);
        _53 = move _54;
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = <String as Deref>::deref(move _51) -> [return: bb22, unwind: bb101];
    }

    bb22: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb23, unwind: bb101];
    }

    bb23: {
        StorageDead(_49);
        drop(_53) -> [return: bb24, unwind: bb102];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _237 = const _;
        _77 = &(*_237);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_20;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _84) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_84);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_2;
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _87) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_87);
        _82 = [move _83, move _86];
        StorageDead(_86);
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_74);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb29, unwind: bb100];
    }

    bb29: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb30, unwind: bb100];
    }

    bb30: {
        StorageDead(_68);
        drop(_72) -> [return: bb31, unwind: bb102];
    }

    bb31: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_89);
        _89 = _47;
        _42 = std::result::Result::<(), error::ErrorCode>::Err(move _89);
        StorageDead(_89);
        StorageDead(_47);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_43);
        _41 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _42) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_42);
        _90 = discriminant(_41);
        switchInt(move _90) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_94);
        _94 = ((_41 as Continue).0: ());
        _40 = _94;
        StorageDead(_94);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_99);
        _99 = _2;
        _97 = <u128 as SafeMath>::safe_add(move _98, move _99) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_91);
        _91 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb95;
    }

    bb37: {
        StorageDead(_99);
        StorageDead(_98);
        _96 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _97) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_97);
        _100 = discriminant(_96);
        switchInt(move _100) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_104);
        _104 = ((_96 as Continue).0: u128);
        _95 = _104;
        StorageDead(_104);
        (((*_5).9: state::spot_market::InsuranceFund).2: u128) = move _95;
        StorageDead(_95);
        StorageDead(_96);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &mut (*_3);
        StorageLive(_109);
        _109 = _2;
        StorageLive(_110);
        _110 = &(*_5);
        _107 = InsuranceFundStake::increase_if_shares(move _108, move _109, move _110) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_101);
        _101 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_95);
        StorageDead(_96);
        goto -> bb95;
    }

    bb42: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        _106 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _107) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_107);
        _111 = discriminant(_106);
        switchInt(move _111) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_115);
        _115 = ((_106 as Continue).0: ());
        _105 = _115;
        StorageDead(_115);
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_3);
        StorageLive(_120);
        _120 = &(*_5);
        _118 = InsuranceFundStake::checked_if_shares(move _119, move _120) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_112);
        _112 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb95;
    }

    bb47: {
        StorageDead(_120);
        StorageDead(_119);
        _117 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _118) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_118);
        _121 = discriminant(_117);
        switchInt(move _121) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_125);
        _125 = ((_117 as Continue).0: u128);
        _116 = _125;
        StorageDead(_125);
        StorageDead(_117);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = ((*_5).42: u16);
        _127 = Eq(move _128, const _);
        switchInt(move _127) -> [0: bb53, otherwise: bb52];
    }

    bb50: {
        StorageLive(_122);
        _122 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_117);
        goto -> bb94;
    }

    bb52: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _116;
        StorageLive(_133);
        _133 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_134);
        _134 = _1;
        _131 = if_shares_to_vault_amount(move _132, move _133, move _134) -> [return: bb54, unwind continue];
    }

    bb53: {
        StorageDead(_128);
        StorageLive(_140);
        StorageLive(_141);
        _141 = ((*_5).42: u16);
        _140 = Eq(move _141, const _);
        switchInt(move _140) -> [0: bb60, otherwise: bb59];
    }

    bb54: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        _130 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _131) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_131);
        _135 = discriminant(_130);
        switchInt(move _135) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_139);
        _139 = ((_130 as Continue).0: u64);
        _129 = _139;
        StorageDead(_139);
        ((*_4).10: u64) = move _129;
        StorageDead(_129);
        StorageDead(_130);
        _126 = const ();
        goto -> bb67;
    }

    bb57: {
        StorageLive(_136);
        _136 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_129);
        StorageDead(_130);
        goto -> bb93;
    }

    bb59: {
        StorageDead(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _116;
        StorageLive(_146);
        _146 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_147);
        _147 = _1;
        _144 = if_shares_to_vault_amount(move _145, move _146, move _147) -> [return: bb61, unwind continue];
    }

    bb60: {
        StorageDead(_141);
        _126 = const ();
        goto -> bb66;
    }

    bb61: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        _143 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _144) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_144);
        _148 = discriminant(_143);
        switchInt(move _148) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_152);
        _152 = ((_143 as Continue).0: u64);
        _142 = _152;
        StorageDead(_152);
        ((*_4).23: u64) = move _142;
        StorageDead(_142);
        StorageDead(_143);
        _126 = const ();
        goto -> bb66;
    }

    bb64: {
        StorageLive(_149);
        _149 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_142);
        StorageDead(_143);
        StorageDead(_140);
        goto -> bb93;
    }

    bb66: {
        StorageDead(_140);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _2;
        StorageLive(_157);
        _157 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_158);
        _158 = _1;
        _155 = if_shares_to_vault_amount(move _156, move _157, move _158) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_156);
        _154 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _155) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_155);
        _159 = discriminant(_154);
        switchInt(move _159) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_163);
        _163 = ((_154 as Continue).0: u64);
        _153 = _163;
        StorageDead(_163);
        StorageDead(_154);
        StorageLive(_164);
        _164 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_169);
        _169 = _164;
        _167 = <u128 as SafeMath>::safe_sub(move _168, move _169) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_160);
        _160 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_154);
        goto -> bb92;
    }

    bb73: {
        StorageDead(_169);
        StorageDead(_168);
        _166 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _167) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_167);
        _170 = discriminant(_166);
        switchInt(move _170) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_174);
        _174 = ((_166 as Continue).0: u128);
        _165 = _174;
        StorageDead(_174);
        StorageDead(_166);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = _6;
        StorageLive(_190);
        _190 = _7;
        StorageLive(_191);
        _191 = StakeAction::UnstakeTransfer;
        StorageLive(_192);
        _192 = _153;
        StorageLive(_193);
        _193 = ((*_5).42: u16);
        StorageLive(_194);
        _194 = _1;
        StorageLive(_195);
        _195 = _20;
        StorageLive(_196);
        _196 = _19;
        StorageLive(_197);
        _197 = _18;
        StorageLive(_198);
        _198 = _165;
        StorageLive(_199);
        _199 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_200);
        _200 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        _188 = InsuranceFundStakeRecord { ts: move _189, user_authority: move _190, action: move _191, amount: move _192, market_index: move _193, insurance_vault_amount_before: move _194, if_shares_before: move _195, user_if_shares_before: move _196, total_if_shares_before: move _197, if_shares_after: move _198, user_if_shares_after: move _200, total_if_shares_after: move _199 };
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _186) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_171);
        _171 = ((_166 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_166);
        goto -> bb91;
    }

    bb78: {
        StorageDead(_186);
        _184 = &_185;
        _183 = &(*_184);
        _182 = <Vec<u8> as Deref>::deref(move _183) -> [return: bb79, unwind: bb99];
    }

    bb79: {
        _181 = &(*_182);
        StorageDead(_183);
        _180 = [move _181];
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = move _178 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_178);
        _176 = solana_program::log::sol_log_data(move _177) -> [return: bb80, unwind: bb99];
    }

    bb80: {
        StorageDead(_177);
        drop(_185) -> [return: bb81, unwind: bb102];
    }

    bb81: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_176);
        _175 = const ();
        StorageDead(_175);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = _6;
        StorageLive(_216);
        _216 = ((*_3).0: anchor_lang::prelude::Pubkey);
        StorageLive(_217);
        _217 = StakeAction::StakeTransfer;
        StorageLive(_218);
        _218 = _153;
        StorageLive(_219);
        _219 = ((*_5).42: u16);
        StorageLive(_220);
        _220 = _1;
        StorageLive(_221);
        _221 = _30;
        StorageLive(_222);
        _222 = _19;
        StorageLive(_223);
        _223 = _18;
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &(*_3);
        StorageLive(_228);
        _228 = &(*_5);
        _226 = InsuranceFundStake::checked_if_shares(move _227, move _228) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_228);
        StorageDead(_227);
        _225 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _226) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_226);
        _229 = discriminant(_225);
        switchInt(move _229) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_233);
        _233 = ((_225 as Continue).0: u128);
        _224 = _233;
        StorageDead(_233);
        StorageLive(_234);
        _234 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_235);
        _235 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        _214 = InsuranceFundStakeRecord { ts: move _215, user_authority: move _216, action: move _217, amount: move _218, market_index: move _219, insurance_vault_amount_before: move _220, if_shares_before: move _221, user_if_shares_before: move _222, total_if_shares_before: move _223, if_shares_after: move _224, user_if_shares_after: move _235, total_if_shares_after: move _234 };
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_215);
        _213 = &_214;
        _212 = &(*_213);
        _211 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _212) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_230);
        _230 = ((_225 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_225);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb91;
    }

    bb87: {
        StorageDead(_212);
        _210 = &_211;
        _209 = &(*_210);
        _208 = <Vec<u8> as Deref>::deref(move _209) -> [return: bb88, unwind: bb98];
    }

    bb88: {
        _207 = &(*_208);
        StorageDead(_209);
        _206 = [move _207];
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        _203 = move _204 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_204);
        _202 = solana_program::log::sol_log_data(move _203) -> [return: bb89, unwind: bb98];
    }

    bb89: {
        StorageDead(_203);
        drop(_211) -> [return: bb90, unwind: bb102];
    }

    bb90: {
        StorageDead(_225);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_202);
        _201 = const ();
        StorageDead(_201);
        StorageLive(_236);
        _236 = _153;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _236);
        StorageDead(_236);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_153);
        StorageDead(_116);
        StorageDead(_30);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb97;
    }

    bb91: {
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_153);
        goto -> bb94;
    }

    bb93: {
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_116);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_30);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb97;
    }

    bb97: {
        return;
    }

    bb98 (cleanup): {
        drop(_211) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_185) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_72) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_53) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }
}
