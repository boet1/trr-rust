digraph Mir_0_4562 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_trigger_limit_order(_1: &amp;ReErased state::user::Order, _2: u64, _3: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::user::Order;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: ();<br align="left"/>let _16: ();<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: isize;<br align="left"/>let mut _19: !;<br align="left"/>let _20: ();<br align="left"/>let mut _21: &amp;ReErased str;<br align="left"/>let _22: &amp;ReErased str;<br align="left"/>let mut _23: error::ErrorCode;<br align="left"/>let _24: ();<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: !;<br align="left"/>let _28: ();<br align="left"/>let mut _29: &amp;ReErased str;<br align="left"/>let _30: &amp;ReErased str;<br align="left"/>let mut _31: error::ErrorCode;<br align="left"/>let _32: ();<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: !;<br align="left"/>let _36: ();<br align="left"/>let mut _37: &amp;ReErased str;<br align="left"/>let _38: &amp;ReErased str;<br align="left"/>let mut _39: error::ErrorCode;<br align="left"/>let _40: ();<br align="left"/>let mut _41: bool;<br align="left"/>let mut _42: !;<br align="left"/>let _43: ();<br align="left"/>let mut _44: &amp;ReErased str;<br align="left"/>let _45: &amp;ReErased str;<br align="left"/>let mut _46: error::ErrorCode;<br align="left"/>let _47: ();<br align="left"/>let mut _48: bool;<br align="left"/>let mut _49: state::user::Order;<br align="left"/>let mut _50: !;<br align="left"/>let _51: ();<br align="left"/>let mut _52: &amp;ReErased str;<br align="left"/>let _53: &amp;ReErased str;<br align="left"/>let mut _54: error::ErrorCode;<br align="left"/>let mut _55: ();<br align="left"/>debug order =&gt; _1;<br align="left"/>debug step_size =&gt; _2;<br align="left"/>debug min_order_size =&gt; _3;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>>;
    bb0__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/>StorageLive(_8)<br/>_8 = _2<br/>StorageLive(_9)<br/>_9 = _3<br/>StorageLive(_10)<br/>_10 = ((*_1).18: bool)<br/></td></tr><tr><td align="left">_6 = validate_base_asset_amount(move _7, move _8, move _9, move _10)</td></tr></table>>];
    bb1__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_11 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_5 as Continue).0: ())<br/>_4 = _15<br/>StorageDead(_15)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_18 = discriminant(((*_1).21: state::user::OrderTriggerCondition))<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb4__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_17 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb10__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = const &quot;Invalid trigger condition, must be Above or Below&quot;<br/>_21 = &amp;(*_22)<br/></td></tr><tr><td align="left">_20 = solana_program::log::sol_log(move _21)</td></tr></table>>];
    bb11__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageLive(_23)<br/>_23 = error::ErrorCode::InvalidTriggerOrderCondition<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _23)<br/>StorageDead(_23)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_16 = const ()<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = ((*_1).1: u64)<br/>_25 = Eq(move _26, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb13__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = const &quot;Trigger limit order price == 0&quot;<br/>_29 = &amp;(*_30)<br/></td></tr><tr><td align="left">_28 = solana_program::log::sol_log(move _29)</td></tr></table>>];
    bb14__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_24 = const ()<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = ((*_1).5: u64)<br/>_33 = Eq(move _34, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb15__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_30)<br/>StorageDead(_28)<br/>StorageLive(_31)<br/>_31 = error::ErrorCode::InvalidOrderLimitPrice<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _31)<br/>StorageDead(_31)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = const &quot;Trigger price == 0&quot;<br/>_37 = &amp;(*_38)<br/></td></tr><tr><td align="left">_36 = solana_program::log::sol_log(move _37)</td></tr></table>>];
    bb17__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_32 = const ()<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = ((*_1).19: bool)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb18__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_38)<br/>StorageDead(_36)<br/>StorageLive(_39)<br/>_39 = error::ErrorCode::InvalidOrderTrigger<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _39)<br/>StorageDead(_39)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = const &quot;Trigger limit order can not be post only&quot;<br/>_44 = &amp;(*_45)<br/></td></tr><tr><td align="left">_43 = solana_program::log::sol_log(move _44)</td></tr></table>>];
    bb20__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_40 = const ()<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = (*_1)<br/></td></tr><tr><td align="left">_48 = Order::has_oracle_price_offset(move _49)</td></tr></table>>];
    bb21__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_45)<br/>StorageDead(_43)<br/>StorageLive(_46)<br/>_46 = error::ErrorCode::InvalidOrderPostOnly<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _46)<br/>StorageDead(_46)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb23__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = const &quot;Trigger limit can not have oracle offset&quot;<br/>_52 = &amp;(*_53)<br/></td></tr><tr><td align="left">_51 = solana_program::log::sol_log(move _52)</td></tr></table>>];
    bb24__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_53)<br/>StorageDead(_51)<br/>StorageLive(_54)<br/>_54 = error::ErrorCode::InvalidOrderOracleOffset<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _54)<br/>StorageDead(_54)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_47 = const ()<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageLive(_55)<br/>_55 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _55)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_4562 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4562 -> bb1__0_4562 [label="return"];
    bb1__0_4562 -> bb2__0_4562 [label="return"];
    bb2__0_4562 -> bb3__0_4562 [label="0"];
    bb2__0_4562 -> bb5__0_4562 [label="1"];
    bb2__0_4562 -> bb4__0_4562 [label="otherwise"];
    bb3__0_4562 -> bb8__0_4562 [label="0"];
    bb3__0_4562 -> bb8__0_4562 [label="1"];
    bb3__0_4562 -> bb7__0_4562 [label="otherwise"];
    bb5__0_4562 -> bb6__0_4562 [label="return"];
    bb6__0_4562 -> bb26__0_4562 [label=""];
    bb7__0_4562 -> bb9__0_4562 [label=""];
    bb8__0_4562 -> bb9__0_4562 [label=""];
    bb9__0_4562 -> bb10__0_4562 [label="0"];
    bb9__0_4562 -> bb12__0_4562 [label="otherwise"];
    bb10__0_4562 -> bb11__0_4562 [label="return"];
    bb11__0_4562 -> bb26__0_4562 [label=""];
    bb12__0_4562 -> bb14__0_4562 [label="0"];
    bb12__0_4562 -> bb13__0_4562 [label="otherwise"];
    bb13__0_4562 -> bb15__0_4562 [label="return"];
    bb14__0_4562 -> bb17__0_4562 [label="0"];
    bb14__0_4562 -> bb16__0_4562 [label="otherwise"];
    bb15__0_4562 -> bb26__0_4562 [label=""];
    bb16__0_4562 -> bb18__0_4562 [label="return"];
    bb17__0_4562 -> bb20__0_4562 [label="0"];
    bb17__0_4562 -> bb19__0_4562 [label="otherwise"];
    bb18__0_4562 -> bb26__0_4562 [label=""];
    bb19__0_4562 -> bb21__0_4562 [label="return"];
    bb20__0_4562 -> bb22__0_4562 [label="return"];
    bb21__0_4562 -> bb26__0_4562 [label=""];
    bb22__0_4562 -> bb25__0_4562 [label="0"];
    bb22__0_4562 -> bb23__0_4562 [label="otherwise"];
    bb23__0_4562 -> bb24__0_4562 [label="return"];
    bb24__0_4562 -> bb26__0_4562 [label=""];
    bb25__0_4562 -> bb26__0_4562 [label=""];
}
