// MIR for `admin::handle_update_perp_market_fuel` before PreCodegen

fn admin::handle_update_perp_market_fuel(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::HotAdminUpdatePerpMarket<'_>>, _2: Option<u8>, _3: Option<u8>, _4: Option<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug fuel_boost_taker => _2;
    debug fuel_boost_maker => _3;
    debug fuel_boost_position => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _6: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _9: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _11: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _17: ();
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 1];
    let _27: &[&str; 1];
    let _28: [&str; 1];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &u16;
    let _35: &u16;
    let _36: &state::perp_market::PerpMarket;
    let mut _37: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _38: ();
    let mut _39: isize;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: &std::string::String;
    let _45: &std::string::String;
    let _46: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[&str; 2];
    let _51: &[&str; 2];
    let _52: [&str; 2];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let mut _54: &[core::fmt::rt::Argument<'_>; 2];
    let _55: &[core::fmt::rt::Argument<'_>; 2];
    let _56: [core::fmt::rt::Argument<'_>; 2];
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &u8;
    let _59: &u8;
    let _60: &state::perp_market::PerpMarket;
    let mut _61: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &u8;
    let _64: &u8;
    let mut _65: u8;
    let mut _66: &mut state::perp_market::PerpMarket;
    let mut _67: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let _71: ();
    let mut _72: isize;
    let _74: ();
    let mut _75: &str;
    let _76: &str;
    let mut _77: &std::string::String;
    let _78: &std::string::String;
    let _79: std::string::String;
    let mut _81: std::fmt::Arguments<'_>;
    let mut _82: &[&str];
    let mut _83: &[&str; 2];
    let _84: &[&str; 2];
    let _85: [&str; 2];
    let mut _86: &[core::fmt::rt::Argument<'_>];
    let mut _87: &[core::fmt::rt::Argument<'_>; 2];
    let _88: &[core::fmt::rt::Argument<'_>; 2];
    let _89: [core::fmt::rt::Argument<'_>; 2];
    let mut _90: core::fmt::rt::Argument<'_>;
    let mut _91: &u8;
    let _92: &u8;
    let _93: &state::perp_market::PerpMarket;
    let mut _94: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _95: core::fmt::rt::Argument<'_>;
    let mut _96: &u8;
    let _97: &u8;
    let mut _98: u8;
    let mut _99: &mut state::perp_market::PerpMarket;
    let mut _100: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _101: ();
    let mut _102: &str;
    let _103: &str;
    let _104: ();
    let mut _105: isize;
    let _107: ();
    let mut _108: &str;
    let _109: &str;
    let mut _110: &std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[&str; 2];
    let _117: &[&str; 2];
    let _118: [&str; 2];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let mut _120: &[core::fmt::rt::Argument<'_>; 2];
    let _121: &[core::fmt::rt::Argument<'_>; 2];
    let _122: [core::fmt::rt::Argument<'_>; 2];
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &u8;
    let _125: &u8;
    let _126: &state::perp_market::PerpMarket;
    let mut _127: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &u8;
    let _130: &u8;
    let mut _131: u8;
    let mut _132: &mut state::perp_market::PerpMarket;
    let mut _133: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _134: ();
    let mut _135: &str;
    let _136: &str;
    let mut _137: ();
    let mut _142: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    scope 1 {
        debug perp_market => _5;
        let _23: std::string::String;
        let mut _141: &[&str; 1];
        scope 6 {
            debug res => _23;
        }
        scope 7 {
            debug fuel_boost_taker => _40;
            let _40: u8;
            let _47: std::string::String;
            let mut _140: &[&str; 2];
            scope 8 {
                debug res => _47;
            }
        }
        scope 9 {
            debug fuel_boost_maker => _73;
            let _73: u8;
            let _80: std::string::String;
            let mut _139: &[&str; 2];
            scope 10 {
                debug res => _80;
            }
        }
        scope 11 {
            debug fuel_boost_position => _106;
            let _106: u8;
            let _113: std::string::String;
            let mut _138: &[&str; 2];
            scope 12 {
                debug res => _113;
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _142 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _10 = &((*_142).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _9 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        _11 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _8 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _9, move _11) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_9);
        _7 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind: bb61];
    }

    bb3: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = move ((_7 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _6 = move _16;
        StorageDead(_16);
        _5 = &mut _6;
        _145 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _141 = const _;
        _27 = &(*_141);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_5);
        _36 = <RefMut<'_, PerpMarket> as Deref>::deref(move _37) -> [return: bb8, unwind: bb60];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        _143 = discriminant(_7);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb55;
    }

    bb8: {
        StorageDead(_37);
        _35 = &((*_36).21: u16);
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _34) -> [return: bb9, unwind: bb60];
    }

    bb9: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb10, unwind: bb60];
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = format(move _24) -> [return: bb11, unwind: bb60];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        _22 = move _23;
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = <String as Deref>::deref(move _20) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = solana_program::log::sol_log(move _18) -> [return: bb13, unwind: bb59];
    }

    bb13: {
        StorageDead(_18);
        drop(_22) -> [return: bb14, unwind: bb60];
    }

    bb14: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_38);
        _39 = discriminant(_2);
        switchInt(move _39) -> [1: bb15, otherwise: bb25];
    }

    bb15: {
        StorageLive(_40);
        _40 = ((_2 as Some).0: u8);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _140 = const _;
        _51 = &(*_140);
        _50 = &(*_51);
        _49 = move _50 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_5);
        _60 = <RefMut<'_, PerpMarket> as Deref>::deref(move _61) -> [return: bb16, unwind: bb60];
    }

    bb16: {
        StorageDead(_61);
        _59 = &((*_60).29: u8);
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _58) -> [return: bb17, unwind: bb60];
    }

    bb17: {
        StorageDead(_58);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_40;
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _63) -> [return: bb18, unwind: bb60];
    }

    bb18: {
        StorageDead(_63);
        _56 = [move _57, move _62];
        StorageDead(_62);
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        _48 = Arguments::<'_>::new_v1(move _49, move _53) -> [return: bb19, unwind: bb60];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = format(move _48) -> [return: bb20, unwind: bb60];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        _46 = move _47;
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = <String as Deref>::deref(move _44) -> [return: bb21, unwind: bb58];
    }

    bb21: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb22, unwind: bb58];
    }

    bb22: {
        StorageDead(_42);
        drop(_46) -> [return: bb23, unwind: bb60];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_65);
        _65 = _40;
        StorageLive(_66);
        StorageLive(_67);
        _67 = &mut (*_5);
        _66 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _67) -> [return: bb24, unwind: bb60];
    }

    bb24: {
        StorageDead(_67);
        ((*_66).29: u8) = move _65;
        StorageDead(_65);
        StorageDead(_66);
        _38 = const ();
        StorageDead(_40);
        goto -> bb27;
    }

    bb25: {
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = const "perp_market.fuel_boost_taker: unchanged";
        _69 = &(*_70);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb26, unwind: bb60];
    }

    bb26: {
        StorageDead(_69);
        StorageDead(_70);
        StorageDead(_68);
        _38 = const ();
        goto -> bb27;
    }

    bb27: {
        StorageDead(_38);
        StorageLive(_71);
        _72 = discriminant(_3);
        switchInt(move _72) -> [1: bb28, otherwise: bb38];
    }

    bb28: {
        StorageLive(_73);
        _73 = ((_3 as Some).0: u8);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _139 = const _;
        _84 = &(*_139);
        _83 = &(*_84);
        _82 = move _83 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_83);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_5);
        _93 = <RefMut<'_, PerpMarket> as Deref>::deref(move _94) -> [return: bb29, unwind: bb60];
    }

    bb29: {
        StorageDead(_94);
        _92 = &((*_93).30: u8);
        _91 = &(*_92);
        _90 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _91) -> [return: bb30, unwind: bb60];
    }

    bb30: {
        StorageDead(_91);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_73;
        _96 = &(*_97);
        _95 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _96) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        StorageDead(_96);
        _89 = [move _90, move _95];
        StorageDead(_95);
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = move _87 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_87);
        _81 = Arguments::<'_>::new_v1(move _82, move _86) -> [return: bb32, unwind: bb60];
    }

    bb32: {
        StorageDead(_86);
        StorageDead(_82);
        _80 = format(move _81) -> [return: bb33, unwind: bb60];
    }

    bb33: {
        StorageDead(_81);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_84);
        _79 = move _80;
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = <String as Deref>::deref(move _77) -> [return: bb34, unwind: bb57];
    }

    bb34: {
        _75 = &(*_76);
        StorageDead(_77);
        _74 = solana_program::log::sol_log(move _75) -> [return: bb35, unwind: bb57];
    }

    bb35: {
        StorageDead(_75);
        drop(_79) -> [return: bb36, unwind: bb60];
    }

    bb36: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageLive(_98);
        _98 = _73;
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut (*_5);
        _99 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _100) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        StorageDead(_100);
        ((*_99).30: u8) = move _98;
        StorageDead(_98);
        StorageDead(_99);
        _71 = const ();
        StorageDead(_73);
        goto -> bb40;
    }

    bb38: {
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = const "perp_market.fuel_boost_maker: unchanged";
        _102 = &(*_103);
        _101 = solana_program::log::sol_log(move _102) -> [return: bb39, unwind: bb60];
    }

    bb39: {
        StorageDead(_102);
        StorageDead(_103);
        StorageDead(_101);
        _71 = const ();
        goto -> bb40;
    }

    bb40: {
        StorageDead(_71);
        StorageLive(_104);
        _105 = discriminant(_4);
        switchInt(move _105) -> [1: bb41, otherwise: bb51];
    }

    bb41: {
        StorageLive(_106);
        _106 = ((_4 as Some).0: u8);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _138 = const _;
        _117 = &(*_138);
        _116 = &(*_117);
        _115 = move _116 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &(*_5);
        _126 = <RefMut<'_, PerpMarket> as Deref>::deref(move _127) -> [return: bb42, unwind: bb60];
    }

    bb42: {
        StorageDead(_127);
        _125 = &((*_126).28: u8);
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _124) -> [return: bb43, unwind: bb60];
    }

    bb43: {
        StorageDead(_124);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_106;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _129) -> [return: bb44, unwind: bb60];
    }

    bb44: {
        StorageDead(_129);
        _122 = [move _123, move _128];
        StorageDead(_128);
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = move _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_120);
        _114 = Arguments::<'_>::new_v1(move _115, move _119) -> [return: bb45, unwind: bb60];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = format(move _114) -> [return: bb46, unwind: bb60];
    }

    bb46: {
        StorageDead(_114);
        StorageDead(_130);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_117);
        _112 = move _113;
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = <String as Deref>::deref(move _110) -> [return: bb47, unwind: bb56];
    }

    bb47: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = solana_program::log::sol_log(move _108) -> [return: bb48, unwind: bb56];
    }

    bb48: {
        StorageDead(_108);
        drop(_112) -> [return: bb49, unwind: bb60];
    }

    bb49: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_131);
        _131 = _106;
        StorageLive(_132);
        StorageLive(_133);
        _133 = &mut (*_5);
        _132 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _133) -> [return: bb50, unwind: bb60];
    }

    bb50: {
        StorageDead(_133);
        ((*_132).28: u8) = move _131;
        StorageDead(_131);
        StorageDead(_132);
        _104 = const ();
        StorageDead(_106);
        goto -> bb53;
    }

    bb51: {
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = const "perp_market.fuel_boost_position: unchanged";
        _135 = &(*_136);
        _134 = solana_program::log::sol_log(move _135) -> [return: bb52, unwind: bb60];
    }

    bb52: {
        StorageDead(_135);
        StorageDead(_136);
        StorageDead(_134);
        _104 = const ();
        goto -> bb53;
    }

    bb53: {
        StorageDead(_104);
        StorageLive(_137);
        _137 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _137);
        StorageDead(_137);
        drop(_6) -> [return: bb54, unwind: bb61];
    }

    bb54: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb55;
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_112) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_79) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_46) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_22) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_6) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62 (cleanup): {
        _147 = discriminant(_7);
        goto -> bb61;
    }
}
