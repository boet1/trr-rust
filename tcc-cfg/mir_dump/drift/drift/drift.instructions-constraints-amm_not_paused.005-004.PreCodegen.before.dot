digraph Mir_0_1163 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn constraints::amm_not_paused(_1: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _5: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _6: &amp;ReErased state::state::State;<br align="left"/>let _7: &amp;ReErased state::state::State;<br align="left"/>let mut _8: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: bool;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: anchor_lang::error::Error;<br align="left"/>let mut _16: error::ErrorCode;<br align="left"/>let mut _17: ();<br align="left"/>debug state =&gt; _1;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>>;
    bb0__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_1)<br/></td></tr><tr><td align="left">_7 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _8)</td></tr></table>>];
    bb1__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = &amp;(*_7)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_5 = state::state::State::amm_paused(move _6)</td></tr></table>>];
    bb2__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb3__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_9 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb4__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_4 as Continue).0: bool)<br/>_3 = _13<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb5__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb7__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_4)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = error::ErrorCode::ExchangePaused<br/></td></tr><tr><td align="left">_15 = &lt;error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _16)</td></tr></table>>];
    bb9__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_17)<br/>_17 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _17)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _15)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1163 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1163 -> bb1__0_1163 [label="return"];
    bb1__0_1163 -> bb2__0_1163 [label="return"];
    bb2__0_1163 -> bb3__0_1163 [label="return"];
    bb3__0_1163 -> bb4__0_1163 [label="0"];
    bb3__0_1163 -> bb6__0_1163 [label="1"];
    bb3__0_1163 -> bb5__0_1163 [label="otherwise"];
    bb4__0_1163 -> bb9__0_1163 [label="0"];
    bb4__0_1163 -> bb8__0_1163 [label="otherwise"];
    bb6__0_1163 -> bb7__0_1163 [label="return"];
    bb7__0_1163 -> bb11__0_1163 [label=""];
    bb8__0_1163 -> bb10__0_1163 [label="return"];
    bb9__0_1163 -> bb12__0_1163 [label=""];
    bb10__0_1163 -> bb11__0_1163 [label=""];
    bb11__0_1163 -> bb12__0_1163 [label=""];
}
