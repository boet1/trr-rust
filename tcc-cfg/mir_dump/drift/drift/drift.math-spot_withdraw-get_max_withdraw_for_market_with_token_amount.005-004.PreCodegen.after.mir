// MIR for `get_max_withdraw_for_market_with_token_amount` after PreCodegen

fn get_max_withdraw_for_market_with_token_amount(_1: &SpotMarket, _2: i128, _3: bool) -> std::result::Result<u128, error::ErrorCode> {
    debug spot_market => _1;
    debug token_amount => _2;
    debug is_leaving_drift => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: &state::spot_market::SpotMarket;
    let mut _9: &state::spot_market::SpotBalanceType;
    let _10: &state::spot_market::SpotBalanceType;
    let _11: state::spot_market::SpotBalanceType;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: &state::spot_market::SpotMarket;
    let mut _22: &state::spot_market::SpotBalanceType;
    let _23: &state::spot_market::SpotBalanceType;
    let _24: state::spot_market::SpotBalanceType;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: (u128, u128);
    let mut _33: bool;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _35: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _36: u128;
    let mut _37: u128;
    let mut _38: &state::spot_market::SpotMarket;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: ();
    let mut _46: bool;
    let mut _47: i128;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _50: std::result::Result<u128, error::ErrorCode>;
    let mut _51: u128;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _53: std::result::Result<u128, error::ErrorCode>;
    let mut _54: u64;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: u128;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _62: std::result::Result<u128, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: u128;
    let mut _78: u128;
    let mut _79: u128;
    let mut _81: i128;
    let _82: ();
    let mut _83: bool;
    let mut _84: u128;
    let mut _85: u128;
    let mut _86: bool;
    let mut _87: !;
    let mut _88: u128;
    let mut _89: u128;
    let mut _91: bool;
    let mut _92: u16;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _94: std::result::Result<u128, error::ErrorCode>;
    let mut _95: u64;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _97: std::result::Result<u64, error::ErrorCode>;
    let mut _98: u64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _100: std::result::Result<u64, error::ErrorCode>;
    let mut _101: u64;
    let mut _102: u64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _104: std::result::Result<u64, error::ErrorCode>;
    let mut _105: u16;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _128: std::result::Result<u128, error::ErrorCode>;
    let mut _129: u128;
    let mut _130: u128;
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _132: std::result::Result<u128, error::ErrorCode>;
    let mut _133: u64;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _139: u128;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _141: std::result::Result<u128, error::ErrorCode>;
    let mut _142: u64;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: u128;
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _150: std::result::Result<u128, error::ErrorCode>;
    let mut _151: u64;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _157: u128;
    let mut _158: u8;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: u128;
    let mut _166: u128;
    let mut _168: u128;
    let mut _169: u128;
    let mut _170: u128;
    let mut _171: u128;
    let mut _172: u128;
    let mut _173: u128;
    let _174: ();
    let mut _175: bool;
    let mut _176: u16;
    let mut _178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _179: std::result::Result<u128, error::ErrorCode>;
    let mut _180: &state::spot_market::SpotMarket;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _188: std::result::Result<u128, error::ErrorCode>;
    let mut _189: u64;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _191: std::result::Result<u64, error::ErrorCode>;
    let mut _192: u64;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _194: std::result::Result<u64, error::ErrorCode>;
    let mut _195: u64;
    let mut _196: u64;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _198: std::result::Result<u64, error::ErrorCode>;
    let mut _199: u16;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _220: u128;
    let mut _221: u128;
    let mut _222: u128;
    let mut _223: u128;
    let mut _224: u128;
    let mut _225: u128;
    let mut _226: u128;
    let mut _228: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug deposit_token_amount => _4;
        let _17: u128;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u128;
        let mut _227: &state::spot_market::SpotBalanceType;
        scope 6 {
            debug borrow_token_amount => _17;
            let _30: u128;
            let _31: u128;
            let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _43: (u128, u128);
            scope 11 {
                debug min_deposit_token_for_utilization => _30;
                debug max_borrow_token_for_utilization => _31;
                let mut _44: u128;
                scope 16 {
                    debug max_withdraw_amount => _44;
                    let _48: u128;
                    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _59: u128;
                    let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _68: u128;
                    let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _73: u128;
                    let _90: u128;
                    let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _110: u64;
                    let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _115: u64;
                    let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _120: u64;
                    let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _125: u128;
                    scope 17 {
                        debug min_deposit_token_for_twap => _48;
                        let _74: u128;
                        scope 30 {
                            debug min_deposit_token => _74;
                            let _77: u128;
                            scope 31 {
                                debug withdraw_limit => _77;
                                let _80: u128;
                                scope 32 {
                                    debug token_amount => _80;
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _56;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _59;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _65;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _68;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug residual => _70;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _73;
                        scope 29 {
                        }
                    }
                    scope 33 {
                        debug max_token_borrows => _90;
                        let _126: u128;
                        let _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _138: u128;
                        let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _147: u128;
                        let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _156: u128;
                        let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _163: u128;
                        scope 50 {
                            debug max_borrow_token_for_twap => _126;
                            let _164: u128;
                            scope 67 {
                                debug max_borrow_token => _164;
                                let mut _167: u128;
                                scope 68 {
                                    debug borrow_limit => _167;
                                    let _177: u128;
                                    let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _185: u128;
                                    scope 69 {
                                        debug borrows => _177;
                                        let _186: u128;
                                        let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _204: u64;
                                        let _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _209: u64;
                                        let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _214: u64;
                                        let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _219: u128;
                                        scope 74 {
                                            debug max_token_borrows => _186;
                                        }
                                        scope 75 {
                                            debug residual => _201;
                                            scope 76 {
                                            }
                                        }
                                        scope 77 {
                                            debug val => _204;
                                            scope 78 {
                                            }
                                        }
                                        scope 79 {
                                            debug residual => _206;
                                            scope 80 {
                                            }
                                        }
                                        scope 81 {
                                            debug val => _209;
                                            scope 82 {
                                            }
                                        }
                                        scope 83 {
                                            debug residual => _211;
                                            scope 84 {
                                            }
                                        }
                                        scope 85 {
                                            debug val => _214;
                                            scope 86 {
                                            }
                                        }
                                        scope 87 {
                                            debug residual => _216;
                                            scope 88 {
                                            }
                                        }
                                        scope 89 {
                                            debug val => _219;
                                            scope 90 {
                                            }
                                        }
                                    }
                                    scope 70 {
                                        debug residual => _182;
                                        scope 71 {
                                        }
                                    }
                                    scope 72 {
                                        debug val => _185;
                                        scope 73 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 51 {
                            debug residual => _135;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _138;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug residual => _144;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug val => _147;
                            scope 58 {
                            }
                        }
                        scope 59 {
                            debug residual => _153;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug val => _156;
                            scope 62 {
                            }
                        }
                        scope 63 {
                            debug residual => _160;
                            scope 64 {
                            }
                        }
                        scope 65 {
                            debug val => _163;
                            scope 66 {
                            }
                        }
                    }
                    scope 34 {
                        debug residual => _107;
                        scope 35 {
                        }
                    }
                    scope 36 {
                        debug val => _110;
                        scope 37 {
                        }
                    }
                    scope 38 {
                        debug residual => _112;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _115;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug residual => _117;
                        scope 43 {
                        }
                    }
                    scope 44 {
                        debug val => _120;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug residual => _122;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _125;
                        scope 49 {
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _40;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _43;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).11: u128);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        StorageLive(_10);
        _228 = const _;
        _10 = &(*_228);
        _9 = &(*_10);
        _6 = get_token_amount(move _7, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _12 = discriminant(_5);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_5 as Continue).0: u128);
        _4 = _16;
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_5);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_1).12: u128);
        StorageLive(_21);
        _21 = &(*_1);
        StorageLive(_22);
        StorageLive(_23);
        _227 = const _;
        _23 = &(*_227);
        _22 = &(*_23);
        _19 = get_token_amount(move _20, move _21, move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb140;
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _25 = discriminant(_18);
        switchInt(move _25) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_18 as Continue).0: u128);
        _17 = _29;
        StorageDead(_29);
        StorageDead(_23);
        StorageDead(_18);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _3;
        switchInt(move _33) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_18);
        goto -> bb139;
    }

    bb12: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _4;
        StorageLive(_37);
        _37 = _17;
        StorageLive(_38);
        _38 = &(*_1);
        _35 = calculate_token_utilization_limits(move _36, move _37, move _38) -> [return: bb14, unwind continue];
    }

    bb13: {
        _32 = (const 0_u128, const _);
        goto -> bb19;
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _35) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_35);
        _39 = discriminant(_34);
        switchInt(move _39) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_34 as Continue).0: (u128, u128));
        _32 = _43;
        StorageDead(_43);
        StorageDead(_34);
        goto -> bb19;
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb139;
    }

    bb19: {
        StorageDead(_33);
        StorageLive(_30);
        _30 = (_32.0: u128);
        StorageLive(_31);
        _31 = (_32.1: u128);
        StorageDead(_32);
        StorageLive(_44);
        _44 = const 0_u128;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _2;
        _46 = Gt(move _47, const 0_i128);
        switchInt(move _46) -> [0: bb43, otherwise: bb20];
    }

    bb20: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = ((*_1).19: u64);
        _53 = <u64 as Cast>::cast::<u128>(move _54) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_54);
        _52 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_53);
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_59);
        _59 = ((_52 as Continue).0: u128);
        _51 = _59;
        StorageDead(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = ((*_1).17: u64);
        _62 = <u64 as Cast>::cast::<u128>(move _63) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_56);
        _56 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb136;
    }

    bb26: {
        StorageDead(_63);
        _61 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_62);
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_68);
        _68 = ((_61 as Continue).0: u128);
        _60 = _68;
        StorageDead(_68);
        _50 = calculate_min_deposit_token_amount(move _51, move _60) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_65);
        _65 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb135;
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_51);
        _49 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _50) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_50);
        _69 = discriminant(_49);
        switchInt(move _69) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_73);
        _73 = ((_49 as Continue).0: u128);
        _48 = _73;
        StorageDead(_73);
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_49);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _48;
        StorageLive(_76);
        _76 = _30;
        _74 = <u128 as Ord>::max(move _75, move _76) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_70);
        _70 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_72);
        StorageDead(_70);
        goto -> bb135;
    }

    bb36: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _4;
        StorageLive(_79);
        _79 = _74;
        _77 = core::num::<impl u128>::saturating_sub(move _78, move _79) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _2;
        _80 = core::num::<impl i128>::unsigned_abs(move _81) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = _77;
        StorageLive(_85);
        _85 = _80;
        _83 = Le(move _84, move _85);
        switchInt(move _83) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_86);
        _86 = _3;
        switchInt(move _86) -> [0: bb42, otherwise: bb40];
    }

    bb40: {
        StorageLive(_88);
        _88 = _77;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _88);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        goto -> bb137;
    }

    bb41: {
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb42;
    }

    bb42: {
        _82 = const ();
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_89);
        _89 = _80;
        _44 = move _89;
        StorageDead(_89);
        _45 = const ();
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_48);
        goto -> bb44;
    }

    bb43: {
        StorageDead(_47);
        _45 = const ();
        goto -> bb44;
    }

    bb44: {
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = ((*_1).50: u16);
        _91 = Gt(move _92, const 0_u16);
        switchInt(move _91) -> [0: bb66, otherwise: bb45];
    }

    bb45: {
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = ((*_1).18: u64);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = ((*_1).50: u16);
        _104 = <u16 as Cast>::cast::<u64>(move _105) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_105);
        _103 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _104) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: u64);
        _102 = _110;
        StorageDead(_110);
        _100 = <u64 as SafeMath>::safe_mul(move _101, move _102) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_107);
        _107 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb131;
    }

    bb51: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_100);
        _111 = discriminant(_99);
        switchInt(move _111) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_115);
        _115 = ((_99 as Continue).0: u64);
        _98 = _115;
        StorageDead(_115);
        _97 = <u64 as SafeMath>::safe_div(move _98, const 10000_u64) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_112);
        _112 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_114);
        StorageDead(_112);
        goto -> bb131;
    }

    bb56: {
        StorageDead(_98);
        _96 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _97) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_97);
        _116 = discriminant(_96);
        switchInt(move _116) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_120);
        _120 = ((_96 as Continue).0: u64);
        _95 = _120;
        StorageDead(_120);
        _94 = <u64 as Cast>::cast::<u128>(move _95) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_117);
        _117 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb132;
    }

    bb61: {
        StorageDead(_95);
        _93 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _94) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_94);
        _121 = discriminant(_93);
        switchInt(move _121) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_125);
        _125 = ((_93 as Continue).0: u128);
        _90 = _125;
        StorageDead(_125);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        goto -> bb67;
    }

    bb64: {
        StorageLive(_122);
        _122 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb133;
    }

    bb66: {
        StorageDead(_92);
        _90 = const _;
        goto -> bb67;
    }

    bb67: {
        StorageDead(_91);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _4;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = ((*_1).19: u64);
        _132 = <u64 as Cast>::cast::<u128>(move _133) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_133);
        _131 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _132) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_132);
        _134 = discriminant(_131);
        switchInt(move _134) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_138);
        _138 = ((_131 as Continue).0: u128);
        _130 = _138;
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = ((*_1).20: u64);
        _141 = <u64 as Cast>::cast::<u128>(move _142) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_135);
        _135 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_137);
        _137 = _135;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _137) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb129;
    }

    bb73: {
        StorageDead(_142);
        _140 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _141) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_141);
        _143 = discriminant(_140);
        switchInt(move _143) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_147);
        _147 = ((_140 as Continue).0: u128);
        _139 = _147;
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = ((*_1).17: u64);
        _150 = <u64 as Cast>::cast::<u128>(move _151) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_144);
        _144 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_139);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb128;
    }

    bb78: {
        StorageDead(_151);
        _149 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _150) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_150);
        _152 = discriminant(_149);
        switchInt(move _152) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_156);
        _156 = ((_149 as Continue).0: u128);
        _148 = _156;
        StorageDead(_156);
        StorageLive(_157);
        _157 = _90;
        StorageLive(_158);
        _158 = ((*_1).62: u8);
        _128 = calculate_max_borrow_token_amount(move _129, move _130, move _139, move _148, move _157, move _158) -> [return: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_153);
        _153 = ((_149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_148);
        StorageDead(_139);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb127;
    }

    bb83: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_148);
        StorageDead(_139);
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_128);
        _159 = discriminant(_127);
        switchInt(move _159) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_163);
        _163 = ((_127 as Continue).0: u128);
        _126 = _163;
        StorageDead(_163);
        StorageDead(_149);
        StorageDead(_140);
        StorageDead(_131);
        StorageDead(_127);
        StorageLive(_164);
        StorageLive(_165);
        _165 = _126;
        StorageLive(_166);
        _166 = _31;
        _164 = <u128 as Ord>::min(move _165, move _166) -> [return: bb88, unwind continue];
    }

    bb86: {
        StorageLive(_160);
        _160 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_162);
        StorageDead(_160);
        goto -> bb127;
    }

    bb88: {
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = _164;
        StorageLive(_170);
        _170 = _17;
        _168 = core::num::<impl u128>::saturating_sub(move _169, move _170) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_171);
        StorageLive(_172);
        _172 = _4;
        StorageLive(_173);
        _173 = _17;
        _171 = core::num::<impl u128>::saturating_sub(move _172, move _173) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_173);
        StorageDead(_172);
        _167 = <u128 as Ord>::min(move _168, move _171) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_171);
        StorageDead(_168);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = ((*_1).50: u16);
        _175 = Gt(move _176, const 0_u16);
        switchInt(move _175) -> [0: bb120, otherwise: bb92];
    }

    bb92: {
        StorageDead(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &(*_1);
        _179 = SpotMarket::get_borrows(move _180) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_180);
        _178 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _179) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_179);
        _181 = discriminant(_178);
        switchInt(move _181) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        StorageLive(_185);
        _185 = ((_178 as Continue).0: u128);
        _177 = _185;
        StorageDead(_185);
        StorageDead(_178);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = ((*_1).18: u64);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = ((*_1).50: u16);
        _198 = <u16 as Cast>::cast::<u64>(move _199) -> [return: bb98, unwind continue];
    }

    bb96: {
        StorageLive(_182);
        _182 = ((_178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_178);
        goto -> bb126;
    }

    bb98: {
        StorageDead(_199);
        _197 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _198) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_198);
        _200 = discriminant(_197);
        switchInt(move _200) -> [0: bb100, 1: bb101, otherwise: bb4];
    }

    bb100: {
        StorageLive(_204);
        _204 = ((_197 as Continue).0: u64);
        _196 = _204;
        StorageDead(_204);
        _194 = <u64 as SafeMath>::safe_mul(move _195, move _196) -> [return: bb103, unwind continue];
    }

    bb101: {
        StorageLive(_201);
        _201 = ((_197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        goto -> bb123;
    }

    bb103: {
        StorageDead(_196);
        StorageDead(_195);
        _193 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _194) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_194);
        _205 = discriminant(_193);
        switchInt(move _205) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_209);
        _209 = ((_193 as Continue).0: u64);
        _192 = _209;
        StorageDead(_209);
        _191 = <u64 as SafeMath>::safe_div(move _192, const 10000_u64) -> [return: bb108, unwind continue];
    }

    bb106: {
        StorageLive(_206);
        _206 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_208);
        _208 = _206;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _208) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_208);
        StorageDead(_206);
        goto -> bb123;
    }

    bb108: {
        StorageDead(_192);
        _190 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _191) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_191);
        _210 = discriminant(_190);
        switchInt(move _210) -> [0: bb110, 1: bb111, otherwise: bb4];
    }

    bb110: {
        StorageLive(_214);
        _214 = ((_190 as Continue).0: u64);
        _189 = _214;
        StorageDead(_214);
        _188 = <u64 as Cast>::cast::<u128>(move _189) -> [return: bb113, unwind continue];
    }

    bb111: {
        StorageLive(_211);
        _211 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_213);
        StorageDead(_211);
        goto -> bb124;
    }

    bb113: {
        StorageDead(_189);
        _187 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _188) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_188);
        _215 = discriminant(_187);
        switchInt(move _215) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        StorageLive(_219);
        _219 = ((_187 as Continue).0: u128);
        _186 = _219;
        StorageDead(_219);
        StorageDead(_197);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_187);
        StorageLive(_220);
        StorageLive(_221);
        _221 = _167;
        StorageLive(_222);
        StorageLive(_223);
        _223 = _186;
        StorageLive(_224);
        _224 = _177;
        _222 = core::num::<impl u128>::saturating_sub(move _223, move _224) -> [return: bb118, unwind continue];
    }

    bb116: {
        StorageLive(_216);
        _216 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_218);
        StorageDead(_216);
        goto -> bb125;
    }

    bb118: {
        StorageDead(_224);
        StorageDead(_223);
        _220 = <u128 as Ord>::min(move _221, move _222) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_222);
        StorageDead(_221);
        _167 = move _220;
        StorageDead(_220);
        _174 = const ();
        StorageDead(_186);
        StorageDead(_177);
        goto -> bb121;
    }

    bb120: {
        StorageDead(_176);
        _174 = const ();
        goto -> bb121;
    }

    bb121: {
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_225);
        _225 = _44;
        StorageLive(_226);
        _226 = _167;
        _0 = <u128 as SafeMath>::safe_add(move _225, move _226) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_126);
        StorageDead(_90);
        StorageDead(_44);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_17);
        StorageDead(_4);
        goto -> bb141;
    }

    bb123: {
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb124;
    }

    bb124: {
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_197);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_167);
        StorageDead(_164);
        goto -> bb130;
    }

    bb127: {
        StorageDead(_149);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_140);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_131);
        StorageDead(_127);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_126);
        goto -> bb134;
    }

    bb131: {
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_91);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_90);
        goto -> bb138;
    }

    bb135: {
        StorageDead(_61);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_52);
        StorageDead(_49);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_44);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_17);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_4);
        goto -> bb141;
    }

    bb141: {
        return;
    }
}
