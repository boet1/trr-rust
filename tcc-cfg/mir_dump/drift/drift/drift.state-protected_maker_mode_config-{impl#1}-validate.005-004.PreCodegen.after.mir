// MIR for `protected_maker_mode_config::<impl at programs/drift/src/state/protected_maker_mode_config.rs:21:1: 21:30>::validate` after PreCodegen

fn protected_maker_mode_config::<impl at programs/drift/src/state/protected_maker_mode_config.rs:21:1: 21:30>::validate(_1: &ProtectedMakerModeConfig) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 3];
    let _39: &[&str; 3];
    let _40: [&str; 3];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 2];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &u32;
    let _47: &u32;
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &u32;
    let _50: &u32;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: ();
    let mut _57: ();
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let _35: std::string::String;
        let mut _58: &[&str; 3];
        let mut _59: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
        scope 3 {
            debug res => _35;
        }
    }
    scope 4 {
        debug residual => _53;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _56;
        scope 7 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).1: u32);
        StorageLive(_7);
        _7 = ((*_1).0: u32);
        _5 = Le(move _6, move _7);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        _8 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb16;
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidProtectedMakerModeConfig;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _59 = const _;
        _20 = &(*_59);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _58 = const _;
        _39 = &(*_58);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &((*_1).1: u32);
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _46) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &((*_1).0: u32);
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _49) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_49);
        _44 = [move _45, move _48];
        StorageDead(_48);
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        StorageDead(_30);
        drop(_34) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_51);
        _51 = _9;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_9);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_4);
        _52 = discriminant(_3);
        switchInt(move _52) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_56);
        _56 = ((_3 as Continue).0: ());
        _2 = _56;
        StorageDead(_56);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_57);
        _57 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _57);
        StorageDead(_57);
        goto -> bb22;
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_53);
        _53 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_34) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_15) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}
