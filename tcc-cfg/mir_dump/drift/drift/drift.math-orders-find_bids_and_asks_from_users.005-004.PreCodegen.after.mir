// MIR for `find_bids_and_asks_from_users` after PreCodegen

fn find_bids_and_asks_from_users(_1: &PerpMarket, _2: &OraclePriceData, _3: &UserMap<'_>, _4: u64, _5: i64) -> std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> {
    debug perp_market => _1;
    debug oracle_price_date => _2;
    debug users => _3;
    debug slot => _4;
    debug now => _5;
    let mut _0: std::result::Result<(std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>), error::ErrorCode>;
    let mut _6: std::vec::Vec<math::orders::Level>;
    let mut _11: i64;
    let mut _13: &mut std::vec::Vec<math::orders::Level>;
    let mut _14: &mut std::vec::Vec<math::orders::Level>;
    let _15: ();
    let mut _16: std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _17: std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _18: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _20: ();
    let _21: ();
    let mut _22: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _23: &mut std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _24: &mut std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _25: isize;
    let mut _26: !;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _30: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _31: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _32: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _33: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _40: std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _41: std::slice::Iter<'_, state::user::Order>;
    let mut _42: &[state::user::Order];
    let mut _43: &[state::user::Order; 32];
    let _44: &state::user::User;
    let mut _45: &std::cell::Ref<'_, state::user::User>;
    let _47: ();
    let mut _48: std::option::Option<(usize, &state::user::Order)>;
    let mut _49: &mut std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _50: &mut std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
    let mut _51: isize;
    let mut _52: !;
    let _54: ();
    let mut _55: bool;
    let mut _56: &state::user::OrderStatus;
    let mut _57: &state::user::OrderStatus;
    let _58: state::user::OrderStatus;
    let mut _59: !;
    let _60: ();
    let mut _61: bool;
    let mut _62: &state::user::MarketType;
    let mut _63: &state::user::MarketType;
    let _64: state::user::MarketType;
    let mut _65: bool;
    let mut _66: u16;
    let mut _67: u16;
    let mut _68: !;
    let _69: ();
    let mut _70: bool;
    let mut _71: &state::user::Order;
    let mut _72: bool;
    let mut _73: &state::user::Order;
    let mut _74: bool;
    let mut _75: &state::user::Order;
    let mut _76: !;
    let _77: ();
    let mut _78: bool;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _80: std::result::Result<bool, error::ErrorCode>;
    let mut _81: &state::user::Order;
    let mut _82: u64;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: !;
    let _89: ();
    let mut _90: bool;
    let mut _91: i64;
    let mut _92: i64;
    let mut _93: bool;
    let mut _94: i64;
    let mut _95: !;
    let mut _97: &state::user::PerpPosition;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _99: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _100: &state::user::User;
    let _101: &state::user::User;
    let mut _102: &std::cell::Ref<'_, state::user::User>;
    let mut _103: u16;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _111: std::result::Result<u64, error::ErrorCode>;
    let mut _112: &state::user::Order;
    let mut _113: std::option::Option<i64>;
    let mut _114: i64;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _122: std::result::Result<u64, error::ErrorCode>;
    let mut _123: &state::user::Order;
    let mut _124: std::option::Option<i64>;
    let mut _125: std::option::Option<u64>;
    let mut _126: u64;
    let mut _127: u64;
    let mut _128: bool;
    let mut _129: &state::perp_market::PerpMarket;
    let mut _130: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _136: ();
    let mut _137: &mut {closure@programs/drift/src/math/orders.rs:1236:28: 1236:94};
    let mut _138: (u64, u64, controller::position::PositionDirection);
    let mut _139: u64;
    let mut _140: u64;
    let mut _141: controller::position::PositionDirection;
    let mut _142: (std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>);
    let mut _143: std::vec::Vec<math::orders::Level>;
    let mut _144: std::vec::Vec<math::orders::Level>;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    scope 1 {
        debug bids => _6;
        let mut _7: std::vec::Vec<math::orders::Level>;
        scope 2 {
            debug asks => _7;
            let _8: u16;
            scope 3 {
                debug market_index => _8;
                let _9: u64;
                scope 4 {
                    debug tick_size => _9;
                    let _10: std::option::Option<i64>;
                    scope 5 {
                        debug oracle_price => _10;
                        let mut _12: {closure@programs/drift/src/math/orders.rs:1236:28: 1236:94};
                        scope 6 {
                            debug insert_order => _12;
                            let mut _19: std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
                            scope 7 {
                                debug iter => _19;
                                let _27: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                scope 8 {
                                    debug account_loader => _27;
                                    let _28: std::cell::Ref<'_, state::user::User>;
                                    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _38: std::cell::Ref<'_, state::user::User>;
                                    scope 9 {
                                        debug user => _28;
                                        let mut _46: std::iter::Enumerate<std::slice::Iter<'_, state::user::Order>>;
                                        scope 14 {
                                            debug iter => _46;
                                            let _53: &state::user::Order;
                                            scope 15 {
                                                debug order => _53;
                                                let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _87: bool;
                                                let _96: i64;
                                                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _108: &state::user::PerpPosition;
                                                let mut _145: &state::user::MarketType;
                                                let mut _146: &state::user::OrderStatus;
                                                scope 16 {
                                                    debug residual => _84;
                                                    scope 17 {
                                                    }
                                                }
                                                scope 18 {
                                                    debug val => _87;
                                                    scope 19 {
                                                    }
                                                }
                                                scope 20 {
                                                    debug existing_position => _96;
                                                    let _109: u64;
                                                    let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _119: u64;
                                                    scope 25 {
                                                        debug base_amount => _109;
                                                        let _120: u64;
                                                        let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _135: u64;
                                                        scope 30 {
                                                            debug limit_price => _120;
                                                        }
                                                        scope 31 {
                                                            debug residual => _132;
                                                            scope 32 {
                                                            }
                                                        }
                                                        scope 33 {
                                                            debug val => _135;
                                                            scope 34 {
                                                            }
                                                        }
                                                    }
                                                    scope 26 {
                                                        debug residual => _116;
                                                        scope 27 {
                                                        }
                                                    }
                                                    scope 28 {
                                                        debug val => _119;
                                                        scope 29 {
                                                        }
                                                    }
                                                }
                                                scope 21 {
                                                    debug residual => _105;
                                                    scope 22 {
                                                    }
                                                }
                                                scope 23 {
                                                    debug val => _108;
                                                    scope 24 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 10 {
                                        debug residual => _35;
                                        scope 11 {
                                        }
                                    }
                                    scope 12 {
                                        debug val => _38;
                                        scope 13 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        _6 = Vec::<Level>::with_capacity(const 32_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_7);
        _7 = Vec::<Level>::with_capacity(const 32_usize) -> [return: bb2, unwind: bb83];
    }

    bb2: {
        StorageLive(_8);
        _8 = ((*_1).21: u16);
        StorageLive(_9);
        _9 = (((*_1).1: state::perp_market::AMM).53: u64);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_2).0: i64);
        _10 = Option::<i64>::Some(move _11);
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        StorageLive(_14);
        _14 = &mut _7;
        _12 = {closure@programs/drift/src/math/orders.rs:1236:28: 1236:94} { bids: move _13, asks: move _14 };
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_3).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        _17 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::values(move _18) -> [return: bb3, unwind: bb82];
    }

    bb3: {
        StorageDead(_18);
        _16 = <std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>> as IntoIterator>::into_iter(move _17) -> [return: bb4, unwind: bb82];
    }

    bb4: {
        StorageDead(_17);
        StorageLive(_19);
        _19 = move _16;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut _19;
        _23 = &mut (*_24);
        _22 = <std::collections::btree_map::Values<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>> as Iterator>::next(move _23) -> [return: bb6, unwind: bb82];
    }

    bb6: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_27);
        _27 = ((_22 as Some).0: &anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_27);
        _31 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _32) -> [return: bb10, unwind: bb82];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _15 = const ();
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_142);
        StorageLive(_143);
        _143 = move _6;
        StorageLive(_144);
        _144 = move _7;
        _142 = (move _143, move _144);
        StorageDead(_144);
        StorageDead(_143);
        _0 = std::result::Result::<(Vec<Level>, Vec<Level>), error::ErrorCode>::Ok(move _142);
        StorageDead(_142);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb80;
    }

    bb10: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _30 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _31, move _33) -> [return: bb11, unwind: bb82];
    }

    bb11: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _30) -> [return: bb12, unwind: bb82];
    }

    bb12: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        StorageLive(_38);
        _38 = move ((_29 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _28 = move _38;
        StorageDead(_38);
        _149 = discriminant(_29);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_28;
        _44 = <Ref<'_, User> as Deref>::deref(move _45) -> [return: bb16, unwind: bb81];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb15, unwind: bb85];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_35);
        _147 = discriminant(_29);
        StorageDead(_29);
        goto -> bb77;
    }

    bb16: {
        StorageDead(_45);
        _43 = &((*_44).5: [state::user::Order; 32]);
        _42 = move _43 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_43);
        _41 = core::slice::<impl [Order]>::iter(move _42) -> [return: bb17, unwind: bb81];
    }

    bb17: {
        StorageDead(_42);
        _40 = <std::slice::Iter<'_, Order> as Iterator>::enumerate(move _41) -> [return: bb18, unwind: bb81];
    }

    bb18: {
        StorageDead(_41);
        _39 = <Enumerate<std::slice::Iter<'_, Order>> as IntoIterator>::into_iter(move _40) -> [return: bb19, unwind: bb81];
    }

    bb19: {
        StorageDead(_40);
        StorageLive(_46);
        _46 = move _39;
        goto -> bb20;
    }

    bb20: {
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut _46;
        _49 = &mut (*_50);
        _48 = <Enumerate<std::slice::Iter<'_, Order>> as Iterator>::next(move _49) -> [return: bb21, unwind: bb81];
    }

    bb21: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb23, 1: bb22, otherwise: bb8];
    }

    bb22: {
        StorageLive(_53);
        _53 = (((_48 as Some).0: (usize, &state::user::Order)).1: &state::user::Order);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_53).12: state::user::OrderStatus);
        StorageLive(_57);
        _146 = const _;
        _57 = &(*_146);
        _55 = <OrderStatus as PartialEq>::ne(move _56, move _57) -> [return: bb24, unwind: bb81];
    }

    bb23: {
        _21 = const ();
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        drop(_28) -> [return: bb73, unwind: bb82];
    }

    bb24: {
        switchInt(move _55) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb72;
    }

    bb26: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = const ();
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_53).14: state::user::MarketType);
        StorageLive(_63);
        _145 = const _;
        _63 = &(*_145);
        _61 = <state::user::MarketType as PartialEq>::ne(move _62, move _63) -> [return: bb27, unwind: bb81];
    }

    bb27: {
        switchInt(move _61) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb30;
    }

    bb29: {
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        _66 = ((*_53).11: u16);
        StorageLive(_67);
        _67 = _8;
        _65 = Ne(move _66, move _67);
        switchInt(move _65) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb72;
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_66);
        _60 = const ();
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_53);
        _70 = Order::is_limit_order(move _71) -> [return: bb32, unwind: bb81];
    }

    bb32: {
        switchInt(move _70) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_53);
        _72 = Order::must_be_triggered(move _73) -> [return: bb35, unwind: bb81];
    }

    bb34: {
        StorageDead(_71);
        goto -> bb39;
    }

    bb35: {
        switchInt(move _72) -> [0: bb40, otherwise: bb36];
    }

    bb36: {
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_53);
        _74 = Order::triggered(move _75) -> [return: bb37, unwind: bb81];
    }

    bb37: {
        switchInt(move _74) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        StorageDead(_75);
        goto -> bb41;
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb72;
    }

    bb40: {
        StorageDead(_73);
        goto -> bb41;
    }

    bb41: {
        _69 = const ();
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_53);
        StorageLive(_82);
        _82 = _4;
        _80 = Order::is_resting_limit_order(move _81, move _82) -> [return: bb42, unwind: bb81];
    }

    bb42: {
        StorageDead(_82);
        StorageDead(_81);
        _79 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _80) -> [return: bb43, unwind: bb81];
    }

    bb43: {
        StorageDead(_80);
        _83 = discriminant(_79);
        switchInt(move _83) -> [0: bb44, 1: bb45, otherwise: bb8];
    }

    bb44: {
        StorageLive(_87);
        _87 = ((_79 as Continue).0: bool);
        _78 = _87;
        StorageDead(_87);
        switchInt(move _78) -> [0: bb48, otherwise: bb47];
    }

    bb45: {
        StorageLive(_84);
        _84 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb46, unwind: bb81];
    }

    bb46: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb76;
    }

    bb47: {
        StorageDead(_79);
        _77 = const ();
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _5;
        StorageLive(_92);
        _92 = ((*_53).8: i64);
        _90 = Gt(move _91, move _92);
        switchInt(move _90) -> [0: bb50, otherwise: bb49];
    }

    bb48: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb72;
    }

    bb49: {
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ((*_53).8: i64);
        _93 = Ne(move _94, const 0_i64);
        switchInt(move _93) -> [0: bb52, otherwise: bb51];
    }

    bb50: {
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb53;
    }

    bb51: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb72;
    }

    bb52: {
        StorageDead(_94);
        goto -> bb53;
    }

    bb53: {
        _89 = const ();
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_28;
        _101 = <Ref<'_, User> as Deref>::deref(move _102) -> [return: bb54, unwind: bb81];
    }

    bb54: {
        _100 = &(*_101);
        StorageDead(_102);
        StorageLive(_103);
        _103 = _8;
        _99 = User::get_perp_position(move _100, move _103) -> [return: bb55, unwind: bb81];
    }

    bb55: {
        StorageDead(_103);
        StorageDead(_100);
        _98 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _99) -> [return: bb56, unwind: bb81];
    }

    bb56: {
        StorageDead(_99);
        _104 = discriminant(_98);
        switchInt(move _104) -> [0: bb57, 1: bb58, otherwise: bb8];
    }

    bb57: {
        StorageLive(_108);
        _108 = ((_98 as Continue).0: &state::user::PerpPosition);
        _97 = _108;
        StorageDead(_108);
        _96 = ((*_97).1: i64);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_53);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _96;
        _113 = Option::<i64>::Some(move _114);
        StorageDead(_114);
        _111 = Order::get_base_asset_amount_unfilled(move _112, move _113) -> [return: bb60, unwind: bb81];
    }

    bb58: {
        StorageLive(_105);
        _105 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb59, unwind: bb81];
    }

    bb59: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb75;
    }

    bb60: {
        StorageDead(_113);
        StorageDead(_112);
        _110 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _111) -> [return: bb61, unwind: bb81];
    }

    bb61: {
        StorageDead(_111);
        _115 = discriminant(_110);
        switchInt(move _115) -> [0: bb62, 1: bb63, otherwise: bb8];
    }

    bb62: {
        StorageLive(_119);
        _119 = ((_110 as Continue).0: u64);
        _109 = _119;
        StorageDead(_119);
        StorageDead(_110);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_53);
        StorageLive(_124);
        _124 = _10;
        StorageLive(_125);
        _125 = Option::<u64>::None;
        StorageLive(_126);
        _126 = _4;
        StorageLive(_127);
        _127 = _9;
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        _128 = PerpMarket::is_prediction_market(move _129) -> [return: bb65, unwind: bb81];
    }

    bb63: {
        StorageLive(_116);
        _116 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb64, unwind: bb81];
    }

    bb64: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_110);
        goto -> bb74;
    }

    bb65: {
        StorageDead(_129);
        StorageLive(_130);
        _130 = Option::<ProtectedMakerParams>::None;
        _122 = Order::force_get_limit_price(move _123, move _124, move _125, move _126, move _127, move _128, move _130) -> [return: bb66, unwind: bb81];
    }

    bb66: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        _121 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _122) -> [return: bb67, unwind: bb81];
    }

    bb67: {
        StorageDead(_122);
        _131 = discriminant(_121);
        switchInt(move _131) -> [0: bb68, 1: bb69, otherwise: bb8];
    }

    bb68: {
        StorageLive(_135);
        _135 = ((_121 as Continue).0: u64);
        _120 = _135;
        StorageDead(_135);
        StorageDead(_121);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut _12;
        StorageLive(_138);
        StorageLive(_139);
        _139 = _109;
        StorageLive(_140);
        _140 = _120;
        StorageLive(_141);
        _141 = ((*_53).17: controller::position::PositionDirection);
        _138 = (move _139, move _140, move _141);
        _136 = <{closure@programs/drift/src/math/orders.rs:1236:28: 1236:94} as FnMut<(u64, u64, controller::position::PositionDirection)>>::call_mut(move _137, move _138) -> [return: bb71, unwind: bb81];
    }

    bb69: {
        StorageLive(_132);
        _132 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb70, unwind: bb81];
    }

    bb70: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb74;
    }

    bb71: {
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        _47 = const ();
        StorageDead(_120);
        StorageDead(_109);
        StorageDead(_96);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        _20 = const ();
        goto -> bb20;
    }

    bb72: {
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb20;
    }

    bb73: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        _20 = const ();
        goto -> bb5;
    }

    bb74: {
        StorageDead(_109);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_96);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        drop(_28) -> [return: bb77, unwind: bb82];
    }

    bb77: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        drop(_7) -> [return: bb78, unwind: bb83];
    }

    bb78: {
        StorageDead(_7);
        drop(_6) -> [return: bb79, unwind: bb84];
    }

    bb79: {
        StorageDead(_6);
        goto -> bb80;
    }

    bb80: {
        return;
    }

    bb81 (cleanup): {
        drop(_28) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_7) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_6) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        resume;
    }

    bb85 (cleanup): {
        _151 = discriminant(_29);
        goto -> bb82;
    }
}
