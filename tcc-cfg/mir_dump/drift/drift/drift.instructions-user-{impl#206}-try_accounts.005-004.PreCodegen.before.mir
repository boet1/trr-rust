// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4564:10: 4564:18>::try_accounts` before PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4564:10: 4564:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut EnableUserHighLeverageModeBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, instructions::user::EnableUserHighLeverageModeBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, instructions::user::EnableUserHighLeverageModeBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, instructions::user::EnableUserHighLeverageModeBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, instructions::user::EnableUserHighLeverageModeBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _22: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::user::EnableUserHighLeverageModeBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::user::EnableUserHighLeverageModeBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _52: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::user::EnableUserHighLeverageModeBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::user::EnableUserHighLeverageModeBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _80: ();
    let mut _81: bool;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _84: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _85: !;
    let mut _86: anchor_lang::error::Error;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::ErrorCode;
    let _89: ();
    let mut _90: bool;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _92: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _93: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _94: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _95: &anchor_lang::prelude::Signer<'_>;
    let _96: &anchor_lang::prelude::Signer<'_>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _102: !;
    let mut _103: anchor_lang::error::Error;
    let mut _104: anchor_lang::error::Error;
    let mut _105: anchor_lang::error::ErrorCode;
    let _106: ();
    let mut _107: bool;
    let mut _108: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _109: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let _110: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _111: !;
    let mut _112: anchor_lang::error::Error;
    let mut _113: anchor_lang::error::Error;
    let mut _114: anchor_lang::error::ErrorCode;
    let mut _115: instructions::user::EnableUserHighLeverageMode<'_>;
    let mut _116: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _117: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _118: anchor_lang::prelude::Signer<'_>;
    let mut _119: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, instructions::user::EnableUserHighLeverageModeBumps>>::try_accounts::__Args;
        scope 2 {
            debug sub_account_id => _7;
            let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _20;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                scope 12 {
                    debug user => _35;
                    let _50: anchor_lang::prelude::Signer<'_>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::Signer<'_>;
                    scope 17 {
                        debug authority => _50;
                        let _65: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                        scope 22 {
                            debug high_leverage_mode_config => _65;
                            let _98: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _101: bool;
                            scope 27 {
                                debug residual => _98;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => _101;
                                scope 30 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, EnableUserHighLeverageModeBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
        _10 = std::result::Result::<<instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, EnableUserHighLeverageModeBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18}>(move _11, move _14) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, EnableUserHighLeverageModeBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::user::EnableUserHighLeverageMode<'info> as anchor_lang::Accounts<'info, instructions::user::EnableUserHighLeverageModeBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, EnableUserHighLeverageModeBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb54;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
        _22 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18}>(move _23, move _29) -> [return: bb9, unwind: bb57];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb57];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _20 = move _34;
        StorageDead(_34);
        _120 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, EnableUserHighLeverageModeBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind: bb56];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb64];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _140 = discriminant(_21);
        StorageDead(_21);
        goto -> bb53;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18}>(move _38, move _44) -> [return: bb15, unwind: bb56];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb56];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _35 = move _49;
        StorageDead(_49);
        _122 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, EnableUserHighLeverageModeBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind: bb56];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb63];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _138 = discriminant(_36);
        StorageDead(_36);
        goto -> bb52;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
        _52 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18}>(move _53, move _59) -> [return: bb21, unwind: bb56];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb56];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _50 = move _64;
        StorageDead(_64);
        _124 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig> as anchor_lang::Accounts<'_, EnableUserHighLeverageModeBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb56];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb62];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _136 = discriminant(_51);
        StorageDead(_51);
        goto -> bb51;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4564:10: 4564:18}>(move _68, move _74) -> [return: bb27, unwind: bb56];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb56];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _65 = move _79;
        StorageDead(_79);
        _126 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_35;
        _83 = &(*_84);
        _82 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _83) -> [return: bb32, unwind: bb56];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _134 = discriminant(_66);
        StorageDead(_66);
        goto -> bb50;
    }

    bb32: {
        StorageDead(_83);
        _81 = ((*_82).6: bool);
        switchInt(move _81) -> [0: bb33, otherwise: bb36];
    }

    bb33: {
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = ConstraintMut;
        _87 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _88) -> [return: bb34, unwind: bb56];
    }

    bb34: {
        StorageDead(_88);
        _86 = anchor_lang::error::Error::with_account_name::<&str>(move _87, const "user") -> [return: bb35, unwind: bb56];
    }

    bb35: {
        StorageDead(_87);
        _0 = std::result::Result::<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error>::Err(move _86);
        StorageDead(_86);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb50;
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_82);
        _80 = const ();
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_35;
        _93 = &(*_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_50;
        _95 = &(*_96);
        _92 = constraints::can_sign_for_user(move _93, move _95) -> [return: bb37, unwind: bb56];
    }

    bb37: {
        StorageDead(_95);
        StorageDead(_93);
        _91 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _92) -> [return: bb38, unwind: bb56];
    }

    bb38: {
        StorageDead(_92);
        _97 = discriminant(_91);
        switchInt(move _97) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_101);
        _101 = ((_91 as Continue).0: bool);
        _90 = _101;
        StorageDead(_101);
        switchInt(move _90) -> [0: bb59, otherwise: bb58];
    }

    bb40: {
        StorageLive(_98);
        _98 = move ((_91 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _100) -> [return: bb41, unwind: bb60];
    }

    bb41: {
        StorageDead(_100);
        StorageDead(_98);
        _132 = discriminant(_91);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_91);
        goto -> bb49;
    }

    bb42: {
        StorageDead(_105);
        _103 = anchor_lang::error::Error::with_account_name::<&str>(move _104, const "user") -> [return: bb43, unwind: bb56];
    }

    bb43: {
        StorageDead(_104);
        _0 = std::result::Result::<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error>::Err(move _103);
        StorageDead(_103);
        goto -> bb49;
    }

    bb44: {
        StorageDead(_109);
        _107 = ((*_108).6: bool);
        switchInt(move _107) -> [0: bb45, otherwise: bb48];
    }

    bb45: {
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = ConstraintMut;
        _113 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _114) -> [return: bb46, unwind: bb56];
    }

    bb46: {
        StorageDead(_114);
        _112 = anchor_lang::error::Error::with_account_name::<&str>(move _113, const "high_leverage_mode_config") -> [return: bb47, unwind: bb56];
    }

    bb47: {
        StorageDead(_113);
        _0 = std::result::Result::<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error>::Err(move _112);
        StorageDead(_112);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb50;
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_108);
        _106 = const ();
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_115);
        StorageLive(_116);
        _116 = move _20;
        StorageLive(_117);
        _117 = move _35;
        StorageLive(_118);
        _118 = move _50;
        StorageLive(_119);
        _119 = move _65;
        _115 = instructions::user::EnableUserHighLeverageMode::<'_> { state: move _116, user: move _117, authority: move _118, high_leverage_mode_config: move _119 };
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        _0 = std::result::Result::<instructions::user::EnableUserHighLeverageMode<'_>, anchor_lang::error::Error>::Ok(move _115);
        StorageDead(_115);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb55;
    }

    bb49: {
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_65);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_50);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_35);
        drop(_20) -> [return: bb53, unwind: bb57];
    }

    bb53: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_6);
        goto -> bb55;
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_20) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58: {
        _128 = discriminant(_91);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_91);
        _89 = const ();
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_65;
        _109 = &(*_110);
        _108 = <anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _109) -> [return: bb44, unwind: bb56];
    }

    bb59: {
        _130 = discriminant(_91);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_91);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = ConstraintRaw;
        _104 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _105) -> [return: bb42, unwind: bb56];
    }

    bb60 (cleanup): {
        _142 = discriminant(_91);
        goto -> bb56;
    }

    bb61 (cleanup): {
        _143 = discriminant(_66);
        goto -> bb56;
    }

    bb62 (cleanup): {
        _144 = discriminant(_51);
        goto -> bb56;
    }

    bb63 (cleanup): {
        _145 = discriminant(_36);
        goto -> bb56;
    }

    bb64 (cleanup): {
        _146 = discriminant(_21);
        goto -> bb57;
    }
}
