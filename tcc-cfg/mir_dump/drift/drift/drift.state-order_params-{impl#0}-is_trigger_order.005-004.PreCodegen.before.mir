// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::is_trigger_order` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::is_trigger_order(_1: &order_params::OrderParams) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: &state::user::OrderType;
    let mut _4: &state::user::OrderType;
    let _5: state::user::OrderType;
    let mut _6: &state::user::OrderType;
    let mut _7: &state::user::OrderType;
    let _8: state::user::OrderType;
    let mut _9: &state::user::OrderType;
    let mut _10: &state::user::OrderType;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &((*_1).0: state::user::OrderType);
        StorageLive(_4);
        _10 = const _;
        _4 = &(*_10);
        _2 = <state::user::OrderType as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_3);
        _0 = const true;
        goto -> bb5;
    }

    bb3: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_6);
        _6 = &((*_1).0: state::user::OrderType);
        StorageLive(_7);
        _9 = const _;
        _7 = &(*_9);
        _0 = <state::user::OrderType as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_2);
        return;
    }
}
