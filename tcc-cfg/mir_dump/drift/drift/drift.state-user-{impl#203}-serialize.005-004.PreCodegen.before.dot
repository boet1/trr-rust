digraph Mir_0_18880 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;FuelOverflowStatus as BorshSerialize&gt;::serialize(_1: &amp;ReErased state::user::FuelOverflowStatus, _2: &amp;ReErased mut W/#0) -&gt; std::result::Result&lt;(), std::io::Error&gt;<br align="left"/>let _3: u8;<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;, ()&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(), std::io::Error&gt;;<br align="left"/>let mut _7: &amp;ReErased mut W/#0;<br align="left"/>let mut _8: &amp;ReErased [u8];<br align="left"/>let mut _9: &amp;ReErased [u8; 1_usize];<br align="left"/>let _10: &amp;ReErased [u8; 1_usize];<br align="left"/>let _11: [u8; 1_usize];<br align="left"/>let mut _12: u8;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let _17: ();<br align="left"/>let _18: ();<br align="left"/>let mut _19: ();<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug writer =&gt; _2;<br align="left"/>debug variant_idx =&gt; _3;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>>;
    bb0__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = const 0_u8<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;mut (*_2)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _3<br/></td></tr><tr><td align="left">_11 = core::num::&lt;impl u8&gt;::to_le_bytes(move _12)</td></tr></table>>];
    bb1__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_10 = &amp;_11<br/>_9 = &amp;(*_10)<br/>_8 = move _9 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_6 = &lt;W as std::io::Write&gt;::write_all(move _7, move _8)</td></tr></table>>];
    bb2__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(), std::io::Error&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_13 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb4__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_5 as Continue).0: ())<br/>_4 = _17<br/>StorageDead(_17)<br/>_20 = discriminant(_5)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_18)<br/>_18 = const ()<br/>StorageDead(_18)<br/>StorageLive(_19)<br/>_19 = ()<br/>_0 = std::result::Result::&lt;(), std::io::Error&gt;::Ok(move _19)<br/>StorageDead(_19)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;)<br/>StorageLive(_16)<br/>_16 = move _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), std::io::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, std::io::Error&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb7__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>_22 = discriminant(_5)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_18880 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_24 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_18880 -> bb1__0_18880 [label="return"];
    bb1__0_18880 -> bb2__0_18880 [label="return"];
    bb2__0_18880 -> bb3__0_18880 [label="return"];
    bb2__0_18880 -> bb9__0_18880 [label="unwind"];
    bb3__0_18880 -> bb4__0_18880 [label="0"];
    bb3__0_18880 -> bb6__0_18880 [label="1"];
    bb3__0_18880 -> bb5__0_18880 [label="otherwise"];
    bb4__0_18880 -> bb8__0_18880 [label=""];
    bb6__0_18880 -> bb7__0_18880 [label="return"];
    bb6__0_18880 -> bb10__0_18880 [label="unwind"];
    bb7__0_18880 -> bb8__0_18880 [label=""];
    bb10__0_18880 -> bb9__0_18880 [label=""];
}
