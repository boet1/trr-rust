// MIR for `get_high_leverage_mode_config` after PreCodegen

fn get_high_leverage_mode_config(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> {
    debug account_info_iter => _1;
    let mut _0: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>, error::ErrorCode>;
    let _2: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _3: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: !;
    let mut _8: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _11: std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _12: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _20: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _21: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _22: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: {closure@programs/drift/src/instructions/optional_accounts.rs:253:18: 253:21};
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: ();
    let mut _30: bool;
    let mut _31: usize;
    let mut _32: &[u8];
    let _33: &&mut [u8];
    let mut _34: &std::cell::Ref<'_, &mut [u8]>;
    let mut _35: !;
    let mut _36: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _41: &[u8];
    let mut _42: &[u8];
    let _43: &&mut [u8];
    let mut _44: &std::cell::Ref<'_, &mut [u8]>;
    let mut _45: std::ops::Range<usize>;
    let mut _46: usize;
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: (usize, bool);
    let mut _50: &[u8];
    let _51: ();
    let mut _52: bool;
    let mut _53: &&[u8; 8];
    let mut _54: &&[u8; 8];
    let _55: &[u8; 8];
    let mut _56: !;
    let mut _57: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _60: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _61: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _62: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _70: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, error::ErrorCode>;
    let mut _71: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _72: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _73: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, error::ErrorCode>;
    let mut _74: error::ErrorCode;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _81: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: &mut [u8];
    let mut _84: &mut [u8];
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    scope 1 {
        debug high_leverage_mode_config_account_info => _2;
        let _9: &&anchor_lang::prelude::AccountInfo<'_>;
        let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _17: &&anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug high_leverage_mode_config_account_info => _9;
            let _18: std::cell::Ref<'_, &mut [u8]>;
            let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _28: std::cell::Ref<'_, &mut [u8]>;
            scope 7 {
                debug data => _18;
                let _37: [u8; 8];
                scope 12 {
                    debug high_leverage_mode_config_discriminator => _37;
                    let _38: &[u8; 8];
                    let _39: usize;
                    scope 13 {
                        debug account_discriminator => _38;
                        let _58: &anchor_lang::prelude::AccountInfo<'_>;
                        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _67: &anchor_lang::prelude::AccountInfo<'_>;
                        scope 18 {
                            debug high_leverage_mode_config_account_info => _58;
                            let _68: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                            let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _79: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                            scope 23 {
                                debug high_leverage_mode_config => _68;
                            }
                            scope 24 {
                                debug residual => _76;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _79;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _64;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _67;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug offset => _39;
                        let _40: &[u8];
                        scope 15 {
                            debug slice => _40;
                            scope 16 {
                                scope 17 {
                                }
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _25;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _28;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _14;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _17;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &mut (*_1);
        _2 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = Option::<&&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = Option::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>::None;
        _0 = std::result::Result::<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb47;
    }

    bb4: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _2;
        _11 = <Option<&&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_12);
        _10 = <std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_17);
        _17 = ((_10 as Continue).0: &&anchor_lang::prelude::AccountInfo<'_>);
        _9 = _17;
        StorageDead(_17);
        StorageDead(_10);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _82 = deref_copy (*_9);
        _22 = &(*_82);
        _21 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _22) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_14);
        _14 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb46;
    }

    bb11: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/instructions/optional_accounts.rs:253:18: 253:21};
        _20 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/instructions/optional_accounts.rs:253:18: 253:21}>(move _21, move _23) -> [return: bb12, unwind: bb50];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _19 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _20) -> [return: bb13, unwind: bb50];
    }

    bb13: {
        StorageDead(_20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb8];
    }

    bb14: {
        StorageLive(_28);
        _28 = move ((_19 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _18 = move _28;
        StorageDead(_28);
        _87 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_18;
        _33 = <Ref<'_, &mut [u8]> as Deref>::deref(move _34) -> [return: bb17, unwind: bb49];
    }

    bb15: {
        StorageLive(_25);
        _25 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_25);
        _85 = discriminant(_19);
        StorageDead(_19);
        goto -> bb45;
    }

    bb17: {
        _83 = deref_copy (*_33);
        _32 = &(*_83);
        StorageDead(_34);
        _31 = core::slice::<impl [u8]>::len(move _32) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        StorageDead(_32);
        _30 = Lt(move _31, const _);
        switchInt(move _30) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_36);
        _36 = Option::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>::None;
        _0 = std::result::Result::<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb44;
    }

    bb20: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_37);
        _37 = <HighLeverageModeConfig as anchor_lang::Discriminator>::discriminator() -> [return: bb21, unwind: bb49];
    }

    bb21: {
        StorageLive(_38);
        StorageLive(_39);
        _39 = const 0_usize;
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_18;
        _43 = <Ref<'_, &mut [u8]> as Deref>::deref(move _44) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        _84 = deref_copy (*_43);
        _42 = &(*_84);
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _39;
        StorageLive(_47);
        StorageLive(_48);
        _48 = _39;
        _49 = CheckedAdd(_48, const 8_usize);
        assert(!move (_49.1: bool), "attempt to compute `{} + {}`, which would overflow", move _48, const 8_usize) -> [success: bb23, unwind: bb49];
    }

    bb23: {
        _47 = move (_49.0: usize);
        StorageDead(_48);
        _45 = std::ops::Range::<usize> { start: move _46, end: move _47 };
        StorageDead(_47);
        StorageDead(_46);
        _41 = <[u8] as Index<std::ops::Range<usize>>>::index(move _42, move _45) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_42);
        _40 = &(*_41);
        StorageLive(_50);
        _50 = &(*_40);
        _38 = get_high_leverage_mode_config::as_array::<u8>(move _50) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_38;
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_37;
        _54 = &_55;
        _52 = <&[u8; 8] as PartialEq>::ne(move _53, move _54) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        switchInt(move _52) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_57);
        _57 = Option::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>::None;
        _0 = std::result::Result::<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode>::Ok(move _57);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb43;
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut (*_1);
        _61 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _62) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        StorageDead(_62);
        _60 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _61) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        StorageDead(_61);
        _59 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _60) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        StorageDead(_60);
        _63 = discriminant(_59);
        switchInt(move _63) -> [0: bb32, 1: bb33, otherwise: bb8];
    }

    bb32: {
        StorageLive(_67);
        _67 = ((_59 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _58 = _67;
        StorageDead(_67);
        StorageDead(_59);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(*_58);
        _71 = anchor_lang::prelude::AccountLoader::<'_, HighLeverageModeConfig>::try_from(move _72) -> [return: bb35, unwind: bb49];
    }

    bb33: {
        StorageLive(_64);
        _64 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb34, unwind: bb49];
    }

    bb34: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_59);
        goto -> bb42;
    }

    bb35: {
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = error::ErrorCode::CouldNotDeserializeHighLeverageModeConfig;
        _73 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>, error::ErrorCode>::Err(move _74);
        StorageDead(_74);
        _70 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _71, move _73) -> [return: bb36, unwind: bb49];
    }

    bb36: {
        StorageDead(_73);
        StorageDead(_71);
        _69 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>, error::ErrorCode> as Try>::branch(move _70) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        StorageDead(_70);
        _75 = discriminant(_69);
        switchInt(move _75) -> [0: bb38, 1: bb39, otherwise: bb8];
    }

    bb38: {
        StorageLive(_79);
        _79 = move ((_69 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _68 = move _79;
        StorageDead(_79);
        StorageDead(_69);
        StorageLive(_80);
        StorageLive(_81);
        _81 = move _68;
        _80 = Option::<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>::Some(move _81);
        StorageDead(_81);
        _0 = std::result::Result::<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode>::Ok(move _80);
        StorageDead(_80);
        StorageDead(_68);
        StorageDead(_58);
        StorageDead(_38);
        StorageDead(_37);
        drop(_18) -> [return: bb41, unwind: bb50];
    }

    bb39: {
        StorageLive(_76);
        _76 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_2);
        goto -> bb48;
    }

    bb42: {
        StorageDead(_58);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb44;
    }

    bb44: {
        drop(_18) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        StorageDead(_18);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_9);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_2);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_18) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        _89 = discriminant(_19);
        goto -> bb50;
    }
}
