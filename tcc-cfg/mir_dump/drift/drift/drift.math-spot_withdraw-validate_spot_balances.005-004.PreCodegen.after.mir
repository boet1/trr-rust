// MIR for `validate_spot_balances` after PreCodegen

fn validate_spot_balances(_1: &SpotMarket) -> std::result::Result<i64, error::ErrorCode> {
    debug spot_market => _1;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _2: u64;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _4: std::result::Result<u64, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: &state::spot_market::SpotMarket;
    let mut _10: &state::spot_market::SpotBalanceType;
    let _11: &state::spot_market::SpotBalanceType;
    let _12: state::spot_market::SpotBalanceType;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u128;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _25: std::result::Result<u64, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u128;
    let mut _30: &state::spot_market::SpotMarket;
    let mut _31: &state::spot_market::SpotBalanceType;
    let _32: &state::spot_market::SpotBalanceType;
    let _33: state::spot_market::SpotBalanceType;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _49: std::result::Result<u128, error::ErrorCode>;
    let mut _50: u128;
    let mut _51: &state::spot_market::SpotMarket;
    let mut _52: &state::spot_market::SpotBalanceType;
    let _53: &state::spot_market::SpotBalanceType;
    let _54: state::spot_market::SpotBalanceType;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _67: std::result::Result<i64, error::ErrorCode>;
    let mut _68: i64;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _70: std::result::Result<i64, error::ErrorCode>;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: i64;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _79: std::result::Result<i64, error::ErrorCode>;
    let mut _80: u64;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _93: std::result::Result<(), error::ErrorCode>;
    let mut _94: bool;
    let mut _95: u64;
    let mut _96: u64;
    let mut _97: ();
    let _99: ();
    let mut _100: &str;
    let _101: &str;
    let mut _102: &std::string::String;
    let _103: &std::string::String;
    let _104: std::string::String;
    let mut _106: std::fmt::Arguments<'_>;
    let mut _107: &[&str];
    let mut _108: &[&str; 2];
    let _109: &[&str; 2];
    let _110: [&str; 2];
    let mut _111: &[core::fmt::rt::Argument<'_>];
    let mut _112: &[core::fmt::rt::Argument<'_>; 1];
    let _113: &[core::fmt::rt::Argument<'_>; 1];
    let _114: [core::fmt::rt::Argument<'_>; 1];
    let mut _115: core::fmt::rt::Argument<'_>;
    let mut _116: &error::ErrorCode;
    let _117: &error::ErrorCode;
    let _118: ();
    let mut _119: &str;
    let _120: &str;
    let mut _121: &std::string::String;
    let _122: &std::string::String;
    let _123: std::string::String;
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let mut _127: &[&str; 5];
    let _128: &[&str; 5];
    let _129: [&str; 5];
    let mut _130: &[core::fmt::rt::Argument<'_>];
    let mut _131: &[core::fmt::rt::Argument<'_>; 4];
    let _132: &[core::fmt::rt::Argument<'_>; 4];
    let _133: [core::fmt::rt::Argument<'_>; 4];
    let mut _134: core::fmt::rt::Argument<'_>;
    let mut _135: &u64;
    let _136: &u64;
    let mut _137: core::fmt::rt::Argument<'_>;
    let mut _138: &u64;
    let _139: &u64;
    let mut _140: core::fmt::rt::Argument<'_>;
    let mut _141: &i64;
    let _142: &i64;
    let mut _143: core::fmt::rt::Argument<'_>;
    let mut _144: &u128;
    let _145: &u128;
    let mut _146: error::ErrorCode;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: i64;
    let mut _157: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug depositors_amount => _2;
        let _23: u64;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u64;
        let mut _156: &state::spot_market::SpotBalanceType;
        scope 10 {
            debug borrowers_amount => _23;
            let _44: u64;
            let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _59: u128;
            let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _64: u64;
            let mut _155: &state::spot_market::SpotBalanceType;
            scope 19 {
                debug revenue_amount => _44;
                let _65: i64;
                let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _76: i64;
                let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _85: i64;
                let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _90: i64;
                scope 28 {
                    debug depositors_claim => _65;
                    let _98: error::ErrorCode;
                    let _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _151: ();
                    scope 41 {
                        debug error_code => _98;
                        let _105: std::string::String;
                        let _124: std::string::String;
                        let mut _153: &[&str; 5];
                        let mut _154: &[&str; 2];
                        scope 42 {
                            debug res => _105;
                        }
                        scope 43 {
                            debug res => _124;
                        }
                    }
                    scope 44 {
                        debug residual => _148;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug val => _151;
                        scope 47 {
                        }
                    }
                }
                scope 29 {
                    debug residual => _73;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _76;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _82;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _85;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _87;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _90;
                    scope 40 {
                    }
                }
            }
            scope 20 {
                debug residual => _56;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _59;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _61;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _64;
                scope 27 {
                }
            }
        }
        scope 11 {
            debug residual => _35;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _38;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _40;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _43;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).11: u128);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        StorageLive(_11);
        _157 = const _;
        _11 = &(*_157);
        _10 = &(*_11);
        _7 = get_token_amount(move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _13 = discriminant(_6);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_6 as Continue).0: u128);
        _5 = _17;
        StorageDead(_17);
        _4 = <u128 as Cast>::cast::<u64>(move _5) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb76;
    }

    bb7: {
        StorageDead(_5);
        _3 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _4) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_4);
        _18 = discriminant(_3);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = ((_3 as Continue).0: u64);
        _2 = _22;
        StorageDead(_22);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_3);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).12: u128);
        StorageLive(_30);
        _30 = &(*_1);
        StorageLive(_31);
        StorageLive(_32);
        _156 = const _;
        _32 = &(*_156);
        _31 = &(*_32);
        _28 = get_token_amount(move _29, move _30, move _31) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb76;
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _34 = discriminant(_27);
        switchInt(move _34) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_38);
        _38 = ((_27 as Continue).0: u128);
        _26 = _38;
        StorageDead(_38);
        _25 = <u128 as Cast>::cast::<u64>(move _26) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb74;
    }

    bb17: {
        StorageDead(_26);
        _24 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_25);
        _39 = discriminant(_24);
        switchInt(move _39) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_24 as Continue).0: u64);
        _23 = _43;
        StorageDead(_43);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_24);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = (((*_1).7: state::perp_market::PoolBalance).0: u128);
        StorageLive(_51);
        _51 = &(*_1);
        StorageLive(_52);
        StorageLive(_53);
        _155 = const _;
        _53 = &(*_155);
        _52 = &(*_53);
        _49 = get_token_amount(move _50, move _51, move _52) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_40);
        _40 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb74;
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_49);
        _55 = discriminant(_48);
        switchInt(move _55) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_59);
        _59 = ((_48 as Continue).0: u128);
        _47 = _59;
        StorageDead(_59);
        _46 = <u128 as Cast>::cast::<u64>(move _47) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb72;
    }

    bb27: {
        StorageDead(_47);
        _45 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_46);
        _60 = discriminant(_45);
        switchInt(move _60) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_64);
        _64 = ((_45 as Continue).0: u64);
        _44 = _64;
        StorageDead(_64);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_45);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _2;
        _70 = <u64 as Cast>::cast::<i64>(move _71) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb72;
    }

    bb32: {
        StorageDead(_71);
        _69 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _70) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_70);
        _72 = discriminant(_69);
        switchInt(move _72) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_76);
        _76 = ((_69 as Continue).0: i64);
        _68 = _76;
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _23;
        _79 = <u64 as Cast>::cast::<i64>(move _80) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_73);
        _73 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb70;
    }

    bb37: {
        StorageDead(_80);
        _78 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _79) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_79);
        _81 = discriminant(_78);
        switchInt(move _81) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_85);
        _85 = ((_78 as Continue).0: i64);
        _77 = _85;
        StorageDead(_85);
        _67 = <i64 as SafeMath>::safe_sub(move _68, move _77) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_82);
        _82 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_77);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb69;
    }

    bb42: {
        StorageDead(_77);
        StorageDead(_68);
        _66 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_67);
        _86 = discriminant(_66);
        switchInt(move _86) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_90);
        _90 = ((_66 as Continue).0: i64);
        _65 = _90;
        StorageDead(_90);
        StorageDead(_78);
        StorageDead(_69);
        StorageDead(_66);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _44;
        StorageLive(_96);
        _96 = _2;
        _94 = Le(move _95, move _96);
        switchInt(move _94) -> [0: bb48, otherwise: bb47];
    }

    bb45: {
        StorageLive(_87);
        _87 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb69;
    }

    bb47: {
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_97);
        _97 = ();
        _93 = std::result::Result::<(), error::ErrorCode>::Ok(move _97);
        StorageDead(_97);
        goto -> bb64;
    }

    bb48: {
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_98);
        _98 = error::ErrorCode::SpotMarketVaultInvariantViolated;
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _154 = const _;
        _109 = &(*_154);
        _108 = &(*_109);
        _107 = move _108 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_98;
        _116 = &(*_117);
        _115 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _116) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_116);
        _114 = [move _115];
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = move _112 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_112);
        _106 = Arguments::<'_>::new_v1(move _107, move _111) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_111);
        StorageDead(_107);
        _105 = format(move _106) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_106);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_109);
        _104 = move _105;
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = <String as Deref>::deref(move _102) -> [return: bb52, unwind: bb80];
    }

    bb52: {
        _100 = &(*_101);
        StorageDead(_102);
        _99 = solana_program::log::sol_log(move _100) -> [return: bb53, unwind: bb80];
    }

    bb53: {
        StorageDead(_100);
        drop(_104) -> [return: bb54, unwind: bb81];
    }

    bb54: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _153 = const _;
        _128 = &(*_153);
        _127 = &(*_128);
        _126 = move _127 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_44;
        _135 = &(*_136);
        _134 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _135) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_135);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_2;
        _138 = &(*_139);
        _137 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _138) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_138);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &_65;
        _141 = &(*_142);
        _140 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _141) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &((*_1).11: u128);
        _144 = &(*_145);
        _143 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _144) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_144);
        _133 = [move _134, move _137, move _140, move _143];
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = move _131 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_131);
        _125 = Arguments::<'_>::new_v1(move _126, move _130) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_130);
        StorageDead(_126);
        _124 = format(move _125) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_125);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        _123 = move _124;
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = <String as Deref>::deref(move _121) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        _119 = &(*_120);
        StorageDead(_121);
        _118 = solana_program::log::sol_log(move _119) -> [return: bb62, unwind: bb79];
    }

    bb62: {
        StorageDead(_119);
        drop(_123) -> [return: bb63, unwind: bb81];
    }

    bb63: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageLive(_146);
        _146 = _98;
        _93 = std::result::Result::<(), error::ErrorCode>::Err(move _146);
        StorageDead(_146);
        StorageDead(_98);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_94);
        _92 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _93) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_93);
        _147 = discriminant(_92);
        switchInt(move _147) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_151);
        _151 = ((_92 as Continue).0: ());
        _91 = _151;
        StorageDead(_151);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_152);
        _152 = _65;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _152);
        StorageDead(_152);
        StorageDead(_65);
        StorageDead(_44);
        StorageDead(_23);
        StorageDead(_2);
        goto -> bb78;
    }

    bb67: {
        StorageLive(_148);
        _148 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_150);
        _150 = _148;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _150) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb71;
    }

    bb69: {
        StorageDead(_78);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_69);
        StorageDead(_66);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_65);
        goto -> bb73;
    }

    bb72: {
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_44);
        goto -> bb75;
    }

    bb74: {
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_23);
        goto -> bb77;
    }

    bb76: {
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_2);
        goto -> bb78;
    }

    bb78: {
        return;
    }

    bb79 (cleanup): {
        drop(_123) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_104) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        resume;
    }
}
