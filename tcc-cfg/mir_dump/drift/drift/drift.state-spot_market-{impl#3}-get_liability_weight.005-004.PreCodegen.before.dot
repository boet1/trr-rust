digraph Mir_0_4082 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SpotMarket::get_liability_weight(_1: &amp;ReErased state::spot_market::SpotMarket, _2: u128, _3: &amp;ReErased math::margin::MarginRequirementType) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: u32;<br align="left"/>let _6: u128;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: (u128, bool);<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: bool;<br align="left"/>let _19: u32;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: u32;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _23: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _24: u32;<br align="left"/>let mut _25: u32;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u32;<br align="left"/>let mut _31: bool;<br align="left"/>let _32: u32;<br align="left"/>let mut _33: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _34: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _35: u128;<br align="left"/>let mut _36: u32;<br align="left"/>let mut _37: u32;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: u32;<br align="left"/>let _43: u32;<br align="left"/>let mut _44: u32;<br align="left"/>let mut _45: u32;<br align="left"/>let mut _46: u32;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug size =&gt; _2;<br align="left"/>debug margin_requirement_type =&gt; _3;<br align="left"/>debug size_precision =&gt; _4;<br align="left"/>debug size_in_amm_reserve_precision =&gt; _6;<br align="left"/>debug default_liability_weight =&gt; _19;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug size_based_liability_weight =&gt; _32;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>debug liability_weight =&gt; _43;<br align="left"/>>;
    bb0__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((*_1).41: u32)<br/></td></tr><tr><td align="left">_4 = core::num::&lt;impl u128&gt;::pow(const 10_u128, move _5)</td></tr></table>>];
    bb1__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _4<br/>_7 = Gt(move _8, const _)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _4<br/>_12 = Eq(const _, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _12, &quot;attempt to divide `{}` by zero&quot;, _11)</td></tr></table>>];
    bb3__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_10 = Div(move _11, const _)<br/>StorageDead(_11)<br/>_13 = Eq(_10, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _13, &quot;attempt to divide `{}` by zero&quot;, _9)</td></tr></table>>];
    bb4__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_6 = Div(move _9, move _10)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _2<br/>_16 = CheckedMul(_15, const _)<br/></td></tr><tr><td align="left">assert(!move (_16.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _15, const _)</td></tr></table>>];
    bb6__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_14 = move (_16.0: u128)<br/>StorageDead(_15)<br/>StorageLive(_17)<br/>_17 = _4<br/>_18 = Eq(_17, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _18, &quot;attempt to divide `{}` by zero&quot;, _14)</td></tr></table>>];
    bb7__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_6 = Div(move _14, move _17)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_19)<br/>_20 = discriminant((*_3))<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb9__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = ((*_1).34: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_19 = ((*_1).33: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = ((*_1).33: u32)<br/>StorageLive(_25)<br/>_25 = ((*_1).34: u32)<br/></td></tr><tr><td align="left">_23 = &lt;u32 as SafeMath&gt;::safe_add(move _24, move _25)</td></tr></table>>];
    bb13__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb14__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_26 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb15__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_22 as Continue).0: u32)<br/>_21 = _30<br/>StorageDead(_30)<br/>_31 = Eq(const 2_u32, const 0_u32)<br/></td></tr><tr><td align="left">assert(!move _31, &quot;attempt to divide `{}` by zero&quot;, _21)</td></tr></table>>];
    bb16__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb17__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_21)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_19 = Div(move _21, const 2_u32)<br/>StorageDead(_21)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _6<br/>StorageLive(_36)<br/>_36 = ((*_1).35: u32)<br/>StorageLive(_37)<br/>_37 = _19<br/></td></tr><tr><td align="left">_34 = calculate_size_premium_liability_weight(move _35, move _36, move _37, const _)</td></tr></table>>];
    bb20__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _34)</td></tr></table>>];
    bb21__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_38 = discriminant(_33)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb22__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_33 as Continue).0: u32)<br/>_32 = _42<br/>StorageDead(_42)<br/>StorageDead(_33)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _32<br/>StorageLive(_45)<br/>_45 = _19<br/></td></tr><tr><td align="left">_43 = &lt;u32 as Ord&gt;::max(move _44, move _45)</td></tr></table>>];
    bb23__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_33 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb24__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageLive(_46)<br/>_46 = _43<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _46)<br/>StorageDead(_46)<br/>StorageDead(_43)<br/>StorageDead(_32)<br/>StorageDead(_19)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_4082 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4082 -> bb1__0_4082 [label="return"];
    bb1__0_4082 -> bb5__0_4082 [label="0"];
    bb1__0_4082 -> bb2__0_4082 [label="otherwise"];
    bb2__0_4082 -> bb3__0_4082 [label="success"];
    bb3__0_4082 -> bb4__0_4082 [label="success"];
    bb4__0_4082 -> bb8__0_4082 [label=""];
    bb5__0_4082 -> bb6__0_4082 [label="success"];
    bb6__0_4082 -> bb7__0_4082 [label="success"];
    bb7__0_4082 -> bb8__0_4082 [label=""];
    bb8__0_4082 -> bb11__0_4082 [label="0"];
    bb8__0_4082 -> bb12__0_4082 [label="1"];
    bb8__0_4082 -> bb9__0_4082 [label="2"];
    bb8__0_4082 -> bb10__0_4082 [label="otherwise"];
    bb9__0_4082 -> bb19__0_4082 [label=""];
    bb11__0_4082 -> bb19__0_4082 [label=""];
    bb12__0_4082 -> bb13__0_4082 [label="return"];
    bb13__0_4082 -> bb14__0_4082 [label="return"];
    bb14__0_4082 -> bb15__0_4082 [label="0"];
    bb14__0_4082 -> bb16__0_4082 [label="1"];
    bb14__0_4082 -> bb10__0_4082 [label="otherwise"];
    bb15__0_4082 -> bb18__0_4082 [label="success"];
    bb16__0_4082 -> bb17__0_4082 [label="return"];
    bb17__0_4082 -> bb26__0_4082 [label=""];
    bb18__0_4082 -> bb19__0_4082 [label=""];
    bb19__0_4082 -> bb20__0_4082 [label="return"];
    bb20__0_4082 -> bb21__0_4082 [label="return"];
    bb21__0_4082 -> bb22__0_4082 [label="0"];
    bb21__0_4082 -> bb23__0_4082 [label="1"];
    bb21__0_4082 -> bb10__0_4082 [label="otherwise"];
    bb22__0_4082 -> bb25__0_4082 [label="return"];
    bb23__0_4082 -> bb24__0_4082 [label="return"];
    bb24__0_4082 -> bb26__0_4082 [label=""];
    bb25__0_4082 -> bb27__0_4082 [label=""];
    bb26__0_4082 -> bb27__0_4082 [label=""];
}
