// MIR for `state::state::<impl at programs/drift/src/state/state.rs:48:10: 48:18>::bitand` before PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:48:10: 48:18>::bitand(_1: state::state::ExchangeStatus, _2: state::state::ExchangeStatus) -> BitFlags<state::state::ExchangeStatus> {
    debug self => _1;
    debug other => _2;
    let mut _0: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: state::state::ExchangeStatus;
    let mut _6: usize;
    let mut _7: state::state::ExchangeStatus;
    scope 1 {
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = <state::state::ExchangeStatus as enumflags2::_internal::RawBitFlags>::bits(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = <state::state::ExchangeStatus as enumflags2::_internal::RawBitFlags>::bits(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _3 = BitAnd(move _4, move _6);
        StorageDead(_6);
        StorageDead(_4);
        _0 = BitFlags::<state::state::ExchangeStatus>::new(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_3);
        return;
    }
}
