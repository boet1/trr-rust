// MIR for `state::user::<impl at programs/drift/src/state/user.rs:940:30: 940:39>::eq` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:940:30: 940:39>::eq(_1: &PerpPosition, _2: &PerpPosition) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: i64;
    let mut _5: i64;
    let mut _6: bool;
    let mut _7: i64;
    let mut _8: i64;
    let mut _9: bool;
    let mut _10: i64;
    let mut _11: i64;
    let mut _12: bool;
    let mut _13: i64;
    let mut _14: i64;
    let mut _15: bool;
    let mut _16: i64;
    let mut _17: i64;
    let mut _18: bool;
    let mut _19: i64;
    let mut _20: i64;
    let mut _21: bool;
    let mut _22: i64;
    let mut _23: i64;
    let mut _24: bool;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: bool;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: bool;
    let mut _31: i64;
    let mut _32: i64;
    let mut _33: bool;
    let mut _34: i64;
    let mut _35: i64;
    let mut _36: bool;
    let mut _37: &[u8; 2];
    let mut _38: &[u8; 2];
    let mut _39: bool;
    let mut _40: u16;
    let mut _41: u16;
    let mut _42: bool;
    let mut _43: u16;
    let mut _44: u16;
    let mut _45: bool;
    let mut _46: u8;
    let mut _47: u8;
    let mut _48: i8;
    let mut _49: i8;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: i64);
        StorageLive(_5);
        _5 = ((*_2).0: i64);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb31, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: i64);
        StorageLive(_8);
        _8 = ((*_2).1: i64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb30, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: i64);
        StorageLive(_11);
        _11 = ((*_2).2: i64);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb29, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: i64);
        StorageLive(_14);
        _14 = ((*_2).3: i64);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb28, otherwise: bb4];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: i64);
        StorageLive(_17);
        _17 = ((*_2).4: i64);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb27, otherwise: bb5];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).5: i64);
        StorageLive(_20);
        _20 = ((*_2).5: i64);
        _18 = Eq(move _19, move _20);
        switchInt(move _18) -> [0: bb26, otherwise: bb6];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).6: i64);
        StorageLive(_23);
        _23 = ((*_2).6: i64);
        _21 = Eq(move _22, move _23);
        switchInt(move _21) -> [0: bb25, otherwise: bb7];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).7: i64);
        StorageLive(_26);
        _26 = ((*_2).7: i64);
        _24 = Eq(move _25, move _26);
        switchInt(move _24) -> [0: bb24, otherwise: bb8];
    }

    bb8: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_1).8: u64);
        StorageLive(_29);
        _29 = ((*_2).8: u64);
        _27 = Eq(move _28, move _29);
        switchInt(move _27) -> [0: bb23, otherwise: bb9];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).9: i64);
        StorageLive(_32);
        _32 = ((*_2).9: i64);
        _30 = Eq(move _31, move _32);
        switchInt(move _30) -> [0: bb22, otherwise: bb10];
    }

    bb10: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = ((*_1).10: i64);
        StorageLive(_35);
        _35 = ((*_2).10: i64);
        _33 = Eq(move _34, move _35);
        switchInt(move _33) -> [0: bb21, otherwise: bb11];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).11: [u8; 2]);
        StorageLive(_38);
        _38 = &((*_2).11: [u8; 2]);
        _36 = <[u8; 2] as PartialEq>::eq(move _37, move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _36) -> [0: bb20, otherwise: bb13];
    }

    bb13: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = ((*_1).12: u16);
        StorageLive(_41);
        _41 = ((*_2).12: u16);
        _39 = Eq(move _40, move _41);
        switchInt(move _39) -> [0: bb19, otherwise: bb14];
    }

    bb14: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_1).13: u16);
        StorageLive(_44);
        _44 = ((*_2).13: u16);
        _42 = Eq(move _43, move _44);
        switchInt(move _42) -> [0: bb18, otherwise: bb15];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        _46 = ((*_1).14: u8);
        StorageLive(_47);
        _47 = ((*_2).14: u8);
        _45 = Eq(move _46, move _47);
        switchInt(move _45) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_48);
        _48 = ((*_1).15: i8);
        StorageLive(_49);
        _49 = ((*_2).15: i8);
        _0 = Eq(move _48, move _49);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb33;
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb32;
    }

    bb18: {
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb32;
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb32;
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb32;
    }

    bb21: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb32;
    }

    bb22: {
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb32;
    }

    bb23: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb32;
    }

    bb24: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb32;
    }

    bb25: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb32;
    }

    bb26: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb32;
    }

    bb27: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb32;
    }

    bb28: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb32;
    }

    bb29: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb32;
    }

    bb31: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb32;
    }

    bb32: {
        _0 = const false;
        goto -> bb33;
    }

    bb33: {
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
