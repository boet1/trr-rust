digraph Mir_0_2386 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn is_user_being_liquidated(_1: &amp;ReErased state::user::User, _2: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _3: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _4: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _5: u32) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _6: state::margin_calculation::MarginCalculation;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::margin_calculation::MarginCalculation&gt;;<br align="left"/>let mut _8: std::result::Result&lt;state::margin_calculation::MarginCalculation, error::ErrorCode&gt;;<br align="left"/>let mut _9: &amp;ReErased state::user::User;<br align="left"/>let mut _10: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _11: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _12: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _13: state::margin_calculation::MarginContext;<br align="left"/>let mut _14: u32;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: state::margin_calculation::MarginCalculation;<br align="left"/>let _20: bool;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _23: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _24: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _29: bool;<br align="left"/>let mut _30: bool;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug market_map =&gt; _2;<br align="left"/>debug spot_market_map =&gt; _3;<br align="left"/>debug oracle_map =&gt; _4;<br align="left"/>debug liquidation_margin_buffer_ratio =&gt; _5;<br align="left"/>debug margin_calculation =&gt; _6;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug is_being_liquidated =&gt; _20;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>>;
    bb0__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/>StorageLive(_10)<br/>_10 = &amp;(*_2)<br/>StorageLive(_11)<br/>_11 = &amp;(*_3)<br/>StorageLive(_12)<br/>_12 = &amp;mut (*_4)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _5<br/></td></tr><tr><td align="left">_13 = MarginContext::liquidation(move _14)</td></tr></table>>];
    bb1__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_8 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _9, move _10, move _11, move _12, move _13)</td></tr></table>>];
    bb2__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;MarginCalculation, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb3__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_15 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_7 as Continue).0: state::margin_calculation::MarginCalculation)<br/>_6 = _19<br/>StorageDead(_19)<br/>StorageDead(_7)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_6<br/></td></tr><tr><td align="left">_23 = MarginCalculation::can_exit_liquidation(move _24)</td></tr></table>>];
    bb5__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb7__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb9__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_25 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb10__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_22 as Continue).0: bool)<br/>_21 = _29<br/>StorageDead(_29)<br/>_20 = Not(move _21)<br/>StorageDead(_21)<br/>StorageDead(_22)<br/>StorageLive(_30)<br/>_30 = _20<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _30)<br/>StorageDead(_30)<br/>StorageDead(_20)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_28)<br/>_28 = _26<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb12__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_21)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2386 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2386 -> bb1__0_2386 [label="return"];
    bb1__0_2386 -> bb2__0_2386 [label="return"];
    bb2__0_2386 -> bb3__0_2386 [label="return"];
    bb3__0_2386 -> bb4__0_2386 [label="0"];
    bb3__0_2386 -> bb6__0_2386 [label="1"];
    bb3__0_2386 -> bb5__0_2386 [label="otherwise"];
    bb4__0_2386 -> bb8__0_2386 [label="return"];
    bb6__0_2386 -> bb7__0_2386 [label="return"];
    bb7__0_2386 -> bb13__0_2386 [label=""];
    bb8__0_2386 -> bb9__0_2386 [label="return"];
    bb9__0_2386 -> bb10__0_2386 [label="0"];
    bb9__0_2386 -> bb11__0_2386 [label="1"];
    bb9__0_2386 -> bb5__0_2386 [label="otherwise"];
    bb10__0_2386 -> bb14__0_2386 [label=""];
    bb11__0_2386 -> bb12__0_2386 [label="return"];
    bb12__0_2386 -> bb13__0_2386 [label=""];
    bb13__0_2386 -> bb14__0_2386 [label=""];
}
