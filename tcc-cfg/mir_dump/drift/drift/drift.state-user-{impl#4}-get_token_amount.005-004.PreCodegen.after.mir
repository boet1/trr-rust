// MIR for `state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::get_token_amount` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::get_token_amount(_1: &SpotPosition, _2: &SpotMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let mut _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u64;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u128;
    let mut _12: &state::spot_market::SpotMarket;
    let mut _13: &state::spot_market::SpotBalanceType;
    let _14: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: u64);
        _5 = <u64 as Cast>::cast::<u128>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u128);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        _12 = &(*_2);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_1).5: state::spot_market::SpotBalanceType);
        _13 = &(*_14);
        _0 = get_token_amount(move _3, move _12, move _13) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_4);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
