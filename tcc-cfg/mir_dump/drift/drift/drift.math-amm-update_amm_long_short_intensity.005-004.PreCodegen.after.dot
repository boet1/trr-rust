digraph Mir_0_1804 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_amm_long_short_intensity(_1: &amp;ReErased mut state::perp_market::AMM, _2: i64, _3: u64, _4: controller::position::PositionDirection) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _5: i64;<br align="left"/>let mut _6: i64;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _9: i64;<br align="left"/>let mut _10: i64;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: i64;<br align="left"/>let _16: u64;<br align="left"/>let _17: u64;<br align="left"/>let mut _18: (u64, u64);<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _21: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _22: controller::position::PositionDirection;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _27: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: i64;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _38: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: i64;<br align="left"/>let mut _42: isize;<br align="left"/>let _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _44: !;<br align="left"/>let mut _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _46: u64;<br align="left"/>let mut _47: &amp;ReErased controller::position::PositionDirection;<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug now =&gt; _2;<br align="left"/>debug quote_asset_amount =&gt; _3;<br align="left"/>debug direction =&gt; _4;<br align="left"/>debug since_last =&gt; _5;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug long_quote_amount =&gt; _16;<br align="left"/>debug short_quote_amount =&gt; _17;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _43;<br align="left"/>debug val =&gt; _46;<br align="left"/>>;
    bb0__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/>StorageLive(_10)<br/>_10 = ((*_1).59: i64)<br/></td></tr><tr><td align="left">_8 = &lt;i64 as SafeMath&gt;::safe_sub(move _9, move _10)</td></tr></table>>];
    bb1__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb2__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_11 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_7 as Continue).0: i64)<br/>_6 = _15<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_5 = std::cmp::max::&lt;i64&gt;(const 1_i64, move _6)</td></tr></table>>];
    bb4__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_7)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;_4<br/>StorageLive(_21)<br/>_47 = const _<br/>_21 = &amp;(*_47)<br/></td></tr><tr><td align="left">_19 = &lt;controller::position::PositionDirection as PartialEq&gt;::eq(move _20, move _21)</td></tr></table>>];
    bb8__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb9__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageLive(_23)<br/>_23 = _3<br/>_18 = (move _23, const 0_u64)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageLive(_24)<br/>_24 = _3<br/>_18 = (const 0_u64, move _24)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_16)<br/>_16 = (_18.0: u64)<br/>StorageLive(_17)<br/>_17 = (_18.1: u64)<br/>StorageDead(_18)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = ((*_1).57: u64)<br/>StorageLive(_29)<br/>_29 = _16<br/>StorageLive(_30)<br/>_30 = _5<br/></td></tr><tr><td align="left">_27 = calculate_rolling_sum(move _28, move _29, move _30, const _)</td></tr></table>>];
    bb12__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb13__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_31 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb14__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_26 as Continue).0: u64)<br/>_25 = _35<br/>StorageDead(_35)<br/>((*_1).57: u64) = move _25<br/>StorageDead(_25)<br/>StorageDead(_26)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = ((*_1).58: u64)<br/>StorageLive(_40)<br/>_40 = _17<br/>StorageLive(_41)<br/>_41 = _5<br/></td></tr><tr><td align="left">_38 = calculate_rolling_sum(move _39, move _40, move _41, const _)</td></tr></table>>];
    bb15__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb16__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_25)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">_37 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _38)</td></tr></table>>];
    bb18__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_42 = discriminant(_37)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb19__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_37 as Continue).0: u64)<br/>_36 = _46<br/>StorageDead(_46)<br/>((*_1).58: u64) = move _36<br/>StorageDead(_36)<br/>StorageDead(_37)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_37 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_45)<br/>_45 = _43<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _45)</td></tr></table>>];
    bb21__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_43)<br/>StorageDead(_36)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1804 -> bb1__0_1804 [label="return"];
    bb1__0_1804 -> bb2__0_1804 [label="return"];
    bb2__0_1804 -> bb3__0_1804 [label="0"];
    bb2__0_1804 -> bb5__0_1804 [label="1"];
    bb2__0_1804 -> bb4__0_1804 [label="otherwise"];
    bb3__0_1804 -> bb7__0_1804 [label="return"];
    bb5__0_1804 -> bb6__0_1804 [label="return"];
    bb6__0_1804 -> bb23__0_1804 [label=""];
    bb7__0_1804 -> bb8__0_1804 [label="return"];
    bb8__0_1804 -> bb10__0_1804 [label="0"];
    bb8__0_1804 -> bb9__0_1804 [label="otherwise"];
    bb9__0_1804 -> bb11__0_1804 [label=""];
    bb10__0_1804 -> bb11__0_1804 [label=""];
    bb11__0_1804 -> bb12__0_1804 [label="return"];
    bb12__0_1804 -> bb13__0_1804 [label="return"];
    bb13__0_1804 -> bb14__0_1804 [label="0"];
    bb13__0_1804 -> bb15__0_1804 [label="1"];
    bb13__0_1804 -> bb4__0_1804 [label="otherwise"];
    bb14__0_1804 -> bb17__0_1804 [label="return"];
    bb15__0_1804 -> bb16__0_1804 [label="return"];
    bb16__0_1804 -> bb22__0_1804 [label=""];
    bb17__0_1804 -> bb18__0_1804 [label="return"];
    bb18__0_1804 -> bb19__0_1804 [label="0"];
    bb18__0_1804 -> bb20__0_1804 [label="1"];
    bb18__0_1804 -> bb4__0_1804 [label="otherwise"];
    bb19__0_1804 -> bb24__0_1804 [label=""];
    bb20__0_1804 -> bb21__0_1804 [label="return"];
    bb21__0_1804 -> bb22__0_1804 [label=""];
    bb22__0_1804 -> bb23__0_1804 [label=""];
    bb23__0_1804 -> bb24__0_1804 [label=""];
}
