// MIR for `paused_operations::<impl at programs/drift/src/state/paused_operations.rs:87:1: 87:28>::log_all_operations_paused` after PreCodegen

fn paused_operations::<impl at programs/drift/src/state/paused_operations.rs:87:1: 87:28>::log_all_operations_paused(_1: u8) -> () {
    debug current => _1;
    let mut _0: ();
    let mut _2: std::slice::Iter<'_, state::paused_operations::InsuranceFundOperation>;
    let mut _3: std::slice::Iter<'_, state::paused_operations::InsuranceFundOperation>;
    let mut _4: &[state::paused_operations::InsuranceFundOperation];
    let mut _5: &[state::paused_operations::InsuranceFundOperation; 4];
    let _6: [state::paused_operations::InsuranceFundOperation; 4];
    let mut _7: std::slice::Iter<'_, state::paused_operations::InsuranceFundOperation>;
    let mut _8: ();
    let _9: ();
    let mut _10: std::option::Option<&state::paused_operations::InsuranceFundOperation>;
    let mut _11: &mut std::slice::Iter<'_, state::paused_operations::InsuranceFundOperation>;
    let mut _12: &mut std::slice::Iter<'_, state::paused_operations::InsuranceFundOperation>;
    let mut _13: isize;
    let mut _14: !;
    let mut _16: bool;
    let mut _17: u8;
    let mut _18: state::paused_operations::InsuranceFundOperation;
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let _24: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 2];
    let _29: &[&str; 2];
    let _30: [&str; 2];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let mut _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &&state::paused_operations::InsuranceFundOperation;
    let _37: &&state::paused_operations::InsuranceFundOperation;
    let mut _39: &[state::paused_operations::InsuranceFundOperation; 4];
    scope 1 {
        debug iter => _7;
        let _15: &state::paused_operations::InsuranceFundOperation;
        scope 2 {
            debug operation => _15;
            let _25: std::string::String;
            let mut _38: &[&str; 2];
            scope 3 {
                debug res => _25;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _39 = const _;
        _5 = &(*_39);
        _4 = move _5 as &[state::paused_operations::InsuranceFundOperation] (PointerCoercion(Unsize));
        StorageDead(_5);
        _3 = core::slice::<impl [InsuranceFundOperation]>::iter(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _2 = <std::slice::Iter<'_, InsuranceFundOperation> as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_7);
        _7 = move _2;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _7;
        _11 = &mut (*_12);
        _10 = <std::slice::Iter<'_, InsuranceFundOperation> as Iterator>::next(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_10 as Some).0: &state::paused_operations::InsuranceFundOperation);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _1;
        StorageLive(_18);
        _18 = (*_15);
        _16 = InsuranceFundOperation::is_operation_paused(move _17, move _18) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_2);
        return;
    }

    bb8: {
        switchInt(move _16) -> [0: bb16, otherwise: bb9];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _38 = const _;
        _29 = &(*_38);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_15;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<&InsuranceFundOperation>(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        _34 = [move _35];
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = move _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_32);
        _26 = Arguments::<'_>::new_v1(move _27, move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_27);
        _25 = format(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        _24 = move _25;
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = <String as Deref>::deref(move _22) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        StorageDead(_20);
        drop(_24) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        _9 = const ();
        goto -> bb17;
    }

    bb16: {
        StorageDead(_18);
        StorageDead(_17);
        _9 = const ();
        goto -> bb17;
    }

    bb17: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb3;
    }

    bb18 (cleanup): {
        drop(_24) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}
