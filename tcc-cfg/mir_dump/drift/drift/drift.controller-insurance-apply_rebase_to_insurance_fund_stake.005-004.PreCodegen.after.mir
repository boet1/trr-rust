// MIR for `apply_rebase_to_insurance_fund_stake` after PreCodegen

fn apply_rebase_to_insurance_fund_stake(_1: &mut InsuranceFundStake, _2: &mut SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug insurance_fund_stake => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u128;
    let mut _6: u128;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: bool;
    let mut _11: u128;
    let mut _12: u128;
    let mut _13: ();
    let _14: error::ErrorCode;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 2];
    let _25: &[&str; 2];
    let _26: [&str; 2];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &error::ErrorCode;
    let _33: &error::ErrorCode;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: error::ErrorCode;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: ();
    let _43: u32;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _45: std::result::Result<u32, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: u128;
    let mut _48: u128;
    let mut _49: (u128, bool);
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: u32;
    let mut _56: u32;
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 3];
    let _67: &[&str; 3];
    let _68: [&str; 3];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 2];
    let _71: &[core::fmt::rt::Argument<'_>; 2];
    let _72: [core::fmt::rt::Argument<'_>; 2];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &u128;
    let _75: &u128;
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &u128;
    let _78: &u128;
    let mut _79: u128;
    let mut _81: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _84: std::result::Result<u128, error::ErrorCode>;
    let mut _85: u128;
    let mut _86: u128;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _92: ();
    let mut _93: &str;
    let _94: &str;
    let mut _95: &std::string::String;
    let _96: &std::string::String;
    let _97: std::string::String;
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str];
    let mut _101: &[&str; 2];
    let _102: &[&str; 2];
    let _103: [&str; 2];
    let mut _104: &[core::fmt::rt::Argument<'_>];
    let mut _105: &[core::fmt::rt::Argument<'_>; 1];
    let _106: &[core::fmt::rt::Argument<'_>; 1];
    let _107: [core::fmt::rt::Argument<'_>; 1];
    let mut _108: core::fmt::rt::Argument<'_>;
    let mut _109: &u128;
    let _110: &u128;
    let _111: ();
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _113: std::result::Result<(), error::ErrorCode>;
    let mut _114: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _115: u128;
    let mut _116: &state::spot_market::SpotMarket;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: u128;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _124: std::result::Result<u128, error::ErrorCode>;
    let mut _125: u128;
    let mut _126: u128;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: ();
    scope 1 {
        debug error_code => _14;
        let _21: std::string::String;
        let mut _135: &[&str; 2];
        scope 2 {
            debug res => _21;
        }
    }
    scope 3 {
        debug residual => _39;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _42;
        scope 6 {
        }
    }
    scope 7 {
        debug expo_diff => _43;
        let _55: u128;
        scope 12 {
            debug rebase_divisor => _55;
            let _63: std::string::String;
            let _80: u128;
            let mut _134: &[&str; 3];
            scope 13 {
                debug res => _63;
            }
            scope 14 {
                debug old_if_shares => _80;
                let _82: u128;
                let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _91: u128;
                scope 15 {
                    debug new_if_shares => _82;
                    let _98: std::string::String;
                    let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _121: ();
                    let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _131: u128;
                    let mut _133: &[&str; 2];
                    scope 20 {
                        debug res => _98;
                    }
                    scope 21 {
                        debug residual => _118;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _121;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug residual => _128;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _131;
                        scope 28 {
                        }
                    }
                }
                scope 16 {
                    debug residual => _88;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _91;
                    scope 19 {
                    }
                }
            }
        }
    }
    scope 8 {
        debug residual => _51;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _54;
        scope 11 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = (((*_2).9: state::spot_market::InsuranceFund).3: u128);
        StorageLive(_6);
        _6 = ((*_1).3: u128);
        _4 = Ne(move _5, move _6);
        switchInt(move _4) -> [0: bb53, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = (((*_2).9: state::spot_market::InsuranceFund).3: u128);
        StorageLive(_12);
        _12 = ((*_1).3: u128);
        _10 = Gt(move _11, move _12);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_13);
        _13 = ();
        _9 = std::result::Result::<(), error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        goto -> bb11;
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_14);
        _14 = error::ErrorCode::InvalidIFRebase;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _135 = const _;
        _25 = &(*_135);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_14;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _32) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_32);
        _30 = [move _31];
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        _22 = Arguments::<'_>::new_v1(move _23, move _27) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <String as Deref>::deref(move _18) -> [return: bb7, unwind: bb61];
    }

    bb7: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        StorageDead(_16);
        drop(_20) -> [return: bb9, unwind: bb62];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = const "Rebase expo out of bounds";
        _35 = &(*_36);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_37);
        _37 = _14;
        _9 = std::result::Result::<(), error::ErrorCode>::Err(move _37);
        StorageDead(_37);
        StorageDead(_14);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_9);
        _38 = discriminant(_8);
        switchInt(move _38) -> [0: bb13, 1: bb15, otherwise: bb14];
    }

    bb13: {
        StorageLive(_42);
        _42 = ((_8 as Continue).0: ());
        _7 = _42;
        StorageDead(_42);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = (((*_2).9: state::spot_market::InsuranceFund).3: u128);
        StorageLive(_48);
        _48 = ((*_1).3: u128);
        _49 = CheckedSub(_47, _48);
        assert(!move (_49.1: bool), "attempt to compute `{} - {}`, which would overflow", move _47, move _48) -> [success: bb17, unwind continue];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        StorageLive(_39);
        _39 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb57;
    }

    bb17: {
        _46 = move (_49.0: u128);
        StorageDead(_48);
        StorageDead(_47);
        _45 = <u128 as Cast>::cast::<u32>(move _46) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_46);
        _44 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_45);
        _50 = discriminant(_44);
        switchInt(move _50) -> [0: bb20, 1: bb21, otherwise: bb14];
    }

    bb20: {
        StorageLive(_54);
        _54 = ((_44 as Continue).0: u32);
        _43 = _54;
        StorageDead(_54);
        StorageDead(_44);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _43;
        _55 = core::num::<impl u128>::pow(const 10_u128, move _56) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_51);
        _51 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_44);
        goto -> bb56;
    }

    bb23: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _134 = const _;
        _67 = &(*_134);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &((*_1).3: u128);
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _74) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_74);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(((*_2).9: state::spot_market::InsuranceFund).3: u128);
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _77) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_77);
        _72 = [move _73, move _76];
        StorageDead(_76);
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb28, unwind: bb60];
    }

    bb28: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb29, unwind: bb60];
    }

    bb29: {
        StorageDead(_58);
        drop(_62) -> [return: bb30, unwind: bb62];
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_79);
        _79 = (((*_2).9: state::spot_market::InsuranceFund).3: u128);
        ((*_1).3: u128) = move _79;
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_1);
        _80 = InsuranceFundStake::unchecked_if_shares(move _81) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _80;
        StorageLive(_86);
        _86 = _55;
        _84 = <u128 as SafeMath>::safe_div(move _85, move _86) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_86);
        StorageDead(_85);
        _83 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _84) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_84);
        _87 = discriminant(_83);
        switchInt(move _87) -> [0: bb34, 1: bb35, otherwise: bb14];
    }

    bb34: {
        StorageLive(_91);
        _91 = ((_83 as Continue).0: u128);
        _82 = _91;
        StorageDead(_91);
        StorageDead(_83);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _133 = const _;
        _102 = &(*_133);
        _101 = &(*_102);
        _100 = move _101 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_82;
        _109 = &(*_110);
        _108 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _109) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_88);
        _88 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_83);
        goto -> bb55;
    }

    bb37: {
        StorageDead(_109);
        _107 = [move _108];
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = move _105 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_105);
        _99 = Arguments::<'_>::new_v1(move _100, move _104) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_100);
        _98 = format(move _99) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_99);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        _97 = move _98;
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = <String as Deref>::deref(move _95) -> [return: bb40, unwind: bb59];
    }

    bb40: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = solana_program::log::sol_log(move _93) -> [return: bb41, unwind: bb59];
    }

    bb41: {
        StorageDead(_93);
        drop(_97) -> [return: bb42, unwind: bb62];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut (*_1);
        StorageLive(_115);
        _115 = _82;
        StorageLive(_116);
        _116 = &(*_2);
        _113 = InsuranceFundStake::update_if_shares(move _114, move _115, move _116) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        _112 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _113) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_113);
        _117 = discriminant(_112);
        switchInt(move _117) -> [0: bb45, 1: bb46, otherwise: bb14];
    }

    bb45: {
        StorageLive(_121);
        _121 = ((_112 as Continue).0: ());
        _111 = _121;
        StorageDead(_121);
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = ((*_1).2: u128);
        StorageLive(_126);
        _126 = _55;
        _124 = <u128 as SafeMath>::safe_div(move _125, move _126) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_118);
        _118 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb55;
    }

    bb48: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _124) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_124);
        _127 = discriminant(_123);
        switchInt(move _127) -> [0: bb50, 1: bb51, otherwise: bb14];
    }

    bb50: {
        StorageLive(_131);
        _131 = ((_123 as Continue).0: u128);
        _122 = _131;
        StorageDead(_131);
        ((*_1).2: u128) = move _122;
        StorageDead(_122);
        StorageDead(_123);
        _3 = const ();
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_55);
        StorageDead(_43);
        goto -> bb54;
    }

    bb51: {
        StorageLive(_128);
        _128 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_123);
        goto -> bb55;
    }

    bb53: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        goto -> bb54;
    }

    bb54: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_132);
        _132 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _132);
        StorageDead(_132);
        goto -> bb58;
    }

    bb55: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_55);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_43);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_97) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_62) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_20) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        resume;
    }
}
