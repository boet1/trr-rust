digraph Mir_0_690 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_quote_break_even_amount(_1: &amp;ReErased mut state::user::PerpPosition, _2: &amp;ReErased mut state::perp_market::PerpMarket, _3: i64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: i64;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: i64;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: ();<br align="left"/>let mut _11: i64;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _13: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _14: i64;<br align="left"/>let mut _15: i64;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: i64;<br align="left"/>let _21: ();<br align="left"/>let mut _22: controller::position::PositionDirection;<br align="left"/>let mut _23: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: i128;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _27: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _28: i128;<br align="left"/>let mut _29: i128;<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _31: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _32: i64;<br align="left"/>let mut _33: isize;<br align="left"/>let _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _35: !;<br align="left"/>let mut _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _37: i128;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: i128;<br align="left"/>let mut _43: i128;<br align="left"/>let mut _44: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _45: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _46: i128;<br align="left"/>let mut _47: i128;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _49: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _50: i64;<br align="left"/>let mut _51: isize;<br align="left"/>let _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _55: i128;<br align="left"/>let mut _56: isize;<br align="left"/>let _57: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _58: !;<br align="left"/>let mut _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _60: i128;<br align="left"/>let mut _61: ();<br align="left"/>debug position =&gt; _1;<br align="left"/>debug market =&gt; _2;<br align="left"/>debug delta =&gt; _3;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug residual =&gt; _34;<br align="left"/>debug val =&gt; _37;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>debug residual =&gt; _52;<br align="left"/>debug val =&gt; _55;<br align="left"/>debug residual =&gt; _57;<br align="left"/>debug val =&gt; _60;<br align="left"/>>;
    bb0__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _3<br/>_5 = Eq(move _6, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_1).1: i64)<br/>_7 = Eq(move _8, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_10)<br/>_10 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _10)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_4 = const ()<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = ((*_1).3: i64)<br/>StorageLive(_15)<br/>_15 = _3<br/></td></tr><tr><td align="left">_13 = &lt;i64 as SafeMath&gt;::safe_add(move _14, move _15)</td></tr></table>>];
    bb5__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb6__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_16 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb7__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Continue).0: i64)<br/>_11 = _20<br/>StorageDead(_20)<br/>((*_1).3: i64) = move _11<br/>StorageDead(_11)<br/>StorageDead(_12)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;(*_1)<br/></td></tr><tr><td align="left">_22 = PerpPosition::get_direction(move _23)</td></tr></table>>];
    bb8__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb10__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_11)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_24 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb12__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = (((*_2).1: state::perp_market::AMM).22: i128)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = _3<br/></td></tr><tr><td align="left">_49 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _50)</td></tr></table>>];
    bb13__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = (((*_2).1: state::perp_market::AMM).21: i128)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _3<br/></td></tr><tr><td align="left">_31 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _32)</td></tr></table>>];
    bb14__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb15__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_33 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb16__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_30 as Continue).0: i128)<br/>_29 = _37<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_27 = &lt;i128 as SafeMath&gt;::safe_add(move _28, move _29)</td></tr></table>>];
    bb17__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_36)<br/>_36 = _34<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _36)</td></tr></table>>];
    bb18__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb20__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_38 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb21__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_26 as Continue).0: i128)<br/>_25 = _42<br/>StorageDead(_42)<br/>(((*_2).1: state::perp_market::AMM).21: i128) = move _25<br/>_21 = const ()<br/>StorageDead(_25)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb23__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb25__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_51 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _51)</td></tr></table>>];
    bb26__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_48 as Continue).0: i128)<br/>_47 = _55<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_45 = &lt;i128 as SafeMath&gt;::safe_add(move _46, move _47)</td></tr></table>>];
    bb27__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_54)<br/>_54 = _52<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _54)</td></tr></table>>];
    bb28__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_52)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_44 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _45)</td></tr></table>>];
    bb30__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>_56 = discriminant(_44)<br/></td></tr><tr><td align="left">switchInt(move _56)</td></tr></table>>];
    bb31__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = ((_44 as Continue).0: i128)<br/>_43 = _60<br/>StorageDead(_60)<br/>(((*_2).1: state::perp_market::AMM).22: i128) = move _43<br/>_21 = const ()<br/>StorageDead(_43)<br/>StorageDead(_48)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = ((_44 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_59)<br/>_59 = _57<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _59)</td></tr></table>>];
    bb33__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/>StorageLive(_61)<br/>_61 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _61)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_48)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_690 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_690 -> bb2__0_690 [label="0"];
    bb0__0_690 -> bb1__0_690 [label="otherwise"];
    bb1__0_690 -> bb3__0_690 [label=""];
    bb2__0_690 -> bb4__0_690 [label="0"];
    bb2__0_690 -> bb3__0_690 [label="otherwise"];
    bb3__0_690 -> bb38__0_690 [label=""];
    bb4__0_690 -> bb5__0_690 [label="return"];
    bb5__0_690 -> bb6__0_690 [label="return"];
    bb6__0_690 -> bb7__0_690 [label="0"];
    bb6__0_690 -> bb9__0_690 [label="1"];
    bb6__0_690 -> bb8__0_690 [label="otherwise"];
    bb7__0_690 -> bb11__0_690 [label="return"];
    bb9__0_690 -> bb10__0_690 [label="return"];
    bb10__0_690 -> bb38__0_690 [label=""];
    bb11__0_690 -> bb13__0_690 [label="0"];
    bb11__0_690 -> bb12__0_690 [label="1"];
    bb11__0_690 -> bb8__0_690 [label="otherwise"];
    bb12__0_690 -> bb24__0_690 [label="return"];
    bb13__0_690 -> bb14__0_690 [label="return"];
    bb14__0_690 -> bb15__0_690 [label="return"];
    bb15__0_690 -> bb16__0_690 [label="0"];
    bb15__0_690 -> bb17__0_690 [label="1"];
    bb15__0_690 -> bb8__0_690 [label="otherwise"];
    bb16__0_690 -> bb19__0_690 [label="return"];
    bb17__0_690 -> bb18__0_690 [label="return"];
    bb18__0_690 -> bb36__0_690 [label=""];
    bb19__0_690 -> bb20__0_690 [label="return"];
    bb20__0_690 -> bb21__0_690 [label="0"];
    bb20__0_690 -> bb22__0_690 [label="1"];
    bb20__0_690 -> bb8__0_690 [label="otherwise"];
    bb21__0_690 -> bb34__0_690 [label=""];
    bb22__0_690 -> bb23__0_690 [label="return"];
    bb23__0_690 -> bb36__0_690 [label=""];
    bb24__0_690 -> bb25__0_690 [label="return"];
    bb25__0_690 -> bb26__0_690 [label="0"];
    bb25__0_690 -> bb27__0_690 [label="1"];
    bb25__0_690 -> bb8__0_690 [label="otherwise"];
    bb26__0_690 -> bb29__0_690 [label="return"];
    bb27__0_690 -> bb28__0_690 [label="return"];
    bb28__0_690 -> bb35__0_690 [label=""];
    bb29__0_690 -> bb30__0_690 [label="return"];
    bb30__0_690 -> bb31__0_690 [label="0"];
    bb30__0_690 -> bb32__0_690 [label="1"];
    bb30__0_690 -> bb8__0_690 [label="otherwise"];
    bb31__0_690 -> bb34__0_690 [label=""];
    bb32__0_690 -> bb33__0_690 [label="return"];
    bb33__0_690 -> bb35__0_690 [label=""];
    bb34__0_690 -> bb38__0_690 [label=""];
    bb35__0_690 -> bb37__0_690 [label=""];
    bb36__0_690 -> bb37__0_690 [label=""];
    bb37__0_690 -> bb38__0_690 [label=""];
}
