// MIR for `update_settled_pnl` before PreCodegen

fn update_settled_pnl(_1: &mut User, _2: usize, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug position_index => _2;
    debug delta => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &mut state::user::User;
    let mut _8: i64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: &mut state::user::PerpPosition;
    let mut _18: &mut state::user::PerpPosition;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: i64;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: ();
    let mut _28: ();
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _24;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _27;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        StorageLive(_8);
        _8 = _3;
        _6 = update_user_settled_pnl(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _20 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb7: {
        _18 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_19];
        _17 = &mut (*_18);
        StorageLive(_22);
        _22 = _3;
        _16 = update_position_settled_pnl(move _17, move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_16);
        _23 = discriminant(_15);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_15 as Continue).0: ());
        _14 = _27;
        StorageDead(_27);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_28);
        _28 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _28);
        StorageDead(_28);
        goto -> bb13;
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
