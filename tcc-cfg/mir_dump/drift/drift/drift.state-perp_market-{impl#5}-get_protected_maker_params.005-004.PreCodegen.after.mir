// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_protected_maker_params` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_protected_maker_params(_1: &PerpMarket) -> ProtectedMakerParams {
    debug self => _1;
    let mut _0: state::protected_maker_mode_config::ProtectedMakerParams;
    let _2: u64;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: u8;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u64;
    let mut _13: u64;
    scope 1 {
        debug dynamic_offset => _2;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).35: u8);
        _3 = Gt(move _4, const 0_u8);
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).1: state::perp_market::AMM).61: u64);
        StorageLive(_7);
        _7 = (((*_1).1: state::perp_market::AMM).60: u64);
        _5 = <u64 as Ord>::max(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).35: u8);
        _8 = move _9 as u64 (IntToInt);
        StorageDead(_9);
        _10 = Eq(_8, const 0_u64);
        assert(!move _10, "attempt to divide `{}` by zero", _5) -> [success: bb3, unwind continue];
    }

    bb3: {
        _2 = Div(move _5, move _8);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_4);
        _2 = const 0_u64;
        goto -> bb5;
    }

    bb5: {
        StorageDead(_3);
        StorageLive(_11);
        _11 = ((*_1).34: u8);
        StorageLive(_12);
        _12 = _2;
        StorageLive(_13);
        _13 = (((*_1).1: state::perp_market::AMM).53: u64);
        _0 = ProtectedMakerParams { limit_price_divisor: move _11, dynamic_offset: move _12, tick_size: move _13 };
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_2);
        return;
    }
}
