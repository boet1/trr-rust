// MIR for `calculate_spread_leverage_scale` after PreCodegen

fn calculate_spread_leverage_scale(_1: u128, _2: u128, _3: u128, _4: i128, _5: u64, _6: i128) -> std::result::Result<u64, error::ErrorCode> {
    debug quote_asset_reserve => _1;
    debug terminal_quote_asset_reserve => _2;
    debug peg_multiplier => _3;
    debug base_asset_amount_with_amm => _4;
    debug reserve_price => _5;
    debug total_fee_minus_distributions => _6;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: i128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _12: std::result::Result<i128, error::ErrorCode>;
    let mut _13: i128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _15: std::result::Result<i128, error::ErrorCode>;
    let mut _16: i128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _18: std::result::Result<i128, error::ErrorCode>;
    let mut _19: u128;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: i128;
    let mut _25: i128;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _27: std::result::Result<i128, error::ErrorCode>;
    let mut _28: u128;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: i128;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: i128;
    let mut _39: i128;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _41: std::result::Result<i128, error::ErrorCode>;
    let mut _42: u128;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: i128;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: i128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: i128;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _60: std::result::Result<i128, error::ErrorCode>;
    let mut _61: i128;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _63: std::result::Result<i128, error::ErrorCode>;
    let mut _64: i128;
    let mut _65: i128;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _67: std::result::Result<i128, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: i128;
    let mut _80: (i128, bool);
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _88: std::result::Result<i128, error::ErrorCode>;
    let mut _89: i128;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _91: std::result::Result<i128, error::ErrorCode>;
    let mut _92: i128;
    let mut _93: i128;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _95: std::result::Result<i128, error::ErrorCode>;
    let mut _96: i128;
    let mut _97: i128;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _108: i128;
    let mut _109: i128;
    let mut _110: i128;
    let mut _111: (i128, bool);
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: u64;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _120: std::result::Result<u64, error::ErrorCode>;
    let mut _121: u64;
    let mut _122: u64;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _124: std::result::Result<u64, error::ErrorCode>;
    let mut _125: i128;
    let mut _126: i128;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: (u64, bool);
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _138: u64;
    scope 1 {
        debug net_base_asset_value => _7;
        let _58: i128;
        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _73: i128;
        let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _78: i128;
        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _85: i128;
        scope 26 {
            debug local_base_asset_value => _58;
            let _86: i128;
            let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _102: i128;
            let _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _107: i128;
            let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _116: i128;
            scope 39 {
                debug effective_leverage => _86;
                let _117: u64;
                let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _131: u64;
                let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _137: u64;
                scope 52 {
                    debug effective_leverage_capped => _117;
                }
                scope 53 {
                    debug residual => _128;
                    scope 54 {
                    }
                }
                scope 55 {
                    debug val => _131;
                    scope 56 {
                    }
                }
                scope 57 {
                    debug residual => _134;
                    scope 58 {
                    }
                }
                scope 59 {
                    debug val => _137;
                    scope 60 {
                    }
                }
            }
            scope 40 {
                debug residual => _99;
                scope 41 {
                }
            }
            scope 42 {
                debug val => _102;
                scope 43 {
                }
            }
            scope 44 {
                debug residual => _104;
                scope 45 {
                }
            }
            scope 46 {
                debug val => _107;
                scope 47 {
                }
            }
            scope 48 {
                debug residual => _113;
                scope 49 {
                }
            }
            scope 50 {
                debug val => _116;
                scope 51 {
                }
            }
        }
        scope 27 {
            debug residual => _70;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _73;
            scope 30 {
            }
        }
        scope 31 {
            debug residual => _75;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _78;
            scope 34 {
            }
        }
        scope 35 {
            debug residual => _82;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _85;
            scope 38 {
            }
        }
    }
    scope 2 {
        debug residual => _21;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _24;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _30;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _33;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _35;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _38;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _44;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _47;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _49;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _52;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _54;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _57;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _1;
        _18 = <u128 as Cast>::cast::<i128>(move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_19);
        _17 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: i128);
        _16 = _24;
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _2;
        _27 = <u128 as Cast>::cast::<i128>(move _28) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb90;
    }

    bb7: {
        StorageDead(_28);
        _26 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: i128);
        _25 = _33;
        StorageDead(_33);
        _15 = <i128 as SafeMath>::safe_sub(move _16, move _25) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb88;
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_16);
        _14 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_15);
        _34 = discriminant(_14);
        switchInt(move _34) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_38);
        _38 = ((_14 as Continue).0: i128);
        _13 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        _41 = <u128 as Cast>::cast::<i128>(move _42) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb88;
    }

    bb17: {
        StorageDead(_42);
        _40 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: i128);
        _39 = _47;
        StorageDead(_47);
        _12 = <i128 as SafeMath>::safe_mul(move _13, move _39) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb86;
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_13);
        _11 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_12);
        _48 = discriminant(_11);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_11 as Continue).0: i128);
        _10 = _52;
        StorageDead(_52);
        _9 = <i128 as SafeMath>::safe_div(move _10, const _) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb86;
    }

    bb27: {
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_9);
        _53 = discriminant(_8);
        switchInt(move _53) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_8 as Continue).0: i128);
        _7 = _57;
        StorageDead(_57);
        StorageDead(_40);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _4;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _5;
        _67 = <u64 as Cast>::cast::<i128>(move _68) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_54);
        _54 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb87;
    }

    bb32: {
        StorageDead(_68);
        _66 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _67) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_73);
        _73 = ((_66 as Continue).0: i128);
        _65 = _73;
        StorageDead(_73);
        _63 = <i128 as SafeMath>::safe_mul(move _64, move _65) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_70);
        _70 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb83;
    }

    bb37: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _63) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_63);
        _74 = discriminant(_62);
        switchInt(move _74) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_78);
        _78 = ((_62 as Continue).0: i128);
        _61 = _78;
        StorageDead(_78);
        StorageLive(_79);
        _80 = CheckedMul(const _, const _);
        assert(!move (_80.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const _) -> [success: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_75);
        _75 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb83;
    }

    bb42: {
        _79 = move (_80.0: i128);
        _60 = <i128 as SafeMath>::safe_div(move _61, move _79) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_79);
        StorageDead(_61);
        _59 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _60) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_60);
        _81 = discriminant(_59);
        switchInt(move _81) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_85);
        _85 = ((_59 as Continue).0: i128);
        _58 = _85;
        StorageDead(_85);
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_59);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _58;
        StorageLive(_97);
        _97 = _7;
        _95 = <i128 as SafeMath>::safe_sub(move _96, move _97) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_82);
        _82 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb84;
    }

    bb48: {
        StorageDead(_97);
        StorageDead(_96);
        _94 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _95) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_95);
        _98 = discriminant(_94);
        switchInt(move _98) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_102);
        _102 = ((_94 as Continue).0: i128);
        _93 = _102;
        StorageDead(_102);
        _92 = std::cmp::max::<i128>(const 0_i128, move _93) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_99);
        _99 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb80;
    }

    bb53: {
        StorageDead(_93);
        _91 = <i128 as SafeMath>::safe_mul(move _92, const _) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_92);
        _90 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _91) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_91);
        _103 = discriminant(_90);
        switchInt(move _103) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_107);
        _107 = ((_90 as Continue).0: i128);
        _89 = _107;
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _6;
        _109 = std::cmp::max::<i128>(const 0_i128, move _110) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_104);
        _104 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_106);
        _106 = _104;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _106) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_106);
        StorageDead(_104);
        goto -> bb80;
    }

    bb59: {
        StorageDead(_110);
        _111 = CheckedAdd(_109, const 1_i128);
        assert(!move (_111.1: bool), "attempt to compute `{} + {}`, which would overflow", move _109, const 1_i128) -> [success: bb60, unwind continue];
    }

    bb60: {
        _108 = move (_111.0: i128);
        StorageDead(_109);
        _88 = <i128 as SafeMath>::safe_div(move _89, move _108) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_108);
        StorageDead(_89);
        _87 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _88) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_88);
        _112 = discriminant(_87);
        switchInt(move _112) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_116);
        _116 = ((_87 as Continue).0: i128);
        _86 = _116;
        StorageDead(_116);
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_87);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _86;
        _125 = std::cmp::max::<i128>(const 0_i128, move _126) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_113);
        _113 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb81;
    }

    bb66: {
        StorageDead(_126);
        _124 = <i128 as Cast>::cast::<u64>(move _125) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_125);
        _123 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _124) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_124);
        _127 = discriminant(_123);
        switchInt(move _127) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_131);
        _131 = ((_123 as Continue).0: u64);
        _122 = _131;
        StorageDead(_131);
        _132 = CheckedAdd(_122, const 1_u64);
        assert(!move (_132.1: bool), "attempt to compute `{} + {}`, which would overflow", move _122, const 1_u64) -> [success: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_128);
        _128 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb79;
    }

    bb72: {
        _121 = move (_132.0: u64);
        StorageDead(_122);
        _120 = <u64 as SafeMath>::safe_add(const _, move _121) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_121);
        _119 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _120) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_120);
        _133 = discriminant(_119);
        switchInt(move _133) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_137);
        _137 = ((_119 as Continue).0: u64);
        _118 = _137;
        StorageDead(_137);
        _117 = std::cmp::min::<u64>(const _, move _118) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_134);
        _134 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_136);
        StorageDead(_134);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_118);
        StorageDead(_123);
        StorageDead(_119);
        StorageLive(_138);
        _138 = _117;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _138);
        StorageDead(_138);
        StorageDead(_117);
        StorageDead(_86);
        StorageDead(_58);
        StorageDead(_7);
        goto -> bb92;
    }

    bb79: {
        StorageDead(_118);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb82;
    }

    bb80: {
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_87);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_86);
        goto -> bb85;
    }

    bb83: {
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_59);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_58);
        goto -> bb91;
    }

    bb86: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_40);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_26);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_7);
        goto -> bb92;
    }

    bb92: {
        return;
    }
}
