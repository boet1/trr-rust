// MIR for `admin::handle_update_amm_jit_intensity` before PreCodegen

fn admin::handle_update_amm_jit_intensity(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::HotAdminUpdatePerpMarket<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amm_jit_intensity => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _15: std::result::Result<(), error::ErrorCode>;
    let mut _16: bool;
    let mut _17: &std::ops::RangeInclusive<u8>;
    let _18: std::ops::RangeInclusive<u8>;
    let mut _19: &u8;
    let _20: &u8;
    let mut _21: ();
    let _22: error::ErrorCode;
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: &std::string::String;
    let _46: &std::string::String;
    let _47: std::string::String;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[&str; 1];
    let _52: &[&str; 1];
    let _53: [&str; 1];
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let _60: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _61: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _63: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _64: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _65: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _66: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _67: isize;
    let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 1];
    let _82: &[&str; 1];
    let _83: [&str; 1];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let mut _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: [core::fmt::rt::Argument<'_>; 1];
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &u16;
    let _90: &u16;
    let _91: &state::perp_market::PerpMarket;
    let mut _92: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _93: ();
    let mut _94: &str;
    let _95: &str;
    let mut _96: &std::string::String;
    let _97: &std::string::String;
    let _98: std::string::String;
    let mut _100: std::fmt::Arguments<'_>;
    let mut _101: &[&str];
    let mut _102: &[&str; 2];
    let _103: &[&str; 2];
    let _104: [&str; 2];
    let mut _105: &[core::fmt::rt::Argument<'_>];
    let mut _106: &[core::fmt::rt::Argument<'_>; 2];
    let _107: &[core::fmt::rt::Argument<'_>; 2];
    let _108: [core::fmt::rt::Argument<'_>; 2];
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &u8;
    let _111: &u8;
    let _112: &state::perp_market::PerpMarket;
    let mut _113: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _114: core::fmt::rt::Argument<'_>;
    let mut _115: &u8;
    let _116: &u8;
    let mut _117: u8;
    let mut _118: &mut state::perp_market::PerpMarket;
    let mut _119: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _120: ();
    let mut _125: &std::ops::RangeInclusive<u8>;
    let mut _126: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _127: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _22;
        let _29: std::string::String;
        let _48: std::string::String;
        let mut _123: &[&str; 1];
        let mut _124: &[&str; 2];
        scope 6 {
            debug res => _29;
        }
        scope 7 {
            debug res => _48;
        }
    }
    scope 8 {
        debug residual => _56;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _59;
        scope 11 {
        }
    }
    scope 12 {
        debug perp_market => _60;
        let _78: std::string::String;
        let _99: std::string::String;
        let mut _121: &[&str; 2];
        let mut _122: &[&str; 1];
        scope 17 {
            debug res => _78;
        }
        scope 18 {
            debug res => _99;
        }
    }
    scope 13 {
        debug residual => _68;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _71;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _126 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _7 = &((*_126).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _128 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _125 = const _;
        _17 = &(*_125);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_2;
        _19 = &(*_20);
        _16 = RangeInclusive::<u8>::contains::<u8>(move _17, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb57];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _134 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb49;
    }

    bb7: {
        switchInt(move _16) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_21);
        _21 = ();
        _15 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb21;
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_22);
        _22 = error::ErrorCode::DefaultError;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _124 = const _;
        _33 = &(*_124);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        StorageDead(_24);
        drop(_28) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _123 = const _;
        _52 = &(*_123);
        _51 = &(*_52);
        _50 = move _51 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_51);
        _49 = Arguments::<'_>::new_const(move _50) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_50);
        _48 = format(move _49) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_49);
        StorageDead(_52);
        _47 = move _48;
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = <String as Deref>::deref(move _45) -> [return: bb18, unwind: bb53];
    }

    bb18: {
        _43 = &(*_44);
        StorageDead(_45);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        StorageDead(_43);
        drop(_47) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_54);
        _54 = _22;
        _15 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_22);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_16);
        _14 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _15) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_15);
        _55 = discriminant(_14);
        switchInt(move _55) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_59);
        _59 = ((_14 as Continue).0: ());
        _13 = _59;
        StorageDead(_59);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _127 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _65 = &((*_127).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _64 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _65) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_56);
        _56 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb49;
    }

    bb26: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _63 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _64, move _66) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        StorageDead(_66);
        StorageDead(_64);
        _62 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _63) -> [return: bb28, unwind: bb55];
    }

    bb28: {
        StorageDead(_63);
        _67 = discriminant(_62);
        switchInt(move _67) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_71);
        _71 = move ((_62 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _61 = move _71;
        StorageDead(_71);
        _60 = &mut _61;
        _132 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _122 = const _;
        _82 = &(*_122);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_60);
        _91 = <RefMut<'_, PerpMarket> as Deref>::deref(move _92) -> [return: bb32, unwind: bb52];
    }

    bb30: {
        StorageLive(_68);
        _68 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb31, unwind: bb56];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_68);
        _130 = discriminant(_62);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb49;
    }

    bb32: {
        StorageDead(_92);
        _90 = &((*_91).21: u16);
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _89) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        StorageDead(_89);
        _87 = [move _88];
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_85);
        _79 = Arguments::<'_>::new_v1(move _80, move _84) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        StorageDead(_84);
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb35, unwind: bb52];
    }

    bb35: {
        StorageDead(_79);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb37, unwind: bb51];
    }

    bb37: {
        StorageDead(_73);
        drop(_77) -> [return: bb38, unwind: bb52];
    }

    bb38: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _121 = const _;
        _103 = &(*_121);
        _102 = &(*_103);
        _101 = move _102 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_60);
        _112 = <RefMut<'_, PerpMarket> as Deref>::deref(move _113) -> [return: bb39, unwind: bb52];
    }

    bb39: {
        StorageDead(_113);
        _111 = &(((*_112).1: state::perp_market::AMM).71: u8);
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _110) -> [return: bb40, unwind: bb52];
    }

    bb40: {
        StorageDead(_110);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_2;
        _115 = &(*_116);
        _114 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _115) -> [return: bb41, unwind: bb52];
    }

    bb41: {
        StorageDead(_115);
        _108 = [move _109, move _114];
        StorageDead(_114);
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = move _106 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_106);
        _100 = Arguments::<'_>::new_v1(move _101, move _105) -> [return: bb42, unwind: bb52];
    }

    bb42: {
        StorageDead(_105);
        StorageDead(_101);
        _99 = format(move _100) -> [return: bb43, unwind: bb52];
    }

    bb43: {
        StorageDead(_100);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_103);
        _98 = move _99;
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = <String as Deref>::deref(move _96) -> [return: bb44, unwind: bb50];
    }

    bb44: {
        _94 = &(*_95);
        StorageDead(_96);
        _93 = solana_program::log::sol_log(move _94) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        StorageDead(_94);
        drop(_98) -> [return: bb46, unwind: bb52];
    }

    bb46: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_117);
        _117 = _2;
        StorageLive(_118);
        StorageLive(_119);
        _119 = &mut (*_60);
        _118 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _119) -> [return: bb47, unwind: bb52];
    }

    bb47: {
        StorageDead(_119);
        (((*_118).1: state::perp_market::AMM).71: u8) = move _117;
        StorageDead(_117);
        StorageDead(_118);
        StorageLive(_120);
        _120 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _120);
        StorageDead(_120);
        drop(_61) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb49;
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_98) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_77) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_61) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_47) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_28) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        _136 = discriminant(_62);
        goto -> bb55;
    }

    bb57 (cleanup): {
        _137 = discriminant(_4);
        goto -> bb55;
    }
}
