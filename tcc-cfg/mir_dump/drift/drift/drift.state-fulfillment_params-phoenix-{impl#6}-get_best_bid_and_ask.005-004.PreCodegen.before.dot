digraph Mir_0_3168 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;PhoenixFulfillmentParams&lt;'a, 'b&gt; as SpotFulfillmentParams&gt;::get_best_bid_and_ask(_1: &amp;ReErased state::fulfillment_params::phoenix::PhoenixFulfillmentParams&lt;ReErased, ReErased&gt;) -&gt; std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;<br align="left"/>let _2: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _3: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let _4: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _5: &amp;ReErased std::rc::Rc&lt;std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;, std::alloc::Global&gt;;<br align="left"/>let _6: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _7: &amp;ReErased state::fulfillment_params::phoenix::PhoenixMarketContext&lt;ReErased, ReErased&gt;;<br align="left"/>let _8: &amp;ReErased [u8];<br align="left"/>let mut _9: (&amp;ReErased [u8], &amp;ReErased [u8]);<br align="left"/>let mut _10: &amp;ReErased [u8];<br align="left"/>let _11: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _12: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _13: usize;<br align="left"/>let _14: &amp;ReErased phoenix::program::MarketHeader;<br align="left"/>let _15: ();<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u32;<br align="left"/>let mut _18: !;<br align="left"/>let _19: ();<br align="left"/>let mut _20: &amp;ReErased str;<br align="left"/>let _21: &amp;ReErased str;<br align="left"/>let mut _22: error::ErrorCode;<br align="left"/>let _23: &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased;<br align="left"/>let mut _24: phoenix::state::markets::MarketWrapper&lt;ReErased, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;;<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, phoenix::state::markets::MarketWrapper&lt;ReErased, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;&gt;;<br align="left"/>let mut _26: std::result::Result&lt;phoenix::state::markets::MarketWrapper&lt;ReErased, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _27: std::result::Result&lt;phoenix::state::markets::MarketWrapper&lt;ReErased, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _28: &amp;ReErased phoenix::program::MarketSizeParams;<br align="left"/>let _29: &amp;ReErased phoenix::program::MarketSizeParams;<br align="left"/>let mut _30: &amp;ReErased [u8];<br align="left"/>let mut _31: Closure(DefId(0:3169 ~ drift[d311]::state::fulfillment_params::phoenix::{impl#6}::get_best_bid_and_ask::{closure#0}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::prelude::ProgramError,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _36: phoenix::state::markets::MarketWrapper&lt;ReErased, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;;<br align="left"/>let _37: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _38: std::option::Option&lt;(&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder)&gt;;<br align="left"/>let mut _39: &amp;ReErased mut std::boxed::Box&lt;dyn [Binder(Trait(std::iter::DoubleEndedIterator), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:7895 ~ core[9adc]::iter::traits::iterator::Iterator::Item), args: [], term: Term::Ty((&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder)) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _40: std::boxed::Box&lt;dyn [Binder(Trait(std::iter::DoubleEndedIterator), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:7895 ~ core[9adc]::iter::traits::iterator::Iterator::Item), args: [], term: Term::Ty((&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder)) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _41: &amp;ReErased dyn [Binder(Trait(sokoban::node_allocator::OrderedNodeAllocatorMap&lt;phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder&gt;), [])] + ReErased;<br align="left"/>let _42: &amp;ReErased dyn [Binder(Trait(sokoban::node_allocator::OrderedNodeAllocatorMap&lt;phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder&gt;), [])] + ReErased;<br align="left"/>let mut _43: &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased;<br align="left"/>let mut _44: phoenix::state::Side;<br align="left"/>let mut _45: Closure(DefId(0:3170 ~ drift[d311]::state::fulfillment_params::phoenix::{impl#6}::get_best_bid_and_ask::{closure#1}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn(((&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder),)) -&gt; std::option::Option&lt;u64&gt;, []), (&amp;ReErased &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased, &amp;ReErased &amp;ReErased phoenix::program::MarketHeader)]);<br align="left"/>let mut _46: &amp;ReErased &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased;<br align="left"/>let mut _47: &amp;ReErased &amp;ReErased phoenix::program::MarketHeader;<br align="left"/>let _48: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _49: std::option::Option&lt;(&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder)&gt;;<br align="left"/>let mut _50: &amp;ReErased mut std::boxed::Box&lt;dyn [Binder(Trait(std::iter::DoubleEndedIterator), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:7895 ~ core[9adc]::iter::traits::iterator::Iterator::Item), args: [], term: Term::Ty((&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder)) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _51: std::boxed::Box&lt;dyn [Binder(Trait(std::iter::DoubleEndedIterator), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:7895 ~ core[9adc]::iter::traits::iterator::Iterator::Item), args: [], term: Term::Ty((&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder)) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _52: &amp;ReErased dyn [Binder(Trait(sokoban::node_allocator::OrderedNodeAllocatorMap&lt;phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder&gt;), [])] + ReErased;<br align="left"/>let _53: &amp;ReErased dyn [Binder(Trait(sokoban::node_allocator::OrderedNodeAllocatorMap&lt;phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder&gt;), [])] + ReErased;<br align="left"/>let mut _54: &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased;<br align="left"/>let mut _55: phoenix::state::Side;<br align="left"/>let mut _56: Closure(DefId(0:3171 ~ drift[d311]::state::fulfillment_params::phoenix::{impl#6}::get_best_bid_and_ask::{closure#2}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn(((&amp;ReErased phoenix::state::markets::FIFOOrderId, &amp;ReErased phoenix::state::markets::FIFORestingOrder),)) -&gt; std::option::Option&lt;u64&gt;, []), (&amp;ReErased &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased, &amp;ReErased &amp;ReErased phoenix::program::MarketHeader)]);<br align="left"/>let mut _57: &amp;ReErased &amp;ReErased dyn [Binder(Trait(phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;), [])] + ReErased;<br align="left"/>let mut _58: &amp;ReErased &amp;ReErased phoenix::program::MarketHeader;<br align="left"/>let mut _59: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _60: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _61: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _62: &amp;ReErased mut [u8];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug market_data =&gt; _2;<br align="left"/>debug market_bytes =&gt; _8;<br align="left"/>debug header =&gt; _14;<br align="left"/>debug market =&gt; _23;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>debug best_bid =&gt; _37;<br align="left"/>debug best_ask =&gt; _48;<br align="left"/>>;
    bb0__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext&lt;'_, '_&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;PhoenixMarketContext&lt;'_, '_&gt; as Deref&gt;::deref(move _7)</td></tr></table>>];
    bb1__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = &amp;((*_6).2: std::rc::Rc&lt;std::cell::RefCell&lt;&amp;mut [u8]&gt;&gt;)<br/></td></tr><tr><td align="left">_4 = &lt;Rc&lt;RefCell&lt;&amp;mut [u8]&gt;&gt; as Deref&gt;::deref(move _5)</td></tr></table>>];
    bb2__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = &amp;(*_4)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">_2 = RefCell::&lt;&amp;mut [u8]&gt;::borrow(move _3)</td></tr></table>>];
    bb3__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;_2<br/></td></tr><tr><td align="left">_11 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _12)</td></tr></table>>];
    bb4__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_62 = deref_copy (*_11)<br/>_10 = &amp;(*_62)<br/>StorageDead(_12)<br/>StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = std::mem::size_of::&lt;MarketHeader&gt;()</td></tr></table>>];
    bb5__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">_9 = core::slice::&lt;impl [u8]&gt;::split_at(move _10, move _13)</td></tr></table>>];
    bb6__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_10)<br/>StorageLive(_8)<br/>_8 = (_9.1: &amp;[u8])<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageLive(_14)<br/>_14 = &amp;(((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext&lt;'_, '_&gt;).1: phoenix::program::MarketHeader)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = (((*_14).5: phoenix::program::TokenParams).0: u32)<br/>_16 = Ne(move _17, const 6_u32)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb7__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = const &quot;Quote decimals must be 6&quot;<br/>_20 = &amp;(*_21)<br/></td></tr><tr><td align="left">_19 = solana_program::log::sol_log(move _20)</td></tr></table>>];
    bb8__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/>StorageLive(_22)<br/>_22 = error::ErrorCode::InvalidPricePrecision<br/>_0 = std::result::Result::&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt;::Err(move _22)<br/>StorageDead(_22)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_15 = const ()<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;((*_14).2: phoenix::program::MarketSizeParams)<br/>_28 = &amp;(*_29)<br/>StorageLive(_30)<br/>_30 = &amp;(*_8)<br/></td></tr><tr><td align="left">_27 = load_with_dispatch(move _28, move _30)</td></tr></table>>];
    bb10__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageLive(_31)<br/>_31 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:357:22: 357:25}<br/></td></tr><tr><td align="left">_26 = std::result::Result::&lt;MarketWrapper&lt;'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket&gt;, anchor_lang::prelude::ProgramError&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:357:22: 357:25}&gt;(move _27, move _31)</td></tr></table>>];
    bb11__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;MarketWrapper&lt;'_, anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb12__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_32 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb13__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = move ((_25 as Continue).0: phoenix::state::markets::MarketWrapper&lt;'_, anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;)<br/>_24 = move _36<br/>StorageDead(_36)<br/>_23 = (_24.0: &amp;dyn phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, phoenix::state::markets::FIFOOrderId, phoenix::state::markets::FIFORestingOrder, phoenix::state::OrderPacket&gt;)<br/>StorageDead(_29)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = &amp;(*_23)<br/>StorageLive(_44)<br/>_44 = phoenix::state::Side::Bid<br/></td></tr><tr><td align="left">_42 = &lt;dyn phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket&gt; as phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket&gt;&gt;::get_book(move _43, move _44)</td></tr></table>>];
    bb14__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb15__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_35)<br/>_35 = _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb16__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/>StorageDead(_29)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_41 = &amp;(*_42)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_40 = &lt;dyn sokoban::node_allocator::OrderedNodeAllocatorMap&lt;FIFOOrderId, FIFORestingOrder&gt; as sokoban::node_allocator::NodeAllocatorMap&lt;FIFOOrderId, FIFORestingOrder&gt;&gt;::iter(move _41)</td></tr></table>>];
    bb18__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_39 = &amp;mut _40<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_38 = &lt;Box&lt;dyn DoubleEndedIterator&lt;Item = (&amp;FIFOOrderId, &amp;FIFORestingOrder)&gt;&gt; as Iterator&gt;::next(move _39)</td></tr></table>>];
    bb19__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = &amp;_23<br/>StorageLive(_47)<br/>_47 = &amp;_14<br/>_45 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:365:74: 365:82} { market: move _46, header: move _47 }<br/>StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_37 = Option::&lt;(&amp;FIFOOrderId, &amp;FIFORestingOrder)&gt;::and_then::&lt;u64, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:365:74: 365:82}&gt;(move _38, move _45)</td></tr></table>>];
    bb20__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">drop(_40)</td></tr></table>>];
    bb21__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = &amp;(*_23)<br/>StorageLive(_55)<br/>_55 = phoenix::state::Side::Ask<br/></td></tr><tr><td align="left">_53 = &lt;dyn phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket&gt; as phoenix::state::markets::Market&lt;anchor_lang::prelude::Pubkey, FIFOOrderId, FIFORestingOrder, OrderPacket&gt;&gt;::get_book(move _54, move _55)</td></tr></table>>];
    bb22__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_52 = &amp;(*_53)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_51 = &lt;dyn sokoban::node_allocator::OrderedNodeAllocatorMap&lt;FIFOOrderId, FIFORestingOrder&gt; as sokoban::node_allocator::NodeAllocatorMap&lt;FIFOOrderId, FIFORestingOrder&gt;&gt;::iter(move _52)</td></tr></table>>];
    bb23__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_50 = &amp;mut _51<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">_49 = &lt;Box&lt;dyn DoubleEndedIterator&lt;Item = (&amp;FIFOOrderId, &amp;FIFORestingOrder)&gt;&gt; as Iterator&gt;::next(move _50)</td></tr></table>>];
    bb24__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = &amp;_23<br/>StorageLive(_58)<br/>_58 = &amp;_14<br/>_56 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:373:74: 373:82} { market: move _57, header: move _58 }<br/>StorageDead(_58)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">_48 = Option::&lt;(&amp;FIFOOrderId, &amp;FIFORestingOrder)&gt;::and_then::&lt;u64, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:373:74: 373:82}&gt;(move _49, move _56)</td></tr></table>>];
    bb25__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb26__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = _37<br/>StorageLive(_61)<br/>_61 = _48<br/>_59 = (move _60, move _61)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/>_0 = std::result::Result::&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt;::Ok(move _59)<br/>StorageDead(_59)<br/>StorageDead(_48)<br/>StorageDead(_37)<br/>StorageDead(_23)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb27__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb29__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left">return</td></tr></table>>];
    bb31__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb32__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">drop(_40)</td></tr></table>>];
    bb33__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb34__0_3168 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_3168 -> bb1__0_3168 [label="return"];
    bb1__0_3168 -> bb2__0_3168 [label="return"];
    bb2__0_3168 -> bb3__0_3168 [label="return"];
    bb3__0_3168 -> bb4__0_3168 [label="return"];
    bb3__0_3168 -> bb33__0_3168 [label="unwind"];
    bb4__0_3168 -> bb5__0_3168 [label="return"];
    bb4__0_3168 -> bb33__0_3168 [label="unwind"];
    bb5__0_3168 -> bb6__0_3168 [label="return"];
    bb5__0_3168 -> bb33__0_3168 [label="unwind"];
    bb6__0_3168 -> bb9__0_3168 [label="0"];
    bb6__0_3168 -> bb7__0_3168 [label="otherwise"];
    bb7__0_3168 -> bb8__0_3168 [label="return"];
    bb7__0_3168 -> bb33__0_3168 [label="unwind"];
    bb8__0_3168 -> bb28__0_3168 [label=""];
    bb9__0_3168 -> bb10__0_3168 [label="return"];
    bb9__0_3168 -> bb33__0_3168 [label="unwind"];
    bb10__0_3168 -> bb11__0_3168 [label="return"];
    bb10__0_3168 -> bb33__0_3168 [label="unwind"];
    bb11__0_3168 -> bb12__0_3168 [label="return"];
    bb11__0_3168 -> bb33__0_3168 [label="unwind"];
    bb12__0_3168 -> bb13__0_3168 [label="0"];
    bb12__0_3168 -> bb15__0_3168 [label="1"];
    bb12__0_3168 -> bb14__0_3168 [label="otherwise"];
    bb13__0_3168 -> bb17__0_3168 [label="return"];
    bb13__0_3168 -> bb33__0_3168 [label="unwind"];
    bb15__0_3168 -> bb16__0_3168 [label="return"];
    bb15__0_3168 -> bb33__0_3168 [label="unwind"];
    bb16__0_3168 -> bb28__0_3168 [label=""];
    bb17__0_3168 -> bb18__0_3168 [label="return"];
    bb17__0_3168 -> bb33__0_3168 [label="unwind"];
    bb18__0_3168 -> bb19__0_3168 [label="return"];
    bb18__0_3168 -> bb32__0_3168 [label="unwind"];
    bb19__0_3168 -> bb20__0_3168 [label="return"];
    bb19__0_3168 -> bb32__0_3168 [label="unwind"];
    bb20__0_3168 -> bb21__0_3168 [label="return"];
    bb20__0_3168 -> bb33__0_3168 [label="unwind"];
    bb21__0_3168 -> bb22__0_3168 [label="return"];
    bb21__0_3168 -> bb33__0_3168 [label="unwind"];
    bb22__0_3168 -> bb23__0_3168 [label="return"];
    bb22__0_3168 -> bb33__0_3168 [label="unwind"];
    bb23__0_3168 -> bb24__0_3168 [label="return"];
    bb23__0_3168 -> bb31__0_3168 [label="unwind"];
    bb24__0_3168 -> bb25__0_3168 [label="return"];
    bb24__0_3168 -> bb31__0_3168 [label="unwind"];
    bb25__0_3168 -> bb26__0_3168 [label="return"];
    bb25__0_3168 -> bb33__0_3168 [label="unwind"];
    bb26__0_3168 -> bb27__0_3168 [label="return"];
    bb26__0_3168 -> bb34__0_3168 [label="unwind"];
    bb27__0_3168 -> bb30__0_3168 [label=""];
    bb28__0_3168 -> bb29__0_3168 [label="return"];
    bb28__0_3168 -> bb34__0_3168 [label="unwind"];
    bb29__0_3168 -> bb30__0_3168 [label=""];
    bb31__0_3168 -> bb33__0_3168 [label="return"];
    bb32__0_3168 -> bb33__0_3168 [label="return"];
    bb33__0_3168 -> bb34__0_3168 [label="return"];
}
