digraph Mir_0_13997 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U256::div_mod(_1: math::bn::U256, _2: math::bn::U256) -&gt; (math::bn::U256, math::bn::U256)<br align="left"/>let _3: usize;<br align="left"/>let mut _4: &amp;ReErased math::bn::U256;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: &amp;ReErased math::bn::U256;<br align="left"/>let _7: ();<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: !;<br align="left"/>let _11: !;<br align="left"/>let _12: ();<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: math::bn::U256;<br align="left"/>let mut _18: math::bn::U256;<br align="left"/>let _19: ();<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: math::bn::U256;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: &amp;ReErased math::bn::U256;<br align="left"/>let _26: usize;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: (usize, usize);<br align="left"/>let _29: usize;<br align="left"/>let mut _30: usize;<br align="left"/>let _31: usize;<br align="left"/>let mut _32: usize;<br align="left"/>let mut _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: usize;<br align="left"/>let mut _36: usize;<br align="left"/>let mut _37: (usize, bool);<br align="left"/>let mut _38: math::bn::U256;<br align="left"/>let mut _39: math::bn::U256;<br align="left"/>let mut _40: usize;<br align="left"/>let mut _41: usize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug other =&gt; _2;<br align="left"/>debug my_bits =&gt; _3;<br align="left"/>debug your_bits =&gt; _5;<br align="left"/>debug n =&gt; _26;<br align="left"/>debug m =&gt; _27;<br align="left"/>debug my_words =&gt; _29;<br align="left"/>debug your_words =&gt; _31;<br align="left"/>>;
    bb0__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;_1<br/></td></tr><tr><td align="left">_3 = U256::bits(move _4)</td></tr></table>>];
    bb1__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;_2<br/></td></tr><tr><td align="left">_5 = U256::bits(move _6)</td></tr></table>>];
    bb2__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _5<br/>_8 = Ne(move _9, const 0_usize)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_7 = const ()<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>_15 = _5<br/>_13 = Lt(move _14, move _15)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb4__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_11)<br/></td></tr><tr><td align="left">_11 = begin_panic::&lt;&amp;str&gt;(const &quot;division by zero&quot;)</td></tr></table>>];
    bb5__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_17)<br/></td></tr><tr><td align="left">_17 = U256::zero()</td></tr></table>>];
    bb6__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>_12 = const ()<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _5<br/>_20 = Le(move _21, const _)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb7__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = _1<br/>_0 = (move _17, move _18)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_23)<br/>_23 = _1<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = &amp;_2<br/></td></tr><tr><td align="left">_24 = U256::low_u64(move _25)</td></tr></table>>];
    bb9__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_19 = const ()<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = _3<br/></td></tr><tr><td align="left">_29 = U256::words(move _30)</td></tr></table>>];
    bb10__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">_0 = U256::div_mod_small(move _23, move _24)</td></tr></table>>];
    bb11__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _5<br/></td></tr><tr><td align="left">_31 = U256::words(move _32)</td></tr></table>>];
    bb13__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageLive(_33)<br/>_33 = _31<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _29<br/>StorageLive(_36)<br/>_36 = _31<br/>_37 = CheckedSub(_35, _36)<br/></td></tr><tr><td align="left">assert(!move (_37.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _35, move _36)</td></tr></table>>];
    bb14__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_34 = move (_37.0: usize)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>_28 = (move _33, move _34)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageLive(_26)<br/>_26 = (_28.0: usize)<br/>StorageLive(_27)<br/>_27 = (_28.1: usize)<br/>StorageDead(_28)<br/>StorageLive(_38)<br/>_38 = _1<br/>StorageLive(_39)<br/>_39 = _2<br/>StorageLive(_40)<br/>_40 = _26<br/>StorageLive(_41)<br/>_41 = _27<br/></td></tr><tr><td align="left">_0 = U256::div_mod_knuth(move _38, move _39, move _40, move _41)</td></tr></table>>];
    bb15__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_13997 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_13997 -> bb1__0_13997 [label="return"];
    bb1__0_13997 -> bb2__0_13997 [label="return"];
    bb2__0_13997 -> bb4__0_13997 [label="0"];
    bb2__0_13997 -> bb3__0_13997 [label="otherwise"];
    bb3__0_13997 -> bb6__0_13997 [label="0"];
    bb3__0_13997 -> bb5__0_13997 [label="otherwise"];
    bb5__0_13997 -> bb7__0_13997 [label="return"];
    bb6__0_13997 -> bb9__0_13997 [label="0"];
    bb6__0_13997 -> bb8__0_13997 [label="otherwise"];
    bb7__0_13997 -> bb16__0_13997 [label=""];
    bb8__0_13997 -> bb10__0_13997 [label="return"];
    bb9__0_13997 -> bb12__0_13997 [label="return"];
    bb10__0_13997 -> bb11__0_13997 [label="return"];
    bb11__0_13997 -> bb16__0_13997 [label=""];
    bb12__0_13997 -> bb13__0_13997 [label="return"];
    bb13__0_13997 -> bb14__0_13997 [label="success"];
    bb14__0_13997 -> bb15__0_13997 [label="return"];
    bb15__0_13997 -> bb17__0_13997 [label=""];
    bb16__0_13997 -> bb17__0_13997 [label=""];
}
