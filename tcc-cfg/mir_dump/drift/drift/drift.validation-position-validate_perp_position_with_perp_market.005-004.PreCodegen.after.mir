// MIR for `validate_perp_position_with_perp_market` after PreCodegen

fn validate_perp_position_with_perp_market(_1: &PerpPosition, _2: &PerpMarket) -> std::result::Result<(), error::ErrorCode> {
    debug position => _1;
    debug market => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u16;
    let mut _8: u16;
    let mut _9: ();
    let _10: error::ErrorCode;
    let _11: ();
    let mut _12: &str;
    let _13: &str;
    let mut _14: &std::string::String;
    let _15: &std::string::String;
    let _16: std::string::String;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[&str; 2];
    let _21: &[&str; 2];
    let _22: [&str; 2];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let mut _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &error::ErrorCode;
    let _29: &error::ErrorCode;
    let _30: ();
    let mut _31: &str;
    let _32: &str;
    let mut _33: error::ErrorCode;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: ();
    let _39: ();
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _41: std::result::Result<(), error::ErrorCode>;
    let mut _42: bool;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _44: std::result::Result<bool, error::ErrorCode>;
    let mut _45: u64;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _47: std::result::Result<u64, error::ErrorCode>;
    let mut _48: u64;
    let mut _49: i64;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: u64;
    let mut _55: u64;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: bool;
    let mut _61: ();
    let _62: error::ErrorCode;
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &error::ErrorCode;
    let _81: &error::ErrorCode;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: error::ErrorCode;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _90: ();
    let mut _91: ();
    scope 1 {
        debug error_code => _10;
        let _17: std::string::String;
        let mut _93: &[&str; 2];
        scope 2 {
            debug res => _17;
        }
    }
    scope 3 {
        debug residual => _35;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _38;
        scope 6 {
        }
    }
    scope 7 {
        debug residual => _51;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _54;
        scope 10 {
        }
    }
    scope 11 {
        debug residual => _57;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _60;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _62;
        let _69: std::string::String;
        let mut _92: &[&str; 2];
        scope 16 {
            debug res => _69;
        }
    }
    scope 17 {
        debug residual => _87;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _90;
        scope 20 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).13: u16);
        StorageLive(_8);
        _8 = ((*_2).21: u16);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        goto -> bb10;
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        _10 = error::ErrorCode::InvalidPerpPositionDetected;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _93 = const _;
        _21 = &(*_93);
        _20 = &(*_21);
        _19 = move _20 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_10;
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _28) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_28);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_24);
        _18 = Arguments::<'_>::new_v1(move _19, move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = format(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        _16 = move _17;
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = <String as Deref>::deref(move _14) -> [return: bb6, unwind: bb45];
    }

    bb6: {
        _12 = &(*_13);
        StorageDead(_14);
        _11 = solana_program::log::sol_log(move _12) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        StorageDead(_12);
        drop(_16) -> [return: bb8, unwind: bb46];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = const "position/market market_index unequal";
        _31 = &(*_32);
        _30 = solana_program::log::sol_log(move _31) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_33);
        _33 = _10;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _33);
        StorageDead(_33);
        StorageDead(_10);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_5);
        _34 = discriminant(_4);
        switchInt(move _34) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_38);
        _38 = ((_4 as Continue).0: ());
        _3 = _38;
        StorageDead(_38);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).1: i64);
        _48 = core::num::<impl i64>::unsigned_abs(move _49) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb43;
    }

    bb16: {
        StorageDead(_49);
        _47 = <u64 as Cast>::cast::<u64>(move _48) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_48);
        _46 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        _50 = discriminant(_46);
        switchInt(move _50) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_54);
        _54 = ((_46 as Continue).0: u64);
        _45 = _54;
        StorageDead(_54);
        StorageLive(_55);
        _55 = (((*_2).1: state::perp_market::AMM).52: u64);
        _44 = math::orders::is_multiple_of_step_size(move _45, move _55) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_51);
        _51 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb41;
    }

    bb22: {
        StorageDead(_55);
        StorageDead(_45);
        _43 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _44) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_44);
        _56 = discriminant(_43);
        switchInt(move _56) -> [0: bb24, 1: bb25, otherwise: bb13];
    }

    bb24: {
        StorageLive(_60);
        _60 = ((_43 as Continue).0: bool);
        _42 = _60;
        StorageDead(_60);
        switchInt(move _42) -> [0: bb28, otherwise: bb27];
    }

    bb25: {
        StorageLive(_57);
        _57 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb41;
    }

    bb27: {
        StorageDead(_46);
        StorageDead(_43);
        StorageLive(_61);
        _61 = ();
        _41 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb36;
    }

    bb28: {
        StorageDead(_46);
        StorageDead(_43);
        StorageLive(_62);
        _62 = error::ErrorCode::InvalidPerpPositionDetected;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _92 = const _;
        _73 = &(*_92);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_62;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _80) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb32, unwind: bb44];
    }

    bb32: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        StorageDead(_64);
        drop(_68) -> [return: bb34, unwind: bb46];
    }

    bb34: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = const "position not multiple of stepsize";
        _83 = &(*_84);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_83);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_85);
        _85 = _62;
        _41 = std::result::Result::<(), error::ErrorCode>::Err(move _85);
        StorageDead(_85);
        StorageDead(_62);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_42);
        _40 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _41) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_41);
        _86 = discriminant(_40);
        switchInt(move _86) -> [0: bb38, 1: bb39, otherwise: bb13];
    }

    bb38: {
        StorageLive(_90);
        _90 = ((_40 as Continue).0: ());
        _39 = _90;
        StorageDead(_90);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_91);
        _91 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _91);
        StorageDead(_91);
        goto -> bb43;
    }

    bb39: {
        StorageLive(_87);
        _87 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_68) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_16) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }
}
