digraph Mir_0_18245 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;state::state::FeeStructure as Clone&gt;::clone(_1: &amp;ReErased state::state::FeeStructure) -&gt; state::state::FeeStructure<br align="left"/>let mut _2: [state::state::FeeTier; 10_usize];<br align="left"/>let mut _3: &amp;ReErased [state::state::FeeTier; 10_usize];<br align="left"/>let _4: &amp;ReErased [state::state::FeeTier; 10_usize];<br align="left"/>let mut _5: state::state::OrderFillerRewardStructure;<br align="left"/>let mut _6: &amp;ReErased state::state::OrderFillerRewardStructure;<br align="left"/>let _7: &amp;ReErased state::state::OrderFillerRewardStructure;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: &amp;ReErased u64;<br align="left"/>let _10: &amp;ReErased u64;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: &amp;ReErased u64;<br align="left"/>let _13: &amp;ReErased u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_18245 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;((*_1).0: [state::state::FeeTier; 10])<br/>_3 = &amp;(*_4)<br/></td></tr><tr><td align="left">_2 = &lt;[state::state::FeeTier; 10] as Clone&gt;::clone(move _3)</td></tr></table>>];
    bb1__0_18245 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;((*_1).1: state::state::OrderFillerRewardStructure)<br/>_6 = &amp;(*_7)<br/></td></tr><tr><td align="left">_5 = &lt;OrderFillerRewardStructure as Clone&gt;::clone(move _6)</td></tr></table>>];
    bb2__0_18245 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;((*_1).2: u64)<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_8 = &lt;u64 as Clone&gt;::clone(move _9)</td></tr></table>>];
    bb3__0_18245 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;((*_1).3: u64)<br/>_12 = &amp;(*_13)<br/></td></tr><tr><td align="left">_11 = &lt;u64 as Clone&gt;::clone(move _12)</td></tr></table>>];
    bb4__0_18245 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_0 = state::state::FeeStructure { fee_tiers: move _2, filler_reward_structure: move _5, referrer_reward_epoch_upper_bound: move _8, flat_filler_fee: move _11 }<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_2)<br/>StorageDead(_13)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_18245 -> bb1__0_18245 [label="return"];
    bb1__0_18245 -> bb2__0_18245 [label="return"];
    bb2__0_18245 -> bb3__0_18245 [label="return"];
    bb3__0_18245 -> bb4__0_18245 [label="return"];
}
