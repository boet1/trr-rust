// MIR for `cancel_order_by_order_id` after PreCodegen

fn cancel_order_by_order_id(_1: u32, _2: &anchor_lang::prelude::AccountLoader<'_, User>, _3: &PerpMarketMap<'_>, _4: &SpotMarketMap<'_>, _5: &mut OracleMap<'_>, _6: &anchor_lang::prelude::Clock) -> std::result::Result<(), error::ErrorCode> {
    debug order_id => _1;
    debug user => _2;
    debug perp_market_map => _3;
    debug spot_market_map => _4;
    debug oracle_map => _5;
    debug clock => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _10: std::cell::RefMut<'_, state::user::User>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _12: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _13: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _15: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: std::result::Result<usize, error::ErrorCode>;
    let mut _23: &state::user::User;
    let _24: &state::user::User;
    let mut _25: &std::cell::RefMut<'_, state::user::User>;
    let mut _26: u32;
    let mut _27: isize;
    let mut _29: !;
    let _30: ();
    let mut _31: &str;
    let _32: &str;
    let mut _33: &std::string::String;
    let _34: &std::string::String;
    let _35: std::string::String;
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[&str; 1];
    let _40: &[&str; 1];
    let _41: [&str; 1];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let mut _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: [core::fmt::rt::Argument<'_>; 1];
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &u32;
    let _48: &u32;
    let mut _49: ();
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: usize;
    let mut _54: &mut state::user::User;
    let mut _55: &mut state::user::User;
    let mut _56: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _57: &anchor_lang::prelude::Pubkey;
    let _58: &anchor_lang::prelude::Pubkey;
    let mut _59: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _60: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _61: &mut state::oracle_map::OracleMap<'_>;
    let mut _62: i64;
    let mut _63: u64;
    let mut _64: state::events::OrderActionExplanation;
    let mut _65: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: ();
    let mut _72: &mut state::user::User;
    let mut _73: &mut state::user::User;
    let mut _74: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _75: u64;
    let mut _76: ();
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    scope 1 {
        debug user_key => _7;
        let _9: &mut std::cell::RefMut<'_, state::user::User>;
        let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _20: std::cell::RefMut<'_, state::user::User>;
        scope 2 {
            debug user => _9;
            let _21: usize;
            let _28: usize;
            let _36: std::string::String;
            let mut _77: &[&str; 1];
            scope 7 {
                debug order_index => _21;
                let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _70: ();
                scope 10 {
                    debug residual => _67;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _70;
                    scope 13 {
                    }
                }
            }
            scope 8 {
                debug order_index => _28;
            }
            scope 9 {
                debug res => _36;
            }
        }
        scope 3 {
            debug residual => _17;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _20;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_2);
        _7 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_2);
        _13 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _12 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _13, move _15) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_13);
        _11 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _12) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        StorageDead(_12);
        _16 = discriminant(_11);
        switchInt(move _16) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_20);
        _20 = move ((_11 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _10 = move _20;
        StorageDead(_20);
        _9 = &mut _10;
        _80 = discriminant(_11);
        StorageDead(_11);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_9);
        _24 = <RefMut<'_, User> as Deref>::deref(move _25) -> [return: bb9, unwind: bb32];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_17);
        _17 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _78 = discriminant(_11);
        StorageDead(_11);
        goto -> bb29;
    }

    bb9: {
        _23 = &(*_24);
        StorageDead(_25);
        StorageLive(_26);
        _26 = _1;
        _22 = User::get_order_index(move _23, move _26) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_23);
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb12, 1: bb11, otherwise: bb6];
    }

    bb11: {
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _77 = const _;
        _40 = &(*_77);
        _39 = &(*_40);
        _38 = move _39 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_1;
        _47 = &(*_48);
        _46 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _47) -> [return: bb13, unwind: bb32];
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_22 as Ok).0: usize);
        _21 = _28;
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _21;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut (*_9);
        _55 = <RefMut<'_, User> as DerefMut>::deref_mut(move _56) -> [return: bb19, unwind: bb32];
    }

    bb13: {
        StorageDead(_47);
        _45 = [move _46];
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = move _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_43);
        _37 = Arguments::<'_>::new_v1(move _38, move _42) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        StorageDead(_42);
        StorageDead(_38);
        _36 = format(move _37) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_40);
        _35 = move _36;
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = <String as Deref>::deref(move _33) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _31 = &(*_32);
        StorageDead(_33);
        _30 = solana_program::log::sol_log(move _31) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        StorageDead(_31);
        drop(_35) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_49);
        _49 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _49);
        StorageDead(_49);
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb28;
    }

    bb19: {
        _54 = &mut (*_55);
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_7;
        _57 = &(*_58);
        StorageLive(_59);
        _59 = &(*_3);
        StorageLive(_60);
        _60 = &(*_4);
        StorageLive(_61);
        _61 = &mut (*_5);
        StorageLive(_62);
        _62 = ((*_6).4: i64);
        StorageLive(_63);
        _63 = ((*_6).0: u64);
        StorageLive(_64);
        _64 = OrderActionExplanation::None;
        StorageLive(_65);
        _65 = Option::<&anchor_lang::prelude::Pubkey>::None;
        _52 = controller::orders::cancel_order(move _53, move _54, move _57, move _59, move _60, move _61, move _62, move _63, move _64, move _65, const 0_u64, const false) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        StorageDead(_52);
        _66 = discriminant(_51);
        switchInt(move _66) -> [0: bb22, 1: bb23, otherwise: bb6];
    }

    bb22: {
        StorageLive(_70);
        _70 = ((_51 as Continue).0: ());
        _50 = _70;
        StorageDead(_70);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &mut (*_9);
        _73 = <RefMut<'_, User> as DerefMut>::deref_mut(move _74) -> [return: bb25, unwind: bb32];
    }

    bb23: {
        StorageLive(_67);
        _67 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb28;
    }

    bb25: {
        _72 = &mut (*_73);
        StorageDead(_74);
        StorageLive(_75);
        _75 = ((*_6).0: u64);
        _71 = User::update_last_active_slot(move _72, move _75) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_76);
        _76 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _76);
        StorageDead(_76);
        StorageDead(_21);
        drop(_10) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_21);
        drop(_10) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_35) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_10) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34 (cleanup): {
        _82 = discriminant(_11);
        goto -> bb33;
    }
}
