// MIR for `keeper::handle_liquidate_perp_with_fill` before PreCodegen

fn keeper::handle_liquidate_perp_with_fill(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::LiquidatePerp<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: anchor_lang::prelude::Clock;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _15: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _20: anchor_lang::prelude::Clock;
    let mut _23: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _26: ();
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _28: std::result::Result<(), error::ErrorCode>;
    let mut _29: bool;
    let mut _30: &anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::Pubkey;
    let mut _32: ();
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &std::string::String;
    let _39: std::string::String;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[&str; 2];
    let _44: &[&str; 2];
    let _45: [&str; 2];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let mut _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: [core::fmt::rt::Argument<'_>; 1];
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &error::ErrorCode;
    let _52: &error::ErrorCode;
    let mut _53: error::ErrorCode;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _61: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _66: instructions::optional_accounts::AccountMaps<'_>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _68: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _69: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _70: &std::collections::BTreeSet<u16>;
    let _71: &std::collections::BTreeSet<u16>;
    let _72: std::collections::BTreeSet<u16>;
    let mut _73: u16;
    let mut _74: &std::collections::BTreeSet<u16>;
    let _75: &std::collections::BTreeSet<u16>;
    let _76: std::collections::BTreeSet<u16>;
    let mut _77: u64;
    let mut _78: std::option::Option<state::state::OracleGuardRails>;
    let mut _79: state::state::OracleGuardRails;
    let mut _80: &state::state::State;
    let mut _81: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>)>;
    let mut _91: std::result::Result<(state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>), error::ErrorCode>;
    let mut _92: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _98: ();
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _100: std::result::Result<(), error::ErrorCode>;
    let mut _101: u16;
    let mut _102: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _103: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _104: &anchor_lang::prelude::Pubkey;
    let _105: &anchor_lang::prelude::Pubkey;
    let mut _106: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _107: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _108: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _109: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _110: &anchor_lang::prelude::Pubkey;
    let _111: &anchor_lang::prelude::Pubkey;
    let mut _112: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _113: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _114: &state::user_map::UserMap<'_>;
    let _115: &state::user_map::UserMap<'_>;
    let mut _116: &state::user_map::UserStatsMap<'_>;
    let _117: &state::user_map::UserStatsMap<'_>;
    let mut _118: &state::perp_market_map::PerpMarketMap<'_>;
    let _119: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _120: &state::spot_market_map::SpotMarketMap<'_>;
    let _121: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _122: &mut state::oracle_map::OracleMap<'_>;
    let mut _123: &mut state::oracle_map::OracleMap<'_>;
    let mut _124: &anchor_lang::prelude::Clock;
    let _125: &anchor_lang::prelude::Clock;
    let mut _126: &state::state::State;
    let _127: &state::state::State;
    let mut _128: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _134: ();
    let mut _136: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _137: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _138: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _139: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _140: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _141: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _142: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _143: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _144: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _145: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _146: &mut instructions::keeper::LiquidatePerp<'_>;
    let mut _147: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _171: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _172: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _21: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _21;
            let _22: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug user_key => _22;
                let _24: anchor_lang::prelude::Pubkey;
                scope 12 {
                    debug liquidator_key => _24;
                    let _33: error::ErrorCode;
                    let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _58: ();
                    let _59: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                    scope 13 {
                        debug error_code => _33;
                        let _40: std::string::String;
                        let mut _135: &[&str; 2];
                        scope 14 {
                            debug res => _40;
                        }
                    }
                    scope 15 {
                        debug residual => _55;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _58;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug remaining_accounts_iter => _59;
                        let _63: state::perp_market_map::PerpMarketMap<'_>;
                        let _64: state::spot_market_map::SpotMarketMap<'_>;
                        let mut _65: state::oracle_map::OracleMap<'_>;
                        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _86: instructions::optional_accounts::AccountMaps<'_>;
                        scope 20 {
                            debug perp_market_map => _63;
                            debug spot_market_map => _64;
                            debug oracle_map => _65;
                            let _87: state::user_map::UserMap<'_>;
                            let _88: state::user_map::UserStatsMap<'_>;
                            let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _97: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>);
                            scope 25 {
                                debug makers_and_referrer => _87;
                                debug makers_and_referrer_stats => _88;
                                let _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _133: ();
                                scope 30 {
                                    debug residual => _130;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug val => _133;
                                    scope 33 {
                                    }
                                }
                            }
                            scope 26 {
                                debug residual => _94;
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug val => _97;
                                scope 29 {
                                }
                            }
                        }
                        scope 21 {
                            debug residual => _83;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug val => _86;
                            scope 24 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _136 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _7 = &((*_136).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _137 = deref_copy (*_7);
        _170 = (((_137.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_170);
        _5 = constraints::liq_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb77];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _148 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb81];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _162 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb67;
    }

    bb7: {
        _14 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb8, unwind: bb77];
    }

    bb8: {
        StorageDead(_15);
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_14 as Continue).0: anchor_lang::prelude::Clock);
        _13 = move _20;
        StorageDead(_20);
        _150 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_21);
        _138 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _21 = &((*_138).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_22);
        StorageLive(_23);
        _139 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _23 = &((*_139).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _22 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _23) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _19) -> [return: bb11, unwind: bb80];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _160 = discriminant(_14);
        StorageDead(_14);
        goto -> bb66;
    }

    bb12: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _140 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _25 = &((*_140).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _24 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_22;
        StorageLive(_31);
        _31 = &_24;
        _29 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _30, move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _29) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_32);
        _32 = ();
        _28 = std::result::Result::<(), error::ErrorCode>::Ok(move _32);
        StorageDead(_32);
        goto -> bb23;
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_33);
        _33 = error::ErrorCode::UserCantLiquidateThemself;
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _135 = const _;
        _44 = &(*_135);
        _43 = &(*_44);
        _42 = move _43 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_33;
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _51) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_51);
        _49 = [move _50];
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = move _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_47);
        _41 = Arguments::<'_>::new_v1(move _42, move _46) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_46);
        StorageDead(_42);
        _40 = format(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_44);
        _39 = move _40;
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = <String as Deref>::deref(move _37) -> [return: bb20, unwind: bb76];
    }

    bb20: {
        _35 = &(*_36);
        StorageDead(_37);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb21, unwind: bb76];
    }

    bb21: {
        StorageDead(_35);
        drop(_39) -> [return: bb22, unwind: bb77];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_53);
        _53 = _33;
        _28 = std::result::Result::<(), error::ErrorCode>::Err(move _53);
        StorageDead(_53);
        StorageDead(_33);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_29);
        _27 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _28) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_28);
        _54 = discriminant(_27);
        switchInt(move _54) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_58);
        _58 = ((_27 as Continue).0: ());
        _26 = _58;
        StorageDead(_58);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _141 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _62 = &(*_141);
        _61 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _62) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_55);
        _55 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb65;
    }

    bb28: {
        StorageDead(_62);
        _60 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _61) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_61);
        _59 = &mut _60;
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_59);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _2;
        _72 = get_writable_perp_market_set(move _73) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = BTreeSet::<u16>::new() -> [return: bb31, unwind: bb75];
    }

    bb31: {
        _75 = &_76;
        _74 = &(*_75);
        StorageLive(_77);
        _77 = (_13.0: u64);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _142 = deref_copy (*_21);
        _171 = (((_142.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _81 = &(*_171);
        _80 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _81) -> [return: bb32, unwind: bb74];
    }

    bb32: {
        StorageDead(_81);
        _79 = ((*_80).7: state::state::OracleGuardRails);
        _78 = Option::<state::state::OracleGuardRails>::Some(move _79);
        StorageDead(_79);
        _68 = load_maps(move _69, move _70, move _74, move _77, move _78) -> [return: bb33, unwind: bb74];
    }

    bb33: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _68) -> [return: bb34, unwind: bb74];
    }

    bb34: {
        StorageDead(_68);
        _82 = discriminant(_67);
        switchInt(move _82) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_86);
        _86 = move ((_67 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _66 = move _86;
        StorageDead(_86);
        StorageLive(_63);
        _63 = move (_66.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_64);
        _64 = move (_66.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_65);
        _65 = move (_66.2: state::oracle_map::OracleMap<'_>);
        _154 = discriminant(_67);
        StorageDead(_80);
        drop(_76) -> [return: bb38, unwind: bb70];
    }

    bb36: {
        StorageLive(_83);
        _83 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_83);
        _152 = discriminant(_67);
        StorageDead(_80);
        drop(_76) -> [return: bb62, unwind: bb75];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_75);
        drop(_72) -> [return: bb39, unwind: bb71];
    }

    bb39: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &mut (*_59);
        _91 = load_user_maps::<'_, '_>(move _92, const true) -> [return: bb40, unwind: bb71];
    }

    bb40: {
        StorageDead(_92);
        _90 = <std::result::Result<(UserMap<'_>, UserStatsMap<'_>), error::ErrorCode> as Try>::branch(move _91) -> [return: bb41, unwind: bb71];
    }

    bb41: {
        StorageDead(_91);
        _93 = discriminant(_90);
        switchInt(move _93) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_97);
        _97 = move ((_90 as Continue).0: (state::user_map::UserMap<'_>, state::user_map::UserStatsMap<'_>));
        _89 = move _97;
        StorageDead(_97);
        StorageLive(_87);
        _87 = move (_89.0: state::user_map::UserMap<'_>);
        StorageLive(_88);
        _88 = move (_89.1: state::user_map::UserStatsMap<'_>);
        _158 = discriminant(_90);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _2;
        StorageLive(_102);
        StorageLive(_103);
        _143 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _103 = &((*_143).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _102 = &(*_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_22;
        _104 = &(*_105);
        StorageLive(_106);
        StorageLive(_107);
        _144 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _107 = &((*_144).5: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _106 = &(*_107);
        StorageLive(_108);
        StorageLive(_109);
        _145 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _109 = &((*_145).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _108 = &(*_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_24;
        _110 = &(*_111);
        StorageLive(_112);
        StorageLive(_113);
        _146 = deref_copy (_1.1: &mut instructions::keeper::LiquidatePerp<'_>);
        _113 = &((*_146).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _112 = &(*_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_87;
        _114 = &(*_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_88;
        _116 = &(*_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_63;
        _118 = &(*_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_64;
        _120 = &(*_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut _65;
        _122 = &mut (*_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_13;
        _124 = &(*_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _147 = deref_copy (*_21);
        _172 = (((_147.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _128 = &(*_172);
        _127 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _128) -> [return: bb45, unwind: bb68];
    }

    bb43: {
        StorageLive(_94);
        _94 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb44, unwind: bb78];
    }

    bb44: {
        StorageDead(_96);
        StorageDead(_94);
        _156 = discriminant(_90);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb58;
    }

    bb45: {
        _126 = &(*_127);
        StorageDead(_128);
        _100 = controller::liquidation::liquidate_perp_with_fill(move _101, move _102, move _104, move _106, move _108, move _110, move _112, move _114, move _116, move _118, move _120, move _122, move _124, move _126) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _100) -> [return: bb47, unwind: bb68];
    }

    bb47: {
        StorageDead(_100);
        _129 = discriminant(_99);
        switchInt(move _129) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_133);
        _133 = ((_99 as Continue).0: ());
        _98 = _133;
        StorageDead(_133);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_134);
        _134 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _134);
        StorageDead(_134);
        drop(_88) -> [return: bb51, unwind: bb69];
    }

    bb49: {
        StorageLive(_130);
        _130 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_132);
        _132 = _130;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _132) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_98);
        drop(_88) -> [return: bb56, unwind: bb69];
    }

    bb51: {
        StorageDead(_88);
        drop(_87) -> [return: bb52, unwind: bb71];
    }

    bb52: {
        StorageDead(_87);
        drop(_65) -> [return: bb53, unwind: bb72];
    }

    bb53: {
        StorageDead(_65);
        drop(_64) -> [return: bb54, unwind: bb73];
    }

    bb54: {
        StorageDead(_64);
        drop(_63) -> [return: bb55, unwind: bb77];
    }

    bb55: {
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        goto -> bb67;
    }

    bb56: {
        StorageDead(_88);
        drop(_87) -> [return: bb57, unwind: bb71];
    }

    bb57: {
        StorageDead(_87);
        goto -> bb58;
    }

    bb58: {
        drop(_65) -> [return: bb59, unwind: bb72];
    }

    bb59: {
        StorageDead(_65);
        drop(_64) -> [return: bb60, unwind: bb73];
    }

    bb60: {
        StorageDead(_64);
        drop(_63) -> [return: bb61, unwind: bb77];
    }

    bb61: {
        StorageDead(_63);
        goto -> bb64;
    }

    bb62: {
        StorageDead(_76);
        StorageDead(_75);
        drop(_72) -> [return: bb63, unwind: bb77];
    }

    bb63: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_13);
        goto -> bb67;
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_88) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_87) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_72) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_65) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_64) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_63) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_76) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_72) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_39) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        _165 = discriminant(_90);
        goto -> bb71;
    }

    bb79 (cleanup): {
        _167 = discriminant(_67);
        goto -> bb74;
    }

    bb80 (cleanup): {
        _168 = discriminant(_14);
        goto -> bb77;
    }

    bb81 (cleanup): {
        _169 = discriminant(_4);
        goto -> bb77;
    }
}
