digraph Mir_0_545 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::orders::trigger_order(_1: u32, _2: &amp;ReErased state::state::State, _3: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _4: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _5: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _6: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _7: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _8: &amp;ReErased anchor_lang::prelude::Clock) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _9: i64;<br align="left"/>let _10: u64;<br align="left"/>let _11: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _12: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let _13: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _14: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let _15: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _16: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _18: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _19: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _20: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _21: Closure(DefId(0:4712 ~ drift[d311]::controller::orders::trigger_order::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _29: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _30: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _31: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _32: std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _33: &amp;ReErased [state::user::Order];<br align="left"/>let mut _34: &amp;ReErased [state::user::Order; 32_usize];<br align="left"/>let _35: &amp;ReErased state::user::User;<br align="left"/>let mut _36: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _37: Closure(DefId(0:546 ~ drift[d311]::controller::orders::trigger_order::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased state::user::Order,)) -&gt; bool, []), (&amp;ReErased u32,)]);<br align="left"/>let mut _38: &amp;ReErased u32;<br align="left"/>let mut _39: Closure(DefId(0:4713 ~ drift[d311]::controller::orders::trigger_order::{closure#2}), [i32, Binder(extern &quot;RustCall&quot; fn(()) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _44: usize;<br align="left"/>let _45: state::user::OrderStatus;<br align="left"/>let _46: u16;<br align="left"/>let _47: state::user::MarketType;<br align="left"/>let mut _48: (state::user::OrderStatus, u16, state::user::MarketType);<br align="left"/>let mut _49: state::user::OrderStatus;<br align="left"/>let mut _50: &amp;ReErased state::user::User;<br align="left"/>let mut _51: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _52: usize;<br align="left"/>let mut _53: usize;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: u16;<br align="left"/>let mut _56: &amp;ReErased state::user::User;<br align="left"/>let mut _57: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _58: usize;<br align="left"/>let mut _59: usize;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: state::user::MarketType;<br align="left"/>let mut _62: &amp;ReErased state::user::User;<br align="left"/>let mut _63: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _64: usize;<br align="left"/>let mut _65: usize;<br align="left"/>let mut _66: bool;<br align="left"/>let _67: ();<br align="left"/>let mut _68: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _69: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _70: bool;<br align="left"/>let mut _71: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _72: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _73: state::user::OrderStatus;<br align="left"/>let mut _74: ();<br align="left"/>let _75: error::ErrorCode;<br align="left"/>let _76: ();<br align="left"/>let mut _77: &amp;ReErased str;<br align="left"/>let _78: &amp;ReErased str;<br align="left"/>let mut _79: &amp;ReErased std::string::String;<br align="left"/>let _80: &amp;ReErased std::string::String;<br align="left"/>let _81: std::string::String;<br align="left"/>let _82: std::string::String;<br align="left"/>let mut _83: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _84: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _85: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _86: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _87: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _88: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _89: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _90: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _91: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _92: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _93: &amp;ReErased error::ErrorCode;<br align="left"/>let _94: &amp;ReErased error::ErrorCode;<br align="left"/>let _95: ();<br align="left"/>let mut _96: &amp;ReErased str;<br align="left"/>let _97: &amp;ReErased str;<br align="left"/>let mut _98: error::ErrorCode;<br align="left"/>let mut _99: isize;<br align="left"/>let _100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _101: !;<br align="left"/>let mut _102: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _103: ();<br align="left"/>let _104: ();<br align="left"/>let mut _105: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _106: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _107: bool;<br align="left"/>let mut _108: &amp;ReErased state::user::Order;<br align="left"/>let _109: &amp;ReErased state::user::User;<br align="left"/>let mut _110: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _111: usize;<br align="left"/>let mut _112: usize;<br align="left"/>let mut _113: bool;<br align="left"/>let mut _114: ();<br align="left"/>let _115: error::ErrorCode;<br align="left"/>let _116: ();<br align="left"/>let mut _117: &amp;ReErased str;<br align="left"/>let _118: &amp;ReErased str;<br align="left"/>let mut _119: &amp;ReErased std::string::String;<br align="left"/>let _120: &amp;ReErased std::string::String;<br align="left"/>let _121: std::string::String;<br align="left"/>let _122: std::string::String;<br align="left"/>let mut _123: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _124: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _125: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _126: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _127: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _128: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _129: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _130: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _131: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _132: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _133: &amp;ReErased error::ErrorCode;<br align="left"/>let _134: &amp;ReErased error::ErrorCode;<br align="left"/>let _135: ();<br align="left"/>let mut _136: &amp;ReErased str;<br align="left"/>let _137: &amp;ReErased str;<br align="left"/>let mut _138: error::ErrorCode;<br align="left"/>let mut _139: isize;<br align="left"/>let _140: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _141: !;<br align="left"/>let mut _142: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _143: ();<br align="left"/>let _144: ();<br align="left"/>let mut _145: bool;<br align="left"/>let mut _146: &amp;ReErased state::user::Order;<br align="left"/>let _147: &amp;ReErased state::user::User;<br align="left"/>let mut _148: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _149: usize;<br align="left"/>let mut _150: usize;<br align="left"/>let mut _151: bool;<br align="left"/>let mut _152: !;<br align="left"/>let _153: ();<br align="left"/>let mut _154: &amp;ReErased str;<br align="left"/>let _155: &amp;ReErased str;<br align="left"/>let mut _156: ();<br align="left"/>let _157: ();<br align="left"/>let mut _158: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _159: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _160: bool;<br align="left"/>let mut _161: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _162: &amp;ReErased state::user::MarketType;<br align="left"/>let _163: state::user::MarketType;<br align="left"/>let mut _164: ();<br align="left"/>let _165: error::ErrorCode;<br align="left"/>let _166: ();<br align="left"/>let mut _167: &amp;ReErased str;<br align="left"/>let _168: &amp;ReErased str;<br align="left"/>let mut _169: &amp;ReErased std::string::String;<br align="left"/>let _170: &amp;ReErased std::string::String;<br align="left"/>let _171: std::string::String;<br align="left"/>let _172: std::string::String;<br align="left"/>let mut _173: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _174: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _175: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _176: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _177: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _178: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _179: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _180: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _181: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _182: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _183: &amp;ReErased error::ErrorCode;<br align="left"/>let _184: &amp;ReErased error::ErrorCode;<br align="left"/>let _185: ();<br align="left"/>let mut _186: &amp;ReErased str;<br align="left"/>let _187: &amp;ReErased str;<br align="left"/>let mut _188: error::ErrorCode;<br align="left"/>let mut _189: isize;<br align="left"/>let _190: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _191: !;<br align="left"/>let mut _192: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _193: ();<br align="left"/>let _194: ();<br align="left"/>let mut _195: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _196: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _197: &amp;ReErased mut state::user::User;<br align="left"/>let mut _198: &amp;ReErased mut state::user::User;<br align="left"/>let mut _199: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _200: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _201: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _202: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _203: u32;<br align="left"/>let mut _204: isize;<br align="left"/>let _205: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _206: !;<br align="left"/>let mut _207: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _208: ();<br align="left"/>let _209: ();<br align="left"/>let mut _210: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _211: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _212: bool;<br align="left"/>let mut _213: &amp;ReErased state::user::User;<br align="left"/>let _214: &amp;ReErased state::user::User;<br align="left"/>let mut _215: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _216: ();<br align="left"/>let _217: error::ErrorCode;<br align="left"/>let _218: ();<br align="left"/>let mut _219: &amp;ReErased str;<br align="left"/>let _220: &amp;ReErased str;<br align="left"/>let mut _221: &amp;ReErased std::string::String;<br align="left"/>let _222: &amp;ReErased std::string::String;<br align="left"/>let _223: std::string::String;<br align="left"/>let _224: std::string::String;<br align="left"/>let mut _225: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _226: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _227: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _228: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _229: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _230: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _231: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _232: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _233: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _234: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _235: &amp;ReErased error::ErrorCode;<br align="left"/>let _236: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _237: error::ErrorCode;<br align="left"/>let mut _238: isize;<br align="left"/>let _239: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _240: !;<br align="left"/>let mut _241: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _242: ();<br align="left"/>let mut _243: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _244: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _245: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _246: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _247: &amp;ReErased u16;<br align="left"/>let _248: &amp;ReErased u16;<br align="left"/>let mut _249: isize;<br align="left"/>let _250: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _251: !;<br align="left"/>let mut _252: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _253: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _254: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _255: math::oracle::OracleValidity;<br align="left"/>let mut _256: (&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity);<br align="left"/>let mut _257: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity)&gt;;<br align="left"/>let mut _258: std::result::Result&lt;(&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode&gt;;<br align="left"/>let mut _259: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _260: state::user::MarketType;<br align="left"/>let mut _261: u16;<br align="left"/>let mut _262: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _263: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _264: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _265: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _266: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _267: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _268: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _269: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _270: i64;<br align="left"/>let mut _271: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _272: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _273: u64;<br align="left"/>let mut _274: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _275: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _276: state::perp_market::PerpMarket;<br align="left"/>let mut _277: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _278: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _279: isize;<br align="left"/>let _280: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _281: !;<br align="left"/>let mut _282: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _283: u64;<br align="left"/>let mut _284: isize;<br align="left"/>let _285: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _286: !;<br align="left"/>let mut _287: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _288: (&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity);<br align="left"/>let _289: bool;<br align="left"/>let mut _290: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _291: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _292: math::oracle::OracleValidity;<br align="left"/>let mut _293: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _294: math::oracle::DriftAction;<br align="left"/>let mut _295: isize;<br align="left"/>let _296: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _297: !;<br align="left"/>let mut _298: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _299: bool;<br align="left"/>let _300: ();<br align="left"/>let mut _301: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _302: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _303: bool;<br align="left"/>let mut _304: ();<br align="left"/>let _305: error::ErrorCode;<br align="left"/>let _306: ();<br align="left"/>let mut _307: &amp;ReErased str;<br align="left"/>let _308: &amp;ReErased str;<br align="left"/>let mut _309: &amp;ReErased std::string::String;<br align="left"/>let _310: &amp;ReErased std::string::String;<br align="left"/>let _311: std::string::String;<br align="left"/>let _312: std::string::String;<br align="left"/>let mut _313: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _314: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _315: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _316: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _317: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _318: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _319: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _320: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _321: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _322: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _323: &amp;ReErased error::ErrorCode;<br align="left"/>let _324: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _325: error::ErrorCode;<br align="left"/>let mut _326: isize;<br align="left"/>let _327: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _328: !;<br align="left"/>let mut _329: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _330: ();<br align="left"/>let _331: i64;<br align="left"/>let _332: bool;<br align="left"/>let mut _333: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _334: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _335: i64;<br align="left"/>let mut _336: i64;<br align="left"/>let mut _337: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _338: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _339: i64;<br align="left"/>let mut _340: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _341: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _342: u64;<br align="left"/>let mut _343: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _344: isize;<br align="left"/>let _345: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _346: !;<br align="left"/>let mut _347: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _348: i64;<br align="left"/>let mut _349: isize;<br align="left"/>let _350: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _351: !;<br align="left"/>let mut _352: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _353: bool;<br align="left"/>let _354: ();<br align="left"/>let mut _355: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _356: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _357: bool;<br align="left"/>let mut _358: ();<br align="left"/>let _359: error::ErrorCode;<br align="left"/>let _360: ();<br align="left"/>let mut _361: &amp;ReErased str;<br align="left"/>let _362: &amp;ReErased str;<br align="left"/>let mut _363: &amp;ReErased std::string::String;<br align="left"/>let _364: &amp;ReErased std::string::String;<br align="left"/>let _365: std::string::String;<br align="left"/>let _366: std::string::String;<br align="left"/>let mut _367: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _368: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _369: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _370: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _371: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _372: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _373: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _374: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _375: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _376: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _377: &amp;ReErased error::ErrorCode;<br align="left"/>let _378: &amp;ReErased error::ErrorCode;<br align="left"/>let _379: ();<br align="left"/>let mut _380: &amp;ReErased str;<br align="left"/>let _381: &amp;ReErased str;<br align="left"/>let mut _382: error::ErrorCode;<br align="left"/>let mut _383: isize;<br align="left"/>let _384: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _385: !;<br align="left"/>let mut _386: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _387: ();<br align="left"/>let _388: u64;<br align="left"/>let mut _389: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _390: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _391: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _392: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _393: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _394: i64;<br align="left"/>let mut _395: i64;<br align="left"/>let mut _396: bool;<br align="left"/>let mut _397: &amp;ReErased state::state::State;<br align="left"/>let mut _398: isize;<br align="left"/>let _399: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _400: !;<br align="left"/>let mut _401: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _402: u64;<br align="left"/>let _403: bool;<br align="left"/>let mut _404: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _405: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _406: &amp;ReErased state::user::Order;<br align="left"/>let _407: &amp;ReErased state::user::Order;<br align="left"/>let _408: &amp;ReErased state::user::User;<br align="left"/>let mut _409: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _410: usize;<br align="left"/>let mut _411: usize;<br align="left"/>let mut _412: bool;<br align="left"/>let mut _413: u64;<br align="left"/>let mut _414: isize;<br align="left"/>let _415: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _416: !;<br align="left"/>let mut _417: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _418: bool;<br align="left"/>let _419: ();<br align="left"/>let mut _420: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _421: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _422: bool;<br align="left"/>let mut _423: ();<br align="left"/>let _424: error::ErrorCode;<br align="left"/>let _425: ();<br align="left"/>let mut _426: &amp;ReErased str;<br align="left"/>let _427: &amp;ReErased str;<br align="left"/>let mut _428: &amp;ReErased std::string::String;<br align="left"/>let _429: &amp;ReErased std::string::String;<br align="left"/>let _430: std::string::String;<br align="left"/>let _431: std::string::String;<br align="left"/>let mut _432: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _433: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _434: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _435: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _436: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _437: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _438: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _439: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _440: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _441: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _442: &amp;ReErased error::ErrorCode;<br align="left"/>let _443: &amp;ReErased error::ErrorCode;<br align="left"/>let _444: ();<br align="left"/>let mut _445: &amp;ReErased str;<br align="left"/>let _446: &amp;ReErased str;<br align="left"/>let mut _447: &amp;ReErased std::string::String;<br align="left"/>let _448: &amp;ReErased std::string::String;<br align="left"/>let _449: std::string::String;<br align="left"/>let _450: std::string::String;<br align="left"/>let mut _451: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _452: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _453: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _454: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _455: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _456: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _457: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _458: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _459: [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let mut _460: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _461: &amp;ReErased u64;<br align="left"/>let _462: &amp;ReErased u64;<br align="left"/>let mut _463: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _464: &amp;ReErased &amp;ReErased u64;<br align="left"/>let _465: &amp;ReErased &amp;ReErased u64;<br align="left"/>let _466: &amp;ReErased u64;<br align="left"/>let _467: &amp;ReErased state::user::User;<br align="left"/>let mut _468: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _469: usize;<br align="left"/>let mut _470: usize;<br align="left"/>let mut _471: bool;<br align="left"/>let mut _472: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _473: &amp;ReErased &amp;ReErased state::user::OrderTriggerCondition;<br align="left"/>let _474: &amp;ReErased &amp;ReErased state::user::OrderTriggerCondition;<br align="left"/>let _475: &amp;ReErased state::user::OrderTriggerCondition;<br align="left"/>let _476: &amp;ReErased state::user::User;<br align="left"/>let mut _477: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _478: usize;<br align="left"/>let mut _479: usize;<br align="left"/>let mut _480: bool;<br align="left"/>let mut _481: error::ErrorCode;<br align="left"/>let mut _482: isize;<br align="left"/>let _483: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _484: !;<br align="left"/>let mut _485: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _486: ();<br align="left"/>let _487: u128;<br align="left"/>let mut _488: (i128, u128);<br align="left"/>let mut _489: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i128, u128)&gt;;<br align="left"/>let mut _490: std::result::Result&lt;(i128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _491: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _492: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _493: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::PerpPosition&gt;;<br align="left"/>let mut _494: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _495: &amp;ReErased state::user::User;<br align="left"/>let _496: &amp;ReErased state::user::User;<br align="left"/>let mut _497: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _498: u16;<br align="left"/>let mut _499: isize;<br align="left"/>let _500: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _501: !;<br align="left"/>let mut _502: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _503: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _504: i64;<br align="left"/>let mut _505: state::perp_market::ContractType;<br align="left"/>let mut _506: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _507: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _508: isize;<br align="left"/>let _509: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _510: !;<br align="left"/>let mut _511: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _512: (i128, u128);<br align="left"/>let _513: ();<br align="left"/>let _514: ();<br align="left"/>let mut _515: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _516: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _517: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _518: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _519: &amp;ReErased mut state::user::User;<br align="left"/>let mut _520: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _521: usize;<br align="left"/>let mut _522: usize;<br align="left"/>let mut _523: bool;<br align="left"/>let mut _524: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _525: u64;<br align="left"/>let mut _526: std::option::Option&lt;&amp;ReErased state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _527: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _528: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _529: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _530: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _531: isize;<br align="left"/>let _532: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _533: !;<br align="left"/>let mut _534: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _535: ();<br align="left"/>let _536: ();<br align="left"/>let mut _537: bool;<br align="left"/>let mut _538: &amp;ReErased state::user::Order;<br align="left"/>let _539: &amp;ReErased state::user::User;<br align="left"/>let mut _540: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _541: usize;<br align="left"/>let mut _542: usize;<br align="left"/>let mut _543: bool;<br align="left"/>let _544: ();<br align="left"/>let mut _545: &amp;ReErased mut state::user::User;<br align="left"/>let mut _546: &amp;ReErased mut state::user::User;<br align="left"/>let mut _547: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _548: controller::position::PositionDirection;<br align="left"/>let mut _549: &amp;ReErased state::user::User;<br align="left"/>let mut _550: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _551: usize;<br align="left"/>let mut _552: usize;<br align="left"/>let mut _553: bool;<br align="left"/>let _554: u64;<br align="left"/>let mut _555: &amp;ReErased state::user::User;<br align="left"/>let mut _556: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _557: usize;<br align="left"/>let mut _558: usize;<br align="left"/>let mut _559: bool;<br align="left"/>let _560: bool;<br align="left"/>let mut _561: &amp;ReErased state::user::Order;<br align="left"/>let _562: &amp;ReErased state::user::User;<br align="left"/>let mut _563: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _564: usize;<br align="left"/>let mut _565: usize;<br align="left"/>let mut _566: bool;<br align="left"/>let _567: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _568: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::PerpPosition&gt;;<br align="left"/>let mut _569: std::result::Result&lt;&amp;ReErased mut state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _570: &amp;ReErased mut state::user::User;<br align="left"/>let mut _571: &amp;ReErased mut state::user::User;<br align="left"/>let mut _572: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _573: u16;<br align="left"/>let mut _574: isize;<br align="left"/>let _575: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _576: !;<br align="left"/>let mut _577: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _578: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _579: ();<br align="left"/>let mut _580: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _581: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _582: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _583: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _584: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _585: u64;<br align="left"/>let mut _586: bool;<br align="left"/>let mut _587: isize;<br align="left"/>let _588: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _589: !;<br align="left"/>let mut _590: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _591: ();<br align="left"/>let _592: bool;<br align="left"/>let mut _593: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _594: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _595: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _596: bool;<br align="left"/>let mut _597: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _598: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _599: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _600: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _601: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _602: Closure(DefId(0:4714 ~ drift[d311]::controller::orders::trigger_order::{closure#3}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _603: isize;<br align="left"/>let _604: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _605: !;<br align="left"/>let mut _606: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _607: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _608: u64;<br align="left"/>let mut _609: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _610: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _611: &amp;ReErased mut state::user::User;<br align="left"/>let mut _612: &amp;ReErased mut state::user::User;<br align="left"/>let mut _613: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _614: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _615: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _616: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _617: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _618: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _619: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _620: u64;<br align="left"/>let mut _621: u64;<br align="left"/>let mut _622: isize;<br align="left"/>let _623: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _624: !;<br align="left"/>let mut _625: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _626: u64;<br align="left"/>let _627: state::events::OrderActionRecord;<br align="left"/>let mut _628: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _629: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _630: i64;<br align="left"/>let mut _631: state::events::OrderAction;<br align="left"/>let mut _632: state::events::OrderActionExplanation;<br align="left"/>let mut _633: u16;<br align="left"/>let mut _634: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _635: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _636: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _637: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _638: u64;<br align="left"/>let mut _639: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _640: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _641: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _642: u64;<br align="left"/>let mut _643: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _644: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _645: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _646: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _647: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _648: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _649: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _650: state::user::Order;<br align="left"/>let mut _651: &amp;ReErased state::user::User;<br align="left"/>let mut _652: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _653: usize;<br align="left"/>let mut _654: usize;<br align="left"/>let mut _655: bool;<br align="left"/>let mut _656: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _657: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _658: i64;<br align="left"/>let mut _659: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _660: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _661: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _662: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _663: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _664: u64;<br align="left"/>let mut _665: isize;<br align="left"/>let _666: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _667: !;<br align="left"/>let mut _668: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _669: state::events::OrderActionRecord;<br align="left"/>let _670: ();<br align="left"/>let _671: ();<br align="left"/>let mut _672: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _673: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _674: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _675: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _676: &amp;ReErased [u8];<br align="left"/>let _677: &amp;ReErased [u8];<br align="left"/>let mut _678: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _679: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _680: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _681: &amp;ReErased state::events::OrderActionRecord;<br align="left"/>let _682: &amp;ReErased state::events::OrderActionRecord;<br align="left"/>let _683: u128;<br align="left"/>let mut _684: (i128, u128);<br align="left"/>let mut _685: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i128, u128)&gt;;<br align="left"/>let mut _686: std::result::Result&lt;(i128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _687: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _688: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _689: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::PerpPosition&gt;;<br align="left"/>let mut _690: std::result::Result&lt;&amp;ReErased state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _691: &amp;ReErased state::user::User;<br align="left"/>let _692: &amp;ReErased state::user::User;<br align="left"/>let mut _693: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _694: u16;<br align="left"/>let mut _695: isize;<br align="left"/>let _696: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _697: !;<br align="left"/>let mut _698: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _699: &amp;ReErased state::user::PerpPosition;<br align="left"/>let mut _700: i64;<br align="left"/>let mut _701: state::perp_market::ContractType;<br align="left"/>let mut _702: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _703: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _704: isize;<br align="left"/>let _705: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _706: !;<br align="left"/>let mut _707: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _708: (i128, u128);<br align="left"/>let _709: bool;<br align="left"/>let mut _710: u128;<br align="left"/>let mut _711: u128;<br align="left"/>let _712: ();<br align="left"/>let mut _713: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _714: ();<br align="left"/>let mut _715: bool;<br align="left"/>let mut _716: bool;<br align="left"/>let mut _717: &amp;ReErased state::user::User;<br align="left"/>let mut _718: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _719: usize;<br align="left"/>let mut _720: usize;<br align="left"/>let mut _721: bool;<br align="left"/>let _722: bool;<br align="left"/>let mut _723: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _724: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _725: &amp;ReErased state::user::User;<br align="left"/>let _726: &amp;ReErased state::user::User;<br align="left"/>let mut _727: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _728: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _729: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _730: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _731: isize;<br align="left"/>let _732: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _733: !;<br align="left"/>let mut _734: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _735: bool;<br align="left"/>let mut _736: bool;<br align="left"/>let _737: ();<br align="left"/>let mut _738: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _739: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _740: usize;<br align="left"/>let mut _741: &amp;ReErased mut state::user::User;<br align="left"/>let mut _742: &amp;ReErased mut state::user::User;<br align="left"/>let mut _743: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _744: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _745: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _746: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _747: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _748: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _749: i64;<br align="left"/>let mut _750: u64;<br align="left"/>let mut _751: state::events::OrderActionExplanation;<br align="left"/>let mut _752: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _753: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _754: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _755: isize;<br align="left"/>let _756: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _757: !;<br align="left"/>let mut _758: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _759: ();<br align="left"/>let _760: ();<br align="left"/>let mut _761: &amp;ReErased mut state::user::User;<br align="left"/>let mut _762: &amp;ReErased mut state::user::User;<br align="left"/>let mut _763: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _764: u64;<br align="left"/>let mut _765: ();<br align="left"/>let mut _766: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let mut _767: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _768: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _769: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _770: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _771: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _772: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _773: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _774: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _775: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _776: bool;<br align="left"/>let mut _777: isize;<br align="left"/>let mut _778: isize;<br align="left"/>let mut _779: isize;<br align="left"/>let mut _780: isize;<br align="left"/>let mut _781: isize;<br align="left"/>let mut _782: isize;<br align="left"/>let mut _783: isize;<br align="left"/>let mut _784: isize;<br align="left"/>let mut _785: isize;<br align="left"/>let mut _786: isize;<br align="left"/>let mut _787: isize;<br align="left"/>let mut _788: isize;<br align="left"/>let mut _789: isize;<br align="left"/>let mut _790: isize;<br align="left"/>let mut _791: isize;<br align="left"/>debug order_id =&gt; _1;<br align="left"/>debug state =&gt; _2;<br align="left"/>debug user =&gt; _3;<br align="left"/>debug spot_market_map =&gt; _4;<br align="left"/>debug perp_market_map =&gt; _5;<br align="left"/>debug oracle_map =&gt; _6;<br align="left"/>debug filler =&gt; _7;<br align="left"/>debug clock =&gt; _8;<br align="left"/>debug now =&gt; _9;<br align="left"/>debug slot =&gt; _10;<br align="left"/>debug filler_key =&gt; _11;<br align="left"/>debug user_key =&gt; _13;<br align="left"/>debug user =&gt; _15;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug order_index =&gt; _27;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug order_status =&gt; _45;<br align="left"/>debug market_index =&gt; _46;<br align="left"/>debug market_type =&gt; _47;<br align="left"/>debug error_code =&gt; _75;<br align="left"/>debug res =&gt; _82;<br align="left"/>debug residual =&gt; _100;<br align="left"/>debug val =&gt; _103;<br align="left"/>debug error_code =&gt; _115;<br align="left"/>debug res =&gt; _122;<br align="left"/>debug residual =&gt; _140;<br align="left"/>debug val =&gt; _143;<br align="left"/>debug error_code =&gt; _165;<br align="left"/>debug res =&gt; _172;<br align="left"/>debug residual =&gt; _190;<br align="left"/>debug val =&gt; _193;<br align="left"/>debug residual =&gt; _205;<br align="left"/>debug val =&gt; _208;<br align="left"/>debug error_code =&gt; _217;<br align="left"/>debug res =&gt; _224;<br align="left"/>debug residual =&gt; _239;<br align="left"/>debug val =&gt; _242;<br align="left"/>debug perp_market =&gt; _243;<br align="left"/>debug residual =&gt; _250;<br align="left"/>debug val =&gt; _253;<br align="left"/>debug oracle_price_data =&gt; _254;<br align="left"/>debug oracle_validity =&gt; _255;<br align="left"/>debug residual =&gt; _280;<br align="left"/>debug val =&gt; _283;<br align="left"/>debug residual =&gt; _285;<br align="left"/>debug val =&gt; _288;<br align="left"/>debug is_oracle_valid =&gt; _289;<br align="left"/>debug residual =&gt; _296;<br align="left"/>debug val =&gt; _299;<br align="left"/>debug error_code =&gt; _305;<br align="left"/>debug res =&gt; _312;<br align="left"/>debug residual =&gt; _327;<br align="left"/>debug val =&gt; _330;<br align="left"/>debug oracle_price =&gt; _331;<br align="left"/>debug oracle_too_divergent_with_twap_5min =&gt; _332;<br align="left"/>debug residual =&gt; _345;<br align="left"/>debug val =&gt; _348;<br align="left"/>debug residual =&gt; _350;<br align="left"/>debug val =&gt; _353;<br align="left"/>debug error_code =&gt; _359;<br align="left"/>debug res =&gt; _366;<br align="left"/>debug residual =&gt; _384;<br align="left"/>debug val =&gt; _387;<br align="left"/>debug trigger_price =&gt; _388;<br align="left"/>debug residual =&gt; _399;<br align="left"/>debug val =&gt; _402;<br align="left"/>debug can_trigger =&gt; _403;<br align="left"/>debug residual =&gt; _415;<br align="left"/>debug val =&gt; _418;<br align="left"/>debug error_code =&gt; _424;<br align="left"/>debug res =&gt; _431;<br align="left"/>debug res =&gt; _450;<br align="left"/>debug residual =&gt; _483;<br align="left"/>debug val =&gt; _486;<br align="left"/>debug worst_case_liability_value_before =&gt; _487;<br align="left"/>debug residual =&gt; _500;<br align="left"/>debug val =&gt; _503;<br align="left"/>debug residual =&gt; _509;<br align="left"/>debug val =&gt; _512;<br align="left"/>debug residual =&gt; _532;<br align="left"/>debug val =&gt; _535;<br align="left"/>debug direction =&gt; _548;<br align="left"/>debug base_asset_amount =&gt; _554;<br align="left"/>debug update_open_bids_and_asks =&gt; _560;<br align="left"/>debug user_position =&gt; _567;<br align="left"/>debug residual =&gt; _575;<br align="left"/>debug val =&gt; _578;<br align="left"/>debug residual =&gt; _588;<br align="left"/>debug val =&gt; _591;<br align="left"/>debug is_filler_taker =&gt; _592;<br align="left"/>debug filler =&gt; _595;<br align="left"/>debug residual =&gt; _604;<br align="left"/>debug val =&gt; _607;<br align="left"/>debug filler_reward =&gt; _608;<br align="left"/>debug residual =&gt; _623;<br align="left"/>debug val =&gt; _626;<br align="left"/>debug order_action_record =&gt; _627;<br align="left"/>debug residual =&gt; _666;<br align="left"/>debug val =&gt; _669;<br align="left"/>debug worst_case_liability_value_after =&gt; _683;<br align="left"/>debug residual =&gt; _696;<br align="left"/>debug val =&gt; _699;<br align="left"/>debug residual =&gt; _705;<br align="left"/>debug val =&gt; _708;<br align="left"/>debug is_risk_increasing =&gt; _709;<br align="left"/>debug meets_initial_margin_requirement =&gt; _722;<br align="left"/>debug residual =&gt; _732;<br align="left"/>debug val =&gt; _735;<br align="left"/>debug residual =&gt; _756;<br align="left"/>debug val =&gt; _759;<br align="left"/>>;
    bb0__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_776 = const false<br/>StorageLive(_9)<br/>_9 = ((*_8).4: i64)<br/>StorageLive(_10)<br/>_10 = ((*_8).0: u64)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;(*_7)<br/></td></tr><tr><td align="left">_11 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, User&gt; as anchor_lang::Key&gt;::key(move _12)</td></tr></table>>];
    bb1__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;(*_3)<br/></td></tr><tr><td align="left">_13 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, User&gt; as anchor_lang::Key&gt;::key(move _14)</td></tr></table>>];
    bb2__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_3)<br/></td></tr><tr><td align="left">_19 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _20)</td></tr></table>>];
    bb3__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>_21 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_18 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _19, move _21)</td></tr></table>>];
    bb4__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb5__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_22 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb6__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = move ((_17 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_16 = move _26<br/>StorageDead(_26)<br/>_15 = &amp;mut _16<br/>_779 = discriminant(_17)<br/>StorageDead(_17)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;(*_15)<br/></td></tr><tr><td align="left">_35 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _36)</td></tr></table>>];
    bb7__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb9__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>_777 = discriminant(_17)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_34 = &amp;((*_35).5: [state::user::Order; 32])<br/>_33 = move _34 as &amp;[state::user::Order] (PointerCoercion(Unsize))<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = core::slice::&lt;impl [Order]&gt;::iter(move _33)</td></tr></table>>];
    bb11__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_31 = &amp;mut _32<br/>StorageDead(_33)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = &amp;_1<br/>_37 = {closure@programs/drift/src/controller/orders.rs:2950:19: 2950:26} { order_id: move _38 }<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_30 = &lt;std::slice::Iter&lt;'_, Order&gt; as Iterator&gt;::position::&lt;{closure@programs/drift/src/controller/orders.rs:2950:19: 2950:26}&gt;(move _31, move _37)</td></tr></table>>];
    bb12__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_31)<br/>StorageLive(_39)<br/>_39 = {closure@programs/drift/src/error.rs:647:9: 647:11}<br/></td></tr><tr><td align="left">_29 = Option::&lt;usize&gt;::ok_or_else::&lt;error::ErrorCode, {closure@programs/drift/src/error.rs:647:9: 647:11}&gt;(move _30, move _39)</td></tr></table>>];
    bb13__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb14__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_40 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb15__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_28 as Continue).0: usize)<br/>_27 = _44<br/>StorageDead(_44)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = &amp;(*_15)<br/></td></tr><tr><td align="left">_50 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _51)</td></tr></table>>];
    bb16__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_43)<br/>_43 = _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb17__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageLive(_52)<br/>_52 = _27<br/>_53 = Len(((*_50).5: [state::user::Order; 32]))<br/>_54 = Lt(_52, _53)<br/></td></tr><tr><td align="left">assert(move _54, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _53, _52)</td></tr></table>>];
    bb19__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_49 = (((*_50).5: [state::user::Order; 32])[_52].12: state::user::OrderStatus)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = &amp;(*_15)<br/></td></tr><tr><td align="left">_56 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _57)</td></tr></table>>];
    bb20__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageLive(_58)<br/>_58 = _27<br/>_59 = Len(((*_56).5: [state::user::Order; 32]))<br/>_60 = Lt(_58, _59)<br/></td></tr><tr><td align="left">assert(move _60, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _59, _58)</td></tr></table>>];
    bb21__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_55 = (((*_56).5: [state::user::Order; 32])[_58].11: u16)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = &amp;(*_15)<br/></td></tr><tr><td align="left">_62 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _63)</td></tr></table>>];
    bb22__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageLive(_64)<br/>_64 = _27<br/>_65 = Len(((*_62).5: [state::user::Order; 32]))<br/>_66 = Lt(_64, _65)<br/></td></tr><tr><td align="left">assert(move _66, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _65, _64)</td></tr></table>>];
    bb23__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_61 = (((*_62).5: [state::user::Order; 32])[_64].14: state::user::MarketType)<br/>_48 = (move _49, move _55, move _61)<br/>StorageDead(_61)<br/>StorageDead(_55)<br/>StorageDead(_49)<br/>StorageLive(_45)<br/>_45 = (_48.0: state::user::OrderStatus)<br/>StorageLive(_46)<br/>_46 = (_48.1: u16)<br/>StorageLive(_47)<br/>_47 = (_48.2: state::user::MarketType)<br/>StorageDead(_64)<br/>StorageDead(_62)<br/>StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_48)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_45<br/>StorageLive(_72)<br/>_775 = const _<br/>_72 = &amp;(*_775)<br/></td></tr><tr><td align="left">_70 = &lt;OrderStatus as PartialEq&gt;::eq(move _71, move _72)</td></tr></table>>];
    bb24__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">switchInt(move _70)</td></tr></table>>];
    bb25__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/>StorageLive(_74)<br/>_74 = ()<br/>_69 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _74)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/>StorageLive(_75)<br/>_75 = error::ErrorCode::OrderNotOpen<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_774 = const _<br/>_86 = &amp;(*_774)<br/>_85 = &amp;(*_86)<br/>_84 = move _85 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_85)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = &amp;_75<br/>_93 = &amp;(*_94)<br/></td></tr><tr><td align="left">_92 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _93)</td></tr></table>>];
    bb27__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>_91 = [move _92]<br/>StorageDead(_92)<br/>_90 = &amp;_91<br/>_89 = &amp;(*_90)<br/>_88 = move _89 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_83 = Arguments::&lt;'_&gt;::new_v1(move _84, move _88)</td></tr></table>>];
    bb28__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">_82 = format(move _83)</td></tr></table>>];
    bb29__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_86)<br/>_81 = move _82<br/>StorageDead(_82)<br/>_80 = &amp;_81<br/>_79 = &amp;(*_80)<br/></td></tr><tr><td align="left">_78 = &lt;String as Deref&gt;::deref(move _79)</td></tr></table>>];
    bb30__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_77 = &amp;(*_78)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">_76 = solana_program::log::sol_log(move _77)</td></tr></table>>];
    bb31__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/></td></tr><tr><td align="left">drop(_81)</td></tr></table>>];
    bb32__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_80)<br/>StorageDead(_78)<br/>StorageDead(_76)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = const &quot;Order not open&quot;<br/>_96 = &amp;(*_97)<br/></td></tr><tr><td align="left">_95 = solana_program::log::sol_log(move _96)</td></tr></table>>];
    bb33__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/>StorageDead(_97)<br/>StorageDead(_95)<br/>StorageLive(_98)<br/>_98 = _75<br/>_69 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _98)<br/>StorageDead(_98)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/></td></tr><tr><td align="left">_68 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _69)</td></tr></table>>];
    bb35__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_99 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _99)</td></tr></table>>];
    bb36__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_103)<br/>_103 = ((_68 as Continue).0: ())<br/>_67 = _103<br/>StorageDead(_103)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>_110 = &amp;(*_15)<br/></td></tr><tr><td align="left">_109 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _110)</td></tr></table>>];
    bb37__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_100)<br/>_100 = ((_68 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_102)<br/>_102 = _100<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _102)</td></tr></table>>];
    bb38__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_100)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageLive(_111)<br/>_111 = _27<br/>_112 = Len(((*_109).5: [state::user::Order; 32]))<br/>_113 = Lt(_111, _112)<br/></td></tr><tr><td align="left">assert(move _113, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _112, _111)</td></tr></table>>];
    bb40__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_108 = &amp;((*_109).5: [state::user::Order; 32])[_111]<br/></td></tr><tr><td align="left">_107 = Order::must_be_triggered(move _108)</td></tr></table>>];
    bb41__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left">switchInt(move _107)</td></tr></table>>];
    bb42__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_114)<br/>_114 = ()<br/>_106 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _114)<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_115)<br/>_115 = error::ErrorCode::OrderNotTriggerable<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>_773 = const _<br/>_126 = &amp;(*_773)<br/>_125 = &amp;(*_126)<br/>_124 = move _125 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_125)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>_134 = &amp;_115<br/>_133 = &amp;(*_134)<br/></td></tr><tr><td align="left">_132 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _133)</td></tr></table>>];
    bb44__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>_131 = [move _132]<br/>StorageDead(_132)<br/>_130 = &amp;_131<br/>_129 = &amp;(*_130)<br/>_128 = move _129 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_129)<br/></td></tr><tr><td align="left">_123 = Arguments::&lt;'_&gt;::new_v1(move _124, move _128)</td></tr></table>>];
    bb45__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">_122 = format(move _123)</td></tr></table>>];
    bb46__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageDead(_134)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>StorageDead(_126)<br/>_121 = move _122<br/>StorageDead(_122)<br/>_120 = &amp;_121<br/>_119 = &amp;(*_120)<br/></td></tr><tr><td align="left">_118 = &lt;String as Deref&gt;::deref(move _119)</td></tr></table>>];
    bb47__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_117 = &amp;(*_118)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_116 = solana_program::log::sol_log(move _117)</td></tr></table>>];
    bb48__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/></td></tr><tr><td align="left">drop(_121)</td></tr></table>>];
    bb49__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_118)<br/>StorageDead(_116)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = const &quot;Order is not triggerable&quot;<br/>_136 = &amp;(*_137)<br/></td></tr><tr><td align="left">_135 = solana_program::log::sol_log(move _136)</td></tr></table>>];
    bb50__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_137)<br/>StorageDead(_135)<br/>StorageLive(_138)<br/>_138 = _115<br/>_106 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _138)<br/>StorageDead(_138)<br/>StorageDead(_115)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/></td></tr><tr><td align="left">_105 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _106)</td></tr></table>>];
    bb52__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>_139 = discriminant(_105)<br/></td></tr><tr><td align="left">switchInt(move _139)</td></tr></table>>];
    bb53__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_143)<br/>_143 = ((_105 as Continue).0: ())<br/>_104 = _143<br/>StorageDead(_143)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageLive(_144)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>_148 = &amp;(*_15)<br/></td></tr><tr><td align="left">_147 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _148)</td></tr></table>>];
    bb54__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_140)<br/>_140 = ((_105 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_142)<br/>_142 = _140<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _142)</td></tr></table>>];
    bb55__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_140)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageLive(_149)<br/>_149 = _27<br/>_150 = Len(((*_147).5: [state::user::Order; 32]))<br/>_151 = Lt(_149, _150)<br/></td></tr><tr><td align="left">assert(move _151, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _150, _149)</td></tr></table>>];
    bb57__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_146 = &amp;((*_147).5: [state::user::Order; 32])[_149]<br/></td></tr><tr><td align="left">_145 = Order::triggered(move _146)</td></tr></table>>];
    bb58__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left">switchInt(move _145)</td></tr></table>>];
    bb59__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_147)<br/>StorageDead(_146)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>_155 = const &quot;Order is already triggered&quot;<br/>_154 = &amp;(*_155)<br/></td></tr><tr><td align="left">_153 = solana_program::log::sol_log(move _154)</td></tr></table>>];
    bb60__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_155)<br/>StorageDead(_153)<br/>StorageLive(_156)<br/>_156 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _156)<br/>StorageDead(_156)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_147)<br/>StorageDead(_146)<br/>_144 = const ()<br/>StorageDead(_145)<br/>StorageDead(_144)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>_161 = &amp;_47<br/>StorageLive(_162)<br/>_772 = const _<br/>_162 = &amp;(*_772)<br/></td></tr><tr><td align="left">_160 = &lt;state::user::MarketType as PartialEq&gt;::eq(move _161, move _162)</td></tr></table>>];
    bb62__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left">switchInt(move _160)</td></tr></table>>];
    bb63__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_162)<br/>StorageDead(_161)<br/>StorageLive(_164)<br/>_164 = ()<br/>_159 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _164)<br/>StorageDead(_164)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_162)<br/>StorageDead(_161)<br/>StorageLive(_165)<br/>_165 = error::ErrorCode::InvalidOrderMarketType<br/>StorageLive(_166)<br/>StorageLive(_167)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>_771 = const _<br/>_176 = &amp;(*_771)<br/>_175 = &amp;(*_176)<br/>_174 = move _175 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_175)<br/>StorageLive(_178)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>StorageLive(_184)<br/>_184 = &amp;_165<br/>_183 = &amp;(*_184)<br/></td></tr><tr><td align="left">_182 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _183)</td></tr></table>>];
    bb65__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_183)<br/>_181 = [move _182]<br/>StorageDead(_182)<br/>_180 = &amp;_181<br/>_179 = &amp;(*_180)<br/>_178 = move _179 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_179)<br/></td></tr><tr><td align="left">_173 = Arguments::&lt;'_&gt;::new_v1(move _174, move _178)</td></tr></table>>];
    bb66__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_178)<br/>StorageDead(_174)<br/></td></tr><tr><td align="left">_172 = format(move _173)</td></tr></table>>];
    bb67__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>StorageDead(_184)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/>StorageDead(_176)<br/>_171 = move _172<br/>StorageDead(_172)<br/>_170 = &amp;_171<br/>_169 = &amp;(*_170)<br/></td></tr><tr><td align="left">_168 = &lt;String as Deref&gt;::deref(move _169)</td></tr></table>>];
    bb68__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">_167 = &amp;(*_168)<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">_166 = solana_program::log::sol_log(move _167)</td></tr></table>>];
    bb69__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/></td></tr><tr><td align="left">drop(_171)</td></tr></table>>];
    bb70__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/>StorageDead(_170)<br/>StorageDead(_168)<br/>StorageDead(_166)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>StorageLive(_187)<br/>_187 = const &quot;Order must be a perp order&quot;<br/>_186 = &amp;(*_187)<br/></td></tr><tr><td align="left">_185 = solana_program::log::sol_log(move _186)</td></tr></table>>];
    bb71__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>StorageDead(_187)<br/>StorageDead(_185)<br/>StorageLive(_188)<br/>_188 = _165<br/>_159 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _188)<br/>StorageDead(_188)<br/>StorageDead(_165)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_160)<br/></td></tr><tr><td align="left">_158 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _159)</td></tr></table>>];
    bb73__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>_189 = discriminant(_158)<br/></td></tr><tr><td align="left">switchInt(move _189)</td></tr></table>>];
    bb74__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageLive(_193)<br/>_193 = ((_158 as Continue).0: ())<br/>_157 = _193<br/>StorageDead(_193)<br/>StorageDead(_158)<br/>StorageDead(_157)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>_199 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_198 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _199)</td></tr></table>>];
    bb75__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageLive(_190)<br/>_190 = ((_158 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_192)<br/>_192 = _190<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _192)</td></tr></table>>];
    bb76__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_192)<br/>StorageDead(_190)<br/>StorageDead(_158)<br/>StorageDead(_157)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">_197 = &amp;mut (*_198)<br/>StorageDead(_199)<br/>StorageLive(_200)<br/>_200 = &amp;(*_5)<br/>StorageLive(_201)<br/>_201 = &amp;(*_4)<br/>StorageLive(_202)<br/>_202 = &amp;mut (*_6)<br/>StorageLive(_203)<br/>_203 = ((*_2).11: u32)<br/></td></tr><tr><td align="left">_196 = validate_user_not_being_liquidated(move _197, move _200, move _201, move _202, move _203)</td></tr></table>>];
    bb78__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/>StorageDead(_202)<br/>StorageDead(_201)<br/>StorageDead(_200)<br/>StorageDead(_197)<br/></td></tr><tr><td align="left">_195 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _196)</td></tr></table>>];
    bb79__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_196)<br/>_204 = discriminant(_195)<br/></td></tr><tr><td align="left">switchInt(move _204)</td></tr></table>>];
    bb80__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_208)<br/>_208 = ((_195 as Continue).0: ())<br/>_194 = _208<br/>StorageDead(_208)<br/>StorageDead(_198)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>_215 = &amp;(*_15)<br/></td></tr><tr><td align="left">_214 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _215)</td></tr></table>>];
    bb81__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_205)<br/>_205 = ((_195 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_207)<br/>_207 = _205<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _207)</td></tr></table>>];
    bb82__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_207)<br/>StorageDead(_205)<br/>StorageDead(_198)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">_213 = &amp;(*_214)<br/>StorageDead(_215)<br/></td></tr><tr><td align="left">_212 = User::is_bankrupt(move _213)</td></tr></table>>];
    bb84__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left">switchInt(move _212)</td></tr></table>>];
    bb85__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_213)<br/>StorageDead(_214)<br/>StorageLive(_217)<br/>_217 = error::ErrorCode::UserBankrupt<br/>StorageLive(_218)<br/>StorageLive(_219)<br/>StorageLive(_220)<br/>StorageLive(_221)<br/>StorageLive(_222)<br/>StorageLive(_223)<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>StorageLive(_228)<br/>_770 = const _<br/>_228 = &amp;(*_770)<br/>_227 = &amp;(*_228)<br/>_226 = move _227 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_227)<br/>StorageLive(_230)<br/>StorageLive(_231)<br/>StorageLive(_232)<br/>StorageLive(_233)<br/>StorageLive(_234)<br/>StorageLive(_235)<br/>StorageLive(_236)<br/>_236 = &amp;_217<br/>_235 = &amp;(*_236)<br/></td></tr><tr><td align="left">_234 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _235)</td></tr></table>>];
    bb86__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_213)<br/>StorageDead(_214)<br/>StorageLive(_216)<br/>_216 = ()<br/>_211 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _216)<br/>StorageDead(_216)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb87__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_235)<br/>_233 = [move _234]<br/>StorageDead(_234)<br/>_232 = &amp;_233<br/>_231 = &amp;(*_232)<br/>_230 = move _231 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_231)<br/></td></tr><tr><td align="left">_225 = Arguments::&lt;'_&gt;::new_v1(move _226, move _230)</td></tr></table>>];
    bb88__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_230)<br/>StorageDead(_226)<br/></td></tr><tr><td align="left">_224 = format(move _225)</td></tr></table>>];
    bb89__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_225)<br/>StorageDead(_236)<br/>StorageDead(_233)<br/>StorageDead(_232)<br/>StorageDead(_228)<br/>_223 = move _224<br/>StorageDead(_224)<br/>_222 = &amp;_223<br/>_221 = &amp;(*_222)<br/></td></tr><tr><td align="left">_220 = &lt;String as Deref&gt;::deref(move _221)</td></tr></table>>];
    bb90__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">_219 = &amp;(*_220)<br/>StorageDead(_221)<br/></td></tr><tr><td align="left">_218 = solana_program::log::sol_log(move _219)</td></tr></table>>];
    bb91__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/></td></tr><tr><td align="left">drop(_223)</td></tr></table>>];
    bb92__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_223)<br/>StorageDead(_222)<br/>StorageDead(_220)<br/>StorageDead(_218)<br/>StorageLive(_237)<br/>_237 = _217<br/>_211 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _237)<br/>StorageDead(_237)<br/>StorageDead(_217)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_212)<br/></td></tr><tr><td align="left">_210 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _211)</td></tr></table>>];
    bb94__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/>_238 = discriminant(_210)<br/></td></tr><tr><td align="left">switchInt(move _238)</td></tr></table>>];
    bb95__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageLive(_242)<br/>_242 = ((_210 as Continue).0: ())<br/>_209 = _242<br/>StorageDead(_242)<br/>StorageDead(_210)<br/>StorageDead(_209)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>_246 = &amp;(*_5)<br/>StorageLive(_247)<br/>StorageLive(_248)<br/>_248 = &amp;_46<br/>_247 = &amp;(*_248)<br/></td></tr><tr><td align="left">_245 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _246, move _247)</td></tr></table>>];
    bb96__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageLive(_239)<br/>_239 = ((_210 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_241)<br/>_241 = _239<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _241)</td></tr></table>>];
    bb97__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_241)<br/>StorageDead(_239)<br/>StorageDead(_210)<br/>StorageDead(_209)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb98__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>StorageDead(_246)<br/></td></tr><tr><td align="left">_244 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _245)</td></tr></table>>];
    bb99__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/>_249 = discriminant(_244)<br/></td></tr><tr><td align="left">switchInt(move _249)</td></tr></table>>];
    bb100__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageLive(_253)<br/>_253 = move ((_244 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_776 = const true<br/>_243 = move _253<br/>StorageDead(_253)<br/>_783 = discriminant(_244)<br/>StorageDead(_248)<br/>StorageDead(_244)<br/>StorageLive(_256)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>_259 = &amp;mut (*_6)<br/>StorageLive(_260)<br/>_260 = state::user::MarketType::Perp<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>StorageLive(_263)<br/>_263 = &amp;_243<br/></td></tr><tr><td align="left">_262 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _263)</td></tr></table>>];
    bb101__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_250)<br/>_250 = ((_244 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_252)<br/>_252 = _250<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _252)</td></tr></table>>];
    bb102__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_252)<br/>StorageDead(_250)<br/>_781 = discriminant(_244)<br/>StorageDead(_248)<br/>StorageDead(_244)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb103__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_263)<br/>_261 = ((*_262).21: u16)<br/>StorageLive(_264)<br/>StorageLive(_265)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>StorageLive(_268)<br/>StorageLive(_269)<br/>_269 = &amp;_243<br/></td></tr><tr><td align="left">_268 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _269)</td></tr></table>>];
    bb104__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">_267 = &amp;(*_268)<br/>StorageDead(_269)<br/></td></tr><tr><td align="left">_266 = PerpMarket::oracle_id(move _267)</td></tr></table>>];
    bb105__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_267)<br/>_265 = &amp;_266<br/>_264 = &amp;(*_265)<br/>StorageLive(_270)<br/>StorageLive(_271)<br/>StorageLive(_272)<br/>_272 = &amp;_243<br/></td></tr><tr><td align="left">_271 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _272)</td></tr></table>>];
    bb106__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_272)<br/>_270 = ((((*_271).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/>StorageLive(_273)<br/>StorageLive(_274)<br/>StorageLive(_275)<br/>StorageLive(_276)<br/>StorageLive(_277)<br/>StorageLive(_278)<br/>_278 = &amp;_243<br/></td></tr><tr><td align="left">_277 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _278)</td></tr></table>>];
    bb107__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">_276 = (*_277)<br/>StorageDead(_278)<br/></td></tr><tr><td align="left">_275 = PerpMarket::get_max_confidence_interval_multiplier(move _276)</td></tr></table>>];
    bb108__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_276)<br/></td></tr><tr><td align="left">_274 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _275)</td></tr></table>>];
    bb109__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_275)<br/>_279 = discriminant(_274)<br/></td></tr><tr><td align="left">switchInt(move _279)</td></tr></table>>];
    bb110__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageLive(_283)<br/>_283 = ((_274 as Continue).0: u64)<br/>_273 = _283<br/>StorageDead(_283)<br/></td></tr><tr><td align="left">_258 = OracleMap::&lt;'_&gt;::get_price_data_and_validity(move _259, move _260, move _261, move _264, move _270, move _273, const 0_i8)</td></tr></table>>];
    bb111__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageLive(_280)<br/>_280 = ((_274 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_282)<br/>_282 = _280<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _282)</td></tr></table>>];
    bb112__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_282)<br/>StorageDead(_280)<br/>StorageDead(_273)<br/>StorageDead(_270)<br/>StorageDead(_264)<br/>StorageDead(_261)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_273)<br/>StorageDead(_270)<br/>StorageDead(_264)<br/>StorageDead(_261)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/></td></tr><tr><td align="left">_257 = &lt;std::result::Result&lt;(&amp;OraclePriceData, OracleValidity), error::ErrorCode&gt; as Try&gt;::branch(move _258)</td></tr></table>>];
    bb114__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_258)<br/>_284 = discriminant(_257)<br/></td></tr><tr><td align="left">switchInt(move _284)</td></tr></table>>];
    bb115__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageLive(_288)<br/>_288 = ((_257 as Continue).0: (&amp;state::oracle::OraclePriceData, math::oracle::OracleValidity))<br/>_256 = _288<br/>StorageDead(_288)<br/>StorageLive(_254)<br/>_254 = (_256.0: &amp;state::oracle::OraclePriceData)<br/>StorageLive(_255)<br/>_255 = (_256.1: math::oracle::OracleValidity)<br/>StorageDead(_277)<br/>StorageDead(_274)<br/>StorageDead(_271)<br/>StorageDead(_268)<br/>StorageDead(_266)<br/>StorageDead(_265)<br/>StorageDead(_262)<br/>StorageDead(_257)<br/>StorageDead(_256)<br/>StorageLive(_289)<br/>StorageLive(_290)<br/>StorageLive(_291)<br/>StorageLive(_292)<br/>_292 = _255<br/>StorageLive(_293)<br/>StorageLive(_294)<br/>_294 = DriftAction::TriggerOrder<br/>_293 = Option::&lt;DriftAction&gt;::Some(move _294)<br/>StorageDead(_294)<br/></td></tr><tr><td align="left">_291 = is_oracle_valid_for_action(move _292, move _293)</td></tr></table>>];
    bb116__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageLive(_285)<br/>_285 = ((_257 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_287)<br/>_287 = _285<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _287)</td></tr></table>>];
    bb117__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_287)<br/>StorageDead(_285)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_293)<br/>StorageDead(_292)<br/></td></tr><tr><td align="left">_290 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _291)</td></tr></table>>];
    bb119__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_291)<br/>_295 = discriminant(_290)<br/></td></tr><tr><td align="left">switchInt(move _295)</td></tr></table>>];
    bb120__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageLive(_299)<br/>_299 = ((_290 as Continue).0: bool)<br/>_289 = _299<br/>StorageDead(_299)<br/>StorageDead(_290)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>_303 = _289<br/></td></tr><tr><td align="left">switchInt(move _303)</td></tr></table>>];
    bb121__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageLive(_296)<br/>_296 = ((_290 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_298)<br/>_298 = _296<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _298)</td></tr></table>>];
    bb122__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_298)<br/>StorageDead(_296)<br/>StorageDead(_290)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageLive(_304)<br/>_304 = ()<br/>_302 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _304)<br/>StorageDead(_304)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_305)<br/>_305 = error::ErrorCode::InvalidOracle<br/>StorageLive(_306)<br/>StorageLive(_307)<br/>StorageLive(_308)<br/>StorageLive(_309)<br/>StorageLive(_310)<br/>StorageLive(_311)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>StorageLive(_314)<br/>StorageLive(_315)<br/>StorageLive(_316)<br/>_769 = const _<br/>_316 = &amp;(*_769)<br/>_315 = &amp;(*_316)<br/>_314 = move _315 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_315)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>StorageLive(_321)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>_324 = &amp;_305<br/>_323 = &amp;(*_324)<br/></td></tr><tr><td align="left">_322 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _323)</td></tr></table>>];
    bb125__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_323)<br/>_321 = [move _322]<br/>StorageDead(_322)<br/>_320 = &amp;_321<br/>_319 = &amp;(*_320)<br/>_318 = move _319 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_319)<br/></td></tr><tr><td align="left">_313 = Arguments::&lt;'_&gt;::new_v1(move _314, move _318)</td></tr></table>>];
    bb126__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_318)<br/>StorageDead(_314)<br/></td></tr><tr><td align="left">_312 = format(move _313)</td></tr></table>>];
    bb127__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_313)<br/>StorageDead(_324)<br/>StorageDead(_321)<br/>StorageDead(_320)<br/>StorageDead(_316)<br/>_311 = move _312<br/>StorageDead(_312)<br/>_310 = &amp;_311<br/>_309 = &amp;(*_310)<br/></td></tr><tr><td align="left">_308 = &lt;String as Deref&gt;::deref(move _309)</td></tr></table>>];
    bb128__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">_307 = &amp;(*_308)<br/>StorageDead(_309)<br/></td></tr><tr><td align="left">_306 = solana_program::log::sol_log(move _307)</td></tr></table>>];
    bb129__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_307)<br/></td></tr><tr><td align="left">drop(_311)</td></tr></table>>];
    bb130__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_311)<br/>StorageDead(_310)<br/>StorageDead(_308)<br/>StorageDead(_306)<br/>StorageLive(_325)<br/>_325 = _305<br/>_302 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _325)<br/>StorageDead(_325)<br/>StorageDead(_305)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb131__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_303)<br/></td></tr><tr><td align="left">_301 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _302)</td></tr></table>>];
    bb132__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_302)<br/>_326 = discriminant(_301)<br/></td></tr><tr><td align="left">switchInt(move _326)</td></tr></table>>];
    bb133__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageLive(_330)<br/>_330 = ((_301 as Continue).0: ())<br/>_300 = _330<br/>StorageDead(_330)<br/>StorageDead(_301)<br/>StorageDead(_300)<br/>StorageLive(_331)<br/>_331 = ((*_254).0: i64)<br/>StorageLive(_332)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>_335 = ((*_254).0: i64)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>StorageLive(_338)<br/>_338 = &amp;_243<br/></td></tr><tr><td align="left">_337 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _338)</td></tr></table>>];
    bb134__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageLive(_327)<br/>_327 = ((_301 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_329)<br/>_329 = _327<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _329)</td></tr></table>>];
    bb135__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_329)<br/>StorageDead(_327)<br/>StorageDead(_301)<br/>StorageDead(_300)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb136__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_338)<br/>_336 = ((((*_337).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/>StorageLive(_339)<br/>StorageLive(_340)<br/>StorageLive(_341)<br/>StorageLive(_342)<br/>StorageLive(_343)<br/>_343 = &amp;((*_2).7: state::state::OracleGuardRails)<br/></td></tr><tr><td align="left">_342 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _343)</td></tr></table>>];
    bb137__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_343)<br/></td></tr><tr><td align="left">_341 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _342)</td></tr></table>>];
    bb138__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_342)<br/></td></tr><tr><td align="left">_340 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _341)</td></tr></table>>];
    bb139__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageDead(_341)<br/>_344 = discriminant(_340)<br/></td></tr><tr><td align="left">switchInt(move _344)</td></tr></table>>];
    bb140__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageLive(_348)<br/>_348 = ((_340 as Continue).0: i64)<br/>_339 = _348<br/>StorageDead(_348)<br/></td></tr><tr><td align="left">_334 = math::orders::is_oracle_too_divergent_with_twap_5min(move _335, move _336, move _339)</td></tr></table>>];
    bb141__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageLive(_345)<br/>_345 = ((_340 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_347)<br/>_347 = _345<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _347)</td></tr></table>>];
    bb142__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/>StorageDead(_345)<br/>StorageDead(_339)<br/>StorageDead(_336)<br/>StorageDead(_335)<br/>StorageDead(_334)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb143__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_339)<br/>StorageDead(_336)<br/>StorageDead(_335)<br/></td></tr><tr><td align="left">_333 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _334)</td></tr></table>>];
    bb144__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_334)<br/>_349 = discriminant(_333)<br/></td></tr><tr><td align="left">switchInt(move _349)</td></tr></table>>];
    bb145__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageLive(_353)<br/>_353 = ((_333 as Continue).0: bool)<br/>_332 = _353<br/>StorageDead(_353)<br/>StorageDead(_340)<br/>StorageDead(_337)<br/>StorageDead(_333)<br/>StorageLive(_354)<br/>StorageLive(_355)<br/>StorageLive(_356)<br/>StorageLive(_357)<br/>_357 = _332<br/></td></tr><tr><td align="left">switchInt(move _357)</td></tr></table>>];
    bb146__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageLive(_350)<br/>_350 = ((_333 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_352)<br/>_352 = _350<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _352)</td></tr></table>>];
    bb147__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_352)<br/>StorageDead(_350)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb148__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageLive(_359)<br/>_359 = error::ErrorCode::OrderBreachesOraclePriceLimits<br/>StorageLive(_360)<br/>StorageLive(_361)<br/>StorageLive(_362)<br/>StorageLive(_363)<br/>StorageLive(_364)<br/>StorageLive(_365)<br/>StorageLive(_366)<br/>StorageLive(_367)<br/>StorageLive(_368)<br/>StorageLive(_369)<br/>StorageLive(_370)<br/>_768 = const _<br/>_370 = &amp;(*_768)<br/>_369 = &amp;(*_370)<br/>_368 = move _369 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_369)<br/>StorageLive(_372)<br/>StorageLive(_373)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>StorageLive(_376)<br/>StorageLive(_377)<br/>StorageLive(_378)<br/>_378 = &amp;_359<br/>_377 = &amp;(*_378)<br/></td></tr><tr><td align="left">_376 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _377)</td></tr></table>>];
    bb149__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageLive(_358)<br/>_358 = ()<br/>_356 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _358)<br/>StorageDead(_358)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb150__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_377)<br/>_375 = [move _376]<br/>StorageDead(_376)<br/>_374 = &amp;_375<br/>_373 = &amp;(*_374)<br/>_372 = move _373 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_373)<br/></td></tr><tr><td align="left">_367 = Arguments::&lt;'_&gt;::new_v1(move _368, move _372)</td></tr></table>>];
    bb151__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_372)<br/>StorageDead(_368)<br/></td></tr><tr><td align="left">_366 = format(move _367)</td></tr></table>>];
    bb152__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_367)<br/>StorageDead(_378)<br/>StorageDead(_375)<br/>StorageDead(_374)<br/>StorageDead(_370)<br/>_365 = move _366<br/>StorageDead(_366)<br/>_364 = &amp;_365<br/>_363 = &amp;(*_364)<br/></td></tr><tr><td align="left">_362 = &lt;String as Deref&gt;::deref(move _363)</td></tr></table>>];
    bb153__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">_361 = &amp;(*_362)<br/>StorageDead(_363)<br/></td></tr><tr><td align="left">_360 = solana_program::log::sol_log(move _361)</td></tr></table>>];
    bb154__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/></td></tr><tr><td align="left">drop(_365)</td></tr></table>>];
    bb155__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_365)<br/>StorageDead(_364)<br/>StorageDead(_362)<br/>StorageDead(_360)<br/>StorageLive(_379)<br/>StorageLive(_380)<br/>StorageLive(_381)<br/>_381 = const &quot;oracle price vs twap too divergent&quot;<br/>_380 = &amp;(*_381)<br/></td></tr><tr><td align="left">_379 = solana_program::log::sol_log(move _380)</td></tr></table>>];
    bb156__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_380)<br/>StorageDead(_381)<br/>StorageDead(_379)<br/>StorageLive(_382)<br/>_382 = _359<br/>_356 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _382)<br/>StorageDead(_382)<br/>StorageDead(_359)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb157__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_357)<br/></td></tr><tr><td align="left">_355 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _356)</td></tr></table>>];
    bb158__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_356)<br/>_383 = discriminant(_355)<br/></td></tr><tr><td align="left">switchInt(move _383)</td></tr></table>>];
    bb159__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_387)<br/>_387 = ((_355 as Continue).0: ())<br/>_354 = _387<br/>StorageDead(_387)<br/>StorageDead(_355)<br/>StorageDead(_354)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>StorageLive(_392)<br/>StorageLive(_393)<br/>_393 = &amp;_243<br/></td></tr><tr><td align="left">_392 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _393)</td></tr></table>>];
    bb160__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageLive(_384)<br/>_384 = ((_355 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_386)<br/>_386 = _384<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _386)</td></tr></table>>];
    bb161__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_386)<br/>StorageDead(_384)<br/>StorageDead(_355)<br/>StorageDead(_354)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb162__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">_391 = &amp;(*_392)<br/>StorageDead(_393)<br/>StorageLive(_394)<br/>_394 = _331<br/>StorageLive(_395)<br/>_395 = _9<br/>StorageLive(_396)<br/>StorageLive(_397)<br/>_397 = &amp;(*_2)<br/></td></tr><tr><td align="left">_396 = state::state::State::use_median_trigger_price(move _397)</td></tr></table>>];
    bb163__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_397)<br/></td></tr><tr><td align="left">_390 = PerpMarket::get_trigger_price(move _391, move _394, move _395, move _396)</td></tr></table>>];
    bb164__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_396)<br/>StorageDead(_395)<br/>StorageDead(_394)<br/>StorageDead(_391)<br/></td></tr><tr><td align="left">_389 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _390)</td></tr></table>>];
    bb165__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_390)<br/>_398 = discriminant(_389)<br/></td></tr><tr><td align="left">switchInt(move _398)</td></tr></table>>];
    bb166__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageLive(_402)<br/>_402 = ((_389 as Continue).0: u64)<br/>_388 = _402<br/>StorageDead(_402)<br/>StorageDead(_392)<br/>StorageDead(_389)<br/>StorageLive(_403)<br/>StorageLive(_404)<br/>StorageLive(_405)<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>StorageLive(_409)<br/>_409 = &amp;(*_15)<br/></td></tr><tr><td align="left">_408 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _409)</td></tr></table>>];
    bb167__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageLive(_399)<br/>_399 = ((_389 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_401)<br/>_401 = _399<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _401)</td></tr></table>>];
    bb168__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_401)<br/>StorageDead(_399)<br/>StorageDead(_392)<br/>StorageDead(_389)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb169__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageDead(_409)<br/>StorageLive(_410)<br/>_410 = _27<br/>_411 = Len(((*_408).5: [state::user::Order; 32]))<br/>_412 = Lt(_410, _411)<br/></td></tr><tr><td align="left">assert(move _412, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _411, _410)</td></tr></table>>];
    bb170__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">_407 = &amp;((*_408).5: [state::user::Order; 32])[_410]<br/>_406 = &amp;(*_407)<br/>StorageLive(_413)<br/>_413 = _388<br/></td></tr><tr><td align="left">_405 = math::orders::order_satisfies_trigger_condition(move _406, move _413)</td></tr></table>>];
    bb171__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_413)<br/>StorageDead(_406)<br/></td></tr><tr><td align="left">_404 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _405)</td></tr></table>>];
    bb172__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_405)<br/>_414 = discriminant(_404)<br/></td></tr><tr><td align="left">switchInt(move _414)</td></tr></table>>];
    bb173__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageLive(_418)<br/>_418 = ((_404 as Continue).0: bool)<br/>_403 = _418<br/>StorageDead(_418)<br/>StorageDead(_410)<br/>StorageDead(_408)<br/>StorageDead(_407)<br/>StorageDead(_404)<br/>StorageLive(_419)<br/>StorageLive(_420)<br/>StorageLive(_421)<br/>StorageLive(_422)<br/>_422 = _403<br/></td></tr><tr><td align="left">switchInt(move _422)</td></tr></table>>];
    bb174__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageLive(_415)<br/>_415 = ((_404 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_417)<br/>_417 = _415<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _417)</td></tr></table>>];
    bb175__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageDead(_417)<br/>StorageDead(_415)<br/>StorageDead(_410)<br/>StorageDead(_408)<br/>StorageDead(_407)<br/>StorageDead(_404)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb176__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageLive(_423)<br/>_423 = ()<br/>_421 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _423)<br/>StorageDead(_423)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb177__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageLive(_424)<br/>_424 = error::ErrorCode::OrderDidNotSatisfyTriggerCondition<br/>StorageLive(_425)<br/>StorageLive(_426)<br/>StorageLive(_427)<br/>StorageLive(_428)<br/>StorageLive(_429)<br/>StorageLive(_430)<br/>StorageLive(_431)<br/>StorageLive(_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>StorageLive(_435)<br/>_767 = const _<br/>_435 = &amp;(*_767)<br/>_434 = &amp;(*_435)<br/>_433 = move _434 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_434)<br/>StorageLive(_437)<br/>StorageLive(_438)<br/>StorageLive(_439)<br/>StorageLive(_440)<br/>StorageLive(_441)<br/>StorageLive(_442)<br/>StorageLive(_443)<br/>_443 = &amp;_424<br/>_442 = &amp;(*_443)<br/></td></tr><tr><td align="left">_441 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _442)</td></tr></table>>];
    bb178__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageDead(_442)<br/>_440 = [move _441]<br/>StorageDead(_441)<br/>_439 = &amp;_440<br/>_438 = &amp;(*_439)<br/>_437 = move _438 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_438)<br/></td></tr><tr><td align="left">_432 = Arguments::&lt;'_&gt;::new_v1(move _433, move _437)</td></tr></table>>];
    bb179__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_437)<br/>StorageDead(_433)<br/></td></tr><tr><td align="left">_431 = format(move _432)</td></tr></table>>];
    bb180__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_432)<br/>StorageDead(_443)<br/>StorageDead(_440)<br/>StorageDead(_439)<br/>StorageDead(_435)<br/>_430 = move _431<br/>StorageDead(_431)<br/>_429 = &amp;_430<br/>_428 = &amp;(*_429)<br/></td></tr><tr><td align="left">_427 = &lt;String as Deref&gt;::deref(move _428)</td></tr></table>>];
    bb181__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">_426 = &amp;(*_427)<br/>StorageDead(_428)<br/></td></tr><tr><td align="left">_425 = solana_program::log::sol_log(move _426)</td></tr></table>>];
    bb182__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageDead(_426)<br/></td></tr><tr><td align="left">drop(_430)</td></tr></table>>];
    bb183__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageDead(_430)<br/>StorageDead(_429)<br/>StorageDead(_427)<br/>StorageDead(_425)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>StorageLive(_446)<br/>StorageLive(_447)<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>StorageLive(_450)<br/>StorageLive(_451)<br/>StorageLive(_452)<br/>StorageLive(_453)<br/>StorageLive(_454)<br/>_766 = const _<br/>_454 = &amp;(*_766)<br/>_453 = &amp;(*_454)<br/>_452 = move _453 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_453)<br/>StorageLive(_456)<br/>StorageLive(_457)<br/>StorageLive(_458)<br/>StorageLive(_459)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>StorageLive(_462)<br/>_462 = &amp;_388<br/>_461 = &amp;(*_462)<br/></td></tr><tr><td align="left">_460 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _461)</td></tr></table>>];
    bb184__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageDead(_461)<br/>StorageLive(_463)<br/>StorageLive(_464)<br/>StorageLive(_465)<br/>StorageLive(_466)<br/>StorageLive(_467)<br/>StorageLive(_468)<br/>_468 = &amp;(*_15)<br/></td></tr><tr><td align="left">_467 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _468)</td></tr></table>>];
    bb185__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_468)<br/>StorageLive(_469)<br/>_469 = _27<br/>_470 = Len(((*_467).5: [state::user::Order; 32]))<br/>_471 = Lt(_469, _470)<br/></td></tr><tr><td align="left">assert(move _471, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _470, _469)</td></tr></table>>];
    bb186__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">_466 = &amp;(((*_467).5: [state::user::Order; 32])[_469].5: u64)<br/>_465 = &amp;_466<br/>_464 = &amp;(*_465)<br/></td></tr><tr><td align="left">_463 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;u64&gt;(move _464)</td></tr></table>>];
    bb187__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageDead(_464)<br/>StorageLive(_472)<br/>StorageLive(_473)<br/>StorageLive(_474)<br/>StorageLive(_475)<br/>StorageLive(_476)<br/>StorageLive(_477)<br/>_477 = &amp;(*_15)<br/></td></tr><tr><td align="left">_476 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _477)</td></tr></table>>];
    bb188__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageDead(_477)<br/>StorageLive(_478)<br/>_478 = _27<br/>_479 = Len(((*_476).5: [state::user::Order; 32]))<br/>_480 = Lt(_478, _479)<br/></td></tr><tr><td align="left">assert(move _480, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _479, _478)</td></tr></table>>];
    bb189__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">_475 = &amp;(((*_476).5: [state::user::Order; 32])[_478].21: state::user::OrderTriggerCondition)<br/>_474 = &amp;_475<br/>_473 = &amp;(*_474)<br/></td></tr><tr><td align="left">_472 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;&amp;OrderTriggerCondition&gt;(move _473)</td></tr></table>>];
    bb190__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_473)<br/>_459 = [move _460, move _463, move _472]<br/>StorageDead(_472)<br/>StorageDead(_463)<br/>StorageDead(_460)<br/>_458 = &amp;_459<br/>_457 = &amp;(*_458)<br/>_456 = move _457 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_457)<br/></td></tr><tr><td align="left">_451 = Arguments::&lt;'_&gt;::new_v1(move _452, move _456)</td></tr></table>>];
    bb191__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_456)<br/>StorageDead(_452)<br/></td></tr><tr><td align="left">_450 = format(move _451)</td></tr></table>>];
    bb192__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageDead(_451)<br/>StorageDead(_478)<br/>StorageDead(_476)<br/>StorageDead(_475)<br/>StorageDead(_474)<br/>StorageDead(_469)<br/>StorageDead(_467)<br/>StorageDead(_466)<br/>StorageDead(_465)<br/>StorageDead(_462)<br/>StorageDead(_459)<br/>StorageDead(_458)<br/>StorageDead(_454)<br/>_449 = move _450<br/>StorageDead(_450)<br/>_448 = &amp;_449<br/>_447 = &amp;(*_448)<br/></td></tr><tr><td align="left">_446 = &lt;String as Deref&gt;::deref(move _447)</td></tr></table>>];
    bb193__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">_445 = &amp;(*_446)<br/>StorageDead(_447)<br/></td></tr><tr><td align="left">_444 = solana_program::log::sol_log(move _445)</td></tr></table>>];
    bb194__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageDead(_445)<br/></td></tr><tr><td align="left">drop(_449)</td></tr></table>>];
    bb195__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_449)<br/>StorageDead(_448)<br/>StorageDead(_446)<br/>StorageDead(_444)<br/>StorageLive(_481)<br/>_481 = _424<br/>_421 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _481)<br/>StorageDead(_481)<br/>StorageDead(_424)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb196__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_422)<br/></td></tr><tr><td align="left">_420 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _421)</td></tr></table>>];
    bb197__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_421)<br/>_482 = discriminant(_420)<br/></td></tr><tr><td align="left">switchInt(move _482)</td></tr></table>>];
    bb198__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageLive(_486)<br/>_486 = ((_420 as Continue).0: ())<br/>_419 = _486<br/>StorageDead(_486)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/>StorageLive(_488)<br/>StorageLive(_489)<br/>StorageLive(_490)<br/>StorageLive(_491)<br/>StorageLive(_492)<br/>StorageLive(_493)<br/>StorageLive(_494)<br/>StorageLive(_495)<br/>StorageLive(_496)<br/>StorageLive(_497)<br/>_497 = &amp;(*_15)<br/></td></tr><tr><td align="left">_496 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _497)</td></tr></table>>];
    bb199__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageLive(_483)<br/>_483 = ((_420 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_485)<br/>_485 = _483<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _485)</td></tr></table>>];
    bb200__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_485)<br/>StorageDead(_483)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb201__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">_495 = &amp;(*_496)<br/>StorageDead(_497)<br/>StorageLive(_498)<br/>_498 = _46<br/></td></tr><tr><td align="left">_494 = User::get_perp_position(move _495, move _498)</td></tr></table>>];
    bb202__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_498)<br/>StorageDead(_495)<br/></td></tr><tr><td align="left">_493 = &lt;std::result::Result&lt;&amp;PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _494)</td></tr></table>>];
    bb203__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_494)<br/>_499 = discriminant(_493)<br/></td></tr><tr><td align="left">switchInt(move _499)</td></tr></table>>];
    bb204__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageLive(_503)<br/>_503 = ((_493 as Continue).0: &amp;state::user::PerpPosition)<br/>_492 = _503<br/>StorageDead(_503)<br/>_491 = &amp;(*_492)<br/>StorageLive(_504)<br/>_504 = _331<br/>StorageLive(_505)<br/>StorageLive(_506)<br/>StorageLive(_507)<br/>_507 = &amp;_243<br/></td></tr><tr><td align="left">_506 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _507)</td></tr></table>>];
    bb205__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_500)<br/>_500 = ((_493 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_502)<br/>_502 = _500<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _502)</td></tr></table>>];
    bb206__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_502)<br/>StorageDead(_500)<br/>StorageDead(_491)<br/>StorageDead(_490)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_507)<br/>_505 = ((*_506).23: state::perp_market::ContractType)<br/></td></tr><tr><td align="left">_490 = PerpPosition::worst_case_liability_value(move _491, move _504, move _505)</td></tr></table>>];
    bb208__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_505)<br/>StorageDead(_504)<br/>StorageDead(_491)<br/></td></tr><tr><td align="left">_489 = &lt;std::result::Result&lt;(i128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _490)</td></tr></table>>];
    bb209__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_490)<br/>_508 = discriminant(_489)<br/></td></tr><tr><td align="left">switchInt(move _508)</td></tr></table>>];
    bb210__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_512)<br/>_512 = ((_489 as Continue).0: (i128, u128))<br/>_488 = _512<br/>StorageDead(_512)<br/>StorageLive(_487)<br/>_487 = (_488.1: u128)<br/>StorageDead(_506)<br/>StorageDead(_496)<br/>StorageDead(_493)<br/>StorageDead(_492)<br/>StorageDead(_489)<br/>StorageDead(_488)<br/>StorageLive(_513)<br/>StorageLive(_514)<br/>StorageLive(_515)<br/>StorageLive(_516)<br/>StorageLive(_517)<br/>StorageLive(_518)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>_520 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_519 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _520)</td></tr></table>>];
    bb211__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_509)<br/>_509 = ((_489 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_511)<br/>_511 = _509<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _511)</td></tr></table>>];
    bb212__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_511)<br/>StorageDead(_509)<br/>StorageDead(_506)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_520)<br/>StorageLive(_521)<br/>_521 = _27<br/>_522 = Len(((*_519).5: [state::user::Order; 32]))<br/>_523 = Lt(_521, _522)<br/></td></tr><tr><td align="left">assert(move _523, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _522, _521)</td></tr></table>>];
    bb214__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">_518 = &amp;mut ((*_519).5: [state::user::Order; 32])[_521]<br/>_517 = &amp;mut (*_518)<br/>StorageLive(_524)<br/>_524 = &amp;(*_254)<br/>StorageLive(_525)<br/>_525 = _10<br/>StorageLive(_526)<br/>StorageLive(_527)<br/>StorageLive(_528)<br/>StorageLive(_529)<br/>StorageLive(_530)<br/>_530 = &amp;_243<br/>_529 = &amp;(*_530)<br/></td></tr><tr><td align="left">_528 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _529)</td></tr></table>>];
    bb215__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">_527 = &amp;(*_528)<br/>StorageDead(_529)<br/>_526 = Option::&lt;&amp;PerpMarket&gt;::Some(move _527)<br/>StorageDead(_527)<br/></td></tr><tr><td align="left">_516 = update_trigger_order_params(move _517, move _524, move _525, const 20_u8, move _526)</td></tr></table>>];
    bb216__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_526)<br/>StorageDead(_525)<br/>StorageDead(_524)<br/>StorageDead(_517)<br/></td></tr><tr><td align="left">_515 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _516)</td></tr></table>>];
    bb217__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_516)<br/>_531 = discriminant(_515)<br/></td></tr><tr><td align="left">switchInt(move _531)</td></tr></table>>];
    bb218__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageLive(_535)<br/>_535 = ((_515 as Continue).0: ())<br/>_514 = _535<br/>StorageDead(_535)<br/>StorageDead(_530)<br/>StorageDead(_528)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_518)<br/>StorageDead(_515)<br/>StorageDead(_514)<br/>StorageLive(_536)<br/>StorageLive(_537)<br/>StorageLive(_538)<br/>StorageLive(_539)<br/>StorageLive(_540)<br/>_540 = &amp;(*_15)<br/></td></tr><tr><td align="left">_539 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _540)</td></tr></table>>];
    bb219__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageLive(_532)<br/>_532 = ((_515 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_534)<br/>_534 = _532<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _534)</td></tr></table>>];
    bb220__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_534)<br/>StorageDead(_532)<br/>StorageDead(_530)<br/>StorageDead(_528)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_518)<br/>StorageDead(_515)<br/>StorageDead(_514)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb221__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_540)<br/>StorageLive(_541)<br/>_541 = _27<br/>_542 = Len(((*_539).5: [state::user::Order; 32]))<br/>_543 = Lt(_541, _542)<br/></td></tr><tr><td align="left">assert(move _543, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _542, _541)</td></tr></table>>];
    bb222__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">_538 = &amp;((*_539).5: [state::user::Order; 32])[_541]<br/></td></tr><tr><td align="left">_537 = Order::has_auction(move _538)</td></tr></table>>];
    bb223__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left">switchInt(move _537)</td></tr></table>>];
    bb224__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageDead(_541)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/>StorageLive(_544)<br/>StorageLive(_545)<br/>StorageLive(_546)<br/>StorageLive(_547)<br/>_547 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_546 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _547)</td></tr></table>>];
    bb225__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">_545 = &amp;mut (*_546)<br/>StorageDead(_547)<br/></td></tr><tr><td align="left">_544 = User::increment_open_auctions(move _545)</td></tr></table>>];
    bb226__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_545)<br/>StorageDead(_546)<br/>StorageDead(_544)<br/>_536 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb227__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_541)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/>_536 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb228__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_537)<br/>StorageDead(_536)<br/>StorageLive(_548)<br/>StorageLive(_549)<br/>StorageLive(_550)<br/>_550 = &amp;(*_15)<br/></td></tr><tr><td align="left">_549 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _550)</td></tr></table>>];
    bb229__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_550)<br/>StorageLive(_551)<br/>_551 = _27<br/>_552 = Len(((*_549).5: [state::user::Order; 32]))<br/>_553 = Lt(_551, _552)<br/></td></tr><tr><td align="left">assert(move _553, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _552, _551)</td></tr></table>>];
    bb230__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">_548 = (((*_549).5: [state::user::Order; 32])[_551].17: controller::position::PositionDirection)<br/>StorageDead(_551)<br/>StorageDead(_549)<br/>StorageLive(_554)<br/>StorageLive(_555)<br/>StorageLive(_556)<br/>_556 = &amp;(*_15)<br/></td></tr><tr><td align="left">_555 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _556)</td></tr></table>>];
    bb231__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_556)<br/>StorageLive(_557)<br/>_557 = _27<br/>_558 = Len(((*_555).5: [state::user::Order; 32]))<br/>_559 = Lt(_557, _558)<br/></td></tr><tr><td align="left">assert(move _559, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _558, _557)</td></tr></table>>];
    bb232__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">_554 = (((*_555).5: [state::user::Order; 32])[_557].2: u64)<br/>StorageDead(_557)<br/>StorageDead(_555)<br/>StorageLive(_560)<br/>StorageLive(_561)<br/>StorageLive(_562)<br/>StorageLive(_563)<br/>_563 = &amp;(*_15)<br/></td></tr><tr><td align="left">_562 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _563)</td></tr></table>>];
    bb233__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_563)<br/>StorageLive(_564)<br/>_564 = _27<br/>_565 = Len(((*_562).5: [state::user::Order; 32]))<br/>_566 = Lt(_564, _565)<br/></td></tr><tr><td align="left">assert(move _566, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _565, _564)</td></tr></table>>];
    bb234__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">_561 = &amp;((*_562).5: [state::user::Order; 32])[_564]<br/></td></tr><tr><td align="left">_560 = Order::update_open_bids_and_asks(move _561)</td></tr></table>>];
    bb235__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_561)<br/>StorageDead(_564)<br/>StorageDead(_562)<br/>StorageLive(_567)<br/>StorageLive(_568)<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>StorageLive(_572)<br/>_572 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_571 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _572)</td></tr></table>>];
    bb236__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">_570 = &amp;mut (*_571)<br/>StorageDead(_572)<br/>StorageLive(_573)<br/>_573 = _46<br/></td></tr><tr><td align="left">_569 = User::get_perp_position_mut(move _570, move _573)</td></tr></table>>];
    bb237__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageDead(_573)<br/>StorageDead(_570)<br/></td></tr><tr><td align="left">_568 = &lt;std::result::Result&lt;&amp;mut PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _569)</td></tr></table>>];
    bb238__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">StorageDead(_569)<br/>_574 = discriminant(_568)<br/></td></tr><tr><td align="left">switchInt(move _574)</td></tr></table>>];
    bb239__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageLive(_578)<br/>_578 = move ((_568 as Continue).0: &amp;mut state::user::PerpPosition)<br/>_567 = move _578<br/>StorageDead(_578)<br/>StorageDead(_571)<br/>StorageDead(_568)<br/>StorageLive(_579)<br/>StorageLive(_580)<br/>StorageLive(_581)<br/>StorageLive(_582)<br/>_582 = &amp;mut (*_567)<br/>StorageLive(_583)<br/>StorageLive(_584)<br/>_584 = &amp;_548<br/>_583 = &amp;(*_584)<br/>StorageLive(_585)<br/>_585 = _554<br/>StorageLive(_586)<br/>_586 = _560<br/></td></tr><tr><td align="left">_581 = increase_open_bids_and_asks(move _582, move _583, move _585, move _586)</td></tr></table>>];
    bb240__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageLive(_575)<br/>_575 = ((_568 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_577)<br/>_577 = _575<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _577)</td></tr></table>>];
    bb241__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_577)<br/>StorageDead(_575)<br/>StorageDead(_571)<br/>StorageDead(_568)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb242__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_586)<br/>StorageDead(_585)<br/>StorageDead(_583)<br/>StorageDead(_582)<br/></td></tr><tr><td align="left">_580 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _581)</td></tr></table>>];
    bb243__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_581)<br/>_587 = discriminant(_580)<br/></td></tr><tr><td align="left">switchInt(move _587)</td></tr></table>>];
    bb244__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageLive(_591)<br/>_591 = ((_580 as Continue).0: ())<br/>_579 = _591<br/>StorageDead(_591)<br/>StorageDead(_584)<br/>StorageDead(_580)<br/>StorageDead(_579)<br/>_513 = const ()<br/>StorageDead(_567)<br/>StorageDead(_560)<br/>StorageDead(_554)<br/>StorageDead(_548)<br/>StorageDead(_513)<br/>StorageLive(_592)<br/>StorageLive(_593)<br/>_593 = &amp;_13<br/>StorageLive(_594)<br/>_594 = &amp;_11<br/></td></tr><tr><td align="left">_592 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _593, move _594)</td></tr></table>>];
    bb245__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageLive(_588)<br/>_588 = ((_580 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_590)<br/>_590 = _588<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _590)</td></tr></table>>];
    bb246__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_590)<br/>StorageDead(_588)<br/>StorageDead(_584)<br/>StorageDead(_580)<br/>StorageDead(_579)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb247__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_594)<br/>StorageDead(_593)<br/>StorageLive(_595)<br/>StorageLive(_596)<br/>_596 = _592<br/></td></tr><tr><td align="left">switchInt(move _596)</td></tr></table>>];
    bb248__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageLive(_597)<br/>StorageLive(_598)<br/>StorageLive(_599)<br/>StorageLive(_600)<br/>StorageLive(_601)<br/>_601 = &amp;(*_7)<br/></td></tr><tr><td align="left">_600 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _601)</td></tr></table>>];
    bb249__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_601)<br/>StorageLive(_602)<br/>_602 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_599 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _600, move _602)</td></tr></table>>];
    bb250__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_602)<br/>StorageDead(_600)<br/></td></tr><tr><td align="left">_598 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _599)</td></tr></table>>];
    bb251__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageDead(_599)<br/>_603 = discriminant(_598)<br/></td></tr><tr><td align="left">switchInt(move _603)</td></tr></table>>];
    bb252__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageLive(_607)<br/>_607 = move ((_598 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_597 = move _607<br/>StorageDead(_607)<br/>_595 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::Some(move _597)<br/>StorageDead(_597)<br/>_787 = discriminant(_598)<br/>StorageDead(_598)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb253__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageLive(_604)<br/>_604 = ((_598 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_606)<br/>_606 = _604<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _606)</td></tr></table>>];
    bb254__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_606)<br/>StorageDead(_604)<br/>StorageDead(_597)<br/>_785 = discriminant(_598)<br/>StorageDead(_598)<br/>StorageDead(_596)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb255__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">_595 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb256__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageDead(_596)<br/>StorageLive(_608)<br/>StorageLive(_609)<br/>StorageLive(_610)<br/>StorageLive(_611)<br/>StorageLive(_612)<br/>StorageLive(_613)<br/>_613 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_612 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _613)</td></tr></table>>];
    bb257__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">_611 = &amp;mut (*_612)<br/>StorageDead(_613)<br/>StorageLive(_614)<br/>StorageLive(_615)<br/>_615 = &amp;mut _595<br/></td></tr><tr><td align="left">_614 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _615)</td></tr></table>>];
    bb258__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_615)<br/>StorageLive(_616)<br/>StorageLive(_617)<br/>StorageLive(_618)<br/>StorageLive(_619)<br/>_619 = &amp;mut _243<br/>_618 = &amp;mut (*_619)<br/></td></tr><tr><td align="left">_617 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _618)</td></tr></table>>];
    bb259__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">_616 = &amp;mut (*_617)<br/>StorageDead(_618)<br/>StorageLive(_620)<br/>_620 = (((*_2).5: state::state::FeeStructure).3: u64)<br/>StorageLive(_621)<br/>_621 = _10<br/></td></tr><tr><td align="left">_610 = pay_keeper_flat_reward_for_perps(move _611, move _614, move _616, move _620, move _621)</td></tr></table>>];
    bb260__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/>StorageDead(_620)<br/>StorageDead(_616)<br/>StorageDead(_614)<br/>StorageDead(_611)<br/></td></tr><tr><td align="left">_609 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _610)</td></tr></table>>];
    bb261__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_610)<br/>_622 = discriminant(_609)<br/></td></tr><tr><td align="left">switchInt(move _622)</td></tr></table>>];
    bb262__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageLive(_626)<br/>_626 = ((_609 as Continue).0: u64)<br/>_608 = _626<br/>StorageDead(_626)<br/>StorageDead(_619)<br/>StorageDead(_617)<br/>StorageDead(_612)<br/>StorageDead(_609)<br/>StorageLive(_627)<br/>StorageLive(_628)<br/>StorageLive(_629)<br/>StorageLive(_630)<br/>_630 = _9<br/>StorageLive(_631)<br/>_631 = OrderAction::Trigger<br/>StorageLive(_632)<br/>_632 = OrderActionExplanation::None<br/>StorageLive(_633)<br/>_633 = _46<br/>StorageLive(_634)<br/>StorageLive(_635)<br/>_635 = _11<br/>_634 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _635)<br/>StorageDead(_635)<br/>StorageLive(_636)<br/>_636 = Option::&lt;u64&gt;::None<br/>StorageLive(_637)<br/>StorageLive(_638)<br/>_638 = _608<br/>_637 = Option::&lt;u64&gt;::Some(move _638)<br/>StorageDead(_638)<br/>StorageLive(_639)<br/>_639 = Option::&lt;u64&gt;::None<br/>StorageLive(_640)<br/>_640 = Option::&lt;u64&gt;::None<br/>StorageLive(_641)<br/>StorageLive(_642)<br/>_642 = _608<br/>_641 = Option::&lt;u64&gt;::Some(move _642)<br/>StorageDead(_642)<br/>StorageLive(_643)<br/>_643 = Option::&lt;u64&gt;::None<br/>StorageLive(_644)<br/>_644 = Option::&lt;u64&gt;::None<br/>StorageLive(_645)<br/>_645 = Option::&lt;i64&gt;::None<br/>StorageLive(_646)<br/>_646 = Option::&lt;u64&gt;::None<br/>StorageLive(_647)<br/>StorageLive(_648)<br/>_648 = _13<br/>_647 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _648)<br/>StorageDead(_648)<br/>StorageLive(_649)<br/>StorageLive(_650)<br/>StorageLive(_651)<br/>StorageLive(_652)<br/>_652 = &amp;(*_15)<br/></td></tr><tr><td align="left">_651 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _652)</td></tr></table>>];
    bb263__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageLive(_623)<br/>_623 = ((_609 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_625)<br/>_625 = _623<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _625)</td></tr></table>>];
    bb264__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageDead(_625)<br/>StorageDead(_623)<br/>StorageDead(_619)<br/>StorageDead(_617)<br/>StorageDead(_612)<br/>StorageDead(_609)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb265__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageDead(_652)<br/>StorageLive(_653)<br/>_653 = _27<br/>_654 = Len(((*_651).5: [state::user::Order; 32]))<br/>_655 = Lt(_653, _654)<br/></td></tr><tr><td align="left">assert(move _655, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _654, _653)</td></tr></table>>];
    bb266__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">_650 = ((*_651).5: [state::user::Order; 32])[_653]<br/>_649 = Option::&lt;Order&gt;::Some(move _650)<br/>StorageDead(_650)<br/>StorageLive(_656)<br/>_656 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::None<br/>StorageLive(_657)<br/>_657 = Option::&lt;Order&gt;::None<br/>StorageLive(_658)<br/>_658 = _331<br/>StorageLive(_659)<br/>_659 = Option::&lt;u64&gt;::None<br/>StorageLive(_660)<br/>_660 = Option::&lt;u64&gt;::None<br/>StorageLive(_661)<br/>_661 = Option::&lt;u64&gt;::None<br/>StorageLive(_662)<br/>_662 = Option::&lt;u64&gt;::None<br/>StorageLive(_663)<br/>StorageLive(_664)<br/>_664 = _388<br/>_663 = Option::&lt;u64&gt;::Some(move _664)<br/>StorageDead(_664)<br/></td></tr><tr><td align="left">_629 = get_order_action_record(move _630, move _631, move _632, move _633, move _634, move _636, move _637, move _639, move _640, move _641, move _643, move _644, move _645, move _646, move _647, move _649, move _656, move _657, move _658, const 0_u8, move _659, move _660, move _661, move _662, move _663)</td></tr></table>>];
    bb267__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageDead(_663)<br/>StorageDead(_662)<br/>StorageDead(_661)<br/>StorageDead(_660)<br/>StorageDead(_659)<br/>StorageDead(_658)<br/>StorageDead(_657)<br/>StorageDead(_656)<br/>StorageDead(_649)<br/>StorageDead(_647)<br/>StorageDead(_646)<br/>StorageDead(_645)<br/>StorageDead(_644)<br/>StorageDead(_643)<br/>StorageDead(_641)<br/>StorageDead(_640)<br/>StorageDead(_639)<br/>StorageDead(_637)<br/>StorageDead(_636)<br/>StorageDead(_634)<br/>StorageDead(_633)<br/>StorageDead(_632)<br/>StorageDead(_631)<br/>StorageDead(_630)<br/></td></tr><tr><td align="left">_628 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _629)</td></tr></table>>];
    bb268__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageDead(_629)<br/>_665 = discriminant(_628)<br/></td></tr><tr><td align="left">switchInt(move _665)</td></tr></table>>];
    bb269__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageLive(_669)<br/>_669 = move ((_628 as Continue).0: state::events::OrderActionRecord)<br/>_627 = move _669<br/>StorageDead(_669)<br/>StorageDead(_653)<br/>StorageDead(_651)<br/>StorageDead(_628)<br/>StorageLive(_670)<br/>StorageLive(_671)<br/>StorageLive(_672)<br/>StorageLive(_673)<br/>StorageLive(_674)<br/>StorageLive(_675)<br/>StorageLive(_676)<br/>StorageLive(_677)<br/>StorageLive(_678)<br/>StorageLive(_679)<br/>StorageLive(_680)<br/>StorageLive(_681)<br/>StorageLive(_682)<br/>_682 = &amp;_627<br/>_681 = &amp;(*_682)<br/></td></tr><tr><td align="left">_680 = &lt;OrderActionRecord as anchor_lang::Event&gt;::data(move _681)</td></tr></table>>];
    bb270__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageLive(_666)<br/>_666 = ((_628 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_668)<br/>_668 = _666<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _668)</td></tr></table>>];
    bb271__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_668)<br/>StorageDead(_666)<br/>StorageDead(_653)<br/>StorageDead(_651)<br/>StorageDead(_628)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb272__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageDead(_681)<br/>_679 = &amp;_680<br/>_678 = &amp;(*_679)<br/></td></tr><tr><td align="left">_677 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _678)</td></tr></table>>];
    bb273__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">_676 = &amp;(*_677)<br/>StorageDead(_678)<br/>_675 = [move _676]<br/>StorageDead(_676)<br/>_674 = &amp;_675<br/>_673 = &amp;(*_674)<br/>_672 = move _673 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_673)<br/></td></tr><tr><td align="left">_671 = solana_program::log::sol_log_data(move _672)</td></tr></table>>];
    bb274__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_672)<br/></td></tr><tr><td align="left">drop(_680)</td></tr></table>>];
    bb275__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">StorageDead(_682)<br/>StorageDead(_680)<br/>StorageDead(_679)<br/>StorageDead(_677)<br/>StorageDead(_675)<br/>StorageDead(_674)<br/>StorageDead(_671)<br/>_670 = const ()<br/>StorageDead(_670)<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>StorageLive(_686)<br/>StorageLive(_687)<br/>StorageLive(_688)<br/>StorageLive(_689)<br/>StorageLive(_690)<br/>StorageLive(_691)<br/>StorageLive(_692)<br/>StorageLive(_693)<br/>_693 = &amp;(*_15)<br/></td></tr><tr><td align="left">_692 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _693)</td></tr></table>>];
    bb276__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">_691 = &amp;(*_692)<br/>StorageDead(_693)<br/>StorageLive(_694)<br/>_694 = _46<br/></td></tr><tr><td align="left">_690 = User::get_perp_position(move _691, move _694)</td></tr></table>>];
    bb277__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_694)<br/>StorageDead(_691)<br/></td></tr><tr><td align="left">_689 = &lt;std::result::Result&lt;&amp;PerpPosition, error::ErrorCode&gt; as Try&gt;::branch(move _690)</td></tr></table>>];
    bb278__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_690)<br/>_695 = discriminant(_689)<br/></td></tr><tr><td align="left">switchInt(move _695)</td></tr></table>>];
    bb279__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageLive(_699)<br/>_699 = ((_689 as Continue).0: &amp;state::user::PerpPosition)<br/>_688 = _699<br/>StorageDead(_699)<br/>_687 = &amp;(*_688)<br/>StorageLive(_700)<br/>_700 = _331<br/>StorageLive(_701)<br/>StorageLive(_702)<br/>StorageLive(_703)<br/>_703 = &amp;_243<br/></td></tr><tr><td align="left">_702 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _703)</td></tr></table>>];
    bb280__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageLive(_696)<br/>_696 = ((_689 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_698)<br/>_698 = _696<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _698)</td></tr></table>>];
    bb281__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageDead(_698)<br/>StorageDead(_696)<br/>StorageDead(_687)<br/>StorageDead(_686)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb282__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageDead(_703)<br/>_701 = ((*_702).23: state::perp_market::ContractType)<br/></td></tr><tr><td align="left">_686 = PerpPosition::worst_case_liability_value(move _687, move _700, move _701)</td></tr></table>>];
    bb283__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_701)<br/>StorageDead(_700)<br/>StorageDead(_687)<br/></td></tr><tr><td align="left">_685 = &lt;std::result::Result&lt;(i128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _686)</td></tr></table>>];
    bb284__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageDead(_686)<br/>_704 = discriminant(_685)<br/></td></tr><tr><td align="left">switchInt(move _704)</td></tr></table>>];
    bb285__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageLive(_708)<br/>_708 = ((_685 as Continue).0: (i128, u128))<br/>_684 = _708<br/>StorageDead(_708)<br/>StorageLive(_683)<br/>_683 = (_684.1: u128)<br/>StorageDead(_702)<br/>StorageDead(_692)<br/>StorageDead(_689)<br/>StorageDead(_688)<br/>StorageDead(_685)<br/>StorageDead(_684)<br/>StorageLive(_709)<br/>StorageLive(_710)<br/>_710 = _683<br/>StorageLive(_711)<br/>_711 = _487<br/>_709 = Gt(move _710, move _711)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>StorageLive(_712)<br/>StorageLive(_713)<br/>_776 = const false<br/>_713 = move _243<br/></td></tr><tr><td align="left">_712 = std::mem::drop::&lt;RefMut&lt;'_, PerpMarket&gt;&gt;(move _713)</td></tr></table>>];
    bb286__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageLive(_705)<br/>_705 = ((_685 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_707)<br/>_707 = _705<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _707)</td></tr></table>>];
    bb287__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageDead(_707)<br/>StorageDead(_705)<br/>StorageDead(_702)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb288__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageDead(_713)<br/>StorageDead(_712)<br/>StorageLive(_714)<br/>StorageLive(_715)<br/>_715 = _709<br/></td></tr><tr><td align="left">switchInt(move _715)</td></tr></table>>];
    bb289__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageLive(_716)<br/>StorageLive(_717)<br/>StorageLive(_718)<br/>_718 = &amp;(*_15)<br/></td></tr><tr><td align="left">_717 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _718)</td></tr></table>>];
    bb290__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageDead(_718)<br/>StorageLive(_719)<br/>_719 = _27<br/>_720 = Len(((*_717).5: [state::user::Order; 32]))<br/>_721 = Lt(_719, _720)<br/></td></tr><tr><td align="left">assert(move _721, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _720, _719)</td></tr></table>>];
    bb291__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">_716 = (((*_717).5: [state::user::Order; 32])[_719].18: bool)<br/></td></tr><tr><td align="left">switchInt(move _716)</td></tr></table>>];
    bb292__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_719)<br/>StorageDead(_717)<br/>StorageLive(_722)<br/>StorageLive(_723)<br/>StorageLive(_724)<br/>StorageLive(_725)<br/>StorageLive(_726)<br/>StorageLive(_727)<br/>_727 = &amp;(*_15)<br/></td></tr><tr><td align="left">_726 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _727)</td></tr></table>>];
    bb293__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">_725 = &amp;(*_726)<br/>StorageDead(_727)<br/>StorageLive(_728)<br/>_728 = &amp;(*_5)<br/>StorageLive(_729)<br/>_729 = &amp;(*_4)<br/>StorageLive(_730)<br/>_730 = &amp;mut (*_6)<br/></td></tr><tr><td align="left">_724 = math::margin::meets_initial_margin_requirement(move _725, move _728, move _729, move _730)</td></tr></table>>];
    bb294__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageDead(_730)<br/>StorageDead(_729)<br/>StorageDead(_728)<br/>StorageDead(_725)<br/></td></tr><tr><td align="left">_723 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _724)</td></tr></table>>];
    bb295__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageDead(_724)<br/>_731 = discriminant(_723)<br/></td></tr><tr><td align="left">switchInt(move _731)</td></tr></table>>];
    bb296__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageLive(_735)<br/>_735 = ((_723 as Continue).0: bool)<br/>_722 = _735<br/>StorageDead(_735)<br/>StorageDead(_726)<br/>StorageDead(_723)<br/>StorageLive(_736)<br/>_736 = _722<br/></td></tr><tr><td align="left">switchInt(move _736)</td></tr></table>>];
    bb297__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageLive(_732)<br/>_732 = ((_723 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_734)<br/>_734 = _732<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _734)</td></tr></table>>];
    bb298__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageDead(_734)<br/>StorageDead(_732)<br/>StorageDead(_726)<br/>StorageDead(_723)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb299__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">_714 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb300__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageLive(_737)<br/>StorageLive(_738)<br/>StorageLive(_739)<br/>StorageLive(_740)<br/>_740 = _27<br/>StorageLive(_741)<br/>StorageLive(_742)<br/>StorageLive(_743)<br/>_743 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_742 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _743)</td></tr></table>>];
    bb301__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">_741 = &amp;mut (*_742)<br/>StorageDead(_743)<br/>StorageLive(_744)<br/>StorageLive(_745)<br/>_745 = &amp;_13<br/>_744 = &amp;(*_745)<br/>StorageLive(_746)<br/>_746 = &amp;(*_5)<br/>StorageLive(_747)<br/>_747 = &amp;(*_4)<br/>StorageLive(_748)<br/>_748 = &amp;mut (*_6)<br/>StorageLive(_749)<br/>_749 = _9<br/>StorageLive(_750)<br/>_750 = _10<br/>StorageLive(_751)<br/>_751 = OrderActionExplanation::InsufficientFreeCollateral<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>StorageLive(_754)<br/>_754 = &amp;_11<br/>_753 = &amp;(*_754)<br/>_752 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::Some(move _753)<br/>StorageDead(_753)<br/></td></tr><tr><td align="left">_739 = controller::orders::cancel_order(move _740, move _741, move _744, move _746, move _747, move _748, move _749, move _750, move _751, move _752, const 0_u64, const false)</td></tr></table>>];
    bb302__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_752)<br/>StorageDead(_751)<br/>StorageDead(_750)<br/>StorageDead(_749)<br/>StorageDead(_748)<br/>StorageDead(_747)<br/>StorageDead(_746)<br/>StorageDead(_744)<br/>StorageDead(_741)<br/>StorageDead(_740)<br/></td></tr><tr><td align="left">_738 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _739)</td></tr></table>>];
    bb303__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_739)<br/>_755 = discriminant(_738)<br/></td></tr><tr><td align="left">switchInt(move _755)</td></tr></table>>];
    bb304__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageLive(_759)<br/>_759 = ((_738 as Continue).0: ())<br/>_737 = _759<br/>StorageDead(_759)<br/>StorageDead(_754)<br/>StorageDead(_745)<br/>StorageDead(_742)<br/>StorageDead(_738)<br/>StorageDead(_737)<br/>_714 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb305__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageLive(_756)<br/>_756 = ((_738 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_758)<br/>_758 = _756<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _758)</td></tr></table>>];
    bb306__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageDead(_758)<br/>StorageDead(_756)<br/>StorageDead(_754)<br/>StorageDead(_745)<br/>StorageDead(_742)<br/>StorageDead(_738)<br/>StorageDead(_737)<br/>StorageDead(_736)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb307__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_736)<br/>StorageDead(_722)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb308__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageDead(_719)<br/>StorageDead(_717)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb309__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">_714 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb310__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageDead(_716)<br/>StorageDead(_715)<br/>StorageDead(_714)<br/>StorageLive(_760)<br/>StorageLive(_761)<br/>StorageLive(_762)<br/>StorageLive(_763)<br/>_763 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_762 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _763)</td></tr></table>>];
    bb311__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">_761 = &amp;mut (*_762)<br/>StorageDead(_763)<br/>StorageLive(_764)<br/>_764 = _10<br/></td></tr><tr><td align="left">_760 = User::update_last_active_slot(move _761, move _764)</td></tr></table>>];
    bb312__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageDead(_764)<br/>StorageDead(_761)<br/>StorageDead(_762)<br/>StorageDead(_760)<br/>StorageLive(_765)<br/>_765 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _765)<br/>StorageDead(_765)<br/>StorageDead(_709)<br/>StorageDead(_683)<br/>StorageDead(_627)<br/>StorageDead(_608)<br/></td></tr><tr><td align="left">drop(_595)</td></tr></table>>];
    bb313__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_595)<br/>StorageDead(_592)<br/>StorageDead(_487)<br/>StorageDead(_403)<br/>StorageDead(_388)<br/>StorageDead(_332)<br/>StorageDead(_331)<br/>StorageDead(_289)<br/>StorageDead(_255)<br/>StorageDead(_254)<br/>_776 = const false<br/>StorageDead(_243)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">drop(_16)</td></tr></table>>];
    bb314__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb315__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_722)<br/>StorageDead(_716)<br/>StorageDead(_715)<br/>StorageDead(_714)<br/>StorageDead(_709)<br/>StorageDead(_683)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb316__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_692)<br/>StorageDead(_689)<br/>StorageDead(_688)<br/>StorageDead(_685)<br/>StorageDead(_684)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb317__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageDead(_627)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb318__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageDead(_608)<br/></td></tr><tr><td align="left">drop(_595)</td></tr></table>>];
    bb319__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageDead(_595)<br/>StorageDead(_592)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb320__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_567)<br/>StorageDead(_560)<br/>StorageDead(_554)<br/>StorageDead(_548)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb321__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">StorageDead(_513)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb322__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_487)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb323__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageDead(_496)<br/>StorageDead(_493)<br/>StorageDead(_492)<br/>StorageDead(_489)<br/>StorageDead(_488)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb324__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageDead(_403)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb325__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageDead(_388)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb326__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageDead(_340)<br/>StorageDead(_337)<br/>StorageDead(_333)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb327__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageDead(_332)<br/>StorageDead(_331)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb328__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageDead(_289)<br/>StorageDead(_255)<br/>StorageDead(_254)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb329__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageDead(_277)<br/>StorageDead(_274)<br/>StorageDead(_271)<br/>StorageDead(_268)<br/>StorageDead(_266)<br/>StorageDead(_265)<br/>StorageDead(_262)<br/>StorageDead(_257)<br/>StorageDead(_256)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb330__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">_776 = const false<br/>StorageDead(_243)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb331__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb332__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/></td></tr><tr><td align="left">drop(_16)</td></tr></table>>];
    bb333__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb334__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left">return</td></tr></table>>];
    bb335__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">335 (cleanup)</td></tr><tr><td align="left">drop(_680)</td></tr></table>>];
    bb336__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">336 (cleanup)</td></tr><tr><td align="left">drop(_595)</td></tr></table>>];
    bb337__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">337 (cleanup)</td></tr><tr><td align="left">drop(_449)</td></tr></table>>];
    bb338__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">338 (cleanup)</td></tr><tr><td align="left">drop(_430)</td></tr></table>>];
    bb339__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">339 (cleanup)</td></tr><tr><td align="left">drop(_365)</td></tr></table>>];
    bb340__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">340 (cleanup)</td></tr><tr><td align="left">drop(_311)</td></tr></table>>];
    bb341__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">341 (cleanup)</td></tr><tr><td align="left">drop(_223)</td></tr></table>>];
    bb342__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">342 (cleanup)</td></tr><tr><td align="left">drop(_171)</td></tr></table>>];
    bb343__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">343 (cleanup)</td></tr><tr><td align="left">drop(_121)</td></tr></table>>];
    bb344__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">344 (cleanup)</td></tr><tr><td align="left">drop(_81)</td></tr></table>>];
    bb345__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">345 (cleanup)</td></tr><tr><td align="left">drop(_16)</td></tr></table>>];
    bb346__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">346 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb347__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left">drop(_243)</td></tr></table>>];
    bb348__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left">switchInt(_776)</td></tr></table>>];
    bb349__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">349 (cleanup)</td></tr><tr><td align="left" balign="left">_789 = discriminant(_598)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb350__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">350 (cleanup)</td></tr><tr><td align="left">drop(_243)</td></tr></table>>];
    bb351__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">351 (cleanup)</td></tr><tr><td align="left">switchInt(_776)</td></tr></table>>];
    bb352__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">352 (cleanup)</td></tr><tr><td align="left" balign="left">_790 = discriminant(_244)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb353__0_545 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">353 (cleanup)</td></tr><tr><td align="left" balign="left">_791 = discriminant(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_545 -> bb1__0_545 [label="return"];
    bb1__0_545 -> bb2__0_545 [label="return"];
    bb2__0_545 -> bb3__0_545 [label="return"];
    bb3__0_545 -> bb4__0_545 [label="return"];
    bb3__0_545 -> bb346__0_545 [label="unwind"];
    bb4__0_545 -> bb5__0_545 [label="return"];
    bb4__0_545 -> bb346__0_545 [label="unwind"];
    bb5__0_545 -> bb6__0_545 [label="0"];
    bb5__0_545 -> bb8__0_545 [label="1"];
    bb5__0_545 -> bb7__0_545 [label="otherwise"];
    bb6__0_545 -> bb10__0_545 [label="return"];
    bb6__0_545 -> bb345__0_545 [label="unwind"];
    bb8__0_545 -> bb9__0_545 [label="return"];
    bb8__0_545 -> bb353__0_545 [label="unwind"];
    bb9__0_545 -> bb333__0_545 [label=""];
    bb10__0_545 -> bb11__0_545 [label="return"];
    bb10__0_545 -> bb345__0_545 [label="unwind"];
    bb11__0_545 -> bb12__0_545 [label="return"];
    bb11__0_545 -> bb345__0_545 [label="unwind"];
    bb12__0_545 -> bb13__0_545 [label="return"];
    bb12__0_545 -> bb345__0_545 [label="unwind"];
    bb13__0_545 -> bb14__0_545 [label="return"];
    bb13__0_545 -> bb345__0_545 [label="unwind"];
    bb14__0_545 -> bb15__0_545 [label="0"];
    bb14__0_545 -> bb16__0_545 [label="1"];
    bb14__0_545 -> bb7__0_545 [label="otherwise"];
    bb15__0_545 -> bb18__0_545 [label="return"];
    bb15__0_545 -> bb345__0_545 [label="unwind"];
    bb16__0_545 -> bb17__0_545 [label="return"];
    bb16__0_545 -> bb345__0_545 [label="unwind"];
    bb17__0_545 -> bb332__0_545 [label=""];
    bb18__0_545 -> bb19__0_545 [label="success"];
    bb18__0_545 -> bb345__0_545 [label="unwind"];
    bb19__0_545 -> bb20__0_545 [label="return"];
    bb19__0_545 -> bb345__0_545 [label="unwind"];
    bb20__0_545 -> bb21__0_545 [label="success"];
    bb20__0_545 -> bb345__0_545 [label="unwind"];
    bb21__0_545 -> bb22__0_545 [label="return"];
    bb21__0_545 -> bb345__0_545 [label="unwind"];
    bb22__0_545 -> bb23__0_545 [label="success"];
    bb22__0_545 -> bb345__0_545 [label="unwind"];
    bb23__0_545 -> bb24__0_545 [label="return"];
    bb23__0_545 -> bb345__0_545 [label="unwind"];
    bb24__0_545 -> bb26__0_545 [label="0"];
    bb24__0_545 -> bb25__0_545 [label="otherwise"];
    bb25__0_545 -> bb34__0_545 [label=""];
    bb26__0_545 -> bb27__0_545 [label="return"];
    bb26__0_545 -> bb345__0_545 [label="unwind"];
    bb27__0_545 -> bb28__0_545 [label="return"];
    bb27__0_545 -> bb345__0_545 [label="unwind"];
    bb28__0_545 -> bb29__0_545 [label="return"];
    bb28__0_545 -> bb345__0_545 [label="unwind"];
    bb29__0_545 -> bb30__0_545 [label="return"];
    bb29__0_545 -> bb344__0_545 [label="unwind"];
    bb30__0_545 -> bb31__0_545 [label="return"];
    bb30__0_545 -> bb344__0_545 [label="unwind"];
    bb31__0_545 -> bb32__0_545 [label="return"];
    bb31__0_545 -> bb345__0_545 [label="unwind"];
    bb32__0_545 -> bb33__0_545 [label="return"];
    bb32__0_545 -> bb345__0_545 [label="unwind"];
    bb33__0_545 -> bb34__0_545 [label=""];
    bb34__0_545 -> bb35__0_545 [label="return"];
    bb34__0_545 -> bb345__0_545 [label="unwind"];
    bb35__0_545 -> bb36__0_545 [label="0"];
    bb35__0_545 -> bb37__0_545 [label="1"];
    bb35__0_545 -> bb7__0_545 [label="otherwise"];
    bb36__0_545 -> bb39__0_545 [label="return"];
    bb36__0_545 -> bb345__0_545 [label="unwind"];
    bb37__0_545 -> bb38__0_545 [label="return"];
    bb37__0_545 -> bb345__0_545 [label="unwind"];
    bb38__0_545 -> bb331__0_545 [label=""];
    bb39__0_545 -> bb40__0_545 [label="success"];
    bb39__0_545 -> bb345__0_545 [label="unwind"];
    bb40__0_545 -> bb41__0_545 [label="return"];
    bb40__0_545 -> bb345__0_545 [label="unwind"];
    bb41__0_545 -> bb43__0_545 [label="0"];
    bb41__0_545 -> bb42__0_545 [label="otherwise"];
    bb42__0_545 -> bb51__0_545 [label=""];
    bb43__0_545 -> bb44__0_545 [label="return"];
    bb43__0_545 -> bb345__0_545 [label="unwind"];
    bb44__0_545 -> bb45__0_545 [label="return"];
    bb44__0_545 -> bb345__0_545 [label="unwind"];
    bb45__0_545 -> bb46__0_545 [label="return"];
    bb45__0_545 -> bb345__0_545 [label="unwind"];
    bb46__0_545 -> bb47__0_545 [label="return"];
    bb46__0_545 -> bb343__0_545 [label="unwind"];
    bb47__0_545 -> bb48__0_545 [label="return"];
    bb47__0_545 -> bb343__0_545 [label="unwind"];
    bb48__0_545 -> bb49__0_545 [label="return"];
    bb48__0_545 -> bb345__0_545 [label="unwind"];
    bb49__0_545 -> bb50__0_545 [label="return"];
    bb49__0_545 -> bb345__0_545 [label="unwind"];
    bb50__0_545 -> bb51__0_545 [label=""];
    bb51__0_545 -> bb52__0_545 [label="return"];
    bb51__0_545 -> bb345__0_545 [label="unwind"];
    bb52__0_545 -> bb53__0_545 [label="0"];
    bb52__0_545 -> bb54__0_545 [label="1"];
    bb52__0_545 -> bb7__0_545 [label="otherwise"];
    bb53__0_545 -> bb56__0_545 [label="return"];
    bb53__0_545 -> bb345__0_545 [label="unwind"];
    bb54__0_545 -> bb55__0_545 [label="return"];
    bb54__0_545 -> bb345__0_545 [label="unwind"];
    bb55__0_545 -> bb331__0_545 [label=""];
    bb56__0_545 -> bb57__0_545 [label="success"];
    bb56__0_545 -> bb345__0_545 [label="unwind"];
    bb57__0_545 -> bb58__0_545 [label="return"];
    bb57__0_545 -> bb345__0_545 [label="unwind"];
    bb58__0_545 -> bb61__0_545 [label="0"];
    bb58__0_545 -> bb59__0_545 [label="otherwise"];
    bb59__0_545 -> bb60__0_545 [label="return"];
    bb59__0_545 -> bb345__0_545 [label="unwind"];
    bb60__0_545 -> bb331__0_545 [label=""];
    bb61__0_545 -> bb62__0_545 [label="return"];
    bb61__0_545 -> bb345__0_545 [label="unwind"];
    bb62__0_545 -> bb64__0_545 [label="0"];
    bb62__0_545 -> bb63__0_545 [label="otherwise"];
    bb63__0_545 -> bb72__0_545 [label=""];
    bb64__0_545 -> bb65__0_545 [label="return"];
    bb64__0_545 -> bb345__0_545 [label="unwind"];
    bb65__0_545 -> bb66__0_545 [label="return"];
    bb65__0_545 -> bb345__0_545 [label="unwind"];
    bb66__0_545 -> bb67__0_545 [label="return"];
    bb66__0_545 -> bb345__0_545 [label="unwind"];
    bb67__0_545 -> bb68__0_545 [label="return"];
    bb67__0_545 -> bb342__0_545 [label="unwind"];
    bb68__0_545 -> bb69__0_545 [label="return"];
    bb68__0_545 -> bb342__0_545 [label="unwind"];
    bb69__0_545 -> bb70__0_545 [label="return"];
    bb69__0_545 -> bb345__0_545 [label="unwind"];
    bb70__0_545 -> bb71__0_545 [label="return"];
    bb70__0_545 -> bb345__0_545 [label="unwind"];
    bb71__0_545 -> bb72__0_545 [label=""];
    bb72__0_545 -> bb73__0_545 [label="return"];
    bb72__0_545 -> bb345__0_545 [label="unwind"];
    bb73__0_545 -> bb74__0_545 [label="0"];
    bb73__0_545 -> bb75__0_545 [label="1"];
    bb73__0_545 -> bb7__0_545 [label="otherwise"];
    bb74__0_545 -> bb77__0_545 [label="return"];
    bb74__0_545 -> bb345__0_545 [label="unwind"];
    bb75__0_545 -> bb76__0_545 [label="return"];
    bb75__0_545 -> bb345__0_545 [label="unwind"];
    bb76__0_545 -> bb331__0_545 [label=""];
    bb77__0_545 -> bb78__0_545 [label="return"];
    bb77__0_545 -> bb345__0_545 [label="unwind"];
    bb78__0_545 -> bb79__0_545 [label="return"];
    bb78__0_545 -> bb345__0_545 [label="unwind"];
    bb79__0_545 -> bb80__0_545 [label="0"];
    bb79__0_545 -> bb81__0_545 [label="1"];
    bb79__0_545 -> bb7__0_545 [label="otherwise"];
    bb80__0_545 -> bb83__0_545 [label="return"];
    bb80__0_545 -> bb345__0_545 [label="unwind"];
    bb81__0_545 -> bb82__0_545 [label="return"];
    bb81__0_545 -> bb345__0_545 [label="unwind"];
    bb82__0_545 -> bb331__0_545 [label=""];
    bb83__0_545 -> bb84__0_545 [label="return"];
    bb83__0_545 -> bb345__0_545 [label="unwind"];
    bb84__0_545 -> bb86__0_545 [label="0"];
    bb84__0_545 -> bb85__0_545 [label="otherwise"];
    bb85__0_545 -> bb87__0_545 [label="return"];
    bb85__0_545 -> bb345__0_545 [label="unwind"];
    bb86__0_545 -> bb93__0_545 [label=""];
    bb87__0_545 -> bb88__0_545 [label="return"];
    bb87__0_545 -> bb345__0_545 [label="unwind"];
    bb88__0_545 -> bb89__0_545 [label="return"];
    bb88__0_545 -> bb345__0_545 [label="unwind"];
    bb89__0_545 -> bb90__0_545 [label="return"];
    bb89__0_545 -> bb341__0_545 [label="unwind"];
    bb90__0_545 -> bb91__0_545 [label="return"];
    bb90__0_545 -> bb341__0_545 [label="unwind"];
    bb91__0_545 -> bb92__0_545 [label="return"];
    bb91__0_545 -> bb345__0_545 [label="unwind"];
    bb92__0_545 -> bb93__0_545 [label=""];
    bb93__0_545 -> bb94__0_545 [label="return"];
    bb93__0_545 -> bb345__0_545 [label="unwind"];
    bb94__0_545 -> bb95__0_545 [label="0"];
    bb94__0_545 -> bb96__0_545 [label="1"];
    bb94__0_545 -> bb7__0_545 [label="otherwise"];
    bb95__0_545 -> bb98__0_545 [label="return"];
    bb95__0_545 -> bb345__0_545 [label="unwind"];
    bb96__0_545 -> bb97__0_545 [label="return"];
    bb96__0_545 -> bb345__0_545 [label="unwind"];
    bb97__0_545 -> bb331__0_545 [label=""];
    bb98__0_545 -> bb99__0_545 [label="return"];
    bb98__0_545 -> bb345__0_545 [label="unwind"];
    bb99__0_545 -> bb100__0_545 [label="0"];
    bb99__0_545 -> bb101__0_545 [label="1"];
    bb99__0_545 -> bb7__0_545 [label="otherwise"];
    bb100__0_545 -> bb103__0_545 [label="return"];
    bb100__0_545 -> bb351__0_545 [label="unwind"];
    bb101__0_545 -> bb102__0_545 [label="return"];
    bb101__0_545 -> bb352__0_545 [label="unwind"];
    bb102__0_545 -> bb330__0_545 [label=""];
    bb103__0_545 -> bb104__0_545 [label="return"];
    bb103__0_545 -> bb351__0_545 [label="unwind"];
    bb104__0_545 -> bb105__0_545 [label="return"];
    bb104__0_545 -> bb351__0_545 [label="unwind"];
    bb105__0_545 -> bb106__0_545 [label="return"];
    bb105__0_545 -> bb351__0_545 [label="unwind"];
    bb106__0_545 -> bb107__0_545 [label="return"];
    bb106__0_545 -> bb351__0_545 [label="unwind"];
    bb107__0_545 -> bb108__0_545 [label="return"];
    bb107__0_545 -> bb351__0_545 [label="unwind"];
    bb108__0_545 -> bb109__0_545 [label="return"];
    bb108__0_545 -> bb351__0_545 [label="unwind"];
    bb109__0_545 -> bb110__0_545 [label="0"];
    bb109__0_545 -> bb111__0_545 [label="1"];
    bb109__0_545 -> bb7__0_545 [label="otherwise"];
    bb110__0_545 -> bb113__0_545 [label="return"];
    bb110__0_545 -> bb351__0_545 [label="unwind"];
    bb111__0_545 -> bb112__0_545 [label="return"];
    bb111__0_545 -> bb351__0_545 [label="unwind"];
    bb112__0_545 -> bb329__0_545 [label=""];
    bb113__0_545 -> bb114__0_545 [label="return"];
    bb113__0_545 -> bb351__0_545 [label="unwind"];
    bb114__0_545 -> bb115__0_545 [label="0"];
    bb114__0_545 -> bb116__0_545 [label="1"];
    bb114__0_545 -> bb7__0_545 [label="otherwise"];
    bb115__0_545 -> bb118__0_545 [label="return"];
    bb115__0_545 -> bb351__0_545 [label="unwind"];
    bb116__0_545 -> bb117__0_545 [label="return"];
    bb116__0_545 -> bb351__0_545 [label="unwind"];
    bb117__0_545 -> bb329__0_545 [label=""];
    bb118__0_545 -> bb119__0_545 [label="return"];
    bb118__0_545 -> bb351__0_545 [label="unwind"];
    bb119__0_545 -> bb120__0_545 [label="0"];
    bb119__0_545 -> bb121__0_545 [label="1"];
    bb119__0_545 -> bb7__0_545 [label="otherwise"];
    bb120__0_545 -> bb124__0_545 [label="0"];
    bb120__0_545 -> bb123__0_545 [label="otherwise"];
    bb121__0_545 -> bb122__0_545 [label="return"];
    bb121__0_545 -> bb351__0_545 [label="unwind"];
    bb122__0_545 -> bb328__0_545 [label=""];
    bb123__0_545 -> bb131__0_545 [label=""];
    bb124__0_545 -> bb125__0_545 [label="return"];
    bb124__0_545 -> bb351__0_545 [label="unwind"];
    bb125__0_545 -> bb126__0_545 [label="return"];
    bb125__0_545 -> bb351__0_545 [label="unwind"];
    bb126__0_545 -> bb127__0_545 [label="return"];
    bb126__0_545 -> bb351__0_545 [label="unwind"];
    bb127__0_545 -> bb128__0_545 [label="return"];
    bb127__0_545 -> bb340__0_545 [label="unwind"];
    bb128__0_545 -> bb129__0_545 [label="return"];
    bb128__0_545 -> bb340__0_545 [label="unwind"];
    bb129__0_545 -> bb130__0_545 [label="return"];
    bb129__0_545 -> bb351__0_545 [label="unwind"];
    bb130__0_545 -> bb131__0_545 [label=""];
    bb131__0_545 -> bb132__0_545 [label="return"];
    bb131__0_545 -> bb351__0_545 [label="unwind"];
    bb132__0_545 -> bb133__0_545 [label="0"];
    bb132__0_545 -> bb134__0_545 [label="1"];
    bb132__0_545 -> bb7__0_545 [label="otherwise"];
    bb133__0_545 -> bb136__0_545 [label="return"];
    bb133__0_545 -> bb351__0_545 [label="unwind"];
    bb134__0_545 -> bb135__0_545 [label="return"];
    bb134__0_545 -> bb351__0_545 [label="unwind"];
    bb135__0_545 -> bb328__0_545 [label=""];
    bb136__0_545 -> bb137__0_545 [label="return"];
    bb136__0_545 -> bb351__0_545 [label="unwind"];
    bb137__0_545 -> bb138__0_545 [label="return"];
    bb137__0_545 -> bb351__0_545 [label="unwind"];
    bb138__0_545 -> bb139__0_545 [label="return"];
    bb138__0_545 -> bb351__0_545 [label="unwind"];
    bb139__0_545 -> bb140__0_545 [label="0"];
    bb139__0_545 -> bb141__0_545 [label="1"];
    bb139__0_545 -> bb7__0_545 [label="otherwise"];
    bb140__0_545 -> bb143__0_545 [label="return"];
    bb140__0_545 -> bb351__0_545 [label="unwind"];
    bb141__0_545 -> bb142__0_545 [label="return"];
    bb141__0_545 -> bb351__0_545 [label="unwind"];
    bb142__0_545 -> bb326__0_545 [label=""];
    bb143__0_545 -> bb144__0_545 [label="return"];
    bb143__0_545 -> bb351__0_545 [label="unwind"];
    bb144__0_545 -> bb145__0_545 [label="0"];
    bb144__0_545 -> bb146__0_545 [label="1"];
    bb144__0_545 -> bb7__0_545 [label="otherwise"];
    bb145__0_545 -> bb149__0_545 [label="0"];
    bb145__0_545 -> bb148__0_545 [label="otherwise"];
    bb146__0_545 -> bb147__0_545 [label="return"];
    bb146__0_545 -> bb351__0_545 [label="unwind"];
    bb147__0_545 -> bb326__0_545 [label=""];
    bb148__0_545 -> bb150__0_545 [label="return"];
    bb148__0_545 -> bb351__0_545 [label="unwind"];
    bb149__0_545 -> bb157__0_545 [label=""];
    bb150__0_545 -> bb151__0_545 [label="return"];
    bb150__0_545 -> bb351__0_545 [label="unwind"];
    bb151__0_545 -> bb152__0_545 [label="return"];
    bb151__0_545 -> bb351__0_545 [label="unwind"];
    bb152__0_545 -> bb153__0_545 [label="return"];
    bb152__0_545 -> bb339__0_545 [label="unwind"];
    bb153__0_545 -> bb154__0_545 [label="return"];
    bb153__0_545 -> bb339__0_545 [label="unwind"];
    bb154__0_545 -> bb155__0_545 [label="return"];
    bb154__0_545 -> bb351__0_545 [label="unwind"];
    bb155__0_545 -> bb156__0_545 [label="return"];
    bb155__0_545 -> bb351__0_545 [label="unwind"];
    bb156__0_545 -> bb157__0_545 [label=""];
    bb157__0_545 -> bb158__0_545 [label="return"];
    bb157__0_545 -> bb351__0_545 [label="unwind"];
    bb158__0_545 -> bb159__0_545 [label="0"];
    bb158__0_545 -> bb160__0_545 [label="1"];
    bb158__0_545 -> bb7__0_545 [label="otherwise"];
    bb159__0_545 -> bb162__0_545 [label="return"];
    bb159__0_545 -> bb351__0_545 [label="unwind"];
    bb160__0_545 -> bb161__0_545 [label="return"];
    bb160__0_545 -> bb351__0_545 [label="unwind"];
    bb161__0_545 -> bb327__0_545 [label=""];
    bb162__0_545 -> bb163__0_545 [label="return"];
    bb162__0_545 -> bb351__0_545 [label="unwind"];
    bb163__0_545 -> bb164__0_545 [label="return"];
    bb163__0_545 -> bb351__0_545 [label="unwind"];
    bb164__0_545 -> bb165__0_545 [label="return"];
    bb164__0_545 -> bb351__0_545 [label="unwind"];
    bb165__0_545 -> bb166__0_545 [label="0"];
    bb165__0_545 -> bb167__0_545 [label="1"];
    bb165__0_545 -> bb7__0_545 [label="otherwise"];
    bb166__0_545 -> bb169__0_545 [label="return"];
    bb166__0_545 -> bb351__0_545 [label="unwind"];
    bb167__0_545 -> bb168__0_545 [label="return"];
    bb167__0_545 -> bb351__0_545 [label="unwind"];
    bb168__0_545 -> bb325__0_545 [label=""];
    bb169__0_545 -> bb170__0_545 [label="success"];
    bb169__0_545 -> bb351__0_545 [label="unwind"];
    bb170__0_545 -> bb171__0_545 [label="return"];
    bb170__0_545 -> bb351__0_545 [label="unwind"];
    bb171__0_545 -> bb172__0_545 [label="return"];
    bb171__0_545 -> bb351__0_545 [label="unwind"];
    bb172__0_545 -> bb173__0_545 [label="0"];
    bb172__0_545 -> bb174__0_545 [label="1"];
    bb172__0_545 -> bb7__0_545 [label="otherwise"];
    bb173__0_545 -> bb177__0_545 [label="0"];
    bb173__0_545 -> bb176__0_545 [label="otherwise"];
    bb174__0_545 -> bb175__0_545 [label="return"];
    bb174__0_545 -> bb351__0_545 [label="unwind"];
    bb175__0_545 -> bb324__0_545 [label=""];
    bb176__0_545 -> bb196__0_545 [label=""];
    bb177__0_545 -> bb178__0_545 [label="return"];
    bb177__0_545 -> bb351__0_545 [label="unwind"];
    bb178__0_545 -> bb179__0_545 [label="return"];
    bb178__0_545 -> bb351__0_545 [label="unwind"];
    bb179__0_545 -> bb180__0_545 [label="return"];
    bb179__0_545 -> bb351__0_545 [label="unwind"];
    bb180__0_545 -> bb181__0_545 [label="return"];
    bb180__0_545 -> bb338__0_545 [label="unwind"];
    bb181__0_545 -> bb182__0_545 [label="return"];
    bb181__0_545 -> bb338__0_545 [label="unwind"];
    bb182__0_545 -> bb183__0_545 [label="return"];
    bb182__0_545 -> bb351__0_545 [label="unwind"];
    bb183__0_545 -> bb184__0_545 [label="return"];
    bb183__0_545 -> bb351__0_545 [label="unwind"];
    bb184__0_545 -> bb185__0_545 [label="return"];
    bb184__0_545 -> bb351__0_545 [label="unwind"];
    bb185__0_545 -> bb186__0_545 [label="success"];
    bb185__0_545 -> bb351__0_545 [label="unwind"];
    bb186__0_545 -> bb187__0_545 [label="return"];
    bb186__0_545 -> bb351__0_545 [label="unwind"];
    bb187__0_545 -> bb188__0_545 [label="return"];
    bb187__0_545 -> bb351__0_545 [label="unwind"];
    bb188__0_545 -> bb189__0_545 [label="success"];
    bb188__0_545 -> bb351__0_545 [label="unwind"];
    bb189__0_545 -> bb190__0_545 [label="return"];
    bb189__0_545 -> bb351__0_545 [label="unwind"];
    bb190__0_545 -> bb191__0_545 [label="return"];
    bb190__0_545 -> bb351__0_545 [label="unwind"];
    bb191__0_545 -> bb192__0_545 [label="return"];
    bb191__0_545 -> bb351__0_545 [label="unwind"];
    bb192__0_545 -> bb193__0_545 [label="return"];
    bb192__0_545 -> bb337__0_545 [label="unwind"];
    bb193__0_545 -> bb194__0_545 [label="return"];
    bb193__0_545 -> bb337__0_545 [label="unwind"];
    bb194__0_545 -> bb195__0_545 [label="return"];
    bb194__0_545 -> bb351__0_545 [label="unwind"];
    bb195__0_545 -> bb196__0_545 [label=""];
    bb196__0_545 -> bb197__0_545 [label="return"];
    bb196__0_545 -> bb351__0_545 [label="unwind"];
    bb197__0_545 -> bb198__0_545 [label="0"];
    bb197__0_545 -> bb199__0_545 [label="1"];
    bb197__0_545 -> bb7__0_545 [label="otherwise"];
    bb198__0_545 -> bb201__0_545 [label="return"];
    bb198__0_545 -> bb351__0_545 [label="unwind"];
    bb199__0_545 -> bb200__0_545 [label="return"];
    bb199__0_545 -> bb351__0_545 [label="unwind"];
    bb200__0_545 -> bb324__0_545 [label=""];
    bb201__0_545 -> bb202__0_545 [label="return"];
    bb201__0_545 -> bb351__0_545 [label="unwind"];
    bb202__0_545 -> bb203__0_545 [label="return"];
    bb202__0_545 -> bb351__0_545 [label="unwind"];
    bb203__0_545 -> bb204__0_545 [label="0"];
    bb203__0_545 -> bb205__0_545 [label="1"];
    bb203__0_545 -> bb7__0_545 [label="otherwise"];
    bb204__0_545 -> bb207__0_545 [label="return"];
    bb204__0_545 -> bb351__0_545 [label="unwind"];
    bb205__0_545 -> bb206__0_545 [label="return"];
    bb205__0_545 -> bb351__0_545 [label="unwind"];
    bb206__0_545 -> bb323__0_545 [label=""];
    bb207__0_545 -> bb208__0_545 [label="return"];
    bb207__0_545 -> bb351__0_545 [label="unwind"];
    bb208__0_545 -> bb209__0_545 [label="return"];
    bb208__0_545 -> bb351__0_545 [label="unwind"];
    bb209__0_545 -> bb210__0_545 [label="0"];
    bb209__0_545 -> bb211__0_545 [label="1"];
    bb209__0_545 -> bb7__0_545 [label="otherwise"];
    bb210__0_545 -> bb213__0_545 [label="return"];
    bb210__0_545 -> bb351__0_545 [label="unwind"];
    bb211__0_545 -> bb212__0_545 [label="return"];
    bb211__0_545 -> bb351__0_545 [label="unwind"];
    bb212__0_545 -> bb323__0_545 [label=""];
    bb213__0_545 -> bb214__0_545 [label="success"];
    bb213__0_545 -> bb351__0_545 [label="unwind"];
    bb214__0_545 -> bb215__0_545 [label="return"];
    bb214__0_545 -> bb351__0_545 [label="unwind"];
    bb215__0_545 -> bb216__0_545 [label="return"];
    bb215__0_545 -> bb351__0_545 [label="unwind"];
    bb216__0_545 -> bb217__0_545 [label="return"];
    bb216__0_545 -> bb351__0_545 [label="unwind"];
    bb217__0_545 -> bb218__0_545 [label="0"];
    bb217__0_545 -> bb219__0_545 [label="1"];
    bb217__0_545 -> bb7__0_545 [label="otherwise"];
    bb218__0_545 -> bb221__0_545 [label="return"];
    bb218__0_545 -> bb351__0_545 [label="unwind"];
    bb219__0_545 -> bb220__0_545 [label="return"];
    bb219__0_545 -> bb351__0_545 [label="unwind"];
    bb220__0_545 -> bb321__0_545 [label=""];
    bb221__0_545 -> bb222__0_545 [label="success"];
    bb221__0_545 -> bb351__0_545 [label="unwind"];
    bb222__0_545 -> bb223__0_545 [label="return"];
    bb222__0_545 -> bb351__0_545 [label="unwind"];
    bb223__0_545 -> bb227__0_545 [label="0"];
    bb223__0_545 -> bb224__0_545 [label="otherwise"];
    bb224__0_545 -> bb225__0_545 [label="return"];
    bb224__0_545 -> bb351__0_545 [label="unwind"];
    bb225__0_545 -> bb226__0_545 [label="return"];
    bb225__0_545 -> bb351__0_545 [label="unwind"];
    bb226__0_545 -> bb228__0_545 [label=""];
    bb227__0_545 -> bb228__0_545 [label=""];
    bb228__0_545 -> bb229__0_545 [label="return"];
    bb228__0_545 -> bb351__0_545 [label="unwind"];
    bb229__0_545 -> bb230__0_545 [label="success"];
    bb229__0_545 -> bb351__0_545 [label="unwind"];
    bb230__0_545 -> bb231__0_545 [label="return"];
    bb230__0_545 -> bb351__0_545 [label="unwind"];
    bb231__0_545 -> bb232__0_545 [label="success"];
    bb231__0_545 -> bb351__0_545 [label="unwind"];
    bb232__0_545 -> bb233__0_545 [label="return"];
    bb232__0_545 -> bb351__0_545 [label="unwind"];
    bb233__0_545 -> bb234__0_545 [label="success"];
    bb233__0_545 -> bb351__0_545 [label="unwind"];
    bb234__0_545 -> bb235__0_545 [label="return"];
    bb234__0_545 -> bb351__0_545 [label="unwind"];
    bb235__0_545 -> bb236__0_545 [label="return"];
    bb235__0_545 -> bb351__0_545 [label="unwind"];
    bb236__0_545 -> bb237__0_545 [label="return"];
    bb236__0_545 -> bb351__0_545 [label="unwind"];
    bb237__0_545 -> bb238__0_545 [label="return"];
    bb237__0_545 -> bb351__0_545 [label="unwind"];
    bb238__0_545 -> bb239__0_545 [label="0"];
    bb238__0_545 -> bb240__0_545 [label="1"];
    bb238__0_545 -> bb7__0_545 [label="otherwise"];
    bb239__0_545 -> bb242__0_545 [label="return"];
    bb239__0_545 -> bb351__0_545 [label="unwind"];
    bb240__0_545 -> bb241__0_545 [label="return"];
    bb240__0_545 -> bb351__0_545 [label="unwind"];
    bb241__0_545 -> bb320__0_545 [label=""];
    bb242__0_545 -> bb243__0_545 [label="return"];
    bb242__0_545 -> bb351__0_545 [label="unwind"];
    bb243__0_545 -> bb244__0_545 [label="0"];
    bb243__0_545 -> bb245__0_545 [label="1"];
    bb243__0_545 -> bb7__0_545 [label="otherwise"];
    bb244__0_545 -> bb247__0_545 [label="return"];
    bb244__0_545 -> bb351__0_545 [label="unwind"];
    bb245__0_545 -> bb246__0_545 [label="return"];
    bb245__0_545 -> bb351__0_545 [label="unwind"];
    bb246__0_545 -> bb320__0_545 [label=""];
    bb247__0_545 -> bb248__0_545 [label="0"];
    bb247__0_545 -> bb255__0_545 [label="otherwise"];
    bb248__0_545 -> bb249__0_545 [label="return"];
    bb248__0_545 -> bb351__0_545 [label="unwind"];
    bb249__0_545 -> bb250__0_545 [label="return"];
    bb249__0_545 -> bb351__0_545 [label="unwind"];
    bb250__0_545 -> bb251__0_545 [label="return"];
    bb250__0_545 -> bb351__0_545 [label="unwind"];
    bb251__0_545 -> bb252__0_545 [label="0"];
    bb251__0_545 -> bb253__0_545 [label="1"];
    bb251__0_545 -> bb7__0_545 [label="otherwise"];
    bb252__0_545 -> bb256__0_545 [label=""];
    bb253__0_545 -> bb254__0_545 [label="return"];
    bb253__0_545 -> bb349__0_545 [label="unwind"];
    bb254__0_545 -> bb319__0_545 [label=""];
    bb255__0_545 -> bb256__0_545 [label=""];
    bb256__0_545 -> bb257__0_545 [label="return"];
    bb256__0_545 -> bb336__0_545 [label="unwind"];
    bb257__0_545 -> bb258__0_545 [label="return"];
    bb257__0_545 -> bb336__0_545 [label="unwind"];
    bb258__0_545 -> bb259__0_545 [label="return"];
    bb258__0_545 -> bb336__0_545 [label="unwind"];
    bb259__0_545 -> bb260__0_545 [label="return"];
    bb259__0_545 -> bb336__0_545 [label="unwind"];
    bb260__0_545 -> bb261__0_545 [label="return"];
    bb260__0_545 -> bb336__0_545 [label="unwind"];
    bb261__0_545 -> bb262__0_545 [label="0"];
    bb261__0_545 -> bb263__0_545 [label="1"];
    bb261__0_545 -> bb7__0_545 [label="otherwise"];
    bb262__0_545 -> bb265__0_545 [label="return"];
    bb262__0_545 -> bb336__0_545 [label="unwind"];
    bb263__0_545 -> bb264__0_545 [label="return"];
    bb263__0_545 -> bb336__0_545 [label="unwind"];
    bb264__0_545 -> bb318__0_545 [label=""];
    bb265__0_545 -> bb266__0_545 [label="success"];
    bb265__0_545 -> bb336__0_545 [label="unwind"];
    bb266__0_545 -> bb267__0_545 [label="return"];
    bb266__0_545 -> bb336__0_545 [label="unwind"];
    bb267__0_545 -> bb268__0_545 [label="return"];
    bb267__0_545 -> bb336__0_545 [label="unwind"];
    bb268__0_545 -> bb269__0_545 [label="0"];
    bb268__0_545 -> bb270__0_545 [label="1"];
    bb268__0_545 -> bb7__0_545 [label="otherwise"];
    bb269__0_545 -> bb272__0_545 [label="return"];
    bb269__0_545 -> bb336__0_545 [label="unwind"];
    bb270__0_545 -> bb271__0_545 [label="return"];
    bb270__0_545 -> bb336__0_545 [label="unwind"];
    bb271__0_545 -> bb317__0_545 [label=""];
    bb272__0_545 -> bb273__0_545 [label="return"];
    bb272__0_545 -> bb335__0_545 [label="unwind"];
    bb273__0_545 -> bb274__0_545 [label="return"];
    bb273__0_545 -> bb335__0_545 [label="unwind"];
    bb274__0_545 -> bb275__0_545 [label="return"];
    bb274__0_545 -> bb336__0_545 [label="unwind"];
    bb275__0_545 -> bb276__0_545 [label="return"];
    bb275__0_545 -> bb336__0_545 [label="unwind"];
    bb276__0_545 -> bb277__0_545 [label="return"];
    bb276__0_545 -> bb336__0_545 [label="unwind"];
    bb277__0_545 -> bb278__0_545 [label="return"];
    bb277__0_545 -> bb336__0_545 [label="unwind"];
    bb278__0_545 -> bb279__0_545 [label="0"];
    bb278__0_545 -> bb280__0_545 [label="1"];
    bb278__0_545 -> bb7__0_545 [label="otherwise"];
    bb279__0_545 -> bb282__0_545 [label="return"];
    bb279__0_545 -> bb336__0_545 [label="unwind"];
    bb280__0_545 -> bb281__0_545 [label="return"];
    bb280__0_545 -> bb336__0_545 [label="unwind"];
    bb281__0_545 -> bb316__0_545 [label=""];
    bb282__0_545 -> bb283__0_545 [label="return"];
    bb282__0_545 -> bb336__0_545 [label="unwind"];
    bb283__0_545 -> bb284__0_545 [label="return"];
    bb283__0_545 -> bb336__0_545 [label="unwind"];
    bb284__0_545 -> bb285__0_545 [label="0"];
    bb284__0_545 -> bb286__0_545 [label="1"];
    bb284__0_545 -> bb7__0_545 [label="otherwise"];
    bb285__0_545 -> bb288__0_545 [label="return"];
    bb285__0_545 -> bb336__0_545 [label="unwind"];
    bb286__0_545 -> bb287__0_545 [label="return"];
    bb286__0_545 -> bb336__0_545 [label="unwind"];
    bb287__0_545 -> bb316__0_545 [label=""];
    bb288__0_545 -> bb309__0_545 [label="0"];
    bb288__0_545 -> bb289__0_545 [label="otherwise"];
    bb289__0_545 -> bb290__0_545 [label="return"];
    bb289__0_545 -> bb336__0_545 [label="unwind"];
    bb290__0_545 -> bb291__0_545 [label="success"];
    bb290__0_545 -> bb336__0_545 [label="unwind"];
    bb291__0_545 -> bb292__0_545 [label="0"];
    bb291__0_545 -> bb308__0_545 [label="otherwise"];
    bb292__0_545 -> bb293__0_545 [label="return"];
    bb292__0_545 -> bb336__0_545 [label="unwind"];
    bb293__0_545 -> bb294__0_545 [label="return"];
    bb293__0_545 -> bb336__0_545 [label="unwind"];
    bb294__0_545 -> bb295__0_545 [label="return"];
    bb294__0_545 -> bb336__0_545 [label="unwind"];
    bb295__0_545 -> bb296__0_545 [label="0"];
    bb295__0_545 -> bb297__0_545 [label="1"];
    bb295__0_545 -> bb7__0_545 [label="otherwise"];
    bb296__0_545 -> bb300__0_545 [label="0"];
    bb296__0_545 -> bb299__0_545 [label="otherwise"];
    bb297__0_545 -> bb298__0_545 [label="return"];
    bb297__0_545 -> bb336__0_545 [label="unwind"];
    bb298__0_545 -> bb315__0_545 [label=""];
    bb299__0_545 -> bb307__0_545 [label=""];
    bb300__0_545 -> bb301__0_545 [label="return"];
    bb300__0_545 -> bb336__0_545 [label="unwind"];
    bb301__0_545 -> bb302__0_545 [label="return"];
    bb301__0_545 -> bb336__0_545 [label="unwind"];
    bb302__0_545 -> bb303__0_545 [label="return"];
    bb302__0_545 -> bb336__0_545 [label="unwind"];
    bb303__0_545 -> bb304__0_545 [label="0"];
    bb303__0_545 -> bb305__0_545 [label="1"];
    bb303__0_545 -> bb7__0_545 [label="otherwise"];
    bb304__0_545 -> bb307__0_545 [label=""];
    bb305__0_545 -> bb306__0_545 [label="return"];
    bb305__0_545 -> bb336__0_545 [label="unwind"];
    bb306__0_545 -> bb315__0_545 [label=""];
    bb307__0_545 -> bb310__0_545 [label=""];
    bb308__0_545 -> bb309__0_545 [label=""];
    bb309__0_545 -> bb310__0_545 [label=""];
    bb310__0_545 -> bb311__0_545 [label="return"];
    bb310__0_545 -> bb336__0_545 [label="unwind"];
    bb311__0_545 -> bb312__0_545 [label="return"];
    bb311__0_545 -> bb336__0_545 [label="unwind"];
    bb312__0_545 -> bb313__0_545 [label="return"];
    bb312__0_545 -> bb351__0_545 [label="unwind"];
    bb313__0_545 -> bb314__0_545 [label="return"];
    bb313__0_545 -> bb346__0_545 [label="unwind"];
    bb314__0_545 -> bb334__0_545 [label=""];
    bb315__0_545 -> bb317__0_545 [label=""];
    bb316__0_545 -> bb317__0_545 [label=""];
    bb317__0_545 -> bb318__0_545 [label=""];
    bb318__0_545 -> bb319__0_545 [label="return"];
    bb318__0_545 -> bb351__0_545 [label="unwind"];
    bb319__0_545 -> bb322__0_545 [label=""];
    bb320__0_545 -> bb321__0_545 [label=""];
    bb321__0_545 -> bb322__0_545 [label=""];
    bb322__0_545 -> bb324__0_545 [label=""];
    bb323__0_545 -> bb324__0_545 [label=""];
    bb324__0_545 -> bb325__0_545 [label=""];
    bb325__0_545 -> bb327__0_545 [label=""];
    bb326__0_545 -> bb327__0_545 [label=""];
    bb327__0_545 -> bb328__0_545 [label=""];
    bb328__0_545 -> bb348__0_545 [label=""];
    bb329__0_545 -> bb348__0_545 [label=""];
    bb330__0_545 -> bb331__0_545 [label=""];
    bb331__0_545 -> bb332__0_545 [label=""];
    bb332__0_545 -> bb333__0_545 [label="return"];
    bb332__0_545 -> bb346__0_545 [label="unwind"];
    bb333__0_545 -> bb334__0_545 [label=""];
    bb335__0_545 -> bb336__0_545 [label="return"];
    bb336__0_545 -> bb351__0_545 [label="return"];
    bb337__0_545 -> bb351__0_545 [label="return"];
    bb338__0_545 -> bb351__0_545 [label="return"];
    bb339__0_545 -> bb351__0_545 [label="return"];
    bb340__0_545 -> bb351__0_545 [label="return"];
    bb341__0_545 -> bb345__0_545 [label="return"];
    bb342__0_545 -> bb345__0_545 [label="return"];
    bb343__0_545 -> bb345__0_545 [label="return"];
    bb344__0_545 -> bb345__0_545 [label="return"];
    bb345__0_545 -> bb346__0_545 [label="return"];
    bb347__0_545 -> bb330__0_545 [label="return"];
    bb347__0_545 -> bb345__0_545 [label="unwind"];
    bb348__0_545 -> bb330__0_545 [label="0"];
    bb348__0_545 -> bb347__0_545 [label="otherwise"];
    bb349__0_545 -> bb351__0_545 [label=""];
    bb350__0_545 -> bb345__0_545 [label="return"];
    bb351__0_545 -> bb345__0_545 [label="0"];
    bb351__0_545 -> bb350__0_545 [label="otherwise"];
    bb352__0_545 -> bb345__0_545 [label=""];
    bb353__0_545 -> bb346__0_545 [label=""];
}
