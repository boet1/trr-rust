// MIR for `keeper::handle_update_user_stats_referrer_info` after PreCodegen

fn keeper::handle_update_user_stats_referrer_info(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateUserStatsReferrerInfo<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let mut _12: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _17: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: std::cell::RefMut<'_, state::user::UserStats>;
    let _23: ();
    let mut _24: &mut state::user::UserStats;
    let mut _25: &mut state::user::UserStats;
    let mut _26: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _27: ();
    let mut _28: &mut instructions::keeper::UpdateUserStatsReferrerInfo<'_>;
    let mut _29: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _30: &mut instructions::keeper::UpdateUserStatsReferrerInfo<'_>;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug user_stats => _12;
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _28 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserStatsReferrerInfo<'_>);
        _6 = &((*_28).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _29 = deref_copy (*_6);
        _41 = (((_29.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_41);
        _4 = constraints::exchange_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _31 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _30 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserStatsReferrerInfo<'_>);
        _16 = &((*_30).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _37 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb16;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _14 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _15, move _17) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_14);
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _12 = move _22;
        StorageDead(_22);
        _35 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut _12;
        _25 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _26) -> [return: bb13, unwind: bb17];
    }

    bb11: {
        StorageLive(_19);
        _19 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _33 = discriminant(_13);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb16;
    }

    bb13: {
        _24 = &mut (*_25);
        StorageDead(_26);
        _23 = UserStats::update_referrer_status(move _24) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_27);
        _27 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _27);
        StorageDead(_27);
        drop(_12) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        StorageDead(_12);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_12) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _39 = discriminant(_13);
        goto -> bb18;
    }

    bb20 (cleanup): {
        _40 = discriminant(_3);
        goto -> bb18;
    }
}
