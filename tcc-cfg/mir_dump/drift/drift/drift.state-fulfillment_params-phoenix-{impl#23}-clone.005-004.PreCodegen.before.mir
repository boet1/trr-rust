// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:171:10: 171:15>::clone` before PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:171:10: 171:15>::clone(_1: &PhoenixFulfillmentParams<'_, '_>) -> PhoenixFulfillmentParams<'_, '_> {
    debug self => _1;
    let mut _0: state::fulfillment_params::phoenix::PhoenixFulfillmentParams<'_, '_>;
    let mut _2: &anchor_lang::prelude::AccountInfo<'_>;
    let _3: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _4: &&anchor_lang::prelude::AccountInfo<'_>;
    let _5: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &&anchor_lang::prelude::AccountInfo<'_>;
    let _9: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _11: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let _12: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _13: &anchor_lang::prelude::AccountInfo<'_>;
    let _14: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: &&anchor_lang::prelude::AccountInfo<'_>;
    let _16: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &anchor_lang::prelude::AccountInfo<'_>;
    let _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: &&anchor_lang::prelude::AccountInfo<'_>;
    let _20: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let _22: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: &&anchor_lang::prelude::AccountInfo<'_>;
    let _24: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _26: &std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let _27: &std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _28: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _29: &std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let _30: &std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _31: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _32: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let _33: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _34: u8;
    let mut _35: &u8;
    let _36: &u8;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _4 = &(*_5);
        _3 = <&anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &(*_3);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _8 = &(*_9);
        _7 = <&anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &(*_7);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _11 = &(*_12);
        _10 = <PhoenixMarketContext<'_, '_> as Clone>::clone(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _15 = &(*_16);
        _14 = <&anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = &(*_14);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _19 = &(*_20);
        _18 = <&anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &(*_18);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _23 = &(*_24);
        _22 = <&anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = &(*_22);
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).6: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _26 = &(*_27);
        _25 = <Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>> as Clone>::clone(move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &((*_1).7: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _29 = &(*_30);
        _28 = <Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>> as Clone>::clone(move _29) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _32 = &(*_33);
        _31 = <anchor_lang::prelude::Program<'_, Token> as Clone>::clone(move _32) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).9: u8);
        _35 = &(*_36);
        _34 = <u8 as Clone>::clone(move _35) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        StorageDead(_35);
        _0 = PhoenixFulfillmentParams::<'_, '_> { phoenix_program: move _2, phoenix_log_authority: move _6, phoenix_market: move _10, drift_signer: move _13, phoenix_base_vault: move _17, phoenix_quote_vault: move _21, base_market_vault: move _25, quote_market_vault: move _28, token_program: move _31, signer_nonce: move _34 };
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }

    bb11 (cleanup): {
        drop(_28) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_25) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}
