// MIR for `keeper::handle_trigger_order` after PreCodegen

fn keeper::handle_trigger_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::TriggerOrder<'_>>, _2: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug order_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: state::user::MarketType;
    let _14: u16;
    let mut _15: (state::user::MarketType, u16);
    let mut _16: std::option::Option<&state::user::Order>;
    let mut _17: &state::user::User;
    let _18: &state::user::User;
    let mut _19: &std::cell::Ref<'_, state::user::User>;
    let _20: std::cell::Ref<'_, state::user::User>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _22: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _23: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _25: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: std::cell::Ref<'_, state::user::User>;
    let mut _31: u32;
    let mut _32: isize;
    let _33: &state::user::Order;
    let mut _34: state::user::MarketType;
    let mut _35: u16;
    let mut _36: !;
    let _37: ();
    let mut _38: &str;
    let _39: &str;
    let mut _40: &std::string::String;
    let _41: &std::string::String;
    let _42: std::string::String;
    let _43: std::string::String;
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[&str; 1];
    let _47: &[&str; 1];
    let _48: [&str; 1];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let mut _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: [core::fmt::rt::Argument<'_>; 1];
    let mut _53: core::fmt::rt::Argument<'_>;
    let mut _54: &u32;
    let _55: &u32;
    let mut _56: ();
    let mut _59: (std::collections::BTreeSet<u16>, std::collections::BTreeSet<u16>);
    let mut _60: isize;
    let mut _61: std::collections::BTreeSet<u16>;
    let mut _62: std::collections::BTreeSet<u16>;
    let mut _63: std::vec::Vec<u16>;
    let mut _64: std::boxed::Box<[u16]>;
    let mut _65: std::boxed::Box<[u16; 2]>;
    let mut _66: usize;
    let mut _67: usize;
    let mut _68: *mut u8;
    let mut _69: std::boxed::Box<[u16; 2]>;
    let mut _70: u16;
    let mut _71: std::collections::BTreeSet<u16>;
    let mut _72: std::collections::BTreeSet<u16>;
    let mut _76: instructions::optional_accounts::AccountMaps<'_>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _78: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _79: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _80: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _81: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _82: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _83: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _84: &std::collections::BTreeSet<u16>;
    let _85: &std::collections::BTreeSet<u16>;
    let mut _86: &std::collections::BTreeSet<u16>;
    let _87: &std::collections::BTreeSet<u16>;
    let mut _88: u64;
    let mut _89: anchor_lang::prelude::Clock;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _91: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _97: std::option::Option<state::state::OracleGuardRails>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _103: ();
    let mut _104: isize;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _106: std::result::Result<(), error::ErrorCode>;
    let mut _107: u32;
    let mut _108: &state::state::State;
    let _109: &state::state::State;
    let mut _110: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _111: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _112: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _113: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _114: &state::spot_market_map::SpotMarketMap<'_>;
    let _115: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _116: &state::perp_market_map::PerpMarketMap<'_>;
    let _117: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _118: &mut state::oracle_map::OracleMap<'_>;
    let mut _119: &mut state::oracle_map::OracleMap<'_>;
    let mut _120: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _121: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _122: &anchor_lang::prelude::Clock;
    let _123: &anchor_lang::prelude::Clock;
    let _124: anchor_lang::prelude::Clock;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _126: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _138: std::result::Result<(), error::ErrorCode>;
    let mut _139: u32;
    let mut _140: &state::state::State;
    let _141: &state::state::State;
    let mut _142: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _143: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _144: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _145: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _146: &state::spot_market_map::SpotMarketMap<'_>;
    let _147: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _148: &state::perp_market_map::PerpMarketMap<'_>;
    let _149: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _150: &mut state::oracle_map::OracleMap<'_>;
    let mut _151: &mut state::oracle_map::OracleMap<'_>;
    let mut _152: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _153: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _154: &anchor_lang::prelude::Clock;
    let _155: &anchor_lang::prelude::Clock;
    let _156: anchor_lang::prelude::Clock;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _158: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: ();
    let mut _170: &[&str; 1];
    let mut _171: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _172: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _173: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _174: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _175: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _176: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _177: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _178: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _179: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _180: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _181: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _182: &mut instructions::keeper::TriggerOrder<'_>;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _223: *const [u16; 2];
    let mut _224: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _225: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug market_type => _13;
        debug market_index => _14;
        let _57: std::collections::BTreeSet<u16>;
        let _58: std::collections::BTreeSet<u16>;
        let mut _226: *const ();
        let mut _227: usize;
        let mut _228: usize;
        let mut _229: usize;
        let mut _230: usize;
        let mut _231: bool;
        scope 12 {
            debug writeable_perp_markets => _57;
            debug writeable_spot_markets => _58;
            let _73: state::perp_market_map::PerpMarketMap<'_>;
            let _74: state::spot_market_map::SpotMarketMap<'_>;
            let mut _75: state::oracle_map::OracleMap<'_>;
            let _93: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _96: anchor_lang::prelude::Clock;
            let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _102: instructions::optional_accounts::AccountMaps<'_>;
            scope 14 {
                debug perp_market_map => _73;
                debug spot_market_map => _74;
                debug oracle_map => _75;
                let _128: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _131: anchor_lang::prelude::Clock;
                let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _136: ();
                let _160: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _163: anchor_lang::prelude::Clock;
                let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _168: ();
                scope 23 {
                    debug residual => _128;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug val => _131;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug residual => _133;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _136;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug residual => _160;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug val => _163;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug residual => _165;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _168;
                    scope 38 {
                    }
                }
            }
            scope 15 {
                debug residual => _93;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _96;
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _99;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _102;
                scope 22 {
                }
            }
        }
        scope 13 {
        }
    }
    scope 6 {
        debug residual => _27;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _30;
        scope 9 {
        }
    }
    scope 10 {
        debug order => _33;
    }
    scope 11 {
        debug res => _43;
    }

    bb0: {
        _189 = const false;
        _188 = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _171 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _7 = &((*_171).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _172 = deref_copy (*_7);
        _222 = (((_172.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_222);
        _5 = constraints::exchange_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb92];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _190 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _173 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _24 = &((*_173).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _23 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _24) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb102];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _212 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb82;
    }

    bb7: {
        StorageDead(_24);
        StorageLive(_25);
        _25 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _22 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _23, move _25) -> [return: bb8, unwind: bb92];
    }

    bb8: {
        StorageDead(_25);
        StorageDead(_23);
        _21 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _22) -> [return: bb9, unwind: bb92];
    }

    bb9: {
        _189 = const true;
        StorageDead(_22);
        _26 = discriminant(_21);
        switchInt(move _26) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_30);
        _30 = move ((_21 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _20 = move _30;
        StorageDead(_30);
        _19 = &_20;
        _18 = <Ref<'_, User> as Deref>::deref(move _19) -> [return: bb13, unwind: bb91];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb12, unwind: bb101];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb96;
    }

    bb13: {
        _17 = &(*_18);
        StorageDead(_19);
        StorageLive(_31);
        _31 = _2;
        _16 = User::get_order(move _17, move _31) -> [return: bb14, unwind: bb91];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_17);
        _32 = discriminant(_16);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _170 = const _;
        _47 = &(*_170);
        _46 = &(*_47);
        _45 = move _46 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_2;
        _54 = &(*_55);
        _53 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _54) -> [return: bb17, unwind: bb91];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_16 as Some).0: &state::user::Order);
        StorageLive(_34);
        _34 = ((*_33).14: state::user::MarketType);
        StorageLive(_35);
        _35 = ((*_33).11: u16);
        _15 = (move _34, move _35);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_13);
        _13 = (_15.0: state::user::MarketType);
        StorageLive(_14);
        _14 = (_15.1: u16);
        drop(_20) -> [return: bb93, unwind: bb101];
    }

    bb17: {
        StorageDead(_54);
        _52 = [move _53];
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = move _50 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_50);
        _44 = Arguments::<'_>::new_v1(move _45, move _49) -> [return: bb18, unwind: bb91];
    }

    bb18: {
        StorageDead(_49);
        StorageDead(_45);
        _43 = format(move _44) -> [return: bb19, unwind: bb91];
    }

    bb19: {
        StorageDead(_44);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_47);
        _42 = move _43;
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = <String as Deref>::deref(move _40) -> [return: bb20, unwind: bb90];
    }

    bb20: {
        _38 = &(*_39);
        StorageDead(_40);
        _37 = solana_program::log::sol_log(move _38) -> [return: bb21, unwind: bb90];
    }

    bb21: {
        StorageDead(_38);
        drop(_42) -> [return: bb22, unwind: bb91];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageLive(_56);
        _56 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _56);
        StorageDead(_56);
        drop(_20) -> [return: bb96, unwind: bb101];
    }

    bb23: {
        StorageLive(_71);
        _71 = BTreeSet::<u16>::new() -> [return: bb29, unwind continue];
    }

    bb24: {
        StorageLive(_61);
        _61 = BTreeSet::<u16>::new() -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _66 = SizeOf([u16; 2]);
        _67 = AlignOf([u16; 2]);
        _68 = alloc::alloc::exchange_malloc(move _66, move _67) -> [return: bb26, unwind: bb89];
    }

    bb26: {
        StorageLive(_69);
        _69 = ShallowInitBox(move _68, [u16; 2]);
        StorageLive(_70);
        _70 = _14;
        _223 = (((_69.0: std::ptr::Unique<[u16; 2]>).0: std::ptr::NonNull<[u16; 2]>).0: *const [u16; 2]);
        _226 = _223 as *const () (PtrToPtr);
        _227 = _226 as usize (Transmute);
        _228 = AlignOf([u16; 2]);
        _229 = Sub(_228, const 1_usize);
        _230 = BitAnd(_227, _229);
        _231 = Eq(_230, const 0_usize);
        assert(_231, "misaligned pointer dereference: address must be a multiple of {} but is {}", _228, _227) -> [success: bb103, unwind unreachable];
    }

    bb27: {
        StorageDead(_64);
        _62 = get_writable_spot_market_set_from_many(move _63) -> [return: bb28, unwind: bb89];
    }

    bb28: {
        StorageDead(_63);
        _59 = (move _61, move _62);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb31;
    }

    bb29: {
        StorageLive(_72);
        _72 = BTreeSet::<u16>::new() -> [return: bb30, unwind: bb88];
    }

    bb30: {
        _59 = (move _71, move _72);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb31;
    }

    bb31: {
        StorageLive(_57);
        _57 = move (_59.0: std::collections::BTreeSet<u16>);
        StorageLive(_58);
        _58 = move (_59.1: std::collections::BTreeSet<u16>);
        StorageDead(_59);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _174 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _83 = &(*_174);
        _82 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _83) -> [return: bb32, unwind: bb86];
    }

    bb32: {
        StorageDead(_83);
        _81 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _82) -> [return: bb33, unwind: bb86];
    }

    bb33: {
        StorageDead(_82);
        _80 = &mut _81;
        _79 = &mut (*_80);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_57;
        _84 = &(*_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_58;
        _86 = &(*_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb34, unwind: bb86];
    }

    bb34: {
        _90 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _91) -> [return: bb35, unwind: bb86];
    }

    bb35: {
        _187 = const true;
        _188 = const true;
        StorageDead(_91);
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_96);
        _96 = move ((_90 as Continue).0: anchor_lang::prelude::Clock);
        _89 = move _96;
        StorageDead(_96);
        _88 = (_89.0: u64);
        StorageLive(_97);
        _97 = Option::<state::state::OracleGuardRails>::None;
        _78 = load_maps(move _79, move _84, move _86, move _88, move _97) -> [return: bb39, unwind: bb100];
    }

    bb37: {
        StorageLive(_93);
        _93 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _95) -> [return: bb38, unwind: bb100];
    }

    bb38: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb78;
    }

    bb39: {
        StorageDead(_97);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        _77 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _78) -> [return: bb40, unwind: bb100];
    }

    bb40: {
        StorageDead(_78);
        _98 = discriminant(_77);
        switchInt(move _98) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_102);
        _102 = move ((_77 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _76 = move _102;
        StorageDead(_102);
        StorageLive(_73);
        _73 = move (_76.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_74);
        _74 = move (_76.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_75);
        _75 = move (_76.2: state::oracle_map::OracleMap<'_>);
        _196 = discriminant(_77);
        _198 = discriminant(_90);
        _187 = const false;
        _188 = const false;
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_103);
        _104 = discriminant(_13);
        switchInt(move _104) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb42: {
        StorageLive(_99);
        _99 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb43, unwind: bb99];
    }

    bb43: {
        StorageDead(_101);
        StorageDead(_99);
        _194 = discriminant(_77);
        goto -> bb78;
    }

    bb44: {
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _2;
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _175 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _143 = &((*_175).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _176 = deref_copy (*_143);
        _224 = (((_176.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _142 = &(*_224);
        _141 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _142) -> [return: bb57, unwind: bb83];
    }

    bb45: {
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _2;
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _177 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _111 = &((*_177).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _178 = deref_copy (*_111);
        _225 = (((_178.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _110 = &(*_225);
        _109 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _110) -> [return: bb46, unwind: bb83];
    }

    bb46: {
        _108 = &(*_109);
        StorageDead(_110);
        StorageLive(_112);
        StorageLive(_113);
        _179 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _113 = &((*_179).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _112 = &(*_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_74;
        _114 = &(*_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_73;
        _116 = &(*_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &mut _75;
        _118 = &mut (*_119);
        StorageLive(_120);
        StorageLive(_121);
        _180 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _121 = &((*_180).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _120 = &(*_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb47, unwind: bb83];
    }

    bb47: {
        _125 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _126) -> [return: bb48, unwind: bb83];
    }

    bb48: {
        _185 = const true;
        _186 = const true;
        StorageDead(_126);
        _127 = discriminant(_125);
        switchInt(move _127) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_131);
        _131 = move ((_125 as Continue).0: anchor_lang::prelude::Clock);
        _124 = move _131;
        StorageDead(_131);
        _123 = &_124;
        _122 = &(*_123);
        _106 = controller::orders::trigger_order(move _107, move _108, move _112, move _114, move _116, move _118, move _120, move _122) -> [return: bb52, unwind: bb98];
    }

    bb50: {
        StorageLive(_128);
        _128 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _130) -> [return: bb51, unwind: bb98];
    }

    bb51: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb95;
    }

    bb52: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _106) -> [return: bb53, unwind: bb98];
    }

    bb53: {
        StorageDead(_106);
        _132 = discriminant(_105);
        switchInt(move _132) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_136);
        _136 = ((_105 as Continue).0: ());
        _103 = _136;
        StorageDead(_136);
        _200 = discriminant(_125);
        _185 = const false;
        _186 = const false;
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_105);
        goto -> bb68;
    }

    bb55: {
        StorageLive(_133);
        _133 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb56, unwind: bb98];
    }

    bb56: {
        StorageDead(_135);
        StorageDead(_133);
        goto -> bb95;
    }

    bb57: {
        _140 = &(*_141);
        StorageDead(_142);
        StorageLive(_144);
        StorageLive(_145);
        _181 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _145 = &((*_181).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _144 = &(*_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_74;
        _146 = &(*_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_73;
        _148 = &(*_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &mut _75;
        _150 = &mut (*_151);
        StorageLive(_152);
        StorageLive(_153);
        _182 = deref_copy (_1.1: &mut instructions::keeper::TriggerOrder<'_>);
        _153 = &((*_182).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _152 = &(*_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb58, unwind: bb83];
    }

    bb58: {
        _157 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _158) -> [return: bb59, unwind: bb83];
    }

    bb59: {
        _183 = const true;
        _184 = const true;
        StorageDead(_158);
        _159 = discriminant(_157);
        switchInt(move _159) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_163);
        _163 = move ((_157 as Continue).0: anchor_lang::prelude::Clock);
        _156 = move _163;
        StorageDead(_163);
        _155 = &_156;
        _154 = &(*_155);
        _138 = trigger_spot_order(move _139, move _140, move _144, move _146, move _148, move _150, move _152, move _154) -> [return: bb63, unwind: bb97];
    }

    bb61: {
        StorageLive(_160);
        _160 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_162);
        _162 = move _160;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _162) -> [return: bb62, unwind: bb97];
    }

    bb62: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb94;
    }

    bb63: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_140);
        StorageDead(_139);
        _137 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _138) -> [return: bb64, unwind: bb97];
    }

    bb64: {
        StorageDead(_138);
        _164 = discriminant(_137);
        switchInt(move _164) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_168);
        _168 = ((_137 as Continue).0: ());
        _103 = _168;
        StorageDead(_168);
        _202 = discriminant(_157);
        _183 = const false;
        _184 = const false;
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_137);
        goto -> bb68;
    }

    bb66: {
        StorageLive(_165);
        _165 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb67, unwind: bb97];
    }

    bb67: {
        StorageDead(_167);
        StorageDead(_165);
        goto -> bb94;
    }

    bb68: {
        StorageDead(_103);
        StorageLive(_169);
        _169 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _169);
        StorageDead(_169);
        drop(_75) -> [return: bb69, unwind: bb84];
    }

    bb69: {
        StorageDead(_75);
        drop(_74) -> [return: bb70, unwind: bb85];
    }

    bb70: {
        StorageDead(_74);
        drop(_73) -> [return: bb71, unwind: bb86];
    }

    bb71: {
        StorageDead(_73);
        drop(_58) -> [return: bb72, unwind: bb87];
    }

    bb72: {
        StorageDead(_58);
        drop(_57) -> [return: bb73, unwind: bb92];
    }

    bb73: {
        StorageDead(_57);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb82;
    }

    bb74: {
        StorageDead(_103);
        drop(_75) -> [return: bb75, unwind: bb84];
    }

    bb75: {
        StorageDead(_75);
        drop(_74) -> [return: bb76, unwind: bb85];
    }

    bb76: {
        StorageDead(_74);
        drop(_73) -> [return: bb77, unwind: bb86];
    }

    bb77: {
        StorageDead(_73);
        goto -> bb79;
    }

    bb78: {
        _208 = discriminant(_90);
        _187 = const false;
        _188 = const false;
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb79;
    }

    bb79: {
        drop(_58) -> [return: bb80, unwind: bb87];
    }

    bb80: {
        StorageDead(_58);
        drop(_57) -> [return: bb81, unwind: bb92];
    }

    bb81: {
        StorageDead(_57);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb82;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_75) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_74) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_73) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_58) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_57) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_71) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_61) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_42) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_20) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        resume;
    }

    bb93: {
        _192 = discriminant(_21);
        _189 = const false;
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_59);
        _60 = discriminant(_13);
        switchInt(move _60) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb94: {
        _204 = discriminant(_157);
        _183 = const false;
        _184 = const false;
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_137);
        goto -> bb74;
    }

    bb95: {
        _206 = discriminant(_125);
        _185 = const false;
        _186 = const false;
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_105);
        goto -> bb74;
    }

    bb96: {
        _210 = discriminant(_21);
        _189 = const false;
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb82;
    }

    bb97 (cleanup): {
        _214 = discriminant(_157);
        goto -> bb83;
    }

    bb98 (cleanup): {
        _215 = discriminant(_125);
        goto -> bb83;
    }

    bb99 (cleanup): {
        _218 = discriminant(_77);
        goto -> bb100;
    }

    bb100 (cleanup): {
        _219 = discriminant(_90);
        goto -> bb86;
    }

    bb101 (cleanup): {
        _220 = discriminant(_21);
        goto -> bb92;
    }

    bb102 (cleanup): {
        _221 = discriminant(_4);
        goto -> bb92;
    }

    bb103: {
        (*_223) = [const _, move _70];
        StorageDead(_70);
        _65 = move _69;
        _64 = move _65 as std::boxed::Box<[u16]> (PointerCoercion(Unsize));
        StorageDead(_69);
        StorageDead(_65);
        _63 = std::slice::<impl [u16]>::into_vec::<std::alloc::Global>(move _64) -> [return: bb27, unwind: bb89];
    }
}
