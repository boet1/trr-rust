// MIR for `admin::handle_zero_mm_oracle_fields` before PreCodegen

fn admin::handle_zero_mm_oracle_fields(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::HotAdminUpdatePerpMarket<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _7: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _13: &mut state::perp_market::PerpMarket;
    let mut _14: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: &mut state::perp_market::PerpMarket;
    let mut _16: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _17: &mut state::perp_market::PerpMarket;
    let mut _18: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _19: ();
    let mut _20: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    scope 1 {
        debug perp_market => _2;
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _20 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdatePerpMarket<'_>);
        _6 = &((*_20).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _4 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _5, move _7) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        StorageDead(_4);
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_12);
        _12 = move ((_3 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _2 = move _12;
        StorageDead(_12);
        _23 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _2;
        _13 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _14) -> [return: bb8, unwind: bb13];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_9);
        _9 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_9);
        _21 = discriminant(_3);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb12;
    }

    bb8: {
        StorageDead(_14);
        (((*_13).1: state::perp_market::AMM).67: i64) = const 0_i64;
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _2;
        _15 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _16) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_16);
        (((*_15).1: state::perp_market::AMM).79: u64) = const 0_u64;
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &mut _2;
        _17 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _18) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        StorageDead(_18);
        (((*_17).1: state::perp_market::AMM).55: u64) = const 0_u64;
        StorageDead(_17);
        StorageLive(_19);
        _19 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _19);
        StorageDead(_19);
        drop(_2) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_2);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        _25 = discriminant(_3);
        goto -> bb14;
    }
}
