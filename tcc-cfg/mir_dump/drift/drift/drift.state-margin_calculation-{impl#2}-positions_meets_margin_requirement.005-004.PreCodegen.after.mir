// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::positions_meets_margin_requirement` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::positions_meets_margin_requirement(_1: &MarginCalculation) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let mut _2: bool;
    let mut _3: i128;
    let mut _4: i128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _6: std::result::Result<i128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u128;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: i128;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _18;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _21;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = ((*_1).1: i128);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).3: u128);
        StorageLive(_11);
        _11 = ((*_1).15: u128);
        _9 = <u128 as SafeMath>::safe_sub(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: u128);
        _7 = _16;
        StorageDead(_16);
        _6 = <u128 as Cast>::cast::<i128>(move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_7);
        _5 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_6);
        _17 = discriminant(_5);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_5 as Continue).0: i128);
        _4 = _21;
        StorageDead(_21);
        _2 = Ge(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _2);
        StorageDead(_2);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb13;
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
