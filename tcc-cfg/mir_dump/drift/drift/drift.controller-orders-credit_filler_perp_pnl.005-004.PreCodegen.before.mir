// MIR for `credit_filler_perp_pnl` before PreCodegen

fn credit_filler_perp_pnl(_1: &mut User, _2: &mut Option<&mut UserStats>, _3: &mut PerpMarket, _4: u64, _5: u64, _6: i64, _7: u64) -> std::result::Result<(), error::ErrorCode> {
    debug filler => _1;
    debug filler_stats => _2;
    debug market => _3;
    debug filler_reward => _4;
    debug quote_asset_amount => _5;
    debug now => _6;
    debug slot => _7;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let _11: usize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _13: std::result::Result<usize, error::ErrorCode>;
    let mut _14: std::result::Result<usize, error::ErrorCode>;
    let mut _15: &[state::user::PerpPosition; 8];
    let _16: &[state::user::PerpPosition; 8];
    let mut _17: u16;
    let mut _18: {closure@programs/drift/src/controller/orders.rs:2455:22: 2455:25};
    let mut _19: &mut &mut state::user::User;
    let mut _20: &&mut state::perp_market::PerpMarket;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: usize;
    let _26: ();
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _28: std::result::Result<(), error::ErrorCode>;
    let mut _29: &mut state::user::PerpPosition;
    let mut _30: &mut state::user::PerpPosition;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _34: &mut state::perp_market::PerpMarket;
    let mut _35: i64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _37: std::result::Result<i64, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: &mut state::user::UserStats;
    let mut _53: &mut &mut state::user::UserStats;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut &mut state::user::UserStats>;
    let mut _55: std::result::Result<&mut &mut state::user::UserStats, error::ErrorCode>;
    let mut _56: std::option::Option<&mut &mut state::user::UserStats>;
    let mut _57: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: i64;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: ();
    let mut _71: &mut state::user::User;
    let mut _72: u64;
    let mut _73: ();
    let mut _74: &mut state::user::UserStats;
    scope 1 {
        debug position_index => _11;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: i64;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: ();
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: &mut &mut state::user::UserStats;
        let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _69: ();
        scope 6 {
            debug residual => _40;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _43;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _45;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _48;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _59;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _62;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _66;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _69;
            scope 21 {
            }
        }
    }
    scope 2 {
        debug residual => _22;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _25;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _4;
        _9 = Gt(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb31, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: [state::user::PerpPosition; 8]);
        _15 = &(*_16);
        StorageLive(_17);
        _17 = ((*_3).21: u16);
        _14 = get_position_index(move _15, move _17) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _1;
        StorageLive(_20);
        _20 = &_3;
        _18 = {closure@programs/drift/src/controller/orders.rs:2455:22: 2455:25} { filler: move _19, market: move _20 };
        StorageDead(_20);
        StorageDead(_19);
        _13 = std::result::Result::<usize, error::ErrorCode>::or_else::<error::ErrorCode, {closure@programs/drift/src/controller/orders.rs:2455:22: 2455:25}>(move _14, move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_14);
        _12 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        _21 = discriminant(_12);
        switchInt(move _21) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_25);
        _25 = ((_12 as Continue).0: usize);
        _11 = _25;
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_12);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _11;
        _32 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_22);
        _22 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb36;
    }

    bb9: {
        _30 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_31];
        _29 = &mut (*_30);
        StorageLive(_34);
        _34 = &mut (*_3);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _4;
        _37 = <u64 as Cast>::cast::<i64>(move _38) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_38);
        _36 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: i64);
        _35 = _43;
        StorageDead(_43);
        _28 = update_quote_asset_amount(move _29, move _34, move _35) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_40);
        _40 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb35;
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_29);
        _27 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_28);
        _44 = discriminant(_27);
        switchInt(move _44) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_48);
        _48 = ((_27 as Continue).0: ());
        _26 = _48;
        StorageDead(_48);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &mut (*_2);
        _56 = Option::<&mut UserStats>::as_mut(move _57) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb35;
    }

    bb20: {
        StorageDead(_57);
        _55 = <Option<&mut &mut UserStats> as SafeUnwrap>::safe_unwrap(move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_56);
        _54 = <std::result::Result<&mut &mut UserStats, error::ErrorCode> as Try>::branch(move _55) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_62);
        _62 = move ((_54 as Continue).0: &mut &mut state::user::UserStats);
        _53 = move _62;
        StorageDead(_62);
        _74 = deref_copy (*_53);
        _52 = &mut (*_74);
        StorageLive(_63);
        _63 = _5;
        StorageLive(_64);
        _64 = _6;
        _51 = UserStats::update_filler_volume(move _52, move _63, move _64) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_59);
        _59 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        _65 = discriminant(_50);
        switchInt(move _65) -> [0: bb28, 1: bb29, otherwise: bb6];
    }

    bb28: {
        StorageLive(_69);
        _69 = ((_50 as Continue).0: ());
        _49 = _69;
        StorageDead(_69);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        _8 = const ();
        StorageDead(_11);
        goto -> bb32;
    }

    bb29: {
        StorageLive(_66);
        _66 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_68);
        StorageDead(_66);
        goto -> bb34;
    }

    bb31: {
        StorageDead(_10);
        _8 = const ();
        goto -> bb32;
    }

    bb32: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &mut (*_1);
        StorageLive(_72);
        _72 = _7;
        _70 = User::update_last_active_slot(move _71, move _72) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_73);
        _73 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _73);
        StorageDead(_73);
        goto -> bb37;
    }

    bb34: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb36;
    }

    bb35: {
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb37;
    }

    bb37: {
        return;
    }
}
