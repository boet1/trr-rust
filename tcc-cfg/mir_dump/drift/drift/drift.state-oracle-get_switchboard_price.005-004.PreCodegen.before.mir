// MIR for `get_switchboard_price` before PreCodegen

fn get_switchboard_price(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: u64) -> std::result::Result<OraclePriceData, error::ErrorCode> {
    debug price_oracle => _1;
    debug clock_slot => _2;
    let mut _0: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let _3: std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, switchboard::AggregatorAccountData>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, switchboard::AggregatorAccountData>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::Ref<'_, switchboard::AggregatorAccountData>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: std::result::Result<std::cell::Ref<'_, switchboard::AggregatorAccountData>, error::ErrorCode>;
    let mut _9: error::ErrorCode;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _17: std::result::Result<i64, error::ErrorCode>;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: &switchboard::SwitchboardDecimal;
    let _22: &switchboard::SwitchboardDecimal;
    let _23: &switchboard::AggregatorAccountData;
    let mut _24: &std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _37: std::result::Result<i64, error::ErrorCode>;
    let mut _38: i128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _40: std::result::Result<i128, error::ErrorCode>;
    let mut _41: &switchboard::SwitchboardDecimal;
    let _42: &switchboard::SwitchboardDecimal;
    let _43: &switchboard::AggregatorAccountData;
    let mut _44: &std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: bool;
    let mut _57: i64;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _60: std::result::Result<u64, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: i64;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: i64;
    let mut _70: u64;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _73: std::result::Result<i64, error::ErrorCode>;
    let mut _74: i64;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _76: std::result::Result<i64, error::ErrorCode>;
    let mut _77: u64;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: i64;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _85: std::result::Result<i64, error::ErrorCode>;
    let mut _86: u64;
    let mut _87: &switchboard::AggregatorAccountData;
    let mut _88: &std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: u32;
    let mut _101: &switchboard::AggregatorAccountData;
    let mut _102: &std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _103: u32;
    let mut _104: &switchboard::AggregatorAccountData;
    let mut _105: &std::cell::Ref<'_, switchboard::AggregatorAccountData>;
    let mut _106: state::oracle::OraclePriceData;
    let mut _107: i64;
    let mut _108: u64;
    let mut _109: i64;
    let mut _110: bool;
    let mut _111: std::option::Option<u64>;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    scope 1 {
        debug aggregator_data => _3;
        let _15: i64;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: i128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: i64;
        scope 6 {
            debug price => _15;
            let _35: i64;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: i128;
            let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _54: i64;
            scope 15 {
                debug confidence => _35;
                let _55: u64;
                let _58: u64;
                let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _67: u64;
                scope 24 {
                    debug confidence => _55;
                    let _71: i64;
                    let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _82: i64;
                    let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _93: i64;
                    let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _98: i64;
                    scope 30 {
                        debug delay => _71;
                        let _99: bool;
                        scope 43 {
                            debug has_sufficient_number_of_data_points => _99;
                        }
                    }
                    scope 31 {
                        debug residual => _79;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _82;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug residual => _90;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug val => _93;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug residual => _95;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug val => _98;
                        scope 42 {
                        }
                    }
                }
                scope 25 {
                    debug price_10bps => _58;
                }
                scope 26 {
                    debug residual => _64;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug val => _67;
                    scope 29 {
                    }
                }
            }
            scope 16 {
                debug residual => _46;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _49;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _51;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _54;
                scope 23 {
                }
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = load_ref::<AggregatorAccountData>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = error::ErrorCode::UnableToLoadOracle;
        _8 = std::result::Result::<Ref<'_, AggregatorAccountData>, error::ErrorCode>::Err(move _9);
        StorageDead(_9);
        _5 = std::result::Result::<Ref<'_, AggregatorAccountData>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _6, move _8) -> [return: bb2, unwind: bb70];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, AggregatorAccountData>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb70];
    }

    bb3: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_4 as Continue).0: std::cell::Ref<'_, switchboard::AggregatorAccountData>);
        _3 = move _14;
        StorageDead(_14);
        _114 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_3;
        _23 = <Ref<'_, AggregatorAccountData> as Deref>::deref(move _24) -> [return: bb8, unwind: bb69];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb71];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _112 = discriminant(_4);
        StorageDead(_4);
        goto -> bb67;
    }

    bb8: {
        StorageDead(_24);
        _22 = &(((*_23).16: switchboard::AggregatorRound).5: switchboard::SwitchboardDecimal);
        _21 = &(*_22);
        _20 = convert_switchboard_decimal(move _21) -> [return: bb9, unwind: bb69];
    }

    bb9: {
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb10, unwind: bb69];
    }

    bb10: {
        StorageDead(_20);
        _25 = discriminant(_19);
        switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_19 as Continue).0: i128);
        _18 = _29;
        StorageDead(_29);
        _17 = <i128 as Cast>::cast::<i64>(move _18) -> [return: bb14, unwind: bb69];
    }

    bb12: {
        StorageLive(_26);
        _26 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb13, unwind: bb69];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb65;
    }

    bb14: {
        StorageDead(_18);
        _16 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb15, unwind: bb69];
    }

    bb15: {
        StorageDead(_17);
        _30 = discriminant(_16);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_34);
        _34 = ((_16 as Continue).0: i64);
        _15 = _34;
        StorageDead(_34);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_3;
        _43 = <Ref<'_, AggregatorAccountData> as Deref>::deref(move _44) -> [return: bb19, unwind: bb69];
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb18, unwind: bb69];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb65;
    }

    bb19: {
        StorageDead(_44);
        _42 = &(((*_43).16: switchboard::AggregatorRound).6: switchboard::SwitchboardDecimal);
        _41 = &(*_42);
        _40 = convert_switchboard_decimal(move _41) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        StorageDead(_41);
        _39 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        StorageDead(_40);
        _45 = discriminant(_39);
        switchInt(move _45) -> [0: bb22, 1: bb23, otherwise: bb5];
    }

    bb22: {
        StorageLive(_49);
        _49 = ((_39 as Continue).0: i128);
        _38 = _49;
        StorageDead(_49);
        _37 = <i128 as Cast>::cast::<i64>(move _38) -> [return: bb25, unwind: bb69];
    }

    bb23: {
        StorageLive(_46);
        _46 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb24, unwind: bb69];
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb63;
    }

    bb25: {
        StorageDead(_38);
        _36 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb26, unwind: bb69];
    }

    bb26: {
        StorageDead(_37);
        _50 = discriminant(_36);
        switchInt(move _50) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_36 as Continue).0: i64);
        _35 = _54;
        StorageDead(_54);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _35;
        _56 = Lt(move _57, const 0_i64);
        switchInt(move _56) -> [0: bb31, otherwise: bb30];
    }

    bb28: {
        StorageLive(_51);
        _51 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb29, unwind: bb69];
    }

    bb29: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb63;
    }

    bb30: {
        StorageDead(_57);
        _55 = const _;
        goto -> bb40;
    }

    bb31: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _15;
        _61 = core::num::<impl i64>::unsigned_abs(move _62) -> [return: bb32, unwind: bb69];
    }

    bb32: {
        StorageDead(_62);
        _60 = <u64 as SafeMath>::safe_div(move _61, const 1000_u64) -> [return: bb33, unwind: bb69];
    }

    bb33: {
        StorageDead(_61);
        _59 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb34, unwind: bb69];
    }

    bb34: {
        StorageDead(_60);
        _63 = discriminant(_59);
        switchInt(move _63) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_67);
        _67 = ((_59 as Continue).0: u64);
        _58 = _67;
        StorageDead(_67);
        StorageDead(_59);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _35;
        _68 = core::num::<impl i64>::unsigned_abs(move _69) -> [return: bb38, unwind: bb69];
    }

    bb36: {
        StorageLive(_64);
        _64 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb37, unwind: bb69];
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        goto -> bb62;
    }

    bb38: {
        StorageDead(_69);
        StorageLive(_70);
        _70 = _58;
        _55 = <u64 as Ord>::max(move _68, move _70) -> [return: bb39, unwind: bb69];
    }

    bb39: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_58);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_56);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _2;
        _76 = <u64 as Cast>::cast::<i64>(move _77) -> [return: bb41, unwind: bb69];
    }

    bb41: {
        StorageDead(_77);
        _75 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _76) -> [return: bb42, unwind: bb69];
    }

    bb42: {
        StorageDead(_76);
        _78 = discriminant(_75);
        switchInt(move _78) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_82);
        _82 = ((_75 as Continue).0: i64);
        _74 = _82;
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_3;
        _87 = <Ref<'_, AggregatorAccountData> as Deref>::deref(move _88) -> [return: bb46, unwind: bb69];
    }

    bb44: {
        StorageLive(_79);
        _79 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb45, unwind: bb69];
    }

    bb45: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb61;
    }

    bb46: {
        StorageDead(_88);
        _86 = (((*_87).16: switchboard::AggregatorRound).3: u64);
        _85 = <u64 as Cast>::cast::<i64>(move _86) -> [return: bb47, unwind: bb69];
    }

    bb47: {
        StorageDead(_86);
        _84 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb48, unwind: bb69];
    }

    bb48: {
        StorageDead(_85);
        _89 = discriminant(_84);
        switchInt(move _89) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        StorageLive(_93);
        _93 = ((_84 as Continue).0: i64);
        _83 = _93;
        StorageDead(_93);
        _73 = <i64 as SafeMath>::safe_sub(move _74, move _83) -> [return: bb52, unwind: bb69];
    }

    bb50: {
        StorageLive(_90);
        _90 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb51, unwind: bb69];
    }

    bb51: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_83);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb60;
    }

    bb52: {
        StorageDead(_83);
        StorageDead(_74);
        _72 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _73) -> [return: bb53, unwind: bb69];
    }

    bb53: {
        StorageDead(_73);
        _94 = discriminant(_72);
        switchInt(move _94) -> [0: bb54, 1: bb55, otherwise: bb5];
    }

    bb54: {
        StorageLive(_98);
        _98 = ((_72 as Continue).0: i64);
        _71 = _98;
        StorageDead(_98);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_72);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_3;
        _101 = <Ref<'_, AggregatorAccountData> as Deref>::deref(move _102) -> [return: bb57, unwind: bb69];
    }

    bb55: {
        StorageLive(_95);
        _95 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb56, unwind: bb69];
    }

    bb56: {
        StorageDead(_97);
        StorageDead(_95);
        goto -> bb60;
    }

    bb57: {
        StorageDead(_102);
        _100 = (((*_101).16: switchboard::AggregatorRound).0: u32);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_3;
        _104 = <Ref<'_, AggregatorAccountData> as Deref>::deref(move _105) -> [return: bb58, unwind: bb69];
    }

    bb58: {
        StorageDead(_105);
        _103 = ((*_104).5: u32);
        _99 = Ge(move _100, move _103);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_104);
        StorageDead(_101);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _15;
        StorageLive(_108);
        _108 = _55;
        StorageLive(_109);
        _109 = _71;
        StorageLive(_110);
        _110 = _99;
        StorageLive(_111);
        _111 = Option::<u64>::None;
        _106 = OraclePriceData { price: move _107, confidence: move _108, delay: move _109, has_sufficient_number_of_data_points: move _110, sequence_id: move _111 };
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        _0 = std::result::Result::<OraclePriceData, error::ErrorCode>::Ok(move _106);
        StorageDead(_106);
        StorageDead(_99);
        StorageDead(_71);
        StorageDead(_55);
        StorageDead(_35);
        StorageDead(_15);
        drop(_3) -> [return: bb59, unwind: bb70];
    }

    bb59: {
        StorageDead(_3);
        goto -> bb68;
    }

    bb60: {
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_55);
        goto -> bb64;
    }

    bb63: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_35);
        goto -> bb66;
    }

    bb65: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_15);
        drop(_3) -> [return: bb67, unwind: bb70];
    }

    bb67: {
        StorageDead(_3);
        goto -> bb68;
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_3) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        _116 = discriminant(_4);
        goto -> bb70;
    }
}
