// MIR for `repeg` before PreCodegen

fn repeg(_1: &mut PerpMarket, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: u128, _4: u64, _5: &state::state::OracleGuardRails) -> std::result::Result<i128, error::ErrorCode> {
    debug market => _1;
    debug price_oracle => _2;
    debug new_peg_candidate => _3;
    debug clock_slot => _4;
    debug oracle_guard_rails => _5;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _6: ();
    let mut _7: bool;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: !;
    let mut _11: error::ErrorCode;
    let _12: u64;
    let _13: u128;
    let _14: u128;
    let mut _15: (u64, u128, u128);
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u128, u128)>;
    let mut _17: std::result::Result<(u64, u128, u128), error::ErrorCode>;
    let mut _18: &state::perp_market::AMM;
    let _19: &state::perp_market::AMM;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: (u64, u128, u128);
    let mut _27: (state::perp_market::PerpMarket, i128);
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (state::perp_market::PerpMarket, i128)>;
    let mut _29: std::result::Result<(state::perp_market::PerpMarket, i128), error::ErrorCode>;
    let mut _30: &state::perp_market::PerpMarket;
    let mut _31: u128;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: (bool, bool, bool, bool);
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (bool, bool, bool, bool)>;
    let mut _43: std::result::Result<(bool, bool, bool, bool), error::ErrorCode>;
    let mut _44: &state::perp_market::PerpMarket;
    let _45: &state::perp_market::PerpMarket;
    let mut _46: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: &state::state::OracleGuardRails;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _55: ();
    let mut _56: bool;
    let mut _57: !;
    let mut _58: error::ErrorCode;
    let _59: ();
    let mut _60: bool;
    let mut _61: !;
    let mut _62: error::ErrorCode;
    let _63: ();
    let mut _64: bool;
    let mut _65: !;
    let mut _66: error::ErrorCode;
    let _67: ();
    let mut _68: bool;
    let mut _69: !;
    let mut _70: error::ErrorCode;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _73: std::result::Result<bool, error::ErrorCode>;
    let mut _74: &mut state::perp_market::PerpMarket;
    let mut _75: i128;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _81: ();
    let mut _82: bool;
    let mut _83: u128;
    let mut _84: !;
    let mut _85: error::ErrorCode;
    let mut _86: i128;
    scope 1 {
        debug terminal_price_before => _12;
        debug _terminal_quote_reserves => _13;
        debug _terminal_base_reserves => _14;
        let _25: state::perp_market::PerpMarket;
        let _26: i128;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: (state::perp_market::PerpMarket, i128);
        scope 6 {
            debug repegged_market => _25;
            debug adjustment_cost => _26;
            let _37: bool;
            let _38: bool;
            let _39: bool;
            let _40: bool;
            let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _54: (bool, bool, bool, bool);
            scope 11 {
                debug oracle_is_valid => _37;
                debug direction_valid => _38;
                debug profitability_valid => _39;
                debug price_impact_valid => _40;
                let _71: bool;
                let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _80: bool;
                scope 16 {
                    debug cost_applied => _71;
                }
                scope 17 {
                    debug residual => _77;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _80;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _51;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _54;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _33;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _36;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _21;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _24;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        _9 = (((*_1).1: state::perp_market::AMM).11: u128);
        _7 = Eq(move _8, move _9);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidRepegRedundant;
        _0 = std::result::Result::<i128, error::ErrorCode>::Err(move _11);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb38;
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).1: state::perp_market::AMM);
        _18 = &(*_19);
        _17 = calculate_terminal_price_and_reserves(move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        _16 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as Try>::branch(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: (u64, u128, u128));
        _15 = _24;
        StorageDead(_24);
        StorageLive(_12);
        _12 = (_15.0: u64);
        StorageLive(_13);
        _13 = (_15.1: u128);
        StorageLive(_14);
        _14 = (_15.2: u128);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_1);
        StorageLive(_31);
        _31 = _3;
        _29 = adjust_peg_cost(move _30, move _31) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_21);
        _21 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb38;
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<(PerpMarket, i128), error::ErrorCode> as Try>::branch(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: (state::perp_market::PerpMarket, i128));
        _27 = _36;
        StorageDead(_36);
        StorageLive(_25);
        _25 = (_27.0: state::perp_market::PerpMarket);
        StorageLive(_26);
        _26 = (_27.1: i128);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_25;
        _44 = &(*_45);
        StorageLive(_46);
        _46 = &(*_2);
        StorageLive(_47);
        _47 = _12;
        StorageLive(_48);
        _48 = _4;
        StorageLive(_49);
        _49 = &(*_5);
        _43 = calculate_repeg_validity_from_oracle_account(move _44, move _46, move _47, move _48, move _49) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_33);
        _33 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb37;
    }

    bb14: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        _42 = <std::result::Result<(bool, bool, bool, bool), error::ErrorCode> as Try>::branch(move _43) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_43);
        _50 = discriminant(_42);
        switchInt(move _50) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_54);
        _54 = ((_42 as Continue).0: (bool, bool, bool, bool));
        _41 = _54;
        StorageDead(_54);
        StorageLive(_37);
        _37 = (_41.0: bool);
        StorageLive(_38);
        _38 = (_41.1: bool);
        StorageLive(_39);
        _39 = (_41.2: bool);
        StorageLive(_40);
        _40 = (_41.3: bool);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _37;
        switchInt(move _56) -> [0: bb20, otherwise: bb19];
    }

    bb17: {
        StorageLive(_51);
        _51 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb36;
    }

    bb19: {
        _55 = const ();
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _38;
        switchInt(move _60) -> [0: bb22, otherwise: bb21];
    }

    bb20: {
        StorageLive(_58);
        _58 = error::ErrorCode::InvalidOracle;
        _0 = std::result::Result::<i128, error::ErrorCode>::Err(move _58);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb35;
    }

    bb21: {
        _59 = const ();
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _39;
        switchInt(move _64) -> [0: bb24, otherwise: bb23];
    }

    bb22: {
        StorageLive(_62);
        _62 = error::ErrorCode::InvalidRepegDirection;
        _0 = std::result::Result::<i128, error::ErrorCode>::Err(move _62);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb35;
    }

    bb23: {
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _40;
        switchInt(move _68) -> [0: bb26, otherwise: bb25];
    }

    bb24: {
        StorageLive(_66);
        _66 = error::ErrorCode::InvalidRepegProfitability;
        _0 = std::result::Result::<i128, error::ErrorCode>::Err(move _66);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb35;
    }

    bb25: {
        _67 = const ();
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &mut (*_1);
        StorageLive(_75);
        _75 = _26;
        _73 = apply_cost_to_market(move _74, move _75, const true) -> [return: bb27, unwind continue];
    }

    bb26: {
        StorageLive(_70);
        _70 = error::ErrorCode::InvalidRepegProfitability;
        _0 = std::result::Result::<i128, error::ErrorCode>::Err(move _70);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb35;
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_74);
        _72 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _73) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_73);
        _76 = discriminant(_72);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb6];
    }

    bb29: {
        StorageLive(_80);
        _80 = ((_72 as Continue).0: bool);
        _71 = _80;
        StorageDead(_80);
        StorageDead(_72);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _71;
        switchInt(move _82) -> [0: bb33, otherwise: bb32];
    }

    bb30: {
        StorageLive(_77);
        _77 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_72);
        goto -> bb34;
    }

    bb32: {
        StorageLive(_83);
        _83 = _3;
        (((*_1).1: state::perp_market::AMM).11: u128) = move _83;
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_86);
        _86 = _26;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _86);
        StorageDead(_86);
        StorageDead(_71);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb38;
    }

    bb33: {
        StorageLive(_85);
        _85 = error::ErrorCode::InvalidRepegProfitability;
        _0 = std::result::Result::<i128, error::ErrorCode>::Err(move _85);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_71);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
