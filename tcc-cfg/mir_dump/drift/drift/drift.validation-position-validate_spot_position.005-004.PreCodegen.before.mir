// MIR for `validate_spot_position` before PreCodegen

fn validate_spot_position(_1: &SpotPosition) -> std::result::Result<(), error::ErrorCode> {
    debug position => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: ();
    let _8: error::ErrorCode;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &error::ErrorCode;
    let _27: &error::ErrorCode;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 3];
    let _38: &[&str; 3];
    let _39: [&str; 3];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 3];
    let _42: &[core::fmt::rt::Argument<'_>; 3];
    let _43: [core::fmt::rt::Argument<'_>; 3];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &u16;
    let _46: &u16;
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &u8;
    let _49: &u8;
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &u8;
    let _52: &u8;
    let _53: u8;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: bool;
    let mut _64: i64;
    let mut _65: ();
    let _66: error::ErrorCode;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &error::ErrorCode;
    let _85: &error::ErrorCode;
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: &std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 3];
    let _96: &[&str; 3];
    let _97: [&str; 3];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 2];
    let _100: &[core::fmt::rt::Argument<'_>; 2];
    let _101: [core::fmt::rt::Argument<'_>; 2];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &u16;
    let _104: &u16;
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &i64;
    let _107: &i64;
    let mut _108: error::ErrorCode;
    let mut _109: isize;
    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _113: ();
    let _114: ();
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _116: std::result::Result<(), error::ErrorCode>;
    let mut _117: bool;
    let mut _118: i64;
    let mut _119: ();
    let _120: error::ErrorCode;
    let _121: ();
    let mut _122: &str;
    let _123: &str;
    let mut _124: &std::string::String;
    let _125: &std::string::String;
    let _126: std::string::String;
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str];
    let mut _130: &[&str; 2];
    let _131: &[&str; 2];
    let _132: [&str; 2];
    let mut _133: &[core::fmt::rt::Argument<'_>];
    let mut _134: &[core::fmt::rt::Argument<'_>; 1];
    let _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: [core::fmt::rt::Argument<'_>; 1];
    let mut _137: core::fmt::rt::Argument<'_>;
    let mut _138: &error::ErrorCode;
    let _139: &error::ErrorCode;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: &std::string::String;
    let _144: &std::string::String;
    let _145: std::string::String;
    let mut _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[&str; 3];
    let _150: &[&str; 3];
    let _151: [&str; 3];
    let mut _152: &[core::fmt::rt::Argument<'_>];
    let mut _153: &[core::fmt::rt::Argument<'_>; 2];
    let _154: &[core::fmt::rt::Argument<'_>; 2];
    let _155: [core::fmt::rt::Argument<'_>; 2];
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &u16;
    let _158: &u16;
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &i64;
    let _161: &i64;
    let mut _162: error::ErrorCode;
    let mut _163: isize;
    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _167: ();
    let mut _168: ();
    scope 1 {
        debug error_code => _8;
        let _15: std::string::String;
        let _34: std::string::String;
        let mut _173: &u8;
        let mut _174: &[&str; 3];
        let mut _175: &[&str; 2];
        scope 2 {
            debug res => _15;
        }
        scope 3 {
            debug res => _34;
        }
    }
    scope 4 {
        debug residual => _56;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _59;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _66;
        let _73: std::string::String;
        let _92: std::string::String;
        let mut _171: &[&str; 3];
        let mut _172: &[&str; 2];
        scope 9 {
            debug res => _73;
        }
        scope 10 {
            debug res => _92;
        }
    }
    scope 11 {
        debug residual => _110;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _113;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _120;
        let _127: std::string::String;
        let _146: std::string::String;
        let mut _169: &[&str; 3];
        let mut _170: &[&str; 2];
        scope 16 {
            debug res => _127;
        }
        scope 17 {
            debug res => _146;
        }
    }
    scope 18 {
        debug residual => _164;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _167;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).6: u8);
        _5 = Le(move _6, const _);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb17;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = error::ErrorCode::InvalidSpotPositionDetected;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _175 = const _;
        _19 = &(*_175);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_8;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb69];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb69];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb70];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _174 = const _;
        _38 = &(*_174);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_1).4: u16);
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _45) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_45);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).6: u8);
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _48) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _173 = const _;
        _52 = &(*_173);
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _51) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_51);
        _43 = [move _44, move _47, move _50];
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb14, unwind: bb68];
    }

    bb14: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb15, unwind: bb68];
    }

    bb15: {
        StorageDead(_29);
        drop(_33) -> [return: bb16, unwind: bb70];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_54);
        _54 = _8;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_8);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_4);
        _55 = discriminant(_3);
        switchInt(move _55) -> [0: bb19, 1: bb21, otherwise: bb20];
    }

    bb19: {
        StorageLive(_59);
        _59 = ((_3 as Continue).0: ());
        _2 = _59;
        StorageDead(_59);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = ((*_1).1: i64);
        _63 = Ge(move _64, const 0_i64);
        switchInt(move _63) -> [0: bb24, otherwise: bb23];
    }

    bb20: {
        unreachable;
    }

    bb21: {
        StorageLive(_56);
        _56 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb63;
    }

    bb23: {
        StorageDead(_64);
        StorageLive(_65);
        _65 = ();
        _62 = std::result::Result::<(), error::ErrorCode>::Ok(move _65);
        StorageDead(_65);
        goto -> bb38;
    }

    bb24: {
        StorageDead(_64);
        StorageLive(_66);
        _66 = error::ErrorCode::InvalidSpotPositionDetected;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _172 = const _;
        _77 = &(*_172);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_66;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _84) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb29, unwind: bb67];
    }

    bb29: {
        StorageDead(_68);
        drop(_72) -> [return: bb30, unwind: bb70];
    }

    bb30: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _171 = const _;
        _96 = &(*_171);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &((*_1).4: u16);
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _103) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &((*_1).1: i64);
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _106) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_106);
        _101 = [move _102, move _105];
        StorageDead(_105);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = format(move _93) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_93);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        _91 = move _92;
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = <String as Deref>::deref(move _89) -> [return: bb35, unwind: bb66];
    }

    bb35: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb36, unwind: bb66];
    }

    bb36: {
        StorageDead(_87);
        drop(_91) -> [return: bb37, unwind: bb70];
    }

    bb37: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_108);
        _108 = _66;
        _62 = std::result::Result::<(), error::ErrorCode>::Err(move _108);
        StorageDead(_108);
        StorageDead(_66);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_62);
        _109 = discriminant(_61);
        switchInt(move _109) -> [0: bb40, 1: bb41, otherwise: bb20];
    }

    bb40: {
        StorageLive(_113);
        _113 = ((_61 as Continue).0: ());
        _60 = _113;
        StorageDead(_113);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = ((*_1).2: i64);
        _117 = Le(move _118, const 0_i64);
        switchInt(move _117) -> [0: bb44, otherwise: bb43];
    }

    bb41: {
        StorageLive(_110);
        _110 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb63;
    }

    bb43: {
        StorageDead(_118);
        StorageLive(_119);
        _119 = ();
        _116 = std::result::Result::<(), error::ErrorCode>::Ok(move _119);
        StorageDead(_119);
        goto -> bb58;
    }

    bb44: {
        StorageDead(_118);
        StorageLive(_120);
        _120 = error::ErrorCode::InvalidSpotPositionDetected;
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _170 = const _;
        _131 = &(*_170);
        _130 = &(*_131);
        _129 = move _130 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_130);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_120;
        _138 = &(*_139);
        _137 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _138) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_138);
        _136 = [move _137];
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = move _134 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_134);
        _128 = Arguments::<'_>::new_v1(move _129, move _133) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_133);
        StorageDead(_129);
        _127 = format(move _128) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_128);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_131);
        _126 = move _127;
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = <String as Deref>::deref(move _124) -> [return: bb48, unwind: bb65];
    }

    bb48: {
        _122 = &(*_123);
        StorageDead(_124);
        _121 = solana_program::log::sol_log(move _122) -> [return: bb49, unwind: bb65];
    }

    bb49: {
        StorageDead(_122);
        drop(_126) -> [return: bb50, unwind: bb70];
    }

    bb50: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _169 = const _;
        _150 = &(*_169);
        _149 = &(*_150);
        _148 = move _149 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &((*_1).4: u16);
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _157) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &((*_1).2: i64);
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _160) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_160);
        _155 = [move _156, move _159];
        StorageDead(_159);
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_153);
        _147 = Arguments::<'_>::new_v1(move _148, move _152) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_152);
        StorageDead(_148);
        _146 = format(move _147) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_147);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_150);
        _145 = move _146;
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = <String as Deref>::deref(move _143) -> [return: bb55, unwind: bb64];
    }

    bb55: {
        _141 = &(*_142);
        StorageDead(_143);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb56, unwind: bb64];
    }

    bb56: {
        StorageDead(_141);
        drop(_145) -> [return: bb57, unwind: bb70];
    }

    bb57: {
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_162);
        _162 = _120;
        _116 = std::result::Result::<(), error::ErrorCode>::Err(move _162);
        StorageDead(_162);
        StorageDead(_120);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_117);
        _115 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _116) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_116);
        _163 = discriminant(_115);
        switchInt(move _163) -> [0: bb60, 1: bb61, otherwise: bb20];
    }

    bb60: {
        StorageLive(_167);
        _167 = ((_115 as Continue).0: ());
        _114 = _167;
        StorageDead(_167);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_168);
        _168 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _168);
        StorageDead(_168);
        goto -> bb63;
    }

    bb61: {
        StorageLive(_164);
        _164 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_145) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_126) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_91) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_72) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_33) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_14) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        resume;
    }
}
