digraph Mir_0_2233 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn determine_perp_fee_tier(_1: &amp;ReErased state::user::UserStats, _2: &amp;ReErased state::state::FeeStructure) -&gt; std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt;<br align="left"/>let _3: u64;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _6: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _11: u64;<br align="left"/>let _12: u64;<br align="left"/>let mut _13: usize;<br align="left"/>let _14: ();<br align="left"/>let mut _15: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _16: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _17: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _18: ();<br align="left"/>let _19: ();<br align="left"/>let mut _20: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _21: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _22: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: !;<br align="left"/>let _25: usize;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: u64;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: [u64; 5_usize];<br align="left"/>let _30: usize;<br align="left"/>let mut _31: usize;<br align="left"/>let mut _32: bool;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: usize;<br align="left"/>let _36: ();<br align="left"/>let mut _37: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _38: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _39: std::ops::Range&lt;usize&gt;;<br align="left"/>let _40: ();<br align="left"/>let mut _41: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _42: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _43: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: !;<br align="left"/>let _46: usize;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: u64;<br align="left"/>let mut _49: u64;<br align="left"/>let mut _50: [u64; 5_usize];<br align="left"/>let _51: usize;<br align="left"/>let mut _52: usize;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: usize;<br align="left"/>let _56: u32;<br align="left"/>let mut _57: [u32; 6_usize];<br align="left"/>let _58: usize;<br align="left"/>let mut _59: usize;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: state::state::FeeTier;<br align="left"/>let _62: usize;<br align="left"/>let mut _63: usize;<br align="left"/>let mut _64: bool;<br align="left"/>let _65: ();<br align="left"/>let mut _66: bool;<br align="left"/>let mut _67: u32;<br align="left"/>let mut _68: std::option::Option&lt;u32&gt;;<br align="left"/>let mut _69: isize;<br align="left"/>let _70: u32;<br align="left"/>let mut _71: u32;<br align="left"/>let mut _72: u32;<br align="left"/>let mut _73: u32;<br align="left"/>let mut _74: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _75: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _76: u32;<br align="left"/>let mut _77: u32;<br align="left"/>let mut _78: isize;<br align="left"/>let _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _82: u32;<br align="left"/>let mut _83: u32;<br align="left"/>let mut _84: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _85: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _86: u32;<br align="left"/>let mut _87: u32;<br align="left"/>let mut _88: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _89: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _90: u32;<br align="left"/>let mut _91: u32;<br align="left"/>let mut _92: isize;<br align="left"/>let _93: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _94: !;<br align="left"/>let mut _95: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _96: u32;<br align="left"/>let mut _97: isize;<br align="left"/>let _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _99: !;<br align="left"/>let mut _100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _101: u32;<br align="left"/>let mut _102: u32;<br align="left"/>let mut _103: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _104: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _105: u32;<br align="left"/>let mut _106: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _107: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _108: u32;<br align="left"/>let mut _109: u32;<br align="left"/>let mut _110: u32;<br align="left"/>let mut _111: isize;<br align="left"/>let _112: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _113: !;<br align="left"/>let mut _114: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _115: u32;<br align="left"/>let mut _116: isize;<br align="left"/>let _117: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _118: !;<br align="left"/>let mut _119: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _120: u32;<br align="left"/>let mut _121: u32;<br align="left"/>let mut _122: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _123: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _124: u32;<br align="left"/>let mut _125: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _126: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _127: u32;<br align="left"/>let mut _128: u32;<br align="left"/>let mut _129: u32;<br align="left"/>let mut _130: isize;<br align="left"/>let _131: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _132: !;<br align="left"/>let mut _133: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _134: u32;<br align="left"/>let mut _135: isize;<br align="left"/>let _136: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _137: !;<br align="left"/>let mut _138: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _139: u32;<br align="left"/>let mut _140: state::state::FeeTier;<br align="left"/>debug user_stats =&gt; _1;<br align="left"/>debug fee_structure =&gt; _2;<br align="left"/>debug total_30d_volume =&gt; _3;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug staked_gov_token_amount =&gt; _12;<br align="left"/>debug fee_tier_index =&gt; _13;<br align="left"/>debug iter =&gt; _17;<br align="left"/>debug i =&gt; _25;<br align="left"/>debug stake_benefit_index =&gt; _35;<br align="left"/>debug iter =&gt; _39;<br align="left"/>debug i =&gt; _46;<br align="left"/>debug stake_benefit =&gt; _56;<br align="left"/>debug tier =&gt; _61;<br align="left"/>debug div_scalar =&gt; _70;<br align="left"/>debug residual =&gt; _79;<br align="left"/>debug val =&gt; _82;<br align="left"/>debug residual =&gt; _93;<br align="left"/>debug val =&gt; _96;<br align="left"/>debug residual =&gt; _98;<br align="left"/>debug val =&gt; _101;<br align="left"/>debug residual =&gt; _112;<br align="left"/>debug val =&gt; _115;<br align="left"/>debug residual =&gt; _117;<br align="left"/>debug val =&gt; _120;<br align="left"/>debug residual =&gt; _131;<br align="left"/>debug val =&gt; _134;<br align="left"/>debug residual =&gt; _136;<br align="left"/>debug val =&gt; _139;<br align="left"/>>;
    bb0__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/></td></tr><tr><td align="left">_5 = UserStats::get_total_30d_volume(move _6)</td></tr></table>>];
    bb1__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_4 as Continue).0: u64)<br/>_3 = _11<br/>StorageDead(_11)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>_12 = ((*_1).23: u64)<br/>StorageLive(_13)<br/>_13 = const _<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const _ }<br/></td></tr><tr><td align="left">_15 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _16)</td></tr></table>>];
    bb4__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_10)<br/>_10 = _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>_17 = move _15<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = &amp;mut _17<br/>_21 = &amp;mut (*_22)<br/></td></tr><tr><td align="left">_20 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _21)</td></tr></table>>];
    bb9__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_23 = discriminant(_20)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb10__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_20 as Some).0: usize)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _3<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = const _<br/>StorageLive(_30)<br/>_30 = _25<br/>_31 = Len(_29)<br/>_32 = Lt(_30, _31)<br/></td></tr><tr><td align="left">assert(move _32, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _31, _30)</td></tr></table>>];
    bb11__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_14 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_28 = _29[_30]<br/>_26 = Lt(move _27, move _28)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb13__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_34)<br/>_34 = _25<br/>_13 = move _34<br/>StorageDead(_34)<br/>_14 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>_19 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_18 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_35)<br/>_35 = const _<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const _ }<br/></td></tr><tr><td align="left">_37 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _38)</td></tr></table>>];
    bb16__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_39)<br/>_39 = move _37<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = &amp;mut _39<br/>_42 = &amp;mut (*_43)<br/></td></tr><tr><td align="left">_41 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _42)</td></tr></table>>];
    bb18__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>_44 = discriminant(_41)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb19__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_41 as Some).0: usize)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = _12<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = const _<br/>StorageLive(_51)<br/>_51 = _46<br/>_52 = Len(_50)<br/>_53 = Lt(_51, _52)<br/></td></tr><tr><td align="left">assert(move _53, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _52, _51)</td></tr></table>>];
    bb20__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_36 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_49 = _50[_51]<br/>_47 = Lt(move _48, move _49)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb22__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>StorageLive(_55)<br/>_55 = _46<br/>_35 = move _55<br/>StorageDead(_55)<br/>_36 = const ()<br/>StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_40 = const ()<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>_18 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = const _<br/>StorageLive(_58)<br/>_58 = _35<br/>_59 = Len(_57)<br/>_60 = Lt(_58, _59)<br/></td></tr><tr><td align="left">assert(move _60, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _59, _58)</td></tr></table>>];
    bb25__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_56 = _57[_58]<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = _13<br/>_63 = Len(((*_2).0: [state::state::FeeTier; 10]))<br/>_64 = Lt(_62, _63)<br/></td></tr><tr><td align="left">assert(move _64, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _63, _62)</td></tr></table>>];
    bb26__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_61 = ((*_2).0: [state::state::FeeTier; 10])[_62]<br/>StorageDead(_62)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_67 = _56<br/>_66 = Gt(move _67, const 0_u32)<br/></td></tr><tr><td align="left">switchInt(move _66)</td></tr></table>>];
    bb27__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageLive(_68)<br/></td></tr><tr><td align="left">switchInt(_56)</td></tr></table>>];
    bb28__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_68 = Option::&lt;u32&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_68 = Option::&lt;u32&gt;::Some(const 20_u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_68 = Option::&lt;u32&gt;::Some(const 10_u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_68 = Option::&lt;u32&gt;::Some(const 5_u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_69 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _69)</td></tr></table>>];
    bb33__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_70)<br/>_70 = ((_68 as Some).0: u32)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = (_61.0: u32)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = (_61.0: u32)<br/>StorageLive(_77)<br/>_77 = _70<br/></td></tr><tr><td align="left">_75 = &lt;u32 as SafeMath&gt;::safe_div_ceil(move _76, move _77)</td></tr></table>>];
    bb34__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_74 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _75)</td></tr></table>>];
    bb35__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>_78 = discriminant(_74)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb36__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_74 as Continue).0: u32)<br/>_73 = _82<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">_71 = core::num::&lt;impl u32&gt;::saturating_sub(move _72, move _73)</td></tr></table>>];
    bb37__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_74 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_81)<br/>_81 = _79<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _81)</td></tr></table>>];
    bb38__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_79)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_72)<br/>(_61.0: u32) = move _71<br/>StorageDead(_71)<br/>StorageDead(_74)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_86 = (_61.2: u32)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>_90 = (_61.2: u32)<br/>StorageLive(_91)<br/>_91 = _70<br/></td></tr><tr><td align="left">_89 = &lt;u32 as SafeMath&gt;::safe_div(move _90, move _91)</td></tr></table>>];
    bb40__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">_88 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _89)</td></tr></table>>];
    bb41__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>_92 = discriminant(_88)<br/></td></tr><tr><td align="left">switchInt(move _92)</td></tr></table>>];
    bb42__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_88 as Continue).0: u32)<br/>_87 = _96<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">_85 = &lt;u32 as SafeMath&gt;::safe_add(move _86, move _87)</td></tr></table>>];
    bb43__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_93)<br/>_93 = ((_88 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_95)<br/>_95 = _93<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _95)</td></tr></table>>];
    bb44__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_93)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">_84 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _85)</td></tr></table>>];
    bb46__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>_97 = discriminant(_84)<br/></td></tr><tr><td align="left">switchInt(move _97)</td></tr></table>>];
    bb47__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>_101 = ((_84 as Continue).0: u32)<br/>_83 = _101<br/>StorageDead(_101)<br/>(_61.2: u32) = move _83<br/>StorageDead(_83)<br/>StorageDead(_88)<br/>StorageDead(_84)<br/>_65 = const ()<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_98)<br/>_98 = ((_84 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_100)<br/>_100 = _98<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _100)</td></tr></table>>];
    bb49__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = (_61.0: u32)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>_110 = _56<br/></td></tr><tr><td align="left">_109 = core::num::&lt;impl u32&gt;::saturating_sub(const 100_u32, move _110)</td></tr></table>>];
    bb51__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/></td></tr><tr><td align="left">_107 = &lt;u32 as SafeMath&gt;::safe_mul(move _108, move _109)</td></tr></table>>];
    bb52__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">_106 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _107)</td></tr></table>>];
    bb53__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>_111 = discriminant(_106)<br/></td></tr><tr><td align="left">switchInt(move _111)</td></tr></table>>];
    bb54__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_115)<br/>_115 = ((_106 as Continue).0: u32)<br/>_105 = _115<br/>StorageDead(_115)<br/></td></tr><tr><td align="left">_104 = &lt;u32 as SafeMath&gt;::safe_div_ceil(move _105, const 100_u32)</td></tr></table>>];
    bb55__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_112)<br/>_112 = ((_106 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_114)<br/>_114 = _112<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _114)</td></tr></table>>];
    bb56__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_112)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/></td></tr><tr><td align="left">_103 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _104)</td></tr></table>>];
    bb58__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>_116 = discriminant(_103)<br/></td></tr><tr><td align="left">switchInt(move _116)</td></tr></table>>];
    bb59__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_120)<br/>_120 = ((_103 as Continue).0: u32)<br/>_102 = _120<br/>StorageDead(_120)<br/>(_61.0: u32) = move _102<br/>StorageDead(_102)<br/>StorageDead(_106)<br/>StorageDead(_103)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>_127 = (_61.2: u32)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = _56<br/></td></tr><tr><td align="left">_128 = core::num::&lt;impl u32&gt;::saturating_add(const 100_u32, move _129)</td></tr></table>>];
    bb60__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageLive(_117)<br/>_117 = ((_103 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_119)<br/>_119 = _117<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _119)</td></tr></table>>];
    bb61__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_117)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/></td></tr><tr><td align="left">_126 = &lt;u32 as SafeMath&gt;::safe_mul(move _127, move _128)</td></tr></table>>];
    bb63__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_127)<br/></td></tr><tr><td align="left">_125 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _126)</td></tr></table>>];
    bb64__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_126)<br/>_130 = discriminant(_125)<br/></td></tr><tr><td align="left">switchInt(move _130)</td></tr></table>>];
    bb65__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageLive(_134)<br/>_134 = ((_125 as Continue).0: u32)<br/>_124 = _134<br/>StorageDead(_134)<br/></td></tr><tr><td align="left">_123 = &lt;u32 as SafeMath&gt;::safe_div(move _124, const 100_u32)</td></tr></table>>];
    bb66__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageLive(_131)<br/>_131 = ((_125 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_133)<br/>_133 = _131<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _133)</td></tr></table>>];
    bb67__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>StorageDead(_131)<br/>StorageDead(_124)<br/>StorageDead(_123)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/></td></tr><tr><td align="left">_122 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _123)</td></tr></table>>];
    bb69__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>_135 = discriminant(_122)<br/></td></tr><tr><td align="left">switchInt(move _135)</td></tr></table>>];
    bb70__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_139)<br/>_139 = ((_122 as Continue).0: u32)<br/>_121 = _139<br/>StorageDead(_139)<br/>(_61.2: u32) = move _121<br/>StorageDead(_121)<br/>StorageDead(_125)<br/>StorageDead(_122)<br/>_65 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_136)<br/>_136 = ((_122 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_138)<br/>_138 = _136<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _138)</td></tr></table>>];
    bb72__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_136)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>_65 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageDead(_65)<br/>StorageLive(_140)<br/>_140 = _61<br/>_0 = std::result::Result::&lt;state::state::FeeTier, error::ErrorCode&gt;::Ok(move _140)<br/>StorageDead(_140)<br/>StorageDead(_61)<br/>StorageDead(_56)<br/>StorageDead(_35)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_125)<br/>StorageDead(_122)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_106)<br/>StorageDead(_103)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_88)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb79__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_61)<br/>StorageDead(_56)<br/>StorageDead(_35)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb81__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb82__0_2233 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2233 -> bb1__0_2233 [label="return"];
    bb1__0_2233 -> bb2__0_2233 [label="return"];
    bb2__0_2233 -> bb3__0_2233 [label="0"];
    bb2__0_2233 -> bb5__0_2233 [label="1"];
    bb2__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb3__0_2233 -> bb7__0_2233 [label="return"];
    bb5__0_2233 -> bb6__0_2233 [label="return"];
    bb6__0_2233 -> bb81__0_2233 [label=""];
    bb7__0_2233 -> bb8__0_2233 [label=""];
    bb8__0_2233 -> bb9__0_2233 [label="return"];
    bb9__0_2233 -> bb11__0_2233 [label="0"];
    bb9__0_2233 -> bb10__0_2233 [label="1"];
    bb9__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb10__0_2233 -> bb12__0_2233 [label="success"];
    bb11__0_2233 -> bb15__0_2233 [label=""];
    bb12__0_2233 -> bb14__0_2233 [label="0"];
    bb12__0_2233 -> bb13__0_2233 [label="otherwise"];
    bb13__0_2233 -> bb15__0_2233 [label=""];
    bb14__0_2233 -> bb8__0_2233 [label=""];
    bb15__0_2233 -> bb16__0_2233 [label="return"];
    bb16__0_2233 -> bb17__0_2233 [label=""];
    bb17__0_2233 -> bb18__0_2233 [label="return"];
    bb18__0_2233 -> bb20__0_2233 [label="0"];
    bb18__0_2233 -> bb19__0_2233 [label="1"];
    bb18__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb19__0_2233 -> bb21__0_2233 [label="success"];
    bb20__0_2233 -> bb24__0_2233 [label=""];
    bb21__0_2233 -> bb23__0_2233 [label="0"];
    bb21__0_2233 -> bb22__0_2233 [label="otherwise"];
    bb22__0_2233 -> bb24__0_2233 [label=""];
    bb23__0_2233 -> bb17__0_2233 [label=""];
    bb24__0_2233 -> bb25__0_2233 [label="success"];
    bb25__0_2233 -> bb26__0_2233 [label="success"];
    bb26__0_2233 -> bb74__0_2233 [label="0"];
    bb26__0_2233 -> bb27__0_2233 [label="otherwise"];
    bb27__0_2233 -> bb29__0_2233 [label="5"];
    bb27__0_2233 -> bb30__0_2233 [label="10"];
    bb27__0_2233 -> bb31__0_2233 [label="20"];
    bb27__0_2233 -> bb28__0_2233 [label="otherwise"];
    bb28__0_2233 -> bb32__0_2233 [label=""];
    bb29__0_2233 -> bb32__0_2233 [label=""];
    bb30__0_2233 -> bb32__0_2233 [label=""];
    bb31__0_2233 -> bb32__0_2233 [label=""];
    bb32__0_2233 -> bb33__0_2233 [label="1"];
    bb32__0_2233 -> bb50__0_2233 [label="otherwise"];
    bb33__0_2233 -> bb34__0_2233 [label="return"];
    bb34__0_2233 -> bb35__0_2233 [label="return"];
    bb35__0_2233 -> bb36__0_2233 [label="0"];
    bb35__0_2233 -> bb37__0_2233 [label="1"];
    bb35__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb36__0_2233 -> bb39__0_2233 [label="return"];
    bb37__0_2233 -> bb38__0_2233 [label="return"];
    bb38__0_2233 -> bb79__0_2233 [label=""];
    bb39__0_2233 -> bb40__0_2233 [label="return"];
    bb40__0_2233 -> bb41__0_2233 [label="return"];
    bb41__0_2233 -> bb42__0_2233 [label="0"];
    bb41__0_2233 -> bb43__0_2233 [label="1"];
    bb41__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb42__0_2233 -> bb45__0_2233 [label="return"];
    bb43__0_2233 -> bb44__0_2233 [label="return"];
    bb44__0_2233 -> bb78__0_2233 [label=""];
    bb45__0_2233 -> bb46__0_2233 [label="return"];
    bb46__0_2233 -> bb47__0_2233 [label="0"];
    bb46__0_2233 -> bb48__0_2233 [label="1"];
    bb46__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb47__0_2233 -> bb73__0_2233 [label=""];
    bb48__0_2233 -> bb49__0_2233 [label="return"];
    bb49__0_2233 -> bb78__0_2233 [label=""];
    bb50__0_2233 -> bb51__0_2233 [label="return"];
    bb51__0_2233 -> bb52__0_2233 [label="return"];
    bb52__0_2233 -> bb53__0_2233 [label="return"];
    bb53__0_2233 -> bb54__0_2233 [label="0"];
    bb53__0_2233 -> bb55__0_2233 [label="1"];
    bb53__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb54__0_2233 -> bb57__0_2233 [label="return"];
    bb55__0_2233 -> bb56__0_2233 [label="return"];
    bb56__0_2233 -> bb77__0_2233 [label=""];
    bb57__0_2233 -> bb58__0_2233 [label="return"];
    bb58__0_2233 -> bb59__0_2233 [label="0"];
    bb58__0_2233 -> bb60__0_2233 [label="1"];
    bb58__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb59__0_2233 -> bb62__0_2233 [label="return"];
    bb60__0_2233 -> bb61__0_2233 [label="return"];
    bb61__0_2233 -> bb77__0_2233 [label=""];
    bb62__0_2233 -> bb63__0_2233 [label="return"];
    bb63__0_2233 -> bb64__0_2233 [label="return"];
    bb64__0_2233 -> bb65__0_2233 [label="0"];
    bb64__0_2233 -> bb66__0_2233 [label="1"];
    bb64__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb65__0_2233 -> bb68__0_2233 [label="return"];
    bb66__0_2233 -> bb67__0_2233 [label="return"];
    bb67__0_2233 -> bb76__0_2233 [label=""];
    bb68__0_2233 -> bb69__0_2233 [label="return"];
    bb69__0_2233 -> bb70__0_2233 [label="0"];
    bb69__0_2233 -> bb71__0_2233 [label="1"];
    bb69__0_2233 -> bb4__0_2233 [label="otherwise"];
    bb70__0_2233 -> bb73__0_2233 [label=""];
    bb71__0_2233 -> bb72__0_2233 [label="return"];
    bb72__0_2233 -> bb76__0_2233 [label=""];
    bb73__0_2233 -> bb75__0_2233 [label=""];
    bb74__0_2233 -> bb75__0_2233 [label=""];
    bb75__0_2233 -> bb82__0_2233 [label=""];
    bb76__0_2233 -> bb80__0_2233 [label=""];
    bb77__0_2233 -> bb80__0_2233 [label=""];
    bb78__0_2233 -> bb79__0_2233 [label=""];
    bb79__0_2233 -> bb80__0_2233 [label=""];
    bb80__0_2233 -> bb81__0_2233 [label=""];
    bb81__0_2233 -> bb82__0_2233 [label=""];
}
