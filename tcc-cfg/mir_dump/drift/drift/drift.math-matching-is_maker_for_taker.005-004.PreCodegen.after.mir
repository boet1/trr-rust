// MIR for `is_maker_for_taker` after PreCodegen

fn is_maker_for_taker(_1: &Order, _2: &Order, _3: u64) -> std::result::Result<bool, error::ErrorCode> {
    debug maker_order => _1;
    debug taker_order => _2;
    debug slot => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: bool;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: bool;
    let mut _12: &state::user::Order;
    let mut _13: !;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _17: std::result::Result<bool, error::ErrorCode>;
    let mut _18: &state::user::Order;
    let mut _19: u64;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: bool;
    let mut _25: bool;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _27: std::result::Result<bool, error::ErrorCode>;
    let mut _28: &state::user::Order;
    let mut _29: u64;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: u64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _39: std::result::Result<u64, error::ErrorCode>;
    let mut _40: u64;
    let mut _41: u64;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _43: std::result::Result<u64, error::ErrorCode>;
    let mut _44: u8;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: u64;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: u64;
    let mut _55: u64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _57: std::result::Result<u64, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _61: std::result::Result<u64, error::ErrorCode>;
    let mut _62: u8;
    let mut _63: isize;
    let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: u64;
    let mut _68: isize;
    let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _72: u64;
    scope 1 {
        debug residual => _21;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _24;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _31;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _34;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _46;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _49;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _51;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _54;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _64;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _67;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _69;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _72;
        scope 24 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        StorageLive(_7);
        _7 = ((*_1).0: u64);
        _5 = Eq(move _6, move _7);
        switchInt(move _5) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = ((*_2).0: u64);
        _8 = Eq(move _9, move _10);
        switchInt(move _8) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_1);
        _11 = Order::is_jit_maker(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_12);
        goto -> bb8;
    }

    bb5: {
        StorageDead(_12);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb54;
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb8;
    }

    bb8: {
        _4 = const ();
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        _14 = ((*_2).19: bool);
        switchInt(move _14) -> [0: bb9, otherwise: bb17];
    }

    bb9: {
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_1);
        StorageLive(_19);
        _19 = _3;
        _17 = Order::is_resting_limit_order(move _18, move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: bool);
        _15 = _24;
        StorageDead(_24);
        switchInt(move _15) -> [0: bb17, otherwise: bb16];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_21);
        _21 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        goto -> bb53;
    }

    bb16: {
        StorageDead(_16);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_2);
        StorageLive(_29);
        _29 = _3;
        _27 = Order::is_resting_limit_order(move _28, move _29) -> [return: bb18, unwind continue];
    }

    bb17: {
        StorageDead(_16);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        goto -> bb48;
    }

    bb18: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _27) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb20, 1: bb21, otherwise: bb13];
    }

    bb20: {
        StorageLive(_34);
        _34 = ((_26 as Continue).0: bool);
        _25 = _34;
        StorageDead(_34);
        switchInt(move _25) -> [0: bb24, otherwise: bb23];
    }

    bb21: {
        StorageLive(_31);
        _31 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        goto -> bb52;
    }

    bb23: {
        StorageDead(_26);
        StorageLive(_35);
        _35 = ((*_1).19: bool);
        switchInt(move _35) -> [0: bb26, otherwise: bb25];
    }

    bb24: {
        StorageDead(_26);
        goto -> bb25;
    }

    bb25: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb47;
    }

    bb26: {
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = ((*_1).0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = ((*_1).22: u8);
        _43 = <u8 as Cast>::cast::<u64>(move _44) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_44);
        _42 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _43) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_43);
        _45 = discriminant(_42);
        switchInt(move _45) -> [0: bb29, 1: bb30, otherwise: bb13];
    }

    bb29: {
        StorageLive(_49);
        _49 = ((_42 as Continue).0: u64);
        _41 = _49;
        StorageDead(_49);
        _39 = <u64 as SafeMath>::safe_add(move _40, move _41) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_46);
        _46 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb50;
    }

    bb32: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_39);
        _50 = discriminant(_38);
        switchInt(move _50) -> [0: bb34, 1: bb35, otherwise: bb13];
    }

    bb34: {
        StorageLive(_54);
        _54 = ((_38 as Continue).0: u64);
        _37 = _54;
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = ((*_2).0: u64);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = ((*_2).22: u8);
        _61 = <u8 as Cast>::cast::<u64>(move _62) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_51);
        _51 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb50;
    }

    bb37: {
        StorageDead(_62);
        _60 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _61) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_61);
        _63 = discriminant(_60);
        switchInt(move _63) -> [0: bb39, 1: bb40, otherwise: bb13];
    }

    bb39: {
        StorageLive(_67);
        _67 = ((_60 as Continue).0: u64);
        _59 = _67;
        StorageDead(_67);
        _57 = <u64 as SafeMath>::safe_add(move _58, move _59) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_64);
        _64 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb49;
    }

    bb42: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_57);
        _68 = discriminant(_56);
        switchInt(move _68) -> [0: bb44, 1: bb45, otherwise: bb13];
    }

    bb44: {
        StorageLive(_72);
        _72 = ((_56 as Continue).0: u64);
        _55 = _72;
        StorageDead(_72);
        _36 = Le(move _37, move _55);
        StorageDead(_55);
        StorageDead(_37);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_42);
        StorageDead(_38);
        goto -> bb47;
    }

    bb45: {
        StorageLive(_69);
        _69 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_71);
        StorageDead(_69);
        goto -> bb49;
    }

    bb47: {
        StorageDead(_35);
        StorageDead(_25);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb54;
    }

    bb49: {
        StorageDead(_55);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_60);
        StorageDead(_56);
        goto -> bb51;
    }

    bb50: {
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_25);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb54;
    }

    bb54: {
        return;
    }
}
