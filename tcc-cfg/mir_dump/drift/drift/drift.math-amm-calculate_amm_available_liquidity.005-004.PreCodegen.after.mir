// MIR for `calculate_amm_available_liquidity` after PreCodegen

fn calculate_amm_available_liquidity(_1: &AMM, _2: &controller::position::PositionDirection) -> std::result::Result<u64, error::ErrorCode> {
    debug amm => _1;
    debug order_direction => _2;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: u16;
    let mut _11: bool;
    let mut _12: u128;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u64;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _20: std::result::Result<u64, error::ErrorCode>;
    let mut _21: u128;
    let mut _22: isize;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: u128;
    let mut _26: bool;
    let mut _27: u128;
    let mut _28: u128;
    let mut _29: u128;
    let mut _30: bool;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: u64;
    let mut _39: u64;
    scope 1 {
        debug max_fill_size => _3;
        let _18: u64;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: u64;
        scope 6 {
            debug max_base_asset_amount_on_side => _18;
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).5: u128);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).68: u16);
        _9 = move _10 as u128 (IntToInt);
        StorageDead(_10);
        _11 = Eq(_9, const 0_u128);
        assert(!move _11, "attempt to divide `{}` by zero", _8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _7 = Div(move _8, move _9);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        _12 = const _ as u128 (IntToInt);
        _6 = <u128 as Ord>::min(move _7, move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_7);
        _5 = <u128 as Cast>::cast::<u64>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        _13 = discriminant(_4);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_4 as Continue).0: u64);
        _3 = _17;
        StorageDead(_17);
        StorageDead(_4);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _22 = discriminant((*_2));
        switchInt(move _22) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb23;
    }

    bb9: {
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_1).9: u128);
        StorageLive(_29);
        _29 = ((*_1).5: u128);
        _27 = core::num::<impl u128>::saturating_sub(move _28, move _29) -> [return: bb13, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((*_1).5: u128);
        StorageLive(_25);
        _25 = ((*_1).8: u128);
        _23 = core::num::<impl u128>::saturating_sub(move _24, move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        _26 = Eq(const 2_u128, const 0_u128);
        assert(!move _26, "attempt to divide `{}` by zero", _23) -> [success: bb12, unwind continue];
    }

    bb12: {
        _21 = Div(move _23, const 2_u128);
        StorageDead(_23);
        goto -> bb15;
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_28);
        _30 = Eq(const 2_u128, const 0_u128);
        assert(!move _30, "attempt to divide `{}` by zero", _27) -> [success: bb14, unwind continue];
    }

    bb14: {
        _21 = Div(move _27, const 2_u128);
        StorageDead(_27);
        goto -> bb15;
    }

    bb15: {
        _20 = <u128 as Cast>::cast::<u64>(move _21) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_21);
        _19 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _20) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_20);
        _31 = discriminant(_19);
        switchInt(move _31) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_19 as Continue).0: u64);
        _18 = _35;
        StorageDead(_35);
        StorageDead(_19);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _3;
        StorageLive(_38);
        _38 = _18;
        _36 = <u64 as Ord>::min(move _37, move _38) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_32);
        _32 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb23;
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        _39 = ((*_1).52: u64);
        _0 = math::orders::standardize_base_asset_amount(move _36, move _39) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_18);
        StorageDead(_3);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_3);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}
