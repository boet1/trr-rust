// MIR for `increase_open_bids_and_asks` after PreCodegen

fn increase_open_bids_and_asks(_1: &mut PerpPosition, _2: &controller::position::PositionDirection, _3: u64, _4: bool) -> std::result::Result<(), error::ErrorCode> {
    debug position => _1;
    debug direction => _2;
    debug base_asset_amount_unfilled => _3;
    debug update => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: !;
    let mut _8: ();
    let _9: ();
    let mut _10: isize;
    let mut _11: i64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _13: std::result::Result<i64, error::ErrorCode>;
    let mut _14: i64;
    let mut _15: i64;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _17: std::result::Result<i64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: i64;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: i64;
    let mut _29: i64;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _31: std::result::Result<i64, error::ErrorCode>;
    let mut _32: i64;
    let mut _33: i64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _35: std::result::Result<i64, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: i64;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: i64;
    let mut _47: ();
    scope 1 {
        debug residual => _20;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _23;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _25;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _28;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _38;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _41;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _43;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _46;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _4;
        switchInt(move _6) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_8);
        _8 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb30;
    }

    bb2: {
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        _10 = discriminant((*_2));
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_1).6: i64);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        _35 = <u64 as Cast>::cast::<i64>(move _36) -> [return: bb16, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_1).5: i64);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _3;
        _17 = <u64 as Cast>::cast::<i64>(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        _16 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: i64);
        _15 = _23;
        StorageDead(_23);
        _13 = <i64 as SafeMath>::safe_add(move _14, move _15) -> [return: bb11, unwind continue];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb28;
    }

    bb11: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_13);
        _24 = discriminant(_12);
        switchInt(move _24) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_12 as Continue).0: i64);
        _11 = _28;
        StorageDead(_28);
        ((*_1).5: i64) = move _11;
        StorageDead(_11);
        StorageDead(_16);
        StorageDead(_12);
        _9 = const ();
        goto -> bb26;
    }

    bb14: {
        StorageLive(_25);
        _25 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb28;
    }

    bb16: {
        StorageDead(_36);
        _34 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: i64);
        _33 = _41;
        StorageDead(_41);
        _31 = <i64 as SafeMath>::safe_sub(move _32, move _33) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb27;
    }

    bb21: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _31) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_31);
        _42 = discriminant(_30);
        switchInt(move _42) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_46);
        _46 = ((_30 as Continue).0: i64);
        _29 = _46;
        StorageDead(_46);
        ((*_1).6: i64) = move _29;
        StorageDead(_29);
        StorageDead(_34);
        StorageDead(_30);
        _9 = const ();
        goto -> bb26;
    }

    bb24: {
        StorageLive(_43);
        _43 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_9);
        StorageLive(_47);
        _47 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _47);
        StorageDead(_47);
        goto -> bb30;
    }

    bb27: {
        StorageDead(_29);
        StorageDead(_34);
        StorageDead(_30);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_11);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_9);
        goto -> bb30;
    }

    bb30: {
        return;
    }
}
