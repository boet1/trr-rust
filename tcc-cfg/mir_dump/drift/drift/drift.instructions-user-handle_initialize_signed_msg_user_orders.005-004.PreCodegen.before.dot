digraph Mir_0_1688 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn instructions::user::handle_initialize_signed_msg_user_orders(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::user::InitializeSignedMsgUserOrders&lt;ReErased&gt;&gt;, _2: u16) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: &amp;ReErased mut std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _4: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _6: &amp;ReErased mut state::signed_msg_user::SignedMsgUserOrders;<br align="left"/>let mut _7: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;;<br align="left"/>let _8: ();<br align="left"/>let mut _9: &amp;ReErased mut std::vec::Vec&lt;state::signed_msg_user::SignedMsgOrderId, std::alloc::Global&gt;;<br align="left"/>let mut _10: &amp;ReErased mut state::signed_msg_user::SignedMsgUserOrders;<br align="left"/>let mut _11: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;;<br align="left"/>let mut _12: usize;<br align="left"/>let mut _13: u16;<br align="left"/>let _14: ();<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _16: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _17: &amp;ReErased state::signed_msg_user::SignedMsgUserOrders;<br align="left"/>let _18: &amp;ReErased state::signed_msg_user::SignedMsgUserOrders;<br align="left"/>let mut _19: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: ();<br align="left"/>let mut _25: ();<br align="left"/>let mut _26: &amp;ReErased mut instructions::user::InitializeSignedMsgUserOrders&lt;ReErased&gt;;<br align="left"/>let mut _27: &amp;ReErased mut instructions::user::InitializeSignedMsgUserOrders&lt;ReErased&gt;;<br align="left"/>let mut _28: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _29: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _30: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _31: *const anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;;<br align="left"/>let mut _32: *const anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;;<br align="left"/>let mut _33: *const anchor_lang::prelude::Account&lt;ReErased, state::signed_msg_user::SignedMsgUserOrders&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug num_orders =&gt; _2;<br align="left"/>debug signed_msg_user_orders =&gt; _3;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>>;
    bb0__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_26 = deref_copy (_1.1: &amp;mut instructions::user::InitializeSignedMsgUserOrders&lt;'_&gt;)<br/>_3 = &amp;mut ((*_26).0: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_27 = deref_copy (_1.1: &amp;mut instructions::user::InitializeSignedMsgUserOrders&lt;'_&gt;)<br/>_5 = &amp;((*_27).1: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/></td></tr><tr><td align="left">_4 = &lt;anchor_lang::prelude::AccountInfo&lt;'_&gt; as anchor_lang::Key&gt;::key(move _5)</td></tr></table>>];
    bb1__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_28 = deref_copy (*_3)<br/>_31 = (((_28.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;)<br/>_7 = &amp;mut (*_31)<br/></td></tr><tr><td align="left">_6 = &lt;anchor_lang::prelude::Account&lt;'_, SignedMsgUserOrders&gt; as DerefMut&gt;::deref_mut(move _7)</td></tr></table>>];
    bb2__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>((*_6).0: anchor_lang::prelude::Pubkey) = move _4<br/>StorageDead(_4)<br/>StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_29 = deref_copy (*_3)<br/>_32 = (((_29.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;)<br/>_11 = &amp;mut (*_32)<br/></td></tr><tr><td align="left">_10 = &lt;anchor_lang::prelude::Account&lt;'_, SignedMsgUserOrders&gt; as DerefMut&gt;::deref_mut(move _11)</td></tr></table>>];
    bb3__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_9 = &amp;mut ((*_10).2: std::vec::Vec&lt;state::signed_msg_user::SignedMsgOrderId&gt;)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _2<br/>_12 = move _13 as usize (IntToInt)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_8 = Vec::&lt;SignedMsgOrderId&gt;::resize_with::&lt;fn() -&gt; SignedMsgOrderId {&lt;SignedMsgOrderId as Default&gt;::default}&gt;(move _9, move _12, &lt;SignedMsgOrderId as Default&gt;::default)</td></tr></table>>];
    bb4__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_30 = deref_copy (*_3)<br/>_33 = (((_30.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::signed_msg_user::SignedMsgUserOrders&gt;)<br/>_19 = &amp;(*_33)<br/></td></tr><tr><td align="left">_18 = &lt;anchor_lang::prelude::Account&lt;'_, SignedMsgUserOrders&gt; as Deref&gt;::deref(move _19)</td></tr></table>>];
    bb5__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_17 = &amp;(*_18)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_16 = SignedMsgUserOrders::validate(move _17)</td></tr></table>>];
    bb6__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb7__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_20 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb8__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_15 as Continue).0: ())<br/>_14 = _24<br/>StorageDead(_24)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_25)<br/>_25 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _25)<br/>StorageDead(_25)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb11__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1688 -> bb1__0_1688 [label="return"];
    bb1__0_1688 -> bb2__0_1688 [label="return"];
    bb2__0_1688 -> bb3__0_1688 [label="return"];
    bb3__0_1688 -> bb4__0_1688 [label="return"];
    bb4__0_1688 -> bb5__0_1688 [label="return"];
    bb5__0_1688 -> bb6__0_1688 [label="return"];
    bb6__0_1688 -> bb7__0_1688 [label="return"];
    bb7__0_1688 -> bb8__0_1688 [label="0"];
    bb7__0_1688 -> bb10__0_1688 [label="1"];
    bb7__0_1688 -> bb9__0_1688 [label="otherwise"];
    bb8__0_1688 -> bb12__0_1688 [label=""];
    bb10__0_1688 -> bb11__0_1688 [label="return"];
    bb11__0_1688 -> bb12__0_1688 [label=""];
}
