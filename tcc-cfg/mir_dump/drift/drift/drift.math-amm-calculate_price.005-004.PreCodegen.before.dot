digraph Mir_0_1786 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_price(_1: u128, _2: u128, _3: u128) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: u128;<br align="left"/>let mut _14: math::bn::U192;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _16: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _17: math::bn::U192;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _19: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _20: math::bn::U192;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: math::bn::U192;<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _27: math::bn::U192;<br align="left"/>let mut _28: math::bn::U192;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: math::bn::U192;<br align="left"/>debug quote_asset_reserve =&gt; _1;<br align="left"/>debug base_asset_reserve =&gt; _2;<br align="left"/>debug peg_multiplier =&gt; _3;<br align="left"/>debug peg_quote_asset_amount =&gt; _4;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>>;
    bb0__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _1<br/>StorageLive(_8)<br/>_8 = _3<br/></td></tr><tr><td align="left">_6 = &lt;u128 as SafeMath&gt;::safe_mul(move _7, move _8)</td></tr></table>>];
    bb1__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_5 as Continue).0: u128)<br/>_4 = _13<br/>StorageDead(_13)<br/>StorageDead(_5)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _4<br/></td></tr><tr><td align="left">_20 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _21)</td></tr></table>>];
    bb4__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_22)<br/></td></tr><tr><td align="left">_22 = &lt;U192 as From&lt;u128&gt;&gt;::from(const _)</td></tr></table>>];
    bb8__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">_19 = &lt;U192 as SafeMath&gt;::safe_mul(move _20, move _22)</td></tr></table>>];
    bb9__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb10__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_23 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb11__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_18 as Continue).0: math::bn::U192)<br/>_17 = _27<br/>StorageDead(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _2<br/></td></tr><tr><td align="left">_28 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _29)</td></tr></table>>];
    bb12__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_26)<br/>_26 = _24<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb13__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_16 = &lt;U192 as SafeMath&gt;::safe_div(move _17, move _28)</td></tr></table>>];
    bb15__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb16__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_30 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb17__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_15 as Continue).0: math::bn::U192)<br/>_14 = _34<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_0 = U192::try_to_u64(move _14)</td></tr></table>>];
    bb18__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb19__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_4)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_4)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1786 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1786 -> bb1__0_1786 [label="return"];
    bb1__0_1786 -> bb2__0_1786 [label="return"];
    bb2__0_1786 -> bb3__0_1786 [label="0"];
    bb2__0_1786 -> bb5__0_1786 [label="1"];
    bb2__0_1786 -> bb4__0_1786 [label="otherwise"];
    bb3__0_1786 -> bb7__0_1786 [label="return"];
    bb5__0_1786 -> bb6__0_1786 [label="return"];
    bb6__0_1786 -> bb22__0_1786 [label=""];
    bb7__0_1786 -> bb8__0_1786 [label="return"];
    bb8__0_1786 -> bb9__0_1786 [label="return"];
    bb9__0_1786 -> bb10__0_1786 [label="return"];
    bb10__0_1786 -> bb11__0_1786 [label="0"];
    bb10__0_1786 -> bb12__0_1786 [label="1"];
    bb10__0_1786 -> bb4__0_1786 [label="otherwise"];
    bb11__0_1786 -> bb14__0_1786 [label="return"];
    bb12__0_1786 -> bb13__0_1786 [label="return"];
    bb13__0_1786 -> bb21__0_1786 [label=""];
    bb14__0_1786 -> bb15__0_1786 [label="return"];
    bb15__0_1786 -> bb16__0_1786 [label="return"];
    bb16__0_1786 -> bb17__0_1786 [label="0"];
    bb16__0_1786 -> bb18__0_1786 [label="1"];
    bb16__0_1786 -> bb4__0_1786 [label="otherwise"];
    bb17__0_1786 -> bb20__0_1786 [label="return"];
    bb18__0_1786 -> bb19__0_1786 [label="return"];
    bb19__0_1786 -> bb21__0_1786 [label=""];
    bb20__0_1786 -> bb22__0_1786 [label=""];
    bb21__0_1786 -> bb22__0_1786 [label=""];
}
