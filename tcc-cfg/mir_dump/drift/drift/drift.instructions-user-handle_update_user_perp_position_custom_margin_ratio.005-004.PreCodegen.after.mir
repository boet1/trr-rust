// MIR for `instructions::user::handle_update_user_perp_position_custom_margin_ratio` after PreCodegen

fn instructions::user::handle_update_user_perp_position_custom_margin_ratio(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::UpdateUserPerpPositionCustomMarginRatio<'_>>, _2: u16, _3: u16, _4: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _sub_account_id => _2;
    debug perp_market_index => _3;
    debug margin_ratio => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: std::cell::RefMut<'_, state::user::User>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _10: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: std::cell::RefMut<'_, state::user::User>;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &mut state::user::User;
    let mut _20: &mut state::user::User;
    let mut _21: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _22: u16;
    let mut _23: u16;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: ();
    let mut _30: &mut instructions::user::UpdateUserPerpPositionCustomMarginRatio<'_>;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    scope 1 {
        debug user => _5;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: ();
        scope 6 {
            debug residual => _25;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _28;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _30 = deref_copy (_1.1: &mut instructions::user::UpdateUserPerpPositionCustomMarginRatio<'_>);
        _9 = &((*_30).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _7 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _8, move _10) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _7) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = move ((_6 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _5 = move _15;
        StorageDead(_15);
        _33 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _5;
        _20 = <RefMut<'_, User> as DerefMut>::deref_mut(move _21) -> [return: bb8, unwind: bb17];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _31 = discriminant(_6);
        StorageDead(_6);
        goto -> bb15;
    }

    bb8: {
        _19 = &mut (*_20);
        StorageDead(_21);
        StorageLive(_22);
        _22 = _3;
        StorageLive(_23);
        _23 = _4;
        _18 = User::update_perp_position_max_margin_ratio(move _19, move _22, move _23) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: ());
        _16 = _28;
        StorageDead(_28);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        _29 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _29);
        StorageDead(_29);
        drop(_5) -> [return: bb14, unwind: bb18];
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        drop(_5) -> [return: bb15, unwind: bb18];
    }

    bb14: {
        StorageDead(_5);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_5);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _35 = discriminant(_6);
        goto -> bb18;
    }
}
