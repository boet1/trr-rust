// MIR for `keeper::handle_resolve_perp_bankruptcy` after PreCodegen

fn keeper::handle_resolve_perp_bankruptcy(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::ResolveBankruptcy<'_>>, _2: u16, _3: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug quote_spot_market_index => _2;
    debug market_index => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _27: ();
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _29: std::result::Result<(), error::ErrorCode>;
    let mut _30: bool;
    let mut _31: &anchor_lang::prelude::Pubkey;
    let mut _32: &anchor_lang::prelude::Pubkey;
    let mut _33: ();
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: std::string::String;
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[&str; 2];
    let _45: &[&str; 2];
    let _46: [&str; 2];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let mut _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let mut _52: &error::ErrorCode;
    let _53: &error::ErrorCode;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: bool;
    let mut _64: u16;
    let mut _65: ();
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &error::ErrorCode;
    let _85: &error::ErrorCode;
    let mut _86: error::ErrorCode;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _93: std::cell::RefMut<'_, state::user::User>;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _95: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _96: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _97: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _98: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: std::cell::RefMut<'_, state::user::User>;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _107: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _108: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _109: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _110: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _119: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _120: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _124: instructions::optional_accounts::AccountMaps<'_>;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _126: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _127: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _128: &std::collections::BTreeSet<u16>;
    let _129: &std::collections::BTreeSet<u16>;
    let _130: std::collections::BTreeSet<u16>;
    let mut _131: u16;
    let mut _132: &std::collections::BTreeSet<u16>;
    let _133: &std::collections::BTreeSet<u16>;
    let _134: std::collections::BTreeSet<u16>;
    let mut _135: u16;
    let mut _136: u64;
    let mut _137: std::option::Option<state::state::OracleGuardRails>;
    let mut _138: state::state::OracleGuardRails;
    let mut _139: &state::state::State;
    let mut _140: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _148: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _149: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _155: ();
    let mut _157: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _159: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _160: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _161: &u16;
    let _162: &u16;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: &std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _171: bool;
    let mut _172: &state::spot_market::SpotMarket;
    let _173: &state::spot_market::SpotMarket;
    let mut _174: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _175: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _176: ();
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _178: std::result::Result<(), anchor_lang::error::Error>;
    let mut _179: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _180: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _181: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _182: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _183: &mut state::spot_market::SpotMarket;
    let mut _184: &mut state::spot_market::SpotMarket;
    let mut _185: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _186: i64;
    let mut _187: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _188: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let _190: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: &state::state::State;
    let _192: &state::state::State;
    let mut _193: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _194: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _195: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _196: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _197: isize;
    let mut _199: !;
    let mut _200: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _202: ();
    let mut _203: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _204: std::result::Result<(), anchor_lang::error::Error>;
    let mut _205: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _206: isize;
    let mut _208: !;
    let mut _209: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _211: ();
    let mut _212: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _213: std::result::Result<(), anchor_lang::error::Error>;
    let mut _214: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _220: i64;
    let mut _221: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _222: std::result::Result<i64, error::ErrorCode>;
    let mut _223: &state::spot_market::SpotMarket;
    let _224: &state::spot_market::SpotMarket;
    let mut _225: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _226: u64;
    let mut _227: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _228: &anchor_spl::token_interface::TokenAccount;
    let _229: &anchor_spl::token_interface::TokenAccount;
    let mut _230: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _231: isize;
    let mut _233: !;
    let mut _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _238: std::result::Result<u64, error::ErrorCode>;
    let mut _239: u16;
    let mut _240: &mut state::user::User;
    let mut _241: &mut state::user::User;
    let mut _242: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _243: &anchor_lang::prelude::Pubkey;
    let _244: &anchor_lang::prelude::Pubkey;
    let mut _245: &mut state::user::User;
    let mut _246: &mut state::user::User;
    let mut _247: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _248: &anchor_lang::prelude::Pubkey;
    let _249: &anchor_lang::prelude::Pubkey;
    let mut _250: &state::perp_market_map::PerpMarketMap<'_>;
    let _251: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _252: &state::spot_market_map::SpotMarketMap<'_>;
    let _253: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _254: &mut state::oracle_map::OracleMap<'_>;
    let mut _255: &mut state::oracle_map::OracleMap<'_>;
    let mut _256: i64;
    let mut _257: u64;
    let mut _258: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _259: &anchor_spl::token_interface::TokenAccount;
    let _260: &anchor_spl::token_interface::TokenAccount;
    let mut _261: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _267: ();
    let mut _268: bool;
    let mut _269: u64;
    let _270: ();
    let mut _271: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _272: std::result::Result<(), error::ErrorCode>;
    let mut _273: bool;
    let mut _274: u64;
    let mut _275: u64;
    let mut _276: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _277: &anchor_spl::token_interface::TokenAccount;
    let _278: &anchor_spl::token_interface::TokenAccount;
    let mut _279: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _280: ();
    let _282: ();
    let mut _283: &str;
    let _284: &str;
    let mut _285: &std::string::String;
    let _286: &std::string::String;
    let _287: std::string::String;
    let mut _289: std::fmt::Arguments<'_>;
    let mut _290: &[&str];
    let mut _291: &[&str; 2];
    let _292: &[&str; 2];
    let _293: [&str; 2];
    let mut _294: &[core::fmt::rt::Argument<'_>];
    let mut _295: &[core::fmt::rt::Argument<'_>; 1];
    let _296: &[core::fmt::rt::Argument<'_>; 1];
    let _297: [core::fmt::rt::Argument<'_>; 1];
    let mut _298: core::fmt::rt::Argument<'_>;
    let mut _299: &error::ErrorCode;
    let _300: &error::ErrorCode;
    let _301: ();
    let mut _302: &str;
    let _303: &str;
    let mut _304: &std::string::String;
    let _305: &std::string::String;
    let _306: std::string::String;
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let mut _310: &[&str; 2];
    let _311: &[&str; 2];
    let _312: [&str; 2];
    let mut _313: &[core::fmt::rt::Argument<'_>];
    let mut _314: &[core::fmt::rt::Argument<'_>; 2];
    let _315: &[core::fmt::rt::Argument<'_>; 2];
    let _316: [core::fmt::rt::Argument<'_>; 2];
    let mut _317: core::fmt::rt::Argument<'_>;
    let mut _318: &u64;
    let _319: &u64;
    let mut _320: core::fmt::rt::Argument<'_>;
    let mut _321: &u64;
    let _322: &u64;
    let _323: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _324: &anchor_spl::token_interface::TokenAccount;
    let _325: &anchor_spl::token_interface::TokenAccount;
    let mut _326: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _327: error::ErrorCode;
    let mut _328: isize;
    let mut _330: !;
    let mut _331: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _334: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _336: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _337: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _338: &u16;
    let _339: &u16;
    let mut _340: isize;
    let mut _342: !;
    let mut _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _346: &std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _348: bool;
    let mut _349: &state::spot_market::SpotMarket;
    let _350: &state::spot_market::SpotMarket;
    let mut _351: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _352: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _353: ();
    let mut _354: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _355: std::result::Result<(), anchor_lang::error::Error>;
    let mut _356: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _357: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _358: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _359: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _360: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _361: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _362: &anchor_lang::prelude::AccountInfo<'_>;
    let _363: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _364: u8;
    let mut _365: &state::state::State;
    let mut _366: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _367: u64;
    let mut _368: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _369: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _370: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _371: isize;
    let mut _373: !;
    let mut _374: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _376: ();
    let mut _377: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _378: std::result::Result<(), error::ErrorCode>;
    let mut _379: bool;
    let mut _380: u64;
    let mut _381: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _382: &anchor_spl::token_interface::TokenAccount;
    let _383: &anchor_spl::token_interface::TokenAccount;
    let mut _384: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _385: ();
    let _387: ();
    let mut _388: &str;
    let _389: &str;
    let mut _390: &std::string::String;
    let _391: &std::string::String;
    let _392: std::string::String;
    let mut _394: std::fmt::Arguments<'_>;
    let mut _395: &[&str];
    let mut _396: &[&str; 2];
    let _397: &[&str; 2];
    let _398: [&str; 2];
    let mut _399: &[core::fmt::rt::Argument<'_>];
    let mut _400: &[core::fmt::rt::Argument<'_>; 1];
    let _401: &[core::fmt::rt::Argument<'_>; 1];
    let _402: [core::fmt::rt::Argument<'_>; 1];
    let mut _403: core::fmt::rt::Argument<'_>;
    let mut _404: &error::ErrorCode;
    let _405: &error::ErrorCode;
    let _406: ();
    let mut _407: &str;
    let _408: &str;
    let mut _409: error::ErrorCode;
    let mut _410: isize;
    let mut _412: !;
    let mut _413: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _415: ();
    let mut _417: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _418: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _419: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _420: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _421: &u16;
    let _422: &u16;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _428: ();
    let mut _429: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _430: std::result::Result<(), anchor_lang::error::Error>;
    let mut _431: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _432: isize;
    let mut _434: !;
    let mut _435: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _437: i64;
    let mut _438: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _439: std::result::Result<i64, error::ErrorCode>;
    let mut _440: &state::spot_market::SpotMarket;
    let _441: &state::spot_market::SpotMarket;
    let mut _442: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _443: u64;
    let mut _444: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _445: &anchor_spl::token_interface::TokenAccount;
    let _446: &anchor_spl::token_interface::TokenAccount;
    let mut _447: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _448: isize;
    let mut _450: !;
    let mut _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _453: ();
    let mut _459: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _460: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _461: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _462: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _463: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _464: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _465: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _466: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _467: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _468: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _469: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _470: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _471: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _472: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _473: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _474: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _475: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _476: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _477: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _478: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _479: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _480: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _481: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _482: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _483: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _484: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _485: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _486: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _487: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _488: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _489: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _490: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _491: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _492: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _493: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _494: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _495: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _496: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _497: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _498: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _499: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _567: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _568: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _569: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _570: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _571: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _572: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _573: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _574: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _575: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _576: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _577: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _578: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _579: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _580: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _581: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _582: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _22: i64;
        scope 10 {
            debug now => _22;
            let _23: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug user_key => _23;
                let _25: anchor_lang::prelude::Pubkey;
                scope 12 {
                    debug liquidator_key => _25;
                    let _34: error::ErrorCode;
                    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _59: ();
                    let _66: error::ErrorCode;
                    let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _91: ();
                    let _92: &mut std::cell::RefMut<'_, state::user::User>;
                    let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _103: std::cell::RefMut<'_, state::user::User>;
                    scope 13 {
                        debug error_code => _34;
                        let _41: std::string::String;
                        let mut _458: &[&str; 2];
                        scope 14 {
                            debug res => _41;
                        }
                    }
                    scope 15 {
                        debug residual => _56;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _59;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug error_code => _66;
                        let _73: std::string::String;
                        let mut _457: &[&str; 2];
                        scope 20 {
                            debug res => _73;
                        }
                    }
                    scope 21 {
                        debug residual => _88;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _91;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug user => _92;
                        let _104: &mut std::cell::RefMut<'_, state::user::User>;
                        let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _115: std::cell::RefMut<'_, state::user::User>;
                        scope 30 {
                            debug liquidator => _104;
                            let _116: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                            scope 35 {
                                debug state => _116;
                                let _117: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                scope 36 {
                                    debug remaining_accounts_iter => _117;
                                    let _121: state::perp_market_map::PerpMarketMap<'_>;
                                    let _122: state::spot_market_map::SpotMarketMap<'_>;
                                    let mut _123: state::oracle_map::OracleMap<'_>;
                                    let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _145: instructions::optional_accounts::AccountMaps<'_>;
                                    scope 37 {
                                        debug perp_market_map => _121;
                                        debug spot_market_map => _122;
                                        debug oracle_map => _123;
                                        let _146: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _154: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        scope 42 {
                                            debug mint => _146;
                                            let _156: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                            let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _167: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                            let _236: u64;
                                            let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _266: u64;
                                            scope 47 {
                                                debug spot_market => _156;
                                                let mut _168: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                                scope 52 {
                                                    debug transfer_hook_remaining_accounts_iter => _168;
                                                    let _170: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
                                                    scope 53 {
                                                        debug remaining_accounts => _170;
                                                        let _198: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _201: ();
                                                        let _207: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _210: ();
                                                        let _216: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _219: ();
                                                        let _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _235: i64;
                                                        scope 54 {
                                                            debug residual => _198;
                                                            scope 55 {
                                                            }
                                                        }
                                                        scope 56 {
                                                            debug val => _201;
                                                            scope 57 {
                                                            }
                                                        }
                                                        scope 58 {
                                                            debug residual => _207;
                                                            scope 59 {
                                                            }
                                                        }
                                                        scope 60 {
                                                            debug val => _210;
                                                            scope 61 {
                                                            }
                                                        }
                                                        scope 62 {
                                                            debug residual => _216;
                                                            scope 63 {
                                                            }
                                                        }
                                                        scope 64 {
                                                            debug val => _219;
                                                            scope 65 {
                                                            }
                                                        }
                                                        scope 66 {
                                                            debug residual => _232;
                                                            scope 67 {
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug val => _235;
                                                            scope 69 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _164;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _167;
                                                scope 51 {
                                                }
                                            }
                                            scope 70 {
                                                debug pay_from_insurance => _236;
                                                let _281: error::ErrorCode;
                                                let _329: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _332: ();
                                                let _333: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                let _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _344: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                let _416: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                let _424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _427: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                scope 75 {
                                                    debug error_code => _281;
                                                    let _288: std::string::String;
                                                    let _307: std::string::String;
                                                    let mut _455: &[&str; 2];
                                                    let mut _456: &[&str; 2];
                                                    scope 76 {
                                                        debug res => _288;
                                                    }
                                                    scope 77 {
                                                        debug res => _307;
                                                    }
                                                }
                                                scope 78 {
                                                    debug residual => _329;
                                                    scope 79 {
                                                    }
                                                }
                                                scope 80 {
                                                    debug val => _332;
                                                    scope 81 {
                                                    }
                                                }
                                                scope 82 {
                                                    debug spot_market => _333;
                                                    let mut _345: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                                    scope 87 {
                                                        debug transfer_hook_remaining_accounts_iter => _345;
                                                        let _347: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
                                                        scope 88 {
                                                            debug remaining_accounts => _347;
                                                            let _372: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _375: ();
                                                            let _386: error::ErrorCode;
                                                            let _411: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _414: ();
                                                            scope 89 {
                                                                debug residual => _372;
                                                                scope 90 {
                                                                }
                                                            }
                                                            scope 91 {
                                                                debug val => _375;
                                                                scope 92 {
                                                                }
                                                            }
                                                            scope 93 {
                                                                debug error_code => _386;
                                                                let _393: std::string::String;
                                                                let mut _454: &[&str; 2];
                                                                scope 94 {
                                                                    debug res => _393;
                                                                }
                                                            }
                                                            scope 95 {
                                                                debug residual => _411;
                                                                scope 96 {
                                                                }
                                                            }
                                                            scope 97 {
                                                                debug val => _414;
                                                                scope 98 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 83 {
                                                    debug residual => _341;
                                                    scope 84 {
                                                    }
                                                }
                                                scope 85 {
                                                    debug val => _344;
                                                    scope 86 {
                                                    }
                                                }
                                                scope 99 {
                                                    debug spot_market => _416;
                                                    let _433: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _436: ();
                                                    let _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _452: i64;
                                                    scope 104 {
                                                        debug residual => _433;
                                                        scope 105 {
                                                        }
                                                    }
                                                    scope 106 {
                                                        debug val => _436;
                                                        scope 107 {
                                                        }
                                                    }
                                                    scope 108 {
                                                        debug residual => _449;
                                                        scope 109 {
                                                        }
                                                    }
                                                    scope 110 {
                                                        debug val => _452;
                                                        scope 111 {
                                                        }
                                                    }
                                                }
                                                scope 100 {
                                                    debug residual => _424;
                                                    scope 101 {
                                                    }
                                                }
                                                scope 102 {
                                                    debug val => _427;
                                                    scope 103 {
                                                    }
                                                }
                                            }
                                            scope 71 {
                                                debug residual => _263;
                                                scope 72 {
                                                }
                                            }
                                            scope 73 {
                                                debug val => _266;
                                                scope 74 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _151;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _154;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _142;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _145;
                                        scope 41 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 31 {
                            debug residual => _112;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _115;
                            scope 34 {
                            }
                        }
                    }
                    scope 26 {
                        debug residual => _100;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _103;
                        scope 29 {
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _459 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _8 = &((*_459).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _460 = deref_copy (*_8);
        _566 = (((_460.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_566);
        _6 = constraints::withdraw_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb237];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _500 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb250];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _550 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb220;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb237];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _502 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _22 = (_14.4: i64);
        StorageLive(_23);
        StorageLive(_24);
        _461 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _24 = &((*_461).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _23 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _24) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb249];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _548 = discriminant(_15);
        StorageDead(_15);
        goto -> bb219;
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _462 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _26 = &((*_462).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _25 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_23;
        StorageLive(_32);
        _32 = &_25;
        _30 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _31, move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _30) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_33);
        _33 = ();
        _29 = std::result::Result::<(), error::ErrorCode>::Ok(move _33);
        StorageDead(_33);
        goto -> bb23;
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        _34 = error::ErrorCode::UserCantLiquidateThemself;
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _458 = const _;
        _45 = &(*_458);
        _44 = &(*_45);
        _43 = move _44 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_34;
        _52 = &(*_53);
        _51 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _52) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_52);
        _50 = [move _51];
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = move _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_48);
        _42 = Arguments::<'_>::new_v1(move _43, move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        StorageDead(_43);
        _41 = format(move _42) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        _40 = move _41;
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = <String as Deref>::deref(move _38) -> [return: bb20, unwind: bb236];
    }

    bb20: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb21, unwind: bb236];
    }

    bb21: {
        StorageDead(_36);
        drop(_40) -> [return: bb22, unwind: bb237];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_54);
        _54 = _34;
        _29 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_34);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_30);
        _28 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _29) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_29);
        _55 = discriminant(_28);
        switchInt(move _55) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_59);
        _59 = ((_28 as Continue).0: ());
        _27 = _59;
        StorageDead(_59);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _2;
        _63 = Eq(move _64, const _);
        switchInt(move _63) -> [0: bb29, otherwise: bb28];
    }

    bb26: {
        StorageLive(_56);
        _56 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb218;
    }

    bb28: {
        StorageDead(_64);
        StorageLive(_65);
        _65 = ();
        _62 = std::result::Result::<(), error::ErrorCode>::Ok(move _65);
        StorageDead(_65);
        goto -> bb36;
    }

    bb29: {
        StorageDead(_64);
        StorageLive(_66);
        _66 = error::ErrorCode::InvalidSpotMarketAccount;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _457 = const _;
        _77 = &(*_457);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_66;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _84) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_74);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb33, unwind: bb235];
    }

    bb33: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb34, unwind: bb235];
    }

    bb34: {
        StorageDead(_68);
        drop(_72) -> [return: bb35, unwind: bb237];
    }

    bb35: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_86);
        _86 = _66;
        _62 = std::result::Result::<(), error::ErrorCode>::Err(move _86);
        StorageDead(_86);
        StorageDead(_66);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_62);
        _87 = discriminant(_61);
        switchInt(move _87) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_91);
        _91 = ((_61 as Continue).0: ());
        _60 = _91;
        StorageDead(_91);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _463 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _97 = &((*_463).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _96 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _97) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_88);
        _88 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb218;
    }

    bb41: {
        StorageDead(_97);
        StorageLive(_98);
        _98 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _95 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _96, move _98) -> [return: bb42, unwind: bb237];
    }

    bb42: {
        StorageDead(_98);
        StorageDead(_96);
        _94 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _95) -> [return: bb43, unwind: bb237];
    }

    bb43: {
        StorageDead(_95);
        _99 = discriminant(_94);
        switchInt(move _99) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_103);
        _103 = move ((_94 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _93 = move _103;
        StorageDead(_103);
        _92 = &mut _93;
        _506 = discriminant(_94);
        StorageDead(_94);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _464 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _109 = &((*_464).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _108 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _109) -> [return: bb47, unwind: bb234];
    }

    bb45: {
        StorageLive(_100);
        _100 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb46, unwind: bb248];
    }

    bb46: {
        StorageDead(_102);
        StorageDead(_100);
        _504 = discriminant(_94);
        StorageDead(_94);
        goto -> bb217;
    }

    bb47: {
        StorageDead(_109);
        StorageLive(_110);
        _110 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _107 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _108, move _110) -> [return: bb48, unwind: bb234];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_108);
        _106 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _107) -> [return: bb49, unwind: bb234];
    }

    bb49: {
        StorageDead(_107);
        _111 = discriminant(_106);
        switchInt(move _111) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_115);
        _115 = move ((_106 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _105 = move _115;
        StorageDead(_115);
        _104 = &mut _105;
        _510 = discriminant(_106);
        StorageDead(_106);
        StorageLive(_116);
        _465 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _116 = &((*_465).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _466 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _120 = &(*_466);
        _119 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _120) -> [return: bb53, unwind: bb233];
    }

    bb51: {
        StorageLive(_112);
        _112 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb52, unwind: bb247];
    }

    bb52: {
        StorageDead(_114);
        StorageDead(_112);
        _508 = discriminant(_106);
        StorageDead(_106);
        goto -> bb216;
    }

    bb53: {
        StorageDead(_120);
        _118 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _119) -> [return: bb54, unwind: bb233];
    }

    bb54: {
        StorageDead(_119);
        _117 = &mut _118;
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &mut (*_117);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _3;
        _130 = get_writable_perp_market_set(move _131) -> [return: bb55, unwind: bb233];
    }

    bb55: {
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _2;
        _134 = get_writable_spot_market_set(move _135) -> [return: bb56, unwind: bb232];
    }

    bb56: {
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        StorageLive(_136);
        _136 = (_14.0: u64);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _467 = deref_copy (*_116);
        _567 = (((_467.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _140 = &(*_567);
        _139 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _140) -> [return: bb57, unwind: bb231];
    }

    bb57: {
        StorageDead(_140);
        _138 = ((*_139).7: state::state::OracleGuardRails);
        _137 = Option::<state::state::OracleGuardRails>::Some(move _138);
        StorageDead(_138);
        _126 = load_maps(move _127, move _128, move _132, move _136, move _137) -> [return: bb58, unwind: bb231];
    }

    bb58: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        _125 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _126) -> [return: bb59, unwind: bb231];
    }

    bb59: {
        StorageDead(_126);
        _141 = discriminant(_125);
        switchInt(move _141) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_145);
        _145 = move ((_125 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _124 = move _145;
        StorageDead(_145);
        StorageLive(_121);
        _121 = move (_124.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_122);
        _122 = move (_124.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_123);
        _123 = move (_124.2: state::oracle_map::OracleMap<'_>);
        _514 = discriminant(_125);
        StorageDead(_139);
        drop(_134) -> [return: bb63, unwind: bb227];
    }

    bb61: {
        StorageLive(_142);
        _142 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb62, unwind: bb246];
    }

    bb62: {
        StorageDead(_144);
        StorageDead(_142);
        _512 = discriminant(_125);
        StorageDead(_139);
        drop(_134) -> [return: bb213, unwind: bb232];
    }

    bb63: {
        StorageDead(_134);
        StorageDead(_133);
        drop(_130) -> [return: bb64, unwind: bb228];
    }

    bb64: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &mut (*_117);
        _148 = get_token_mint(move _149) -> [return: bb65, unwind: bb228];
    }

    bb65: {
        StorageDead(_149);
        _147 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _148) -> [return: bb66, unwind: bb228];
    }

    bb66: {
        StorageDead(_148);
        _150 = discriminant(_147);
        switchInt(move _150) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_154);
        _154 = move ((_147 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _146 = move _154;
        StorageDead(_154);
        StorageDead(_147);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_122;
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_2;
        _161 = &(*_162);
        _159 = SpotMarketMap::<'_>::get_ref_mut(move _160, move _161) -> [return: bb70, unwind: bb228];
    }

    bb68: {
        StorageLive(_151);
        _151 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb69, unwind: bb228];
    }

    bb69: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_147);
        goto -> bb209;
    }

    bb70: {
        StorageDead(_161);
        StorageDead(_160);
        _158 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _159) -> [return: bb71, unwind: bb228];
    }

    bb71: {
        StorageDead(_159);
        _163 = discriminant(_158);
        switchInt(move _163) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_167);
        _167 = move ((_158 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _157 = move _167;
        StorageDead(_167);
        _156 = &mut _157;
        _518 = discriminant(_158);
        StorageDead(_162);
        StorageDead(_158);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &(*_117);
        _168 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Clone>::clone(move _169) -> [return: bb75, unwind: bb226];
    }

    bb73: {
        StorageLive(_164);
        _164 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb74, unwind: bb245];
    }

    bb74: {
        StorageDead(_166);
        StorageDead(_164);
        _516 = discriminant(_158);
        StorageDead(_162);
        StorageDead(_158);
        goto -> bb208;
    }

    bb75: {
        StorageDead(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &(*_156);
        _173 = <RefMut<'_, SpotMarket> as Deref>::deref(move _174) -> [return: bb76, unwind: bb226];
    }

    bb76: {
        _172 = &(*_173);
        StorageDead(_174);
        _171 = SpotMarket::has_transfer_hook(move _172) -> [return: bb77, unwind: bb226];
    }

    bb77: {
        switchInt(move _171) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_175);
        _175 = &mut _168;
        _170 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _175);
        StorageDead(_175);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_173);
        StorageDead(_172);
        _170 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb80;
    }

    bb80: {
        StorageDead(_171);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _468 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _180 = &((*_468).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _469 = deref_copy (*_180);
        _568 = (((_469.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _179 = &(*_568);
        StorageLive(_181);
        StorageLive(_182);
        _470 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _182 = &((*_470).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _471 = deref_copy (*_182);
        _569 = (((_471.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _181 = &(*_569);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &mut (*_156);
        _184 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _185) -> [return: bb81, unwind: bb226];
    }

    bb81: {
        _183 = &mut (*_184);
        StorageDead(_185);
        StorageLive(_186);
        _186 = _22;
        StorageLive(_187);
        StorageLive(_188);
        _472 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _188 = &((*_472).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _187 = &(*_188);
        StorageLive(_189);
        StorageLive(_190);
        _473 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _190 = &((*_473).8: anchor_lang::prelude::AccountInfo<'_>);
        _189 = &(*_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _474 = deref_copy (*_116);
        _570 = (((_474.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _193 = &(*_570);
        _192 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _193) -> [return: bb82, unwind: bb226];
    }

    bb82: {
        _191 = &(*_192);
        StorageDead(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_146;
        _194 = &(*_195);
        StorageLive(_196);
        _196 = move _170;
        _178 = attempt_settle_revenue_to_insurance_fund(move _179, move _181, move _183, move _186, move _187, move _189, move _191, move _194, move _196) -> [return: bb83, unwind: bb226];
    }

    bb83: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_179);
        _177 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _178) -> [return: bb84, unwind: bb226];
    }

    bb84: {
        StorageDead(_178);
        _197 = discriminant(_177);
        switchInt(move _197) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_201);
        _201 = ((_177 as Continue).0: ());
        _176 = _201;
        StorageDead(_201);
        _520 = discriminant(_177);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _475 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _476 = deref_copy ((*_475).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _571 = (((_476.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _205 = &mut (*_571);
        _204 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _205) -> [return: bb88, unwind: bb226];
    }

    bb86: {
        StorageLive(_198);
        _198 = move ((_177 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_200);
        _200 = move _198;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _200) -> [return: bb87, unwind: bb244];
    }

    bb87: {
        StorageDead(_200);
        StorageDead(_198);
        _546 = discriminant(_177);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        goto -> bb207;
    }

    bb88: {
        StorageDead(_205);
        _203 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _204) -> [return: bb89, unwind: bb226];
    }

    bb89: {
        StorageDead(_204);
        _206 = discriminant(_203);
        switchInt(move _206) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_210);
        _210 = ((_203 as Continue).0: ());
        _202 = _210;
        StorageDead(_210);
        _522 = discriminant(_203);
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _477 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _478 = deref_copy ((*_477).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _572 = (((_478.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _214 = &mut (*_572);
        _213 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _214) -> [return: bb93, unwind: bb226];
    }

    bb91: {
        StorageLive(_207);
        _207 = move ((_203 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_209);
        _209 = move _207;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _209) -> [return: bb92, unwind: bb243];
    }

    bb92: {
        StorageDead(_209);
        StorageDead(_207);
        _544 = discriminant(_203);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb207;
    }

    bb93: {
        StorageDead(_214);
        _212 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _213) -> [return: bb94, unwind: bb226];
    }

    bb94: {
        StorageDead(_213);
        _215 = discriminant(_212);
        switchInt(move _215) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        StorageLive(_219);
        _219 = ((_212 as Continue).0: ());
        _211 = _219;
        StorageDead(_219);
        _524 = discriminant(_212);
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &(*_156);
        _224 = <RefMut<'_, SpotMarket> as Deref>::deref(move _225) -> [return: bb98, unwind: bb226];
    }

    bb96: {
        StorageLive(_216);
        _216 = move ((_212 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_218);
        _218 = move _216;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _218) -> [return: bb97, unwind: bb242];
    }

    bb97: {
        StorageDead(_218);
        StorageDead(_216);
        _542 = discriminant(_212);
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb207;
    }

    bb98: {
        _223 = &(*_224);
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _479 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _480 = deref_copy ((*_479).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _573 = (((_480.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _230 = &(*_573);
        _229 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _230) -> [return: bb99, unwind: bb226];
    }

    bb99: {
        _228 = &(*_229);
        _227 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _228) -> [return: bb100, unwind: bb226];
    }

    bb100: {
        StorageDead(_230);
        StorageDead(_228);
        _226 = ((*_227).2: u64);
        _222 = validate_spot_market_vault_amount(move _223, move _226) -> [return: bb101, unwind: bb226];
    }

    bb101: {
        StorageDead(_226);
        StorageDead(_223);
        _221 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _222) -> [return: bb102, unwind: bb226];
    }

    bb102: {
        StorageDead(_222);
        _231 = discriminant(_221);
        switchInt(move _231) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_235);
        _235 = ((_221 as Continue).0: i64);
        _220 = _235;
        StorageDead(_235);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_220);
        _155 = const ();
        StorageDead(_170);
        StorageDead(_168);
        drop(_157) -> [return: bb106, unwind: bb228];
    }

    bb104: {
        StorageLive(_232);
        _232 = ((_221 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_234);
        _234 = _232;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _234) -> [return: bb105, unwind: bb226];
    }

    bb105: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb207;
    }

    bb106: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = _3;
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &mut (*_92);
        _241 = <RefMut<'_, User> as DerefMut>::deref_mut(move _242) -> [return: bb107, unwind: bb228];
    }

    bb107: {
        _240 = &mut (*_241);
        StorageDead(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_23;
        _243 = &(*_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &mut (*_104);
        _246 = <RefMut<'_, User> as DerefMut>::deref_mut(move _247) -> [return: bb108, unwind: bb228];
    }

    bb108: {
        _245 = &mut (*_246);
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_25;
        _248 = &(*_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_121;
        _250 = &(*_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_122;
        _252 = &(*_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &mut _123;
        _254 = &mut (*_255);
        StorageLive(_256);
        _256 = _22;
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _481 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _482 = deref_copy ((*_481).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _574 = (((_482.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _261 = &(*_574);
        _260 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _261) -> [return: bb109, unwind: bb228];
    }

    bb109: {
        _259 = &(*_260);
        _258 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _259) -> [return: bb110, unwind: bb228];
    }

    bb110: {
        StorageDead(_261);
        StorageDead(_259);
        _257 = ((*_258).2: u64);
        _238 = controller::liquidation::resolve_perp_bankruptcy(move _239, move _240, move _243, move _245, move _248, move _250, move _252, move _254, move _256, move _257) -> [return: bb111, unwind: bb228];
    }

    bb111: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_239);
        _237 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _238) -> [return: bb112, unwind: bb228];
    }

    bb112: {
        StorageDead(_238);
        _262 = discriminant(_237);
        switchInt(move _262) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_266);
        _266 = ((_237 as Continue).0: u64);
        _236 = _266;
        StorageDead(_266);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_237);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = _236;
        _268 = Gt(move _269, const 0_u64);
        switchInt(move _268) -> [0: bb117, otherwise: bb116];
    }

    bb114: {
        StorageLive(_263);
        _263 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb115, unwind: bb228];
    }

    bb115: {
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_237);
        goto -> bb206;
    }

    bb116: {
        StorageDead(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = _236;
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _483 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _484 = deref_copy ((*_483).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _575 = (((_484.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _279 = &(*_575);
        _278 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _279) -> [return: bb118, unwind: bb228];
    }

    bb117: {
        StorageDead(_269);
        _267 = const ();
        goto -> bb176;
    }

    bb118: {
        _277 = &(*_278);
        _276 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _277) -> [return: bb119, unwind: bb228];
    }

    bb119: {
        StorageDead(_279);
        StorageDead(_277);
        _275 = ((*_276).2: u64);
        _273 = Lt(move _274, move _275);
        switchInt(move _273) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageLive(_280);
        _280 = ();
        _272 = std::result::Result::<(), error::ErrorCode>::Ok(move _280);
        StorageDead(_280);
        goto -> bb137;
    }

    bb121: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageLive(_281);
        _281 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _456 = const _;
        _292 = &(*_456);
        _291 = &(*_292);
        _290 = move _291 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &_281;
        _299 = &(*_300);
        _298 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _299) -> [return: bb122, unwind: bb228];
    }

    bb122: {
        StorageDead(_299);
        _297 = [move _298];
        StorageDead(_298);
        _296 = &_297;
        _295 = &(*_296);
        _294 = move _295 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_295);
        _289 = Arguments::<'_>::new_v1(move _290, move _294) -> [return: bb123, unwind: bb228];
    }

    bb123: {
        StorageDead(_294);
        StorageDead(_290);
        _288 = format(move _289) -> [return: bb124, unwind: bb228];
    }

    bb124: {
        StorageDead(_289);
        StorageDead(_300);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_292);
        _287 = move _288;
        StorageDead(_288);
        _286 = &_287;
        _285 = &(*_286);
        _284 = <String as Deref>::deref(move _285) -> [return: bb125, unwind: bb225];
    }

    bb125: {
        _283 = &(*_284);
        StorageDead(_285);
        _282 = solana_program::log::sol_log(move _283) -> [return: bb126, unwind: bb225];
    }

    bb126: {
        StorageDead(_283);
        drop(_287) -> [return: bb127, unwind: bb228];
    }

    bb127: {
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_282);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _455 = const _;
        _311 = &(*_455);
        _310 = &(*_311);
        _309 = move _310 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_310);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_236;
        _318 = &(*_319);
        _317 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _318) -> [return: bb128, unwind: bb228];
    }

    bb128: {
        StorageDead(_318);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _485 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _486 = deref_copy ((*_485).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _576 = (((_486.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _326 = &(*_576);
        _325 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _326) -> [return: bb129, unwind: bb228];
    }

    bb129: {
        _324 = &(*_325);
        _323 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _324) -> [return: bb130, unwind: bb228];
    }

    bb130: {
        StorageDead(_326);
        StorageDead(_324);
        _322 = &((*_323).2: u64);
        _321 = &(*_322);
        _320 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _321) -> [return: bb131, unwind: bb228];
    }

    bb131: {
        StorageDead(_321);
        _316 = [move _317, move _320];
        StorageDead(_320);
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = move _314 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_314);
        _308 = Arguments::<'_>::new_v1(move _309, move _313) -> [return: bb132, unwind: bb228];
    }

    bb132: {
        StorageDead(_313);
        StorageDead(_309);
        _307 = format(move _308) -> [return: bb133, unwind: bb228];
    }

    bb133: {
        StorageDead(_308);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_311);
        _306 = move _307;
        StorageDead(_307);
        _305 = &_306;
        _304 = &(*_305);
        _303 = <String as Deref>::deref(move _304) -> [return: bb134, unwind: bb224];
    }

    bb134: {
        _302 = &(*_303);
        StorageDead(_304);
        _301 = solana_program::log::sol_log(move _302) -> [return: bb135, unwind: bb224];
    }

    bb135: {
        StorageDead(_302);
        drop(_306) -> [return: bb136, unwind: bb228];
    }

    bb136: {
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_301);
        StorageLive(_327);
        _327 = _281;
        _272 = std::result::Result::<(), error::ErrorCode>::Err(move _327);
        StorageDead(_327);
        StorageDead(_281);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_273);
        _271 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _272) -> [return: bb138, unwind: bb228];
    }

    bb138: {
        StorageDead(_272);
        _328 = discriminant(_271);
        switchInt(move _328) -> [0: bb139, 1: bb140, otherwise: bb4];
    }

    bb139: {
        StorageLive(_332);
        _332 = ((_271 as Continue).0: ());
        _270 = _332;
        StorageDead(_332);
        StorageDead(_271);
        StorageDead(_270);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_122;
        StorageLive(_338);
        StorageLive(_339);
        _339 = &_2;
        _338 = &(*_339);
        _336 = SpotMarketMap::<'_>::get_ref(move _337, move _338) -> [return: bb142, unwind: bb228];
    }

    bb140: {
        StorageLive(_329);
        _329 = ((_271 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_331);
        _331 = _329;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _331) -> [return: bb141, unwind: bb228];
    }

    bb141: {
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_271);
        StorageDead(_270);
        goto -> bb205;
    }

    bb142: {
        StorageDead(_338);
        StorageDead(_337);
        _335 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _336) -> [return: bb143, unwind: bb228];
    }

    bb143: {
        StorageDead(_336);
        _340 = discriminant(_335);
        switchInt(move _340) -> [0: bb144, 1: bb145, otherwise: bb4];
    }

    bb144: {
        StorageLive(_344);
        _344 = move ((_335 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _334 = move _344;
        StorageDead(_344);
        _333 = &_334;
        _528 = discriminant(_335);
        StorageDead(_339);
        StorageDead(_335);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &(*_117);
        _345 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Clone>::clone(move _346) -> [return: bb147, unwind: bb223];
    }

    bb145: {
        StorageLive(_341);
        _341 = ((_335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_343);
        _343 = _341;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _343) -> [return: bb146, unwind: bb241];
    }

    bb146: {
        StorageDead(_343);
        StorageDead(_341);
        _526 = discriminant(_335);
        StorageDead(_339);
        StorageDead(_335);
        goto -> bb204;
    }

    bb147: {
        StorageDead(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_333);
        _350 = <Ref<'_, SpotMarket> as Deref>::deref(move _351) -> [return: bb148, unwind: bb223];
    }

    bb148: {
        _349 = &(*_350);
        StorageDead(_351);
        _348 = SpotMarket::has_transfer_hook(move _349) -> [return: bb149, unwind: bb223];
    }

    bb149: {
        switchInt(move _348) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        StorageDead(_350);
        StorageDead(_349);
        StorageLive(_352);
        _352 = &mut _345;
        _347 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _352);
        StorageDead(_352);
        goto -> bb152;
    }

    bb151: {
        StorageDead(_350);
        StorageDead(_349);
        _347 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb152;
    }

    bb152: {
        StorageDead(_348);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _487 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _357 = &((*_487).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _356 = &(*_357);
        StorageLive(_358);
        StorageLive(_359);
        _488 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _359 = &((*_488).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _489 = deref_copy (*_359);
        _577 = (((_489.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _358 = &(*_577);
        StorageLive(_360);
        StorageLive(_361);
        _490 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _361 = &((*_490).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _491 = deref_copy (*_361);
        _578 = (((_491.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _360 = &(*_578);
        StorageLive(_362);
        StorageLive(_363);
        _492 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _363 = &((*_492).8: anchor_lang::prelude::AccountInfo<'_>);
        _362 = &(*_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _493 = deref_copy (*_116);
        _579 = (((_493.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _366 = &(*_579);
        _365 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _366) -> [return: bb153, unwind: bb223];
    }

    bb153: {
        StorageDead(_366);
        _364 = ((*_365).15: u8);
        StorageLive(_367);
        _367 = _236;
        StorageLive(_368);
        StorageLive(_369);
        _369 = &_146;
        _368 = &(*_369);
        StorageLive(_370);
        _370 = move _347;
        _355 = send_from_program_vault(move _356, move _358, move _360, move _362, move _364, move _367, move _368, move _370) -> [return: bb154, unwind: bb223];
    }

    bb154: {
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_356);
        _354 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _355) -> [return: bb155, unwind: bb223];
    }

    bb155: {
        StorageDead(_355);
        _371 = discriminant(_354);
        switchInt(move _371) -> [0: bb156, 1: bb157, otherwise: bb4];
    }

    bb156: {
        StorageLive(_375);
        _375 = ((_354 as Continue).0: ());
        _353 = _375;
        StorageDead(_375);
        _530 = discriminant(_354);
        StorageDead(_369);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_353);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _494 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _495 = deref_copy ((*_494).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _580 = (((_495.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _384 = &(*_580);
        _383 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _384) -> [return: bb159, unwind: bb223];
    }

    bb157: {
        StorageLive(_372);
        _372 = move ((_354 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_374);
        _374 = move _372;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _374) -> [return: bb158, unwind: bb240];
    }

    bb158: {
        StorageDead(_374);
        StorageDead(_372);
        _540 = discriminant(_354);
        StorageDead(_369);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_353);
        goto -> bb203;
    }

    bb159: {
        _382 = &(*_383);
        _381 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _382) -> [return: bb160, unwind: bb223];
    }

    bb160: {
        StorageDead(_384);
        StorageDead(_382);
        _380 = ((*_381).2: u64);
        _379 = Gt(move _380, const 0_u64);
        switchInt(move _379) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageLive(_385);
        _385 = ();
        _378 = std::result::Result::<(), error::ErrorCode>::Ok(move _385);
        StorageDead(_385);
        goto -> bb170;
    }

    bb162: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageLive(_386);
        _386 = error::ErrorCode::InvalidIFDetected;
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _454 = const _;
        _397 = &(*_454);
        _396 = &(*_397);
        _395 = move _396 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_396);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_386;
        _404 = &(*_405);
        _403 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _404) -> [return: bb163, unwind: bb223];
    }

    bb163: {
        StorageDead(_404);
        _402 = [move _403];
        StorageDead(_403);
        _401 = &_402;
        _400 = &(*_401);
        _399 = move _400 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_400);
        _394 = Arguments::<'_>::new_v1(move _395, move _399) -> [return: bb164, unwind: bb223];
    }

    bb164: {
        StorageDead(_399);
        StorageDead(_395);
        _393 = format(move _394) -> [return: bb165, unwind: bb223];
    }

    bb165: {
        StorageDead(_394);
        StorageDead(_405);
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_397);
        _392 = move _393;
        StorageDead(_393);
        _391 = &_392;
        _390 = &(*_391);
        _389 = <String as Deref>::deref(move _390) -> [return: bb166, unwind: bb222];
    }

    bb166: {
        _388 = &(*_389);
        StorageDead(_390);
        _387 = solana_program::log::sol_log(move _388) -> [return: bb167, unwind: bb222];
    }

    bb167: {
        StorageDead(_388);
        drop(_392) -> [return: bb168, unwind: bb223];
    }

    bb168: {
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_387);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = const "insurance_fund_vault.amount must remain > 0";
        _407 = &(*_408);
        _406 = solana_program::log::sol_log(move _407) -> [return: bb169, unwind: bb223];
    }

    bb169: {
        StorageDead(_407);
        StorageDead(_408);
        StorageDead(_406);
        StorageLive(_409);
        _409 = _386;
        _378 = std::result::Result::<(), error::ErrorCode>::Err(move _409);
        StorageDead(_409);
        StorageDead(_386);
        goto -> bb170;
    }

    bb170: {
        StorageDead(_379);
        _377 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _378) -> [return: bb171, unwind: bb223];
    }

    bb171: {
        StorageDead(_378);
        _410 = discriminant(_377);
        switchInt(move _410) -> [0: bb172, 1: bb173, otherwise: bb4];
    }

    bb172: {
        StorageLive(_414);
        _414 = ((_377 as Continue).0: ());
        _376 = _414;
        StorageDead(_414);
        StorageDead(_377);
        StorageDead(_376);
        _267 = const ();
        StorageDead(_347);
        StorageDead(_345);
        drop(_334) -> [return: bb175, unwind: bb228];
    }

    bb173: {
        StorageLive(_411);
        _411 = ((_377 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_413);
        _413 = _411;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _413) -> [return: bb174, unwind: bb223];
    }

    bb174: {
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb203;
    }

    bb175: {
        StorageDead(_334);
        StorageDead(_333);
        goto -> bb176;
    }

    bb176: {
        StorageDead(_268);
        StorageDead(_267);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &_122;
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_2;
        _421 = &(*_422);
        _419 = SpotMarketMap::<'_>::get_ref_mut(move _420, move _421) -> [return: bb177, unwind: bb228];
    }

    bb177: {
        StorageDead(_421);
        StorageDead(_420);
        _418 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _419) -> [return: bb178, unwind: bb228];
    }

    bb178: {
        StorageDead(_419);
        _423 = discriminant(_418);
        switchInt(move _423) -> [0: bb179, 1: bb180, otherwise: bb4];
    }

    bb179: {
        StorageLive(_427);
        _427 = move ((_418 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _417 = move _427;
        StorageDead(_427);
        _416 = &mut _417;
        _534 = discriminant(_418);
        StorageDead(_422);
        StorageDead(_418);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _496 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _497 = deref_copy ((*_496).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _581 = (((_497.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _431 = &mut (*_581);
        _430 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _431) -> [return: bb182, unwind: bb221];
    }

    bb180: {
        StorageLive(_424);
        _424 = ((_418 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_426);
        _426 = _424;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _426) -> [return: bb181, unwind: bb239];
    }

    bb181: {
        StorageDead(_426);
        StorageDead(_424);
        _532 = discriminant(_418);
        StorageDead(_422);
        StorageDead(_418);
        goto -> bb202;
    }

    bb182: {
        StorageDead(_431);
        _429 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _430) -> [return: bb183, unwind: bb221];
    }

    bb183: {
        StorageDead(_430);
        _432 = discriminant(_429);
        switchInt(move _432) -> [0: bb184, 1: bb185, otherwise: bb4];
    }

    bb184: {
        StorageLive(_436);
        _436 = ((_429 as Continue).0: ());
        _428 = _436;
        StorageDead(_436);
        _536 = discriminant(_429);
        StorageDead(_429);
        StorageDead(_428);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &(*_416);
        _441 = <RefMut<'_, SpotMarket> as Deref>::deref(move _442) -> [return: bb187, unwind: bb221];
    }

    bb185: {
        StorageLive(_433);
        _433 = move ((_429 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_435);
        _435 = move _433;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _435) -> [return: bb186, unwind: bb238];
    }

    bb186: {
        StorageDead(_435);
        StorageDead(_433);
        _538 = discriminant(_429);
        StorageDead(_429);
        StorageDead(_428);
        goto -> bb201;
    }

    bb187: {
        _440 = &(*_441);
        StorageDead(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _498 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _499 = deref_copy ((*_498).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _582 = (((_499.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _447 = &(*_582);
        _446 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _447) -> [return: bb188, unwind: bb221];
    }

    bb188: {
        _445 = &(*_446);
        _444 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _445) -> [return: bb189, unwind: bb221];
    }

    bb189: {
        StorageDead(_447);
        StorageDead(_445);
        _443 = ((*_444).2: u64);
        _439 = validate_spot_market_vault_amount(move _440, move _443) -> [return: bb190, unwind: bb221];
    }

    bb190: {
        StorageDead(_443);
        StorageDead(_440);
        _438 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _439) -> [return: bb191, unwind: bb221];
    }

    bb191: {
        StorageDead(_439);
        _448 = discriminant(_438);
        switchInt(move _448) -> [0: bb192, 1: bb193, otherwise: bb4];
    }

    bb192: {
        StorageLive(_452);
        _452 = ((_438 as Continue).0: i64);
        _437 = _452;
        StorageDead(_452);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_441);
        StorageDead(_438);
        StorageDead(_437);
        _415 = const ();
        drop(_417) -> [return: bb195, unwind: bb228];
    }

    bb193: {
        StorageLive(_449);
        _449 = ((_438 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_451);
        _451 = _449;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _451) -> [return: bb194, unwind: bb221];
    }

    bb194: {
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_441);
        StorageDead(_438);
        StorageDead(_437);
        goto -> bb201;
    }

    bb195: {
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_415);
        StorageLive(_453);
        _453 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _453);
        StorageDead(_453);
        StorageDead(_236);
        StorageDead(_146);
        drop(_123) -> [return: bb196, unwind: bb229];
    }

    bb196: {
        StorageDead(_123);
        drop(_122) -> [return: bb197, unwind: bb230];
    }

    bb197: {
        StorageDead(_122);
        drop(_121) -> [return: bb198, unwind: bb233];
    }

    bb198: {
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        drop(_105) -> [return: bb199, unwind: bb234];
    }

    bb199: {
        StorageDead(_105);
        StorageDead(_104);
        drop(_93) -> [return: bb200, unwind: bb237];
    }

    bb200: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        goto -> bb220;
    }

    bb201: {
        drop(_417) -> [return: bb202, unwind: bb228];
    }

    bb202: {
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb206;
    }

    bb203: {
        StorageDead(_347);
        StorageDead(_345);
        drop(_334) -> [return: bb204, unwind: bb228];
    }

    bb204: {
        StorageDead(_334);
        StorageDead(_333);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_268);
        StorageDead(_267);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_236);
        goto -> bb209;
    }

    bb207: {
        StorageDead(_170);
        StorageDead(_168);
        drop(_157) -> [return: bb208, unwind: bb228];
    }

    bb208: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_155);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_146);
        drop(_123) -> [return: bb210, unwind: bb229];
    }

    bb210: {
        StorageDead(_123);
        drop(_122) -> [return: bb211, unwind: bb230];
    }

    bb211: {
        StorageDead(_122);
        drop(_121) -> [return: bb212, unwind: bb233];
    }

    bb212: {
        StorageDead(_121);
        goto -> bb215;
    }

    bb213: {
        StorageDead(_134);
        StorageDead(_133);
        drop(_130) -> [return: bb214, unwind: bb233];
    }

    bb214: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        drop(_105) -> [return: bb216, unwind: bb234];
    }

    bb216: {
        StorageDead(_105);
        StorageDead(_104);
        drop(_93) -> [return: bb217, unwind: bb237];
    }

    bb217: {
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_14);
        goto -> bb220;
    }

    bb220: {
        return;
    }

    bb221 (cleanup): {
        drop(_417) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_392) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_334) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_306) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_287) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        drop(_157) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        drop(_130) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        drop(_123) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        drop(_122) -> [return: bb230, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        drop(_121) -> [return: bb233, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        drop(_134) -> [return: bb232, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        drop(_130) -> [return: bb233, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        drop(_105) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_93) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_72) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_40) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        resume;
    }

    bb238 (cleanup): {
        _552 = discriminant(_429);
        goto -> bb221;
    }

    bb239 (cleanup): {
        _553 = discriminant(_418);
        goto -> bb228;
    }

    bb240 (cleanup): {
        _554 = discriminant(_354);
        goto -> bb223;
    }

    bb241 (cleanup): {
        _555 = discriminant(_335);
        goto -> bb228;
    }

    bb242 (cleanup): {
        _556 = discriminant(_212);
        goto -> bb226;
    }

    bb243 (cleanup): {
        _557 = discriminant(_203);
        goto -> bb226;
    }

    bb244 (cleanup): {
        _558 = discriminant(_177);
        goto -> bb226;
    }

    bb245 (cleanup): {
        _559 = discriminant(_158);
        goto -> bb228;
    }

    bb246 (cleanup): {
        _561 = discriminant(_125);
        goto -> bb231;
    }

    bb247 (cleanup): {
        _562 = discriminant(_106);
        goto -> bb234;
    }

    bb248 (cleanup): {
        _563 = discriminant(_94);
        goto -> bb237;
    }

    bb249 (cleanup): {
        _564 = discriminant(_15);
        goto -> bb237;
    }

    bb250 (cleanup): {
        _565 = discriminant(_5);
        goto -> bb237;
    }
}
