// MIR for `state::user::<impl at programs/drift/src/state/user.rs:735:36: 735:45>::eq` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:735:36: 735:45>::eq(_1: &OrderFillSimulation, _2: &OrderFillSimulation) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: i128;
    let mut _5: i128;
    let mut _6: bool;
    let mut _7: i128;
    let mut _8: i128;
    let mut _9: bool;
    let mut _10: i128;
    let mut _11: i128;
    let mut _12: bool;
    let mut _13: i128;
    let mut _14: i128;
    let mut _15: i128;
    let mut _16: i128;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: i128);
        StorageLive(_5);
        _5 = ((*_2).0: i128);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: i128);
        StorageLive(_8);
        _8 = ((*_2).1: i128);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: i128);
        StorageLive(_11);
        _11 = ((*_2).2: i128);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: i128);
        StorageLive(_14);
        _14 = ((*_2).3: i128);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        _15 = ((*_1).4: i128);
        StorageLive(_16);
        _16 = ((*_2).4: i128);
        _0 = Eq(move _15, move _16);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb10;
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb9;
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb9;
    }

    bb7: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb9;
    }

    bb9: {
        _0 = const false;
        goto -> bb10;
    }

    bb10: {
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
