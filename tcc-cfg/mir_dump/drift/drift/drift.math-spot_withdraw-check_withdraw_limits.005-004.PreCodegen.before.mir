// MIR for `check_withdraw_limits` before PreCodegen

fn check_withdraw_limits(_1: &SpotMarket, _2: Option<&User>, _3: Option<u128>) -> std::result::Result<bool, error::ErrorCode> {
    debug spot_market => _1;
    debug user => _2;
    debug token_amount_withdrawn => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: &state::spot_market::SpotMarket;
    let mut _9: &state::spot_market::SpotBalanceType;
    let _10: &state::spot_market::SpotBalanceType;
    let _11: state::spot_market::SpotBalanceType;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: &state::spot_market::SpotMarket;
    let mut _22: &state::spot_market::SpotBalanceType;
    let _23: &state::spot_market::SpotBalanceType;
    let _24: state::spot_market::SpotBalanceType;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: bool;
    let mut _32: u16;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _34: std::result::Result<u128, error::ErrorCode>;
    let mut _35: u64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _37: std::result::Result<u64, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _40: std::result::Result<u64, error::ErrorCode>;
    let mut _41: u64;
    let mut _42: u64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _44: std::result::Result<u64, error::ErrorCode>;
    let mut _45: u16;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _68: std::result::Result<u128, error::ErrorCode>;
    let mut _69: u128;
    let mut _70: u128;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _72: std::result::Result<u128, error::ErrorCode>;
    let mut _73: u64;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: u64;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: u128;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _90: std::result::Result<u128, error::ErrorCode>;
    let mut _91: u64;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: u128;
    let mut _98: u8;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: (u128, u128);
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _108: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _109: u128;
    let mut _110: u128;
    let mut _111: &state::spot_market::SpotMarket;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: u128;
    let mut _119: u128;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _122: std::result::Result<u128, error::ErrorCode>;
    let mut _123: u128;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _125: std::result::Result<u128, error::ErrorCode>;
    let mut _126: u64;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: u128;
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _134: std::result::Result<u128, error::ErrorCode>;
    let mut _135: u64;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _147: u128;
    let mut _148: u128;
    let mut _150: isize;
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _154: std::result::Result<usize, error::ErrorCode>;
    let mut _155: &state::user::User;
    let mut _156: u16;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: bool;
    let mut _163: &&state::spot_market::SpotBalanceType;
    let _164: &state::spot_market::SpotBalanceType;
    let mut _165: &state::user::SpotPosition;
    let _166: usize;
    let mut _167: usize;
    let mut _168: bool;
    let mut _169: &&state::spot_market::SpotBalanceType;
    let _170: &state::spot_market::SpotBalanceType;
    let _171: state::spot_market::SpotBalanceType;
    let mut _172: bool;
    let mut _173: u128;
    let mut _174: u128;
    let mut _175: u128;
    let mut _176: u128;
    let mut _177: u128;
    let mut _178: u128;
    let mut _179: bool;
    let mut _180: u128;
    let mut _181: u128;
    let mut _182: u128;
    let mut _183: u128;
    let mut _185: bool;
    let _186: ();
    let mut _187: &str;
    let _188: &str;
    let mut _189: &std::string::String;
    let _190: &std::string::String;
    let _191: std::string::String;
    let mut _193: std::fmt::Arguments<'_>;
    let mut _194: &[&str];
    let mut _195: &[&str; 1];
    let _196: &[&str; 1];
    let _197: [&str; 1];
    let mut _198: &[core::fmt::rt::Argument<'_>];
    let mut _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: &[core::fmt::rt::Argument<'_>; 1];
    let _201: [core::fmt::rt::Argument<'_>; 1];
    let mut _202: core::fmt::rt::Argument<'_>;
    let mut _203: &u64;
    let _204: &u64;
    let _205: ();
    let mut _206: &str;
    let _207: &str;
    let mut _208: &std::string::String;
    let _209: &std::string::String;
    let _210: std::string::String;
    let mut _212: std::fmt::Arguments<'_>;
    let mut _213: &[&str];
    let mut _214: &[&str; 1];
    let _215: &[&str; 1];
    let _216: [&str; 1];
    let mut _217: &[core::fmt::rt::Argument<'_>];
    let mut _218: &[core::fmt::rt::Argument<'_>; 1];
    let _219: &[core::fmt::rt::Argument<'_>; 1];
    let _220: [core::fmt::rt::Argument<'_>; 1];
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &u128;
    let _223: &u128;
    let _224: ();
    let mut _225: &str;
    let _226: &str;
    let mut _227: &std::string::String;
    let _228: &std::string::String;
    let _229: std::string::String;
    let mut _231: std::fmt::Arguments<'_>;
    let mut _232: &[&str];
    let mut _233: &[&str; 1];
    let _234: &[&str; 1];
    let _235: [&str; 1];
    let mut _236: &[core::fmt::rt::Argument<'_>];
    let mut _237: &[core::fmt::rt::Argument<'_>; 1];
    let _238: &[core::fmt::rt::Argument<'_>; 1];
    let _239: [core::fmt::rt::Argument<'_>; 1];
    let mut _240: core::fmt::rt::Argument<'_>;
    let mut _241: &u128;
    let _242: &u128;
    let _243: ();
    let mut _244: &str;
    let _245: &str;
    let mut _246: &std::string::String;
    let _247: &std::string::String;
    let _248: std::string::String;
    let mut _250: std::fmt::Arguments<'_>;
    let mut _251: &[&str];
    let mut _252: &[&str; 1];
    let _253: &[&str; 1];
    let _254: [&str; 1];
    let mut _255: &[core::fmt::rt::Argument<'_>];
    let mut _256: &[core::fmt::rt::Argument<'_>; 1];
    let _257: &[core::fmt::rt::Argument<'_>; 1];
    let _258: [core::fmt::rt::Argument<'_>; 1];
    let mut _259: core::fmt::rt::Argument<'_>;
    let mut _260: &u128;
    let _261: &u128;
    let _262: ();
    let mut _263: &str;
    let _264: &str;
    let mut _265: &std::string::String;
    let _266: &std::string::String;
    let _267: std::string::String;
    let mut _269: std::fmt::Arguments<'_>;
    let mut _270: &[&str];
    let mut _271: &[&str; 1];
    let _272: &[&str; 1];
    let _273: [&str; 1];
    let mut _274: &[core::fmt::rt::Argument<'_>];
    let mut _275: &[core::fmt::rt::Argument<'_>; 1];
    let _276: &[core::fmt::rt::Argument<'_>; 1];
    let _277: [core::fmt::rt::Argument<'_>; 1];
    let mut _278: core::fmt::rt::Argument<'_>;
    let mut _279: &u128;
    let _280: &u128;
    let mut _281: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _282: std::result::Result<bool, error::ErrorCode>;
    let mut _283: &state::spot_market::SpotMarket;
    let mut _284: std::option::Option<&state::user::User>;
    let mut _285: std::option::Option<u128>;
    let mut _286: isize;
    let mut _288: !;
    let mut _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _291: bool;
    let mut _299: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug deposit_token_amount => _4;
        let _17: u128;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u128;
        let mut _298: &state::spot_market::SpotBalanceType;
        scope 6 {
            debug borrow_token_amount => _17;
            let _30: u128;
            let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _50: u64;
            let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _55: u64;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: u64;
            let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _65: u128;
            scope 11 {
                debug max_token_borrows => _30;
                let _66: u128;
                let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _78: u128;
                let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _87: u128;
                let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _96: u128;
                let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _103: u128;
                scope 28 {
                    debug max_borrow_token_for_twap => _66;
                    let _104: u128;
                    let _105: u128;
                    let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _116: (u128, u128);
                    scope 45 {
                        debug min_deposit_token_for_utilization => _104;
                        debug max_borrow_token_for_utilization => _105;
                        let _117: u128;
                        scope 50 {
                            debug max_borrow_token => _117;
                            let _120: u128;
                            let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _131: u128;
                            let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _140: u128;
                            let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _145: u128;
                            scope 51 {
                                debug min_deposit_token_for_twap => _120;
                                let _146: u128;
                                scope 64 {
                                    debug min_deposit_token => _146;
                                    let _149: bool;
                                    scope 65 {
                                        debug valid_global_withdrawal => _149;
                                        let _184: bool;
                                        let _192: std::string::String;
                                        let _211: std::string::String;
                                        let _230: std::string::String;
                                        let _249: std::string::String;
                                        let _268: std::string::String;
                                        let _287: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _290: bool;
                                        let mut _292: &[&str; 1];
                                        let mut _293: &[&str; 1];
                                        let mut _294: &[&str; 1];
                                        let mut _295: &[&str; 1];
                                        let mut _296: &[&str; 1];
                                        scope 72 {
                                            debug valid_withdrawal => _184;
                                        }
                                        scope 73 {
                                            debug res => _192;
                                        }
                                        scope 74 {
                                            debug res => _211;
                                        }
                                        scope 75 {
                                            debug res => _230;
                                        }
                                        scope 76 {
                                            debug res => _249;
                                        }
                                        scope 77 {
                                            debug res => _268;
                                        }
                                        scope 78 {
                                            debug residual => _287;
                                            scope 79 {
                                            }
                                        }
                                        scope 80 {
                                            debug val => _290;
                                            scope 81 {
                                            }
                                        }
                                    }
                                    scope 66 {
                                        debug user => _151;
                                        let _151: &state::user::User;
                                        let _152: usize;
                                        let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _161: usize;
                                        scope 67 {
                                            debug spot_position_index => _152;
                                            let mut _297: &&state::spot_market::SpotBalanceType;
                                        }
                                        scope 68 {
                                            debug residual => _158;
                                            scope 69 {
                                            }
                                        }
                                        scope 70 {
                                            debug val => _161;
                                            scope 71 {
                                            }
                                        }
                                    }
                                }
                            }
                            scope 52 {
                                debug residual => _128;
                                scope 53 {
                                }
                            }
                            scope 54 {
                                debug val => _131;
                                scope 55 {
                                }
                            }
                            scope 56 {
                                debug residual => _137;
                                scope 57 {
                                }
                            }
                            scope 58 {
                                debug val => _140;
                                scope 59 {
                                }
                            }
                            scope 60 {
                                debug residual => _142;
                                scope 61 {
                                }
                            }
                            scope 62 {
                                debug val => _145;
                                scope 63 {
                                }
                            }
                        }
                    }
                    scope 46 {
                        debug residual => _113;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _116;
                        scope 49 {
                        }
                    }
                }
                scope 29 {
                    debug residual => _75;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _78;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _84;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _87;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _93;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _96;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug residual => _100;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _103;
                    scope 44 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _52;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _55;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _57;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _60;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _62;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _65;
                scope 27 {
                }
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).11: u128);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        StorageLive(_10);
        _299 = const _;
        _10 = &(*_299);
        _9 = &(*_10);
        _6 = get_token_amount(move _7, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _12 = discriminant(_5);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_5 as Continue).0: u128);
        _4 = _16;
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_5);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_1).12: u128);
        StorageLive(_21);
        _21 = &(*_1);
        StorageLive(_22);
        StorageLive(_23);
        _298 = const _;
        _23 = &(*_298);
        _22 = &(*_23);
        _19 = get_token_amount(move _20, move _21, move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb148;
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _25 = discriminant(_18);
        switchInt(move _25) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_18 as Continue).0: u128);
        _17 = _29;
        StorageDead(_29);
        StorageDead(_23);
        StorageDead(_18);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_1).50: u16);
        _31 = Gt(move _32, const 0_u16);
        switchInt(move _31) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_18);
        goto -> bb147;
    }

    bb12: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_1).18: u64);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_1).50: u16);
        _44 = <u16 as Cast>::cast::<u64>(move _45) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        _30 = const _;
        goto -> bb34;
    }

    bb14: {
        StorageDead(_45);
        _43 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: u64);
        _42 = _50;
        StorageDead(_50);
        _40 = <u64 as SafeMath>::safe_mul(move _41, move _42) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_47);
        _47 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb143;
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        _51 = discriminant(_39);
        switchInt(move _51) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_55);
        _55 = ((_39 as Continue).0: u64);
        _38 = _55;
        StorageDead(_55);
        _37 = <u64 as SafeMath>::safe_div(move _38, const 10000_u64) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_52);
        _52 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_54);
        StorageDead(_52);
        goto -> bb143;
    }

    bb24: {
        StorageDead(_38);
        _36 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_37);
        _56 = discriminant(_36);
        switchInt(move _56) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_60);
        _60 = ((_36 as Continue).0: u64);
        _35 = _60;
        StorageDead(_60);
        _34 = <u64 as Cast>::cast::<u128>(move _35) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_57);
        _57 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb144;
    }

    bb29: {
        StorageDead(_35);
        _33 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_34);
        _61 = discriminant(_33);
        switchInt(move _61) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_65);
        _65 = ((_33 as Continue).0: u128);
        _30 = _65;
        StorageDead(_65);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        goto -> bb34;
    }

    bb32: {
        StorageLive(_62);
        _62 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_64);
        StorageDead(_62);
        goto -> bb145;
    }

    bb34: {
        StorageDead(_31);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _4;
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = ((*_1).19: u64);
        _72 = <u64 as Cast>::cast::<u128>(move _73) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_73);
        _71 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _72) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_72);
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_78);
        _78 = ((_71 as Continue).0: u128);
        _70 = _78;
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = ((*_1).20: u64);
        _81 = <u64 as Cast>::cast::<u128>(move _82) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_75);
        _75 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb141;
    }

    bb40: {
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: u128);
        _79 = _87;
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = ((*_1).17: u64);
        _90 = <u64 as Cast>::cast::<u128>(move _91) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb140;
    }

    bb45: {
        StorageDead(_91);
        _89 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _90) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_96);
        _96 = ((_89 as Continue).0: u128);
        _88 = _96;
        StorageDead(_96);
        StorageLive(_97);
        _97 = _30;
        StorageLive(_98);
        _98 = ((*_1).62: u8);
        _68 = calculate_max_borrow_token_amount(move _69, move _70, move _79, move _88, move _97, move _98) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_93);
        _93 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb139;
    }

    bb50: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _68) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_68);
        _99 = discriminant(_67);
        switchInt(move _99) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_103);
        _103 = ((_67 as Continue).0: u128);
        _66 = _103;
        StorageDead(_103);
        StorageDead(_89);
        StorageDead(_80);
        StorageDead(_71);
        StorageDead(_67);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _4;
        StorageLive(_110);
        _110 = _17;
        StorageLive(_111);
        _111 = &(*_1);
        _108 = calculate_token_utilization_limits(move _109, move _110, move _111) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_100);
        _100 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb139;
    }

    bb55: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        _107 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _108) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_108);
        _112 = discriminant(_107);
        switchInt(move _112) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_116);
        _116 = ((_107 as Continue).0: (u128, u128));
        _106 = _116;
        StorageDead(_116);
        StorageLive(_104);
        _104 = (_106.0: u128);
        StorageLive(_105);
        _105 = (_106.1: u128);
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _66;
        StorageLive(_119);
        _119 = _105;
        _117 = <u128 as Ord>::min(move _118, move _119) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_113);
        _113 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb142;
    }

    bb60: {
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = ((*_1).19: u64);
        _125 = <u64 as Cast>::cast::<u128>(move _126) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_126);
        _124 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _125) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_125);
        _127 = discriminant(_124);
        switchInt(move _127) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_131);
        _131 = ((_124 as Continue).0: u128);
        _123 = _131;
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = ((*_1).17: u64);
        _134 = <u64 as Cast>::cast::<u128>(move _135) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_128);
        _128 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb137;
    }

    bb66: {
        StorageDead(_135);
        _133 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _134) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_134);
        _136 = discriminant(_133);
        switchInt(move _136) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_140);
        _140 = ((_133 as Continue).0: u128);
        _132 = _140;
        StorageDead(_140);
        _122 = calculate_min_deposit_token_amount(move _123, move _132) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_137);
        _137 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_132);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb136;
    }

    bb71: {
        StorageDead(_132);
        StorageDead(_123);
        _121 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _122) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_122);
        _141 = discriminant(_121);
        switchInt(move _141) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_145);
        _145 = ((_121 as Continue).0: u128);
        _120 = _145;
        StorageDead(_145);
        StorageDead(_133);
        StorageDead(_124);
        StorageDead(_121);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _120;
        StorageLive(_148);
        _148 = _104;
        _146 = <u128 as Ord>::max(move _147, move _148) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_142);
        _142 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_144);
        StorageDead(_142);
        goto -> bb136;
    }

    bb76: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_149);
        _150 = discriminant(_2);
        switchInt(move _150) -> [1: bb77, otherwise: bb92];
    }

    bb77: {
        StorageLive(_151);
        _151 = ((_2 as Some).0: &state::user::User);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &(*_151);
        StorageLive(_156);
        _156 = ((*_1).42: u16);
        _154 = User::get_spot_position_index(move _155, move _156) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_156);
        StorageDead(_155);
        _153 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _154) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_154);
        _157 = discriminant(_153);
        switchInt(move _157) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_161);
        _161 = ((_153 as Continue).0: usize);
        _152 = _161;
        StorageDead(_161);
        StorageDead(_153);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _152;
        _167 = Len(((*_151).3: [state::user::SpotPosition; 8]));
        _168 = Lt(_166, _167);
        assert(move _168, "index out of bounds: the length is {} but the index is {}", move _167, _166) -> [success: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_158);
        _158 = ((_153 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb135;
    }

    bb83: {
        _165 = &((*_151).3: [state::user::SpotPosition; 8])[_166];
        _164 = <SpotPosition as SpotBalance>::balance_type(move _165) -> [return: bb84, unwind continue];
    }

    bb84: {
        _163 = &_164;
        StorageDead(_165);
        StorageLive(_169);
        _297 = const _;
        _169 = &(*_297);
        _162 = <&SpotBalanceType as PartialEq>::eq(move _163, move _169) -> [return: bb85, unwind continue];
    }

    bb85: {
        switchInt(move _162) -> [0: bb90, otherwise: bb86];
    }

    bb86: {
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _17;
        StorageLive(_174);
        _174 = _117;
        _172 = Le(move _173, move _174);
        switchInt(move _172) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_175);
        _175 = _4;
        StorageLive(_176);
        _176 = _146;
        _149 = Ge(move _175, move _176);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_174);
        StorageDead(_173);
        _149 = const false;
        goto -> bb89;
    }

    bb89: {
        StorageDead(_172);
        goto -> bb91;
    }

    bb90: {
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_177);
        _177 = _4;
        StorageLive(_178);
        _178 = _146;
        _149 = Ge(move _177, move _178);
        StorageDead(_178);
        StorageDead(_177);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_162);
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb96;
    }

    bb92: {
        StorageLive(_179);
        StorageLive(_180);
        _180 = _4;
        StorageLive(_181);
        _181 = _146;
        _179 = Ge(move _180, move _181);
        switchInt(move _179) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_182);
        _182 = _17;
        StorageLive(_183);
        _183 = _117;
        _149 = Le(move _182, move _183);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb95;
    }

    bb94: {
        StorageDead(_181);
        StorageDead(_180);
        _149 = const false;
        goto -> bb95;
    }

    bb95: {
        StorageDead(_179);
        goto -> bb96;
    }

    bb96: {
        StorageLive(_184);
        StorageLive(_185);
        _185 = _149;
        switchInt(move _185) -> [0: bb97, otherwise: bb133];
    }

    bb97: {
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _296 = const _;
        _196 = &(*_296);
        _195 = &(*_196);
        _194 = move _195 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_195);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &((*_1).17: u64);
        _203 = &(*_204);
        _202 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _203) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_203);
        _201 = [move _202];
        StorageDead(_202);
        _200 = &_201;
        _199 = &(*_200);
        _198 = move _199 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_199);
        _193 = Arguments::<'_>::new_v1(move _194, move _198) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_198);
        StorageDead(_194);
        _192 = format(move _193) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_193);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_196);
        _191 = move _192;
        StorageDead(_192);
        _190 = &_191;
        _189 = &(*_190);
        _188 = <String as Deref>::deref(move _189) -> [return: bb101, unwind: bb154];
    }

    bb101: {
        _187 = &(*_188);
        StorageDead(_189);
        _186 = solana_program::log::sol_log(move _187) -> [return: bb102, unwind: bb154];
    }

    bb102: {
        StorageDead(_187);
        drop(_191) -> [return: bb103, unwind: bb155];
    }

    bb103: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_186);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _295 = const _;
        _215 = &(*_295);
        _214 = &(*_215);
        _213 = move _214 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_214);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_146;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _222) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_222);
        _220 = [move _221];
        StorageDead(_221);
        _219 = &_220;
        _218 = &(*_219);
        _217 = move _218 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_218);
        _212 = Arguments::<'_>::new_v1(move _213, move _217) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_217);
        StorageDead(_213);
        _211 = format(move _212) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_212);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        _210 = move _211;
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = <String as Deref>::deref(move _208) -> [return: bb107, unwind: bb153];
    }

    bb107: {
        _206 = &(*_207);
        StorageDead(_208);
        _205 = solana_program::log::sol_log(move _206) -> [return: bb108, unwind: bb153];
    }

    bb108: {
        StorageDead(_206);
        drop(_210) -> [return: bb109, unwind: bb155];
    }

    bb109: {
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_205);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _294 = const _;
        _234 = &(*_294);
        _233 = &(*_234);
        _232 = move _233 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_4;
        _241 = &(*_242);
        _240 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _241) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_241);
        _239 = [move _240];
        StorageDead(_240);
        _238 = &_239;
        _237 = &(*_238);
        _236 = move _237 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_237);
        _231 = Arguments::<'_>::new_v1(move _232, move _236) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_236);
        StorageDead(_232);
        _230 = format(move _231) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_231);
        StorageDead(_242);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_234);
        _229 = move _230;
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = <String as Deref>::deref(move _227) -> [return: bb113, unwind: bb152];
    }

    bb113: {
        _225 = &(*_226);
        StorageDead(_227);
        _224 = solana_program::log::sol_log(move _225) -> [return: bb114, unwind: bb152];
    }

    bb114: {
        StorageDead(_225);
        drop(_229) -> [return: bb115, unwind: bb155];
    }

    bb115: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _293 = const _;
        _253 = &(*_293);
        _252 = &(*_253);
        _251 = move _252 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_252);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_117;
        _260 = &(*_261);
        _259 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _260) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_260);
        _258 = [move _259];
        StorageDead(_259);
        _257 = &_258;
        _256 = &(*_257);
        _255 = move _256 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_256);
        _250 = Arguments::<'_>::new_v1(move _251, move _255) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_255);
        StorageDead(_251);
        _249 = format(move _250) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_250);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_253);
        _248 = move _249;
        StorageDead(_249);
        _247 = &_248;
        _246 = &(*_247);
        _245 = <String as Deref>::deref(move _246) -> [return: bb119, unwind: bb151];
    }

    bb119: {
        _244 = &(*_245);
        StorageDead(_246);
        _243 = solana_program::log::sol_log(move _244) -> [return: bb120, unwind: bb151];
    }

    bb120: {
        StorageDead(_244);
        drop(_248) -> [return: bb121, unwind: bb155];
    }

    bb121: {
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_243);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _292 = const _;
        _272 = &(*_292);
        _271 = &(*_272);
        _270 = move _271 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_271);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_17;
        _279 = &(*_280);
        _278 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _279) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_279);
        _277 = [move _278];
        StorageDead(_278);
        _276 = &_277;
        _275 = &(*_276);
        _274 = move _275 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_275);
        _269 = Arguments::<'_>::new_v1(move _270, move _274) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_274);
        StorageDead(_270);
        _268 = format(move _269) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_269);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_272);
        _267 = move _268;
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = <String as Deref>::deref(move _265) -> [return: bb125, unwind: bb150];
    }

    bb125: {
        _263 = &(*_264);
        StorageDead(_265);
        _262 = solana_program::log::sol_log(move _263) -> [return: bb126, unwind: bb150];
    }

    bb126: {
        StorageDead(_263);
        drop(_267) -> [return: bb127, unwind: bb155];
    }

    bb127: {
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_262);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &(*_1);
        StorageLive(_284);
        _284 = _2;
        StorageLive(_285);
        _285 = _3;
        _282 = check_user_exception_to_withdraw_limits(move _283, move _284, move _285) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_283);
        _281 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _282) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_282);
        _286 = discriminant(_281);
        switchInt(move _286) -> [0: bb130, 1: bb131, otherwise: bb4];
    }

    bb130: {
        StorageLive(_290);
        _290 = ((_281 as Continue).0: bool);
        _184 = _290;
        StorageDead(_290);
        StorageDead(_281);
        goto -> bb134;
    }

    bb131: {
        StorageLive(_287);
        _287 = ((_281 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_289);
        _289 = _287;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _289) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_289);
        StorageDead(_287);
        StorageDead(_281);
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb135;
    }

    bb133: {
        _184 = const true;
        goto -> bb134;
    }

    bb134: {
        StorageDead(_185);
        StorageLive(_291);
        _291 = _184;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _291);
        StorageDead(_291);
        StorageDead(_184);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_66);
        StorageDead(_30);
        StorageDead(_17);
        StorageDead(_4);
        goto -> bb149;
    }

    bb135: {
        StorageDead(_149);
        StorageDead(_146);
        goto -> bb138;
    }

    bb136: {
        StorageDead(_133);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_124);
        StorageDead(_121);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb142;
    }

    bb139: {
        StorageDead(_89);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_80);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_71);
        StorageDead(_67);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_66);
        goto -> bb146;
    }

    bb143: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_30);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_17);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_4);
        goto -> bb149;
    }

    bb149: {
        return;
    }

    bb150 (cleanup): {
        drop(_267) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_248) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_229) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_210) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_191) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        resume;
    }
}
