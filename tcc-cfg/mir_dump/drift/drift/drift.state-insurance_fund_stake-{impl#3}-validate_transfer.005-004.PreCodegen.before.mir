// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:109:1: 109:36>::validate_transfer` before PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:109:1: 109:36>::validate_transfer(_1: &ProtocolIfSharesTransferConfig, _2: u128) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug requested_transfer => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: u128;
    let mut _4: u128;
    let mut _5: u128;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: bool;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: ();
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &error::ErrorCode;
    let _32: &error::ErrorCode;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: &std::string::String;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[&str; 2];
    let _43: &[&str; 2];
    let _44: [&str; 2];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let mut _46: &[core::fmt::rt::Argument<'_>; 2];
    let _47: &[core::fmt::rt::Argument<'_>; 2];
    let _48: [core::fmt::rt::Argument<'_>; 2];
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &u128;
    let _51: &u128;
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &u128;
    let _54: &u128;
    let mut _55: error::ErrorCode;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: ();
    scope 1 {
        debug max_transfer => _3;
        let _13: error::ErrorCode;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: ();
        scope 2 {
            debug error_code => _13;
            let _20: std::string::String;
            let _39: std::string::String;
            let mut _62: &[&str; 2];
            let mut _63: &[&str; 2];
            scope 3 {
                debug res => _20;
            }
            scope 4 {
                debug res => _39;
            }
        }
        scope 5 {
            debug residual => _57;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _60;
            scope 8 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).1: u128);
        StorageLive(_5);
        _5 = ((*_1).2: u128);
        _3 = core::num::<impl u128>::saturating_sub(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _3;
        _9 = Lt(move _10, move _11);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        _12 = ();
        _8 = std::result::Result::<(), error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        goto -> bb17;
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_13);
        _13 = error::ErrorCode::DefaultError;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _63 = const _;
        _24 = &(*_63);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _31) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_31);
        _29 = [move _30];
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_15);
        drop(_19) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _62 = const _;
        _43 = &(*_62);
        _42 = &(*_43);
        _41 = move _42 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_2;
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _50) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_3;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _53) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_53);
        _48 = [move _49, move _52];
        StorageDead(_52);
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = move _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_46);
        _40 = Arguments::<'_>::new_v1(move _41, move _45) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_45);
        StorageDead(_41);
        _39 = format(move _40) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_40);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_43);
        _38 = move _39;
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = <String as Deref>::deref(move _36) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _34 = &(*_35);
        StorageDead(_36);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        StorageDead(_34);
        drop(_38) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_55);
        _55 = _13;
        _8 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        StorageDead(_13);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_8);
        _56 = discriminant(_7);
        switchInt(move _56) -> [0: bb19, 1: bb21, otherwise: bb20];
    }

    bb19: {
        StorageLive(_60);
        _60 = ((_7 as Continue).0: ());
        _6 = _60;
        StorageDead(_60);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_61);
        _61 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        StorageDead(_3);
        goto -> bb23;
    }

    bb20: {
        unreachable;
    }

    bb21: {
        StorageLive(_57);
        _57 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_38) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_19) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }
}
