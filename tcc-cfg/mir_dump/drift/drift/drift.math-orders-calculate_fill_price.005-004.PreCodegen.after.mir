// MIR for `math::orders::calculate_fill_price` after PreCodegen

fn math::orders::calculate_fill_price(_1: u64, _2: u64, _3: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug quote_asset_amount => _1;
    debug base_asset_amount => _2;
    debug base_precision => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _12: std::result::Result<u128, error::ErrorCode>;
    let mut _13: u64;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: u128;
    let mut _19: u128;
    let mut _20: u64;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u128;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: u128;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _39: u128;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _31;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _34;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _36;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _39;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _1;
        _12 = <u64 as Cast>::cast::<u128>(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        _11 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_11 as Continue).0: u128);
        _10 = _18;
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _3;
        _19 = move _20 as u128 (IntToInt);
        StorageDead(_20);
        _9 = <u128 as SafeMath>::safe_mul(move _10, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb24;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_9);
        _21 = discriminant(_8);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_8 as Continue).0: u128);
        _7 = _25;
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _2;
        _28 = <u64 as Cast>::cast::<u128>(move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb24;
    }

    bb12: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        _6 = <u128 as SafeMath>::safe_div(move _7, move _26) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb23;
    }

    bb17: {
        StorageDead(_26);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_6);
        _35 = discriminant(_5);
        switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_5 as Continue).0: u128);
        _4 = _39;
        StorageDead(_39);
        _0 = <u128 as Cast>::cast::<u64>(move _4) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_36);
        _36 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_4);
        StorageDead(_27);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb26;
    }

    bb23: {
        StorageDead(_4);
        StorageDead(_27);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb26;
    }

    bb26: {
        return;
    }
}
