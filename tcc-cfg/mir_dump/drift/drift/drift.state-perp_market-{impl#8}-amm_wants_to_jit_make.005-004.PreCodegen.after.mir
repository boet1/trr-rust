// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::amm_wants_to_jit_make` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::amm_wants_to_jit_make(_1: &AMM, _2: controller::position::PositionDirection) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug taker_direction => _2;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _3: bool;
    let mut _4: isize;
    let mut _5: i128;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i128;
    let mut _16: bool;
    let mut _17: i128;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: u64;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: i128;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &state::perp_market::AMM;
    scope 1 {
        debug amm_wants_to_jit_make => _3;
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_17);
        _17 = ((*_1).15: i128);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).52: u64);
        _20 = <u64 as Cast>::cast::<i128>(move _21) -> [return: bb10, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_5);
        _5 = ((*_1).15: i128);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).52: u64);
        _9 = <u64 as Cast>::cast::<i128>(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: i128);
        _7 = _15;
        StorageDead(_15);
        _16 = Eq(_7, const i128::MIN);
        assert(!move _16, "attempt to negate `{}`, which would overflow", _7) -> [success: bb9, unwind continue];
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_8);
        goto -> bb20;
    }

    bb9: {
        _6 = Neg(move _7);
        StorageDead(_7);
        _3 = Lt(move _5, move _6);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_8);
        goto -> bb15;
    }

    bb10: {
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: i128);
        _18 = _26;
        StorageDead(_26);
        _3 = Gt(move _17, move _18);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_19);
        goto -> bb15;
    }

    bb13: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_19);
        goto -> bb20;
    }

    bb15: {
        StorageLive(_27);
        StorageLive(_28);
        _28 = _3;
        switchInt(move _28) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageLive(_29);
        _29 = &(*_1);
        _27 = AMM::amm_jit_is_active(move _29) -> [return: bb18, unwind continue];
    }

    bb17: {
        _27 = const false;
        goto -> bb19;
    }

    bb18: {
        StorageDead(_29);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_28);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        StorageDead(_3);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_3);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
