digraph Mir_0_4295 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn User::force_get_perp_position_mut(_1: &amp;ReErased mut state::user::User, _2: u16) -&gt; std::result::Result&lt;&amp;ReErased mut state::user::PerpPosition, error::ErrorCode&gt;<br align="left"/>let _3: usize;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _5: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _6: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _8: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _9: u16;<br align="left"/>let mut _10: Closure(DefId(0:4296 ~ drift[d311]::state::user::{impl#1}::force_get_perp_position_mut::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((error::ErrorCode,)) -&gt; std::result::Result&lt;usize, error::ErrorCode&gt;, []), (&amp;ReErased mut &amp;ReErased mut state::user::User, &amp;ReErased u16)]);<br align="left"/>let mut _11: &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let mut _12: &amp;ReErased u16;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _19: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug position_index =&gt; _3;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>>;
    bb0__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_7 = &amp;(*_8)<br/>StorageLive(_9)<br/>_9 = _2<br/></td></tr><tr><td align="left">_6 = get_position_index(move _7, move _9)</td></tr></table>>];
    bb1__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;mut _1<br/>StorageLive(_12)<br/>_12 = &amp;_2<br/>_10 = {closure@programs/drift/src/state/user.rs:256:22: 256:25} { self: move _11, market_index: move _12 }<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_5 = std::result::Result::&lt;usize, error::ErrorCode&gt;::or_else::&lt;error::ErrorCode, {closure@programs/drift/src/state/user.rs:256:22: 256:25}&gt;(move _6, move _10)</td></tr></table>>];
    bb2__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb3__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_13 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb4__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_4 as Continue).0: usize)<br/>_3 = _17<br/>StorageDead(_17)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _3<br/>_21 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb5__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;&amp;mut PerpPosition, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb7__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_19 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_20]<br/>_18 = &amp;mut (*_19)<br/>_0 = std::result::Result::&lt;&amp;mut PerpPosition, error::ErrorCode&gt;::Ok(move _18)<br/>StorageDead(_18)<br/>StorageDead(_3)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_4295 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4295 -> bb1__0_4295 [label="return"];
    bb1__0_4295 -> bb2__0_4295 [label="return"];
    bb2__0_4295 -> bb3__0_4295 [label="return"];
    bb3__0_4295 -> bb4__0_4295 [label="0"];
    bb3__0_4295 -> bb6__0_4295 [label="1"];
    bb3__0_4295 -> bb5__0_4295 [label="otherwise"];
    bb4__0_4295 -> bb8__0_4295 [label="success"];
    bb6__0_4295 -> bb7__0_4295 [label="return"];
    bb7__0_4295 -> bb9__0_4295 [label=""];
    bb8__0_4295 -> bb9__0_4295 [label=""];
}
