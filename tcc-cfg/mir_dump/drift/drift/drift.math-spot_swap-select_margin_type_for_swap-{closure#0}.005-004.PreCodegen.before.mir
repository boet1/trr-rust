// MIR for `select_margin_type_for_swap::{closure#0}` before PreCodegen

fn select_margin_type_for_swap::{closure#0}(_1: &{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91}, _2: &SpotMarket, _3: &StrictOraclePrice, _4: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug market => _2;
    debug strict_oracle_price => _3;
    debug token_amount => _4;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _5: i128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _7: std::result::Result<i128, error::ErrorCode>;
    let mut _8: i128;
    let mut _9: u32;
    let mut _10: &state::oracle::StrictOraclePrice;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i128;
    let mut _17: bool;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _20: std::result::Result<u32, error::ErrorCode>;
    let mut _21: &state::spot_market::SpotMarket;
    let mut _22: u128;
    let mut _23: i128;
    let mut _24: i64;
    let mut _25: &math::margin::MarginRequirementType;
    let _26: &math::margin::MarginRequirementType;
    let _27: math::margin::MarginRequirementType;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _34: std::result::Result<u32, error::ErrorCode>;
    let mut _35: &state::spot_market::SpotMarket;
    let mut _36: u128;
    let mut _37: i128;
    let mut _38: &math::margin::MarginRequirementType;
    let _39: &math::margin::MarginRequirementType;
    let _40: math::margin::MarginRequirementType;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: i128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _48: std::result::Result<i128, error::ErrorCode>;
    let mut _49: i128;
    let mut _50: i128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _52: std::result::Result<i128, error::ErrorCode>;
    let mut _53: u32;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: i128;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _66: std::result::Result<i128, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug token_value => _5;
        let _16: u32;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: u32;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: u32;
        let mut _72: &math::margin::MarginRequirementType;
        let mut _73: &math::margin::MarginRequirementType;
        scope 6 {
            debug weight => _16;
            let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _58: i128;
            let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _63: i128;
            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _71: i128;
            scope 15 {
                debug residual => _55;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _58;
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _60;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _63;
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _68;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _71;
                scope 26 {
                }
            }
        }
        scope 7 {
            debug residual => _29;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _32;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _42;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _45;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        StorageLive(_9);
        _9 = ((*_2).41: u32);
        StorageLive(_10);
        _10 = &(*_3);
        _7 = get_strict_token_value(move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: i128);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _4;
        _17 = Ge(move _18, const 0_i128);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        goto -> bb41;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_2);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _4;
        _22 = core::num::<impl i128>::unsigned_abs(move _23) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_2);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _4;
        _36 = core::num::<impl i128>::unsigned_abs(move _37) -> [return: bb15, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_24);
        _24 = ((*_3).0: i64);
        StorageLive(_25);
        StorageLive(_26);
        _72 = const _;
        _26 = &(*_72);
        _25 = &(*_26);
        _20 = SpotMarket::get_asset_weight(move _21, move _22, move _24, move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        _28 = discriminant(_19);
        switchInt(move _28) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_32);
        _32 = ((_19 as Continue).0: u32);
        _16 = _32;
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_19);
        goto -> bb21;
    }

    bb13: {
        StorageLive(_29);
        _29 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_19);
        goto -> bb40;
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _73 = const _;
        _39 = &(*_73);
        _38 = &(*_39);
        _34 = SpotMarket::get_liability_weight(move _35, move _36, move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        _41 = discriminant(_33);
        switchInt(move _41) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_33 as Continue).0: u32);
        _16 = _45;
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_33);
        goto -> bb21;
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_33);
        goto -> bb40;
    }

    bb21: {
        StorageDead(_17);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _5;
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _16;
        _52 = <u32 as Cast>::cast::<i128>(move _53) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_53);
        _51 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_58);
        _58 = ((_51 as Continue).0: i128);
        _50 = _58;
        StorageDead(_58);
        _48 = <i128 as SafeMath>::safe_mul(move _49, move _50) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_55);
        _55 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb38;
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_48);
        _59 = discriminant(_47);
        switchInt(move _59) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_47 as Continue).0: i128);
        _46 = _63;
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_60);
        goto -> bb38;
    }

    bb32: {
        _65 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _66) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_66);
        _67 = discriminant(_65);
        switchInt(move _67) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_71);
        _71 = ((_65 as Continue).0: i128);
        _64 = _71;
        StorageDead(_71);
        _0 = <i128 as SafeMath>::safe_div(move _46, move _64) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_46);
        StorageDead(_16);
        StorageDead(_5);
        StorageDead(_65);
        goto -> bb39;
    }

    bb37: {
        StorageDead(_64);
        StorageDead(_46);
        StorageDead(_16);
        StorageDead(_5);
        StorageDead(_65);
        StorageDead(_51);
        StorageDead(_47);
        goto -> bb42;
    }

    bb38: {
        StorageDead(_46);
        StorageDead(_16);
        StorageDead(_5);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_51);
        StorageDead(_47);
        goto -> bb42;
    }

    bb40: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_5);
        goto -> bb42;
    }

    bb42: {
        return;
    }
}
