// MIR for `estimate_price_from_side` after PreCodegen

fn estimate_price_from_side(_1: &Vec<Level>, _2: u64) -> std::result::Result<Option<u64>, error::ErrorCode> {
    debug side => _1;
    debug depth => _2;
    let mut _0: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _3: u64;
    let _6: ();
    let mut _7: std::slice::Iter<'_, math::orders::Level>;
    let mut _8: &std::vec::Vec<math::orders::Level>;
    let mut _10: ();
    let _11: ();
    let mut _12: std::option::Option<&math::orders::Level>;
    let mut _13: &mut std::slice::Iter<'_, math::orders::Level>;
    let mut _14: &mut std::slice::Iter<'_, math::orders::Level>;
    let mut _15: isize;
    let mut _16: !;
    let mut _19: u64;
    let mut _20: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _23: std::result::Result<u128, error::ErrorCode>;
    let mut _24: u128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _26: std::result::Result<u128, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: u128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _35: std::result::Result<u128, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: u64;
    let mut _51: u64;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _59: std::result::Result<u64, error::ErrorCode>;
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: u128;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _69: std::result::Result<u128, error::ErrorCode>;
    let mut _70: u128;
    let mut _71: u128;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: bool;
    let mut _78: u64;
    let mut _79: !;
    let mut _81: bool;
    let mut _82: u64;
    let mut _83: u64;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _85: std::result::Result<u64, error::ErrorCode>;
    let mut _86: u128;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _88: std::result::Result<u128, error::ErrorCode>;
    let mut _89: u128;
    let mut _90: u128;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _92: std::result::Result<u128, error::ErrorCode>;
    let mut _93: u64;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: std::option::Option<u64>;
    scope 1 {
        debug depth_remaining => _3;
        let mut _4: u64;
        scope 2 {
            debug cumulative_base => _4;
            let mut _5: u128;
            scope 3 {
                debug cumulative_quote => _5;
                let mut _9: std::slice::Iter<'_, math::orders::Level>;
                let _80: std::option::Option<u64>;
                let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _98: u128;
                let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _103: u128;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: u64;
                scope 4 {
                    debug iter => _9;
                    let _17: &math::orders::Level;
                    scope 5 {
                        debug level => _17;
                        let _18: u64;
                        scope 6 {
                            debug base_delta => _18;
                            let _21: u128;
                            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _32: u128;
                            let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _41: u128;
                            let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _46: u128;
                            scope 7 {
                                debug quote_delta => _21;
                                let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _56: u64;
                                let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _66: u64;
                                let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _76: u128;
                                scope 20 {
                                    debug residual => _53;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _56;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug residual => _63;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => _66;
                                    scope 27 {
                                    }
                                }
                                scope 28 {
                                    debug residual => _73;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _76;
                                    scope 31 {
                                    }
                                }
                            }
                            scope 8 {
                                debug residual => _29;
                                scope 9 {
                                }
                            }
                            scope 10 {
                                debug val => _32;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug residual => _38;
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug val => _41;
                                scope 15 {
                                }
                            }
                            scope 16 {
                                debug residual => _43;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _46;
                                scope 19 {
                                }
                            }
                        }
                    }
                }
                scope 32 {
                    debug price => _80;
                }
                scope 33 {
                    debug residual => _95;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _98;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _100;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _103;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug residual => _105;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _108;
                    scope 44 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = _2;
        StorageLive(_4);
        _4 = const 0_u64;
        StorageLive(_5);
        _5 = const 0_u128;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = <&Vec<Level> as IntoIterator>::into_iter(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = move _7;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _9;
        _13 = &mut (*_14);
        _12 = <std::slice::Iter<'_, Level> as Iterator>::next(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_12 as Some).0: &math::orders::Level);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_17).1: u64);
        StorageLive(_20);
        _20 = _3;
        _18 = <u64 as Ord>::min(move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _6 = const ();
        goto -> bb40;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_17).0: u64);
        _26 = <u64 as Cast>::cast::<u128>(move _27) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_27);
        _25 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: u128);
        _24 = _32;
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _18;
        _35 = <u64 as Cast>::cast::<u128>(move _36) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb62;
    }

    bb13: {
        StorageDead(_36);
        _34 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: u128);
        _33 = _41;
        StorageDead(_41);
        _23 = <u128 as SafeMath>::safe_mul(move _24, move _33) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb61;
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_24);
        _22 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_23);
        _42 = discriminant(_22);
        switchInt(move _42) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_22 as Continue).0: u128);
        _21 = _46;
        StorageDead(_46);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _4;
        StorageLive(_51);
        _51 = _18;
        _49 = <u64 as SafeMath>::safe_add(move _50, move _51) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_43);
        _43 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb61;
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_49);
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_48 as Continue).0: u64);
        _47 = _56;
        StorageDead(_56);
        _4 = move _47;
        StorageDead(_47);
        StorageDead(_48);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _3;
        StorageLive(_61);
        _61 = _18;
        _59 = <u64 as SafeMath>::safe_sub(move _60, move _61) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_47);
        StorageDead(_48);
        goto -> bb63;
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _59) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: u64);
        _57 = _66;
        StorageDead(_66);
        _3 = move _57;
        StorageDead(_57);
        StorageDead(_58);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _5;
        StorageLive(_71);
        _71 = _21;
        _69 = <u128 as SafeMath>::safe_add(move _70, move _71) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_57);
        StorageDead(_58);
        goto -> bb63;
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _69) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: u128);
        _67 = _76;
        StorageDead(_76);
        _5 = move _67;
        StorageDead(_67);
        StorageDead(_68);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _3;
        _77 = Eq(move _78, const 0_u64);
        switchInt(move _77) -> [0: bb39, otherwise: bb38];
    }

    bb36: {
        StorageLive(_73);
        _73 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_68);
        goto -> bb63;
    }

    bb38: {
        StorageDead(_78);
        _6 = const ();
        StorageDead(_77);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_78);
        _11 = const ();
        StorageDead(_77);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _10 = const ();
        goto -> bb2;
    }

    bb40: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _3;
        _81 = Eq(move _82, const 0_u64);
        switchInt(move _81) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _5;
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _4;
        _92 = <u64 as Cast>::cast::<u128>(move _93) -> [return: bb43, unwind continue];
    }

    bb42: {
        StorageDead(_82);
        _80 = Option::<u64>::None;
        goto -> bb58;
    }

    bb43: {
        StorageDead(_93);
        _91 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _92) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_92);
        _94 = discriminant(_91);
        switchInt(move _94) -> [0: bb45, 1: bb46, otherwise: bb5];
    }

    bb45: {
        StorageLive(_98);
        _98 = ((_91 as Continue).0: u128);
        _90 = _98;
        StorageDead(_98);
        _88 = <u128 as SafeMath>::safe_div(move _89, move _90) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_95);
        _95 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb59;
    }

    bb48: {
        StorageDead(_90);
        StorageDead(_89);
        _87 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _88) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_88);
        _99 = discriminant(_87);
        switchInt(move _99) -> [0: bb50, 1: bb51, otherwise: bb5];
    }

    bb50: {
        StorageLive(_103);
        _103 = ((_87 as Continue).0: u128);
        _86 = _103;
        StorageDead(_103);
        _85 = <u128 as Cast>::cast::<u64>(move _86) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_100);
        _100 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb59;
    }

    bb53: {
        StorageDead(_86);
        _84 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_85);
        _104 = discriminant(_84);
        switchInt(move _104) -> [0: bb55, 1: bb56, otherwise: bb5];
    }

    bb55: {
        StorageLive(_108);
        _108 = ((_84 as Continue).0: u64);
        _83 = _108;
        StorageDead(_108);
        _80 = Option::<u64>::Some(move _83);
        StorageDead(_83);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb58;
    }

    bb56: {
        StorageLive(_105);
        _105 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_107);
        StorageDead(_105);
        goto -> bb60;
    }

    bb58: {
        StorageDead(_81);
        StorageLive(_109);
        _109 = _80;
        _0 = std::result::Result::<Option<u64>, error::ErrorCode>::Ok(move _109);
        StorageDead(_109);
        StorageDead(_80);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb65;
    }

    bb59: {
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_83);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb64;
    }

    bb61: {
        StorageDead(_34);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb65;
    }

    bb65: {
        return;
    }
}
