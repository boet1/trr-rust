// MIR for `keeper::handle_update_user_fuel_bonus` after PreCodegen

fn keeper::handle_update_user_fuel_bonus(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateUserFuelBonus<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let mut _12: std::cell::RefMut<'_, state::user::User>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: std::cell::RefMut<'_, state::user::User>;
    let mut _24: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _26: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _27: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _28: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _29: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _37: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _47: instructions::optional_accounts::AccountMaps<'_>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _49: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _50: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _51: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _52: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _53: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _54: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _55: &std::collections::BTreeSet<u16>;
    let _56: &std::collections::BTreeSet<u16>;
    let _57: std::collections::BTreeSet<u16>;
    let mut _58: &std::collections::BTreeSet<u16>;
    let _59: &std::collections::BTreeSet<u16>;
    let _60: std::collections::BTreeSet<u16>;
    let mut _61: u64;
    let mut _62: std::option::Option<state::state::OracleGuardRails>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _70: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _71: &state::user::User;
    let _72: &state::user::User;
    let mut _73: &std::cell::RefMut<'_, state::user::User>;
    let _74: &std::cell::RefMut<'_, state::user::User>;
    let mut _75: &state::perp_market_map::PerpMarketMap<'_>;
    let _76: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _77: &state::spot_market_map::SpotMarketMap<'_>;
    let _78: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _79: &mut state::oracle_map::OracleMap<'_>;
    let mut _80: &mut state::oracle_map::OracleMap<'_>;
    let mut _81: state::margin_calculation::MarginContext;
    let mut _82: state::margin_calculation::MarginContext;
    let mut _83: math::margin::MarginRequirementType;
    let mut _84: &state::user::User;
    let _85: &state::user::User;
    let mut _86: &std::cell::RefMut<'_, state::user::User>;
    let _87: &std::cell::RefMut<'_, state::user::User>;
    let mut _88: i64;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _94: ();
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _96: std::result::Result<(), error::ErrorCode>;
    let mut _97: &mut state::user::UserStats;
    let mut _98: &mut state::user::UserStats;
    let mut _99: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _100: &mut state::user::User;
    let mut _101: &mut state::user::User;
    let mut _102: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _103: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _104: u32;
    let mut _105: u32;
    let mut _106: u32;
    let mut _107: i64;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: ();
    let mut _114: &mut instructions::keeper::UpdateUserFuelBonus<'_>;
    let mut _115: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _116: &mut instructions::keeper::UpdateUserFuelBonus<'_>;
    let mut _117: &mut instructions::keeper::UpdateUserFuelBonus<'_>;
    let mut _118: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug user => _12;
        let _23: &mut std::cell::RefMut<'_, state::user::UserStats>;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: std::cell::RefMut<'_, state::user::UserStats>;
        scope 10 {
            debug user_stats => _23;
            let _35: anchor_lang::prelude::Clock;
            let _39: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _42: anchor_lang::prelude::Clock;
            scope 15 {
                debug clock => _35;
                let _43: i64;
                scope 20 {
                    debug now => _43;
                    let _44: state::perp_market_map::PerpMarketMap<'_>;
                    let _45: state::spot_market_map::SpotMarketMap<'_>;
                    let mut _46: state::oracle_map::OracleMap<'_>;
                    let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _67: instructions::optional_accounts::AccountMaps<'_>;
                    scope 21 {
                        debug perp_market_map => _44;
                        debug spot_market_map => _45;
                        debug oracle_map => _46;
                        let _68: state::margin_calculation::MarginCalculation;
                        let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _93: state::margin_calculation::MarginCalculation;
                        scope 26 {
                            debug user_margin_calculation => _68;
                            let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _112: ();
                            scope 31 {
                                debug residual => _109;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _112;
                                scope 34 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _90;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _93;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _64;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _67;
                        scope 25 {
                        }
                    }
                }
            }
            scope 16 {
                debug residual => _39;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _42;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _114 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserFuelBonus<'_>);
        _6 = &((*_114).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _115 = deref_copy (*_6);
        _145 = (((_115.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_145);
        _4 = constraints::exchange_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb75];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _119 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _116 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserFuelBonus<'_>);
        _16 = &((*_116).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb80];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _137 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb66;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _14 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _15, move _17) -> [return: bb8, unwind: bb75];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb9, unwind: bb75];
    }

    bb9: {
        StorageDead(_14);
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _12 = move _22;
        StorageDead(_22);
        _123 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _117 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserFuelBonus<'_>);
        _28 = &((*_117).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _27 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _28) -> [return: bb13, unwind: bb74];
    }

    bb11: {
        StorageLive(_19);
        _19 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb12, unwind: bb79];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _121 = discriminant(_13);
        StorageDead(_13);
        goto -> bb65;
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _26 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _27, move _29) -> [return: bb14, unwind: bb74];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_27);
        _25 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _26) -> [return: bb15, unwind: bb74];
    }

    bb15: {
        StorageDead(_26);
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_34);
        _34 = move ((_25 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _24 = move _34;
        StorageDead(_34);
        _23 = &mut _24;
        _127 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb19, unwind: bb73];
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb18, unwind: bb78];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        _125 = discriminant(_25);
        StorageDead(_25);
        goto -> bb64;
    }

    bb19: {
        _36 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _37) -> [return: bb20, unwind: bb73];
    }

    bb20: {
        StorageDead(_37);
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_42);
        _42 = move ((_36 as Continue).0: anchor_lang::prelude::Clock);
        _35 = move _42;
        StorageDead(_42);
        _129 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_43);
        _43 = (_35.4: i64);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _118 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _54 = &(*_118);
        _53 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _54) -> [return: bb24, unwind: bb73];
    }

    bb22: {
        StorageLive(_39);
        _39 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _41) -> [return: bb23, unwind: bb77];
    }

    bb23: {
        StorageDead(_41);
        StorageDead(_39);
        _135 = discriminant(_36);
        StorageDead(_36);
        goto -> bb63;
    }

    bb24: {
        StorageDead(_54);
        _52 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _53) -> [return: bb25, unwind: bb73];
    }

    bb25: {
        StorageDead(_53);
        _51 = &mut _52;
        _50 = &mut (*_51);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = BTreeSet::<u16>::new() -> [return: bb26, unwind: bb73];
    }

    bb26: {
        _56 = &_57;
        _55 = &(*_56);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = BTreeSet::<u16>::new() -> [return: bb27, unwind: bb72];
    }

    bb27: {
        _59 = &_60;
        _58 = &(*_59);
        StorageLive(_61);
        _61 = (_35.0: u64);
        StorageLive(_62);
        _62 = Option::<state::state::OracleGuardRails>::None;
        _49 = load_maps(move _50, move _55, move _58, move _61, move _62) -> [return: bb28, unwind: bb71];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_50);
        _48 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _49) -> [return: bb29, unwind: bb71];
    }

    bb29: {
        StorageDead(_49);
        _63 = discriminant(_48);
        switchInt(move _63) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_67);
        _67 = move ((_48 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _47 = move _67;
        StorageDead(_67);
        StorageLive(_44);
        _44 = move (_47.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_45);
        _45 = move (_47.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_46);
        _46 = move (_47.2: state::oracle_map::OracleMap<'_>);
        _133 = discriminant(_48);
        drop(_60) -> [return: bb33, unwind: bb67];
    }

    bb31: {
        StorageLive(_64);
        _64 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb32, unwind: bb76];
    }

    bb32: {
        StorageDead(_66);
        StorageDead(_64);
        _131 = discriminant(_48);
        drop(_60) -> [return: bb60, unwind: bb72];
    }

    bb33: {
        StorageDead(_60);
        StorageDead(_59);
        drop(_57) -> [return: bb34, unwind: bb68];
    }

    bb34: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_12;
        _73 = &(*_74);
        _72 = <RefMut<'_, User> as Deref>::deref(move _73) -> [return: bb35, unwind: bb68];
    }

    bb35: {
        _71 = &(*_72);
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_44;
        _75 = &(*_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_45;
        _77 = &(*_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut _46;
        _79 = &mut (*_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = math::margin::MarginRequirementType::Initial;
        _82 = MarginContext::standard(move _83) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_12;
        _86 = &(*_87);
        _85 = <RefMut<'_, User> as Deref>::deref(move _86) -> [return: bb37, unwind: bb68];
    }

    bb37: {
        _84 = &(*_85);
        StorageDead(_86);
        StorageLive(_88);
        _88 = _43;
        _81 = MarginContext::fuel_numerator(move _82, move _84, move _88) -> [return: bb38, unwind: bb68];
    }

    bb38: {
        StorageDead(_88);
        StorageDead(_84);
        StorageDead(_82);
        _70 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _71, move _75, move _77, move _79, move _81) -> [return: bb39, unwind: bb68];
    }

    bb39: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_71);
        _69 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _70) -> [return: bb40, unwind: bb68];
    }

    bb40: {
        StorageDead(_70);
        _89 = discriminant(_69);
        switchInt(move _89) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_93);
        _93 = ((_69 as Continue).0: state::margin_calculation::MarginCalculation);
        _68 = _93;
        StorageDead(_93);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &mut (*_23);
        _98 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _99) -> [return: bb44, unwind: bb68];
    }

    bb42: {
        StorageLive(_90);
        _90 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb43, unwind: bb68];
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        goto -> bb56;
    }

    bb44: {
        _97 = &mut (*_98);
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &mut _12;
        _102 = &mut (*_103);
        _101 = <RefMut<'_, User> as DerefMut>::deref_mut(move _102) -> [return: bb45, unwind: bb68];
    }

    bb45: {
        _100 = &mut (*_101);
        StorageDead(_102);
        StorageLive(_104);
        _104 = (_68.17: u32);
        StorageLive(_105);
        _105 = (_68.18: u32);
        StorageLive(_106);
        _106 = (_68.19: u32);
        StorageLive(_107);
        _107 = _43;
        _96 = UserStats::update_fuel_bonus(move _97, move _100, move _104, move _105, move _106, move _107) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_97);
        _95 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _96) -> [return: bb47, unwind: bb68];
    }

    bb47: {
        StorageDead(_96);
        _108 = discriminant(_95);
        switchInt(move _108) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_112);
        _112 = ((_95 as Continue).0: ());
        _94 = _112;
        StorageDead(_112);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_113);
        _113 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _113);
        StorageDead(_113);
        StorageDead(_68);
        drop(_46) -> [return: bb51, unwind: bb69];
    }

    bb49: {
        StorageLive(_109);
        _109 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb56;
    }

    bb51: {
        StorageDead(_46);
        drop(_45) -> [return: bb52, unwind: bb70];
    }

    bb52: {
        StorageDead(_45);
        drop(_44) -> [return: bb53, unwind: bb73];
    }

    bb53: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_35);
        drop(_24) -> [return: bb54, unwind: bb74];
    }

    bb54: {
        StorageDead(_24);
        StorageDead(_23);
        drop(_12) -> [return: bb55, unwind: bb75];
    }

    bb55: {
        StorageDead(_12);
        goto -> bb66;
    }

    bb56: {
        StorageDead(_68);
        drop(_46) -> [return: bb57, unwind: bb69];
    }

    bb57: {
        StorageDead(_46);
        drop(_45) -> [return: bb58, unwind: bb70];
    }

    bb58: {
        StorageDead(_45);
        drop(_44) -> [return: bb59, unwind: bb73];
    }

    bb59: {
        StorageDead(_44);
        goto -> bb62;
    }

    bb60: {
        StorageDead(_60);
        StorageDead(_59);
        drop(_57) -> [return: bb61, unwind: bb73];
    }

    bb61: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_43);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_35);
        drop(_24) -> [return: bb64, unwind: bb74];
    }

    bb64: {
        StorageDead(_24);
        StorageDead(_23);
        drop(_12) -> [return: bb65, unwind: bb75];
    }

    bb65: {
        StorageDead(_12);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_57) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_46) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_45) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_44) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_60) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_57) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_24) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_12) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76 (cleanup): {
        _140 = discriminant(_48);
        goto -> bb71;
    }

    bb77 (cleanup): {
        _141 = discriminant(_36);
        goto -> bb73;
    }

    bb78 (cleanup): {
        _142 = discriminant(_25);
        goto -> bb74;
    }

    bb79 (cleanup): {
        _143 = discriminant(_13);
        goto -> bb75;
    }

    bb80 (cleanup): {
        _144 = discriminant(_3);
        goto -> bb75;
    }
}
