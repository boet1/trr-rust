// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::decrement_open_orders` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::decrement_open_orders(_1: &mut User, _2: bool) -> () {
    debug self => _1;
    debug is_auction => _2;
    let mut _0: ();
    let mut _3: u8;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: u8;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).22: u8);
        _3 = core::num::<impl u8>::saturating_sub(move _4, const 1_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        ((*_1).22: u8) = move _3;
        StorageDead(_3);
        StorageLive(_5);
        _5 = ((*_1).22: u8);
        ((*_1).23: bool) = Gt(move _5, const 0_u8);
        StorageDead(_5);
        StorageLive(_6);
        _6 = _2;
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).24: u8);
        _7 = core::num::<impl u8>::saturating_sub(move _8, const 1_u8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        ((*_1).24: u8) = move _7;
        StorageDead(_7);
        StorageLive(_9);
        _9 = ((*_1).24: u8);
        ((*_1).25: bool) = Gt(move _9, const 0_u8);
        StorageDead(_9);
        _0 = const ();
        goto -> bb5;
    }

    bb4: {
        _0 = const ();
        goto -> bb5;
    }

    bb5: {
        StorageDead(_6);
        return;
    }
}
