// MIR for `keeper::<impl at programs/drift/src/instructions/keeper.rs:3251:10: 3251:18>::try_accounts` before PreCodegen

fn keeper::<impl at programs/drift/src/instructions/keeper.rs:3251:10: 3251:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut SettleLPBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<keeper::SettleLP<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::keeper::SettleLP<'_>, anchor_lang::error::Error>;
    let _6: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _8: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::keeper::SettleLPBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/keeper.rs:3251:10: 3251:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::keeper::SettleLPBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/keeper.rs:3251:10: 3251:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: ();
    let mut _37: bool;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _39: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _40: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _41: !;
    let mut _42: anchor_lang::error::Error;
    let mut _43: anchor_lang::error::Error;
    let mut _44: anchor_lang::error::ErrorCode;
    let mut _45: instructions::keeper::SettleLP<'_>;
    let mut _46: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _47: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    scope 1 {
        debug state => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
        scope 6 {
            debug user => _21;
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, SettleLPBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/keeper.rs:3251:10: 3251:18};
        _8 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3251:10: 3251:18}>(move _9, move _15) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _6 = move _20;
        StorageDead(_20);
        _48 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, SettleLPBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind: bb22];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<keeper::SettleLP<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _54 = discriminant(_7);
        StorageDead(_7);
        goto -> bb20;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/keeper.rs:3251:10: 3251:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3251:10: 3251:18}>(move _24, move _30) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _21 = move _35;
        StorageDead(_35);
        _50 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_21;
        _39 = &(*_40);
        _38 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _39) -> [return: bb14, unwind: bb22];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<keeper::SettleLP<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _52 = discriminant(_22);
        StorageDead(_22);
        goto -> bb19;
    }

    bb14: {
        StorageDead(_39);
        _37 = ((*_38).6: bool);
        switchInt(move _37) -> [0: bb15, otherwise: bb18];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = ConstraintMut;
        _43 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _44) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_44);
        _42 = anchor_lang::error::Error::with_account_name::<&str>(move _43, const "user") -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_43);
        _0 = std::result::Result::<keeper::SettleLP<'_>, anchor_lang::error::Error>::Err(move _42);
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_45);
        StorageLive(_46);
        _46 = move _6;
        StorageLive(_47);
        _47 = move _21;
        _45 = keeper::SettleLP::<'_> { state: move _46, user: move _47 };
        StorageDead(_47);
        StorageDead(_46);
        _0 = std::result::Result::<keeper::SettleLP<'_>, anchor_lang::error::Error>::Ok(move _45);
        StorageDead(_45);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb21;
    }

    bb19: {
        StorageDead(_21);
        drop(_6) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        StorageDead(_6);
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        _56 = discriminant(_22);
        goto -> bb22;
    }

    bb25 (cleanup): {
        _57 = discriminant(_7);
        goto -> bb23;
    }
}
