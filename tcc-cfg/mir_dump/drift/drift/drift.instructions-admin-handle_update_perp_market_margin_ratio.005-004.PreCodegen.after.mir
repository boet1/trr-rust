// MIR for `admin::handle_update_perp_market_margin_ratio` after PreCodegen

fn admin::handle_update_perp_market_margin_ratio(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u32, _3: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug margin_ratio_initial => _2;
    debug margin_ratio_maintenance => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 2];
    let _36: &[&str; 2];
    let _37: [&str; 2];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &u16;
    let _44: &u16;
    let _45: &state::perp_market::PerpMarket;
    let mut _46: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: u32;
    let mut _51: u32;
    let mut _52: u32;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _54: std::result::Result<u32, error::ErrorCode>;
    let mut _55: u16;
    let mut _56: &state::perp_market::PerpMarket;
    let mut _57: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: u32;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _65: std::result::Result<u32, error::ErrorCode>;
    let mut _66: u16;
    let mut _67: &state::perp_market::PerpMarket;
    let mut _68: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: u32;
    let mut _75: &state::perp_market::PerpMarket;
    let mut _76: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _77: u32;
    let mut _78: &state::perp_market::PerpMarket;
    let mut _79: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _85: ();
    let mut _86: &str;
    let _87: &str;
    let mut _88: &std::string::String;
    let _89: &std::string::String;
    let _90: std::string::String;
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: &[&str; 2];
    let _95: &[&str; 2];
    let _96: [&str; 2];
    let mut _97: &[core::fmt::rt::Argument<'_>];
    let mut _98: &[core::fmt::rt::Argument<'_>; 2];
    let _99: &[core::fmt::rt::Argument<'_>; 2];
    let _100: [core::fmt::rt::Argument<'_>; 2];
    let mut _101: core::fmt::rt::Argument<'_>;
    let mut _102: &u32;
    let _103: &u32;
    let _104: &state::perp_market::PerpMarket;
    let mut _105: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u32;
    let _108: &u32;
    let _109: ();
    let mut _110: &str;
    let _111: &str;
    let mut _112: &std::string::String;
    let _113: &std::string::String;
    let _114: std::string::String;
    let mut _116: std::fmt::Arguments<'_>;
    let mut _117: &[&str];
    let mut _118: &[&str; 2];
    let _119: &[&str; 2];
    let _120: [&str; 2];
    let mut _121: &[core::fmt::rt::Argument<'_>];
    let mut _122: &[core::fmt::rt::Argument<'_>; 2];
    let _123: &[core::fmt::rt::Argument<'_>; 2];
    let _124: [core::fmt::rt::Argument<'_>; 2];
    let mut _125: core::fmt::rt::Argument<'_>;
    let mut _126: &u32;
    let _127: &u32;
    let _128: &state::perp_market::PerpMarket;
    let mut _129: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u32;
    let _132: &u32;
    let mut _133: u32;
    let mut _134: &mut state::perp_market::PerpMarket;
    let mut _135: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _136: u32;
    let mut _137: &mut state::perp_market::PerpMarket;
    let mut _138: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _139: ();
    let mut _143: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _144: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _14;
        let _32: std::string::String;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: u32;
        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _73: u32;
        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _84: ();
        let _91: std::string::String;
        let _115: std::string::String;
        let mut _140: &[&str; 2];
        let mut _141: &[&str; 2];
        let mut _142: &[&str; 2];
        scope 10 {
            debug res => _32;
        }
        scope 11 {
            debug residual => _59;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _62;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _70;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _73;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _81;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _84;
            scope 22 {
            }
        }
        scope 23 {
            debug res => _91;
        }
        scope 24 {
            debug res => _115;
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _143 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _8 = &((*_143).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _6 = constraints::perp_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb66];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _145 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _144 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _19 = &((*_144).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb68];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _151 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb61;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb8, unwind: bb66];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind: bb66];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _149 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _142 = const _;
        _36 = &(*_142);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_14);
        _45 = <RefMut<'_, PerpMarket> as Deref>::deref(move _46) -> [return: bb13, unwind: bb65];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind: bb67];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _147 = discriminant(_16);
        StorageDead(_16);
        goto -> bb60;
    }

    bb13: {
        StorageDead(_46);
        _44 = &((*_45).21: u16);
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _43) -> [return: bb14, unwind: bb65];
    }

    bb14: {
        StorageDead(_43);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb15, unwind: bb65];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb16, unwind: bb65];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        StorageDead(_27);
        drop(_31) -> [return: bb19, unwind: bb65];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _2;
        StorageLive(_51);
        _51 = _3;
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_14);
        _56 = <RefMut<'_, PerpMarket> as Deref>::deref(move _57) -> [return: bb20, unwind: bb65];
    }

    bb20: {
        StorageDead(_57);
        _55 = ((*_56).32: u16);
        _54 = <u16 as Cast>::cast::<u32>(move _55) -> [return: bb21, unwind: bb65];
    }

    bb21: {
        StorageDead(_55);
        _53 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _54) -> [return: bb22, unwind: bb65];
    }

    bb22: {
        StorageDead(_54);
        _58 = discriminant(_53);
        switchInt(move _58) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_62);
        _62 = ((_53 as Continue).0: u32);
        _52 = _62;
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &(*_14);
        _67 = <RefMut<'_, PerpMarket> as Deref>::deref(move _68) -> [return: bb26, unwind: bb65];
    }

    bb24: {
        StorageLive(_59);
        _59 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb25, unwind: bb65];
    }

    bb25: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb59;
    }

    bb26: {
        StorageDead(_68);
        _66 = ((*_67).33: u16);
        _65 = <u16 as Cast>::cast::<u32>(move _66) -> [return: bb27, unwind: bb65];
    }

    bb27: {
        StorageDead(_66);
        _64 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _65) -> [return: bb28, unwind: bb65];
    }

    bb28: {
        StorageDead(_65);
        _69 = discriminant(_64);
        switchInt(move _69) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_73);
        _73 = ((_64 as Continue).0: u32);
        _63 = _73;
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_14);
        _75 = <RefMut<'_, PerpMarket> as Deref>::deref(move _76) -> [return: bb32, unwind: bb65];
    }

    bb30: {
        StorageLive(_70);
        _70 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb31, unwind: bb65];
    }

    bb31: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_63);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb58;
    }

    bb32: {
        StorageDead(_76);
        _74 = ((*_75).13: u32);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &(*_14);
        _78 = <RefMut<'_, PerpMarket> as Deref>::deref(move _79) -> [return: bb33, unwind: bb65];
    }

    bb33: {
        StorageDead(_79);
        _77 = (((*_78).1: state::perp_market::AMM).64: u32);
        _49 = validate_margin(move _50, move _51, move _52, move _63, move _74, move _77) -> [return: bb34, unwind: bb65];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_63);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb35, unwind: bb65];
    }

    bb35: {
        StorageDead(_49);
        _80 = discriminant(_48);
        switchInt(move _80) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_84);
        _84 = ((_48 as Continue).0: ());
        _47 = _84;
        StorageDead(_84);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _141 = const _;
        _95 = &(*_141);
        _94 = &(*_95);
        _93 = move _94 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &(*_14);
        _104 = <RefMut<'_, PerpMarket> as Deref>::deref(move _105) -> [return: bb39, unwind: bb65];
    }

    bb37: {
        StorageLive(_81);
        _81 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb38, unwind: bb65];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        goto -> bb58;
    }

    bb39: {
        StorageDead(_105);
        _103 = &((*_104).15: u32);
        _102 = &(*_103);
        _101 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _102) -> [return: bb40, unwind: bb65];
    }

    bb40: {
        StorageDead(_102);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_2;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _107) -> [return: bb41, unwind: bb65];
    }

    bb41: {
        StorageDead(_107);
        _100 = [move _101, move _106];
        StorageDead(_106);
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = move _98 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_98);
        _92 = Arguments::<'_>::new_v1(move _93, move _97) -> [return: bb42, unwind: bb65];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_93);
        _91 = format(move _92) -> [return: bb43, unwind: bb65];
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_95);
        _90 = move _91;
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = <String as Deref>::deref(move _88) -> [return: bb44, unwind: bb63];
    }

    bb44: {
        _86 = &(*_87);
        StorageDead(_88);
        _85 = solana_program::log::sol_log(move _86) -> [return: bb45, unwind: bb63];
    }

    bb45: {
        StorageDead(_86);
        drop(_90) -> [return: bb46, unwind: bb65];
    }

    bb46: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _140 = const _;
        _119 = &(*_140);
        _118 = &(*_119);
        _117 = move _118 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_118);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_14);
        _128 = <RefMut<'_, PerpMarket> as Deref>::deref(move _129) -> [return: bb47, unwind: bb65];
    }

    bb47: {
        StorageDead(_129);
        _127 = &((*_128).16: u32);
        _126 = &(*_127);
        _125 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _126) -> [return: bb48, unwind: bb65];
    }

    bb48: {
        StorageDead(_126);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_3;
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _131) -> [return: bb49, unwind: bb65];
    }

    bb49: {
        StorageDead(_131);
        _124 = [move _125, move _130];
        StorageDead(_130);
        StorageDead(_125);
        _123 = &_124;
        _122 = &(*_123);
        _121 = move _122 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_122);
        _116 = Arguments::<'_>::new_v1(move _117, move _121) -> [return: bb50, unwind: bb65];
    }

    bb50: {
        StorageDead(_121);
        StorageDead(_117);
        _115 = format(move _116) -> [return: bb51, unwind: bb65];
    }

    bb51: {
        StorageDead(_116);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_119);
        _114 = move _115;
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = <String as Deref>::deref(move _112) -> [return: bb52, unwind: bb62];
    }

    bb52: {
        _110 = &(*_111);
        StorageDead(_112);
        _109 = solana_program::log::sol_log(move _110) -> [return: bb53, unwind: bb62];
    }

    bb53: {
        StorageDead(_110);
        drop(_114) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageLive(_133);
        _133 = _2;
        StorageLive(_134);
        StorageLive(_135);
        _135 = &mut (*_14);
        _134 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _135) -> [return: bb55, unwind: bb65];
    }

    bb55: {
        StorageDead(_135);
        ((*_134).15: u32) = move _133;
        StorageDead(_133);
        StorageDead(_134);
        StorageLive(_136);
        _136 = _3;
        StorageLive(_137);
        StorageLive(_138);
        _138 = &mut (*_14);
        _137 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _138) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        StorageDead(_138);
        ((*_137).16: u32) = move _136;
        StorageDead(_136);
        StorageDead(_137);
        StorageLive(_139);
        _139 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _139);
        StorageDead(_139);
        drop(_15) -> [return: bb57, unwind: bb66];
    }

    bb57: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb61;
    }

    bb58: {
        StorageDead(_67);
        StorageDead(_64);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_47);
        drop(_15) -> [return: bb60, unwind: bb66];
    }

    bb60: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb61;
    }

    bb61: {
        return;
    }

    bb62 (cleanup): {
        drop(_114) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_90) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_31) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_15) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67 (cleanup): {
        _153 = discriminant(_16);
        goto -> bb66;
    }

    bb68 (cleanup): {
        _154 = discriminant(_5);
        goto -> bb66;
    }
}
