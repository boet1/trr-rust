// MIR for `get_new_position_amounts` before PreCodegen

fn get_new_position_amounts(_1: &PerpPosition, _2: &PositionDelta) -> std::result::Result<(i64, i64), error::ErrorCode> {
    debug position => _1;
    debug delta => _2;
    let mut _0: std::result::Result<(i64, i64), error::ErrorCode>;
    let _3: i64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _5: std::result::Result<i64, error::ErrorCode>;
    let mut _6: i64;
    let mut _7: i64;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: i64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _15: std::result::Result<i64, error::ErrorCode>;
    let mut _16: i64;
    let mut _17: i64;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: (i64, i64);
    let mut _24: i64;
    let mut _25: i64;
    scope 1 {
        debug new_quote_asset_amount => _3;
        let mut _13: i64;
        let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _22: i64;
        scope 6 {
            debug new_base_asset_amount => _13;
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _22;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).2: i64);
        StorageLive(_7);
        _7 = ((*_2).0: i64);
        _5 = <i64 as SafeMath>::safe_add(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: i64);
        _3 = _12;
        StorageDead(_12);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).1: i64);
        StorageLive(_17);
        _17 = ((*_2).1: i64);
        _15 = <i64 as SafeMath>::safe_add(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = ((_14 as Continue).0: i64);
        _13 = _22;
        StorageDead(_22);
        StorageDead(_14);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _13;
        StorageLive(_25);
        _25 = _3;
        _23 = (move _24, move _25);
        StorageDead(_25);
        StorageDead(_24);
        _0 = std::result::Result::<(i64, i64), error::ErrorCode>::Ok(move _23);
        StorageDead(_23);
        StorageDead(_13);
        StorageDead(_3);
        goto -> bb13;
    }

    bb10: {
        StorageLive(_19);
        _19 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_3);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
