digraph Mir_0_9228 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn keeper::handle_update_user_open_orders_count(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::keeper::UpdateUserIdle&lt;ReErased&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _4: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let _6: &amp;ReErased std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _11: ();<br align="left"/>let mut _12: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _14: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _15: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _16: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _17: Closure(DefId(0:9230 ~ drift[d311]::instructions::keeper::handle_update_user_open_orders_count::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _22: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _23: u8;<br align="left"/>let mut _24: u8;<br align="left"/>let _25: ();<br align="left"/>let mut _26: std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _27: std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _28: &amp;ReErased [state::user::Order];<br align="left"/>let mut _29: &amp;ReErased [state::user::Order; 32_usize];<br align="left"/>let _30: &amp;ReErased state::user::User;<br align="left"/>let mut _31: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _32: std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _33: ();<br align="left"/>let _34: ();<br align="left"/>let mut _35: std::option::Option&lt;&amp;ReErased state::user::Order&gt;;<br align="left"/>let mut _36: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _37: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: !;<br align="left"/>let _40: &amp;ReErased state::user::Order;<br align="left"/>let _41: ();<br align="left"/>let mut _42: bool;<br align="left"/>let mut _43: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _44: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _45: state::user::OrderStatus;<br align="left"/>let mut _46: (u8, bool);<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: &amp;ReErased state::user::Order;<br align="left"/>let mut _49: (u8, bool);<br align="left"/>let mut _50: u8;<br align="left"/>let mut _51: &amp;ReErased mut state::user::User;<br align="left"/>let mut _52: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _53: u8;<br align="left"/>let mut _54: &amp;ReErased mut state::user::User;<br align="left"/>let mut _55: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _56: u8;<br align="left"/>let mut _57: &amp;ReErased mut state::user::User;<br align="left"/>let mut _58: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _59: u8;<br align="left"/>let mut _60: &amp;ReErased mut state::user::User;<br align="left"/>let mut _61: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _62: ();<br align="left"/>let mut _63: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _64: &amp;ReErased mut instructions::keeper::UpdateUserIdle&lt;ReErased&gt;;<br align="left"/>let mut _65: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _66: &amp;ReErased mut instructions::keeper::UpdateUserIdle&lt;ReErased&gt;;<br align="left"/>let mut _67: isize;<br align="left"/>let mut _68: isize;<br align="left"/>let mut _69: isize;<br align="left"/>let mut _70: isize;<br align="left"/>let mut _71: isize;<br align="left"/>let mut _72: isize;<br align="left"/>let mut _73: isize;<br align="left"/>let mut _74: isize;<br align="left"/>let mut _75: isize;<br align="left"/>let mut _76: isize;<br align="left"/>let mut _77: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug user =&gt; _12;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug open_orders =&gt; _23;<br align="left"/>debug open_auctions =&gt; _24;<br align="left"/>debug iter =&gt; _32;<br align="left"/>debug order =&gt; _40;<br align="left"/>>;
    bb0__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_64 = deref_copy (_1.1: &amp;mut instructions::keeper::UpdateUserIdle&lt;'_&gt;)<br/>_6 = &amp;((*_64).0: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_65 = deref_copy (*_6)<br/>_77 = (((_65.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_5 = &amp;(*_77)<br/></td></tr><tr><td align="left">_4 = constraints::exchange_not_paused(move _5)</td></tr></table>>];
    bb1__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_7 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_3 as Continue).0: ())<br/>_2 = _11<br/>StorageDead(_11)<br/>_67 = discriminant(_3)<br/>StorageDead(_6)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_66 = deref_copy (_1.1: &amp;mut instructions::keeper::UpdateUserIdle&lt;'_&gt;)<br/>_16 = &amp;((*_66).3: anchor_lang::prelude::AccountLoader&lt;'_, state::user::User&gt;)<br/></td></tr><tr><td align="left">_15 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _16)</td></tr></table>>];
    bb4__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>_73 = discriminant(_3)<br/>StorageDead(_6)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>_17 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_14 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _15, move _17)</td></tr></table>>];
    bb8__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb9__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_18 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb10__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = move ((_13 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_12 = move _22<br/>StorageDead(_22)<br/>_71 = discriminant(_13)<br/>StorageDead(_13)<br/>StorageLive(_23)<br/>_23 = const 0_u8<br/>StorageLive(_24)<br/>_24 = const 0_u8<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = &amp;_12<br/></td></tr><tr><td align="left">_30 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _31)</td></tr></table>>];
    bb11__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb12__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>_69 = discriminant(_13)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_29 = &amp;((*_30).5: [state::user::Order; 32])<br/>_28 = move _29 as &amp;[state::user::Order] (PointerCoercion(Unsize))<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = core::slice::&lt;impl [Order]&gt;::iter(move _28)</td></tr></table>>];
    bb14__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::slice::Iter&lt;'_, Order&gt; as IntoIterator&gt;::into_iter(move _27)</td></tr></table>>];
    bb15__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_32)<br/>_32 = move _26<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;mut _32<br/>_36 = &amp;mut (*_37)<br/></td></tr><tr><td align="left">_35 = &lt;std::slice::Iter&lt;'_, Order&gt; as Iterator&gt;::next(move _36)</td></tr></table>>];
    bb17__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_38 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb18__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_35 as Some).0: &amp;state::user::Order)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = &amp;((*_40).12: state::user::OrderStatus)<br/>StorageLive(_44)<br/>_63 = const _<br/>_44 = &amp;(*_63)<br/></td></tr><tr><td align="left">_42 = &lt;OrderStatus as PartialEq&gt;::eq(move _43, move _44)</td></tr></table>>];
    bb19__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_25 = const ()<br/>StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_50)<br/>_50 = _23<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = &amp;mut _12<br/></td></tr><tr><td align="left">_51 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _52)</td></tr></table>>];
    bb20__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb21__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>_46 = CheckedAdd(_23, const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_46.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _23, const 1_u8)</td></tr></table>>];
    bb22__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_23 = move (_46.0: u8)<br/>_41 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>_41 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = &amp;(*_40)<br/></td></tr><tr><td align="left">_47 = Order::has_auction(move _48)</td></tr></table>>];
    bb25__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb26__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_49 = CheckedAdd(_24, const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_49.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _24, const 1_u8)</td></tr></table>>];
    bb27__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_24 = move (_49.0: u8)<br/>_34 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_34 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_40)<br/>StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>_33 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>((*_51).22: u8) = move _50<br/>StorageDead(_50)<br/>StorageDead(_51)<br/>StorageLive(_53)<br/>_53 = _23<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = &amp;mut _12<br/></td></tr><tr><td align="left">_54 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _55)</td></tr></table>>];
    bb31__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>((*_54).23: bool) = Gt(move _53, const 0_u8)<br/>StorageDead(_53)<br/>StorageDead(_54)<br/>StorageLive(_56)<br/>_56 = _24<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = &amp;mut _12<br/></td></tr><tr><td align="left">_57 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _58)</td></tr></table>>];
    bb32__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>((*_57).24: u8) = move _56<br/>StorageDead(_56)<br/>StorageDead(_57)<br/>StorageLive(_59)<br/>_59 = _24<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = &amp;mut _12<br/></td></tr><tr><td align="left">_60 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _61)</td></tr></table>>];
    bb33__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>((*_60).25: bool) = Gt(move _59, const 0_u8)<br/>StorageDead(_59)<br/>StorageDead(_60)<br/>StorageLive(_62)<br/>_62 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _62)<br/>StorageDead(_62)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb34__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left">return</td></tr></table>>];
    bb36__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">36 (cleanup)</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb37__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">37 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb38__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">38 (cleanup)</td></tr><tr><td align="left" balign="left">_75 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_9228 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">39 (cleanup)</td></tr><tr><td align="left" balign="left">_76 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_9228 -> bb1__0_9228 [label="return"];
    bb1__0_9228 -> bb2__0_9228 [label="return"];
    bb1__0_9228 -> bb37__0_9228 [label="unwind"];
    bb2__0_9228 -> bb3__0_9228 [label="0"];
    bb2__0_9228 -> bb5__0_9228 [label="1"];
    bb2__0_9228 -> bb4__0_9228 [label="otherwise"];
    bb3__0_9228 -> bb7__0_9228 [label="return"];
    bb5__0_9228 -> bb6__0_9228 [label="return"];
    bb5__0_9228 -> bb39__0_9228 [label="unwind"];
    bb6__0_9228 -> bb35__0_9228 [label=""];
    bb7__0_9228 -> bb8__0_9228 [label="return"];
    bb7__0_9228 -> bb37__0_9228 [label="unwind"];
    bb8__0_9228 -> bb9__0_9228 [label="return"];
    bb8__0_9228 -> bb37__0_9228 [label="unwind"];
    bb9__0_9228 -> bb10__0_9228 [label="0"];
    bb9__0_9228 -> bb11__0_9228 [label="1"];
    bb9__0_9228 -> bb4__0_9228 [label="otherwise"];
    bb10__0_9228 -> bb13__0_9228 [label="return"];
    bb10__0_9228 -> bb36__0_9228 [label="unwind"];
    bb11__0_9228 -> bb12__0_9228 [label="return"];
    bb11__0_9228 -> bb38__0_9228 [label="unwind"];
    bb12__0_9228 -> bb35__0_9228 [label=""];
    bb13__0_9228 -> bb14__0_9228 [label="return"];
    bb13__0_9228 -> bb36__0_9228 [label="unwind"];
    bb14__0_9228 -> bb15__0_9228 [label="return"];
    bb14__0_9228 -> bb36__0_9228 [label="unwind"];
    bb15__0_9228 -> bb16__0_9228 [label=""];
    bb16__0_9228 -> bb17__0_9228 [label="return"];
    bb16__0_9228 -> bb36__0_9228 [label="unwind"];
    bb17__0_9228 -> bb19__0_9228 [label="0"];
    bb17__0_9228 -> bb18__0_9228 [label="1"];
    bb17__0_9228 -> bb4__0_9228 [label="otherwise"];
    bb18__0_9228 -> bb20__0_9228 [label="return"];
    bb18__0_9228 -> bb36__0_9228 [label="unwind"];
    bb19__0_9228 -> bb30__0_9228 [label="return"];
    bb19__0_9228 -> bb36__0_9228 [label="unwind"];
    bb20__0_9228 -> bb23__0_9228 [label="0"];
    bb20__0_9228 -> bb21__0_9228 [label="otherwise"];
    bb21__0_9228 -> bb22__0_9228 [label="success"];
    bb21__0_9228 -> bb36__0_9228 [label="unwind"];
    bb22__0_9228 -> bb24__0_9228 [label=""];
    bb23__0_9228 -> bb24__0_9228 [label=""];
    bb24__0_9228 -> bb25__0_9228 [label="return"];
    bb24__0_9228 -> bb36__0_9228 [label="unwind"];
    bb25__0_9228 -> bb28__0_9228 [label="0"];
    bb25__0_9228 -> bb26__0_9228 [label="otherwise"];
    bb26__0_9228 -> bb27__0_9228 [label="success"];
    bb26__0_9228 -> bb36__0_9228 [label="unwind"];
    bb27__0_9228 -> bb29__0_9228 [label=""];
    bb28__0_9228 -> bb29__0_9228 [label=""];
    bb29__0_9228 -> bb16__0_9228 [label=""];
    bb30__0_9228 -> bb31__0_9228 [label="return"];
    bb30__0_9228 -> bb36__0_9228 [label="unwind"];
    bb31__0_9228 -> bb32__0_9228 [label="return"];
    bb31__0_9228 -> bb36__0_9228 [label="unwind"];
    bb32__0_9228 -> bb33__0_9228 [label="return"];
    bb32__0_9228 -> bb36__0_9228 [label="unwind"];
    bb33__0_9228 -> bb34__0_9228 [label="return"];
    bb33__0_9228 -> bb37__0_9228 [label="unwind"];
    bb34__0_9228 -> bb35__0_9228 [label=""];
    bb36__0_9228 -> bb37__0_9228 [label="return"];
    bb38__0_9228 -> bb37__0_9228 [label=""];
    bb39__0_9228 -> bb37__0_9228 [label=""];
}
