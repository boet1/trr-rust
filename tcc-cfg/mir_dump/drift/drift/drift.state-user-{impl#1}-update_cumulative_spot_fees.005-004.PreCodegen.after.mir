// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::update_cumulative_spot_fees` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::update_cumulative_spot_fees(_1: &mut User, _2: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug amount => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: std::option::Option<i64>;
    let mut _8: i64;
    let mut _9: i64;
    let mut _10: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let mut _16: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).11: i64);
        StorageLive(_9);
        _9 = _2;
        _7 = core::num::<impl i64>::checked_add(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _6 = Option::<i64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _7, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: i64);
        _4 = _15;
        StorageDead(_15);
        ((*_1).11: i64) = move _4;
        _3 = const ();
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_16);
        _16 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _16);
        StorageDead(_16);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
