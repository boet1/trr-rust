// MIR for `get_update_k_result` before PreCodegen

fn get_update_k_result(_1: &PerpMarket, _2: U192, _3: bool) -> std::result::Result<UpdateKResult, error::ErrorCode> {
    debug market => _1;
    debug new_sqrt_k => _2;
    debug bound_update => _3;
    let mut _0: std::result::Result<math::cp_curve::UpdateKResult, error::ErrorCode>;
    let _4: math::bn::U192;
    let mut _6: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _9: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _10: math::bn::U192;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _12: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _13: math::bn::U192;
    let mut _14: math::bn::U192;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: math::bn::U192;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: ();
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &math::bn::U192;
    let mut _30: &math::bn::U192;
    let _31: math::bn::U192;
    let mut _32: !;
    let mut _33: error::ErrorCode;
    let _34: ();
    let mut _35: bool;
    let mut _36: &math::bn::U192;
    let mut _37: &math::bn::U192;
    let mut _38: math::bn::U192;
    let mut _39: math::bn::U192;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: math::bn::U192;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: bool;
    let mut _53: &math::bn::U192;
    let mut _54: &math::bn::U192;
    let mut _55: bool;
    let mut _56: u128;
    let mut _57: ();
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 2];
    let _69: &[&str; 2];
    let _70: [&str; 2];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let mut _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: [core::fmt::rt::Argument<'_>; 1];
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &error::ErrorCode;
    let _77: &error::ErrorCode;
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 1];
    let _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: [core::fmt::rt::Argument<'_>; 1];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &u128;
    let _96: &u128;
    let mut _97: error::ErrorCode;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _103: ();
    let mut _104: bool;
    let mut _105: &state::perp_market::MarketStatus;
    let mut _106: &state::perp_market::MarketStatus;
    let _107: state::perp_market::MarketStatus;
    let mut _108: bool;
    let mut _109: &math::bn::U192;
    let mut _110: &math::bn::U192;
    let mut _111: bool;
    let mut _112: u128;
    let mut _113: i128;
    let mut _114: u128;
    let mut _115: !;
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: error::ErrorCode;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _122: std::result::Result<u128, error::ErrorCode>;
    let mut _123: math::bn::U192;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _125: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _126: math::bn::U192;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _128: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _129: math::bn::U192;
    let mut _130: u128;
    let mut _131: math::bn::U192;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: math::bn::U192;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _149: u128;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _152: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _153: math::bn::U192;
    let mut _154: math::bn::U192;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _162: std::result::Result<u128, error::ErrorCode>;
    let mut _163: math::bn::U192;
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _165: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _166: math::bn::U192;
    let mut _167: math::bn::U192;
    let mut _168: u128;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _174: isize;
    let mut _176: !;
    let mut _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _179: math::cp_curve::UpdateKResult;
    let mut _180: u128;
    let mut _181: u128;
    let mut _182: u128;
    scope 1 {
        debug sqrt_k_ratio_precision => _4;
        let _5: math::bn::U192;
        scope 2 {
            debug old_sqrt_k => _5;
            let mut _7: math::bn::U192;
            let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _19: math::bn::U192;
            let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _25: math::bn::U192;
            scope 3 {
                debug sqrt_k_ratio => _7;
                let _40: u128;
                let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _48: u128;
                scope 12 {
                    debug sqrt_k => _40;
                    let _58: error::ErrorCode;
                    let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _102: ();
                    let _120: u128;
                    let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _136: math::bn::U192;
                    let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _142: math::bn::U192;
                    let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _147: u128;
                    let mut _183: &state::perp_market::MarketStatus;
                    scope 17 {
                        debug error_code => _58;
                        let _65: std::string::String;
                        let _84: std::string::String;
                        let mut _184: &[&str; 2];
                        let mut _185: &[&str; 2];
                        scope 18 {
                            debug res => _65;
                        }
                        scope 19 {
                            debug res => _84;
                        }
                    }
                    scope 20 {
                        debug residual => _99;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _102;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug base_asset_reserve => _120;
                        let _148: math::bn::U192;
                        scope 37 {
                            debug invariant_sqrt_u192 => _148;
                            let _150: math::bn::U192;
                            let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _159: math::bn::U192;
                            scope 38 {
                                debug invariant => _150;
                                let _160: u128;
                                let _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _173: math::bn::U192;
                                let _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _178: u128;
                                scope 43 {
                                    debug quote_asset_reserve => _160;
                                }
                                scope 44 {
                                    debug residual => _170;
                                    scope 45 {
                                    }
                                }
                                scope 46 {
                                    debug val => _173;
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug residual => _175;
                                    scope 49 {
                                    }
                                }
                                scope 50 {
                                    debug val => _178;
                                    scope 51 {
                                    }
                                }
                            }
                            scope 39 {
                                debug residual => _156;
                                scope 40 {
                                }
                            }
                            scope 41 {
                                debug val => _159;
                                scope 42 {
                                }
                            }
                        }
                    }
                    scope 25 {
                        debug residual => _133;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _136;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug residual => _139;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _142;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug residual => _144;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _147;
                        scope 36 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _45;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _48;
                    scope 16 {
                    }
                }
            }
            scope 4 {
                debug residual => _16;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _19;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _22;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _25;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = <U192 as From<u128>>::from(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).1: state::perp_market::AMM).10: u128);
        _5 = <U192 as From<u128>>::from(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _4;
        _12 = <U192 as SafeMath>::safe_mul(move _13, move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_11 as Continue).0: math::bn::U192);
        _10 = _19;
        StorageDead(_19);
        StorageLive(_20);
        _20 = _5;
        _9 = <U192 as SafeMath>::safe_div(move _10, move _20) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_16);
        _16 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb102;
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_10);
        _8 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _9) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_9);
        _21 = discriminant(_8);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_8 as Continue).0: math::bn::U192);
        _7 = _25;
        StorageDead(_25);
        StorageDead(_11);
        StorageDead(_8);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _3;
        switchInt(move _27) -> [0: bb19, otherwise: bb14];
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb102;
    }

    bb14: {
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_7;
        StorageLive(_30);
        StorageLive(_31);
        _31 = <U192 as From<u128>>::from(const 500000000_u128) -> [return: bb15, unwind continue];
    }

    bb15: {
        _30 = &_31;
        _28 = <U192 as PartialOrd>::lt(move _29, move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _28) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_33);
        _33 = error::ErrorCode::InvalidUpdateK;
        _0 = std::result::Result::<UpdateKResult, error::ErrorCode>::Err(move _33);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb103;
    }

    bb18: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb19;
    }

    bb19: {
        _26 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_7;
        StorageLive(_37);
        _37 = &_4;
        _35 = <U192 as PartialOrd>::lt(move _36, move _37) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _35) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _7;
        _38 = <U192 as Add<i32>>::add(move _39, const 1_i32) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_39);
        _7 = move _38;
        StorageDead(_38);
        _34 = const ();
        goto -> bb24;
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _2;
        _42 = U192::try_to_u128(move _43) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb27, 1: bb28, otherwise: bb6];
    }

    bb27: {
        StorageLive(_48);
        _48 = ((_41 as Continue).0: u128);
        _40 = _48;
        StorageDead(_48);
        StorageDead(_41);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_7;
        StorageLive(_54);
        _54 = &_4;
        _52 = <U192 as PartialOrd>::lt(move _53, move _54) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_45);
        _45 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_41);
        goto -> bb101;
    }

    bb30: {
        switchInt(move _52) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _40;
        _55 = Le(move _56, const _);
        switchInt(move _55) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_56);
        StorageLive(_57);
        _57 = ();
        _51 = std::result::Result::<(), error::ErrorCode>::Ok(move _57);
        StorageDead(_57);
        goto -> bb47;
    }

    bb34: {
        StorageDead(_56);
        StorageLive(_58);
        _58 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _185 = const _;
        _69 = &(*_185);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_58;
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _76) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_76);
        _74 = [move _75];
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = move _72 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_72);
        _66 = Arguments::<'_>::new_v1(move _67, move _71) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_71);
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <String as Deref>::deref(move _62) -> [return: bb38, unwind: bb106];
    }

    bb38: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb39, unwind: bb106];
    }

    bb39: {
        StorageDead(_60);
        drop(_64) -> [return: bb40, unwind: bb107];
    }

    bb40: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _184 = const _;
        _88 = &(*_184);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_40;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _95) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_95);
        _93 = [move _94];
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_85);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <String as Deref>::deref(move _81) -> [return: bb44, unwind: bb105];
    }

    bb44: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb45, unwind: bb105];
    }

    bb45: {
        StorageDead(_79);
        drop(_83) -> [return: bb46, unwind: bb107];
    }

    bb46: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_97);
        _97 = _58;
        _51 = std::result::Result::<(), error::ErrorCode>::Err(move _97);
        StorageDead(_97);
        StorageDead(_58);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_55);
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_51);
        _98 = discriminant(_50);
        switchInt(move _98) -> [0: bb49, 1: bb50, otherwise: bb6];
    }

    bb49: {
        StorageLive(_102);
        _102 = ((_50 as Continue).0: ());
        _49 = _102;
        StorageDead(_102);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &((*_1).22: state::perp_market::MarketStatus);
        StorageLive(_106);
        _183 = const _;
        _106 = &(*_183);
        _104 = <state::perp_market::MarketStatus as PartialEq>::ne(move _105, move _106) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_99);
        _99 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb101;
    }

    bb52: {
        switchInt(move _104) -> [0: bb61, otherwise: bb53];
    }

    bb53: {
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_2;
        StorageLive(_110);
        _110 = &_5;
        _108 = <U192 as PartialOrd>::lt(move _109, move _110) -> [return: bb54, unwind continue];
    }

    bb54: {
        switchInt(move _108) -> [0: bb60, otherwise: bb55];
    }

    bb55: {
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = (((*_1).1: state::perp_market::AMM).15: i128);
        _112 = core::num::<impl i128>::unsigned_abs(move _113) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_113);
        StorageLive(_114);
        _114 = _40;
        _111 = Gt(move _112, move _114);
        switchInt(move _111) -> [0: bb59, otherwise: bb57];
    }

    bb57: {
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = const "new_sqrt_k too small relative to market imbalance";
        _117 = &(*_118);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_117);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_119);
        _119 = error::ErrorCode::InvalidUpdateK;
        _0 = std::result::Result::<UpdateKResult, error::ErrorCode>::Err(move _119);
        StorageDead(_119);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb101;
    }

    bb59: {
        StorageDead(_114);
        StorageDead(_112);
        goto -> bb62;
    }

    bb60: {
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb62;
    }

    bb61: {
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb62;
    }

    bb62: {
        _103 = const ();
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = (((*_1).1: state::perp_market::AMM).5: u128);
        _129 = <U192 as From<u128>>::from(move _130) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_130);
        StorageLive(_131);
        _131 = _7;
        _128 = <U192 as SafeMath>::safe_mul(move _129, move _131) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_131);
        StorageDead(_129);
        _127 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _128) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_128);
        _132 = discriminant(_127);
        switchInt(move _132) -> [0: bb66, 1: bb67, otherwise: bb6];
    }

    bb66: {
        StorageLive(_136);
        _136 = ((_127 as Continue).0: math::bn::U192);
        _126 = _136;
        StorageDead(_136);
        StorageLive(_137);
        _137 = _4;
        _125 = <U192 as SafeMath>::safe_div(move _126, move _137) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_133);
        _133 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb98;
    }

    bb69: {
        StorageDead(_137);
        StorageDead(_126);
        _124 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _125) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_125);
        _138 = discriminant(_124);
        switchInt(move _138) -> [0: bb71, 1: bb72, otherwise: bb6];
    }

    bb71: {
        StorageLive(_142);
        _142 = ((_124 as Continue).0: math::bn::U192);
        _123 = _142;
        StorageDead(_142);
        _122 = U192::try_to_u128(move _123) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_139);
        _139 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_141);
        StorageDead(_139);
        goto -> bb98;
    }

    bb74: {
        StorageDead(_123);
        _121 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _122) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_122);
        _143 = discriminant(_121);
        switchInt(move _143) -> [0: bb76, 1: bb77, otherwise: bb6];
    }

    bb76: {
        StorageLive(_147);
        _147 = ((_121 as Continue).0: u128);
        _120 = _147;
        StorageDead(_147);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        StorageLive(_148);
        StorageLive(_149);
        _149 = _40;
        _148 = <U192 as From<u128>>::from(move _149) -> [return: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_144);
        _144 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_146);
        StorageDead(_144);
        goto -> bb99;
    }

    bb79: {
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _148;
        StorageLive(_154);
        _154 = _148;
        _152 = <U192 as SafeMath>::safe_mul(move _153, move _154) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_154);
        StorageDead(_153);
        _151 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _152) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_152);
        _155 = discriminant(_151);
        switchInt(move _155) -> [0: bb82, 1: bb83, otherwise: bb6];
    }

    bb82: {
        StorageLive(_159);
        _159 = ((_151 as Continue).0: math::bn::U192);
        _150 = _159;
        StorageDead(_159);
        StorageDead(_151);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _150;
        StorageLive(_167);
        StorageLive(_168);
        _168 = _120;
        _167 = <U192 as From<u128>>::from(move _168) -> [return: bb85, unwind continue];
    }

    bb83: {
        StorageLive(_156);
        _156 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_151);
        goto -> bb97;
    }

    bb85: {
        StorageDead(_168);
        _165 = <U192 as SafeMath>::safe_div(move _166, move _167) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_167);
        StorageDead(_166);
        _164 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _165) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_165);
        _169 = discriminant(_164);
        switchInt(move _169) -> [0: bb88, 1: bb89, otherwise: bb6];
    }

    bb88: {
        StorageLive(_173);
        _173 = ((_164 as Continue).0: math::bn::U192);
        _163 = _173;
        StorageDead(_173);
        _162 = U192::try_to_u128(move _163) -> [return: bb91, unwind continue];
    }

    bb89: {
        StorageLive(_170);
        _170 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _172) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb96;
    }

    bb91: {
        StorageDead(_163);
        _161 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _162) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_162);
        _174 = discriminant(_161);
        switchInt(move _174) -> [0: bb93, 1: bb94, otherwise: bb6];
    }

    bb93: {
        StorageLive(_178);
        _178 = ((_161 as Continue).0: u128);
        _160 = _178;
        StorageDead(_178);
        StorageDead(_164);
        StorageDead(_161);
        StorageLive(_179);
        StorageLive(_180);
        _180 = _40;
        StorageLive(_181);
        _181 = _120;
        StorageLive(_182);
        _182 = _160;
        _179 = UpdateKResult { sqrt_k: move _180, base_asset_reserve: move _181, quote_asset_reserve: move _182 };
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_180);
        _0 = std::result::Result::<UpdateKResult, error::ErrorCode>::Ok(move _179);
        StorageDead(_179);
        StorageDead(_160);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_120);
        StorageDead(_40);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb104;
    }

    bb94: {
        StorageLive(_175);
        _175 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_177);
        _177 = _175;
        _0 = <std::result::Result<UpdateKResult, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _177) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_177);
        StorageDead(_175);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_150);
        StorageDead(_148);
        goto -> bb100;
    }

    bb98: {
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_120);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_40);
        goto -> bb103;
    }

    bb102: {
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb104;
    }

    bb104: {
        return;
    }

    bb105 (cleanup): {
        drop(_83) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_64) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        resume;
    }
}
