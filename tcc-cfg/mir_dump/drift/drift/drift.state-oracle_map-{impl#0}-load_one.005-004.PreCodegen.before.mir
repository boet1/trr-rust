// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::load_one` before PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::load_one(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: u64, _3: Option<state::state::OracleGuardRails>) -> std::result::Result<OracleMap<'_>, error::ErrorCode> {
    debug account_info => _1;
    debug slot => _2;
    debug oracle_guard_rails => _3;
    let mut _0: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _4: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let _5: ();
    let mut _6: bool;
    let mut _7: &[anchor_lang::prelude::Pubkey];
    let mut _8: &[anchor_lang::prelude::Pubkey; 4];
    let _9: [anchor_lang::prelude::Pubkey; 4];
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: &&anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::AccountInfo<'_>;
    let _14: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _15: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _16: anchor_lang::prelude::Pubkey;
    let mut _17: anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: bool;
    let mut _20: &&anchor_lang::prelude::Pubkey;
    let mut _21: &&anchor_lang::prelude::Pubkey;
    let _22: &anchor_lang::prelude::Pubkey;
    let _23: anchor_lang::prelude::Pubkey;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _26: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _27: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: {closure@programs/drift/src/state/oracle_map.rs:265:63: 265:66};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: &[u8];
    let mut _39: &[u8];
    let _40: &&mut [u8];
    let mut _41: &std::cell::Ref<'_, &mut [u8]>;
    let mut _42: std::ops::Range<usize>;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: usize;
    let mut _46: (usize, bool);
    let mut _47: &[u8];
    let _48: ();
    let mut _49: bool;
    let mut _50: &&[u8; 8];
    let mut _51: &&[u8; 8];
    let _52: &[u8; 8];
    let _53: [u8; 8];
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: &[u8];
    let _58: &&mut [u8];
    let mut _59: &std::cell::Ref<'_, &mut [u8]>;
    let mut _60: usize;
    let mut _61: !;
    let _62: ();
    let mut _63: &str;
    let _64: &str;
    let mut _65: error::ErrorCode;
    let mut _66: bool;
    let mut _67: &&[u8; 8];
    let mut _68: &&[u8; 8];
    let _69: &[u8; 8];
    let _70: [u8; 8];
    let mut _72: bool;
    let mut _73: usize;
    let mut _74: &[u8];
    let _75: &&mut [u8];
    let mut _76: &std::cell::Ref<'_, &mut [u8]>;
    let mut _77: usize;
    let mut _78: !;
    let _79: ();
    let mut _80: &str;
    let _81: &str;
    let mut _82: error::ErrorCode;
    let mut _83: !;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: error::ErrorCode;
    let mut _89: &anchor_lang::prelude::AccountInfo<'_>;
    let _90: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _91: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _92: anchor_lang::prelude::Pubkey;
    let mut _93: anchor_lang::prelude::AccountInfo<'_>;
    let mut _94: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _95: bool;
    let mut _96: &anchor_lang::prelude::Pubkey;
    let _97: anchor_lang::prelude::Pubkey;
    let mut _98: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let _100: anchor_lang::prelude::Pubkey;
    let mut _101: !;
    let mut _102: error::ErrorCode;
    let mut _104: isize;
    let mut _106: state::oracle_map::OracleMap<'_>;
    let mut _107: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _108: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), state::oracle::OraclePriceData>;
    let mut _109: std::collections::BTreeMap<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), math::oracle::OracleValidity>;
    let mut _110: u64;
    let mut _111: state::state::OracleGuardRails;
    let mut _112: state::oracle::OraclePriceData;
    let mut _113: std::option::Option<u64>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut [u8];
    let mut _117: &mut [u8];
    let mut _118: &mut [u8];
    let mut _119: bool;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    scope 1 {
        debug oracles => _4;
        let _12: anchor_lang::prelude::Pubkey;
        let _24: std::cell::Ref<'_, &mut [u8]>;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: std::cell::Ref<'_, &mut [u8]>;
        let _103: state::state::OracleGuardRails;
        let mut _114: &[anchor_lang::prelude::Pubkey; 4];
        scope 2 {
            debug pubkey => _12;
        }
        scope 3 {
            debug data => _24;
            let _35: &[u8; 8];
            let _36: usize;
            scope 8 {
                debug account_discriminator => _35;
                let _54: usize;
                let _71: usize;
                let _88: anchor_lang::prelude::Pubkey;
                scope 13 {
                    debug expected_data_len => _54;
                }
                scope 14 {
                    debug expected_data_len => _71;
                }
                scope 15 {
                    debug pubkey => _88;
                }
            }
            scope 9 {
                debug offset => _36;
                let _37: &[u8];
                scope 10 {
                    debug slice => _37;
                    scope 11 {
                        scope 12 {
                        }
                    }
                }
            }
        }
        scope 4 {
            debug residual => _31;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _34;
            scope 7 {
            }
        }
        scope 16 {
            debug ogr => _103;
        }
        scope 17 {
            debug o => _105;
            let _105: state::state::OracleGuardRails;
        }
    }

    bb0: {
        _119 = const false;
        StorageLive(_4);
        _119 = const true;
        _4 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _114 = const _;
        _8 = &(*_114);
        _7 = move _8 as &[anchor_lang::prelude::Pubkey] (PointerCoercion(Unsize));
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        _115 = deref_copy (*_11);
        _10 = &(*_115);
        _6 = core::slice::<impl [anchor_lang::prelude::Pubkey]>::contains(move _7, move _10) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        switchInt(move _6) -> [0: bb8, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_1);
        _12 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _13) -> [return: bb4, unwind: bb73];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut _4;
        StorageLive(_16);
        _16 = _12;
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_1);
        _17 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _18) -> [return: bb5, unwind: bb73];
    }

    bb5: {
        StorageDead(_18);
        _14 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::insert(move _15, move _16, move _17) -> [return: bb6, unwind: bb73];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        drop(_14) -> [return: bb7, unwind: bb73];
    }

    bb7: {
        StorageDead(_14);
        _5 = const ();
        StorageDead(_12);
        goto -> bb55;
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = id() -> [return: bb9, unwind: bb73];
    }

    bb9: {
        _22 = &_23;
        _21 = &_22;
        _19 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _20, move _21) -> [return: bb10, unwind: bb73];
    }

    bb10: {
        switchInt(move _19) -> [0: bb48, otherwise: bb11];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_1);
        _27 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _28) -> [return: bb12, unwind: bb73];
    }

    bb12: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/state/oracle_map.rs:265:63: 265:66};
        _26 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/oracle_map.rs:265:63: 265:66}>(move _27, move _29) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        _25 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _26) -> [return: bb14, unwind: bb73];
    }

    bb14: {
        StorageDead(_26);
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_34);
        _34 = move ((_25 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _24 = move _34;
        StorageDead(_34);
        _122 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_35);
        StorageLive(_36);
        _36 = const 0_usize;
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_24;
        _40 = <Ref<'_, &mut [u8]> as Deref>::deref(move _41) -> [return: bb19, unwind: bb69];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb18, unwind: bb71];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        _120 = discriminant(_25);
        StorageDead(_25);
        goto -> bb63;
    }

    bb19: {
        _116 = deref_copy (*_40);
        _39 = &(*_116);
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _36;
        StorageLive(_44);
        StorageLive(_45);
        _45 = _36;
        _46 = CheckedAdd(_45, const 8_usize);
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 8_usize) -> [success: bb20, unwind: bb69];
    }

    bb20: {
        _44 = move (_46.0: usize);
        StorageDead(_45);
        _42 = std::ops::Range::<usize> { start: move _43, end: move _44 };
        StorageDead(_44);
        StorageDead(_43);
        _38 = <[u8] as Index<std::ops::Range<usize>>>::index(move _39, move _42) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_39);
        _37 = &(*_38);
        StorageLive(_47);
        _47 = &(*_37);
        _35 = OracleMap::<'a>::load_one::as_array::<u8>(move _47) -> [return: bb22, unwind: bb69];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_35;
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = <PrelaunchOracle as anchor_lang::Discriminator>::discriminator() -> [return: bb23, unwind: bb69];
    }

    bb23: {
        _52 = &_53;
        _51 = &_52;
        _49 = <&[u8; 8] as PartialEq>::eq(move _50, move _51) -> [return: bb24, unwind: bb69];
    }

    bb24: {
        switchInt(move _49) -> [0: bb31, otherwise: bb25];
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_54);
        _54 = const _;
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_24;
        _58 = <Ref<'_, &mut [u8]> as Deref>::deref(move _59) -> [return: bb26, unwind: bb69];
    }

    bb26: {
        _117 = deref_copy (*_58);
        _57 = &(*_117);
        StorageDead(_59);
        _56 = core::slice::<impl [u8]>::len(move _57) -> [return: bb27, unwind: bb69];
    }

    bb27: {
        StorageDead(_57);
        StorageLive(_60);
        _60 = _54;
        _55 = Lt(move _56, move _60);
        switchInt(move _55) -> [0: bb30, otherwise: bb28];
    }

    bb28: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = const "Unexpected account data len loading oracle";
        _63 = &(*_64);
        _62 = solana_program::log::sol_log(move _63) -> [return: bb29, unwind: bb69];
    }

    bb29: {
        StorageDead(_63);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_65);
        _65 = error::ErrorCode::UnableToLoadOracle;
        _0 = std::result::Result::<OracleMap<'_>, error::ErrorCode>::Err(move _65);
        StorageDead(_65);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb62;
    }

    bb30: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        _48 = const ();
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb42;
    }

    bb31: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_35;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = <PythLazerOracle as anchor_lang::Discriminator>::discriminator() -> [return: bb32, unwind: bb69];
    }

    bb32: {
        _69 = &_70;
        _68 = &_69;
        _66 = <&[u8; 8] as PartialEq>::eq(move _67, move _68) -> [return: bb33, unwind: bb69];
    }

    bb33: {
        switchInt(move _66) -> [0: bb40, otherwise: bb34];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_71);
        _71 = const _;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_24;
        _75 = <Ref<'_, &mut [u8]> as Deref>::deref(move _76) -> [return: bb35, unwind: bb69];
    }

    bb35: {
        _118 = deref_copy (*_75);
        _74 = &(*_118);
        StorageDead(_76);
        _73 = core::slice::<impl [u8]>::len(move _74) -> [return: bb36, unwind: bb69];
    }

    bb36: {
        StorageDead(_74);
        StorageLive(_77);
        _77 = _71;
        _72 = Lt(move _73, move _77);
        switchInt(move _72) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = const "Unexpected account data len loading oracle";
        _80 = &(*_81);
        _79 = solana_program::log::sol_log(move _80) -> [return: bb38, unwind: bb69];
    }

    bb38: {
        StorageDead(_80);
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_82);
        _82 = error::ErrorCode::UnableToLoadOracle;
        _0 = std::result::Result::<OracleMap<'_>, error::ErrorCode>::Err(move _82);
        StorageDead(_82);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb61;
    }

    bb39: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        _48 = const ();
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_66);
        goto -> bb42;
    }

    bb40: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = const "Unexpected account discriminator";
        _85 = &(*_86);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb41, unwind: bb69];
    }

    bb41: {
        StorageDead(_85);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_87);
        _87 = error::ErrorCode::UnableToLoadOracle;
        _0 = std::result::Result::<OracleMap<'_>, error::ErrorCode>::Err(move _87);
        StorageDead(_87);
        goto -> bb61;
    }

    bb42: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_1);
        _88 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _89) -> [return: bb43, unwind: bb69];
    }

    bb43: {
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &mut _4;
        StorageLive(_92);
        _92 = _88;
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_1);
        _93 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _94) -> [return: bb44, unwind: bb69];
    }

    bb44: {
        StorageDead(_94);
        _90 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::insert(move _91, move _92, move _93) -> [return: bb45, unwind: bb69];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        drop(_90) -> [return: bb46, unwind: bb69];
    }

    bb46: {
        StorageDead(_90);
        _5 = const ();
        StorageDead(_88);
        StorageDead(_35);
        drop(_24) -> [return: bb47, unwind: bb73];
    }

    bb47: {
        StorageDead(_24);
        goto -> bb54;
    }

    bb48: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &(*_1);
        _97 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _98) -> [return: bb49, unwind: bb73];
    }

    bb49: {
        _96 = &_97;
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb50, unwind: bb73];
    }

    bb50: {
        _99 = &_100;
        _95 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _96, move _99) -> [return: bb51, unwind: bb73];
    }

    bb51: {
        switchInt(move _95) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_102);
        _102 = error::ErrorCode::InvalidOracle;
        _0 = std::result::Result::<OracleMap<'_>, error::ErrorCode>::Err(move _102);
        StorageDead(_102);
        StorageDead(_95);
        goto -> bb64;
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        _5 = const ();
        StorageDead(_95);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_19);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_103);
        _104 = discriminant(_3);
        switchInt(move _104) -> [1: bb56, otherwise: bb57];
    }

    bb56: {
        StorageLive(_105);
        _105 = ((_3 as Some).0: state::state::OracleGuardRails);
        _103 = _105;
        StorageDead(_105);
        goto -> bb58;
    }

    bb57: {
        _103 = <state::state::OracleGuardRails as Default>::default() -> [return: bb74, unwind: bb73];
    }

    bb58: {
        StorageLive(_106);
        StorageLive(_107);
        _119 = const false;
        _107 = move _4;
        StorageLive(_108);
        _108 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OraclePriceData>::new() -> [return: bb59, unwind: bb68];
    }

    bb59: {
        StorageLive(_109);
        _109 = BTreeMap::<(anchor_lang::prelude::Pubkey, state::oracle::OracleSource), OracleValidity>::new() -> [return: bb60, unwind: bb67];
    }

    bb60: {
        StorageLive(_110);
        _110 = _2;
        StorageLive(_111);
        _111 = _103;
        StorageLive(_112);
        StorageLive(_113);
        _113 = Option::<u64>::None;
        _112 = OraclePriceData { price: const _, confidence: const 1_u64, delay: const 0_i64, has_sufficient_number_of_data_points: const true, sequence_id: move _113 };
        StorageDead(_113);
        _106 = OracleMap::<'_> { oracles: move _107, price_data: move _108, validity: move _109, slot: move _110, oracle_guard_rails: move _111, quote_asset_price_data: move _112 };
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        _0 = std::result::Result::<OracleMap<'_>, error::ErrorCode>::Ok(move _106);
        StorageDead(_106);
        StorageDead(_103);
        _119 = const false;
        StorageDead(_4);
        goto -> bb66;
    }

    bb61: {
        StorageDead(_66);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_35);
        drop(_24) -> [return: bb63, unwind: bb73];
    }

    bb63: {
        StorageDead(_24);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_19);
        StorageDead(_6);
        StorageDead(_5);
        drop(_4) -> [return: bb65, unwind: bb70];
    }

    bb65: {
        _119 = const false;
        StorageDead(_4);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_108) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_107) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_24) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        _124 = discriminant(_25);
        goto -> bb73;
    }

    bb72 (cleanup): {
        drop(_4) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_119) -> [0: bb70, otherwise: bb72];
    }

    bb74: {
        goto -> bb58;
    }
}
