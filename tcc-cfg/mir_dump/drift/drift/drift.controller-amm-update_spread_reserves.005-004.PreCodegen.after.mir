// MIR for `update_spread_reserves` after PreCodegen

fn update_spread_reserves(_1: &mut PerpMarket) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: u128;
    let _3: u128;
    let mut _4: (u128, u128);
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _6: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _7: &state::perp_market::PerpMarket;
    let mut _8: controller::position::PositionDirection;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: (u128, u128);
    let mut _16: (u128, u128);
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _18: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _19: &state::perp_market::PerpMarket;
    let mut _20: controller::position::PositionDirection;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: ();
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: u128;
    let mut _30: u128;
    let mut _31: u128;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: u128;
    let mut _35: u128;
    let mut _36: u128;
    let mut _37: u128;
    let mut _38: u128;
    let mut _39: u128;
    let mut _40: u128;
    let mut _41: u128;
    let mut _42: u128;
    let mut _43: u128;
    let mut _44: u128;
    let mut _45: ();
    scope 1 {
        debug new_ask_base_asset_reserve => _2;
        debug new_ask_quote_asset_reserve => _3;
        let _14: u128;
        let _15: u128;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: (u128, u128);
        scope 6 {
            debug new_bid_base_asset_reserve => _14;
            debug new_bid_quote_asset_reserve => _15;
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = controller::position::PositionDirection::Long;
        _6 = calculate_spread_reserves(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: (u128, u128));
        _4 = _13;
        StorageDead(_13);
        StorageLive(_2);
        _2 = (_4.0: u128);
        StorageLive(_3);
        _3 = (_4.1: u128);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_1);
        StorageLive(_20);
        _20 = controller::position::PositionDirection::Short;
        _18 = calculate_spread_reserves(move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb19;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_17 as Continue).0: (u128, u128));
        _16 = _25;
        StorageDead(_25);
        StorageLive(_14);
        _14 = (_16.0: u128);
        StorageLive(_15);
        _15 = (_16.1: u128);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (((*_1).1: state::perp_market::AMM).82: i32);
        _27 = Eq(move _28, const 0_i32);
        switchInt(move _27) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb12: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _2;
        StorageLive(_31);
        _31 = (((*_1).1: state::perp_market::AMM).5: u128);
        _29 = <u128 as Ord>::min(move _30, move _31) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_41);
        _41 = _2;
        (((*_1).1: state::perp_market::AMM).37: u128) = move _41;
        StorageDead(_41);
        StorageLive(_42);
        _42 = _14;
        (((*_1).1: state::perp_market::AMM).39: u128) = move _42;
        StorageDead(_42);
        StorageLive(_43);
        _43 = _3;
        (((*_1).1: state::perp_market::AMM).38: u128) = move _43;
        StorageDead(_43);
        StorageLive(_44);
        _44 = _15;
        (((*_1).1: state::perp_market::AMM).40: u128) = move _44;
        StorageDead(_44);
        _26 = const ();
        goto -> bb18;
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_30);
        (((*_1).1: state::perp_market::AMM).37: u128) = move _29;
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _14;
        StorageLive(_34);
        _34 = (((*_1).1: state::perp_market::AMM).5: u128);
        _32 = <u128 as Ord>::max(move _33, move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        (((*_1).1: state::perp_market::AMM).39: u128) = move _32;
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        _37 = (((*_1).1: state::perp_market::AMM).6: u128);
        _35 = <u128 as Ord>::max(move _36, move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_36);
        (((*_1).1: state::perp_market::AMM).38: u128) = move _35;
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _15;
        StorageLive(_40);
        _40 = (((*_1).1: state::perp_market::AMM).6: u128);
        _38 = <u128 as Ord>::min(move _39, move _40) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_40);
        StorageDead(_39);
        (((*_1).1: state::perp_market::AMM).40: u128) = move _38;
        StorageDead(_38);
        _26 = const ();
        goto -> bb18;
    }

    bb18: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_45);
        _45 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}
