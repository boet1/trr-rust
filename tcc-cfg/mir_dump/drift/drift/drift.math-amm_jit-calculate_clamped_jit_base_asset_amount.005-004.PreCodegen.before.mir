// MIR for `calculate_clamped_jit_base_asset_amount` before PreCodegen

fn calculate_clamped_jit_base_asset_amount(_1: &PerpMarket, _2: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug market => _1;
    debug jit_base_asset_amount => _2;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _8: std::result::Result<u128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _11: std::result::Result<u128, error::ErrorCode>;
    let mut _12: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: u64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u128;
    let mut _21: u128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _23: std::result::Result<u128, error::ErrorCode>;
    let mut _24: u8;
    let mut _25: u8;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u128;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: u128;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: u128;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: u64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _48: std::result::Result<u64, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: i128;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: u64;
    let mut _59: u64;
    scope 1 {
        debug jit_base_asset_amount => _3;
        let _46: u64;
        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _55: u64;
        scope 22 {
            debug max_amm_base_asset_amount => _46;
            let _56: u64;
            scope 27 {
                debug jit_base_asset_amount => _56;
            }
        }
        scope 23 {
            debug residual => _52;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _55;
            scope 26 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _27;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _30;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _32;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _35;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _37;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _40;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _42;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _45;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _14 = <u64 as Cast>::cast::<u128>(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u128);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = (((*_1).1: state::perp_market::AMM).71: u8);
        _24 = <u8 as Ord>::min(move _25, const 100_u8) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb38;
    }

    bb7: {
        StorageDead(_25);
        _23 = <u8 as Cast>::cast::<u128>(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        _22 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: u128);
        _21 = _30;
        StorageDead(_30);
        _11 = <u128 as SafeMath>::safe_mul(move _12, move _21) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb35;
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_12);
        _10 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_11);
        _31 = discriminant(_10);
        switchInt(move _31) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_10 as Continue).0: u128);
        _9 = _35;
        StorageDead(_35);
        _8 = <u128 as SafeMath>::safe_div(move _9, const 100_u128) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_32);
        _32 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb35;
    }

    bb18: {
        StorageDead(_9);
        _7 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_8);
        _36 = discriminant(_7);
        switchInt(move _36) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_40);
        _40 = ((_7 as Continue).0: u128);
        _6 = _40;
        StorageDead(_40);
        _5 = <u128 as Cast>::cast::<u64>(move _6) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_37);
        _37 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb36;
    }

    bb23: {
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_5);
        _41 = discriminant(_4);
        switchInt(move _41) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_45);
        _45 = ((_4 as Continue).0: u64);
        _3 = _45;
        StorageDead(_45);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = (((*_1).1: state::perp_market::AMM).15: i128);
        _49 = core::num::<impl i128>::unsigned_abs(move _50) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_42);
        _42 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb37;
    }

    bb28: {
        StorageDead(_50);
        _48 = <u128 as Cast>::cast::<u64>(move _49) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_49);
        _47 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_48);
        _51 = discriminant(_47);
        switchInt(move _51) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_55);
        _55 = ((_47 as Continue).0: u64);
        _46 = _55;
        StorageDead(_55);
        StorageDead(_47);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _3;
        StorageLive(_58);
        _58 = _46;
        _56 = <u64 as Ord>::min(move _57, move _58) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_52);
        _52 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb39;
    }

    bb34: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_59);
        _59 = _56;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _59);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_46);
        StorageDead(_3);
        goto -> bb40;
    }

    bb35: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_22);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_3);
        goto -> bb40;
    }

    bb40: {
        return;
    }
}
