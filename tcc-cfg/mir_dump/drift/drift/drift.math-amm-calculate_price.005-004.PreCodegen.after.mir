// MIR for `calculate_price` after PreCodegen

fn calculate_price(_1: u128, _2: u128, _3: u128) -> std::result::Result<u64, error::ErrorCode> {
    debug quote_asset_reserve => _1;
    debug base_asset_reserve => _2;
    debug peg_multiplier => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u128;
    let mut _14: math::bn::U192;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _16: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _17: math::bn::U192;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _19: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _20: math::bn::U192;
    let mut _21: u128;
    let mut _22: math::bn::U192;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: math::bn::U192;
    let mut _29: u128;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug peg_quote_asset_amount => _4;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: math::bn::U192;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: math::bn::U192;
        scope 6 {
            debug residual => _24;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _27;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _31;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _34;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        StorageLive(_8);
        _8 = _3;
        _6 = <u128 as SafeMath>::safe_mul(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u128);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _4;
        _20 = <U192 as From<u128>>::from(move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb22;
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = <U192 as From<u128>>::from(const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = <U192 as SafeMath>::safe_mul(move _20, move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_18 as Continue).0: math::bn::U192);
        _17 = _27;
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _2;
        _28 = <U192 as From<u128>>::from(move _29) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb21;
    }

    bb14: {
        StorageDead(_29);
        _16 = <U192 as SafeMath>::safe_div(move _17, move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_17);
        _15 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _16) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_16);
        _30 = discriminant(_15);
        switchInt(move _30) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_34);
        _34 = ((_15 as Continue).0: math::bn::U192);
        _14 = _34;
        StorageDead(_34);
        _0 = U192::try_to_u64(move _14) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_31);
        _31 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_14);
        StorageDead(_4);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_14);
        StorageDead(_4);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb22;
    }

    bb22: {
        return;
    }
}
