// MIR for `math::orders::should_expire_order_before_fill` after PreCodegen

fn math::orders::should_expire_order_before_fill(_1: &User, _2: usize, _3: i64) -> std::result::Result<bool, error::ErrorCode> {
    debug user => _1;
    debug order_index => _2;
    debug now => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: bool;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _6: std::result::Result<bool, error::ErrorCode>;
    let mut _7: &state::user::User;
    let mut _8: usize;
    let mut _9: i64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: bool;
    let _15: ();
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: &state::user::Order;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _24: std::result::Result<i64, error::ErrorCode>;
    let mut _25: i64;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: bool;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _33: std::result::Result<bool, error::ErrorCode>;
    let mut _34: &state::user::User;
    let mut _35: usize;
    let mut _36: i64;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: !;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: &std::string::String;
    let _47: &std::string::String;
    let _48: std::string::String;
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let mut _52: &[&str; 3];
    let _53: &[&str; 3];
    let _54: [&str; 3];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let mut _56: &[core::fmt::rt::Argument<'_>; 3];
    let _57: &[core::fmt::rt::Argument<'_>; 3];
    let _58: [core::fmt::rt::Argument<'_>; 3];
    let mut _59: core::fmt::rt::Argument<'_>;
    let mut _60: &i64;
    let _61: &i64;
    let _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &i64;
    let _67: &i64;
    let mut _68: core::fmt::rt::Argument<'_>;
    let mut _69: &i64;
    let _70: &i64;
    let mut _71: error::ErrorCode;
    let mut _72: bool;
    scope 1 {
        debug should_order_be_expired => _4;
        let _22: i64;
        let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _30: i64;
        scope 6 {
            debug now_sub_buffer => _22;
            let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _41: bool;
            let _49: std::string::String;
            let mut _73: &[&str; 3];
            scope 11 {
                debug residual => _38;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _41;
                scope 14 {
                }
            }
            scope 15 {
                debug res => _49;
            }
        }
        scope 7 {
            debug residual => _27;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _30;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = _3;
        _6 = math::orders::should_expire_order(move _7, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_5 as Continue).0: bool);
        _4 = _14;
        StorageDead(_14);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _4;
        switchInt(move _16) -> [0: bb33, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        goto -> bb37;
    }

    bb7: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _20 = Len(((*_1).5: [state::user::Order; 32]));
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb8, unwind continue];
    }

    bb8: {
        _18 = &((*_1).5: [state::user::Order; 32])[_19];
        _17 = Order::is_limit_order(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _17) -> [0: bb32, otherwise: bb10];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _3;
        _24 = <i64 as SafeMath>::safe_sub(move _25, const 15_i64) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        _23 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: i64);
        _22 = _30;
        StorageDead(_30);
        StorageDead(_23);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_1);
        StorageLive(_35);
        _35 = _2;
        StorageLive(_36);
        _36 = _22;
        _33 = math::orders::should_expire_order(move _34, move _35, move _36) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_23);
        goto -> bb36;
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        _37 = discriminant(_32);
        switchInt(move _37) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_41);
        _41 = ((_32 as Continue).0: bool);
        _31 = _41;
        StorageDead(_41);
        switchInt(move _31) -> [0: bb22, otherwise: bb21];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_32);
        goto -> bb35;
    }

    bb21: {
        StorageDead(_32);
        _15 = const ();
        StorageDead(_31);
        StorageDead(_22);
        goto -> bb34;
    }

    bb22: {
        StorageDead(_32);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _73 = const _;
        _53 = &(*_73);
        _52 = &(*_53);
        _51 = move _52 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _2;
        _63 = Len(((*_1).5: [state::user::Order; 32]));
        _64 = Lt(_62, _63);
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb23, unwind continue];
    }

    bb23: {
        _61 = &(((*_1).5: [state::user::Order; 32])[_62].8: i64);
        _60 = &(*_61);
        _59 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _60) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_60);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_3;
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _66) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_22;
        _69 = &(*_70);
        _68 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _69) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_69);
        _58 = [move _59, move _65, move _68];
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = move _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_56);
        _50 = Arguments::<'_>::new_v1(move _51, move _55) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_51);
        _49 = format(move _50) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_50);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_53);
        _48 = move _49;
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = <String as Deref>::deref(move _46) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        _44 = &(*_45);
        StorageDead(_46);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        StorageDead(_44);
        drop(_48) -> [return: bb31, unwind: bb40];
    }

    bb31: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_71);
        _71 = error::ErrorCode::ImpossibleFill;
        _0 = std::result::Result::<bool, error::ErrorCode>::Err(move _71);
        StorageDead(_71);
        goto -> bb35;
    }

    bb32: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb33;
    }

    bb33: {
        _15 = const ();
        goto -> bb34;
    }

    bb34: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_72);
        _72 = _4;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        StorageDead(_4);
        goto -> bb38;
    }

    bb35: {
        StorageDead(_31);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_4);
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_48) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }
}
