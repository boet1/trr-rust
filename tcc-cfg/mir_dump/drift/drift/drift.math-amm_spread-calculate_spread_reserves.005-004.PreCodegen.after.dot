digraph Mir_0_1875 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_spread_reserves(_1: &amp;ReErased state::perp_market::PerpMarket, _2: controller::position::PositionDirection) -&gt; std::result::Result&lt;(u128, u128), error::ErrorCode&gt;<br align="left"/>let _3: u32;<br align="left"/>let mut _4: isize;<br align="left"/>let _5: i32;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _8: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _9: controller::position::PositionDirection;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i32&gt;;<br align="left"/>let mut _11: std::result::Result&lt;i32, error::ErrorCode&gt;;<br align="left"/>let mut _12: i32;<br align="left"/>let mut _13: i32;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i32&gt;;<br align="left"/>let mut _15: std::result::Result&lt;i32, error::ErrorCode&gt;;<br align="left"/>let mut _16: u32;<br align="left"/>let mut _17: isize;<br align="left"/>let _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _19: !;<br align="left"/>let mut _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _21: i32;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: i32;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _28: i32;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i32&gt;;<br align="left"/>let mut _30: std::result::Result&lt;i32, error::ErrorCode&gt;;<br align="left"/>let mut _31: i32;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i32&gt;;<br align="left"/>let mut _33: std::result::Result&lt;i32, error::ErrorCode&gt;;<br align="left"/>let mut _34: u32;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: i32;<br align="left"/>let mut _40: i32;<br align="left"/>let mut _41: isize;<br align="left"/>let _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _43: !;<br align="left"/>let mut _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _45: i32;<br align="left"/>let _46: i128;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: i32;<br align="left"/>let mut _49: i32;<br align="left"/>let _50: i128;<br align="left"/>let mut _51: i128;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _53: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _54: i32;<br align="left"/>let mut _55: i32;<br align="left"/>let mut _56: bool;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: bool;<br align="left"/>let mut _60: isize;<br align="left"/>let _61: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _62: !;<br align="left"/>let mut _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _64: i128;<br align="left"/>let mut _65: bool;<br align="left"/>let mut _66: bool;<br align="left"/>let mut _67: bool;<br align="left"/>let mut _68: bool;<br align="left"/>let mut _69: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _70: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _71: i128;<br align="left"/>let mut _72: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _73: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _74: u128;<br align="left"/>let mut _75: isize;<br align="left"/>let _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _77: !;<br align="left"/>let mut _78: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _79: i128;<br align="left"/>let mut _80: i128;<br align="left"/>let mut _81: isize;<br align="left"/>let _82: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _83: !;<br align="left"/>let mut _84: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _85: i128;<br align="left"/>let mut _86: u128;<br align="left"/>let mut _87: bool;<br align="left"/>let mut _88: i128;<br align="left"/>let mut _89: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _90: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _91: u128;<br align="left"/>let mut _92: u128;<br align="left"/>let mut _93: i128;<br align="left"/>let mut _94: isize;<br align="left"/>let _95: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _96: !;<br align="left"/>let mut _97: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _98: u128;<br align="left"/>let mut _99: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _100: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _101: u128;<br align="left"/>let mut _102: u128;<br align="left"/>let mut _103: i128;<br align="left"/>let mut _104: isize;<br align="left"/>let _105: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _106: !;<br align="left"/>let mut _107: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _108: u128;<br align="left"/>let _109: ();<br align="left"/>let mut _110: bool;<br align="left"/>let mut _111: &amp;ReErased state::perp_market::ContractType;<br align="left"/>let mut _112: &amp;ReErased state::perp_market::ContractType;<br align="left"/>let _113: state::perp_market::ContractType;<br align="left"/>let _114: u128;<br align="left"/>let _115: u128;<br align="left"/>let mut _116: (u128, u128);<br align="left"/>let mut _117: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _118: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _119: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _120: controller::position::PositionDirection;<br align="left"/>let mut _121: isize;<br align="left"/>let _122: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _123: !;<br align="left"/>let mut _124: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _125: (u128, u128);<br align="left"/>let mut _126: u128;<br align="left"/>let mut _127: u128;<br align="left"/>let mut _128: u128;<br align="left"/>let mut _129: u128;<br align="left"/>let _130: math::bn::U192;<br align="left"/>let mut _131: u128;<br align="left"/>let _132: math::bn::U192;<br align="left"/>let mut _133: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _134: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _135: math::bn::U192;<br align="left"/>let mut _136: math::bn::U192;<br align="left"/>let mut _137: isize;<br align="left"/>let _138: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _139: !;<br align="left"/>let mut _140: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _141: math::bn::U192;<br align="left"/>let _142: u128;<br align="left"/>let mut _143: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _144: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _145: math::bn::U192;<br align="left"/>let mut _146: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U192&gt;;<br align="left"/>let mut _147: std::result::Result&lt;math::bn::U192, error::ErrorCode&gt;;<br align="left"/>let mut _148: math::bn::U192;<br align="left"/>let mut _149: math::bn::U192;<br align="left"/>let mut _150: u128;<br align="left"/>let mut _151: isize;<br align="left"/>let _152: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _153: !;<br align="left"/>let mut _154: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _155: math::bn::U192;<br align="left"/>let mut _156: isize;<br align="left"/>let _157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _158: !;<br align="left"/>let mut _159: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _160: u128;<br align="left"/>let mut _161: (u128, u128);<br align="left"/>let mut _162: u128;<br align="left"/>let mut _163: u128;<br align="left"/>let mut _164: &amp;ReErased state::perp_market::ContractType;<br align="left"/>let mut _165: &amp;ReErased controller::position::PositionDirection;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug spread =&gt; _3;<br align="left"/>debug spread_with_offset =&gt; _5;<br align="left"/>debug residual =&gt; _18;<br align="left"/>debug val =&gt; _21;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>debug residual =&gt; _42;<br align="left"/>debug val =&gt; _45;<br align="left"/>debug quote_asset_reserve_delta =&gt; _46;<br align="left"/>debug quote_reserve_divisor =&gt; _50;<br align="left"/>debug residual =&gt; _61;<br align="left"/>debug val =&gt; _64;<br align="left"/>debug residual =&gt; _76;<br align="left"/>debug val =&gt; _79;<br align="left"/>debug residual =&gt; _82;<br align="left"/>debug val =&gt; _85;<br align="left"/>debug quote_asset_reserve =&gt; _86;<br align="left"/>debug residual =&gt; _95;<br align="left"/>debug val =&gt; _98;<br align="left"/>debug residual =&gt; _105;<br align="left"/>debug val =&gt; _108;<br align="left"/>debug quote_asset_reserve_lower_bound =&gt; _114;<br align="left"/>debug quote_asset_reserve_upper_bound =&gt; _115;<br align="left"/>debug residual =&gt; _122;<br align="left"/>debug val =&gt; _125;<br align="left"/>debug invariant_sqrt_u192 =&gt; _130;<br align="left"/>debug invariant =&gt; _132;<br align="left"/>debug residual =&gt; _138;<br align="left"/>debug val =&gt; _141;<br align="left"/>debug base_asset_reserve =&gt; _142;<br align="left"/>debug residual =&gt; _152;<br align="left"/>debug val =&gt; _155;<br align="left"/>debug residual =&gt; _157;<br align="left"/>debug val =&gt; _160;<br align="left"/>>;
    bb0__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_4 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = (((*_1).1: state::perp_market::AMM).66: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_3 = (((*_1).1: state::perp_market::AMM).65: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;_2<br/>StorageLive(_8)<br/>_165 = const _<br/>_8 = &amp;(*_165)<br/></td></tr><tr><td align="left">_6 = &lt;controller::position::PositionDirection as PartialEq&gt;::eq(move _7, move _8)</td></tr></table>>];
    bb5__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb6__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _3<br/></td></tr><tr><td align="left">_15 = &lt;u32 as Cast&gt;::cast::&lt;i32&gt;(move _16)</td></tr></table>>];
    bb7__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;i32, error::ErrorCode&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb8__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_17 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb9__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_14 as Continue).0: i32)<br/>_13 = _21<br/>StorageDead(_21)<br/>_22 = Eq(_13, const i32::MIN)<br/></td></tr><tr><td align="left">assert(!move _22, &quot;attempt to negate `{}`, which would overflow&quot;, _13)</td></tr></table>>];
    bb10__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_20)<br/>_20 = _18<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _20)</td></tr></table>>];
    bb11__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_12 = Neg(move _13)<br/>StorageDead(_13)<br/>StorageLive(_23)<br/>_23 = (((*_1).1: state::perp_market::AMM).82: i32)<br/></td></tr><tr><td align="left">_11 = &lt;i32 as SafeMath&gt;::safe_add(move _12, move _23)</td></tr></table>>];
    bb13__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;i32, error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb14__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_24 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb15__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_10 as Continue).0: i32)<br/>_5 = _28<br/>StorageDead(_28)<br/>StorageDead(_14)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_27)<br/>_27 = _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb17__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _3<br/></td></tr><tr><td align="left">_33 = &lt;u32 as Cast&gt;::cast::&lt;i32&gt;(move _34)</td></tr></table>>];
    bb19__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;i32, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb20__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_35 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb21__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_32 as Continue).0: i32)<br/>_31 = _39<br/>StorageDead(_39)<br/>StorageLive(_40)<br/>_40 = (((*_1).1: state::perp_market::AMM).82: i32)<br/></td></tr><tr><td align="left">_30 = &lt;i32 as SafeMath&gt;::safe_add(move _31, move _40)</td></tr></table>>];
    bb22__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb23__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;i32, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb25__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_41 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb26__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_29 as Continue).0: i32)<br/>_5 = _45<br/>StorageDead(_45)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_44)<br/>_44 = _42<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _44)</td></tr></table>>];
    bb28__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _5<br/></td></tr><tr><td align="left">_48 = core::num::&lt;impl i32&gt;::abs(move _49)</td></tr></table>>];
    bb30__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_47 = Gt(move _48, const 1_i32)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb31__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _5<br/>_56 = Eq(const 2_i32, const 0_i32)<br/></td></tr><tr><td align="left">assert(!move _56, &quot;attempt to divide `{}` by zero&quot;, _55)</td></tr></table>>];
    bb32__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_57 = Eq(const 2_i32, const -1_i32)<br/>_58 = Eq(_55, const i32::MIN)<br/>_59 = BitAnd(move _57, move _58)<br/></td></tr><tr><td align="left">assert(!move _59, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _55, const 2_i32)</td></tr></table>>];
    bb33__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_54 = Div(move _55, const 2_i32)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_53 = &lt;i32 as Cast&gt;::cast::&lt;i128&gt;(move _54)</td></tr></table>>];
    bb34__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb35__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_60 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb36__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_64 = ((_52 as Continue).0: i128)<br/>_51 = _64<br/>StorageDead(_64)<br/>_65 = Eq(_51, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _65, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb37__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_63)<br/>_63 = _61<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _63)</td></tr></table>>];
    bb38__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_51)<br/>StorageDead(_52)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_66 = Eq(_51, const -1_i128)<br/>_67 = Eq(const _, const i128::MIN)<br/>_68 = BitAnd(move _66, move _67)<br/></td></tr><tr><td align="left">assert(!move _68, &quot;attempt to compute `{} / {}`, which would overflow&quot;, const _, _51)</td></tr></table>>];
    bb40__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_50 = Div(const _, move _51)<br/>StorageDead(_51)<br/>StorageDead(_52)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = (((*_1).1: state::perp_market::AMM).6: u128)<br/></td></tr><tr><td align="left">_73 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _74)</td></tr></table>>];
    bb41__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/></td></tr><tr><td align="left">_72 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _73)</td></tr></table>>];
    bb42__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>_75 = discriminant(_72)<br/></td></tr><tr><td align="left">switchInt(move _75)</td></tr></table>>];
    bb43__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_72 as Continue).0: i128)<br/>_71 = _79<br/>StorageDead(_79)<br/>StorageLive(_80)<br/>_80 = _50<br/></td></tr><tr><td align="left">_70 = &lt;i128 as SafeMath&gt;::safe_div(move _71, move _80)</td></tr></table>>];
    bb44__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = ((_72 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_78)<br/>_78 = _76<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _78)</td></tr></table>>];
    bb45__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_76)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">_69 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _70)</td></tr></table>>];
    bb47__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_81 = discriminant(_69)<br/></td></tr><tr><td align="left">switchInt(move _81)</td></tr></table>>];
    bb48__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_85)<br/>_85 = ((_69 as Continue).0: i128)<br/>_46 = _85<br/>StorageDead(_85)<br/>StorageDead(_50)<br/>StorageDead(_72)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_69 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_84)<br/>_84 = _82<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _84)</td></tr></table>>];
    bb50__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_46 = const 0_i128<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_88 = _46<br/>_87 = Gt(move _88, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _87)</td></tr></table>>];
    bb53__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = (((*_1).1: state::perp_market::AMM).6: u128)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = _46<br/></td></tr><tr><td align="left">_92 = core::num::&lt;impl i128&gt;::unsigned_abs(move _93)</td></tr></table>>];
    bb54__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/></td></tr><tr><td align="left">_90 = &lt;u128 as SafeMath&gt;::safe_add(move _91, move _92)</td></tr></table>>];
    bb55__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">_89 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _90)</td></tr></table>>];
    bb56__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>_94 = discriminant(_89)<br/></td></tr><tr><td align="left">switchInt(move _94)</td></tr></table>>];
    bb57__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageLive(_98)<br/>_98 = ((_89 as Continue).0: u128)<br/>_86 = _98<br/>StorageDead(_98)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageLive(_95)<br/>_95 = ((_89 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_97)<br/>_97 = _95<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _97)</td></tr></table>>];
    bb59__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_95)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>_101 = (((*_1).1: state::perp_market::AMM).6: u128)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = _46<br/></td></tr><tr><td align="left">_102 = core::num::&lt;impl i128&gt;::unsigned_abs(move _103)</td></tr></table>>];
    bb61__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/></td></tr><tr><td align="left">_100 = &lt;u128 as SafeMath&gt;::safe_sub(move _101, move _102)</td></tr></table>>];
    bb62__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_101)<br/></td></tr><tr><td align="left">_99 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _100)</td></tr></table>>];
    bb63__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>_104 = discriminant(_99)<br/></td></tr><tr><td align="left">switchInt(move _104)</td></tr></table>>];
    bb64__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_108)<br/>_108 = ((_99 as Continue).0: u128)<br/>_86 = _108<br/>StorageDead(_108)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_99 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_107)<br/>_107 = _105<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _107)</td></tr></table>>];
    bb66__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageDead(_105)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>_111 = &amp;((*_1).23: state::perp_market::ContractType)<br/>StorageLive(_112)<br/>_164 = const _<br/>_112 = &amp;(*_164)<br/></td></tr><tr><td align="left">_110 = &lt;ContractType as PartialEq&gt;::eq(move _111, move _112)</td></tr></table>>];
    bb68__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left">switchInt(move _110)</td></tr></table>>];
    bb69__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_111)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>_119 = &amp;(*_1)<br/>StorageLive(_120)<br/>_120 = _2<br/></td></tr><tr><td align="left">_118 = PerpMarket::get_quote_asset_reserve_prediction_market_bounds(move _119, move _120)</td></tr></table>>];
    bb70__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_117 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _118)</td></tr></table>>];
    bb71__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>_121 = discriminant(_117)<br/></td></tr><tr><td align="left">switchInt(move _121)</td></tr></table>>];
    bb72__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_125)<br/>_125 = ((_117 as Continue).0: (u128, u128))<br/>_116 = _125<br/>StorageDead(_125)<br/>StorageLive(_114)<br/>_114 = (_116.0: u128)<br/>StorageLive(_115)<br/>_115 = (_116.1: u128)<br/>StorageDead(_117)<br/>StorageDead(_116)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>_127 = _86<br/>StorageLive(_128)<br/>_128 = _114<br/>StorageLive(_129)<br/>_129 = _115<br/></td></tr><tr><td align="left">_126 = &lt;u128 as Ord&gt;::clamp(move _127, move _128, move _129)</td></tr></table>>];
    bb73__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = ((_117 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_124)<br/>_124 = _122<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _124)</td></tr></table>>];
    bb74__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_117)<br/>StorageDead(_116)<br/>StorageDead(_110)<br/>StorageDead(_109)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_128)<br/>StorageDead(_127)<br/>_86 = move _126<br/>StorageDead(_126)<br/>_109 = const ()<br/>StorageDead(_115)<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_111)<br/>_109 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_109)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>_131 = (((*_1).1: state::perp_market::AMM).10: u128)<br/></td></tr><tr><td align="left">_130 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _131)</td></tr></table>>];
    bb78__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>_135 = _130<br/>StorageLive(_136)<br/>_136 = _130<br/></td></tr><tr><td align="left">_134 = &lt;U192 as SafeMath&gt;::safe_mul(move _135, move _136)</td></tr></table>>];
    bb79__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_135)<br/></td></tr><tr><td align="left">_133 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _134)</td></tr></table>>];
    bb80__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>_137 = discriminant(_133)<br/></td></tr><tr><td align="left">switchInt(move _137)</td></tr></table>>];
    bb81__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_141)<br/>_141 = ((_133 as Continue).0: math::bn::U192)<br/>_132 = _141<br/>StorageDead(_141)<br/>StorageDead(_133)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>_148 = _132<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>_150 = _86<br/></td></tr><tr><td align="left">_149 = &lt;U192 as From&lt;u128&gt;&gt;::from(move _150)</td></tr></table>>];
    bb82__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageLive(_138)<br/>_138 = ((_133 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_140)<br/>_140 = _138<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _140)</td></tr></table>>];
    bb83__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>StorageDead(_138)<br/>StorageDead(_133)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/></td></tr><tr><td align="left">_147 = &lt;U192 as SafeMath&gt;::safe_div(move _148, move _149)</td></tr></table>>];
    bb85__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_148)<br/></td></tr><tr><td align="left">_146 = &lt;std::result::Result&lt;U192, error::ErrorCode&gt; as Try&gt;::branch(move _147)</td></tr></table>>];
    bb86__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/>_151 = discriminant(_146)<br/></td></tr><tr><td align="left">switchInt(move _151)</td></tr></table>>];
    bb87__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageLive(_155)<br/>_155 = ((_146 as Continue).0: math::bn::U192)<br/>_145 = _155<br/>StorageDead(_155)<br/></td></tr><tr><td align="left">_144 = U192::try_to_u128(move _145)</td></tr></table>>];
    bb88__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_152)<br/>_152 = ((_146 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_154)<br/>_154 = _152<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _154)</td></tr></table>>];
    bb89__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_152)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb90__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_145)<br/></td></tr><tr><td align="left">_143 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _144)</td></tr></table>>];
    bb91__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>_156 = discriminant(_143)<br/></td></tr><tr><td align="left">switchInt(move _156)</td></tr></table>>];
    bb92__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageLive(_160)<br/>_160 = ((_143 as Continue).0: u128)<br/>_142 = _160<br/>StorageDead(_160)<br/>StorageDead(_146)<br/>StorageDead(_143)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>_162 = _142<br/>StorageLive(_163)<br/>_163 = _86<br/>_161 = (move _162, move _163)<br/>StorageDead(_163)<br/>StorageDead(_162)<br/>_0 = std::result::Result::&lt;(u128, u128), error::ErrorCode&gt;::Ok(move _161)<br/>StorageDead(_161)<br/>StorageDead(_142)<br/>StorageDead(_132)<br/>StorageDead(_130)<br/>StorageDead(_86)<br/>StorageDead(_46)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>_157 = ((_143 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_159)<br/>_159 = _157<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _159)</td></tr></table>>];
    bb94__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_157)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb95__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>StorageDead(_143)<br/>StorageDead(_142)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_132)<br/>StorageDead(_130)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb97__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb98__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb99__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_72)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb100__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb101__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb102__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb103__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb104__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb105__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb106__0_1875 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1875 -> bb3__0_1875 [label="0"];
    bb0__0_1875 -> bb1__0_1875 [label="1"];
    bb0__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb1__0_1875 -> bb4__0_1875 [label=""];
    bb3__0_1875 -> bb4__0_1875 [label=""];
    bb4__0_1875 -> bb5__0_1875 [label="return"];
    bb5__0_1875 -> bb18__0_1875 [label="0"];
    bb5__0_1875 -> bb6__0_1875 [label="otherwise"];
    bb6__0_1875 -> bb7__0_1875 [label="return"];
    bb7__0_1875 -> bb8__0_1875 [label="return"];
    bb8__0_1875 -> bb9__0_1875 [label="0"];
    bb8__0_1875 -> bb10__0_1875 [label="1"];
    bb8__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb9__0_1875 -> bb12__0_1875 [label="success"];
    bb10__0_1875 -> bb11__0_1875 [label="return"];
    bb11__0_1875 -> bb103__0_1875 [label=""];
    bb12__0_1875 -> bb13__0_1875 [label="return"];
    bb13__0_1875 -> bb14__0_1875 [label="return"];
    bb14__0_1875 -> bb15__0_1875 [label="0"];
    bb14__0_1875 -> bb16__0_1875 [label="1"];
    bb14__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb15__0_1875 -> bb29__0_1875 [label=""];
    bb16__0_1875 -> bb17__0_1875 [label="return"];
    bb17__0_1875 -> bb103__0_1875 [label=""];
    bb18__0_1875 -> bb19__0_1875 [label="return"];
    bb19__0_1875 -> bb20__0_1875 [label="return"];
    bb20__0_1875 -> bb21__0_1875 [label="0"];
    bb20__0_1875 -> bb22__0_1875 [label="1"];
    bb20__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb21__0_1875 -> bb24__0_1875 [label="return"];
    bb22__0_1875 -> bb23__0_1875 [label="return"];
    bb23__0_1875 -> bb102__0_1875 [label=""];
    bb24__0_1875 -> bb25__0_1875 [label="return"];
    bb25__0_1875 -> bb26__0_1875 [label="0"];
    bb25__0_1875 -> bb27__0_1875 [label="1"];
    bb25__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb26__0_1875 -> bb29__0_1875 [label=""];
    bb27__0_1875 -> bb28__0_1875 [label="return"];
    bb28__0_1875 -> bb102__0_1875 [label=""];
    bb29__0_1875 -> bb30__0_1875 [label="return"];
    bb30__0_1875 -> bb51__0_1875 [label="0"];
    bb30__0_1875 -> bb31__0_1875 [label="otherwise"];
    bb31__0_1875 -> bb32__0_1875 [label="success"];
    bb32__0_1875 -> bb33__0_1875 [label="success"];
    bb33__0_1875 -> bb34__0_1875 [label="return"];
    bb34__0_1875 -> bb35__0_1875 [label="return"];
    bb35__0_1875 -> bb36__0_1875 [label="0"];
    bb35__0_1875 -> bb37__0_1875 [label="1"];
    bb35__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb36__0_1875 -> bb39__0_1875 [label="success"];
    bb37__0_1875 -> bb38__0_1875 [label="return"];
    bb38__0_1875 -> bb100__0_1875 [label=""];
    bb39__0_1875 -> bb40__0_1875 [label="success"];
    bb40__0_1875 -> bb41__0_1875 [label="return"];
    bb41__0_1875 -> bb42__0_1875 [label="return"];
    bb42__0_1875 -> bb43__0_1875 [label="0"];
    bb42__0_1875 -> bb44__0_1875 [label="1"];
    bb42__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb43__0_1875 -> bb46__0_1875 [label="return"];
    bb44__0_1875 -> bb45__0_1875 [label="return"];
    bb45__0_1875 -> bb99__0_1875 [label=""];
    bb46__0_1875 -> bb47__0_1875 [label="return"];
    bb47__0_1875 -> bb48__0_1875 [label="0"];
    bb47__0_1875 -> bb49__0_1875 [label="1"];
    bb47__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb48__0_1875 -> bb52__0_1875 [label=""];
    bb49__0_1875 -> bb50__0_1875 [label="return"];
    bb50__0_1875 -> bb99__0_1875 [label=""];
    bb51__0_1875 -> bb52__0_1875 [label=""];
    bb52__0_1875 -> bb60__0_1875 [label="0"];
    bb52__0_1875 -> bb53__0_1875 [label="otherwise"];
    bb53__0_1875 -> bb54__0_1875 [label="return"];
    bb54__0_1875 -> bb55__0_1875 [label="return"];
    bb55__0_1875 -> bb56__0_1875 [label="return"];
    bb56__0_1875 -> bb57__0_1875 [label="0"];
    bb56__0_1875 -> bb58__0_1875 [label="1"];
    bb56__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb57__0_1875 -> bb67__0_1875 [label=""];
    bb58__0_1875 -> bb59__0_1875 [label="return"];
    bb59__0_1875 -> bb97__0_1875 [label=""];
    bb60__0_1875 -> bb61__0_1875 [label="return"];
    bb61__0_1875 -> bb62__0_1875 [label="return"];
    bb62__0_1875 -> bb63__0_1875 [label="return"];
    bb63__0_1875 -> bb64__0_1875 [label="0"];
    bb63__0_1875 -> bb65__0_1875 [label="1"];
    bb63__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb64__0_1875 -> bb67__0_1875 [label=""];
    bb65__0_1875 -> bb66__0_1875 [label="return"];
    bb66__0_1875 -> bb97__0_1875 [label=""];
    bb67__0_1875 -> bb68__0_1875 [label="return"];
    bb68__0_1875 -> bb76__0_1875 [label="0"];
    bb68__0_1875 -> bb69__0_1875 [label="otherwise"];
    bb69__0_1875 -> bb70__0_1875 [label="return"];
    bb70__0_1875 -> bb71__0_1875 [label="return"];
    bb71__0_1875 -> bb72__0_1875 [label="0"];
    bb71__0_1875 -> bb73__0_1875 [label="1"];
    bb71__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb72__0_1875 -> bb75__0_1875 [label="return"];
    bb73__0_1875 -> bb74__0_1875 [label="return"];
    bb74__0_1875 -> bb98__0_1875 [label=""];
    bb75__0_1875 -> bb77__0_1875 [label=""];
    bb76__0_1875 -> bb77__0_1875 [label=""];
    bb77__0_1875 -> bb78__0_1875 [label="return"];
    bb78__0_1875 -> bb79__0_1875 [label="return"];
    bb79__0_1875 -> bb80__0_1875 [label="return"];
    bb80__0_1875 -> bb81__0_1875 [label="0"];
    bb80__0_1875 -> bb82__0_1875 [label="1"];
    bb80__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb81__0_1875 -> bb84__0_1875 [label="return"];
    bb82__0_1875 -> bb83__0_1875 [label="return"];
    bb83__0_1875 -> bb96__0_1875 [label=""];
    bb84__0_1875 -> bb85__0_1875 [label="return"];
    bb85__0_1875 -> bb86__0_1875 [label="return"];
    bb86__0_1875 -> bb87__0_1875 [label="0"];
    bb86__0_1875 -> bb88__0_1875 [label="1"];
    bb86__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb87__0_1875 -> bb90__0_1875 [label="return"];
    bb88__0_1875 -> bb89__0_1875 [label="return"];
    bb89__0_1875 -> bb95__0_1875 [label=""];
    bb90__0_1875 -> bb91__0_1875 [label="return"];
    bb91__0_1875 -> bb92__0_1875 [label="0"];
    bb91__0_1875 -> bb93__0_1875 [label="1"];
    bb91__0_1875 -> bb2__0_1875 [label="otherwise"];
    bb92__0_1875 -> bb106__0_1875 [label=""];
    bb93__0_1875 -> bb94__0_1875 [label="return"];
    bb94__0_1875 -> bb95__0_1875 [label=""];
    bb95__0_1875 -> bb96__0_1875 [label=""];
    bb96__0_1875 -> bb98__0_1875 [label=""];
    bb97__0_1875 -> bb98__0_1875 [label=""];
    bb98__0_1875 -> bb101__0_1875 [label=""];
    bb99__0_1875 -> bb100__0_1875 [label=""];
    bb100__0_1875 -> bb101__0_1875 [label=""];
    bb101__0_1875 -> bb105__0_1875 [label=""];
    bb102__0_1875 -> bb104__0_1875 [label=""];
    bb103__0_1875 -> bb104__0_1875 [label=""];
    bb104__0_1875 -> bb105__0_1875 [label=""];
    bb105__0_1875 -> bb106__0_1875 [label=""];
}
