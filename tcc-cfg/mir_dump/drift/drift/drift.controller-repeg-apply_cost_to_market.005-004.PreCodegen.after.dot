digraph Mir_0_747 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn apply_cost_to_market(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: i128, _3: bool) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: i128;<br align="left"/>let _7: i128;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _9: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _10: i128;<br align="left"/>let mut _11: i128;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _16: i128;<br align="left"/>let _17: i128;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _19: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _22: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _23: u128;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _25: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _26: u128;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _28: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _29: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: u128;<br align="left"/>let mut _35: u128;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: u128;<br align="left"/>let mut _41: u128;<br align="left"/>let mut _42: isize;<br align="left"/>let _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _44: !;<br align="left"/>let mut _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _46: u128;<br align="left"/>let mut _47: isize;<br align="left"/>let _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _49: !;<br align="left"/>let mut _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _51: i128;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: i128;<br align="left"/>let mut _55: i128;<br align="left"/>let mut _56: i128;<br align="left"/>let mut _57: !;<br align="left"/>let mut _58: i128;<br align="left"/>let mut _59: i128;<br align="left"/>let mut _60: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _61: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _62: i128;<br align="left"/>let mut _63: i128;<br align="left"/>let mut _64: i128;<br align="left"/>let mut _65: isize;<br align="left"/>let _66: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _67: !;<br align="left"/>let mut _68: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _69: i128;<br align="left"/>let mut _70: i64;<br align="left"/>let mut _71: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _72: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _73: i64;<br align="left"/>let mut _74: i64;<br align="left"/>let mut _75: i128;<br align="left"/>let mut _76: isize;<br align="left"/>let _77: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _78: !;<br align="left"/>let mut _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _80: i64;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug cost =&gt; _2;<br align="left"/>debug check_lower_bound =&gt; _3;<br align="left"/>debug new_total_fee_minus_distributions =&gt; _7;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>debug fee_reserved_for_protocol =&gt; _17;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>debug residual =&gt; _43;<br align="left"/>debug val =&gt; _46;<br align="left"/>debug residual =&gt; _48;<br align="left"/>debug val =&gt; _51;<br align="left"/>debug residual =&gt; _66;<br align="left"/>debug val =&gt; _69;<br align="left"/>debug residual =&gt; _77;<br align="left"/>debug val =&gt; _80;<br align="left"/>>;
    bb0__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _2<br/>_5 = Gt(move _6, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = (((*_1).1: state::perp_market::AMM).31: i128)<br/>StorageLive(_11)<br/>_11 = _2<br/></td></tr><tr><td align="left">_9 = &lt;i128 as SafeMath&gt;::safe_sub(move _10, move _11)</td></tr></table>>];
    bb2__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb3__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_12 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_8 as Continue).0: i128)<br/>_7 = _16<br/>StorageDead(_16)<br/>StorageDead(_8)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;(*_1)<br/></td></tr><tr><td align="left">_28 = get_total_fee_lower_bound(move _29)</td></tr></table>>];
    bb5__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_15)<br/>_15 = _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb7__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb9__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_30 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb10__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Continue).0: u128)<br/>_26 = _34<br/>StorageDead(_34)<br/>StorageLive(_35)<br/>_35 = (((*_1).1: state::perp_market::AMM).33: u128)<br/></td></tr><tr><td align="left">_25 = &lt;u128 as SafeMath&gt;::safe_add(move _26, move _35)</td></tr></table>>];
    bb11__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb12__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb14__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_36 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb15__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_24 as Continue).0: u128)<br/>_23 = _40<br/>StorageDead(_40)<br/>StorageLive(_41)<br/>_41 = (((*_1).1: state::perp_market::AMM).32: u128)<br/></td></tr><tr><td align="left">_22 = &lt;u128 as SafeMath&gt;::safe_sub(move _23, move _41)</td></tr></table>>];
    bb16__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb17__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _22)</td></tr></table>>];
    bb19__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_42 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb20__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_21 as Continue).0: u128)<br/>_20 = _46<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_19 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _20)</td></tr></table>>];
    bb21__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_21 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_45)<br/>_45 = _43<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _45)</td></tr></table>>];
    bb22__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb24__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_47 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb25__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_18 as Continue).0: i128)<br/>_17 = _51<br/>StorageDead(_51)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/>StorageLive(_52)<br/>_52 = _3<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb26__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_50)<br/>_50 = _48<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _50)</td></tr></table>>];
    bb27__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = _7<br/>StorageLive(_55)<br/>_55 = _17<br/>_53 = Ge(move _54, move _55)<br/></td></tr><tr><td align="left">switchInt(move _53)</td></tr></table>>];
    bb29__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = _7<br/>(((*_1).1: state::perp_market::AMM).31: i128) = move _58<br/>StorageDead(_58)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_54)<br/>StorageLive(_56)<br/>_56 = _7<br/>(((*_1).1: state::perp_market::AMM).31: i128) = move _56<br/>StorageDead(_56)<br/>_4 = const ()<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_54)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const false)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_17)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = (((*_1).1: state::perp_market::AMM).31: i128)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _2<br/></td></tr><tr><td align="left">_63 = core::num::&lt;impl i128&gt;::abs(move _64)</td></tr></table>>];
    bb34__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/></td></tr><tr><td align="left">_61 = &lt;i128 as SafeMath&gt;::safe_add(move _62, move _63)</td></tr></table>>];
    bb35__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_60 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _61)</td></tr></table>>];
    bb36__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_65 = discriminant(_60)<br/></td></tr><tr><td align="left">switchInt(move _65)</td></tr></table>>];
    bb37__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_69)<br/>_69 = ((_60 as Continue).0: i128)<br/>_59 = _69<br/>StorageDead(_69)<br/>(((*_1).1: state::perp_market::AMM).31: i128) = move _59<br/>StorageDead(_59)<br/>StorageDead(_60)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_60 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_68)<br/>_68 = _66<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _68)</td></tr></table>>];
    bb39__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_66)<br/>StorageDead(_59)<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = (((*_1).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = _2<br/>_74 = move _75 as i64 (IntToInt)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">_72 = &lt;i64 as SafeMath&gt;::safe_sub(move _73, move _74)</td></tr></table>>];
    bb41__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">_71 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _72)</td></tr></table>>];
    bb42__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>_76 = discriminant(_71)<br/></td></tr><tr><td align="left">switchInt(move _76)</td></tr></table>>];
    bb43__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_71 as Continue).0: i64)<br/>_70 = _80<br/>StorageDead(_80)<br/>(((*_1).1: state::perp_market::AMM).49: i64) = move _70<br/>StorageDead(_70)<br/>StorageDead(_71)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_71 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_79)<br/>_79 = _77<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _79)</td></tr></table>>];
    bb45__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_77)<br/>StorageDead(_70)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_747 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_747 -> bb33__0_747 [label="0"];
    bb0__0_747 -> bb1__0_747 [label="otherwise"];
    bb1__0_747 -> bb2__0_747 [label="return"];
    bb2__0_747 -> bb3__0_747 [label="return"];
    bb3__0_747 -> bb4__0_747 [label="0"];
    bb3__0_747 -> bb6__0_747 [label="1"];
    bb3__0_747 -> bb5__0_747 [label="otherwise"];
    bb4__0_747 -> bb8__0_747 [label="return"];
    bb6__0_747 -> bb7__0_747 [label="return"];
    bb7__0_747 -> bb50__0_747 [label=""];
    bb8__0_747 -> bb9__0_747 [label="return"];
    bb9__0_747 -> bb10__0_747 [label="0"];
    bb9__0_747 -> bb11__0_747 [label="1"];
    bb9__0_747 -> bb5__0_747 [label="otherwise"];
    bb10__0_747 -> bb13__0_747 [label="return"];
    bb11__0_747 -> bb12__0_747 [label="return"];
    bb12__0_747 -> bb46__0_747 [label=""];
    bb13__0_747 -> bb14__0_747 [label="return"];
    bb14__0_747 -> bb15__0_747 [label="0"];
    bb14__0_747 -> bb16__0_747 [label="1"];
    bb14__0_747 -> bb5__0_747 [label="otherwise"];
    bb15__0_747 -> bb18__0_747 [label="return"];
    bb16__0_747 -> bb17__0_747 [label="return"];
    bb17__0_747 -> bb46__0_747 [label=""];
    bb18__0_747 -> bb19__0_747 [label="return"];
    bb19__0_747 -> bb20__0_747 [label="0"];
    bb19__0_747 -> bb21__0_747 [label="1"];
    bb19__0_747 -> bb5__0_747 [label="otherwise"];
    bb20__0_747 -> bb23__0_747 [label="return"];
    bb21__0_747 -> bb22__0_747 [label="return"];
    bb22__0_747 -> bb47__0_747 [label=""];
    bb23__0_747 -> bb24__0_747 [label="return"];
    bb24__0_747 -> bb25__0_747 [label="0"];
    bb24__0_747 -> bb26__0_747 [label="1"];
    bb24__0_747 -> bb5__0_747 [label="otherwise"];
    bb25__0_747 -> bb29__0_747 [label="0"];
    bb25__0_747 -> bb28__0_747 [label="otherwise"];
    bb26__0_747 -> bb27__0_747 [label="return"];
    bb27__0_747 -> bb48__0_747 [label=""];
    bb28__0_747 -> bb31__0_747 [label="0"];
    bb28__0_747 -> bb30__0_747 [label="otherwise"];
    bb29__0_747 -> bb32__0_747 [label=""];
    bb30__0_747 -> bb32__0_747 [label=""];
    bb31__0_747 -> bb49__0_747 [label=""];
    bb32__0_747 -> bb40__0_747 [label=""];
    bb33__0_747 -> bb34__0_747 [label="return"];
    bb34__0_747 -> bb35__0_747 [label="return"];
    bb35__0_747 -> bb36__0_747 [label="return"];
    bb36__0_747 -> bb37__0_747 [label="0"];
    bb36__0_747 -> bb38__0_747 [label="1"];
    bb36__0_747 -> bb5__0_747 [label="otherwise"];
    bb37__0_747 -> bb40__0_747 [label=""];
    bb38__0_747 -> bb39__0_747 [label="return"];
    bb39__0_747 -> bb51__0_747 [label=""];
    bb40__0_747 -> bb41__0_747 [label="return"];
    bb41__0_747 -> bb42__0_747 [label="return"];
    bb42__0_747 -> bb43__0_747 [label="0"];
    bb42__0_747 -> bb44__0_747 [label="1"];
    bb42__0_747 -> bb5__0_747 [label="otherwise"];
    bb43__0_747 -> bb52__0_747 [label=""];
    bb44__0_747 -> bb45__0_747 [label="return"];
    bb45__0_747 -> bb52__0_747 [label=""];
    bb46__0_747 -> bb47__0_747 [label=""];
    bb47__0_747 -> bb48__0_747 [label=""];
    bb48__0_747 -> bb49__0_747 [label=""];
    bb49__0_747 -> bb50__0_747 [label=""];
    bb50__0_747 -> bb51__0_747 [label=""];
    bb51__0_747 -> bb52__0_747 [label=""];
}
