// MIR for `calculate_perp_if_fee` after PreCodegen

fn calculate_perp_if_fee(_1: u128, _2: u64, _3: u32, _4: u32, _5: i64, _6: i64, _7: u32) -> std::result::Result<u32, error::ErrorCode> {
    debug margin_shortage => _1;
    debug user_base_asset_amount => _2;
    debug margin_ratio => _3;
    debug liquidator_fee => _4;
    debug oracle_price => _5;
    debug quote_oracle_price => _6;
    debug max_if_liquidation_fee => _7;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _8: u32;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _10: std::result::Result<u32, error::ErrorCode>;
    let mut _11: u32;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u32;
    let _17: ();
    let mut _18: bool;
    let mut _19: i64;
    let mut _20: bool;
    let mut _21: i64;
    let mut _22: bool;
    let mut _23: u32;
    let mut _24: u32;
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: !;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _30: std::result::Result<u128, error::ErrorCode>;
    let mut _31: u128;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _33: std::result::Result<u128, error::ErrorCode>;
    let mut _34: u128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _36: std::result::Result<u128, error::ErrorCode>;
    let mut _37: i64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: i64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _64: std::result::Result<u32, error::ErrorCode>;
    let mut _65: u32;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _67: std::result::Result<u32, error::ErrorCode>;
    let mut _68: u32;
    let mut _69: u32;
    let mut _70: u32;
    let mut _71: u32;
    let mut _72: u32;
    let mut _73: std::result::Result<u32, error::ErrorCode>;
    let mut _74: u128;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _76: std::result::Result<u128, error::ErrorCode>;
    let mut _77: u128;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _79: std::result::Result<u128, error::ErrorCode>;
    let mut _80: u128;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _82: std::result::Result<u128, error::ErrorCode>;
    let mut _83: u128;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _85: std::result::Result<u128, error::ErrorCode>;
    let mut _86: u128;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: u128;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _94: std::result::Result<u128, error::ErrorCode>;
    let mut _95: u64;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: u128;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: u32;
    let mut _128: u32;
    let mut _129: u32;
    scope 1 {
        debug margin_ratio => _8;
        let _28: u128;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: u128;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: u128;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: u128;
        scope 6 {
            debug price => _28;
            let _62: u32;
            let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _91: u128;
            let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _100: u128;
            let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _105: u128;
            let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _110: u128;
            let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _116: u128;
            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _121: u32;
            let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _126: u32;
            scope 23 {
                debug implied_if_fee => _62;
            }
            scope 24 {
                debug residual => _88;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _91;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _97;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _100;
                scope 31 {
                }
            }
            scope 32 {
                debug residual => _102;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _105;
                scope 35 {
                }
            }
            scope 36 {
                debug residual => _107;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _110;
                scope 39 {
                }
            }
            scope 40 {
                debug residual => _113;
                scope 41 {
                }
            }
            scope 42 {
                debug val => _116;
                scope 43 {
                }
            }
            scope 44 {
                debug residual => _118;
                scope 45 {
                }
            }
            scope 46 {
                debug val => _121;
                scope 47 {
                }
            }
            scope 48 {
                debug residual => _123;
                scope 49 {
                }
            }
            scope 50 {
                debug val => _126;
                scope 51 {
                }
            }
        }
        scope 7 {
            debug residual => _39;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _42;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _48;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _51;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _53;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _56;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _58;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _61;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        _10 = <u32 as SafeMath>::safe_mul(move _11, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u32);
        _8 = _16;
        StorageDead(_16);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _5;
        _18 = Eq(move _19, const 0_i64);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_9);
        goto -> bb85;
    }

    bb7: {
        StorageDead(_19);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _6;
        _20 = Eq(move _21, const 0_i64);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_21);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _8;
        StorageLive(_24);
        _24 = _4;
        _22 = Le(move _23, move _24);
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = Eq(move _26, const 0_u64);
        switchInt(move _25) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_26);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(const 0_u32);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb85;
    }

    bb14: {
        StorageDead(_26);
        _17 = const ();
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        _36 = <i64 as Cast>::cast::<u128>(move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        _35 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: u128);
        _34 = _42;
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _6;
        _45 = <i64 as Cast>::cast::<u128>(move _46) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb83;
    }

    bb20: {
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: u128);
        _43 = _51;
        StorageDead(_51);
        _33 = <u128 as SafeMath>::safe_mul(move _34, move _43) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb81;
    }

    bb25: {
        StorageDead(_43);
        StorageDead(_34);
        _32 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _33) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_33);
        _52 = discriminant(_32);
        switchInt(move _52) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_32 as Continue).0: u128);
        _31 = _56;
        StorageDead(_56);
        _30 = <u128 as SafeMath>::safe_div(move _31, const _) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_53);
        _53 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb81;
    }

    bb30: {
        StorageDead(_31);
        _29 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_30);
        _57 = discriminant(_29);
        switchInt(move _57) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_61);
        _61 = ((_29 as Continue).0: u128);
        _28 = _61;
        StorageDead(_61);
        StorageDead(_44);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _8;
        StorageLive(_71);
        _71 = _4;
        _69 = core::num::<impl u32>::saturating_sub(move _70, move _71) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_58);
        _58 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb82;
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _1;
        _85 = <u128 as SafeMath>::safe_mul(move _86, const _) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_86);
        _84 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _85) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_85);
        _87 = discriminant(_84);
        switchInt(move _87) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_91);
        _91 = ((_84 as Continue).0: u128);
        _83 = _91;
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _2;
        _94 = <u64 as Cast>::cast::<u128>(move _95) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_88);
        _88 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb80;
    }

    bb41: {
        StorageDead(_95);
        _93 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _94) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_94);
        _96 = discriminant(_93);
        switchInt(move _96) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_100);
        _100 = ((_93 as Continue).0: u128);
        _92 = _100;
        StorageDead(_100);
        _82 = <u128 as SafeMath>::safe_div(move _83, move _92) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_97);
        _97 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_92);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb75;
    }

    bb46: {
        StorageDead(_92);
        StorageDead(_83);
        _81 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _82) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_82);
        _101 = discriminant(_81);
        switchInt(move _101) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_105);
        _105 = ((_81 as Continue).0: u128);
        _80 = _105;
        StorageDead(_105);
        _79 = <u128 as SafeMath>::safe_mul(move _80, const _) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_102);
        _102 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb75;
    }

    bb51: {
        StorageDead(_80);
        _78 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_79);
        _106 = discriminant(_78);
        switchInt(move _106) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_110);
        _110 = ((_78 as Continue).0: u128);
        _77 = _110;
        StorageDead(_110);
        StorageLive(_111);
        _111 = _28;
        _76 = <u128 as SafeMath>::safe_div(move _77, move _111) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_107);
        _107 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_109);
        StorageDead(_107);
        goto -> bb76;
    }

    bb56: {
        StorageDead(_111);
        StorageDead(_77);
        _75 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _76) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_76);
        _112 = discriminant(_75);
        switchInt(move _112) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_116);
        _116 = ((_75 as Continue).0: u128);
        _74 = _116;
        StorageDead(_116);
        _73 = <u128 as Cast>::cast::<u32>(move _74) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_113);
        _113 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb77;
    }

    bb61: {
        StorageDead(_74);
        _72 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _73, const _) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_73);
        _68 = core::num::<impl u32>::saturating_sub(move _69, move _72) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_72);
        StorageDead(_69);
        _67 = <u32 as SafeMath>::safe_mul(move _68, const 19_u32) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_68);
        _66 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _67) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_67);
        _117 = discriminant(_66);
        switchInt(move _117) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_121);
        _121 = ((_66 as Continue).0: u32);
        _65 = _121;
        StorageDead(_121);
        _64 = <u32 as SafeMath>::safe_div(move _65, const 20_u32) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_118);
        _118 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_120);
        StorageDead(_118);
        goto -> bb78;
    }

    bb69: {
        StorageDead(_65);
        _63 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _64) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_64);
        _122 = discriminant(_63);
        switchInt(move _122) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_126);
        _126 = ((_63 as Continue).0: u32);
        _62 = _126;
        StorageDead(_126);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_63);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _7;
        StorageLive(_129);
        _129 = _62;
        _127 = <u32 as Ord>::min(move _128, move _129) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_123);
        _123 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_125);
        StorageDead(_123);
        goto -> bb79;
    }

    bb74: {
        StorageDead(_129);
        StorageDead(_128);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _127);
        StorageDead(_127);
        StorageDead(_62);
        StorageDead(_28);
        StorageDead(_8);
        goto -> bb86;
    }

    bb75: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_93);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb84;
    }

    bb81: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_44);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_28);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_8);
        goto -> bb86;
    }

    bb86: {
        return;
    }
}
