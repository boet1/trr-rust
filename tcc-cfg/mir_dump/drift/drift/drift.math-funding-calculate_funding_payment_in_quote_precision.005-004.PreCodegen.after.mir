// MIR for `calculate_funding_payment_in_quote_precision` after PreCodegen

fn calculate_funding_payment_in_quote_precision(_1: i128, _2: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug funding_rate_delta => _1;
    debug base_asset_amount => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: i128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _15: std::result::Result<i128, error::ErrorCode>;
    let mut _16: i128;
    let mut _17: i128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _19: std::result::Result<i128, error::ErrorCode>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: i128;
    scope 1 {
        debug funding_payment => _3;
        let _13: i128;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: i128;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: i128;
        scope 6 {
            debug funding_payment_collateral => _13;
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _26;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _29;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        StorageLive(_7);
        _7 = _2;
        _5 = _calculate_funding_payment(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: i128);
        _3 = _12;
        StorageDead(_12);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb18;
    }

    bb7: {
        _18 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_18 as Continue).0: i128);
        _17 = _24;
        StorageDead(_24);
        _15 = <i128 as SafeMath>::safe_div(move _16, move _17) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb17;
    }

    bb12: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_15);
        _25 = discriminant(_14);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_14 as Continue).0: i128);
        _13 = _29;
        StorageDead(_29);
        StorageDead(_18);
        StorageDead(_14);
        StorageLive(_30);
        _30 = _13;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        StorageDead(_13);
        StorageDead(_3);
        goto -> bb19;
    }

    bb15: {
        StorageLive(_26);
        _26 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_3);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}
