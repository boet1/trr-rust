// MIR for `admin::handle_update_spot_market_pool_id` after PreCodegen

fn admin::handle_update_spot_market_pool_id(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug pool_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let mut _13: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _18: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 2];
    let _38: &[core::fmt::rt::Argument<'_>; 2];
    let _39: [core::fmt::rt::Argument<'_>; 2];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &u16;
    let _42: &u16;
    let _43: &state::spot_market::SpotMarket;
    let mut _44: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &u8;
    let _47: &u8;
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _50: std::result::Result<(), error::ErrorCode>;
    let mut _51: bool;
    let mut _52: &state::perp_market::MarketStatus;
    let _53: &state::spot_market::SpotMarket;
    let mut _54: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _55: &state::perp_market::MarketStatus;
    let _56: state::perp_market::MarketStatus;
    let mut _57: ();
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 2];
    let _69: &[&str; 2];
    let _70: [&str; 2];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let mut _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: [core::fmt::rt::Argument<'_>; 1];
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &error::ErrorCode;
    let _77: &error::ErrorCode;
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: error::ErrorCode;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: u8;
    let mut _88: &mut state::spot_market::SpotMarket;
    let mut _89: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _90: ();
    let mut _94: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _95: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _13;
        let _30: std::string::String;
        let _58: error::ErrorCode;
        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _86: ();
        let mut _92: &state::perp_market::MarketStatus;
        let mut _93: &[&str; 2];
        scope 10 {
            debug res => _30;
        }
        scope 11 {
            debug error_code => _58;
            let _65: std::string::String;
            let mut _91: &[&str; 2];
            scope 12 {
                debug res => _65;
            }
        }
        scope 13 {
            debug residual => _83;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _86;
            scope 16 {
            }
        }
    }
    scope 6 {
        debug residual => _20;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _23;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _94 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _7 = &((*_94).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = &(*_7);
        _5 = constraints::spot_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb44];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _96 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _95 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _17 = &((*_95).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _16 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb46];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _102 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb40;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _15 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _16, move _18) -> [return: bb8, unwind: bb44];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _15) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_23);
        _23 = move ((_14 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _13 = move _23;
        StorageDead(_23);
        _100 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _93 = const _;
        _34 = &(*_93);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_13;
        _43 = <RefMut<'_, SpotMarket> as Deref>::deref(move _44) -> [return: bb13, unwind: bb43];
    }

    bb11: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb12, unwind: bb45];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _98 = discriminant(_14);
        StorageDead(_14);
        goto -> bb39;
    }

    bb13: {
        StorageDead(_44);
        _42 = &((*_43).42: u16);
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _41) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        StorageDead(_41);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_2;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _46) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        StorageDead(_46);
        _39 = [move _40, move _45];
        StorageDead(_45);
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb18, unwind: bb42];
    }

    bb18: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb19, unwind: bb42];
    }

    bb19: {
        StorageDead(_25);
        drop(_29) -> [return: bb20, unwind: bb43];
    }

    bb20: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_13;
        _53 = <RefMut<'_, SpotMarket> as Deref>::deref(move _54) -> [return: bb21, unwind: bb43];
    }

    bb21: {
        StorageDead(_54);
        _52 = &((*_53).45: state::perp_market::MarketStatus);
        StorageLive(_55);
        _92 = const _;
        _55 = &(*_92);
        _51 = <state::perp_market::MarketStatus as PartialEq>::eq(move _52, move _55) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        switchInt(move _51) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_57);
        _57 = ();
        _50 = std::result::Result::<(), error::ErrorCode>::Ok(move _57);
        StorageDead(_57);
        goto -> bb32;
    }

    bb24: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_58);
        _58 = error::ErrorCode::DefaultError;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _91 = const _;
        _69 = &(*_91);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_58;
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _76) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        StorageDead(_76);
        _74 = [move _75];
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = move _72 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_72);
        _66 = Arguments::<'_>::new_v1(move _67, move _71) -> [return: bb26, unwind: bb43];
    }

    bb26: {
        StorageDead(_71);
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb27, unwind: bb43];
    }

    bb27: {
        StorageDead(_66);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <String as Deref>::deref(move _62) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        StorageDead(_60);
        drop(_64) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = const "Market must be just initialized to update pool";
        _79 = &(*_80);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb31, unwind: bb43];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_81);
        _81 = _58;
        _50 = std::result::Result::<(), error::ErrorCode>::Err(move _81);
        StorageDead(_81);
        StorageDead(_58);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_51);
        _49 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _50) -> [return: bb33, unwind: bb43];
    }

    bb33: {
        StorageDead(_50);
        _82 = discriminant(_49);
        switchInt(move _82) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_86);
        _86 = ((_49 as Continue).0: ());
        _48 = _86;
        StorageDead(_86);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_87);
        _87 = _2;
        StorageLive(_88);
        StorageLive(_89);
        _89 = &mut _13;
        _88 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _89) -> [return: bb37, unwind: bb43];
    }

    bb35: {
        StorageLive(_83);
        _83 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_49);
        StorageDead(_48);
        drop(_13) -> [return: bb39, unwind: bb44];
    }

    bb37: {
        StorageDead(_89);
        ((*_88).62: u8) = move _87;
        StorageDead(_87);
        StorageDead(_88);
        StorageLive(_90);
        _90 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _90);
        StorageDead(_90);
        drop(_13) -> [return: bb38, unwind: bb44];
    }

    bb38: {
        StorageDead(_13);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_13);
        goto -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_64) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_29) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_13) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        resume;
    }

    bb45 (cleanup): {
        _104 = discriminant(_14);
        goto -> bb44;
    }

    bb46 (cleanup): {
        _105 = discriminant(_4);
        goto -> bb44;
    }
}
