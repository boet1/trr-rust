// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_fuel_bonus_numerator` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_fuel_bonus_numerator(_1: &User, _2: i64) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    debug now => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: i64;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: u32;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i64;
    let mut _15: bool;
    let mut _16: i64;
    let mut _17: i64;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).29: u32);
        _3 = Gt(move _4, const 0_u32);
        switchInt(move _3) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).29: u32);
        _8 = <u32 as Cast>::cast::<i64>(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: i64);
        _6 = _14;
        StorageDead(_14);
        _0 = <i64 as SafeMath>::safe_sub(move _5, move _6) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb15;
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_7);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _2;
        _15 = Gt(move _16, const _);
        switchInt(move _15) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = _2;
        _0 = <i64 as SafeMath>::safe_sub(move _17, const _) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_16);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_15);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_3);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
