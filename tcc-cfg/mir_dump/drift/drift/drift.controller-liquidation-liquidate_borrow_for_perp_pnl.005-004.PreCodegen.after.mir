// MIR for `controller::liquidation::liquidate_borrow_for_perp_pnl` after PreCodegen

fn controller::liquidation::liquidate_borrow_for_perp_pnl(_1: u16, _2: u16, _3: u128, _4: Option<u64>, _5: &mut User, _6: &anchor_lang::prelude::Pubkey, _7: &mut User, _8: &anchor_lang::prelude::Pubkey, _9: &PerpMarketMap<'_>, _10: &SpotMarketMap<'_>, _11: &mut OracleMap<'_>, _12: i64, _13: u64, _14: u32, _15: u128, _16: u128) -> std::result::Result<(), error::ErrorCode> {
    debug perp_market_index => _1;
    debug liability_market_index => _2;
    debug liquidator_max_liability_transfer => _3;
    debug limit_price => _4;
    debug user => _5;
    debug user_key => _6;
    debug liquidator => _7;
    debug liquidator_key => _8;
    debug perp_market_map => _9;
    debug spot_market_map => _10;
    debug oracle_map => _11;
    debug now => _12;
    debug slot => _13;
    debug liquidation_margin_buffer_ratio => _14;
    debug initial_pct_to_liquidate => _15;
    debug liquidation_duration => _16;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _17: ();
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _19: std::result::Result<(), error::ErrorCode>;
    let mut _20: bool;
    let mut _21: &state::user::User;
    let mut _22: ();
    let _23: error::ErrorCode;
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: &std::string::String;
    let _47: &std::string::String;
    let _48: std::string::String;
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let mut _52: &[&str; 1];
    let _53: &[&str; 1];
    let _54: [&str; 1];
    let mut _55: error::ErrorCode;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let _61: ();
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _63: std::result::Result<(), error::ErrorCode>;
    let mut _64: bool;
    let mut _65: &state::user::User;
    let mut _66: ();
    let _67: error::ErrorCode;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &error::ErrorCode;
    let _86: &error::ErrorCode;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: &std::string::String;
    let _91: &std::string::String;
    let _92: std::string::String;
    let mut _94: std::fmt::Arguments<'_>;
    let mut _95: &[&str];
    let mut _96: &[&str; 1];
    let _97: &[&str; 1];
    let _98: [&str; 1];
    let mut _99: error::ErrorCode;
    let mut _100: isize;
    let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: ();
    let _105: ();
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _107: std::result::Result<(), error::ErrorCode>;
    let mut _108: bool;
    let mut _109: u8;
    let mut _110: ();
    let _111: error::ErrorCode;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 2];
    let _122: &[&str; 2];
    let _123: [&str; 2];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: [core::fmt::rt::Argument<'_>; 1];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &error::ErrorCode;
    let _130: &error::ErrorCode;
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 2];
    let _141: &[&str; 2];
    let _142: [&str; 2];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: [core::fmt::rt::Argument<'_>; 1];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &u8;
    let _149: &u8;
    let mut _150: error::ErrorCode;
    let mut _151: isize;
    let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _155: ();
    let _156: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _158: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _159: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _160: &u16;
    let _161: &u16;
    let mut _162: isize;
    let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _166: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _167: ();
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _169: std::result::Result<(), error::ErrorCode>;
    let mut _170: bool;
    let mut _171: &state::perp_market::PerpMarket;
    let _172: &state::perp_market::PerpMarket;
    let mut _173: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _174: state::paused_operations::PerpOperation;
    let mut _175: ();
    let _177: ();
    let mut _178: &str;
    let _179: &str;
    let mut _180: &std::string::String;
    let _181: &std::string::String;
    let _182: std::string::String;
    let mut _184: std::fmt::Arguments<'_>;
    let mut _185: &[&str];
    let mut _186: &[&str; 2];
    let _187: &[&str; 2];
    let _188: [&str; 2];
    let mut _189: &[core::fmt::rt::Argument<'_>];
    let mut _190: &[core::fmt::rt::Argument<'_>; 1];
    let _191: &[core::fmt::rt::Argument<'_>; 1];
    let _192: [core::fmt::rt::Argument<'_>; 1];
    let mut _193: core::fmt::rt::Argument<'_>;
    let mut _194: &error::ErrorCode;
    let _195: &error::ErrorCode;
    let _196: ();
    let mut _197: &str;
    let _198: &str;
    let mut _199: &std::string::String;
    let _200: &std::string::String;
    let _201: std::string::String;
    let mut _203: std::fmt::Arguments<'_>;
    let mut _204: &[&str];
    let mut _205: &[&str; 1];
    let _206: &[&str; 1];
    let _207: [&str; 1];
    let mut _208: &[core::fmt::rt::Argument<'_>];
    let mut _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: &[core::fmt::rt::Argument<'_>; 1];
    let _211: [core::fmt::rt::Argument<'_>; 1];
    let mut _212: core::fmt::rt::Argument<'_>;
    let mut _213: &u16;
    let _214: &u16;
    let mut _215: error::ErrorCode;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _221: ();
    let mut _222: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _225: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _226: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _227: &u16;
    let _228: &u16;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _234: ();
    let mut _235: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _236: std::result::Result<(), error::ErrorCode>;
    let mut _237: bool;
    let mut _238: &state::spot_market::SpotMarket;
    let _239: &state::spot_market::SpotMarket;
    let mut _240: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _241: state::paused_operations::SpotOperation;
    let mut _242: ();
    let _244: ();
    let mut _245: &str;
    let _246: &str;
    let mut _247: &std::string::String;
    let _248: &std::string::String;
    let _249: std::string::String;
    let mut _251: std::fmt::Arguments<'_>;
    let mut _252: &[&str];
    let mut _253: &[&str; 2];
    let _254: &[&str; 2];
    let _255: [&str; 2];
    let mut _256: &[core::fmt::rt::Argument<'_>];
    let mut _257: &[core::fmt::rt::Argument<'_>; 1];
    let _258: &[core::fmt::rt::Argument<'_>; 1];
    let _259: [core::fmt::rt::Argument<'_>; 1];
    let mut _260: core::fmt::rt::Argument<'_>;
    let mut _261: &error::ErrorCode;
    let _262: &error::ErrorCode;
    let _263: ();
    let mut _264: &str;
    let _265: &str;
    let mut _266: &std::string::String;
    let _267: &std::string::String;
    let _268: std::string::String;
    let mut _270: std::fmt::Arguments<'_>;
    let mut _271: &[&str];
    let mut _272: &[&str; 1];
    let _273: &[&str; 1];
    let _274: [&str; 1];
    let mut _275: &[core::fmt::rt::Argument<'_>];
    let mut _276: &[core::fmt::rt::Argument<'_>; 1];
    let _277: &[core::fmt::rt::Argument<'_>; 1];
    let _278: [core::fmt::rt::Argument<'_>; 1];
    let mut _279: core::fmt::rt::Argument<'_>;
    let mut _280: &u16;
    let _281: &u16;
    let mut _282: error::ErrorCode;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _288: ();
    let mut _289: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _290: &state::user::PerpPosition;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _292: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _293: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _294: &state::user::User;
    let mut _295: u16;
    let mut _296: {closure@programs/drift/src/controller/liquidation.rs:2351:55: 2351:58};
    let mut _297: &u16;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _303: &state::user::SpotPosition;
    let mut _304: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _305: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _306: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _307: &state::user::User;
    let mut _308: u16;
    let mut _309: {closure@programs/drift/src/controller/liquidation.rs:2360:18: 2360:21};
    let mut _310: &u16;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _316: &mut state::user::PerpPosition;
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _318: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _319: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _320: &mut state::user::User;
    let mut _321: u16;
    let mut _322: {closure@programs/drift/src/controller/liquidation.rs:2370:18: 2370:21};
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _328: &mut state::user::SpotPosition;
    let mut _329: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _330: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _331: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _332: &mut state::user::User;
    let mut _333: u16;
    let mut _334: {closure@programs/drift/src/controller/liquidation.rs:2377:18: 2377:21};
    let mut _335: isize;
    let mut _337: !;
    let mut _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _340: ();
    let mut _341: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _342: std::result::Result<(), error::ErrorCode>;
    let mut _343: &mut state::user::User;
    let mut _344: &anchor_lang::prelude::Pubkey;
    let mut _345: &mut state::perp_market::PerpMarket;
    let mut _346: &mut state::perp_market::PerpMarket;
    let mut _347: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _348: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _350: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _351: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _352: &u16;
    let _353: &u16;
    let mut _354: isize;
    let mut _356: !;
    let mut _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _359: i64;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _365: ();
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _367: std::result::Result<(), error::ErrorCode>;
    let mut _368: &mut state::user::User;
    let mut _369: &anchor_lang::prelude::Pubkey;
    let mut _370: &mut state::perp_market::PerpMarket;
    let mut _371: &mut state::perp_market::PerpMarket;
    let mut _372: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _373: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _375: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _376: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _377: &u16;
    let _378: &u16;
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _384: i64;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _395: (u128, i64, u32, u32, u32);
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _398: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _399: &state::user::User;
    let mut _400: u16;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _407: ();
    let mut _408: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _409: std::result::Result<(), error::ErrorCode>;
    let mut _410: bool;
    let mut _411: i64;
    let mut _412: ();
    let _414: ();
    let mut _415: &str;
    let _416: &str;
    let mut _417: &std::string::String;
    let _418: &std::string::String;
    let _419: std::string::String;
    let mut _421: std::fmt::Arguments<'_>;
    let mut _422: &[&str];
    let mut _423: &[&str; 2];
    let _424: &[&str; 2];
    let _425: [&str; 2];
    let mut _426: &[core::fmt::rt::Argument<'_>];
    let mut _427: &[core::fmt::rt::Argument<'_>; 1];
    let _428: &[core::fmt::rt::Argument<'_>; 1];
    let _429: [core::fmt::rt::Argument<'_>; 1];
    let mut _430: core::fmt::rt::Argument<'_>;
    let mut _431: &error::ErrorCode;
    let _432: &error::ErrorCode;
    let _433: ();
    let mut _434: &str;
    let _435: &str;
    let mut _436: &std::string::String;
    let _437: &std::string::String;
    let _438: std::string::String;
    let mut _440: std::fmt::Arguments<'_>;
    let mut _441: &[&str];
    let mut _442: &[&str; 2];
    let _443: &[&str; 2];
    let _444: [&str; 2];
    let mut _445: &[core::fmt::rt::Argument<'_>];
    let mut _446: &[core::fmt::rt::Argument<'_>; 1];
    let _447: &[core::fmt::rt::Argument<'_>; 1];
    let _448: [core::fmt::rt::Argument<'_>; 1];
    let mut _449: core::fmt::rt::Argument<'_>;
    let mut _450: &i64;
    let _451: &i64;
    let mut _452: error::ErrorCode;
    let mut _453: isize;
    let mut _455: !;
    let mut _456: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _459: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _460: std::result::Result<i128, error::ErrorCode>;
    let mut _461: i64;
    let mut _462: isize;
    let mut _464: !;
    let mut _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _467: ();
    let mut _468: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _469: std::result::Result<(), error::ErrorCode>;
    let mut _470: bool;
    let mut _471: i128;
    let mut _472: ();
    let _474: ();
    let mut _475: &str;
    let _476: &str;
    let mut _477: &std::string::String;
    let _478: &std::string::String;
    let _479: std::string::String;
    let mut _481: std::fmt::Arguments<'_>;
    let mut _482: &[&str];
    let mut _483: &[&str; 2];
    let _484: &[&str; 2];
    let _485: [&str; 2];
    let mut _486: &[core::fmt::rt::Argument<'_>];
    let mut _487: &[core::fmt::rt::Argument<'_>; 1];
    let _488: &[core::fmt::rt::Argument<'_>; 1];
    let _489: [core::fmt::rt::Argument<'_>; 1];
    let mut _490: core::fmt::rt::Argument<'_>;
    let mut _491: &error::ErrorCode;
    let _492: &error::ErrorCode;
    let _493: ();
    let mut _494: &str;
    let _495: &str;
    let mut _496: error::ErrorCode;
    let mut _497: isize;
    let mut _499: !;
    let mut _500: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _503: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _504: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _505: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _506: &u16;
    let _507: &u16;
    let mut _508: isize;
    let mut _510: !;
    let mut _511: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _514: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _515: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _516: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _517: &u16;
    let _518: &u16;
    let _519: &state::perp_market::PerpMarket;
    let mut _520: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _521: isize;
    let mut _523: !;
    let mut _524: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _527: &state::oracle::OraclePriceData;
    let mut _528: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _529: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _530: &mut state::oracle_map::OracleMap<'_>;
    let mut _531: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _532: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _533: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _534: &state::spot_market::SpotMarket;
    let _535: &state::spot_market::SpotMarket;
    let mut _536: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _537: isize;
    let mut _539: !;
    let mut _540: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _543: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _544: std::result::Result<u32, error::ErrorCode>;
    let mut _545: &state::perp_market::PerpMarket;
    let _546: &state::perp_market::PerpMarket;
    let mut _547: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _548: i128;
    let mut _549: math::margin::MarginRequirementType;
    let mut _550: isize;
    let mut _552: !;
    let mut _553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _555: u128;
    let mut _556: i128;
    let mut _557: i64;
    let mut _558: u32;
    let mut _559: u32;
    let mut _560: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _561: std::result::Result<u32, error::ErrorCode>;
    let mut _562: u32;
    let mut _563: &state::perp_market::PerpMarket;
    let mut _564: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _565: math::liquidation::LiquidationMultiplierType;
    let mut _566: isize;
    let mut _568: !;
    let mut _569: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _576: (u128, i64, u32, u32, u32);
    let mut _578: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _579: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _580: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _581: &u16;
    let _582: &u16;
    let mut _583: isize;
    let mut _585: !;
    let mut _586: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _590: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
    let mut _591: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails)>;
    let mut _592: std::result::Result<(&state::oracle::OraclePriceData, &state::state::ValidityGuardRails), error::ErrorCode>;
    let mut _593: &mut state::oracle_map::OracleMap<'_>;
    let mut _594: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _595: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _596: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _597: &state::spot_market::SpotMarket;
    let _598: &state::spot_market::SpotMarket;
    let mut _599: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _600: isize;
    let mut _602: !;
    let mut _603: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _605: ();
    let mut _606: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _607: std::result::Result<(), error::ErrorCode>;
    let mut _608: &mut state::spot_market::SpotMarket;
    let mut _609: &mut state::spot_market::SpotMarket;
    let mut _610: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _611: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _612: &state::oracle::OraclePriceData;
    let mut _613: &state::state::ValidityGuardRails;
    let mut _614: i64;
    let mut _615: std::option::Option<math::oracle::DriftAction>;
    let mut _616: math::oracle::DriftAction;
    let mut _617: isize;
    let mut _619: !;
    let mut _620: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _623: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _624: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _625: &state::user::User;
    let mut _626: u16;
    let mut _627: isize;
    let mut _629: !;
    let mut _630: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _632: ();
    let mut _633: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _634: std::result::Result<(), error::ErrorCode>;
    let mut _635: bool;
    let mut _636: &state::spot_market::SpotBalanceType;
    let mut _637: &state::spot_market::SpotBalanceType;
    let _638: state::spot_market::SpotBalanceType;
    let mut _639: ();
    let _641: ();
    let mut _642: &str;
    let _643: &str;
    let mut _644: &std::string::String;
    let _645: &std::string::String;
    let _646: std::string::String;
    let mut _648: std::fmt::Arguments<'_>;
    let mut _649: &[&str];
    let mut _650: &[&str; 2];
    let _651: &[&str; 2];
    let _652: [&str; 2];
    let mut _653: &[core::fmt::rt::Argument<'_>];
    let mut _654: &[core::fmt::rt::Argument<'_>; 1];
    let _655: &[core::fmt::rt::Argument<'_>; 1];
    let _656: [core::fmt::rt::Argument<'_>; 1];
    let mut _657: core::fmt::rt::Argument<'_>;
    let mut _658: &error::ErrorCode;
    let _659: &error::ErrorCode;
    let _660: ();
    let mut _661: &str;
    let _662: &str;
    let mut _663: error::ErrorCode;
    let mut _664: isize;
    let mut _666: !;
    let mut _667: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _670: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _671: std::result::Result<u128, error::ErrorCode>;
    let mut _672: &state::user::SpotPosition;
    let mut _673: &state::spot_market::SpotMarket;
    let _674: &state::spot_market::SpotMarket;
    let mut _675: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _676: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _677: isize;
    let mut _679: !;
    let mut _680: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _682: ();
    let mut _683: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _684: std::result::Result<(), error::ErrorCode>;
    let mut _685: bool;
    let mut _686: u128;
    let mut _687: ();
    let _689: ();
    let mut _690: &str;
    let _691: &str;
    let mut _692: &std::string::String;
    let _693: &std::string::String;
    let _694: std::string::String;
    let mut _696: std::fmt::Arguments<'_>;
    let mut _697: &[&str];
    let mut _698: &[&str; 2];
    let _699: &[&str; 2];
    let _700: [&str; 2];
    let mut _701: &[core::fmt::rt::Argument<'_>];
    let mut _702: &[core::fmt::rt::Argument<'_>; 1];
    let _703: &[core::fmt::rt::Argument<'_>; 1];
    let _704: [core::fmt::rt::Argument<'_>; 1];
    let mut _705: core::fmt::rt::Argument<'_>;
    let mut _706: &error::ErrorCode;
    let _707: &error::ErrorCode;
    let _708: ();
    let mut _709: &str;
    let _710: &str;
    let mut _711: &std::string::String;
    let _712: &std::string::String;
    let _713: std::string::String;
    let mut _715: std::fmt::Arguments<'_>;
    let mut _716: &[&str];
    let mut _717: &[&str; 1];
    let _718: &[&str; 1];
    let _719: [&str; 1];
    let mut _720: &[core::fmt::rt::Argument<'_>];
    let mut _721: &[core::fmt::rt::Argument<'_>; 1];
    let _722: &[core::fmt::rt::Argument<'_>; 1];
    let _723: [core::fmt::rt::Argument<'_>; 1];
    let mut _724: core::fmt::rt::Argument<'_>;
    let mut _725: &u16;
    let _726: &u16;
    let mut _727: error::ErrorCode;
    let mut _728: isize;
    let mut _730: !;
    let mut _731: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _733: u128;
    let mut _734: i64;
    let mut _735: u32;
    let mut _736: &state::spot_market::SpotMarket;
    let mut _737: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _738: u32;
    let mut _739: &state::spot_market::SpotMarket;
    let mut _740: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _741: u32;
    let mut _742: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _743: std::result::Result<u32, error::ErrorCode>;
    let mut _744: u32;
    let mut _745: &state::spot_market::SpotMarket;
    let mut _746: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _747: math::liquidation::LiquidationMultiplierType;
    let mut _748: isize;
    let mut _750: !;
    let mut _751: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _754: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _755: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _756: &state::user::User;
    let mut _757: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _758: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _759: &mut state::oracle_map::OracleMap<'_>;
    let mut _760: state::margin_calculation::MarginContext;
    let mut _761: u32;
    let mut _762: isize;
    let mut _764: !;
    let mut _765: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _767: ();
    let mut _768: bool;
    let mut _769: &state::user::User;
    let mut _770: bool;
    let mut _771: &state::margin_calculation::MarginCalculation;
    let mut _772: !;
    let _773: ();
    let mut _774: &str;
    let _775: &str;
    let mut _776: &std::string::String;
    let _777: &std::string::String;
    let _778: std::string::String;
    let mut _780: std::fmt::Arguments<'_>;
    let mut _781: &[&str];
    let mut _782: &[&str; 1];
    let _783: &[&str; 1];
    let _784: [&str; 1];
    let mut _785: &[core::fmt::rt::Argument<'_>];
    let mut _786: &[core::fmt::rt::Argument<'_>; 1];
    let _787: &[core::fmt::rt::Argument<'_>; 1];
    let _788: [core::fmt::rt::Argument<'_>; 1];
    let mut _789: core::fmt::rt::Argument<'_>;
    let mut _790: &state::margin_calculation::MarginCalculation;
    let _791: &state::margin_calculation::MarginCalculation;
    let mut _792: error::ErrorCode;
    let mut _793: bool;
    let mut _794: &state::user::User;
    let mut _795: bool;
    let mut _796: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _797: std::result::Result<bool, error::ErrorCode>;
    let mut _798: &state::margin_calculation::MarginCalculation;
    let mut _799: isize;
    let mut _801: !;
    let mut _802: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _804: !;
    let _805: ();
    let mut _806: &mut state::user::User;
    let mut _807: ();
    let mut _809: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _810: std::result::Result<u16, error::ErrorCode>;
    let mut _811: &mut state::user::User;
    let mut _812: u64;
    let mut _813: isize;
    let mut _815: !;
    let mut _816: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _820: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _821: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _822: &mut state::user::User;
    let mut _823: &anchor_lang::prelude::Pubkey;
    let mut _824: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _825: &anchor_lang::prelude::Pubkey;
    let mut _826: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _827: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _828: &mut state::oracle_map::OracleMap<'_>;
    let mut _829: i64;
    let mut _830: u64;
    let mut _831: state::events::OrderActionExplanation;
    let mut _832: std::option::Option<state::user::MarketType>;
    let mut _833: std::option::Option<u16>;
    let mut _834: std::option::Option<controller::position::PositionDirection>;
    let mut _835: isize;
    let mut _837: !;
    let mut _838: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _841: bool;
    let mut _842: &std::vec::Vec<u32>;
    let mut _844: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _845: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _846: &state::user::User;
    let mut _847: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _848: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _849: &mut state::oracle_map::OracleMap<'_>;
    let mut _850: state::margin_calculation::MarginContext;
    let mut _851: u32;
    let mut _852: isize;
    let mut _854: !;
    let mut _855: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _858: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _859: std::result::Result<u128, error::ErrorCode>;
    let mut _860: &state::margin_calculation::MarginCalculation;
    let mut _861: isize;
    let mut _863: !;
    let mut _864: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _867: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _868: std::result::Result<u128, error::ErrorCode>;
    let mut _869: &state::margin_calculation::MarginCalculation;
    let mut _870: isize;
    let mut _872: !;
    let mut _873: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _875: u64;
    let mut _876: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _877: std::result::Result<u64, error::ErrorCode>;
    let mut _878: u128;
    let mut _879: u128;
    let mut _880: u128;
    let mut _881: isize;
    let mut _883: !;
    let mut _884: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _886: ();
    let mut _887: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _888: std::result::Result<(), error::ErrorCode>;
    let mut _889: &mut state::user::User;
    let mut _890: u64;
    let mut _891: isize;
    let mut _893: !;
    let mut _894: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _896: ();
    let mut _897: bool;
    let mut _898: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _899: std::result::Result<bool, error::ErrorCode>;
    let mut _900: &state::margin_calculation::MarginCalculation;
    let mut _901: isize;
    let mut _903: !;
    let mut _904: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _906: !;
    let mut _908: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _909: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _910: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _911: &u16;
    let _912: &u16;
    let mut _913: isize;
    let mut _915: !;
    let mut _916: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _919: &state::oracle::OraclePriceData;
    let mut _920: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _921: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _922: &mut state::oracle_map::OracleMap<'_>;
    let mut _923: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _924: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _925: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _926: &state::perp_market::PerpMarket;
    let _927: &state::perp_market::PerpMarket;
    let mut _928: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _929: isize;
    let mut _931: !;
    let mut _932: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _934: ();
    let _935: ();
    let mut _936: &[&[u8]];
    let mut _937: &[&[u8]; 1];
    let _938: &[&[u8]; 1];
    let _939: [&[u8]; 1];
    let mut _940: &[u8];
    let _941: &[u8];
    let mut _942: &std::vec::Vec<u8>;
    let _943: &std::vec::Vec<u8>;
    let _944: std::vec::Vec<u8>;
    let mut _945: &state::events::LiquidationRecord;
    let _946: &state::events::LiquidationRecord;
    let _947: state::events::LiquidationRecord;
    let mut _948: i64;
    let mut _949: u16;
    let mut _950: state::events::LiquidationType;
    let mut _951: anchor_lang::prelude::Pubkey;
    let mut _952: anchor_lang::prelude::Pubkey;
    let mut _953: u128;
    let mut _954: i128;
    let mut _955: bool;
    let mut _956: &state::user::User;
    let mut _957: std::vec::Vec<u32>;
    let mut _958: u64;
    let mut _959: state::events::LiquidateBorrowForPerpPnlRecord;
    let mut _960: u16;
    let mut _961: i64;
    let mut _962: u16;
    let mut _963: i64;
    let mut _964: state::events::LiquidationRecord;
    let _965: ();
    let mut _966: &mut state::user::User;
    let mut _967: ();
    let mut _969: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _970: std::result::Result<u128, error::ErrorCode>;
    let mut _971: &state::margin_calculation::MarginCalculation;
    let mut _972: isize;
    let mut _974: !;
    let mut _975: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _978: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _979: std::result::Result<u32, error::ErrorCode>;
    let mut _980: u32;
    let mut _981: u32;
    let mut _982: isize;
    let mut _984: !;
    let mut _985: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _988: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _989: std::result::Result<u128, error::ErrorCode>;
    let mut _990: u128;
    let mut _991: u32;
    let mut _992: u32;
    let mut _993: u32;
    let mut _994: u32;
    let mut _995: u32;
    let mut _996: i64;
    let mut _997: isize;
    let mut _999: !;
    let mut _1000: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1003: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1004: std::result::Result<u128, error::ErrorCode>;
    let mut _1005: &state::user::User;
    let mut _1006: u128;
    let mut _1007: u64;
    let mut _1008: u128;
    let mut _1009: u128;
    let mut _1010: isize;
    let mut _1012: !;
    let mut _1013: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1016: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1017: std::result::Result<u128, error::ErrorCode>;
    let mut _1018: u128;
    let mut _1019: u128;
    let mut _1020: u128;
    let mut _1021: isize;
    let mut _1023: !;
    let mut _1024: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1026: ();
    let mut _1027: bool;
    let mut _1028: u128;
    let mut _1029: !;
    let _1030: ();
    let mut _1031: &str;
    let _1032: &str;
    let mut _1033: ();
    let mut _1035: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1036: std::result::Result<u128, error::ErrorCode>;
    let mut _1037: u128;
    let mut _1038: u32;
    let mut _1039: u32;
    let mut _1040: i64;
    let mut _1041: u32;
    let mut _1042: u32;
    let mut _1043: i64;
    let mut _1044: isize;
    let mut _1046: !;
    let mut _1047: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1050: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1051: std::result::Result<i128, error::ErrorCode>;
    let mut _1052: i128;
    let mut _1053: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1054: std::result::Result<i128, error::ErrorCode>;
    let mut _1055: u128;
    let mut _1056: isize;
    let mut _1058: !;
    let mut _1059: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1061: u32;
    let mut _1062: i64;
    let mut _1063: isize;
    let mut _1065: !;
    let mut _1066: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1069: bool;
    let mut _1070: i128;
    let mut _1071: i128;
    let mut _1072: (i128, bool);
    let mut _1074: u128;
    let mut _1075: u128;
    let mut _1076: u128;
    let mut _1077: u128;
    let mut _1078: u128;
    let mut _1079: u128;
    let mut _1080: u128;
    let mut _1081: u128;
    let mut _1083: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1084: std::result::Result<u128, error::ErrorCode>;
    let mut _1085: u128;
    let mut _1086: u32;
    let mut _1087: u32;
    let mut _1088: i64;
    let mut _1089: u128;
    let mut _1090: u32;
    let mut _1091: u32;
    let mut _1092: i64;
    let mut _1093: isize;
    let mut _1095: !;
    let mut _1096: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1098: ();
    let mut _1099: bool;
    let mut _1100: u128;
    let mut _1101: bool;
    let mut _1102: u128;
    let mut _1103: !;
    let _1104: ();
    let mut _1105: &str;
    let _1106: &str;
    let mut _1107: &std::string::String;
    let _1108: &std::string::String;
    let _1109: std::string::String;
    let mut _1111: std::fmt::Arguments<'_>;
    let mut _1112: &[&str];
    let mut _1113: &[&str; 2];
    let _1114: &[&str; 2];
    let _1115: [&str; 2];
    let mut _1116: &[core::fmt::rt::Argument<'_>];
    let mut _1117: &[core::fmt::rt::Argument<'_>; 2];
    let _1118: &[core::fmt::rt::Argument<'_>; 2];
    let _1119: [core::fmt::rt::Argument<'_>; 2];
    let mut _1120: core::fmt::rt::Argument<'_>;
    let mut _1121: &u16;
    let _1122: &u16;
    let mut _1123: core::fmt::rt::Argument<'_>;
    let mut _1124: &u16;
    let _1125: &u16;
    let _1126: ();
    let mut _1127: &str;
    let _1128: &str;
    let mut _1129: &std::string::String;
    let _1130: &std::string::String;
    let _1131: std::string::String;
    let mut _1133: std::fmt::Arguments<'_>;
    let mut _1134: &[&str];
    let mut _1135: &[&str; 3];
    let _1136: &[&str; 3];
    let _1137: [&str; 3];
    let mut _1138: &[core::fmt::rt::Argument<'_>];
    let mut _1139: &[core::fmt::rt::Argument<'_>; 3];
    let _1140: &[core::fmt::rt::Argument<'_>; 3];
    let _1141: [core::fmt::rt::Argument<'_>; 3];
    let mut _1142: core::fmt::rt::Argument<'_>;
    let mut _1143: &u128;
    let _1144: &u128;
    let mut _1145: core::fmt::rt::Argument<'_>;
    let mut _1146: &u128;
    let _1147: &u128;
    let mut _1148: core::fmt::rt::Argument<'_>;
    let mut _1149: &u128;
    let _1150: &u128;
    let _1151: ();
    let mut _1152: &str;
    let _1153: &str;
    let mut _1154: &std::string::String;
    let _1155: &std::string::String;
    let _1156: std::string::String;
    let mut _1158: std::fmt::Arguments<'_>;
    let mut _1159: &[&str];
    let mut _1160: &[&str; 3];
    let _1161: &[&str; 3];
    let _1162: [&str; 3];
    let mut _1163: &[core::fmt::rt::Argument<'_>];
    let mut _1164: &[core::fmt::rt::Argument<'_>; 3];
    let _1165: &[core::fmt::rt::Argument<'_>; 3];
    let _1166: [core::fmt::rt::Argument<'_>; 3];
    let mut _1167: core::fmt::rt::Argument<'_>;
    let mut _1168: &u128;
    let _1169: &u128;
    let mut _1170: core::fmt::rt::Argument<'_>;
    let mut _1171: &u128;
    let _1172: &u128;
    let mut _1173: core::fmt::rt::Argument<'_>;
    let mut _1174: &u128;
    let _1175: &u128;
    let mut _1176: error::ErrorCode;
    let _1177: ();
    let mut _1178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1179: std::result::Result<(), error::ErrorCode>;
    let mut _1180: u128;
    let mut _1181: u128;
    let mut _1182: u32;
    let mut _1183: u32;
    let mut _1184: std::option::Option<u64>;
    let mut _1185: isize;
    let mut _1187: !;
    let mut _1188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1190: ();
    let mut _1192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1193: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1194: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1195: &u16;
    let _1196: &u16;
    let mut _1197: isize;
    let mut _1199: !;
    let mut _1200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1202: ();
    let mut _1203: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1204: std::result::Result<(), error::ErrorCode>;
    let mut _1205: u128;
    let mut _1206: &state::spot_market::SpotBalanceType;
    let _1207: &state::spot_market::SpotBalanceType;
    let _1208: state::spot_market::SpotBalanceType;
    let mut _1209: &mut state::spot_market::SpotMarket;
    let mut _1210: &mut state::spot_market::SpotMarket;
    let mut _1211: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1212: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1213: &mut state::user::SpotPosition;
    let mut _1214: &mut state::user::SpotPosition;
    let mut _1215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1216: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1217: &mut state::user::User;
    let mut _1218: u16;
    let mut _1219: isize;
    let mut _1221: !;
    let mut _1222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1224: std::option::Option<u128>;
    let mut _1225: u128;
    let mut _1226: isize;
    let mut _1228: !;
    let mut _1229: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1231: ();
    let mut _1232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1233: std::result::Result<(), error::ErrorCode>;
    let mut _1234: u128;
    let mut _1235: &state::spot_market::SpotBalanceType;
    let _1236: &state::spot_market::SpotBalanceType;
    let _1237: state::spot_market::SpotBalanceType;
    let mut _1238: &mut state::spot_market::SpotMarket;
    let mut _1239: &mut state::spot_market::SpotMarket;
    let mut _1240: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1241: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1242: &mut state::user::SpotPosition;
    let mut _1243: &mut state::user::SpotPosition;
    let mut _1244: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _1245: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _1246: &mut state::user::User;
    let mut _1247: u16;
    let mut _1248: isize;
    let mut _1250: !;
    let mut _1251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1253: std::option::Option<u128>;
    let mut _1254: u128;
    let mut _1255: isize;
    let mut _1257: !;
    let mut _1258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1260: ();
    let mut _1262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1263: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1264: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1265: &u16;
    let _1266: &u16;
    let mut _1267: isize;
    let mut _1269: !;
    let mut _1270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1274: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1275: &mut state::user::User;
    let mut _1276: u16;
    let mut _1277: isize;
    let mut _1279: !;
    let mut _1280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1282: ();
    let mut _1283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1284: std::result::Result<(), error::ErrorCode>;
    let mut _1285: &mut state::user::PerpPosition;
    let mut _1286: &mut state::perp_market::PerpMarket;
    let mut _1287: &mut state::perp_market::PerpMarket;
    let mut _1288: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1289: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1290: i64;
    let mut _1291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1292: std::result::Result<i64, error::ErrorCode>;
    let mut _1293: u128;
    let mut _1294: isize;
    let mut _1296: !;
    let mut _1297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1299: isize;
    let mut _1301: !;
    let mut _1302: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1306: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1307: &mut state::user::User;
    let mut _1308: u16;
    let mut _1309: isize;
    let mut _1311: !;
    let mut _1312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1314: ();
    let mut _1315: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1316: std::result::Result<(), error::ErrorCode>;
    let mut _1317: &mut state::user::PerpPosition;
    let mut _1318: &mut state::perp_market::PerpMarket;
    let mut _1319: &mut state::perp_market::PerpMarket;
    let mut _1320: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1321: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1322: i64;
    let mut _1323: i64;
    let mut _1324: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1325: std::result::Result<i64, error::ErrorCode>;
    let mut _1326: u128;
    let mut _1327: isize;
    let mut _1329: !;
    let mut _1330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1332: bool;
    let mut _1333: isize;
    let mut _1335: !;
    let mut _1336: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1339: (u64, state::margin_calculation::MarginCalculation);
    let mut _1340: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, state::margin_calculation::MarginCalculation)>;
    let mut _1341: std::result::Result<(u64, state::margin_calculation::MarginCalculation), error::ErrorCode>;
    let mut _1342: &state::user::User;
    let mut _1343: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1344: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1345: &mut state::oracle_map::OracleMap<'_>;
    let mut _1346: u32;
    let mut _1347: u128;
    let mut _1348: isize;
    let mut _1350: !;
    let mut _1351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1353: u64;
    let mut _1354: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1355: std::result::Result<u64, error::ErrorCode>;
    let mut _1356: u64;
    let mut _1357: u64;
    let mut _1358: isize;
    let mut _1360: !;
    let mut _1361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1363: ();
    let mut _1364: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1365: std::result::Result<(), error::ErrorCode>;
    let mut _1366: &mut state::user::User;
    let mut _1367: u64;
    let mut _1368: isize;
    let mut _1370: !;
    let mut _1371: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1373: ();
    let mut _1374: bool;
    let mut _1375: u128;
    let mut _1376: u128;
    let _1377: ();
    let mut _1378: &mut state::user::User;
    let mut _1379: bool;
    let mut _1380: &state::user::User;
    let _1381: ();
    let mut _1382: &mut state::user::User;
    let mut _1384: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1385: std::result::Result<bool, error::ErrorCode>;
    let mut _1386: &state::user::User;
    let mut _1387: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1388: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1389: &mut state::oracle_map::OracleMap<'_>;
    let mut _1390: isize;
    let mut _1392: !;
    let mut _1393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1395: ();
    let mut _1396: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1397: std::result::Result<(), error::ErrorCode>;
    let mut _1398: bool;
    let mut _1399: ();
    let _1401: ();
    let mut _1402: &str;
    let _1403: &str;
    let mut _1404: &std::string::String;
    let _1405: &std::string::String;
    let _1406: std::string::String;
    let mut _1408: std::fmt::Arguments<'_>;
    let mut _1409: &[&str];
    let mut _1410: &[&str; 2];
    let _1411: &[&str; 2];
    let _1412: [&str; 2];
    let mut _1413: &[core::fmt::rt::Argument<'_>];
    let mut _1414: &[core::fmt::rt::Argument<'_>; 1];
    let _1415: &[core::fmt::rt::Argument<'_>; 1];
    let _1416: [core::fmt::rt::Argument<'_>; 1];
    let mut _1417: core::fmt::rt::Argument<'_>;
    let mut _1418: &error::ErrorCode;
    let _1419: &error::ErrorCode;
    let _1420: ();
    let mut _1421: &str;
    let _1422: &str;
    let mut _1423: error::ErrorCode;
    let mut _1424: isize;
    let mut _1426: !;
    let mut _1427: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1431: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1432: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1433: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1434: &u16;
    let _1435: &u16;
    let mut _1436: isize;
    let mut _1438: !;
    let mut _1439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1441: &state::oracle::OraclePriceData;
    let mut _1442: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _1443: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _1444: &mut state::oracle_map::OracleMap<'_>;
    let mut _1445: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1446: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1447: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _1448: &state::perp_market::PerpMarket;
    let _1449: &state::perp_market::PerpMarket;
    let mut _1450: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1451: isize;
    let mut _1453: !;
    let mut _1454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1456: ();
    let _1457: ();
    let mut _1458: &[&[u8]];
    let mut _1459: &[&[u8]; 1];
    let _1460: &[&[u8]; 1];
    let _1461: [&[u8]; 1];
    let mut _1462: &[u8];
    let _1463: &[u8];
    let mut _1464: &std::vec::Vec<u8>;
    let _1465: &std::vec::Vec<u8>;
    let _1466: std::vec::Vec<u8>;
    let mut _1467: &state::events::LiquidationRecord;
    let _1468: &state::events::LiquidationRecord;
    let _1469: state::events::LiquidationRecord;
    let mut _1470: i64;
    let mut _1471: u16;
    let mut _1472: state::events::LiquidationType;
    let mut _1473: anchor_lang::prelude::Pubkey;
    let mut _1474: anchor_lang::prelude::Pubkey;
    let mut _1475: u128;
    let mut _1476: i128;
    let mut _1477: bool;
    let mut _1478: &state::user::User;
    let mut _1479: u64;
    let mut _1480: state::events::LiquidateBorrowForPerpPnlRecord;
    let mut _1481: u16;
    let mut _1482: i64;
    let mut _1483: u128;
    let mut _1484: u16;
    let mut _1485: i64;
    let mut _1486: u128;
    let mut _1487: state::events::LiquidationRecord;
    let mut _1488: ();
    let mut _1513: bool;
    let mut _1514: bool;
    let mut _1515: bool;
    let mut _1516: bool;
    let mut _1517: bool;
    let mut _1518: isize;
    let mut _1519: isize;
    let mut _1520: isize;
    let mut _1521: isize;
    let mut _1522: isize;
    let mut _1523: isize;
    let mut _1524: isize;
    let mut _1525: isize;
    let mut _1526: isize;
    let mut _1527: isize;
    let mut _1528: isize;
    let mut _1529: isize;
    let mut _1530: isize;
    let mut _1531: isize;
    let mut _1532: isize;
    let mut _1533: isize;
    let mut _1534: isize;
    let mut _1535: isize;
    let mut _1536: isize;
    let mut _1537: isize;
    let mut _1538: isize;
    let mut _1539: isize;
    let mut _1540: isize;
    let mut _1541: isize;
    let mut _1542: isize;
    let mut _1543: isize;
    let mut _1544: isize;
    let mut _1545: isize;
    let mut _1546: isize;
    let mut _1547: isize;
    let mut _1548: isize;
    let mut _1549: isize;
    let mut _1550: isize;
    let mut _1551: isize;
    let mut _1552: isize;
    let mut _1553: isize;
    let mut _1554: isize;
    let mut _1555: isize;
    let mut _1556: isize;
    let mut _1557: isize;
    let mut _1558: isize;
    let mut _1559: isize;
    let mut _1560: isize;
    let mut _1561: isize;
    let mut _1562: isize;
    let mut _1563: isize;
    let mut _1564: isize;
    let mut _1565: isize;
    let mut _1566: isize;
    let mut _1567: isize;
    let mut _1568: isize;
    let mut _1569: isize;
    let mut _1570: isize;
    let mut _1571: isize;
    let mut _1572: isize;
    let mut _1573: isize;
    let mut _1574: isize;
    let mut _1575: isize;
    let mut _1576: isize;
    let mut _1577: isize;
    scope 1 {
        debug error_code => _23;
        let _30: std::string::String;
        let _49: std::string::String;
        let mut _1511: &[&str; 1];
        let mut _1512: &[&str; 2];
        scope 2 {
            debug res => _30;
        }
        scope 3 {
            debug res => _49;
        }
    }
    scope 4 {
        debug residual => _57;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _60;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _67;
        let _74: std::string::String;
        let _93: std::string::String;
        let mut _1509: &[&str; 1];
        let mut _1510: &[&str; 2];
        scope 9 {
            debug res => _74;
        }
        scope 10 {
            debug res => _93;
        }
    }
    scope 11 {
        debug residual => _101;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _104;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _111;
        let _118: std::string::String;
        let _137: std::string::String;
        let mut _1507: &[&str; 2];
        let mut _1508: &[&str; 2];
        scope 16 {
            debug res => _118;
        }
        scope 17 {
            debug res => _137;
        }
    }
    scope 18 {
        debug residual => _152;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _155;
        scope 21 {
        }
    }
    scope 22 {
        debug perp_market => _156;
        let _176: error::ErrorCode;
        let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _220: ();
        let _223: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _233: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        scope 27 {
            debug error_code => _176;
            let _183: std::string::String;
            let _202: std::string::String;
            let mut _1505: &[&str; 1];
            let mut _1506: &[&str; 2];
            scope 28 {
                debug res => _183;
            }
            scope 29 {
                debug res => _202;
            }
        }
        scope 30 {
            debug residual => _217;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _220;
            scope 33 {
            }
        }
        scope 34 {
            debug liability_spot_market => _223;
            let _243: error::ErrorCode;
            let _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _287: ();
            let _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _302: &state::user::PerpPosition;
            let _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _315: &state::user::SpotPosition;
            let _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _327: &mut state::user::PerpPosition;
            let _336: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _339: &mut state::user::SpotPosition;
            let _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _358: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            let _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _364: ();
            let _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _383: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            let _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _389: ();
            let _390: u128;
            let _391: i64;
            let _392: u32;
            let _393: u32;
            let _394: u32;
            let _396: &state::user::PerpPosition;
            let _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _405: &state::user::PerpPosition;
            scope 39 {
                debug error_code => _243;
                let _250: std::string::String;
                let _269: std::string::String;
                let mut _1503: &[&str; 1];
                let mut _1504: &[&str; 2];
                scope 40 {
                    debug res => _250;
                }
                scope 41 {
                    debug res => _269;
                }
            }
            scope 42 {
                debug residual => _284;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _287;
                scope 45 {
                }
            }
            scope 46 {
                debug residual => _299;
                scope 47 {
                }
            }
            scope 48 {
                debug val => _302;
                scope 49 {
                }
            }
            scope 50 {
                debug residual => _312;
                scope 51 {
                }
            }
            scope 52 {
                debug val => _315;
                scope 53 {
                }
            }
            scope 54 {
                debug residual => _324;
                scope 55 {
                }
            }
            scope 56 {
                debug val => _327;
                scope 57 {
                }
            }
            scope 58 {
                debug residual => _336;
                scope 59 {
                }
            }
            scope 60 {
                debug val => _339;
                scope 61 {
                }
            }
            scope 62 {
                debug residual => _355;
                scope 63 {
                }
            }
            scope 64 {
                debug val => _358;
                scope 65 {
                }
            }
            scope 66 {
                debug residual => _361;
                scope 67 {
                }
            }
            scope 68 {
                debug val => _364;
                scope 69 {
                }
            }
            scope 70 {
                debug residual => _380;
                scope 71 {
                }
            }
            scope 72 {
                debug val => _383;
                scope 73 {
                }
            }
            scope 74 {
                debug residual => _386;
                scope 75 {
                }
            }
            scope 76 {
                debug val => _389;
                scope 77 {
                }
            }
            scope 78 {
                debug pnl => _390;
                debug quote_price => _391;
                debug quote_decimals => _392;
                debug pnl_asset_weight => _393;
                debug pnl_liquidation_multiplier => _394;
                let _571: u128;
                let _572: i64;
                let _573: u32;
                let _574: u32;
                let _575: u32;
                let mut _577: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                let _584: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _587: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                scope 127 {
                    debug liability_amount => _571;
                    debug liability_price => _572;
                    debug liability_decimals => _573;
                    debug liability_weight => _574;
                    debug liability_liquidation_multiplier => _575;
                    let _753: state::margin_calculation::MarginCalculation;
                    let _763: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _766: state::margin_calculation::MarginCalculation;
                    scope 169 {
                        debug margin_calculation => _753;
                        let _779: std::string::String;
                        let _800: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _803: bool;
                        let _808: u16;
                        let _814: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _817: u16;
                        let mut _1495: &[&str; 1];
                        scope 174 {
                            debug res => _779;
                        }
                        scope 175 {
                            debug residual => _800;
                            scope 176 {
                            }
                        }
                        scope 177 {
                            debug val => _803;
                            scope 178 {
                            }
                        }
                        scope 179 {
                            debug liquidation_id => _808;
                            let mut _818: u64;
                            scope 184 {
                                debug margin_freed => _818;
                                let _819: std::vec::Vec<u32>;
                                let _836: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _839: std::vec::Vec<u32>;
                                scope 185 {
                                    debug canceled_order_ids => _819;
                                    let _840: state::margin_calculation::MarginCalculation;
                                    let _843: state::margin_calculation::MarginCalculation;
                                    let _853: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _856: state::margin_calculation::MarginCalculation;
                                    scope 190 {
                                        debug intermediate_margin_calculation => _840;
                                        let _968: u128;
                                        let _973: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _976: u128;
                                        scope 228 {
                                            debug margin_shortage => _968;
                                            let _977: u32;
                                            let _983: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _986: u32;
                                            scope 233 {
                                                debug liability_weight_with_buffer => _977;
                                                let _987: u128;
                                                let _998: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _1001: u128;
                                                scope 238 {
                                                    debug liability_transfer_to_cover_margin_shortage => _987;
                                                    let _1002: u128;
                                                    let _1011: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _1014: u128;
                                                    scope 243 {
                                                        debug max_pct_allowed => _1002;
                                                        let _1015: u128;
                                                        let _1022: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1025: u128;
                                                        scope 248 {
                                                            debug max_liability_allowed_to_be_transferred => _1015;
                                                            let _1034: u128;
                                                            let _1045: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1048: u128;
                                                            scope 253 {
                                                                debug liability_transfer_implied_by_pnl => _1034;
                                                                let _1049: i128;
                                                                let _1057: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1060: i128;
                                                                let _1064: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _1067: i128;
                                                                scope 258 {
                                                                    debug liability_value => _1049;
                                                                    let _1068: u128;
                                                                    scope 267 {
                                                                        debug minimum_liability_transfer => _1068;
                                                                        let _1073: u128;
                                                                        scope 268 {
                                                                            debug liability_transfer => _1073;
                                                                            let _1082: u128;
                                                                            let _1094: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _1097: u128;
                                                                            scope 269 {
                                                                                debug pnl_transfer => _1082;
                                                                                let _1110: std::string::String;
                                                                                let _1132: std::string::String;
                                                                                let _1157: std::string::String;
                                                                                let _1186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1189: ();
                                                                                let mut _1191: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                let _1198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1201: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                let mut _1261: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                let _1268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1271: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                let _1338: u64;
                                                                                let _1349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1352: (u64, state::margin_calculation::MarginCalculation);
                                                                                let mut _1489: &[&str; 3];
                                                                                let mut _1490: &[&str; 3];
                                                                                let mut _1491: &[&str; 2];
                                                                                scope 274 {
                                                                                    debug res => _1110;
                                                                                }
                                                                                scope 275 {
                                                                                    debug res => _1132;
                                                                                }
                                                                                scope 276 {
                                                                                    debug res => _1157;
                                                                                }
                                                                                scope 277 {
                                                                                    debug residual => _1186;
                                                                                    scope 278 {
                                                                                    }
                                                                                }
                                                                                scope 279 {
                                                                                    debug val => _1189;
                                                                                    scope 280 {
                                                                                    }
                                                                                }
                                                                                scope 281 {
                                                                                    debug liability_market => _1191;
                                                                                    let _1220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1223: &mut state::user::SpotPosition;
                                                                                    let _1227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1230: ();
                                                                                    let _1249: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1252: &mut state::user::SpotPosition;
                                                                                    let _1256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1259: ();
                                                                                    let mut _1493: &state::spot_market::SpotBalanceType;
                                                                                    let mut _1494: &state::spot_market::SpotBalanceType;
                                                                                    scope 286 {
                                                                                        debug residual => _1220;
                                                                                        scope 287 {
                                                                                        }
                                                                                    }
                                                                                    scope 288 {
                                                                                        debug val => _1223;
                                                                                        scope 289 {
                                                                                        }
                                                                                    }
                                                                                    scope 290 {
                                                                                        debug residual => _1227;
                                                                                        scope 291 {
                                                                                        }
                                                                                    }
                                                                                    scope 292 {
                                                                                        debug val => _1230;
                                                                                        scope 293 {
                                                                                        }
                                                                                    }
                                                                                    scope 294 {
                                                                                        debug residual => _1249;
                                                                                        scope 295 {
                                                                                        }
                                                                                    }
                                                                                    scope 296 {
                                                                                        debug val => _1252;
                                                                                        scope 297 {
                                                                                        }
                                                                                    }
                                                                                    scope 298 {
                                                                                        debug residual => _1256;
                                                                                        scope 299 {
                                                                                        }
                                                                                    }
                                                                                    scope 300 {
                                                                                        debug val => _1259;
                                                                                        scope 301 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 282 {
                                                                                    debug residual => _1198;
                                                                                    scope 283 {
                                                                                    }
                                                                                }
                                                                                scope 284 {
                                                                                    debug val => _1201;
                                                                                    scope 285 {
                                                                                    }
                                                                                }
                                                                                scope 302 {
                                                                                    debug market => _1261;
                                                                                    let _1272: &mut state::user::PerpPosition;
                                                                                    let _1278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1281: &mut state::user::PerpPosition;
                                                                                    scope 307 {
                                                                                        debug liquidator_position => _1272;
                                                                                        let _1295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1298: i64;
                                                                                        let _1300: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1303: ();
                                                                                        let _1304: &mut state::user::PerpPosition;
                                                                                        let _1310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1313: &mut state::user::PerpPosition;
                                                                                        scope 312 {
                                                                                            debug residual => _1295;
                                                                                            scope 313 {
                                                                                            }
                                                                                        }
                                                                                        scope 314 {
                                                                                            debug val => _1298;
                                                                                            scope 315 {
                                                                                            }
                                                                                        }
                                                                                        scope 316 {
                                                                                            debug residual => _1300;
                                                                                            scope 317 {
                                                                                            }
                                                                                        }
                                                                                        scope 318 {
                                                                                            debug val => _1303;
                                                                                            scope 319 {
                                                                                            }
                                                                                        }
                                                                                        scope 320 {
                                                                                            debug user_position => _1304;
                                                                                            let _1328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1331: i64;
                                                                                            let _1334: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1337: ();
                                                                                            scope 325 {
                                                                                                debug residual => _1328;
                                                                                                scope 326 {
                                                                                                }
                                                                                            }
                                                                                            scope 327 {
                                                                                                debug val => _1331;
                                                                                                scope 328 {
                                                                                                }
                                                                                            }
                                                                                            scope 329 {
                                                                                                debug residual => _1334;
                                                                                                scope 330 {
                                                                                                }
                                                                                            }
                                                                                            scope 331 {
                                                                                                debug val => _1337;
                                                                                                scope 332 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 321 {
                                                                                            debug residual => _1310;
                                                                                            scope 322 {
                                                                                            }
                                                                                        }
                                                                                        scope 323 {
                                                                                            debug val => _1313;
                                                                                            scope 324 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 308 {
                                                                                        debug residual => _1278;
                                                                                        scope 309 {
                                                                                        }
                                                                                    }
                                                                                    scope 310 {
                                                                                        debug val => _1281;
                                                                                        scope 311 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 303 {
                                                                                    debug residual => _1268;
                                                                                    scope 304 {
                                                                                    }
                                                                                }
                                                                                scope 305 {
                                                                                    debug val => _1271;
                                                                                    scope 306 {
                                                                                    }
                                                                                }
                                                                                scope 333 {
                                                                                    debug margin_freed_from_liability => _1338;
                                                                                    let _1359: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1362: u64;
                                                                                    let _1369: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1372: ();
                                                                                    let _1383: bool;
                                                                                    let _1391: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1394: bool;
                                                                                    scope 338 {
                                                                                        debug residual => _1359;
                                                                                        scope 339 {
                                                                                        }
                                                                                    }
                                                                                    scope 340 {
                                                                                        debug val => _1362;
                                                                                        scope 341 {
                                                                                        }
                                                                                    }
                                                                                    scope 342 {
                                                                                        debug residual => _1369;
                                                                                        scope 343 {
                                                                                        }
                                                                                    }
                                                                                    scope 344 {
                                                                                        debug val => _1372;
                                                                                        scope 345 {
                                                                                        }
                                                                                    }
                                                                                    scope 346 {
                                                                                        debug liquidator_meets_initial_margin_requirement => _1383;
                                                                                        let _1400: error::ErrorCode;
                                                                                        let _1425: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1428: ();
                                                                                        let _1429: i64;
                                                                                        let _1430: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                        let _1437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1440: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                        scope 351 {
                                                                                            debug error_code => _1400;
                                                                                            let _1407: std::string::String;
                                                                                            let mut _1492: &[&str; 2];
                                                                                            scope 352 {
                                                                                                debug res => _1407;
                                                                                            }
                                                                                        }
                                                                                        scope 353 {
                                                                                            debug residual => _1425;
                                                                                            scope 354 {
                                                                                            }
                                                                                        }
                                                                                        scope 355 {
                                                                                            debug val => _1428;
                                                                                            scope 356 {
                                                                                            }
                                                                                        }
                                                                                        scope 357 {
                                                                                            debug market_oracle_price => _1429;
                                                                                        }
                                                                                        scope 358 {
                                                                                            debug market => _1430;
                                                                                            let _1452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1455: &state::oracle::OraclePriceData;
                                                                                            scope 363 {
                                                                                                debug residual => _1452;
                                                                                                scope 364 {
                                                                                                }
                                                                                            }
                                                                                            scope 365 {
                                                                                                debug val => _1455;
                                                                                                scope 366 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 359 {
                                                                                            debug residual => _1437;
                                                                                            scope 360 {
                                                                                            }
                                                                                        }
                                                                                        scope 361 {
                                                                                            debug val => _1440;
                                                                                            scope 362 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 347 {
                                                                                        debug residual => _1391;
                                                                                        scope 348 {
                                                                                        }
                                                                                    }
                                                                                    scope 349 {
                                                                                        debug val => _1394;
                                                                                        scope 350 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 334 {
                                                                                    debug residual => _1349;
                                                                                    scope 335 {
                                                                                    }
                                                                                }
                                                                                scope 336 {
                                                                                    debug val => _1352;
                                                                                    scope 337 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 270 {
                                                                                debug residual => _1094;
                                                                                scope 271 {
                                                                                }
                                                                            }
                                                                            scope 272 {
                                                                                debug val => _1097;
                                                                                scope 273 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 259 {
                                                                    debug residual => _1057;
                                                                    scope 260 {
                                                                    }
                                                                }
                                                                scope 261 {
                                                                    debug val => _1060;
                                                                    scope 262 {
                                                                    }
                                                                }
                                                                scope 263 {
                                                                    debug residual => _1064;
                                                                    scope 264 {
                                                                    }
                                                                }
                                                                scope 265 {
                                                                    debug val => _1067;
                                                                    scope 266 {
                                                                    }
                                                                }
                                                            }
                                                            scope 254 {
                                                                debug residual => _1045;
                                                                scope 255 {
                                                                }
                                                            }
                                                            scope 256 {
                                                                debug val => _1048;
                                                                scope 257 {
                                                                }
                                                            }
                                                        }
                                                        scope 249 {
                                                            debug residual => _1022;
                                                            scope 250 {
                                                            }
                                                        }
                                                        scope 251 {
                                                            debug val => _1025;
                                                            scope 252 {
                                                            }
                                                        }
                                                    }
                                                    scope 244 {
                                                        debug residual => _1011;
                                                        scope 245 {
                                                        }
                                                    }
                                                    scope 246 {
                                                        debug val => _1014;
                                                        scope 247 {
                                                        }
                                                    }
                                                }
                                                scope 239 {
                                                    debug residual => _998;
                                                    scope 240 {
                                                    }
                                                }
                                                scope 241 {
                                                    debug val => _1001;
                                                    scope 242 {
                                                    }
                                                }
                                            }
                                            scope 234 {
                                                debug residual => _983;
                                                scope 235 {
                                                }
                                            }
                                            scope 236 {
                                                debug val => _986;
                                                scope 237 {
                                                }
                                            }
                                        }
                                        scope 229 {
                                            debug residual => _973;
                                            scope 230 {
                                            }
                                        }
                                        scope 231 {
                                            debug val => _976;
                                            scope 232 {
                                            }
                                        }
                                    }
                                    scope 191 {
                                        debug intermediate_margin_calculation => _843;
                                        let _857: u128;
                                        let _862: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _865: u128;
                                        scope 196 {
                                            debug initial_margin_shortage => _857;
                                            let _866: u128;
                                            let _871: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _874: u128;
                                            scope 201 {
                                                debug new_margin_shortage => _866;
                                                let _882: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _885: u64;
                                                let _892: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _895: ();
                                                let _902: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _905: bool;
                                                let _907: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                let _914: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _917: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                scope 206 {
                                                    debug residual => _882;
                                                    scope 207 {
                                                    }
                                                }
                                                scope 208 {
                                                    debug val => _885;
                                                    scope 209 {
                                                    }
                                                }
                                                scope 210 {
                                                    debug residual => _892;
                                                    scope 211 {
                                                    }
                                                }
                                                scope 212 {
                                                    debug val => _895;
                                                    scope 213 {
                                                    }
                                                }
                                                scope 214 {
                                                    debug residual => _902;
                                                    scope 215 {
                                                    }
                                                }
                                                scope 216 {
                                                    debug val => _905;
                                                    scope 217 {
                                                    }
                                                }
                                                scope 218 {
                                                    debug market => _907;
                                                    let _918: i64;
                                                    let _930: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _933: &state::oracle::OraclePriceData;
                                                    scope 223 {
                                                        debug market_oracle_price => _918;
                                                    }
                                                    scope 224 {
                                                        debug residual => _930;
                                                        scope 225 {
                                                        }
                                                    }
                                                    scope 226 {
                                                        debug val => _933;
                                                        scope 227 {
                                                        }
                                                    }
                                                }
                                                scope 219 {
                                                    debug residual => _914;
                                                    scope 220 {
                                                    }
                                                }
                                                scope 221 {
                                                    debug val => _917;
                                                    scope 222 {
                                                    }
                                                }
                                            }
                                            scope 202 {
                                                debug residual => _871;
                                                scope 203 {
                                                }
                                            }
                                            scope 204 {
                                                debug val => _874;
                                                scope 205 {
                                                }
                                            }
                                        }
                                        scope 197 {
                                            debug residual => _862;
                                            scope 198 {
                                            }
                                        }
                                        scope 199 {
                                            debug val => _865;
                                            scope 200 {
                                            }
                                        }
                                    }
                                    scope 192 {
                                        debug residual => _853;
                                        scope 193 {
                                        }
                                    }
                                    scope 194 {
                                        debug val => _856;
                                        scope 195 {
                                        }
                                    }
                                }
                                scope 186 {
                                    debug residual => _836;
                                    scope 187 {
                                    }
                                }
                                scope 188 {
                                    debug val => _839;
                                    scope 189 {
                                    }
                                }
                            }
                        }
                        scope 180 {
                            debug residual => _814;
                            scope 181 {
                            }
                        }
                        scope 182 {
                            debug val => _817;
                            scope 183 {
                            }
                        }
                    }
                    scope 170 {
                        debug residual => _763;
                        scope 171 {
                        }
                    }
                    scope 172 {
                        debug val => _766;
                        scope 173 {
                        }
                    }
                }
                scope 128 {
                    debug liability_market => _577;
                    let _588: &state::oracle::OraclePriceData;
                    let _589: &state::state::ValidityGuardRails;
                    let _601: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _604: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails);
                    scope 133 {
                        debug liability_price_data => _588;
                        debug validity_guard_rails => _589;
                        let _618: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _621: ();
                        let _622: &state::user::SpotPosition;
                        let _628: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _631: &state::user::SpotPosition;
                        scope 138 {
                            debug residual => _618;
                            scope 139 {
                            }
                        }
                        scope 140 {
                            debug val => _621;
                            scope 141 {
                            }
                        }
                        scope 142 {
                            debug spot_position => _622;
                            let _640: error::ErrorCode;
                            let _665: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _668: ();
                            let _669: u128;
                            let _678: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _681: u128;
                            let mut _1499: &state::spot_market::SpotBalanceType;
                            scope 147 {
                                debug error_code => _640;
                                let _647: std::string::String;
                                let mut _1498: &[&str; 2];
                                scope 148 {
                                    debug res => _647;
                                }
                            }
                            scope 149 {
                                debug residual => _665;
                                scope 150 {
                                }
                            }
                            scope 151 {
                                debug val => _668;
                                scope 152 {
                                }
                            }
                            scope 153 {
                                debug token_amount => _669;
                                let _688: error::ErrorCode;
                                let _729: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _732: ();
                                let _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _752: u32;
                                scope 158 {
                                    debug error_code => _688;
                                    let _695: std::string::String;
                                    let _714: std::string::String;
                                    let mut _1496: &[&str; 1];
                                    let mut _1497: &[&str; 2];
                                    scope 159 {
                                        debug res => _695;
                                    }
                                    scope 160 {
                                        debug res => _714;
                                    }
                                }
                                scope 161 {
                                    debug residual => _729;
                                    scope 162 {
                                    }
                                }
                                scope 163 {
                                    debug val => _732;
                                    scope 164 {
                                    }
                                }
                                scope 165 {
                                    debug residual => _749;
                                    scope 166 {
                                    }
                                }
                                scope 167 {
                                    debug val => _752;
                                    scope 168 {
                                    }
                                }
                            }
                            scope 154 {
                                debug residual => _678;
                                scope 155 {
                                }
                            }
                            scope 156 {
                                debug val => _681;
                                scope 157 {
                                }
                            }
                        }
                        scope 143 {
                            debug residual => _628;
                            scope 144 {
                            }
                        }
                        scope 145 {
                            debug val => _631;
                            scope 146 {
                            }
                        }
                    }
                    scope 134 {
                        debug residual => _601;
                        scope 135 {
                        }
                    }
                    scope 136 {
                        debug val => _604;
                        scope 137 {
                        }
                    }
                }
                scope 129 {
                    debug residual => _584;
                    scope 130 {
                    }
                }
                scope 131 {
                    debug val => _587;
                    scope 132 {
                    }
                }
            }
            scope 79 {
                debug user_position => _396;
                let _406: i64;
                scope 84 {
                    debug base_asset_amount => _406;
                    let _413: error::ErrorCode;
                    let _454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _457: ();
                    let _458: i128;
                    let _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _466: i128;
                    scope 85 {
                        debug error_code => _413;
                        let _420: std::string::String;
                        let _439: std::string::String;
                        let mut _1501: &[&str; 2];
                        let mut _1502: &[&str; 2];
                        scope 86 {
                            debug res => _420;
                        }
                        scope 87 {
                            debug res => _439;
                        }
                    }
                    scope 88 {
                        debug residual => _454;
                        scope 89 {
                        }
                    }
                    scope 90 {
                        debug val => _457;
                        scope 91 {
                        }
                    }
                    scope 92 {
                        debug pnl => _458;
                        let _473: error::ErrorCode;
                        let _498: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _501: ();
                        let _502: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                        let _509: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _512: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                        scope 97 {
                            debug error_code => _473;
                            let _480: std::string::String;
                            let mut _1500: &[&str; 2];
                            scope 98 {
                                debug res => _480;
                            }
                        }
                        scope 99 {
                            debug residual => _498;
                            scope 100 {
                            }
                        }
                        scope 101 {
                            debug val => _501;
                            scope 102 {
                            }
                        }
                        scope 103 {
                            debug market => _502;
                            let _513: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            let _522: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _525: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            scope 108 {
                                debug quote_spot_market => _513;
                                let _526: i64;
                                let _538: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _541: &state::oracle::OraclePriceData;
                                scope 113 {
                                    debug quote_price => _526;
                                    let _542: u32;
                                    let _551: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _554: u32;
                                    scope 118 {
                                        debug pnl_asset_weight => _542;
                                        let _567: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _570: u32;
                                        scope 123 {
                                            debug residual => _567;
                                            scope 124 {
                                            }
                                        }
                                        scope 125 {
                                            debug val => _570;
                                            scope 126 {
                                            }
                                        }
                                    }
                                    scope 119 {
                                        debug residual => _551;
                                        scope 120 {
                                        }
                                    }
                                    scope 121 {
                                        debug val => _554;
                                        scope 122 {
                                        }
                                    }
                                }
                                scope 114 {
                                    debug residual => _538;
                                    scope 115 {
                                    }
                                }
                                scope 116 {
                                    debug val => _541;
                                    scope 117 {
                                    }
                                }
                            }
                            scope 109 {
                                debug residual => _522;
                                scope 110 {
                                }
                            }
                            scope 111 {
                                debug val => _525;
                                scope 112 {
                                }
                            }
                        }
                        scope 104 {
                            debug residual => _509;
                            scope 105 {
                            }
                        }
                        scope 106 {
                            debug val => _512;
                            scope 107 {
                            }
                        }
                    }
                    scope 93 {
                        debug residual => _463;
                        scope 94 {
                        }
                    }
                    scope 95 {
                        debug val => _466;
                        scope 96 {
                        }
                    }
                }
            }
            scope 80 {
                debug residual => _402;
                scope 81 {
                }
            }
            scope 82 {
                debug val => _405;
                scope 83 {
                }
            }
        }
        scope 35 {
            debug residual => _230;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _233;
            scope 38 {
            }
        }
    }
    scope 23 {
        debug residual => _163;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _166;
        scope 26 {
        }
    }

    bb0: {
        _1517 = const false;
        _1516 = const false;
        _1513 = const false;
        _1515 = const false;
        _1514 = const false;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_5);
        _20 = User::is_bankrupt(move _21) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _20) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_21);
        StorageLive(_23);
        _23 = error::ErrorCode::UserBankrupt;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _1512 = const _;
        _34 = &(*_1512);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = ();
        _19 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb15;
    }

    bb4: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb7, unwind: bb716];
    }

    bb7: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb8, unwind: bb716];
    }

    bb8: {
        StorageDead(_25);
        drop(_29) -> [return: bb9, unwind: bb717];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _1511 = const _;
        _53 = &(*_1511);
        _52 = &(*_53);
        _51 = move _52 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_52);
        _50 = Arguments::<'_>::new_const(move _51) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_51);
        _49 = format(move _50) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_50);
        StorageDead(_53);
        _48 = move _49;
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = <String as Deref>::deref(move _46) -> [return: bb12, unwind: bb715];
    }

    bb12: {
        _44 = &(*_45);
        StorageDead(_46);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb13, unwind: bb715];
    }

    bb13: {
        StorageDead(_44);
        drop(_48) -> [return: bb14, unwind: bb717];
    }

    bb14: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_55);
        _55 = _23;
        _19 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        StorageDead(_23);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_20);
        _18 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _19) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_19);
        _56 = discriminant(_18);
        switchInt(move _56) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_60);
        _60 = ((_18 as Continue).0: ());
        _17 = _60;
        StorageDead(_60);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_7);
        _64 = User::is_bankrupt(move _65) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_57);
        _57 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb680;
    }

    bb21: {
        switchInt(move _64) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_65);
        StorageLive(_67);
        _67 = error::ErrorCode::UserBankrupt;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _1510 = const _;
        _78 = &(*_1510);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_67;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _85) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = ();
        _63 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_85);
        _83 = [move _84];
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_75);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb27, unwind: bb714];
    }

    bb27: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb28, unwind: bb714];
    }

    bb28: {
        StorageDead(_69);
        drop(_73) -> [return: bb29, unwind: bb717];
    }

    bb29: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _1509 = const _;
        _97 = &(*_1509);
        _96 = &(*_97);
        _95 = move _96 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_96);
        _94 = Arguments::<'_>::new_const(move _95) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_95);
        _93 = format(move _94) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_94);
        StorageDead(_97);
        _92 = move _93;
        StorageDead(_93);
        _91 = &_92;
        _90 = &(*_91);
        _89 = <String as Deref>::deref(move _90) -> [return: bb32, unwind: bb713];
    }

    bb32: {
        _88 = &(*_89);
        StorageDead(_90);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb33, unwind: bb713];
    }

    bb33: {
        StorageDead(_88);
        drop(_92) -> [return: bb34, unwind: bb717];
    }

    bb34: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_99);
        _99 = _67;
        _63 = std::result::Result::<(), error::ErrorCode>::Err(move _99);
        StorageDead(_99);
        StorageDead(_67);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_64);
        _62 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _63) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_63);
        _100 = discriminant(_62);
        switchInt(move _100) -> [0: bb37, 1: bb38, otherwise: bb18];
    }

    bb37: {
        StorageLive(_104);
        _104 = ((_62 as Continue).0: ());
        _61 = _104;
        StorageDead(_104);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = ((*_7).27: u8);
        _108 = Eq(move _109, const 0_u8);
        switchInt(move _108) -> [0: bb41, otherwise: bb40];
    }

    bb38: {
        StorageLive(_101);
        _101 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb680;
    }

    bb40: {
        StorageDead(_109);
        StorageLive(_110);
        _110 = ();
        _107 = std::result::Result::<(), error::ErrorCode>::Ok(move _110);
        StorageDead(_110);
        goto -> bb54;
    }

    bb41: {
        StorageDead(_109);
        StorageLive(_111);
        _111 = error::ErrorCode::InvalidPoolId;
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _1508 = const _;
        _122 = &(*_1508);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_111;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _129) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_129);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <String as Deref>::deref(move _115) -> [return: bb45, unwind: bb712];
    }

    bb45: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb46, unwind: bb712];
    }

    bb46: {
        StorageDead(_113);
        drop(_117) -> [return: bb47, unwind: bb717];
    }

    bb47: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _1507 = const _;
        _141 = &(*_1507);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &((*_7).27: u8);
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _148) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_148);
        _146 = [move _147];
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_138);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb51, unwind: bb711];
    }

    bb51: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb52, unwind: bb711];
    }

    bb52: {
        StorageDead(_132);
        drop(_136) -> [return: bb53, unwind: bb717];
    }

    bb53: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_150);
        _150 = _111;
        _107 = std::result::Result::<(), error::ErrorCode>::Err(move _150);
        StorageDead(_150);
        StorageDead(_111);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_108);
        _106 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _107) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_107);
        _151 = discriminant(_106);
        switchInt(move _151) -> [0: bb56, 1: bb57, otherwise: bb18];
    }

    bb56: {
        StorageLive(_155);
        _155 = ((_106 as Continue).0: ());
        _105 = _155;
        StorageDead(_155);
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_9);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_1;
        _160 = &(*_161);
        _158 = PerpMarketMap::<'_>::get_ref(move _159, move _160) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_152);
        _152 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb680;
    }

    bb59: {
        StorageDead(_160);
        StorageDead(_159);
        _157 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _158) -> [return: bb60, unwind: bb717];
    }

    bb60: {
        StorageDead(_158);
        _162 = discriminant(_157);
        switchInt(move _162) -> [0: bb61, 1: bb62, otherwise: bb18];
    }

    bb61: {
        StorageLive(_166);
        _166 = move ((_157 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1517 = const true;
        _156 = move _166;
        StorageDead(_166);
        _1520 = discriminant(_157);
        StorageDead(_161);
        StorageDead(_157);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_156;
        _172 = <Ref<'_, PerpMarket> as Deref>::deref(move _173) -> [return: bb64, unwind: bb743];
    }

    bb62: {
        StorageLive(_163);
        _163 = ((_157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb63, unwind: bb744];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_163);
        _1518 = discriminant(_157);
        StorageDead(_161);
        StorageDead(_157);
        goto -> bb679;
    }

    bb64: {
        _171 = &(*_172);
        StorageDead(_173);
        StorageLive(_174);
        _174 = PerpOperation::Liquidation;
        _170 = PerpMarket::is_operation_paused(move _171, move _174) -> [return: bb65, unwind: bb743];
    }

    bb65: {
        switchInt(move _170) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_172);
        StorageLive(_176);
        _176 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _1506 = const _;
        _187 = &(*_1506);
        _186 = &(*_187);
        _185 = move _186 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_176;
        _194 = &(*_195);
        _193 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _194) -> [return: bb68, unwind: bb743];
    }

    bb67: {
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_172);
        StorageLive(_175);
        _175 = ();
        _169 = std::result::Result::<(), error::ErrorCode>::Ok(move _175);
        StorageDead(_175);
        goto -> bb80;
    }

    bb68: {
        StorageDead(_194);
        _192 = [move _193];
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = move _190 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_190);
        _184 = Arguments::<'_>::new_v1(move _185, move _189) -> [return: bb69, unwind: bb743];
    }

    bb69: {
        StorageDead(_189);
        StorageDead(_185);
        _183 = format(move _184) -> [return: bb70, unwind: bb743];
    }

    bb70: {
        StorageDead(_184);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_187);
        _182 = move _183;
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = <String as Deref>::deref(move _180) -> [return: bb71, unwind: bb710];
    }

    bb71: {
        _178 = &(*_179);
        StorageDead(_180);
        _177 = solana_program::log::sol_log(move _178) -> [return: bb72, unwind: bb710];
    }

    bb72: {
        StorageDead(_178);
        drop(_182) -> [return: bb73, unwind: bb743];
    }

    bb73: {
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_177);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _1505 = const _;
        _206 = &(*_1505);
        _205 = &(*_206);
        _204 = move _205 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_205);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_1;
        _213 = &(*_214);
        _212 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _213) -> [return: bb74, unwind: bb743];
    }

    bb74: {
        StorageDead(_213);
        _211 = [move _212];
        StorageDead(_212);
        _210 = &_211;
        _209 = &(*_210);
        _208 = move _209 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_209);
        _203 = Arguments::<'_>::new_v1(move _204, move _208) -> [return: bb75, unwind: bb743];
    }

    bb75: {
        StorageDead(_208);
        StorageDead(_204);
        _202 = format(move _203) -> [return: bb76, unwind: bb743];
    }

    bb76: {
        StorageDead(_203);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_206);
        _201 = move _202;
        StorageDead(_202);
        _200 = &_201;
        _199 = &(*_200);
        _198 = <String as Deref>::deref(move _199) -> [return: bb77, unwind: bb709];
    }

    bb77: {
        _197 = &(*_198);
        StorageDead(_199);
        _196 = solana_program::log::sol_log(move _197) -> [return: bb78, unwind: bb709];
    }

    bb78: {
        StorageDead(_197);
        drop(_201) -> [return: bb79, unwind: bb743];
    }

    bb79: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_196);
        StorageLive(_215);
        _215 = _176;
        _169 = std::result::Result::<(), error::ErrorCode>::Err(move _215);
        StorageDead(_215);
        StorageDead(_176);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_170);
        _168 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _169) -> [return: bb81, unwind: bb743];
    }

    bb81: {
        StorageDead(_169);
        _216 = discriminant(_168);
        switchInt(move _216) -> [0: bb82, 1: bb83, otherwise: bb18];
    }

    bb82: {
        StorageLive(_220);
        _220 = ((_168 as Continue).0: ());
        _167 = _220;
        StorageDead(_220);
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_221);
        StorageLive(_222);
        _1517 = const false;
        _222 = move _156;
        _221 = std::mem::drop::<Ref<'_, PerpMarket>>(move _222) -> [return: bb85, unwind: bb743];
    }

    bb83: {
        StorageLive(_217);
        _217 = ((_168 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb84, unwind: bb743];
    }

    bb84: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_168);
        StorageDead(_167);
        goto -> bb726;
    }

    bb85: {
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(*_10);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_2;
        _227 = &(*_228);
        _225 = SpotMarketMap::<'_>::get_ref(move _226, move _227) -> [return: bb86, unwind: bb743];
    }

    bb86: {
        StorageDead(_227);
        StorageDead(_226);
        _224 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _225) -> [return: bb87, unwind: bb743];
    }

    bb87: {
        StorageDead(_225);
        _229 = discriminant(_224);
        switchInt(move _229) -> [0: bb88, 1: bb89, otherwise: bb18];
    }

    bb88: {
        StorageLive(_233);
        _233 = move ((_224 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1516 = const true;
        _223 = move _233;
        StorageDead(_233);
        _1524 = discriminant(_224);
        StorageDead(_228);
        StorageDead(_224);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_223;
        _239 = <Ref<'_, SpotMarket> as Deref>::deref(move _240) -> [return: bb91, unwind: bb740];
    }

    bb89: {
        StorageLive(_230);
        _230 = ((_224 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb90, unwind: bb741];
    }

    bb90: {
        StorageDead(_232);
        StorageDead(_230);
        _1522 = discriminant(_224);
        StorageDead(_228);
        StorageDead(_224);
        goto -> bb678;
    }

    bb91: {
        _238 = &(*_239);
        StorageDead(_240);
        StorageLive(_241);
        _241 = SpotOperation::Liquidation;
        _237 = SpotMarket::is_operation_paused(move _238, move _241) -> [return: bb92, unwind: bb740];
    }

    bb92: {
        switchInt(move _237) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_239);
        StorageLive(_243);
        _243 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _1504 = const _;
        _254 = &(*_1504);
        _253 = &(*_254);
        _252 = move _253 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_253);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_243;
        _261 = &(*_262);
        _260 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _261) -> [return: bb95, unwind: bb740];
    }

    bb94: {
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_239);
        StorageLive(_242);
        _242 = ();
        _236 = std::result::Result::<(), error::ErrorCode>::Ok(move _242);
        StorageDead(_242);
        goto -> bb107;
    }

    bb95: {
        StorageDead(_261);
        _259 = [move _260];
        StorageDead(_260);
        _258 = &_259;
        _257 = &(*_258);
        _256 = move _257 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_257);
        _251 = Arguments::<'_>::new_v1(move _252, move _256) -> [return: bb96, unwind: bb740];
    }

    bb96: {
        StorageDead(_256);
        StorageDead(_252);
        _250 = format(move _251) -> [return: bb97, unwind: bb740];
    }

    bb97: {
        StorageDead(_251);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_254);
        _249 = move _250;
        StorageDead(_250);
        _248 = &_249;
        _247 = &(*_248);
        _246 = <String as Deref>::deref(move _247) -> [return: bb98, unwind: bb708];
    }

    bb98: {
        _245 = &(*_246);
        StorageDead(_247);
        _244 = solana_program::log::sol_log(move _245) -> [return: bb99, unwind: bb708];
    }

    bb99: {
        StorageDead(_245);
        drop(_249) -> [return: bb100, unwind: bb740];
    }

    bb100: {
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _1503 = const _;
        _273 = &(*_1503);
        _272 = &(*_273);
        _271 = move _272 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_2;
        _280 = &(*_281);
        _279 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _280) -> [return: bb101, unwind: bb740];
    }

    bb101: {
        StorageDead(_280);
        _278 = [move _279];
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = move _276 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_276);
        _270 = Arguments::<'_>::new_v1(move _271, move _275) -> [return: bb102, unwind: bb740];
    }

    bb102: {
        StorageDead(_275);
        StorageDead(_271);
        _269 = format(move _270) -> [return: bb103, unwind: bb740];
    }

    bb103: {
        StorageDead(_270);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_273);
        _268 = move _269;
        StorageDead(_269);
        _267 = &_268;
        _266 = &(*_267);
        _265 = <String as Deref>::deref(move _266) -> [return: bb104, unwind: bb707];
    }

    bb104: {
        _264 = &(*_265);
        StorageDead(_266);
        _263 = solana_program::log::sol_log(move _264) -> [return: bb105, unwind: bb707];
    }

    bb105: {
        StorageDead(_264);
        drop(_268) -> [return: bb106, unwind: bb740];
    }

    bb106: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_263);
        StorageLive(_282);
        _282 = _243;
        _236 = std::result::Result::<(), error::ErrorCode>::Err(move _282);
        StorageDead(_282);
        StorageDead(_243);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_237);
        _235 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _236) -> [return: bb108, unwind: bb740];
    }

    bb108: {
        StorageDead(_236);
        _283 = discriminant(_235);
        switchInt(move _283) -> [0: bb109, 1: bb110, otherwise: bb18];
    }

    bb109: {
        StorageLive(_287);
        _287 = ((_235 as Continue).0: ());
        _234 = _287;
        StorageDead(_287);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_288);
        StorageLive(_289);
        _1516 = const false;
        _289 = move _223;
        _288 = std::mem::drop::<Ref<'_, SpotMarket>>(move _289) -> [return: bb112, unwind: bb740];
    }

    bb110: {
        StorageLive(_284);
        _284 = ((_235 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_286);
        _286 = _284;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _286) -> [return: bb111, unwind: bb740];
    }

    bb111: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb724;
    }

    bb112: {
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &(*_5);
        StorageLive(_295);
        _295 = _1;
        _293 = User::get_perp_position(move _294, move _295) -> [return: bb113, unwind: bb740];
    }

    bb113: {
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &_1;
        _296 = {closure@programs/drift/src/controller/liquidation.rs:2351:55: 2351:58} { perp_market_index: move _297 };
        StorageDead(_297);
        _292 = std::result::Result::<&PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2351:55: 2351:58}>(move _293, move _296) -> [return: bb114, unwind: bb740];
    }

    bb114: {
        StorageDead(_296);
        StorageDead(_293);
        _291 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _292) -> [return: bb115, unwind: bb740];
    }

    bb115: {
        StorageDead(_292);
        _298 = discriminant(_291);
        switchInt(move _298) -> [0: bb116, 1: bb117, otherwise: bb18];
    }

    bb116: {
        StorageLive(_302);
        _302 = ((_291 as Continue).0: &state::user::PerpPosition);
        _290 = _302;
        StorageDead(_302);
        StorageDead(_291);
        StorageDead(_290);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &(*_5);
        StorageLive(_308);
        _308 = _2;
        _306 = User::get_spot_position(move _307, move _308) -> [return: bb119, unwind: bb740];
    }

    bb117: {
        StorageLive(_299);
        _299 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_301);
        _301 = _299;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _301) -> [return: bb118, unwind: bb740];
    }

    bb118: {
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_291);
        StorageDead(_290);
        goto -> bb724;
    }

    bb119: {
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_2;
        _309 = {closure@programs/drift/src/controller/liquidation.rs:2360:18: 2360:21} { liability_market_index: move _310 };
        StorageDead(_310);
        _305 = std::result::Result::<&SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2360:18: 2360:21}>(move _306, move _309) -> [return: bb120, unwind: bb740];
    }

    bb120: {
        StorageDead(_309);
        StorageDead(_306);
        _304 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _305) -> [return: bb121, unwind: bb740];
    }

    bb121: {
        StorageDead(_305);
        _311 = discriminant(_304);
        switchInt(move _311) -> [0: bb122, 1: bb123, otherwise: bb18];
    }

    bb122: {
        StorageLive(_315);
        _315 = ((_304 as Continue).0: &state::user::SpotPosition);
        _303 = _315;
        StorageDead(_315);
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &mut (*_7);
        StorageLive(_321);
        _321 = _1;
        _319 = User::force_get_perp_position_mut(move _320, move _321) -> [return: bb125, unwind: bb740];
    }

    bb123: {
        StorageLive(_312);
        _312 = ((_304 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_314);
        _314 = _312;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _314) -> [return: bb124, unwind: bb740];
    }

    bb124: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_304);
        StorageDead(_303);
        goto -> bb724;
    }

    bb125: {
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_322);
        _322 = {closure@programs/drift/src/controller/liquidation.rs:2370:18: 2370:21};
        _318 = std::result::Result::<&mut PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2370:18: 2370:21}>(move _319, move _322) -> [return: bb126, unwind: bb740];
    }

    bb126: {
        StorageDead(_322);
        StorageDead(_319);
        _317 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _318) -> [return: bb127, unwind: bb740];
    }

    bb127: {
        StorageDead(_318);
        _323 = discriminant(_317);
        switchInt(move _323) -> [0: bb128, 1: bb129, otherwise: bb18];
    }

    bb128: {
        StorageLive(_327);
        _327 = move ((_317 as Continue).0: &mut state::user::PerpPosition);
        _316 = move _327;
        StorageDead(_327);
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &mut (*_7);
        StorageLive(_333);
        _333 = _2;
        _331 = User::force_get_spot_position_mut(move _332, move _333) -> [return: bb131, unwind: bb740];
    }

    bb129: {
        StorageLive(_324);
        _324 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_326);
        _326 = _324;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _326) -> [return: bb130, unwind: bb740];
    }

    bb130: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb724;
    }

    bb131: {
        StorageDead(_333);
        StorageDead(_332);
        StorageLive(_334);
        _334 = {closure@programs/drift/src/controller/liquidation.rs:2377:18: 2377:21};
        _330 = std::result::Result::<&mut SpotPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:2377:18: 2377:21}>(move _331, move _334) -> [return: bb132, unwind: bb740];
    }

    bb132: {
        StorageDead(_334);
        StorageDead(_331);
        _329 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _330) -> [return: bb133, unwind: bb740];
    }

    bb133: {
        StorageDead(_330);
        _335 = discriminant(_329);
        switchInt(move _335) -> [0: bb134, 1: bb135, otherwise: bb18];
    }

    bb134: {
        StorageLive(_339);
        _339 = move ((_329 as Continue).0: &mut state::user::SpotPosition);
        _328 = move _339;
        StorageDead(_339);
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &mut (*_5);
        StorageLive(_344);
        _344 = &(*_6);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_9);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_1;
        _352 = &(*_353);
        _350 = PerpMarketMap::<'_>::get_ref_mut(move _351, move _352) -> [return: bb137, unwind: bb740];
    }

    bb135: {
        StorageLive(_336);
        _336 = ((_329 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_338);
        _338 = _336;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _338) -> [return: bb136, unwind: bb740];
    }

    bb136: {
        StorageDead(_338);
        StorageDead(_336);
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb724;
    }

    bb137: {
        StorageDead(_352);
        StorageDead(_351);
        _349 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _350) -> [return: bb138, unwind: bb740];
    }

    bb138: {
        _1515 = const true;
        StorageDead(_350);
        _354 = discriminant(_349);
        switchInt(move _354) -> [0: bb139, 1: bb140, otherwise: bb18];
    }

    bb139: {
        StorageLive(_358);
        _358 = move ((_349 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _348 = move _358;
        StorageDead(_358);
        _347 = &mut _348;
        _346 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _347) -> [return: bb142, unwind: bb706];
    }

    bb140: {
        StorageLive(_355);
        _355 = ((_349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_357);
        _357 = _355;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _357) -> [return: bb141, unwind: bb738];
    }

    bb141: {
        StorageDead(_357);
        StorageDead(_355);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        goto -> bb722;
    }

    bb142: {
        _345 = &mut (*_346);
        StorageDead(_347);
        StorageLive(_359);
        _359 = _12;
        _342 = controller::funding::settle_funding_payment(move _343, move _344, move _345, move _359) -> [return: bb143, unwind: bb706];
    }

    bb143: {
        StorageDead(_359);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        _341 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _342) -> [return: bb144, unwind: bb706];
    }

    bb144: {
        StorageDead(_342);
        _360 = discriminant(_341);
        switchInt(move _360) -> [0: bb145, 1: bb146, otherwise: bb18];
    }

    bb145: {
        StorageLive(_364);
        _364 = ((_341 as Continue).0: ());
        _340 = _364;
        StorageDead(_364);
        drop(_348) -> [return: bb718, unwind: bb738];
    }

    bb146: {
        StorageLive(_361);
        _361 = ((_341 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_363);
        _363 = _361;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _363) -> [return: bb147, unwind: bb706];
    }

    bb147: {
        StorageDead(_363);
        StorageDead(_361);
        drop(_348) -> [return: bb722, unwind: bb738];
    }

    bb148: {
        StorageDead(_377);
        StorageDead(_376);
        _374 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _375) -> [return: bb149, unwind: bb740];
    }

    bb149: {
        _1514 = const true;
        StorageDead(_375);
        _379 = discriminant(_374);
        switchInt(move _379) -> [0: bb150, 1: bb151, otherwise: bb18];
    }

    bb150: {
        StorageLive(_383);
        _383 = move ((_374 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _373 = move _383;
        StorageDead(_383);
        _372 = &mut _373;
        _371 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _372) -> [return: bb153, unwind: bb705];
    }

    bb151: {
        StorageLive(_380);
        _380 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_382);
        _382 = _380;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _382) -> [return: bb152, unwind: bb737];
    }

    bb152: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_367);
        goto -> bb721;
    }

    bb153: {
        _370 = &mut (*_371);
        StorageDead(_372);
        StorageLive(_384);
        _384 = _12;
        _367 = controller::funding::settle_funding_payment(move _368, move _369, move _370, move _384) -> [return: bb154, unwind: bb705];
    }

    bb154: {
        StorageDead(_384);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        _366 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _367) -> [return: bb155, unwind: bb705];
    }

    bb155: {
        StorageDead(_367);
        _385 = discriminant(_366);
        switchInt(move _385) -> [0: bb156, 1: bb157, otherwise: bb18];
    }

    bb156: {
        StorageLive(_389);
        _389 = ((_366 as Continue).0: ());
        _365 = _389;
        StorageDead(_389);
        drop(_373) -> [return: bb719, unwind: bb737];
    }

    bb157: {
        StorageLive(_386);
        _386 = ((_366 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_388);
        _388 = _386;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _388) -> [return: bb158, unwind: bb705];
    }

    bb158: {
        StorageDead(_388);
        StorageDead(_386);
        drop(_373) -> [return: bb721, unwind: bb737];
    }

    bb159: {
        StorageDead(_400);
        StorageDead(_399);
        _397 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _398) -> [return: bb160, unwind: bb740];
    }

    bb160: {
        StorageDead(_398);
        _401 = discriminant(_397);
        switchInt(move _401) -> [0: bb161, 1: bb162, otherwise: bb18];
    }

    bb161: {
        StorageLive(_405);
        _405 = ((_397 as Continue).0: &state::user::PerpPosition);
        _396 = _405;
        StorageDead(_405);
        StorageDead(_397);
        StorageLive(_406);
        _406 = ((*_396).1: i64);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = _406;
        _410 = Eq(move _411, const 0_i64);
        switchInt(move _410) -> [0: bb165, otherwise: bb164];
    }

    bb162: {
        StorageLive(_402);
        _402 = ((_397 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_404);
        _404 = _402;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _404) -> [return: bb163, unwind: bb740];
    }

    bb163: {
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_397);
        goto -> bb676;
    }

    bb164: {
        StorageDead(_411);
        StorageLive(_412);
        _412 = ();
        _409 = std::result::Result::<(), error::ErrorCode>::Ok(move _412);
        StorageDead(_412);
        goto -> bb178;
    }

    bb165: {
        StorageDead(_411);
        StorageLive(_413);
        _413 = error::ErrorCode::InvalidPerpPositionToLiquidate;
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _1502 = const _;
        _424 = &(*_1502);
        _423 = &(*_424);
        _422 = move _423 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_423);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_413;
        _431 = &(*_432);
        _430 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _431) -> [return: bb166, unwind: bb740];
    }

    bb166: {
        StorageDead(_431);
        _429 = [move _430];
        StorageDead(_430);
        _428 = &_429;
        _427 = &(*_428);
        _426 = move _427 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_427);
        _421 = Arguments::<'_>::new_v1(move _422, move _426) -> [return: bb167, unwind: bb740];
    }

    bb167: {
        StorageDead(_426);
        StorageDead(_422);
        _420 = format(move _421) -> [return: bb168, unwind: bb740];
    }

    bb168: {
        StorageDead(_421);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_424);
        _419 = move _420;
        StorageDead(_420);
        _418 = &_419;
        _417 = &(*_418);
        _416 = <String as Deref>::deref(move _417) -> [return: bb169, unwind: bb704];
    }

    bb169: {
        _415 = &(*_416);
        StorageDead(_417);
        _414 = solana_program::log::sol_log(move _415) -> [return: bb170, unwind: bb704];
    }

    bb170: {
        StorageDead(_415);
        drop(_419) -> [return: bb171, unwind: bb740];
    }

    bb171: {
        StorageDead(_419);
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_414);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _1501 = const _;
        _443 = &(*_1501);
        _442 = &(*_443);
        _441 = move _442 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_442);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = &_406;
        _450 = &(*_451);
        _449 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _450) -> [return: bb172, unwind: bb740];
    }

    bb172: {
        StorageDead(_450);
        _448 = [move _449];
        StorageDead(_449);
        _447 = &_448;
        _446 = &(*_447);
        _445 = move _446 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_446);
        _440 = Arguments::<'_>::new_v1(move _441, move _445) -> [return: bb173, unwind: bb740];
    }

    bb173: {
        StorageDead(_445);
        StorageDead(_441);
        _439 = format(move _440) -> [return: bb174, unwind: bb740];
    }

    bb174: {
        StorageDead(_440);
        StorageDead(_451);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_443);
        _438 = move _439;
        StorageDead(_439);
        _437 = &_438;
        _436 = &(*_437);
        _435 = <String as Deref>::deref(move _436) -> [return: bb175, unwind: bb703];
    }

    bb175: {
        _434 = &(*_435);
        StorageDead(_436);
        _433 = solana_program::log::sol_log(move _434) -> [return: bb176, unwind: bb703];
    }

    bb176: {
        StorageDead(_434);
        drop(_438) -> [return: bb177, unwind: bb740];
    }

    bb177: {
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_433);
        StorageLive(_452);
        _452 = _413;
        _409 = std::result::Result::<(), error::ErrorCode>::Err(move _452);
        StorageDead(_452);
        StorageDead(_413);
        goto -> bb178;
    }

    bb178: {
        StorageDead(_410);
        _408 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _409) -> [return: bb179, unwind: bb740];
    }

    bb179: {
        StorageDead(_409);
        _453 = discriminant(_408);
        switchInt(move _453) -> [0: bb180, 1: bb181, otherwise: bb18];
    }

    bb180: {
        StorageLive(_457);
        _457 = ((_408 as Continue).0: ());
        _407 = _457;
        StorageDead(_457);
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = ((*_396).2: i64);
        _460 = <i64 as Cast>::cast::<i128>(move _461) -> [return: bb183, unwind: bb740];
    }

    bb181: {
        StorageLive(_454);
        _454 = ((_408 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_456);
        _456 = _454;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _456) -> [return: bb182, unwind: bb740];
    }

    bb182: {
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_408);
        StorageDead(_407);
        goto -> bb675;
    }

    bb183: {
        StorageDead(_461);
        _459 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _460) -> [return: bb184, unwind: bb740];
    }

    bb184: {
        StorageDead(_460);
        _462 = discriminant(_459);
        switchInt(move _462) -> [0: bb185, 1: bb186, otherwise: bb18];
    }

    bb185: {
        StorageLive(_466);
        _466 = ((_459 as Continue).0: i128);
        _458 = _466;
        StorageDead(_466);
        StorageDead(_459);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = _458;
        _470 = Gt(move _471, const 0_i128);
        switchInt(move _470) -> [0: bb189, otherwise: bb188];
    }

    bb186: {
        StorageLive(_463);
        _463 = ((_459 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_465);
        _465 = _463;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _465) -> [return: bb187, unwind: bb740];
    }

    bb187: {
        StorageDead(_465);
        StorageDead(_463);
        StorageDead(_459);
        goto -> bb674;
    }

    bb188: {
        StorageDead(_471);
        StorageLive(_472);
        _472 = ();
        _469 = std::result::Result::<(), error::ErrorCode>::Ok(move _472);
        StorageDead(_472);
        goto -> bb197;
    }

    bb189: {
        StorageDead(_471);
        StorageLive(_473);
        _473 = error::ErrorCode::InvalidPerpPositionToLiquidate;
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _1500 = const _;
        _484 = &(*_1500);
        _483 = &(*_484);
        _482 = move _483 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_483);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &_473;
        _491 = &(*_492);
        _490 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _491) -> [return: bb190, unwind: bb740];
    }

    bb190: {
        StorageDead(_491);
        _489 = [move _490];
        StorageDead(_490);
        _488 = &_489;
        _487 = &(*_488);
        _486 = move _487 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_487);
        _481 = Arguments::<'_>::new_v1(move _482, move _486) -> [return: bb191, unwind: bb740];
    }

    bb191: {
        StorageDead(_486);
        StorageDead(_482);
        _480 = format(move _481) -> [return: bb192, unwind: bb740];
    }

    bb192: {
        StorageDead(_481);
        StorageDead(_492);
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_484);
        _479 = move _480;
        StorageDead(_480);
        _478 = &_479;
        _477 = &(*_478);
        _476 = <String as Deref>::deref(move _477) -> [return: bb193, unwind: bb702];
    }

    bb193: {
        _475 = &(*_476);
        StorageDead(_477);
        _474 = solana_program::log::sol_log(move _475) -> [return: bb194, unwind: bb702];
    }

    bb194: {
        StorageDead(_475);
        drop(_479) -> [return: bb195, unwind: bb740];
    }

    bb195: {
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_474);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = const "Perp position must have position pnl";
        _494 = &(*_495);
        _493 = solana_program::log::sol_log(move _494) -> [return: bb196, unwind: bb740];
    }

    bb196: {
        StorageDead(_494);
        StorageDead(_495);
        StorageDead(_493);
        StorageLive(_496);
        _496 = _473;
        _469 = std::result::Result::<(), error::ErrorCode>::Err(move _496);
        StorageDead(_496);
        StorageDead(_473);
        goto -> bb197;
    }

    bb197: {
        StorageDead(_470);
        _468 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _469) -> [return: bb198, unwind: bb740];
    }

    bb198: {
        StorageDead(_469);
        _497 = discriminant(_468);
        switchInt(move _497) -> [0: bb199, 1: bb200, otherwise: bb18];
    }

    bb199: {
        StorageLive(_501);
        _501 = ((_468 as Continue).0: ());
        _467 = _501;
        StorageDead(_501);
        StorageDead(_468);
        StorageDead(_467);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &(*_9);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &_1;
        _506 = &(*_507);
        _504 = PerpMarketMap::<'_>::get_ref(move _505, move _506) -> [return: bb202, unwind: bb740];
    }

    bb200: {
        StorageLive(_498);
        _498 = ((_468 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_500);
        _500 = _498;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _500) -> [return: bb201, unwind: bb740];
    }

    bb201: {
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_468);
        StorageDead(_467);
        goto -> bb674;
    }

    bb202: {
        StorageDead(_506);
        StorageDead(_505);
        _503 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _504) -> [return: bb203, unwind: bb740];
    }

    bb203: {
        StorageDead(_504);
        _508 = discriminant(_503);
        switchInt(move _508) -> [0: bb204, 1: bb205, otherwise: bb18];
    }

    bb204: {
        StorageLive(_512);
        _512 = move ((_503 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _502 = move _512;
        StorageDead(_512);
        _1532 = discriminant(_503);
        StorageDead(_507);
        StorageDead(_503);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = &(*_10);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = &_502;
        _519 = <Ref<'_, PerpMarket> as Deref>::deref(move _520) -> [return: bb207, unwind: bb701];
    }

    bb205: {
        StorageLive(_509);
        _509 = ((_503 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_511);
        _511 = _509;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _511) -> [return: bb206, unwind: bb736];
    }

    bb206: {
        StorageDead(_511);
        StorageDead(_509);
        _1530 = discriminant(_503);
        StorageDead(_507);
        StorageDead(_503);
        goto -> bb673;
    }

    bb207: {
        StorageDead(_520);
        _518 = &((*_519).26: u16);
        _517 = &(*_518);
        _515 = SpotMarketMap::<'_>::get_ref(move _516, move _517) -> [return: bb208, unwind: bb701];
    }

    bb208: {
        StorageDead(_517);
        StorageDead(_516);
        _514 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _515) -> [return: bb209, unwind: bb701];
    }

    bb209: {
        StorageDead(_515);
        _521 = discriminant(_514);
        switchInt(move _521) -> [0: bb210, 1: bb211, otherwise: bb18];
    }

    bb210: {
        StorageLive(_525);
        _525 = move ((_514 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _513 = move _525;
        StorageDead(_525);
        _1536 = discriminant(_514);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_514);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &mut (*_11);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &_513;
        _535 = <Ref<'_, SpotMarket> as Deref>::deref(move _536) -> [return: bb213, unwind: bb700];
    }

    bb211: {
        StorageLive(_522);
        _522 = ((_514 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_524);
        _524 = _522;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _524) -> [return: bb212, unwind: bb735];
    }

    bb212: {
        StorageDead(_524);
        StorageDead(_522);
        _1534 = discriminant(_514);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_514);
        goto -> bb672;
    }

    bb213: {
        _534 = &(*_535);
        StorageDead(_536);
        _533 = SpotMarket::oracle_id(move _534) -> [return: bb214, unwind: bb700];
    }

    bb214: {
        StorageDead(_534);
        _532 = &_533;
        _531 = &(*_532);
        _529 = OracleMap::<'_>::get_price_data(move _530, move _531) -> [return: bb215, unwind: bb700];
    }

    bb215: {
        StorageDead(_531);
        StorageDead(_530);
        _528 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _529) -> [return: bb216, unwind: bb700];
    }

    bb216: {
        StorageDead(_529);
        _537 = discriminant(_528);
        switchInt(move _537) -> [0: bb217, 1: bb218, otherwise: bb18];
    }

    bb217: {
        StorageLive(_541);
        _541 = ((_528 as Continue).0: &state::oracle::OraclePriceData);
        _527 = _541;
        StorageDead(_541);
        _526 = ((*_527).0: i64);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_528);
        StorageDead(_527);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _547 = &_502;
        _546 = <Ref<'_, PerpMarket> as Deref>::deref(move _547) -> [return: bb220, unwind: bb700];
    }

    bb218: {
        StorageLive(_538);
        _538 = ((_528 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_540);
        _540 = _538;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _540) -> [return: bb219, unwind: bb700];
    }

    bb219: {
        StorageDead(_540);
        StorageDead(_538);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_528);
        StorageDead(_527);
        goto -> bb671;
    }

    bb220: {
        _545 = &(*_546);
        StorageDead(_547);
        StorageLive(_548);
        _548 = _458;
        StorageLive(_549);
        _549 = math::margin::MarginRequirementType::Maintenance;
        _544 = PerpMarket::get_unrealized_asset_weight(move _545, move _548, move _549) -> [return: bb221, unwind: bb700];
    }

    bb221: {
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_545);
        _543 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _544) -> [return: bb222, unwind: bb700];
    }

    bb222: {
        StorageDead(_544);
        _550 = discriminant(_543);
        switchInt(move _550) -> [0: bb223, 1: bb224, otherwise: bb18];
    }

    bb223: {
        StorageLive(_554);
        _554 = ((_543 as Continue).0: u32);
        _542 = _554;
        StorageDead(_554);
        StorageDead(_546);
        StorageDead(_543);
        StorageLive(_555);
        StorageLive(_556);
        _556 = _458;
        _555 = core::num::<impl i128>::unsigned_abs(move _556) -> [return: bb226, unwind: bb700];
    }

    bb224: {
        StorageLive(_551);
        _551 = ((_543 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_553);
        _553 = _551;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _553) -> [return: bb225, unwind: bb700];
    }

    bb225: {
        StorageDead(_553);
        StorageDead(_551);
        StorageDead(_546);
        StorageDead(_543);
        StorageDead(_542);
        goto -> bb671;
    }

    bb226: {
        StorageDead(_556);
        StorageLive(_557);
        _557 = _526;
        StorageLive(_558);
        _558 = _542;
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _564 = &_502;
        _563 = <Ref<'_, PerpMarket> as Deref>::deref(move _564) -> [return: bb227, unwind: bb700];
    }

    bb227: {
        StorageDead(_564);
        _562 = ((*_563).13: u32);
        StorageLive(_565);
        _565 = LiquidationMultiplierType::Premium;
        _561 = calculate_liquidation_multiplier(move _562, move _565) -> [return: bb228, unwind: bb700];
    }

    bb228: {
        StorageDead(_565);
        StorageDead(_562);
        _560 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _561) -> [return: bb229, unwind: bb700];
    }

    bb229: {
        StorageDead(_561);
        _566 = discriminant(_560);
        switchInt(move _566) -> [0: bb230, 1: bb231, otherwise: bb18];
    }

    bb230: {
        StorageLive(_570);
        _570 = ((_560 as Continue).0: u32);
        _559 = _570;
        StorageDead(_570);
        _395 = (move _555, move _557, const 6_u32, move _558, move _559);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_542);
        StorageDead(_526);
        drop(_513) -> [return: bb233, unwind: bb701];
    }

    bb231: {
        StorageLive(_567);
        _567 = ((_560 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_569);
        _569 = _567;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _569) -> [return: bb232, unwind: bb700];
    }

    bb232: {
        StorageDead(_569);
        StorageDead(_567);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_542);
        StorageDead(_526);
        drop(_513) -> [return: bb669, unwind: bb701];
    }

    bb233: {
        StorageDead(_513);
        drop(_502) -> [return: bb234, unwind: bb740];
    }

    bb234: {
        StorageDead(_502);
        StorageDead(_458);
        StorageDead(_406);
        StorageDead(_396);
        StorageLive(_390);
        _390 = (_395.0: u128);
        StorageLive(_391);
        _391 = (_395.1: i64);
        StorageLive(_392);
        _392 = (_395.2: u32);
        StorageLive(_393);
        _393 = (_395.3: u32);
        StorageLive(_394);
        _394 = (_395.4: u32);
        StorageDead(_563);
        StorageDead(_560);
        StorageDead(_395);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        _580 = &(*_10);
        StorageLive(_581);
        StorageLive(_582);
        _582 = &_2;
        _581 = &(*_582);
        _579 = SpotMarketMap::<'_>::get_ref_mut(move _580, move _581) -> [return: bb235, unwind: bb740];
    }

    bb235: {
        StorageDead(_581);
        StorageDead(_580);
        _578 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _579) -> [return: bb236, unwind: bb740];
    }

    bb236: {
        StorageDead(_579);
        _583 = discriminant(_578);
        switchInt(move _583) -> [0: bb237, 1: bb238, otherwise: bb18];
    }

    bb237: {
        StorageLive(_587);
        _587 = move ((_578 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _577 = move _587;
        StorageDead(_587);
        _1540 = discriminant(_578);
        StorageDead(_582);
        StorageDead(_578);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _593 = &mut (*_11);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = &_577;
        _598 = <RefMut<'_, SpotMarket> as Deref>::deref(move _599) -> [return: bb240, unwind: bb699];
    }

    bb238: {
        StorageLive(_584);
        _584 = ((_578 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_586);
        _586 = _584;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _586) -> [return: bb239, unwind: bb734];
    }

    bb239: {
        StorageDead(_586);
        StorageDead(_584);
        _1538 = discriminant(_578);
        StorageDead(_582);
        StorageDead(_578);
        goto -> bb666;
    }

    bb240: {
        _597 = &(*_598);
        StorageDead(_599);
        _596 = SpotMarket::oracle_id(move _597) -> [return: bb241, unwind: bb699];
    }

    bb241: {
        StorageDead(_597);
        _595 = &_596;
        _594 = &(*_595);
        _592 = OracleMap::<'_>::get_price_data_and_guard_rails(move _593, move _594) -> [return: bb242, unwind: bb699];
    }

    bb242: {
        StorageDead(_594);
        StorageDead(_593);
        _591 = <std::result::Result<(&OraclePriceData, &ValidityGuardRails), error::ErrorCode> as Try>::branch(move _592) -> [return: bb243, unwind: bb699];
    }

    bb243: {
        StorageDead(_592);
        _600 = discriminant(_591);
        switchInt(move _600) -> [0: bb244, 1: bb245, otherwise: bb18];
    }

    bb244: {
        StorageLive(_604);
        _604 = ((_591 as Continue).0: (&state::oracle::OraclePriceData, &state::state::ValidityGuardRails));
        _590 = _604;
        StorageDead(_604);
        StorageLive(_588);
        _588 = (_590.0: &state::oracle::OraclePriceData);
        StorageLive(_589);
        _589 = (_590.1: &state::state::ValidityGuardRails);
        StorageDead(_598);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_591);
        StorageDead(_590);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        _611 = &mut _577;
        _610 = &mut (*_611);
        _609 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _610) -> [return: bb247, unwind: bb699];
    }

    bb245: {
        StorageLive(_601);
        _601 = ((_591 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_603);
        _603 = _601;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _603) -> [return: bb246, unwind: bb699];
    }

    bb246: {
        StorageDead(_603);
        StorageDead(_601);
        StorageDead(_598);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_591);
        StorageDead(_590);
        goto -> bb665;
    }

    bb247: {
        _608 = &mut (*_609);
        StorageDead(_610);
        StorageLive(_612);
        _612 = &(*_588);
        StorageLive(_613);
        _613 = &(*_589);
        StorageLive(_614);
        _614 = _12;
        StorageLive(_615);
        StorageLive(_616);
        _616 = DriftAction::Liquidate;
        _615 = Option::<DriftAction>::Some(move _616);
        StorageDead(_616);
        _607 = update_spot_market_and_check_validity(move _608, move _612, move _613, move _614, move _615) -> [return: bb248, unwind: bb699];
    }

    bb248: {
        StorageDead(_615);
        StorageDead(_614);
        StorageDead(_613);
        StorageDead(_612);
        StorageDead(_608);
        _606 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _607) -> [return: bb249, unwind: bb699];
    }

    bb249: {
        StorageDead(_607);
        _617 = discriminant(_606);
        switchInt(move _617) -> [0: bb250, 1: bb251, otherwise: bb18];
    }

    bb250: {
        StorageLive(_621);
        _621 = ((_606 as Continue).0: ());
        _605 = _621;
        StorageDead(_621);
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_606);
        StorageDead(_605);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        _625 = &(*_5);
        StorageLive(_626);
        _626 = _2;
        _624 = User::get_spot_position(move _625, move _626) -> [return: bb253, unwind: bb699];
    }

    bb251: {
        StorageLive(_618);
        _618 = ((_606 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_620);
        _620 = _618;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _620) -> [return: bb252, unwind: bb699];
    }

    bb252: {
        StorageDead(_620);
        StorageDead(_618);
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_606);
        StorageDead(_605);
        goto -> bb664;
    }

    bb253: {
        StorageDead(_626);
        StorageDead(_625);
        _623 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _624) -> [return: bb254, unwind: bb699];
    }

    bb254: {
        StorageDead(_624);
        _627 = discriminant(_623);
        switchInt(move _627) -> [0: bb255, 1: bb256, otherwise: bb18];
    }

    bb255: {
        StorageLive(_631);
        _631 = ((_623 as Continue).0: &state::user::SpotPosition);
        _622 = _631;
        StorageDead(_631);
        StorageDead(_623);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _636 = &((*_622).5: state::spot_market::SpotBalanceType);
        StorageLive(_637);
        _1499 = const _;
        _637 = &(*_1499);
        _635 = <SpotBalanceType as PartialEq>::eq(move _636, move _637) -> [return: bb258, unwind: bb699];
    }

    bb256: {
        StorageLive(_628);
        _628 = ((_623 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_630);
        _630 = _628;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _630) -> [return: bb257, unwind: bb699];
    }

    bb257: {
        StorageDead(_630);
        StorageDead(_628);
        StorageDead(_623);
        goto -> bb663;
    }

    bb258: {
        switchInt(move _635) -> [0: bb260, otherwise: bb259];
    }

    bb259: {
        StorageDead(_637);
        StorageDead(_636);
        StorageLive(_639);
        _639 = ();
        _634 = std::result::Result::<(), error::ErrorCode>::Ok(move _639);
        StorageDead(_639);
        goto -> bb268;
    }

    bb260: {
        StorageDead(_637);
        StorageDead(_636);
        StorageLive(_640);
        _640 = error::ErrorCode::WrongSpotBalanceType;
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _1498 = const _;
        _651 = &(*_1498);
        _650 = &(*_651);
        _649 = move _650 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_650);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &_640;
        _658 = &(*_659);
        _657 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _658) -> [return: bb261, unwind: bb699];
    }

    bb261: {
        StorageDead(_658);
        _656 = [move _657];
        StorageDead(_657);
        _655 = &_656;
        _654 = &(*_655);
        _653 = move _654 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_654);
        _648 = Arguments::<'_>::new_v1(move _649, move _653) -> [return: bb262, unwind: bb699];
    }

    bb262: {
        StorageDead(_653);
        StorageDead(_649);
        _647 = format(move _648) -> [return: bb263, unwind: bb699];
    }

    bb263: {
        StorageDead(_648);
        StorageDead(_659);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_651);
        _646 = move _647;
        StorageDead(_647);
        _645 = &_646;
        _644 = &(*_645);
        _643 = <String as Deref>::deref(move _644) -> [return: bb264, unwind: bb698];
    }

    bb264: {
        _642 = &(*_643);
        StorageDead(_644);
        _641 = solana_program::log::sol_log(move _642) -> [return: bb265, unwind: bb698];
    }

    bb265: {
        StorageDead(_642);
        drop(_646) -> [return: bb266, unwind: bb699];
    }

    bb266: {
        StorageDead(_646);
        StorageDead(_645);
        StorageDead(_643);
        StorageDead(_641);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = const "User did not have a borrow for the borrow market index";
        _661 = &(*_662);
        _660 = solana_program::log::sol_log(move _661) -> [return: bb267, unwind: bb699];
    }

    bb267: {
        StorageDead(_661);
        StorageDead(_662);
        StorageDead(_660);
        StorageLive(_663);
        _663 = _640;
        _634 = std::result::Result::<(), error::ErrorCode>::Err(move _663);
        StorageDead(_663);
        StorageDead(_640);
        goto -> bb268;
    }

    bb268: {
        StorageDead(_635);
        _633 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _634) -> [return: bb269, unwind: bb699];
    }

    bb269: {
        StorageDead(_634);
        _664 = discriminant(_633);
        switchInt(move _664) -> [0: bb270, 1: bb271, otherwise: bb18];
    }

    bb270: {
        StorageLive(_668);
        _668 = ((_633 as Continue).0: ());
        _632 = _668;
        StorageDead(_668);
        StorageDead(_633);
        StorageDead(_632);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        _672 = &(*_622);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        _676 = &_577;
        _675 = &(*_676);
        _674 = <RefMut<'_, SpotMarket> as Deref>::deref(move _675) -> [return: bb273, unwind: bb699];
    }

    bb271: {
        StorageLive(_665);
        _665 = ((_633 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_667);
        _667 = _665;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _667) -> [return: bb272, unwind: bb699];
    }

    bb272: {
        StorageDead(_667);
        StorageDead(_665);
        StorageDead(_633);
        StorageDead(_632);
        goto -> bb663;
    }

    bb273: {
        _673 = &(*_674);
        StorageDead(_675);
        _671 = SpotPosition::get_token_amount(move _672, move _673) -> [return: bb274, unwind: bb699];
    }

    bb274: {
        StorageDead(_673);
        StorageDead(_672);
        _670 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _671) -> [return: bb275, unwind: bb699];
    }

    bb275: {
        StorageDead(_671);
        _677 = discriminant(_670);
        switchInt(move _677) -> [0: bb276, 1: bb277, otherwise: bb18];
    }

    bb276: {
        StorageLive(_681);
        _681 = ((_670 as Continue).0: u128);
        _669 = _681;
        StorageDead(_681);
        StorageDead(_676);
        StorageDead(_674);
        StorageDead(_670);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _686 = _669;
        _685 = Ne(move _686, const 0_u128);
        switchInt(move _685) -> [0: bb280, otherwise: bb279];
    }

    bb277: {
        StorageLive(_678);
        _678 = ((_670 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_680);
        _680 = _678;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _680) -> [return: bb278, unwind: bb699];
    }

    bb278: {
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_676);
        StorageDead(_674);
        StorageDead(_670);
        goto -> bb662;
    }

    bb279: {
        StorageDead(_686);
        StorageLive(_687);
        _687 = ();
        _684 = std::result::Result::<(), error::ErrorCode>::Ok(move _687);
        StorageDead(_687);
        goto -> bb293;
    }

    bb280: {
        StorageDead(_686);
        StorageLive(_688);
        _688 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _1497 = const _;
        _699 = &(*_1497);
        _698 = &(*_699);
        _697 = move _698 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_698);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        _707 = &_688;
        _706 = &(*_707);
        _705 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _706) -> [return: bb281, unwind: bb699];
    }

    bb281: {
        StorageDead(_706);
        _704 = [move _705];
        StorageDead(_705);
        _703 = &_704;
        _702 = &(*_703);
        _701 = move _702 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_702);
        _696 = Arguments::<'_>::new_v1(move _697, move _701) -> [return: bb282, unwind: bb699];
    }

    bb282: {
        StorageDead(_701);
        StorageDead(_697);
        _695 = format(move _696) -> [return: bb283, unwind: bb699];
    }

    bb283: {
        StorageDead(_696);
        StorageDead(_707);
        StorageDead(_704);
        StorageDead(_703);
        StorageDead(_699);
        _694 = move _695;
        StorageDead(_695);
        _693 = &_694;
        _692 = &(*_693);
        _691 = <String as Deref>::deref(move _692) -> [return: bb284, unwind: bb697];
    }

    bb284: {
        _690 = &(*_691);
        StorageDead(_692);
        _689 = solana_program::log::sol_log(move _690) -> [return: bb285, unwind: bb697];
    }

    bb285: {
        StorageDead(_690);
        drop(_694) -> [return: bb286, unwind: bb699];
    }

    bb286: {
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_691);
        StorageDead(_689);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _1496 = const _;
        _718 = &(*_1496);
        _717 = &(*_718);
        _716 = move _717 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_717);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = &_2;
        _725 = &(*_726);
        _724 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _725) -> [return: bb287, unwind: bb699];
    }

    bb287: {
        StorageDead(_725);
        _723 = [move _724];
        StorageDead(_724);
        _722 = &_723;
        _721 = &(*_722);
        _720 = move _721 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_721);
        _715 = Arguments::<'_>::new_v1(move _716, move _720) -> [return: bb288, unwind: bb699];
    }

    bb288: {
        StorageDead(_720);
        StorageDead(_716);
        _714 = format(move _715) -> [return: bb289, unwind: bb699];
    }

    bb289: {
        StorageDead(_715);
        StorageDead(_726);
        StorageDead(_723);
        StorageDead(_722);
        StorageDead(_718);
        _713 = move _714;
        StorageDead(_714);
        _712 = &_713;
        _711 = &(*_712);
        _710 = <String as Deref>::deref(move _711) -> [return: bb290, unwind: bb696];
    }

    bb290: {
        _709 = &(*_710);
        StorageDead(_711);
        _708 = solana_program::log::sol_log(move _709) -> [return: bb291, unwind: bb696];
    }

    bb291: {
        StorageDead(_709);
        drop(_713) -> [return: bb292, unwind: bb699];
    }

    bb292: {
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_710);
        StorageDead(_708);
        StorageLive(_727);
        _727 = _688;
        _684 = std::result::Result::<(), error::ErrorCode>::Err(move _727);
        StorageDead(_727);
        StorageDead(_688);
        goto -> bb293;
    }

    bb293: {
        StorageDead(_685);
        _683 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _684) -> [return: bb294, unwind: bb699];
    }

    bb294: {
        StorageDead(_684);
        _728 = discriminant(_683);
        switchInt(move _728) -> [0: bb295, 1: bb296, otherwise: bb18];
    }

    bb295: {
        StorageLive(_732);
        _732 = ((_683 as Continue).0: ());
        _682 = _732;
        StorageDead(_732);
        StorageDead(_683);
        StorageDead(_682);
        StorageLive(_733);
        _733 = _669;
        StorageLive(_734);
        _734 = ((*_588).0: i64);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        _737 = &_577;
        _736 = <RefMut<'_, SpotMarket> as Deref>::deref(move _737) -> [return: bb298, unwind: bb699];
    }

    bb296: {
        StorageLive(_729);
        _729 = ((_683 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_731);
        _731 = _729;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _731) -> [return: bb297, unwind: bb699];
    }

    bb297: {
        StorageDead(_731);
        StorageDead(_729);
        StorageDead(_683);
        StorageDead(_682);
        goto -> bb662;
    }

    bb298: {
        StorageDead(_737);
        _735 = ((*_736).41: u32);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        _740 = &_577;
        _739 = <RefMut<'_, SpotMarket> as Deref>::deref(move _740) -> [return: bb299, unwind: bb699];
    }

    bb299: {
        StorageDead(_740);
        _738 = ((*_739).34: u32);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = &_577;
        _745 = <RefMut<'_, SpotMarket> as Deref>::deref(move _746) -> [return: bb300, unwind: bb699];
    }

    bb300: {
        StorageDead(_746);
        _744 = ((*_745).36: u32);
        StorageLive(_747);
        _747 = LiquidationMultiplierType::Discount;
        _743 = calculate_liquidation_multiplier(move _744, move _747) -> [return: bb301, unwind: bb699];
    }

    bb301: {
        StorageDead(_747);
        StorageDead(_744);
        _742 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _743) -> [return: bb302, unwind: bb699];
    }

    bb302: {
        StorageDead(_743);
        _748 = discriminant(_742);
        switchInt(move _748) -> [0: bb303, 1: bb304, otherwise: bb18];
    }

    bb303: {
        StorageLive(_752);
        _752 = ((_742 as Continue).0: u32);
        _741 = _752;
        StorageDead(_752);
        _576 = (move _733, move _734, move _735, move _738, move _741);
        StorageDead(_741);
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_669);
        StorageDead(_622);
        StorageDead(_589);
        StorageDead(_588);
        drop(_577) -> [return: bb306, unwind: bb740];
    }

    bb304: {
        StorageLive(_749);
        _749 = ((_742 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_751);
        _751 = _749;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _751) -> [return: bb305, unwind: bb699];
    }

    bb305: {
        StorageDead(_751);
        StorageDead(_749);
        StorageDead(_741);
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_669);
        StorageDead(_622);
        StorageDead(_589);
        StorageDead(_588);
        drop(_577) -> [return: bb661, unwind: bb740];
    }

    bb306: {
        StorageDead(_577);
        StorageLive(_571);
        _571 = (_576.0: u128);
        StorageLive(_572);
        _572 = (_576.1: i64);
        StorageLive(_573);
        _573 = (_576.2: u32);
        StorageLive(_574);
        _574 = (_576.3: u32);
        StorageLive(_575);
        _575 = (_576.4: u32);
        StorageDead(_745);
        StorageDead(_742);
        StorageDead(_739);
        StorageDead(_736);
        StorageDead(_576);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        _756 = &(*_5);
        StorageLive(_757);
        _757 = &(*_9);
        StorageLive(_758);
        _758 = &(*_10);
        StorageLive(_759);
        _759 = &mut (*_11);
        StorageLive(_760);
        StorageLive(_761);
        _761 = _14;
        _760 = MarginContext::liquidation(move _761) -> [return: bb307, unwind: bb740];
    }

    bb307: {
        StorageDead(_761);
        _755 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _756, move _757, move _758, move _759, move _760) -> [return: bb308, unwind: bb740];
    }

    bb308: {
        StorageDead(_760);
        StorageDead(_759);
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_756);
        _754 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _755) -> [return: bb309, unwind: bb740];
    }

    bb309: {
        StorageDead(_755);
        _762 = discriminant(_754);
        switchInt(move _762) -> [0: bb310, 1: bb311, otherwise: bb18];
    }

    bb310: {
        StorageLive(_766);
        _766 = ((_754 as Continue).0: state::margin_calculation::MarginCalculation);
        _753 = _766;
        StorageDead(_766);
        StorageDead(_754);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        _769 = &(*_5);
        _768 = User::is_being_liquidated(move _769) -> [return: bb313, unwind: bb740];
    }

    bb311: {
        StorageLive(_763);
        _763 = ((_754 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_765);
        _765 = _763;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _765) -> [return: bb312, unwind: bb740];
    }

    bb312: {
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_754);
        goto -> bb660;
    }

    bb313: {
        switchInt(move _768) -> [0: bb315, otherwise: bb314];
    }

    bb314: {
        StorageDead(_769);
        goto -> bb325;
    }

    bb315: {
        StorageDead(_769);
        StorageLive(_770);
        StorageLive(_771);
        _771 = &_753;
        _770 = MarginCalculation::meets_margin_requirement(move _771) -> [return: bb316, unwind: bb740];
    }

    bb316: {
        switchInt(move _770) -> [0: bb324, otherwise: bb317];
    }

    bb317: {
        StorageDead(_771);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        _1495 = const _;
        _783 = &(*_1495);
        _782 = &(*_783);
        _781 = move _782 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_782);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        _791 = &_753;
        _790 = &(*_791);
        _789 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _790) -> [return: bb318, unwind: bb740];
    }

    bb318: {
        StorageDead(_790);
        _788 = [move _789];
        StorageDead(_789);
        _787 = &_788;
        _786 = &(*_787);
        _785 = move _786 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_786);
        _780 = Arguments::<'_>::new_v1(move _781, move _785) -> [return: bb319, unwind: bb740];
    }

    bb319: {
        StorageDead(_785);
        StorageDead(_781);
        _779 = format(move _780) -> [return: bb320, unwind: bb740];
    }

    bb320: {
        StorageDead(_780);
        StorageDead(_791);
        StorageDead(_788);
        StorageDead(_787);
        StorageDead(_783);
        _778 = move _779;
        StorageDead(_779);
        _777 = &_778;
        _776 = &(*_777);
        _775 = <String as Deref>::deref(move _776) -> [return: bb321, unwind: bb695];
    }

    bb321: {
        _774 = &(*_775);
        StorageDead(_776);
        _773 = solana_program::log::sol_log(move _774) -> [return: bb322, unwind: bb695];
    }

    bb322: {
        StorageDead(_774);
        drop(_778) -> [return: bb323, unwind: bb740];
    }

    bb323: {
        StorageDead(_778);
        StorageDead(_777);
        StorageDead(_775);
        StorageDead(_773);
        StorageLive(_792);
        _792 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _792);
        StorageDead(_792);
        goto -> bb659;
    }

    bb324: {
        StorageDead(_771);
        goto -> bb325;
    }

    bb325: {
        StorageLive(_793);
        StorageLive(_794);
        _794 = &(*_5);
        _793 = User::is_being_liquidated(move _794) -> [return: bb326, unwind: bb740];
    }

    bb326: {
        switchInt(move _793) -> [0: bb336, otherwise: bb327];
    }

    bb327: {
        StorageDead(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _798 = &_753;
        _797 = MarginCalculation::can_exit_liquidation(move _798) -> [return: bb328, unwind: bb740];
    }

    bb328: {
        StorageDead(_798);
        _796 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _797) -> [return: bb329, unwind: bb740];
    }

    bb329: {
        StorageDead(_797);
        _799 = discriminant(_796);
        switchInt(move _799) -> [0: bb330, 1: bb331, otherwise: bb18];
    }

    bb330: {
        StorageLive(_803);
        _803 = ((_796 as Continue).0: bool);
        _795 = _803;
        StorageDead(_803);
        switchInt(move _795) -> [0: bb334, otherwise: bb333];
    }

    bb331: {
        StorageLive(_800);
        _800 = ((_796 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_802);
        _802 = _800;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _802) -> [return: bb332, unwind: bb740];
    }

    bb332: {
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_796);
        goto -> bb658;
    }

    bb333: {
        StorageDead(_796);
        StorageLive(_805);
        StorageLive(_806);
        _806 = &mut (*_5);
        _805 = User::exit_liquidation(move _806) -> [return: bb335, unwind: bb740];
    }

    bb334: {
        StorageDead(_796);
        goto -> bb337;
    }

    bb335: {
        StorageDead(_806);
        StorageDead(_805);
        StorageLive(_807);
        _807 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _807);
        StorageDead(_807);
        goto -> bb658;
    }

    bb336: {
        StorageDead(_794);
        goto -> bb337;
    }

    bb337: {
        _767 = const ();
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_770);
        StorageDead(_768);
        StorageDead(_767);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        _811 = &mut (*_5);
        StorageLive(_812);
        _812 = _13;
        _810 = User::enter_liquidation(move _811, move _812) -> [return: bb338, unwind: bb740];
    }

    bb338: {
        StorageDead(_812);
        StorageDead(_811);
        _809 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _810) -> [return: bb339, unwind: bb740];
    }

    bb339: {
        StorageDead(_810);
        _813 = discriminant(_809);
        switchInt(move _813) -> [0: bb340, 1: bb341, otherwise: bb18];
    }

    bb340: {
        StorageLive(_817);
        _817 = ((_809 as Continue).0: u16);
        _808 = _817;
        StorageDead(_817);
        StorageDead(_809);
        StorageLive(_818);
        _818 = const 0_u64;
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        _822 = &mut (*_5);
        StorageLive(_823);
        _823 = &(*_6);
        StorageLive(_824);
        StorageLive(_825);
        _825 = &(*_8);
        _824 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _825);
        StorageDead(_825);
        StorageLive(_826);
        _826 = &(*_9);
        StorageLive(_827);
        _827 = &(*_10);
        StorageLive(_828);
        _828 = &mut (*_11);
        StorageLive(_829);
        _829 = _12;
        StorageLive(_830);
        _830 = _13;
        StorageLive(_831);
        _831 = OrderActionExplanation::Liquidation;
        StorageLive(_832);
        _832 = Option::<state::user::MarketType>::None;
        StorageLive(_833);
        _833 = Option::<u16>::None;
        StorageLive(_834);
        _834 = Option::<controller::position::PositionDirection>::None;
        _821 = controller::orders::cancel_orders(move _822, move _823, move _824, move _826, move _827, move _828, move _829, move _830, move _831, move _832, move _833, move _834) -> [return: bb343, unwind: bb740];
    }

    bb341: {
        StorageLive(_814);
        _814 = ((_809 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_816);
        _816 = _814;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _816) -> [return: bb342, unwind: bb740];
    }

    bb342: {
        StorageDead(_816);
        StorageDead(_814);
        StorageDead(_809);
        goto -> bb657;
    }

    bb343: {
        StorageDead(_834);
        StorageDead(_833);
        StorageDead(_832);
        StorageDead(_831);
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_826);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        _820 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _821) -> [return: bb344, unwind: bb740];
    }

    bb344: {
        StorageDead(_821);
        _835 = discriminant(_820);
        switchInt(move _835) -> [0: bb345, 1: bb346, otherwise: bb18];
    }

    bb345: {
        StorageLive(_839);
        _839 = move ((_820 as Continue).0: std::vec::Vec<u32>);
        _1513 = const true;
        _819 = move _839;
        StorageDead(_839);
        _1544 = discriminant(_820);
        StorageDead(_820);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _842 = &_819;
        _841 = Vec::<u32>::is_empty(move _842) -> [return: bb348, unwind: bb732];
    }

    bb346: {
        StorageLive(_836);
        _836 = ((_820 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_838);
        _838 = _836;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _838) -> [return: bb347, unwind: bb733];
    }

    bb347: {
        StorageDead(_838);
        StorageDead(_836);
        _1542 = discriminant(_820);
        StorageDead(_820);
        goto -> bb656;
    }

    bb348: {
        switchInt(move _841) -> [0: bb350, otherwise: bb349];
    }

    bb349: {
        StorageDead(_842);
        _840 = _753;
        goto -> bb406;
    }

    bb350: {
        StorageDead(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        _846 = &(*_5);
        StorageLive(_847);
        _847 = &(*_9);
        StorageLive(_848);
        _848 = &(*_10);
        StorageLive(_849);
        _849 = &mut (*_11);
        StorageLive(_850);
        StorageLive(_851);
        _851 = _14;
        _850 = MarginContext::liquidation(move _851) -> [return: bb351, unwind: bb732];
    }

    bb351: {
        StorageDead(_851);
        _845 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _846, move _847, move _848, move _849, move _850) -> [return: bb352, unwind: bb732];
    }

    bb352: {
        StorageDead(_850);
        StorageDead(_849);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_846);
        _844 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _845) -> [return: bb353, unwind: bb732];
    }

    bb353: {
        StorageDead(_845);
        _852 = discriminant(_844);
        switchInt(move _852) -> [0: bb354, 1: bb355, otherwise: bb18];
    }

    bb354: {
        StorageLive(_856);
        _856 = ((_844 as Continue).0: state::margin_calculation::MarginCalculation);
        _843 = _856;
        StorageDead(_856);
        StorageDead(_844);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        _860 = &_753;
        _859 = MarginCalculation::margin_shortage(move _860) -> [return: bb357, unwind: bb732];
    }

    bb355: {
        StorageLive(_853);
        _853 = ((_844 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_855);
        _855 = _853;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _855) -> [return: bb356, unwind: bb732];
    }

    bb356: {
        StorageDead(_855);
        StorageDead(_853);
        StorageDead(_844);
        goto -> bb654;
    }

    bb357: {
        StorageDead(_860);
        _858 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _859) -> [return: bb358, unwind: bb732];
    }

    bb358: {
        StorageDead(_859);
        _861 = discriminant(_858);
        switchInt(move _861) -> [0: bb359, 1: bb360, otherwise: bb18];
    }

    bb359: {
        StorageLive(_865);
        _865 = ((_858 as Continue).0: u128);
        _857 = _865;
        StorageDead(_865);
        StorageDead(_858);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        _869 = &_843;
        _868 = MarginCalculation::margin_shortage(move _869) -> [return: bb362, unwind: bb732];
    }

    bb360: {
        StorageLive(_862);
        _862 = ((_858 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_864);
        _864 = _862;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _864) -> [return: bb361, unwind: bb732];
    }

    bb361: {
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_858);
        goto -> bb653;
    }

    bb362: {
        StorageDead(_869);
        _867 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _868) -> [return: bb363, unwind: bb732];
    }

    bb363: {
        StorageDead(_868);
        _870 = discriminant(_867);
        switchInt(move _870) -> [0: bb364, 1: bb365, otherwise: bb18];
    }

    bb364: {
        StorageLive(_874);
        _874 = ((_867 as Continue).0: u128);
        _866 = _874;
        StorageDead(_874);
        StorageDead(_867);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        _879 = _857;
        StorageLive(_880);
        _880 = _866;
        _878 = core::num::<impl u128>::saturating_sub(move _879, move _880) -> [return: bb367, unwind: bb732];
    }

    bb365: {
        StorageLive(_871);
        _871 = ((_867 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_873);
        _873 = _871;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _873) -> [return: bb366, unwind: bb732];
    }

    bb366: {
        StorageDead(_873);
        StorageDead(_871);
        StorageDead(_867);
        goto -> bb652;
    }

    bb367: {
        StorageDead(_880);
        StorageDead(_879);
        _877 = <u128 as Cast>::cast::<u64>(move _878) -> [return: bb368, unwind: bb732];
    }

    bb368: {
        StorageDead(_878);
        _876 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _877) -> [return: bb369, unwind: bb732];
    }

    bb369: {
        StorageDead(_877);
        _881 = discriminant(_876);
        switchInt(move _881) -> [0: bb370, 1: bb371, otherwise: bb18];
    }

    bb370: {
        StorageLive(_885);
        _885 = ((_876 as Continue).0: u64);
        _875 = _885;
        StorageDead(_885);
        _818 = move _875;
        StorageDead(_875);
        StorageDead(_876);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        _889 = &mut (*_5);
        StorageLive(_890);
        _890 = _818;
        _888 = User::increment_margin_freed(move _889, move _890) -> [return: bb373, unwind: bb732];
    }

    bb371: {
        StorageLive(_882);
        _882 = ((_876 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_884);
        _884 = _882;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _884) -> [return: bb372, unwind: bb732];
    }

    bb372: {
        StorageDead(_884);
        StorageDead(_882);
        StorageDead(_875);
        StorageDead(_876);
        goto -> bb652;
    }

    bb373: {
        StorageDead(_890);
        StorageDead(_889);
        _887 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _888) -> [return: bb374, unwind: bb732];
    }

    bb374: {
        StorageDead(_888);
        _891 = discriminant(_887);
        switchInt(move _891) -> [0: bb375, 1: bb376, otherwise: bb18];
    }

    bb375: {
        StorageLive(_895);
        _895 = ((_887 as Continue).0: ());
        _886 = _895;
        StorageDead(_895);
        StorageDead(_887);
        StorageDead(_886);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        _900 = &_843;
        _899 = MarginCalculation::can_exit_liquidation(move _900) -> [return: bb378, unwind: bb732];
    }

    bb376: {
        StorageLive(_892);
        _892 = ((_887 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_894);
        _894 = _892;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _894) -> [return: bb377, unwind: bb732];
    }

    bb377: {
        StorageDead(_894);
        StorageDead(_892);
        StorageDead(_887);
        StorageDead(_886);
        goto -> bb652;
    }

    bb378: {
        StorageDead(_900);
        _898 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _899) -> [return: bb379, unwind: bb732];
    }

    bb379: {
        StorageDead(_899);
        _901 = discriminant(_898);
        switchInt(move _901) -> [0: bb380, 1: bb381, otherwise: bb18];
    }

    bb380: {
        StorageLive(_905);
        _905 = ((_898 as Continue).0: bool);
        _897 = _905;
        StorageDead(_905);
        switchInt(move _897) -> [0: bb384, otherwise: bb383];
    }

    bb381: {
        StorageLive(_902);
        _902 = ((_898 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_904);
        _904 = _902;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _904) -> [return: bb382, unwind: bb732];
    }

    bb382: {
        StorageDead(_904);
        StorageDead(_902);
        StorageDead(_898);
        goto -> bb651;
    }

    bb383: {
        StorageDead(_898);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        _910 = &(*_9);
        StorageLive(_911);
        StorageLive(_912);
        _912 = &_1;
        _911 = &(*_912);
        _909 = PerpMarketMap::<'_>::get_ref(move _910, move _911) -> [return: bb385, unwind: bb732];
    }

    bb384: {
        StorageDead(_898);
        _896 = const ();
        StorageDead(_897);
        StorageDead(_896);
        _840 = _843;
        StorageDead(_866);
        StorageDead(_857);
        StorageDead(_843);
        goto -> bb406;
    }

    bb385: {
        StorageDead(_911);
        StorageDead(_910);
        _908 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _909) -> [return: bb386, unwind: bb732];
    }

    bb386: {
        StorageDead(_909);
        _913 = discriminant(_908);
        switchInt(move _913) -> [0: bb387, 1: bb388, otherwise: bb18];
    }

    bb387: {
        StorageLive(_917);
        _917 = move ((_908 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _907 = move _917;
        StorageDead(_917);
        _1548 = discriminant(_908);
        StorageDead(_912);
        StorageDead(_908);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        _922 = &mut (*_11);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        _928 = &_907;
        _927 = <Ref<'_, PerpMarket> as Deref>::deref(move _928) -> [return: bb390, unwind: bb694];
    }

    bb388: {
        StorageLive(_914);
        _914 = ((_908 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_916);
        _916 = _914;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _916) -> [return: bb389, unwind: bb730];
    }

    bb389: {
        StorageDead(_916);
        StorageDead(_914);
        _1546 = discriminant(_908);
        StorageDead(_912);
        StorageDead(_908);
        goto -> bb650;
    }

    bb390: {
        _926 = &(*_927);
        StorageDead(_928);
        _925 = PerpMarket::oracle_id(move _926) -> [return: bb391, unwind: bb694];
    }

    bb391: {
        StorageDead(_926);
        _924 = &_925;
        _923 = &(*_924);
        _921 = OracleMap::<'_>::get_price_data(move _922, move _923) -> [return: bb392, unwind: bb694];
    }

    bb392: {
        StorageDead(_923);
        StorageDead(_922);
        _920 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _921) -> [return: bb393, unwind: bb694];
    }

    bb393: {
        StorageDead(_921);
        _929 = discriminant(_920);
        switchInt(move _929) -> [0: bb394, 1: bb395, otherwise: bb18];
    }

    bb394: {
        StorageLive(_933);
        _933 = ((_920 as Continue).0: &state::oracle::OraclePriceData);
        _919 = _933;
        StorageDead(_933);
        _918 = ((*_919).0: i64);
        StorageDead(_927);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_920);
        StorageDead(_919);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        StorageLive(_948);
        _948 = _12;
        StorageLive(_949);
        _949 = _808;
        StorageLive(_950);
        _950 = LiquidationType::LiquidateBorrowForPerpPnl;
        StorageLive(_951);
        _951 = (*_6);
        StorageLive(_952);
        _952 = (*_8);
        StorageLive(_953);
        _953 = (_753.3: u128);
        StorageLive(_954);
        _954 = (_753.1: i128);
        StorageLive(_955);
        StorageLive(_956);
        _956 = &(*_5);
        _955 = User::is_bankrupt(move _956) -> [return: bb397, unwind: bb694];
    }

    bb395: {
        StorageLive(_930);
        _930 = ((_920 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_932);
        _932 = _930;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _932) -> [return: bb396, unwind: bb694];
    }

    bb396: {
        StorageDead(_932);
        StorageDead(_930);
        StorageDead(_927);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_920);
        StorageDead(_919);
        goto -> bb649;
    }

    bb397: {
        StorageDead(_956);
        StorageLive(_957);
        _1513 = const false;
        _957 = move _819;
        StorageLive(_958);
        _958 = _818;
        StorageLive(_959);
        StorageLive(_960);
        _960 = _1;
        StorageLive(_961);
        _961 = _918;
        StorageLive(_962);
        _962 = _2;
        StorageLive(_963);
        _963 = _572;
        _959 = LiquidateBorrowForPerpPnlRecord { perp_market_index: move _960, market_oracle_price: move _961, pnl_transfer: const 0_u128, liability_market_index: move _962, liability_price: move _963, liability_transfer: const 0_u128 };
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_961);
        StorageDead(_960);
        StorageLive(_964);
        _964 = <LiquidationRecord as Default>::default() -> [return: bb398, unwind: bb693];
    }

    bb398: {
        _947 = LiquidationRecord { ts: move _948, liquidation_type: move _950, user: move _951, liquidator: move _952, margin_requirement: move _953, total_collateral: move _954, margin_freed: move _958, liquidation_id: move _949, bankrupt: move _955, canceled_order_ids: move _957, liquidate_perp: move (_964.10: state::events::LiquidatePerpRecord), liquidate_spot: move (_964.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move _959, liquidate_perp_pnl_for_deposit: move (_964.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_964.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_964.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_959);
        StorageDead(_958);
        StorageDead(_957);
        StorageDead(_955);
        StorageDead(_954);
        StorageDead(_953);
        StorageDead(_952);
        StorageDead(_951);
        StorageDead(_950);
        StorageDead(_949);
        StorageDead(_948);
        _946 = &_947;
        _945 = &(*_946);
        _944 = <LiquidationRecord as anchor_lang::Event>::data(move _945) -> [return: bb399, unwind: bb691];
    }

    bb399: {
        StorageDead(_945);
        _943 = &_944;
        _942 = &(*_943);
        _941 = <Vec<u8> as Deref>::deref(move _942) -> [return: bb400, unwind: bb690];
    }

    bb400: {
        _940 = &(*_941);
        StorageDead(_942);
        _939 = [move _940];
        StorageDead(_940);
        _938 = &_939;
        _937 = &(*_938);
        _936 = move _937 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_937);
        _935 = solana_program::log::sol_log_data(move _936) -> [return: bb401, unwind: bb690];
    }

    bb401: {
        StorageDead(_936);
        drop(_944) -> [return: bb402, unwind: bb691];
    }

    bb402: {
        drop(_947) -> [return: bb403, unwind: bb692];
    }

    bb403: {
        drop(_964) -> [return: bb404, unwind: bb694];
    }

    bb404: {
        StorageDead(_964);
        StorageDead(_947);
        StorageDead(_946);
        StorageDead(_944);
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_939);
        StorageDead(_938);
        StorageDead(_935);
        _934 = const ();
        StorageDead(_934);
        StorageLive(_965);
        StorageLive(_966);
        _966 = &mut (*_5);
        _965 = User::exit_liquidation(move _966) -> [return: bb405, unwind: bb694];
    }

    bb405: {
        StorageDead(_966);
        StorageDead(_965);
        StorageLive(_967);
        _967 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _967);
        StorageDead(_967);
        goto -> bb649;
    }

    bb406: {
        StorageDead(_841);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        StorageLive(_971);
        _971 = &_840;
        _970 = MarginCalculation::margin_shortage(move _971) -> [return: bb407, unwind: bb732];
    }

    bb407: {
        StorageDead(_971);
        _969 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _970) -> [return: bb408, unwind: bb732];
    }

    bb408: {
        StorageDead(_970);
        _972 = discriminant(_969);
        switchInt(move _972) -> [0: bb409, 1: bb410, otherwise: bb18];
    }

    bb409: {
        StorageLive(_976);
        _976 = ((_969 as Continue).0: u128);
        _968 = _976;
        StorageDead(_976);
        StorageDead(_969);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        _980 = _574;
        StorageLive(_981);
        _981 = _14;
        _979 = <u32 as SafeMath>::safe_add(move _980, move _981) -> [return: bb412, unwind: bb732];
    }

    bb410: {
        StorageLive(_973);
        _973 = ((_969 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_975);
        _975 = _973;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _975) -> [return: bb411, unwind: bb732];
    }

    bb411: {
        StorageDead(_975);
        StorageDead(_973);
        StorageDead(_969);
        goto -> bb648;
    }

    bb412: {
        StorageDead(_981);
        StorageDead(_980);
        _978 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _979) -> [return: bb413, unwind: bb732];
    }

    bb413: {
        StorageDead(_979);
        _982 = discriminant(_978);
        switchInt(move _982) -> [0: bb414, 1: bb415, otherwise: bb18];
    }

    bb414: {
        StorageLive(_986);
        _986 = ((_978 as Continue).0: u32);
        _977 = _986;
        StorageDead(_986);
        StorageDead(_978);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        _990 = _968;
        StorageLive(_991);
        _991 = _393;
        StorageLive(_992);
        _992 = _394;
        StorageLive(_993);
        _993 = _977;
        StorageLive(_994);
        _994 = _575;
        StorageLive(_995);
        _995 = _573;
        StorageLive(_996);
        _996 = _572;
        _989 = calculate_liability_transfer_to_cover_margin_shortage(move _990, move _991, move _992, move _993, move _994, move _995, move _996, const 0_u32) -> [return: bb417, unwind: bb732];
    }

    bb415: {
        StorageLive(_983);
        _983 = ((_978 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_985);
        _985 = _983;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _985) -> [return: bb416, unwind: bb732];
    }

    bb416: {
        StorageDead(_985);
        StorageDead(_983);
        StorageDead(_978);
        goto -> bb647;
    }

    bb417: {
        StorageDead(_996);
        StorageDead(_995);
        StorageDead(_994);
        StorageDead(_993);
        StorageDead(_992);
        StorageDead(_991);
        StorageDead(_990);
        _988 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _989) -> [return: bb418, unwind: bb732];
    }

    bb418: {
        StorageDead(_989);
        _997 = discriminant(_988);
        switchInt(move _997) -> [0: bb419, 1: bb420, otherwise: bb18];
    }

    bb419: {
        StorageLive(_1001);
        _1001 = ((_988 as Continue).0: u128);
        _987 = _1001;
        StorageDead(_1001);
        StorageDead(_988);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1005 = &(*_5);
        StorageLive(_1006);
        _1006 = _968;
        StorageLive(_1007);
        _1007 = _13;
        StorageLive(_1008);
        _1008 = _15;
        StorageLive(_1009);
        _1009 = _16;
        _1004 = calculate_max_pct_to_liquidate(move _1005, move _1006, move _1007, move _1008, move _1009) -> [return: bb422, unwind: bb732];
    }

    bb420: {
        StorageLive(_998);
        _998 = ((_988 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1000);
        _1000 = _998;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1000) -> [return: bb421, unwind: bb732];
    }

    bb421: {
        StorageDead(_1000);
        StorageDead(_998);
        StorageDead(_988);
        goto -> bb646;
    }

    bb422: {
        StorageDead(_1009);
        StorageDead(_1008);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1005);
        _1003 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1004) -> [return: bb423, unwind: bb732];
    }

    bb423: {
        StorageDead(_1004);
        _1010 = discriminant(_1003);
        switchInt(move _1010) -> [0: bb424, 1: bb425, otherwise: bb18];
    }

    bb424: {
        StorageLive(_1014);
        _1014 = ((_1003 as Continue).0: u128);
        _1002 = _1014;
        StorageDead(_1014);
        StorageDead(_1003);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        _1019 = _987;
        StorageLive(_1020);
        _1020 = _1002;
        _1018 = core::num::<impl u128>::saturating_mul(move _1019, move _1020) -> [return: bb427, unwind: bb732];
    }

    bb425: {
        StorageLive(_1011);
        _1011 = ((_1003 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1013);
        _1013 = _1011;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1013) -> [return: bb426, unwind: bb732];
    }

    bb426: {
        StorageDead(_1013);
        StorageDead(_1011);
        StorageDead(_1003);
        goto -> bb645;
    }

    bb427: {
        StorageDead(_1020);
        StorageDead(_1019);
        _1017 = <u128 as SafeMath>::safe_div(move _1018, const _) -> [return: bb428, unwind: bb732];
    }

    bb428: {
        StorageDead(_1018);
        _1016 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1017) -> [return: bb429, unwind: bb732];
    }

    bb429: {
        StorageDead(_1017);
        _1021 = discriminant(_1016);
        switchInt(move _1021) -> [0: bb430, 1: bb431, otherwise: bb18];
    }

    bb430: {
        StorageLive(_1025);
        _1025 = ((_1016 as Continue).0: u128);
        _1015 = _1025;
        StorageDead(_1025);
        StorageDead(_1016);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = _1015;
        _1027 = Eq(move _1028, const 0_u128);
        switchInt(move _1027) -> [0: bb434, otherwise: bb433];
    }

    bb431: {
        StorageLive(_1022);
        _1022 = ((_1016 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1024);
        _1024 = _1022;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1024) -> [return: bb432, unwind: bb732];
    }

    bb432: {
        StorageDead(_1024);
        StorageDead(_1022);
        StorageDead(_1016);
        goto -> bb644;
    }

    bb433: {
        StorageDead(_1028);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        _1032 = const "max_liability_allowed_to_be_transferred == 0";
        _1031 = &(*_1032);
        _1030 = solana_program::log::sol_log(move _1031) -> [return: bb435, unwind: bb732];
    }

    bb434: {
        StorageDead(_1028);
        _1026 = const ();
        StorageDead(_1027);
        StorageDead(_1026);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        _1037 = _390;
        StorageLive(_1038);
        _1038 = _394;
        StorageLive(_1039);
        _1039 = _392;
        StorageLive(_1040);
        _1040 = _391;
        StorageLive(_1041);
        _1041 = _575;
        StorageLive(_1042);
        _1042 = _573;
        StorageLive(_1043);
        _1043 = _572;
        _1036 = calculate_liability_transfer_implied_by_asset_amount(move _1037, move _1038, move _1039, move _1040, move _1041, move _1042, move _1043) -> [return: bb436, unwind: bb732];
    }

    bb435: {
        StorageDead(_1031);
        StorageDead(_1032);
        StorageDead(_1030);
        StorageLive(_1033);
        _1033 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1033);
        StorageDead(_1033);
        StorageDead(_1027);
        StorageDead(_1026);
        goto -> bb644;
    }

    bb436: {
        StorageDead(_1043);
        StorageDead(_1042);
        StorageDead(_1041);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1038);
        StorageDead(_1037);
        _1035 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1036) -> [return: bb437, unwind: bb732];
    }

    bb437: {
        StorageDead(_1036);
        _1044 = discriminant(_1035);
        switchInt(move _1044) -> [0: bb438, 1: bb439, otherwise: bb18];
    }

    bb438: {
        StorageLive(_1048);
        _1048 = ((_1035 as Continue).0: u128);
        _1034 = _1048;
        StorageDead(_1048);
        StorageDead(_1035);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        _1055 = _571;
        _1054 = <u128 as Cast>::cast::<i128>(move _1055) -> [return: bb441, unwind: bb732];
    }

    bb439: {
        StorageLive(_1045);
        _1045 = ((_1035 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1047);
        _1047 = _1045;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1047) -> [return: bb440, unwind: bb732];
    }

    bb440: {
        StorageDead(_1047);
        StorageDead(_1045);
        StorageDead(_1035);
        goto -> bb643;
    }

    bb441: {
        StorageDead(_1055);
        _1053 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1054) -> [return: bb442, unwind: bb732];
    }

    bb442: {
        StorageDead(_1054);
        _1056 = discriminant(_1053);
        switchInt(move _1056) -> [0: bb443, 1: bb444, otherwise: bb18];
    }

    bb443: {
        StorageLive(_1060);
        _1060 = ((_1053 as Continue).0: i128);
        _1052 = _1060;
        StorageDead(_1060);
        StorageLive(_1061);
        _1061 = _573;
        StorageLive(_1062);
        _1062 = _572;
        _1051 = get_token_value(move _1052, move _1061, move _1062) -> [return: bb446, unwind: bb732];
    }

    bb444: {
        StorageLive(_1057);
        _1057 = ((_1053 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1059);
        _1059 = _1057;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1059) -> [return: bb445, unwind: bb732];
    }

    bb445: {
        StorageDead(_1059);
        StorageDead(_1057);
        StorageDead(_1052);
        StorageDead(_1051);
        goto -> bb641;
    }

    bb446: {
        StorageDead(_1062);
        StorageDead(_1061);
        StorageDead(_1052);
        _1050 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1051) -> [return: bb447, unwind: bb732];
    }

    bb447: {
        StorageDead(_1051);
        _1063 = discriminant(_1050);
        switchInt(move _1063) -> [0: bb448, 1: bb449, otherwise: bb18];
    }

    bb448: {
        StorageLive(_1067);
        _1067 = ((_1050 as Continue).0: i128);
        _1049 = _1067;
        StorageDead(_1067);
        StorageDead(_1053);
        StorageDead(_1050);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        _1070 = _1049;
        StorageLive(_1071);
        _1072 = CheckedMul(const 10_i128, const _);
        assert(!move (_1072.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_i128, const _) -> [success: bb451, unwind: bb732];
    }

    bb449: {
        StorageLive(_1064);
        _1064 = ((_1050 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1066);
        _1066 = _1064;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1066) -> [return: bb450, unwind: bb732];
    }

    bb450: {
        StorageDead(_1066);
        StorageDead(_1064);
        goto -> bb641;
    }

    bb451: {
        _1071 = move (_1072.0: i128);
        _1069 = Gt(move _1070, move _1071);
        switchInt(move _1069) -> [0: bb453, otherwise: bb452];
    }

    bb452: {
        StorageDead(_1071);
        StorageDead(_1070);
        _1068 = const 0_u128;
        goto -> bb454;
    }

    bb453: {
        StorageDead(_1071);
        StorageDead(_1070);
        _1068 = _571;
        goto -> bb454;
    }

    bb454: {
        StorageDead(_1069);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        _1076 = _3;
        StorageLive(_1077);
        _1077 = _571;
        _1075 = <u128 as Ord>::min(move _1076, move _1077) -> [return: bb455, unwind: bb732];
    }

    bb455: {
        StorageDead(_1077);
        StorageDead(_1076);
        StorageLive(_1078);
        StorageLive(_1079);
        _1079 = _1015;
        StorageLive(_1080);
        _1080 = _1068;
        _1078 = <u128 as Ord>::max(move _1079, move _1080) -> [return: bb456, unwind: bb732];
    }

    bb456: {
        StorageDead(_1080);
        StorageDead(_1079);
        _1074 = <u128 as Ord>::min(move _1075, move _1078) -> [return: bb457, unwind: bb732];
    }

    bb457: {
        StorageDead(_1078);
        StorageDead(_1075);
        StorageLive(_1081);
        _1081 = _1034;
        _1073 = <u128 as Ord>::min(move _1074, move _1081) -> [return: bb458, unwind: bb732];
    }

    bb458: {
        StorageDead(_1081);
        StorageDead(_1074);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        _1085 = _390;
        StorageLive(_1086);
        _1086 = _394;
        StorageLive(_1087);
        _1087 = _392;
        StorageLive(_1088);
        _1088 = _391;
        StorageLive(_1089);
        _1089 = _1073;
        StorageLive(_1090);
        _1090 = _575;
        StorageLive(_1091);
        _1091 = _573;
        StorageLive(_1092);
        _1092 = _572;
        _1084 = calculate_asset_transfer_for_liability_transfer(move _1085, move _1086, move _1087, move _1088, move _1089, move _1090, move _1091, move _1092) -> [return: bb459, unwind: bb732];
    }

    bb459: {
        StorageDead(_1092);
        StorageDead(_1091);
        StorageDead(_1090);
        StorageDead(_1089);
        StorageDead(_1088);
        StorageDead(_1087);
        StorageDead(_1086);
        StorageDead(_1085);
        _1083 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1084) -> [return: bb460, unwind: bb732];
    }

    bb460: {
        StorageDead(_1084);
        _1093 = discriminant(_1083);
        switchInt(move _1093) -> [0: bb461, 1: bb462, otherwise: bb18];
    }

    bb461: {
        StorageLive(_1097);
        _1097 = ((_1083 as Continue).0: u128);
        _1082 = _1097;
        StorageDead(_1097);
        StorageDead(_1083);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        _1100 = _1073;
        _1099 = Eq(move _1100, const 0_u128);
        switchInt(move _1099) -> [0: bb465, otherwise: bb464];
    }

    bb462: {
        StorageLive(_1094);
        _1094 = ((_1083 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1096);
        _1096 = _1094;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1096) -> [return: bb463, unwind: bb732];
    }

    bb463: {
        StorageDead(_1096);
        StorageDead(_1094);
        StorageDead(_1083);
        goto -> bb640;
    }

    bb464: {
        StorageDead(_1100);
        goto -> bb466;
    }

    bb465: {
        StorageDead(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        _1102 = _1082;
        _1101 = Eq(move _1102, const 0_u128);
        switchInt(move _1101) -> [0: bb467, otherwise: bb466];
    }

    bb466: {
        StorageDead(_1102);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        StorageLive(_1114);
        _1491 = const _;
        _1114 = &(*_1491);
        _1113 = &(*_1114);
        _1112 = move _1113 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1113);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        StorageLive(_1120);
        StorageLive(_1121);
        StorageLive(_1122);
        _1122 = &_1;
        _1121 = &(*_1122);
        _1120 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1121) -> [return: bb468, unwind: bb732];
    }

    bb467: {
        StorageDead(_1102);
        _1098 = const ();
        StorageDead(_1101);
        StorageDead(_1099);
        StorageDead(_1098);
        StorageLive(_1177);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        _1180 = _1082;
        StorageLive(_1181);
        _1181 = _1073;
        StorageLive(_1182);
        _1182 = _392;
        StorageLive(_1183);
        _1183 = _573;
        StorageLive(_1184);
        _1184 = _4;
        _1179 = validate_transfer_satisfies_limit_price(move _1180, move _1181, move _1182, move _1183, move _1184) -> [return: bb491, unwind: bb732];
    }

    bb468: {
        StorageDead(_1121);
        StorageLive(_1123);
        StorageLive(_1124);
        StorageLive(_1125);
        _1125 = &_2;
        _1124 = &(*_1125);
        _1123 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _1124) -> [return: bb469, unwind: bb732];
    }

    bb469: {
        StorageDead(_1124);
        _1119 = [move _1120, move _1123];
        StorageDead(_1123);
        StorageDead(_1120);
        _1118 = &_1119;
        _1117 = &(*_1118);
        _1116 = move _1117 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1117);
        _1111 = Arguments::<'_>::new_v1(move _1112, move _1116) -> [return: bb470, unwind: bb732];
    }

    bb470: {
        StorageDead(_1116);
        StorageDead(_1112);
        _1110 = format(move _1111) -> [return: bb471, unwind: bb732];
    }

    bb471: {
        StorageDead(_1111);
        StorageDead(_1125);
        StorageDead(_1122);
        StorageDead(_1119);
        StorageDead(_1118);
        StorageDead(_1114);
        _1109 = move _1110;
        StorageDead(_1110);
        _1108 = &_1109;
        _1107 = &(*_1108);
        _1106 = <String as Deref>::deref(move _1107) -> [return: bb472, unwind: bb689];
    }

    bb472: {
        _1105 = &(*_1106);
        StorageDead(_1107);
        _1104 = solana_program::log::sol_log(move _1105) -> [return: bb473, unwind: bb689];
    }

    bb473: {
        StorageDead(_1105);
        drop(_1109) -> [return: bb474, unwind: bb732];
    }

    bb474: {
        StorageDead(_1109);
        StorageDead(_1108);
        StorageDead(_1106);
        StorageDead(_1104);
        StorageLive(_1126);
        StorageLive(_1127);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        StorageLive(_1131);
        StorageLive(_1132);
        StorageLive(_1133);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        _1490 = const _;
        _1136 = &(*_1490);
        _1135 = &(*_1136);
        _1134 = move _1135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1135);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        StorageLive(_1141);
        StorageLive(_1142);
        StorageLive(_1143);
        StorageLive(_1144);
        _1144 = &_3;
        _1143 = &(*_1144);
        _1142 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1143) -> [return: bb475, unwind: bb732];
    }

    bb475: {
        StorageDead(_1143);
        StorageLive(_1145);
        StorageLive(_1146);
        StorageLive(_1147);
        _1147 = &_571;
        _1146 = &(*_1147);
        _1145 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1146) -> [return: bb476, unwind: bb732];
    }

    bb476: {
        StorageDead(_1146);
        StorageLive(_1148);
        StorageLive(_1149);
        StorageLive(_1150);
        _1150 = &_987;
        _1149 = &(*_1150);
        _1148 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1149) -> [return: bb477, unwind: bb732];
    }

    bb477: {
        StorageDead(_1149);
        _1141 = [move _1142, move _1145, move _1148];
        StorageDead(_1148);
        StorageDead(_1145);
        StorageDead(_1142);
        _1140 = &_1141;
        _1139 = &(*_1140);
        _1138 = move _1139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1139);
        _1133 = Arguments::<'_>::new_v1(move _1134, move _1138) -> [return: bb478, unwind: bb732];
    }

    bb478: {
        StorageDead(_1138);
        StorageDead(_1134);
        _1132 = format(move _1133) -> [return: bb479, unwind: bb732];
    }

    bb479: {
        StorageDead(_1133);
        StorageDead(_1150);
        StorageDead(_1147);
        StorageDead(_1144);
        StorageDead(_1141);
        StorageDead(_1140);
        StorageDead(_1136);
        _1131 = move _1132;
        StorageDead(_1132);
        _1130 = &_1131;
        _1129 = &(*_1130);
        _1128 = <String as Deref>::deref(move _1129) -> [return: bb480, unwind: bb688];
    }

    bb480: {
        _1127 = &(*_1128);
        StorageDead(_1129);
        _1126 = solana_program::log::sol_log(move _1127) -> [return: bb481, unwind: bb688];
    }

    bb481: {
        StorageDead(_1127);
        drop(_1131) -> [return: bb482, unwind: bb732];
    }

    bb482: {
        StorageDead(_1131);
        StorageDead(_1130);
        StorageDead(_1128);
        StorageDead(_1126);
        StorageLive(_1151);
        StorageLive(_1152);
        StorageLive(_1153);
        StorageLive(_1154);
        StorageLive(_1155);
        StorageLive(_1156);
        StorageLive(_1157);
        StorageLive(_1158);
        StorageLive(_1159);
        StorageLive(_1160);
        StorageLive(_1161);
        _1489 = const _;
        _1161 = &(*_1489);
        _1160 = &(*_1161);
        _1159 = move _1160 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1160);
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        StorageLive(_1169);
        _1169 = &_1034;
        _1168 = &(*_1169);
        _1167 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1168) -> [return: bb483, unwind: bb732];
    }

    bb483: {
        StorageDead(_1168);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        _1172 = &_1073;
        _1171 = &(*_1172);
        _1170 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1171) -> [return: bb484, unwind: bb732];
    }

    bb484: {
        StorageDead(_1171);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        _1175 = &_1082;
        _1174 = &(*_1175);
        _1173 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1174) -> [return: bb485, unwind: bb732];
    }

    bb485: {
        StorageDead(_1174);
        _1166 = [move _1167, move _1170, move _1173];
        StorageDead(_1173);
        StorageDead(_1170);
        StorageDead(_1167);
        _1165 = &_1166;
        _1164 = &(*_1165);
        _1163 = move _1164 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1164);
        _1158 = Arguments::<'_>::new_v1(move _1159, move _1163) -> [return: bb486, unwind: bb732];
    }

    bb486: {
        StorageDead(_1163);
        StorageDead(_1159);
        _1157 = format(move _1158) -> [return: bb487, unwind: bb732];
    }

    bb487: {
        StorageDead(_1158);
        StorageDead(_1175);
        StorageDead(_1172);
        StorageDead(_1169);
        StorageDead(_1166);
        StorageDead(_1165);
        StorageDead(_1161);
        _1156 = move _1157;
        StorageDead(_1157);
        _1155 = &_1156;
        _1154 = &(*_1155);
        _1153 = <String as Deref>::deref(move _1154) -> [return: bb488, unwind: bb687];
    }

    bb488: {
        _1152 = &(*_1153);
        StorageDead(_1154);
        _1151 = solana_program::log::sol_log(move _1152) -> [return: bb489, unwind: bb687];
    }

    bb489: {
        StorageDead(_1152);
        drop(_1156) -> [return: bb490, unwind: bb732];
    }

    bb490: {
        StorageDead(_1156);
        StorageDead(_1155);
        StorageDead(_1153);
        StorageDead(_1151);
        StorageLive(_1176);
        _1176 = error::ErrorCode::InvalidLiquidation;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _1176);
        StorageDead(_1176);
        StorageDead(_1101);
        StorageDead(_1099);
        StorageDead(_1098);
        goto -> bb640;
    }

    bb491: {
        StorageDead(_1184);
        StorageDead(_1183);
        StorageDead(_1182);
        StorageDead(_1181);
        StorageDead(_1180);
        _1178 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1179) -> [return: bb492, unwind: bb732];
    }

    bb492: {
        StorageDead(_1179);
        _1185 = discriminant(_1178);
        switchInt(move _1185) -> [0: bb493, 1: bb494, otherwise: bb18];
    }

    bb493: {
        StorageLive(_1189);
        _1189 = ((_1178 as Continue).0: ());
        _1177 = _1189;
        StorageDead(_1189);
        StorageDead(_1178);
        StorageDead(_1177);
        StorageLive(_1190);
        StorageLive(_1191);
        StorageLive(_1192);
        StorageLive(_1193);
        StorageLive(_1194);
        _1194 = &(*_10);
        StorageLive(_1195);
        StorageLive(_1196);
        _1196 = &_2;
        _1195 = &(*_1196);
        _1193 = SpotMarketMap::<'_>::get_ref_mut(move _1194, move _1195) -> [return: bb496, unwind: bb732];
    }

    bb494: {
        StorageLive(_1186);
        _1186 = ((_1178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1188);
        _1188 = _1186;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1188) -> [return: bb495, unwind: bb732];
    }

    bb495: {
        StorageDead(_1188);
        StorageDead(_1186);
        StorageDead(_1178);
        StorageDead(_1177);
        goto -> bb640;
    }

    bb496: {
        StorageDead(_1195);
        StorageDead(_1194);
        _1192 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1193) -> [return: bb497, unwind: bb732];
    }

    bb497: {
        StorageDead(_1193);
        _1197 = discriminant(_1192);
        switchInt(move _1197) -> [0: bb498, 1: bb499, otherwise: bb18];
    }

    bb498: {
        StorageLive(_1201);
        _1201 = move ((_1192 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1191 = move _1201;
        StorageDead(_1201);
        _1552 = discriminant(_1192);
        StorageDead(_1196);
        StorageDead(_1192);
        StorageLive(_1202);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        _1205 = _1073;
        StorageLive(_1206);
        StorageLive(_1207);
        _1494 = const _;
        _1207 = &(*_1494);
        _1206 = &(*_1207);
        StorageLive(_1209);
        StorageLive(_1210);
        StorageLive(_1211);
        StorageLive(_1212);
        _1212 = &mut _1191;
        _1211 = &mut (*_1212);
        _1210 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1211) -> [return: bb501, unwind: bb686];
    }

    bb499: {
        StorageLive(_1198);
        _1198 = ((_1192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1200);
        _1200 = _1198;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1200) -> [return: bb500, unwind: bb729];
    }

    bb500: {
        StorageDead(_1200);
        StorageDead(_1198);
        _1550 = discriminant(_1192);
        StorageDead(_1196);
        StorageDead(_1192);
        goto -> bb639;
    }

    bb501: {
        _1209 = &mut (*_1210);
        StorageDead(_1211);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        StorageLive(_1216);
        StorageLive(_1217);
        _1217 = &mut (*_5);
        StorageLive(_1218);
        _1218 = _2;
        _1216 = User::force_get_spot_position_mut(move _1217, move _1218) -> [return: bb502, unwind: bb686];
    }

    bb502: {
        StorageDead(_1218);
        StorageDead(_1217);
        _1215 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1216) -> [return: bb503, unwind: bb686];
    }

    bb503: {
        StorageDead(_1216);
        _1219 = discriminant(_1215);
        switchInt(move _1219) -> [0: bb504, 1: bb505, otherwise: bb18];
    }

    bb504: {
        StorageLive(_1223);
        _1223 = move ((_1215 as Continue).0: &mut state::user::SpotPosition);
        _1214 = &mut (*_1223);
        StorageDead(_1223);
        _1213 = &mut (*_1214);
        StorageLive(_1224);
        StorageLive(_1225);
        _1225 = _1073;
        _1224 = Option::<u128>::Some(move _1225);
        StorageDead(_1225);
        _1204 = update_spot_balances_and_cumulative_deposits(move _1205, move _1206, move _1209, move _1213, const false, move _1224) -> [return: bb507, unwind: bb686];
    }

    bb505: {
        StorageLive(_1220);
        _1220 = ((_1215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1222);
        _1222 = _1220;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1222) -> [return: bb506, unwind: bb686];
    }

    bb506: {
        StorageDead(_1222);
        StorageDead(_1220);
        StorageDead(_1213);
        StorageDead(_1209);
        StorageDead(_1206);
        StorageDead(_1205);
        StorageDead(_1204);
        goto -> bb637;
    }

    bb507: {
        StorageDead(_1224);
        StorageDead(_1213);
        StorageDead(_1209);
        StorageDead(_1206);
        StorageDead(_1205);
        _1203 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1204) -> [return: bb508, unwind: bb686];
    }

    bb508: {
        StorageDead(_1204);
        _1226 = discriminant(_1203);
        switchInt(move _1226) -> [0: bb509, 1: bb510, otherwise: bb18];
    }

    bb509: {
        StorageLive(_1230);
        _1230 = ((_1203 as Continue).0: ());
        _1202 = _1230;
        StorageDead(_1230);
        StorageDead(_1215);
        StorageDead(_1214);
        StorageDead(_1212);
        StorageDead(_1210);
        StorageDead(_1207);
        StorageDead(_1203);
        StorageDead(_1202);
        StorageLive(_1231);
        StorageLive(_1232);
        StorageLive(_1233);
        StorageLive(_1234);
        _1234 = _1073;
        StorageLive(_1235);
        StorageLive(_1236);
        _1493 = const _;
        _1236 = &(*_1493);
        _1235 = &(*_1236);
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        StorageLive(_1241);
        _1241 = &mut _1191;
        _1240 = &mut (*_1241);
        _1239 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1240) -> [return: bb512, unwind: bb686];
    }

    bb510: {
        StorageLive(_1227);
        _1227 = ((_1203 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1229);
        _1229 = _1227;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1229) -> [return: bb511, unwind: bb686];
    }

    bb511: {
        StorageDead(_1229);
        StorageDead(_1227);
        goto -> bb637;
    }

    bb512: {
        _1238 = &mut (*_1239);
        StorageDead(_1240);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        _1246 = &mut (*_7);
        StorageLive(_1247);
        _1247 = _2;
        _1245 = User::force_get_spot_position_mut(move _1246, move _1247) -> [return: bb513, unwind: bb686];
    }

    bb513: {
        StorageDead(_1247);
        StorageDead(_1246);
        _1244 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _1245) -> [return: bb514, unwind: bb686];
    }

    bb514: {
        StorageDead(_1245);
        _1248 = discriminant(_1244);
        switchInt(move _1248) -> [0: bb515, 1: bb516, otherwise: bb18];
    }

    bb515: {
        StorageLive(_1252);
        _1252 = move ((_1244 as Continue).0: &mut state::user::SpotPosition);
        _1243 = &mut (*_1252);
        StorageDead(_1252);
        _1242 = &mut (*_1243);
        StorageLive(_1253);
        StorageLive(_1254);
        _1254 = _1073;
        _1253 = Option::<u128>::Some(move _1254);
        StorageDead(_1254);
        _1233 = update_spot_balances_and_cumulative_deposits(move _1234, move _1235, move _1238, move _1242, const false, move _1253) -> [return: bb518, unwind: bb686];
    }

    bb516: {
        StorageLive(_1249);
        _1249 = ((_1244 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1251);
        _1251 = _1249;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1251) -> [return: bb517, unwind: bb686];
    }

    bb517: {
        StorageDead(_1251);
        StorageDead(_1249);
        StorageDead(_1242);
        StorageDead(_1238);
        StorageDead(_1235);
        StorageDead(_1234);
        StorageDead(_1233);
        goto -> bb636;
    }

    bb518: {
        StorageDead(_1253);
        StorageDead(_1242);
        StorageDead(_1238);
        StorageDead(_1235);
        StorageDead(_1234);
        _1232 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1233) -> [return: bb519, unwind: bb686];
    }

    bb519: {
        StorageDead(_1233);
        _1255 = discriminant(_1232);
        switchInt(move _1255) -> [0: bb520, 1: bb521, otherwise: bb18];
    }

    bb520: {
        StorageLive(_1259);
        _1259 = ((_1232 as Continue).0: ());
        _1231 = _1259;
        StorageDead(_1259);
        StorageDead(_1244);
        StorageDead(_1243);
        StorageDead(_1241);
        StorageDead(_1239);
        StorageDead(_1236);
        StorageDead(_1232);
        StorageDead(_1231);
        _1190 = const ();
        drop(_1191) -> [return: bb523, unwind: bb732];
    }

    bb521: {
        StorageLive(_1256);
        _1256 = ((_1232 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1258);
        _1258 = _1256;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1258) -> [return: bb522, unwind: bb686];
    }

    bb522: {
        StorageDead(_1258);
        StorageDead(_1256);
        goto -> bb636;
    }

    bb523: {
        StorageDead(_1191);
        StorageDead(_1190);
        StorageLive(_1260);
        StorageLive(_1261);
        StorageLive(_1262);
        StorageLive(_1263);
        StorageLive(_1264);
        _1264 = &(*_9);
        StorageLive(_1265);
        StorageLive(_1266);
        _1266 = &_1;
        _1265 = &(*_1266);
        _1263 = PerpMarketMap::<'_>::get_ref_mut(move _1264, move _1265) -> [return: bb524, unwind: bb732];
    }

    bb524: {
        StorageDead(_1265);
        StorageDead(_1264);
        _1262 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1263) -> [return: bb525, unwind: bb732];
    }

    bb525: {
        StorageDead(_1263);
        _1267 = discriminant(_1262);
        switchInt(move _1267) -> [0: bb526, 1: bb527, otherwise: bb18];
    }

    bb526: {
        StorageLive(_1271);
        _1271 = move ((_1262 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1261 = move _1271;
        StorageDead(_1271);
        _1556 = discriminant(_1262);
        StorageDead(_1266);
        StorageDead(_1262);
        StorageLive(_1272);
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        _1275 = &mut (*_7);
        StorageLive(_1276);
        _1276 = _1;
        _1274 = User::force_get_perp_position_mut(move _1275, move _1276) -> [return: bb529, unwind: bb685];
    }

    bb527: {
        StorageLive(_1268);
        _1268 = ((_1262 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1270);
        _1270 = _1268;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1270) -> [return: bb528, unwind: bb728];
    }

    bb528: {
        StorageDead(_1270);
        StorageDead(_1268);
        _1554 = discriminant(_1262);
        StorageDead(_1266);
        StorageDead(_1262);
        goto -> bb635;
    }

    bb529: {
        StorageDead(_1276);
        StorageDead(_1275);
        _1273 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1274) -> [return: bb530, unwind: bb685];
    }

    bb530: {
        StorageDead(_1274);
        _1277 = discriminant(_1273);
        switchInt(move _1277) -> [0: bb531, 1: bb532, otherwise: bb18];
    }

    bb531: {
        StorageLive(_1281);
        _1281 = move ((_1273 as Continue).0: &mut state::user::PerpPosition);
        _1272 = move _1281;
        StorageDead(_1281);
        StorageDead(_1273);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        StorageLive(_1285);
        _1285 = &mut (*_1272);
        StorageLive(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        StorageLive(_1289);
        _1289 = &mut _1261;
        _1288 = &mut (*_1289);
        _1287 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1288) -> [return: bb534, unwind: bb685];
    }

    bb532: {
        StorageLive(_1278);
        _1278 = ((_1273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1280);
        _1280 = _1278;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1280) -> [return: bb533, unwind: bb685];
    }

    bb533: {
        StorageDead(_1280);
        StorageDead(_1278);
        StorageDead(_1273);
        goto -> bb634;
    }

    bb534: {
        _1286 = &mut (*_1287);
        StorageDead(_1288);
        StorageLive(_1290);
        StorageLive(_1291);
        StorageLive(_1292);
        StorageLive(_1293);
        _1293 = _1082;
        _1292 = <u128 as Cast>::cast::<i64>(move _1293) -> [return: bb535, unwind: bb685];
    }

    bb535: {
        StorageDead(_1293);
        _1291 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1292) -> [return: bb536, unwind: bb685];
    }

    bb536: {
        StorageDead(_1292);
        _1294 = discriminant(_1291);
        switchInt(move _1294) -> [0: bb537, 1: bb538, otherwise: bb18];
    }

    bb537: {
        StorageLive(_1298);
        _1298 = ((_1291 as Continue).0: i64);
        _1290 = _1298;
        StorageDead(_1298);
        _1284 = update_quote_asset_amount(move _1285, move _1286, move _1290) -> [return: bb540, unwind: bb685];
    }

    bb538: {
        StorageLive(_1295);
        _1295 = ((_1291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1297);
        _1297 = _1295;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1297) -> [return: bb539, unwind: bb685];
    }

    bb539: {
        StorageDead(_1297);
        StorageDead(_1295);
        StorageDead(_1290);
        StorageDead(_1286);
        StorageDead(_1285);
        StorageDead(_1284);
        goto -> bb633;
    }

    bb540: {
        StorageDead(_1290);
        StorageDead(_1286);
        StorageDead(_1285);
        _1283 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1284) -> [return: bb541, unwind: bb685];
    }

    bb541: {
        StorageDead(_1284);
        _1299 = discriminant(_1283);
        switchInt(move _1299) -> [0: bb542, 1: bb543, otherwise: bb18];
    }

    bb542: {
        StorageLive(_1303);
        _1303 = ((_1283 as Continue).0: ());
        _1282 = _1303;
        StorageDead(_1303);
        StorageDead(_1291);
        StorageDead(_1289);
        StorageDead(_1287);
        StorageDead(_1283);
        StorageDead(_1282);
        StorageLive(_1304);
        StorageLive(_1305);
        StorageLive(_1306);
        StorageLive(_1307);
        _1307 = &mut (*_5);
        StorageLive(_1308);
        _1308 = _1;
        _1306 = User::get_perp_position_mut(move _1307, move _1308) -> [return: bb545, unwind: bb685];
    }

    bb543: {
        StorageLive(_1300);
        _1300 = ((_1283 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1302);
        _1302 = _1300;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1302) -> [return: bb544, unwind: bb685];
    }

    bb544: {
        StorageDead(_1302);
        StorageDead(_1300);
        goto -> bb633;
    }

    bb545: {
        StorageDead(_1308);
        StorageDead(_1307);
        _1305 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1306) -> [return: bb546, unwind: bb685];
    }

    bb546: {
        StorageDead(_1306);
        _1309 = discriminant(_1305);
        switchInt(move _1309) -> [0: bb547, 1: bb548, otherwise: bb18];
    }

    bb547: {
        StorageLive(_1313);
        _1313 = move ((_1305 as Continue).0: &mut state::user::PerpPosition);
        _1304 = move _1313;
        StorageDead(_1313);
        StorageDead(_1305);
        StorageLive(_1314);
        StorageLive(_1315);
        StorageLive(_1316);
        StorageLive(_1317);
        _1317 = &mut (*_1304);
        StorageLive(_1318);
        StorageLive(_1319);
        StorageLive(_1320);
        StorageLive(_1321);
        _1321 = &mut _1261;
        _1320 = &mut (*_1321);
        _1319 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1320) -> [return: bb550, unwind: bb685];
    }

    bb548: {
        StorageLive(_1310);
        _1310 = ((_1305 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1312);
        _1312 = _1310;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1312) -> [return: bb549, unwind: bb685];
    }

    bb549: {
        StorageDead(_1312);
        StorageDead(_1310);
        StorageDead(_1305);
        goto -> bb632;
    }

    bb550: {
        _1318 = &mut (*_1319);
        StorageDead(_1320);
        StorageLive(_1322);
        StorageLive(_1323);
        StorageLive(_1324);
        StorageLive(_1325);
        StorageLive(_1326);
        _1326 = _1082;
        _1325 = <u128 as Cast>::cast::<i64>(move _1326) -> [return: bb551, unwind: bb685];
    }

    bb551: {
        StorageDead(_1326);
        _1324 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1325) -> [return: bb552, unwind: bb685];
    }

    bb552: {
        StorageDead(_1325);
        _1327 = discriminant(_1324);
        switchInt(move _1327) -> [0: bb553, 1: bb554, otherwise: bb18];
    }

    bb553: {
        StorageLive(_1331);
        _1331 = ((_1324 as Continue).0: i64);
        _1323 = _1331;
        StorageDead(_1331);
        _1332 = Eq(_1323, const i64::MIN);
        assert(!move _1332, "attempt to negate `{}`, which would overflow", _1323) -> [success: bb556, unwind: bb685];
    }

    bb554: {
        StorageLive(_1328);
        _1328 = ((_1324 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1330);
        _1330 = _1328;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1330) -> [return: bb555, unwind: bb685];
    }

    bb555: {
        StorageDead(_1330);
        StorageDead(_1328);
        StorageDead(_1323);
        StorageDead(_1322);
        StorageDead(_1318);
        StorageDead(_1317);
        StorageDead(_1316);
        goto -> bb631;
    }

    bb556: {
        _1322 = Neg(move _1323);
        StorageDead(_1323);
        _1316 = update_quote_asset_amount(move _1317, move _1318, move _1322) -> [return: bb557, unwind: bb685];
    }

    bb557: {
        StorageDead(_1322);
        StorageDead(_1318);
        StorageDead(_1317);
        _1315 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1316) -> [return: bb558, unwind: bb685];
    }

    bb558: {
        StorageDead(_1316);
        _1333 = discriminant(_1315);
        switchInt(move _1333) -> [0: bb559, 1: bb560, otherwise: bb18];
    }

    bb559: {
        StorageLive(_1337);
        _1337 = ((_1315 as Continue).0: ());
        _1314 = _1337;
        StorageDead(_1337);
        StorageDead(_1324);
        StorageDead(_1321);
        StorageDead(_1319);
        StorageDead(_1315);
        StorageDead(_1314);
        _1260 = const ();
        StorageDead(_1304);
        StorageDead(_1272);
        drop(_1261) -> [return: bb562, unwind: bb732];
    }

    bb560: {
        StorageLive(_1334);
        _1334 = ((_1315 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1336);
        _1336 = _1334;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1336) -> [return: bb561, unwind: bb685];
    }

    bb561: {
        StorageDead(_1336);
        StorageDead(_1334);
        goto -> bb631;
    }

    bb562: {
        StorageDead(_1261);
        StorageDead(_1260);
        StorageLive(_1339);
        StorageLive(_1340);
        StorageLive(_1341);
        StorageLive(_1342);
        _1342 = &(*_5);
        StorageLive(_1343);
        _1343 = &(*_9);
        StorageLive(_1344);
        _1344 = &(*_10);
        StorageLive(_1345);
        _1345 = &mut (*_11);
        StorageLive(_1346);
        _1346 = _14;
        StorageLive(_1347);
        _1347 = _968;
        _1341 = calculate_margin_freed(move _1342, move _1343, move _1344, move _1345, move _1346, move _1347) -> [return: bb563, unwind: bb732];
    }

    bb563: {
        StorageDead(_1347);
        StorageDead(_1346);
        StorageDead(_1345);
        StorageDead(_1344);
        StorageDead(_1343);
        StorageDead(_1342);
        _1340 = <std::result::Result<(u64, MarginCalculation), error::ErrorCode> as Try>::branch(move _1341) -> [return: bb564, unwind: bb732];
    }

    bb564: {
        StorageDead(_1341);
        _1348 = discriminant(_1340);
        switchInt(move _1348) -> [0: bb565, 1: bb566, otherwise: bb18];
    }

    bb565: {
        StorageLive(_1352);
        _1352 = ((_1340 as Continue).0: (u64, state::margin_calculation::MarginCalculation));
        _1339 = _1352;
        StorageDead(_1352);
        StorageLive(_1338);
        _1338 = (_1339.0: u64);
        StorageDead(_1340);
        StorageDead(_1339);
        StorageLive(_1353);
        StorageLive(_1354);
        StorageLive(_1355);
        StorageLive(_1356);
        _1356 = _818;
        StorageLive(_1357);
        _1357 = _1338;
        _1355 = <u64 as SafeMath>::safe_add(move _1356, move _1357) -> [return: bb568, unwind: bb732];
    }

    bb566: {
        StorageLive(_1349);
        _1349 = ((_1340 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1351);
        _1351 = _1349;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1351) -> [return: bb567, unwind: bb732];
    }

    bb567: {
        StorageDead(_1351);
        StorageDead(_1349);
        StorageDead(_1340);
        StorageDead(_1339);
        goto -> bb640;
    }

    bb568: {
        StorageDead(_1357);
        StorageDead(_1356);
        _1354 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1355) -> [return: bb569, unwind: bb732];
    }

    bb569: {
        StorageDead(_1355);
        _1358 = discriminant(_1354);
        switchInt(move _1358) -> [0: bb570, 1: bb571, otherwise: bb18];
    }

    bb570: {
        StorageLive(_1362);
        _1362 = ((_1354 as Continue).0: u64);
        _1353 = _1362;
        StorageDead(_1362);
        _818 = move _1353;
        StorageDead(_1353);
        StorageDead(_1354);
        StorageLive(_1363);
        StorageLive(_1364);
        StorageLive(_1365);
        StorageLive(_1366);
        _1366 = &mut (*_5);
        StorageLive(_1367);
        _1367 = _1338;
        _1365 = User::increment_margin_freed(move _1366, move _1367) -> [return: bb573, unwind: bb732];
    }

    bb571: {
        StorageLive(_1359);
        _1359 = ((_1354 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1361);
        _1361 = _1359;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1361) -> [return: bb572, unwind: bb732];
    }

    bb572: {
        StorageDead(_1361);
        StorageDead(_1359);
        StorageDead(_1353);
        StorageDead(_1354);
        goto -> bb630;
    }

    bb573: {
        StorageDead(_1367);
        StorageDead(_1366);
        _1364 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1365) -> [return: bb574, unwind: bb732];
    }

    bb574: {
        StorageDead(_1365);
        _1368 = discriminant(_1364);
        switchInt(move _1368) -> [0: bb575, 1: bb576, otherwise: bb18];
    }

    bb575: {
        StorageLive(_1372);
        _1372 = ((_1364 as Continue).0: ());
        _1363 = _1372;
        StorageDead(_1372);
        StorageDead(_1364);
        StorageDead(_1363);
        StorageLive(_1373);
        StorageLive(_1374);
        StorageLive(_1375);
        _1375 = _1073;
        StorageLive(_1376);
        _1376 = _987;
        _1374 = Ge(move _1375, move _1376);
        switchInt(move _1374) -> [0: bb579, otherwise: bb578];
    }

    bb576: {
        StorageLive(_1369);
        _1369 = ((_1364 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1371);
        _1371 = _1369;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1371) -> [return: bb577, unwind: bb732];
    }

    bb577: {
        StorageDead(_1371);
        StorageDead(_1369);
        StorageDead(_1364);
        StorageDead(_1363);
        goto -> bb630;
    }

    bb578: {
        StorageDead(_1376);
        StorageDead(_1375);
        StorageLive(_1377);
        StorageLive(_1378);
        _1378 = &mut (*_5);
        _1377 = User::exit_liquidation(move _1378) -> [return: bb580, unwind: bb732];
    }

    bb579: {
        StorageDead(_1376);
        StorageDead(_1375);
        StorageLive(_1379);
        StorageLive(_1380);
        _1380 = &(*_5);
        _1379 = is_user_bankrupt(move _1380) -> [return: bb581, unwind: bb732];
    }

    bb580: {
        StorageDead(_1378);
        StorageDead(_1377);
        _1373 = const ();
        goto -> bb586;
    }

    bb581: {
        switchInt(move _1379) -> [0: bb584, otherwise: bb582];
    }

    bb582: {
        StorageDead(_1380);
        StorageLive(_1381);
        StorageLive(_1382);
        _1382 = &mut (*_5);
        _1381 = User::enter_bankruptcy(move _1382) -> [return: bb583, unwind: bb732];
    }

    bb583: {
        StorageDead(_1382);
        StorageDead(_1381);
        _1373 = const ();
        goto -> bb585;
    }

    bb584: {
        StorageDead(_1380);
        _1373 = const ();
        goto -> bb585;
    }

    bb585: {
        StorageDead(_1379);
        goto -> bb586;
    }

    bb586: {
        StorageDead(_1374);
        StorageDead(_1373);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        StorageLive(_1386);
        _1386 = &(*_7);
        StorageLive(_1387);
        _1387 = &(*_9);
        StorageLive(_1388);
        _1388 = &(*_10);
        StorageLive(_1389);
        _1389 = &mut (*_11);
        _1385 = math::margin::meets_initial_margin_requirement(move _1386, move _1387, move _1388, move _1389) -> [return: bb587, unwind: bb732];
    }

    bb587: {
        StorageDead(_1389);
        StorageDead(_1388);
        StorageDead(_1387);
        StorageDead(_1386);
        _1384 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1385) -> [return: bb588, unwind: bb732];
    }

    bb588: {
        StorageDead(_1385);
        _1390 = discriminant(_1384);
        switchInt(move _1390) -> [0: bb589, 1: bb590, otherwise: bb18];
    }

    bb589: {
        StorageLive(_1394);
        _1394 = ((_1384 as Continue).0: bool);
        _1383 = _1394;
        StorageDead(_1394);
        StorageDead(_1384);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        _1398 = _1383;
        switchInt(move _1398) -> [0: bb593, otherwise: bb592];
    }

    bb590: {
        StorageLive(_1391);
        _1391 = ((_1384 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1393);
        _1393 = _1391;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1393) -> [return: bb591, unwind: bb732];
    }

    bb591: {
        StorageDead(_1393);
        StorageDead(_1391);
        StorageDead(_1384);
        goto -> bb629;
    }

    bb592: {
        StorageLive(_1399);
        _1399 = ();
        _1397 = std::result::Result::<(), error::ErrorCode>::Ok(move _1399);
        StorageDead(_1399);
        goto -> bb601;
    }

    bb593: {
        StorageLive(_1400);
        _1400 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_1401);
        StorageLive(_1402);
        StorageLive(_1403);
        StorageLive(_1404);
        StorageLive(_1405);
        StorageLive(_1406);
        StorageLive(_1407);
        StorageLive(_1408);
        StorageLive(_1409);
        StorageLive(_1410);
        StorageLive(_1411);
        _1492 = const _;
        _1411 = &(*_1492);
        _1410 = &(*_1411);
        _1409 = move _1410 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1410);
        StorageLive(_1413);
        StorageLive(_1414);
        StorageLive(_1415);
        StorageLive(_1416);
        StorageLive(_1417);
        StorageLive(_1418);
        StorageLive(_1419);
        _1419 = &_1400;
        _1418 = &(*_1419);
        _1417 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1418) -> [return: bb594, unwind: bb732];
    }

    bb594: {
        StorageDead(_1418);
        _1416 = [move _1417];
        StorageDead(_1417);
        _1415 = &_1416;
        _1414 = &(*_1415);
        _1413 = move _1414 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1414);
        _1408 = Arguments::<'_>::new_v1(move _1409, move _1413) -> [return: bb595, unwind: bb732];
    }

    bb595: {
        StorageDead(_1413);
        StorageDead(_1409);
        _1407 = format(move _1408) -> [return: bb596, unwind: bb732];
    }

    bb596: {
        StorageDead(_1408);
        StorageDead(_1419);
        StorageDead(_1416);
        StorageDead(_1415);
        StorageDead(_1411);
        _1406 = move _1407;
        StorageDead(_1407);
        _1405 = &_1406;
        _1404 = &(*_1405);
        _1403 = <String as Deref>::deref(move _1404) -> [return: bb597, unwind: bb684];
    }

    bb597: {
        _1402 = &(*_1403);
        StorageDead(_1404);
        _1401 = solana_program::log::sol_log(move _1402) -> [return: bb598, unwind: bb684];
    }

    bb598: {
        StorageDead(_1402);
        drop(_1406) -> [return: bb599, unwind: bb732];
    }

    bb599: {
        StorageDead(_1406);
        StorageDead(_1405);
        StorageDead(_1403);
        StorageDead(_1401);
        StorageLive(_1420);
        StorageLive(_1421);
        StorageLive(_1422);
        _1422 = const "Liquidator doesnt have enough collateral to take over borrow";
        _1421 = &(*_1422);
        _1420 = solana_program::log::sol_log(move _1421) -> [return: bb600, unwind: bb732];
    }

    bb600: {
        StorageDead(_1421);
        StorageDead(_1422);
        StorageDead(_1420);
        StorageLive(_1423);
        _1423 = _1400;
        _1397 = std::result::Result::<(), error::ErrorCode>::Err(move _1423);
        StorageDead(_1423);
        StorageDead(_1400);
        goto -> bb601;
    }

    bb601: {
        StorageDead(_1398);
        _1396 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1397) -> [return: bb602, unwind: bb732];
    }

    bb602: {
        StorageDead(_1397);
        _1424 = discriminant(_1396);
        switchInt(move _1424) -> [0: bb603, 1: bb604, otherwise: bb18];
    }

    bb603: {
        StorageLive(_1428);
        _1428 = ((_1396 as Continue).0: ());
        _1395 = _1428;
        StorageDead(_1428);
        StorageDead(_1396);
        StorageDead(_1395);
        StorageLive(_1429);
        StorageLive(_1430);
        StorageLive(_1431);
        StorageLive(_1432);
        StorageLive(_1433);
        _1433 = &(*_9);
        StorageLive(_1434);
        StorageLive(_1435);
        _1435 = &_1;
        _1434 = &(*_1435);
        _1432 = PerpMarketMap::<'_>::get_ref_mut(move _1433, move _1434) -> [return: bb606, unwind: bb732];
    }

    bb604: {
        StorageLive(_1425);
        _1425 = ((_1396 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1427);
        _1427 = _1425;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1427) -> [return: bb605, unwind: bb732];
    }

    bb605: {
        StorageDead(_1427);
        StorageDead(_1425);
        StorageDead(_1396);
        StorageDead(_1395);
        goto -> bb629;
    }

    bb606: {
        StorageDead(_1434);
        StorageDead(_1433);
        _1431 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1432) -> [return: bb607, unwind: bb732];
    }

    bb607: {
        StorageDead(_1432);
        _1436 = discriminant(_1431);
        switchInt(move _1436) -> [0: bb608, 1: bb609, otherwise: bb18];
    }

    bb608: {
        StorageLive(_1440);
        _1440 = move ((_1431 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1430 = move _1440;
        StorageDead(_1440);
        _1560 = discriminant(_1431);
        StorageDead(_1435);
        StorageDead(_1431);
        StorageLive(_1441);
        StorageLive(_1442);
        StorageLive(_1443);
        StorageLive(_1444);
        _1444 = &mut (*_11);
        StorageLive(_1445);
        StorageLive(_1446);
        StorageLive(_1447);
        StorageLive(_1448);
        StorageLive(_1449);
        StorageLive(_1450);
        _1450 = &_1430;
        _1449 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1450) -> [return: bb611, unwind: bb683];
    }

    bb609: {
        StorageLive(_1437);
        _1437 = ((_1431 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1439);
        _1439 = _1437;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1439) -> [return: bb610, unwind: bb727];
    }

    bb610: {
        StorageDead(_1439);
        StorageDead(_1437);
        _1558 = discriminant(_1431);
        StorageDead(_1435);
        StorageDead(_1431);
        StorageDead(_1430);
        goto -> bb628;
    }

    bb611: {
        _1448 = &(*_1449);
        StorageDead(_1450);
        _1447 = PerpMarket::oracle_id(move _1448) -> [return: bb612, unwind: bb683];
    }

    bb612: {
        StorageDead(_1448);
        _1446 = &_1447;
        _1445 = &(*_1446);
        _1443 = OracleMap::<'_>::get_price_data(move _1444, move _1445) -> [return: bb613, unwind: bb683];
    }

    bb613: {
        StorageDead(_1445);
        StorageDead(_1444);
        _1442 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _1443) -> [return: bb614, unwind: bb683];
    }

    bb614: {
        StorageDead(_1443);
        _1451 = discriminant(_1442);
        switchInt(move _1451) -> [0: bb615, 1: bb616, otherwise: bb18];
    }

    bb615: {
        StorageLive(_1455);
        _1455 = ((_1442 as Continue).0: &state::oracle::OraclePriceData);
        _1441 = _1455;
        StorageDead(_1455);
        _1429 = ((*_1441).0: i64);
        drop(_1430) -> [return: bb618, unwind: bb732];
    }

    bb616: {
        StorageLive(_1452);
        _1452 = ((_1442 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1454);
        _1454 = _1452;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1454) -> [return: bb617, unwind: bb683];
    }

    bb617: {
        StorageDead(_1454);
        StorageDead(_1452);
        drop(_1430) -> [return: bb627, unwind: bb732];
    }

    bb618: {
        StorageDead(_1430);
        StorageDead(_1449);
        StorageDead(_1447);
        StorageDead(_1446);
        StorageDead(_1442);
        StorageDead(_1441);
        StorageLive(_1456);
        StorageLive(_1457);
        StorageLive(_1458);
        StorageLive(_1459);
        StorageLive(_1460);
        StorageLive(_1461);
        StorageLive(_1462);
        StorageLive(_1463);
        StorageLive(_1464);
        StorageLive(_1465);
        StorageLive(_1466);
        StorageLive(_1467);
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        _1470 = _12;
        StorageLive(_1471);
        _1471 = _808;
        StorageLive(_1472);
        _1472 = LiquidationType::LiquidateBorrowForPerpPnl;
        StorageLive(_1473);
        _1473 = (*_6);
        StorageLive(_1474);
        _1474 = (*_8);
        StorageLive(_1475);
        _1475 = (_753.3: u128);
        StorageLive(_1476);
        _1476 = (_753.1: i128);
        StorageLive(_1477);
        StorageLive(_1478);
        _1478 = &(*_5);
        _1477 = User::is_bankrupt(move _1478) -> [return: bb619, unwind: bb732];
    }

    bb619: {
        StorageDead(_1478);
        StorageLive(_1479);
        _1479 = _818;
        StorageLive(_1480);
        StorageLive(_1481);
        _1481 = _1;
        StorageLive(_1482);
        _1482 = _1429;
        StorageLive(_1483);
        _1483 = _1082;
        StorageLive(_1484);
        _1484 = _2;
        StorageLive(_1485);
        _1485 = _572;
        StorageLive(_1486);
        _1486 = _1073;
        _1480 = LiquidateBorrowForPerpPnlRecord { perp_market_index: move _1481, market_oracle_price: move _1482, pnl_transfer: move _1483, liability_market_index: move _1484, liability_price: move _1485, liability_transfer: move _1486 };
        StorageDead(_1486);
        StorageDead(_1485);
        StorageDead(_1484);
        StorageDead(_1483);
        StorageDead(_1482);
        StorageDead(_1481);
        StorageLive(_1487);
        _1487 = <LiquidationRecord as Default>::default() -> [return: bb620, unwind: bb732];
    }

    bb620: {
        _1469 = LiquidationRecord { ts: move _1470, liquidation_type: move _1472, user: move _1473, liquidator: move _1474, margin_requirement: move _1475, total_collateral: move _1476, margin_freed: move _1479, liquidation_id: move _1471, bankrupt: move _1477, canceled_order_ids: move (_1487.9: std::vec::Vec<u32>), liquidate_perp: move (_1487.10: state::events::LiquidatePerpRecord), liquidate_spot: move (_1487.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move _1480, liquidate_perp_pnl_for_deposit: move (_1487.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_1487.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_1487.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_1480);
        StorageDead(_1479);
        StorageDead(_1477);
        StorageDead(_1476);
        StorageDead(_1475);
        StorageDead(_1474);
        StorageDead(_1473);
        StorageDead(_1472);
        StorageDead(_1471);
        StorageDead(_1470);
        _1468 = &_1469;
        _1467 = &(*_1468);
        _1466 = <LiquidationRecord as anchor_lang::Event>::data(move _1467) -> [return: bb621, unwind: bb682];
    }

    bb621: {
        StorageDead(_1467);
        _1465 = &_1466;
        _1464 = &(*_1465);
        _1463 = <Vec<u8> as Deref>::deref(move _1464) -> [return: bb622, unwind: bb681];
    }

    bb622: {
        _1462 = &(*_1463);
        StorageDead(_1464);
        _1461 = [move _1462];
        StorageDead(_1462);
        _1460 = &_1461;
        _1459 = &(*_1460);
        _1458 = move _1459 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1459);
        _1457 = solana_program::log::sol_log_data(move _1458) -> [return: bb623, unwind: bb681];
    }

    bb623: {
        StorageDead(_1458);
        drop(_1466) -> [return: bb624, unwind: bb682];
    }

    bb624: {
        drop(_1469) -> [return: bb625, unwind: bb732];
    }

    bb625: {
        StorageDead(_1487);
        StorageDead(_1469);
        StorageDead(_1468);
        StorageDead(_1466);
        StorageDead(_1465);
        StorageDead(_1463);
        StorageDead(_1461);
        StorageDead(_1460);
        StorageDead(_1457);
        _1456 = const ();
        StorageDead(_1456);
        StorageLive(_1488);
        _1488 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1488);
        StorageDead(_1488);
        StorageDead(_1429);
        StorageDead(_1383);
        StorageDead(_1338);
        StorageDead(_1082);
        StorageDead(_1073);
        StorageDead(_1068);
        StorageDead(_1049);
        StorageDead(_1034);
        StorageDead(_1015);
        StorageDead(_1002);
        StorageDead(_987);
        StorageDead(_977);
        StorageDead(_968);
        StorageDead(_840);
        drop(_819) -> [return: bb626, unwind: bb740];
    }

    bb626: {
        _1513 = const false;
        StorageDead(_819);
        StorageDead(_818);
        StorageDead(_808);
        StorageDead(_753);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        _1516 = const false;
        StorageDead(_223);
        _1517 = const false;
        StorageDead(_156);
        goto -> bb680;
    }

    bb627: {
        StorageDead(_1430);
        StorageDead(_1449);
        StorageDead(_1447);
        StorageDead(_1446);
        StorageDead(_1442);
        StorageDead(_1441);
        goto -> bb628;
    }

    bb628: {
        StorageDead(_1429);
        goto -> bb629;
    }

    bb629: {
        StorageDead(_1383);
        goto -> bb630;
    }

    bb630: {
        StorageDead(_1338);
        goto -> bb640;
    }

    bb631: {
        StorageDead(_1324);
        StorageDead(_1321);
        StorageDead(_1319);
        StorageDead(_1315);
        StorageDead(_1314);
        goto -> bb632;
    }

    bb632: {
        StorageDead(_1304);
        goto -> bb634;
    }

    bb633: {
        StorageDead(_1291);
        StorageDead(_1289);
        StorageDead(_1287);
        StorageDead(_1283);
        StorageDead(_1282);
        goto -> bb634;
    }

    bb634: {
        StorageDead(_1272);
        drop(_1261) -> [return: bb635, unwind: bb732];
    }

    bb635: {
        StorageDead(_1261);
        StorageDead(_1260);
        goto -> bb640;
    }

    bb636: {
        StorageDead(_1244);
        StorageDead(_1243);
        StorageDead(_1241);
        StorageDead(_1239);
        StorageDead(_1236);
        StorageDead(_1232);
        StorageDead(_1231);
        goto -> bb638;
    }

    bb637: {
        StorageDead(_1215);
        StorageDead(_1214);
        StorageDead(_1212);
        StorageDead(_1210);
        StorageDead(_1207);
        StorageDead(_1203);
        StorageDead(_1202);
        goto -> bb638;
    }

    bb638: {
        drop(_1191) -> [return: bb639, unwind: bb732];
    }

    bb639: {
        StorageDead(_1191);
        StorageDead(_1190);
        goto -> bb640;
    }

    bb640: {
        StorageDead(_1082);
        StorageDead(_1073);
        StorageDead(_1068);
        goto -> bb642;
    }

    bb641: {
        StorageDead(_1053);
        StorageDead(_1050);
        goto -> bb642;
    }

    bb642: {
        StorageDead(_1049);
        goto -> bb643;
    }

    bb643: {
        StorageDead(_1034);
        goto -> bb644;
    }

    bb644: {
        StorageDead(_1015);
        goto -> bb645;
    }

    bb645: {
        StorageDead(_1002);
        goto -> bb646;
    }

    bb646: {
        StorageDead(_987);
        goto -> bb647;
    }

    bb647: {
        StorageDead(_977);
        goto -> bb648;
    }

    bb648: {
        StorageDead(_968);
        goto -> bb655;
    }

    bb649: {
        StorageDead(_918);
        drop(_907) -> [return: bb650, unwind: bb732];
    }

    bb650: {
        StorageDead(_907);
        goto -> bb651;
    }

    bb651: {
        StorageDead(_897);
        StorageDead(_896);
        goto -> bb652;
    }

    bb652: {
        StorageDead(_866);
        goto -> bb653;
    }

    bb653: {
        StorageDead(_857);
        goto -> bb654;
    }

    bb654: {
        StorageDead(_843);
        StorageDead(_841);
        goto -> bb655;
    }

    bb655: {
        StorageDead(_840);
        switchInt(_1513) -> [0: bb656, otherwise: bb720];
    }

    bb656: {
        _1513 = const false;
        StorageDead(_819);
        StorageDead(_818);
        goto -> bb657;
    }

    bb657: {
        StorageDead(_808);
        goto -> bb660;
    }

    bb658: {
        StorageDead(_795);
        StorageDead(_793);
        goto -> bb659;
    }

    bb659: {
        StorageDead(_770);
        StorageDead(_768);
        StorageDead(_767);
        goto -> bb660;
    }

    bb660: {
        StorageDead(_753);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_571);
        goto -> bb668;
    }

    bb661: {
        StorageDead(_577);
        StorageDead(_745);
        StorageDead(_742);
        StorageDead(_739);
        StorageDead(_736);
        goto -> bb667;
    }

    bb662: {
        StorageDead(_669);
        goto -> bb663;
    }

    bb663: {
        StorageDead(_622);
        goto -> bb664;
    }

    bb664: {
        StorageDead(_589);
        StorageDead(_588);
        goto -> bb665;
    }

    bb665: {
        drop(_577) -> [return: bb666, unwind: bb740];
    }

    bb666: {
        StorageDead(_577);
        goto -> bb667;
    }

    bb667: {
        StorageDead(_576);
        goto -> bb668;
    }

    bb668: {
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb724;
    }

    bb669: {
        StorageDead(_513);
        drop(_502) -> [return: bb670, unwind: bb740];
    }

    bb670: {
        StorageDead(_502);
        StorageDead(_458);
        StorageDead(_406);
        StorageDead(_396);
        StorageDead(_563);
        StorageDead(_560);
        goto -> bb677;
    }

    bb671: {
        StorageDead(_526);
        drop(_513) -> [return: bb672, unwind: bb701];
    }

    bb672: {
        StorageDead(_513);
        drop(_502) -> [return: bb673, unwind: bb740];
    }

    bb673: {
        StorageDead(_502);
        goto -> bb674;
    }

    bb674: {
        StorageDead(_458);
        goto -> bb675;
    }

    bb675: {
        StorageDead(_406);
        goto -> bb676;
    }

    bb676: {
        StorageDead(_396);
        goto -> bb677;
    }

    bb677: {
        StorageDead(_395);
        goto -> bb724;
    }

    bb678: {
        _1516 = const false;
        StorageDead(_223);
        goto -> bb726;
    }

    bb679: {
        _1517 = const false;
        StorageDead(_156);
        goto -> bb680;
    }

    bb680: {
        return;
    }

    bb681 (cleanup): {
        drop(_1466) -> [return: bb682, unwind terminate(cleanup)];
    }

    bb682 (cleanup): {
        drop(_1469) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb683 (cleanup): {
        drop(_1430) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb684 (cleanup): {
        drop(_1406) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb685 (cleanup): {
        drop(_1261) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb686 (cleanup): {
        drop(_1191) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb687 (cleanup): {
        drop(_1156) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb688 (cleanup): {
        drop(_1131) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb689 (cleanup): {
        drop(_1109) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb690 (cleanup): {
        drop(_944) -> [return: bb691, unwind terminate(cleanup)];
    }

    bb691 (cleanup): {
        drop(_947) -> [return: bb692, unwind terminate(cleanup)];
    }

    bb692 (cleanup): {
        drop(_964) -> [return: bb694, unwind terminate(cleanup)];
    }

    bb693 (cleanup): {
        drop(_957) -> [return: bb694, unwind terminate(cleanup)];
    }

    bb694 (cleanup): {
        drop(_907) -> [return: bb732, unwind terminate(cleanup)];
    }

    bb695 (cleanup): {
        drop(_778) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb696 (cleanup): {
        drop(_713) -> [return: bb699, unwind terminate(cleanup)];
    }

    bb697 (cleanup): {
        drop(_694) -> [return: bb699, unwind terminate(cleanup)];
    }

    bb698 (cleanup): {
        drop(_646) -> [return: bb699, unwind terminate(cleanup)];
    }

    bb699 (cleanup): {
        drop(_577) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb700 (cleanup): {
        drop(_513) -> [return: bb701, unwind terminate(cleanup)];
    }

    bb701 (cleanup): {
        drop(_502) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb702 (cleanup): {
        drop(_479) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb703 (cleanup): {
        drop(_438) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb704 (cleanup): {
        drop(_419) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb705 (cleanup): {
        drop(_373) -> [return: bb737, unwind terminate(cleanup)];
    }

    bb706 (cleanup): {
        drop(_348) -> [return: bb738, unwind terminate(cleanup)];
    }

    bb707 (cleanup): {
        drop(_268) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb708 (cleanup): {
        drop(_249) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb709 (cleanup): {
        drop(_201) -> [return: bb743, unwind terminate(cleanup)];
    }

    bb710 (cleanup): {
        drop(_182) -> [return: bb743, unwind terminate(cleanup)];
    }

    bb711 (cleanup): {
        drop(_136) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb712 (cleanup): {
        drop(_117) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb713 (cleanup): {
        drop(_92) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb714 (cleanup): {
        drop(_73) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb715 (cleanup): {
        drop(_48) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb716 (cleanup): {
        drop(_29) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb717 (cleanup): {
        resume;
    }

    bb718: {
        _1526 = discriminant(_349);
        StorageDead(_353);
        _1515 = const false;
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &mut (*_7);
        StorageLive(_369);
        _369 = &(*_8);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &(*_9);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_1;
        _377 = &(*_378);
        _375 = PerpMarketMap::<'_>::get_ref_mut(move _376, move _377) -> [return: bb148, unwind: bb740];
    }

    bb719: {
        _1528 = discriminant(_374);
        StorageDead(_378);
        _1514 = const false;
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_366);
        StorageDead(_365);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = &(*_5);
        StorageLive(_400);
        _400 = _1;
        _398 = User::get_perp_position(move _399, move _400) -> [return: bb159, unwind: bb740];
    }

    bb720: {
        drop(_819) -> [return: bb656, unwind: bb740];
    }

    bb721: {
        _1562 = discriminant(_374);
        StorageDead(_378);
        _1514 = const false;
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_366);
        StorageDead(_365);
        goto -> bb724;
    }

    bb722: {
        _1564 = discriminant(_349);
        StorageDead(_353);
        _1515 = const false;
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb724;
    }

    bb723: {
        drop(_223) -> [return: bb678, unwind: bb743];
    }

    bb724: {
        switchInt(_1516) -> [0: bb678, otherwise: bb723];
    }

    bb725: {
        drop(_156) -> [return: bb679, unwind: bb717];
    }

    bb726: {
        switchInt(_1517) -> [0: bb679, otherwise: bb725];
    }

    bb727 (cleanup): {
        _1566 = discriminant(_1431);
        goto -> bb732;
    }

    bb728 (cleanup): {
        _1567 = discriminant(_1262);
        goto -> bb732;
    }

    bb729 (cleanup): {
        _1568 = discriminant(_1192);
        goto -> bb732;
    }

    bb730 (cleanup): {
        _1569 = discriminant(_908);
        goto -> bb732;
    }

    bb731 (cleanup): {
        drop(_819) -> [return: bb740, unwind terminate(cleanup)];
    }

    bb732 (cleanup): {
        switchInt(_1513) -> [0: bb740, otherwise: bb731];
    }

    bb733 (cleanup): {
        _1570 = discriminant(_820);
        goto -> bb740;
    }

    bb734 (cleanup): {
        _1571 = discriminant(_578);
        goto -> bb740;
    }

    bb735 (cleanup): {
        _1572 = discriminant(_514);
        goto -> bb701;
    }

    bb736 (cleanup): {
        _1573 = discriminant(_503);
        goto -> bb740;
    }

    bb737 (cleanup): {
        _1574 = discriminant(_374);
        goto -> bb740;
    }

    bb738 (cleanup): {
        _1575 = discriminant(_349);
        goto -> bb740;
    }

    bb739 (cleanup): {
        drop(_223) -> [return: bb743, unwind terminate(cleanup)];
    }

    bb740 (cleanup): {
        switchInt(_1516) -> [0: bb743, otherwise: bb739];
    }

    bb741 (cleanup): {
        _1576 = discriminant(_224);
        goto -> bb743;
    }

    bb742 (cleanup): {
        drop(_156) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb743 (cleanup): {
        switchInt(_1517) -> [0: bb717, otherwise: bb742];
    }

    bb744 (cleanup): {
        _1577 = discriminant(_157);
        goto -> bb717;
    }
}
