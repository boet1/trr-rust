// MIR for `controller::orders::place_perp_order` before PreCodegen

fn controller::orders::place_perp_order(_1: &state::state::State, _2: &mut User, _3: anchor_lang::prelude::Pubkey, _4: &PerpMarketMap<'_>, _5: &SpotMarketMap<'_>, _6: &mut OracleMap<'_>, _7: &Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, _8: &anchor_lang::prelude::Clock, _9: order_params::OrderParams, _10: PlaceOrderOptions) -> std::result::Result<(), error::ErrorCode> {
    debug state => _1;
    debug user => _2;
    debug user_key => _3;
    debug perp_market_map => _4;
    debug spot_market_map => _5;
    debug oracle_map => _6;
    debug high_leverage_mode_config => _7;
    debug clock => _8;
    debug params => _9;
    debug options => _10;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _11: i64;
    let _13: ();
    let mut _14: bool;
    let mut _15: &state::order_params::PlaceOrderOptions;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &mut state::user::User;
    let mut _20: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _21: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _22: &mut state::oracle_map::OracleMap<'_>;
    let mut _23: u32;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: ();
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _31: std::result::Result<(), error::ErrorCode>;
    let mut _32: bool;
    let mut _33: &state::user::User;
    let mut _34: ();
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 2];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &error::ErrorCode;
    let _54: &error::ErrorCode;
    let mut _55: error::ErrorCode;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _61: ();
    let mut _62: bool;
    let mut _63: &state::order_params::OrderParams;
    let mut _64: isize;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _68: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, error::ErrorCode>;
    let mut _69: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _71: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: bool;
    let mut _78: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let _79: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _80: &std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _81: bool;
    let mut _82: &state::order_params::OrderParams;
    let _83: ();
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _85: std::result::Result<(), error::ErrorCode>;
    let mut _86: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _87: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _88: &mut std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _89: &mut state::user::User;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: !;
    let _99: ();
    let mut _100: &str;
    let _101: &str;
    let mut _102: error::ErrorCode;
    let _103: ();
    let mut _104: bool;
    let _105: ();
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _107: std::result::Result<(), error::ErrorCode>;
    let mut _108: &mut state::user::User;
    let mut _109: &anchor_lang::prelude::Pubkey;
    let _110: &anchor_lang::prelude::Pubkey;
    let mut _111: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _112: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _113: &mut state::oracle_map::OracleMap<'_>;
    let mut _114: i64;
    let mut _115: u64;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _122: bool;
    let mut _123: &state::user::User;
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _126: std::result::Result<(), error::ErrorCode>;
    let mut _127: bool;
    let mut _128: ();
    let _130: ();
    let mut _131: &str;
    let _132: &str;
    let mut _133: &std::string::String;
    let _134: &std::string::String;
    let _135: std::string::String;
    let mut _137: std::fmt::Arguments<'_>;
    let mut _138: &[&str];
    let mut _139: &[&str; 2];
    let _140: &[&str; 2];
    let _141: [&str; 2];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let mut _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: [core::fmt::rt::Argument<'_>; 1];
    let mut _146: core::fmt::rt::Argument<'_>;
    let mut _147: &error::ErrorCode;
    let _148: &error::ErrorCode;
    let _149: ();
    let mut _150: &str;
    let _151: &str;
    let mut _152: error::ErrorCode;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _160: std::result::Result<usize, error::ErrorCode>;
    let mut _161: std::option::Option<usize>;
    let mut _162: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _163: std::slice::Iter<'_, state::user::Order>;
    let mut _164: &[state::user::Order];
    let mut _165: &[state::user::Order; 32];
    let mut _166: {closure@programs/drift/src/controller/orders.rs:161:19: 161:26};
    let mut _167: error::ErrorCode;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _173: ();
    let mut _174: bool;
    let mut _175: u8;
    let mut _177: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _178: std::slice::Iter<'_, state::user::Order>;
    let mut _179: &[state::user::Order];
    let mut _180: &[state::user::Order; 32];
    let mut _181: {closure@programs/drift/src/controller/orders.rs:168:23: 168:30};
    let mut _182: &state::order_params::OrderParams;
    let mut _183: bool;
    let mut _184: &std::option::Option<usize>;
    let mut _185: !;
    let _186: ();
    let mut _187: &str;
    let _188: &str;
    let mut _189: &std::string::String;
    let _190: &std::string::String;
    let _191: std::string::String;
    let mut _193: std::fmt::Arguments<'_>;
    let mut _194: &[&str];
    let mut _195: &[&str; 1];
    let _196: &[&str; 1];
    let _197: [&str; 1];
    let mut _198: &[core::fmt::rt::Argument<'_>];
    let mut _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: &[core::fmt::rt::Argument<'_>; 1];
    let _201: [core::fmt::rt::Argument<'_>; 1];
    let mut _202: core::fmt::rt::Argument<'_>;
    let mut _203: &u8;
    let _204: &u8;
    let mut _205: error::ErrorCode;
    let _208: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _209: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _210: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _211: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _212: &u16;
    let _213: &u16;
    let mut _214: isize;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _221: std::result::Result<bool, error::ErrorCode>;
    let mut _222: &state::perp_market::PerpMarket;
    let _223: &state::perp_market::PerpMarket;
    let mut _224: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _230: ();
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _232: std::result::Result<(), error::ErrorCode>;
    let mut _233: bool;
    let mut _234: &state::perp_market::PerpMarket;
    let mut _235: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _236: isize;
    let mut _237: ();
    let _239: ();
    let mut _240: &str;
    let _241: &str;
    let mut _242: &std::string::String;
    let _243: &std::string::String;
    let _244: std::string::String;
    let mut _246: std::fmt::Arguments<'_>;
    let mut _247: &[&str];
    let mut _248: &[&str; 2];
    let _249: &[&str; 2];
    let _250: [&str; 2];
    let mut _251: &[core::fmt::rt::Argument<'_>];
    let mut _252: &[core::fmt::rt::Argument<'_>; 1];
    let _253: &[core::fmt::rt::Argument<'_>; 1];
    let _254: [core::fmt::rt::Argument<'_>; 1];
    let mut _255: core::fmt::rt::Argument<'_>;
    let mut _256: &error::ErrorCode;
    let _257: &error::ErrorCode;
    let _258: ();
    let mut _259: &str;
    let _260: &str;
    let mut _261: error::ErrorCode;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _267: ();
    let mut _268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _269: std::result::Result<(), error::ErrorCode>;
    let mut _270: bool;
    let mut _271: u8;
    let mut _272: ();
    let _274: ();
    let mut _275: &str;
    let _276: &str;
    let mut _277: &std::string::String;
    let _278: &std::string::String;
    let _279: std::string::String;
    let mut _281: std::fmt::Arguments<'_>;
    let mut _282: &[&str];
    let mut _283: &[&str; 2];
    let _284: &[&str; 2];
    let _285: [&str; 2];
    let mut _286: &[core::fmt::rt::Argument<'_>];
    let mut _287: &[core::fmt::rt::Argument<'_>; 1];
    let _288: &[core::fmt::rt::Argument<'_>; 1];
    let _289: [core::fmt::rt::Argument<'_>; 1];
    let mut _290: core::fmt::rt::Argument<'_>;
    let mut _291: &error::ErrorCode;
    let _292: &error::ErrorCode;
    let _293: ();
    let mut _294: &str;
    let _295: &str;
    let mut _296: &std::string::String;
    let _297: &std::string::String;
    let _298: std::string::String;
    let mut _300: std::fmt::Arguments<'_>;
    let mut _301: &[&str];
    let mut _302: &[&str; 2];
    let _303: &[&str; 2];
    let _304: [&str; 2];
    let mut _305: &[core::fmt::rt::Argument<'_>];
    let mut _306: &[core::fmt::rt::Argument<'_>; 1];
    let _307: &[core::fmt::rt::Argument<'_>; 1];
    let _308: [core::fmt::rt::Argument<'_>; 1];
    let mut _309: core::fmt::rt::Argument<'_>;
    let mut _310: &u8;
    let _311: &u8;
    let mut _312: error::ErrorCode;
    let mut _313: isize;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _318: ();
    let mut _319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _320: std::result::Result<(), error::ErrorCode>;
    let mut _321: bool;
    let mut _322: &state::perp_market::PerpMarket;
    let _323: &state::perp_market::PerpMarket;
    let mut _324: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _325: i64;
    let mut _326: ();
    let _328: ();
    let mut _329: &str;
    let _330: &str;
    let mut _331: &std::string::String;
    let _332: &std::string::String;
    let _333: std::string::String;
    let mut _335: std::fmt::Arguments<'_>;
    let mut _336: &[&str];
    let mut _337: &[&str; 2];
    let _338: &[&str; 2];
    let _339: [&str; 2];
    let mut _340: &[core::fmt::rt::Argument<'_>];
    let mut _341: &[core::fmt::rt::Argument<'_>; 1];
    let _342: &[core::fmt::rt::Argument<'_>; 1];
    let _343: [core::fmt::rt::Argument<'_>; 1];
    let mut _344: core::fmt::rt::Argument<'_>;
    let mut _345: &error::ErrorCode;
    let _346: &error::ErrorCode;
    let _347: ();
    let mut _348: &str;
    let _349: &str;
    let mut _350: &std::string::String;
    let _351: &std::string::String;
    let _352: std::string::String;
    let mut _354: std::fmt::Arguments<'_>;
    let mut _355: &[&str];
    let mut _356: &[&str; 1];
    let _357: &[&str; 1];
    let _358: [&str; 1];
    let mut _359: error::ErrorCode;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _367: std::result::Result<usize, error::ErrorCode>;
    let mut _368: std::result::Result<usize, error::ErrorCode>;
    let mut _369: &[state::user::PerpPosition; 8];
    let _370: &[state::user::PerpPosition; 8];
    let mut _371: u16;
    let mut _372: {closure@programs/drift/src/controller/orders.rs:200:18: 200:21};
    let mut _373: &mut &mut state::user::User;
    let mut _374: &u16;
    let mut _375: isize;
    let mut _377: !;
    let mut _378: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _382: (controller::position::PositionDirection, u64);
    let _383: ();
    let mut _384: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _385: std::result::Result<(), error::ErrorCode>;
    let mut _386: bool;
    let mut _387: u64;
    let mut _388: u64;
    let mut _389: &state::perp_market::PerpMarket;
    let mut _390: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _391: ();
    let _393: ();
    let mut _394: &str;
    let _395: &str;
    let mut _396: &std::string::String;
    let _397: &std::string::String;
    let _398: std::string::String;
    let mut _400: std::fmt::Arguments<'_>;
    let mut _401: &[&str];
    let mut _402: &[&str; 2];
    let _403: &[&str; 2];
    let _404: [&str; 2];
    let mut _405: &[core::fmt::rt::Argument<'_>];
    let mut _406: &[core::fmt::rt::Argument<'_>; 1];
    let _407: &[core::fmt::rt::Argument<'_>; 1];
    let _408: [core::fmt::rt::Argument<'_>; 1];
    let mut _409: core::fmt::rt::Argument<'_>;
    let mut _410: &error::ErrorCode;
    let _411: &error::ErrorCode;
    let _412: ();
    let mut _413: &str;
    let _414: &str;
    let mut _415: &std::string::String;
    let _416: &std::string::String;
    let _417: std::string::String;
    let mut _419: std::fmt::Arguments<'_>;
    let mut _420: &[&str];
    let mut _421: &[&str; 2];
    let _422: &[&str; 2];
    let _423: [&str; 2];
    let mut _424: &[core::fmt::rt::Argument<'_>];
    let mut _425: &[core::fmt::rt::Argument<'_>; 2];
    let _426: &[core::fmt::rt::Argument<'_>; 2];
    let _427: [core::fmt::rt::Argument<'_>; 2];
    let mut _428: core::fmt::rt::Argument<'_>;
    let mut _429: &u64;
    let _430: &u64;
    let mut _431: core::fmt::rt::Argument<'_>;
    let mut _432: &u64;
    let _433: &u64;
    let _434: &state::perp_market::PerpMarket;
    let mut _435: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _436: error::ErrorCode;
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _443: bool;
    let mut _444: u64;
    let mut _445: bool;
    let mut _446: &state::order_params::OrderParams;
    let mut _447: bool;
    let mut _448: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _449: std::result::Result<u64, error::ErrorCode>;
    let mut _450: &state::user::User;
    let mut _451: usize;
    let mut _452: u16;
    let mut _453: controller::position::PositionDirection;
    let mut _454: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _455: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _456: &mut state::oracle_map::OracleMap<'_>;
    let mut _457: isize;
    let mut _459: !;
    let mut _460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _462: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _463: std::result::Result<u64, error::ErrorCode>;
    let mut _464: u64;
    let mut _465: u64;
    let mut _466: &state::perp_market::PerpMarket;
    let mut _467: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _468: isize;
    let mut _470: !;
    let mut _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _474: isize;
    let _477: usize;
    let mut _478: usize;
    let mut _479: bool;
    let mut _480: bool;
    let mut _481: i64;
    let mut _482: controller::position::PositionDirection;
    let mut _483: u64;
    let mut _485: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _486: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _487: &mut state::oracle_map::OracleMap<'_>;
    let mut _488: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _489: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _490: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _491: &state::perp_market::PerpMarket;
    let _492: &state::perp_market::PerpMarket;
    let mut _493: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _494: isize;
    let mut _496: !;
    let mut _497: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _499: ();
    let mut _500: bool;
    let mut _501: &state::order_params::PlaceOrderOptions;
    let _502: bool;
    let mut _503: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _504: std::result::Result<bool, error::ErrorCode>;
    let mut _505: &mut state::order_params::OrderParams;
    let mut _506: &state::perp_market::PerpMarket;
    let _507: &state::perp_market::PerpMarket;
    let mut _508: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _509: i64;
    let mut _510: bool;
    let mut _511: &state::order_params::PlaceOrderOptions;
    let mut _512: isize;
    let mut _514: !;
    let mut _515: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _520: (i64, i64, u8);
    let mut _521: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64, u8)>;
    let mut _522: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _523: &state::order_params::OrderParams;
    let _524: &state::order_params::OrderParams;
    let mut _525: &state::oracle::OraclePriceData;
    let mut _526: u64;
    let mut _527: &state::perp_market::PerpMarket;
    let mut _528: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _529: u8;
    let mut _530: isize;
    let mut _532: !;
    let mut _533: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _536: isize;
    let mut _538: isize;
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _540: std::result::Result<i64, error::ErrorCode>;
    let mut _541: i64;
    let mut _542: i64;
    let mut _543: i64;
    let mut _544: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _545: std::result::Result<i64, error::ErrorCode>;
    let mut _546: i64;
    let mut _547: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _548: std::result::Result<i64, error::ErrorCode>;
    let mut _549: u8;
    let mut _550: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _551: std::result::Result<u8, error::ErrorCode>;
    let mut _552: u8;
    let mut _553: isize;
    let mut _555: !;
    let mut _556: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _558: isize;
    let mut _560: !;
    let mut _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _563: isize;
    let mut _565: !;
    let mut _566: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _568: isize;
    let mut _570: !;
    let mut _571: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _573: ();
    let mut _574: bool;
    let mut _575: i64;
    let mut _576: bool;
    let mut _577: i64;
    let mut _578: i64;
    let mut _579: !;
    let _580: ();
    let mut _581: &str;
    let _582: &str;
    let mut _583: &std::string::String;
    let _584: &std::string::String;
    let _585: std::string::String;
    let mut _587: std::fmt::Arguments<'_>;
    let mut _588: &[&str];
    let mut _589: &[&str; 3];
    let _590: &[&str; 3];
    let _591: [&str; 3];
    let mut _592: &[core::fmt::rt::Argument<'_>];
    let mut _593: &[core::fmt::rt::Argument<'_>; 2];
    let _594: &[core::fmt::rt::Argument<'_>; 2];
    let _595: [core::fmt::rt::Argument<'_>; 2];
    let mut _596: core::fmt::rt::Argument<'_>;
    let mut _597: &i64;
    let _598: &i64;
    let mut _599: core::fmt::rt::Argument<'_>;
    let mut _600: &i64;
    let _601: &i64;
    let mut _602: ();
    let _603: ();
    let mut _604: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _605: std::result::Result<(), error::ErrorCode>;
    let mut _606: bool;
    let mut _607: &state::user::MarketType;
    let mut _608: &state::user::MarketType;
    let _609: state::user::MarketType;
    let mut _610: ();
    let _612: ();
    let mut _613: &str;
    let _614: &str;
    let mut _615: &std::string::String;
    let _616: &std::string::String;
    let _617: std::string::String;
    let mut _619: std::fmt::Arguments<'_>;
    let mut _620: &[&str];
    let mut _621: &[&str; 2];
    let _622: &[&str; 2];
    let _623: [&str; 2];
    let mut _624: &[core::fmt::rt::Argument<'_>];
    let mut _625: &[core::fmt::rt::Argument<'_>; 1];
    let _626: &[core::fmt::rt::Argument<'_>; 1];
    let _627: [core::fmt::rt::Argument<'_>; 1];
    let mut _628: core::fmt::rt::Argument<'_>;
    let mut _629: &error::ErrorCode;
    let _630: &error::ErrorCode;
    let _631: ();
    let mut _632: &str;
    let _633: &str;
    let mut _634: error::ErrorCode;
    let mut _635: isize;
    let mut _637: !;
    let mut _638: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _641: u8;
    let mut _642: u8;
    let mut _643: bool;
    let mut _644: &state::order_params::PlaceOrderOptions;
    let mut _645: state::user::OrderBitFlag;
    let mut _647: bool;
    let mut _648: u8;
    let mut _649: u8;
    let mut _650: bool;
    let mut _651: bool;
    let mut _652: &state::order_params::OrderParams;
    let mut _653: state::user::OrderBitFlag;
    let mut _655: state::user::OrderStatus;
    let mut _656: state::user::OrderType;
    let mut _657: state::user::MarketType;
    let mut _658: u64;
    let mut _659: &state::order_params::PlaceOrderOptions;
    let mut _660: u64;
    let mut _661: u32;
    let mut _663: u32;
    let mut _664: std::option::Option<u32>;
    let mut _665: std::option::Option<u32>;
    let mut _666: u32;
    let mut _667: std::option::Option<u32>;
    let mut _668: u8;
    let mut _669: u16;
    let mut _670: u64;
    let mut _671: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _672: std::result::Result<u64, error::ErrorCode>;
    let mut _673: u64;
    let mut _674: controller::position::PositionDirection;
    let mut _675: state::order_params::PostOnlyParam;
    let mut _676: &state::perp_market::AMM;
    let _677: &state::perp_market::AMM;
    let _678: &state::perp_market::PerpMarket;
    let mut _679: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _680: isize;
    let mut _682: !;
    let mut _683: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _685: controller::position::PositionDirection;
    let mut _686: u64;
    let mut _687: controller::position::PositionDirection;
    let mut _688: bool;
    let mut _689: u64;
    let mut _690: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _691: std::result::Result<u64, error::ErrorCode>;
    let mut _692: u64;
    let mut _693: std::option::Option<u64>;
    let mut _694: u64;
    let mut _695: &state::perp_market::PerpMarket;
    let mut _696: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _697: controller::position::PositionDirection;
    let mut _698: isize;
    let mut _700: !;
    let mut _701: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _703: state::user::OrderTriggerCondition;
    let mut _704: bool;
    let mut _705: &state::order_params::PostOnlyParam;
    let mut _706: &state::order_params::PostOnlyParam;
    let _707: state::order_params::PostOnlyParam;
    let mut _708: i32;
    let mut _709: std::option::Option<i32>;
    let mut _710: bool;
    let mut _711: &state::order_params::OrderParams;
    let mut _712: i64;
    let mut _713: i64;
    let mut _714: u8;
    let mut _715: i64;
    let mut _716: u8;
    let mut _717: u64;
    let mut _718: u8;
    let mut _719: [u8; 1];
    let mut _721: i64;
    let _722: ();
    let mut _723: std::result::Result<(), error::ErrorCode>;
    let mut _724: &state::user::Order;
    let _725: &state::user::Order;
    let mut _726: &state::perp_market::PerpMarket;
    let _727: &state::perp_market::PerpMarket;
    let mut _728: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _729: std::option::Option<i64>;
    let mut _730: u64;
    let mut _731: u32;
    let mut _732: isize;
    let mut _733: &std::result::Result<(), error::ErrorCode>;
    let mut _734: &error::ErrorCode;
    let mut _735: bool;
    let mut _736: &state::order_params::PostOnlyParam;
    let mut _737: &state::order_params::PostOnlyParam;
    let _738: state::order_params::PostOnlyParam;
    let mut _739: !;
    let mut _740: ();
    let mut _742: !;
    let mut _743: error::ErrorCode;
    let mut _745: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _746: std::result::Result<bool, error::ErrorCode>;
    let mut _747: &state::user::Order;
    let _748: &state::user::Order;
    let mut _749: i64;
    let _750: usize;
    let mut _751: usize;
    let mut _752: bool;
    let mut _753: i64;
    let _754: usize;
    let mut _755: usize;
    let mut _756: bool;
    let mut _757: i64;
    let _758: usize;
    let mut _759: usize;
    let mut _760: bool;
    let mut _761: isize;
    let mut _763: !;
    let mut _764: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _766: ();
    let mut _767: &mut state::user::User;
    let mut _768: bool;
    let mut _769: &state::user::Order;
    let mut _770: state::user::Order;
    let _771: usize;
    let mut _772: usize;
    let mut _773: bool;
    let _774: usize;
    let mut _775: usize;
    let mut _776: bool;
    let mut _777: (u8, bool);
    let _778: ();
    let mut _779: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _780: std::result::Result<(), error::ErrorCode>;
    let mut _781: &mut state::user::PerpPosition;
    let mut _782: &mut state::user::PerpPosition;
    let _783: usize;
    let mut _784: usize;
    let mut _785: bool;
    let mut _786: &controller::position::PositionDirection;
    let _787: &controller::position::PositionDirection;
    let mut _788: u64;
    let mut _789: bool;
    let mut _790: &state::user::Order;
    let mut _791: isize;
    let mut _793: !;
    let mut _794: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _796: ();
    let mut _797: &mut state::order_params::PlaceOrderOptions;
    let mut _798: bool;
    let _799: ();
    let mut _800: bool;
    let mut _801: bool;
    let mut _802: &state::order_params::PlaceOrderOptions;
    let _803: ();
    let mut _804: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _805: std::result::Result<(), error::ErrorCode>;
    let mut _806: &state::user::User;
    let mut _807: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _808: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _809: &mut state::oracle_map::OracleMap<'_>;
    let mut _810: bool;
    let mut _811: isize;
    let mut _813: !;
    let mut _814: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _816: ();
    let mut _817: bool;
    let _818: ();
    let mut _819: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _820: std::result::Result<(), error::ErrorCode>;
    let mut _821: &state::user::Order;
    let _822: &state::user::Order;
    let _823: usize;
    let mut _824: usize;
    let mut _825: bool;
    let mut _826: i64;
    let _827: usize;
    let mut _828: usize;
    let mut _829: bool;
    let mut _830: isize;
    let mut _832: !;
    let mut _833: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _836: &state::perp_market::PerpMarket;
    let mut _837: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _838: ();
    let mut _839: bool;
    let mut _840: u128;
    let mut _841: bool;
    let mut _843: isize;
    let mut _844: i128;
    let mut _845: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _846: std::result::Result<i128, error::ErrorCode>;
    let mut _847: i128;
    let mut _848: &state::perp_market::PerpMarket;
    let mut _849: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _850: i128;
    let mut _851: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _852: std::result::Result<i128, error::ErrorCode>;
    let mut _853: u64;
    let mut _854: isize;
    let mut _856: !;
    let mut _857: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _859: isize;
    let mut _861: !;
    let mut _862: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _864: i128;
    let mut _865: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _866: std::result::Result<i128, error::ErrorCode>;
    let mut _867: i128;
    let mut _868: &state::perp_market::PerpMarket;
    let mut _869: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _870: i128;
    let mut _871: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _872: std::result::Result<i128, error::ErrorCode>;
    let mut _873: u64;
    let mut _874: isize;
    let mut _876: !;
    let mut _877: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _879: isize;
    let mut _881: !;
    let mut _882: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _884: ();
    let mut _885: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _886: std::result::Result<(), error::ErrorCode>;
    let mut _887: bool;
    let mut _888: u128;
    let mut _889: u128;
    let mut _890: ();
    let _892: ();
    let mut _893: &str;
    let _894: &str;
    let mut _895: &std::string::String;
    let _896: &std::string::String;
    let _897: std::string::String;
    let mut _899: std::fmt::Arguments<'_>;
    let mut _900: &[&str];
    let mut _901: &[&str; 2];
    let _902: &[&str; 2];
    let _903: [&str; 2];
    let mut _904: &[core::fmt::rt::Argument<'_>];
    let mut _905: &[core::fmt::rt::Argument<'_>; 1];
    let _906: &[core::fmt::rt::Argument<'_>; 1];
    let _907: [core::fmt::rt::Argument<'_>; 1];
    let mut _908: core::fmt::rt::Argument<'_>;
    let mut _909: &error::ErrorCode;
    let _910: &error::ErrorCode;
    let _911: ();
    let mut _912: &str;
    let _913: &str;
    let mut _914: &std::string::String;
    let _915: &std::string::String;
    let _916: std::string::String;
    let mut _918: std::fmt::Arguments<'_>;
    let mut _919: &[&str];
    let mut _920: &[&str; 2];
    let _921: &[&str; 2];
    let _922: [&str; 2];
    let mut _923: &[core::fmt::rt::Argument<'_>];
    let mut _924: &[core::fmt::rt::Argument<'_>; 2];
    let _925: &[core::fmt::rt::Argument<'_>; 2];
    let _926: [core::fmt::rt::Argument<'_>; 2];
    let mut _927: core::fmt::rt::Argument<'_>;
    let mut _928: &u64;
    let _929: &u64;
    let mut _930: core::fmt::rt::Argument<'_>;
    let mut _931: &u16;
    let _932: &u16;
    let mut _933: error::ErrorCode;
    let mut _934: isize;
    let mut _936: !;
    let mut _937: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _943: (std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>, std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>);
    let mut _944: &anchor_lang::prelude::Pubkey;
    let _945: &anchor_lang::prelude::Pubkey;
    let mut _946: &state::user::Order;
    let _947: &state::user::Order;
    let mut _949: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionRecord>;
    let mut _950: std::result::Result<state::events::OrderActionRecord, error::ErrorCode>;
    let mut _951: i64;
    let mut _952: state::events::OrderAction;
    let mut _953: state::events::OrderActionExplanation;
    let mut _954: u16;
    let mut _955: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _956: std::option::Option<u64>;
    let mut _957: std::option::Option<u64>;
    let mut _958: std::option::Option<u64>;
    let mut _959: std::option::Option<u64>;
    let mut _960: std::option::Option<u64>;
    let mut _961: std::option::Option<u64>;
    let mut _962: std::option::Option<u64>;
    let mut _963: std::option::Option<i64>;
    let mut _964: std::option::Option<u64>;
    let mut _965: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _966: std::option::Option<state::user::Order>;
    let mut _967: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _968: std::option::Option<state::user::Order>;
    let mut _969: i64;
    let mut _970: &state::oracle::OraclePriceData;
    let mut _971: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _972: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _973: &mut state::oracle_map::OracleMap<'_>;
    let mut _974: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _975: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _976: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _977: &state::perp_market::PerpMarket;
    let _978: &state::perp_market::PerpMarket;
    let mut _979: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _980: isize;
    let mut _982: !;
    let mut _983: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _985: u8;
    let mut _986: std::option::Option<u64>;
    let mut _987: std::option::Option<u64>;
    let mut _988: std::option::Option<u64>;
    let mut _989: std::option::Option<u64>;
    let mut _990: std::option::Option<u64>;
    let mut _991: isize;
    let mut _993: !;
    let mut _994: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _996: ();
    let mut _997: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _998: std::result::Result<(), error::ErrorCode>;
    let mut _999: state::events::OrderActionRecord;
    let mut _1000: isize;
    let mut _1002: !;
    let mut _1003: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1006: i64;
    let mut _1007: anchor_lang::prelude::Pubkey;
    let mut _1008: state::user::Order;
    let _1009: usize;
    let mut _1010: usize;
    let mut _1011: bool;
    let _1012: ();
    let mut _1013: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1014: std::result::Result<(), error::ErrorCode>;
    let mut _1015: state::events::OrderRecord;
    let mut _1016: isize;
    let mut _1018: !;
    let mut _1019: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1021: ();
    let mut _1022: &mut state::user::User;
    let mut _1023: u64;
    let mut _1024: ();
    let mut _1042: isize;
    let mut _1043: isize;
    let mut _1044: isize;
    let mut _1045: isize;
    let mut _1046: isize;
    let mut _1047: isize;
    let mut _1048: isize;
    let mut _1049: isize;
    let mut _1050: isize;
    let mut _1051: isize;
    scope 1 {
        debug now => _11;
        let _12: u64;
        scope 2 {
            debug slot => _12;
            let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _28: ();
            let _35: error::ErrorCode;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: ();
            let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _120: ();
            let _129: error::ErrorCode;
            let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _157: ();
            let _158: usize;
            let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _172: usize;
            scope 3 {
                debug residual => _25;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _28;
                scope 6 {
                }
            }
            scope 7 {
                debug error_code => _35;
                let _42: std::string::String;
                let mut _1041: &[&str; 2];
                scope 8 {
                    debug res => _42;
                }
            }
            scope 9 {
                debug residual => _57;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _60;
                scope 12 {
                }
            }
            scope 13 {
                debug config => _65;
                let _65: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                let mut _66: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _76: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
                scope 14 {
                    debug config => _66;
                    let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _94: ();
                    scope 19 {
                        debug residual => _91;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _94;
                        scope 22 {
                        }
                    }
                }
                scope 15 {
                    debug residual => _73;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug val => _76;
                    scope 18 {
                    }
                }
            }
            scope 23 {
                debug residual => _117;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _120;
                scope 26 {
                }
            }
            scope 27 {
                debug error_code => _129;
                let _136: std::string::String;
                let mut _1040: &[&str; 2];
                scope 28 {
                    debug res => _136;
                }
            }
            scope 29 {
                debug residual => _154;
                scope 30 {
                }
            }
            scope 31 {
                debug val => _157;
                scope 32 {
                }
            }
            scope 33 {
                debug new_order_index => _158;
                let _176: std::option::Option<usize>;
                let _206: u16;
                scope 38 {
                    debug user_order_id_already_used => _176;
                    let _192: std::string::String;
                    let mut _1025: &[&str; 1];
                    scope 39 {
                        debug res => _192;
                    }
                }
                scope 40 {
                    debug market_index => _206;
                    let _207: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
                    let _215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _218: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                    scope 41 {
                        debug market => _207;
                        let _219: bool;
                        let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _229: bool;
                        scope 46 {
                            debug force_reduce_only => _219;
                            let _238: error::ErrorCode;
                            let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _266: ();
                            let _273: error::ErrorCode;
                            let _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _317: ();
                            let _327: error::ErrorCode;
                            let _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _364: ();
                            let _365: usize;
                            let _376: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _379: usize;
                            scope 51 {
                                debug error_code => _238;
                                let _245: std::string::String;
                                let mut _1039: &[&str; 2];
                                scope 52 {
                                    debug res => _245;
                                }
                            }
                            scope 53 {
                                debug residual => _263;
                                scope 54 {
                                }
                            }
                            scope 55 {
                                debug val => _266;
                                scope 56 {
                                }
                            }
                            scope 57 {
                                debug error_code => _273;
                                let _280: std::string::String;
                                let _299: std::string::String;
                                let mut _1037: &[&str; 2];
                                let mut _1038: &[&str; 2];
                                scope 58 {
                                    debug res => _280;
                                }
                                scope 59 {
                                    debug res => _299;
                                }
                            }
                            scope 60 {
                                debug residual => _314;
                                scope 61 {
                                }
                            }
                            scope 62 {
                                debug val => _317;
                                scope 63 {
                                }
                            }
                            scope 64 {
                                debug error_code => _327;
                                let _334: std::string::String;
                                let _353: std::string::String;
                                let mut _1035: &[&str; 1];
                                let mut _1036: &[&str; 2];
                                scope 65 {
                                    debug res => _334;
                                }
                                scope 66 {
                                    debug res => _353;
                                }
                            }
                            scope 67 {
                                debug residual => _361;
                                scope 68 {
                                }
                            }
                            scope 69 {
                                debug val => _364;
                                scope 70 {
                                }
                            }
                            scope 71 {
                                debug position_index => _365;
                                let _380: controller::position::PositionDirection;
                                let _381: u64;
                                let _392: error::ErrorCode;
                                let _438: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _441: ();
                                let _442: u64;
                                let _458: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _461: u64;
                                let _469: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _472: u64;
                                scope 76 {
                                    debug existing_position_direction => _380;
                                    debug order_base_asset_amount => _381;
                                    let _484: &state::oracle::OraclePriceData;
                                    let _495: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _498: &state::oracle::OraclePriceData;
                                    scope 96 {
                                        debug oracle_price_data => _484;
                                        let _513: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _516: bool;
                                        let _517: i64;
                                        let _518: i64;
                                        let _519: u8;
                                        let _531: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _534: (i64, i64, u8);
                                        scope 101 {
                                            debug residual => _513;
                                            scope 102 {
                                            }
                                        }
                                        scope 103 {
                                            debug val => _516;
                                            scope 104 {
                                            }
                                        }
                                        scope 105 {
                                            debug auction_start_price => _517;
                                            debug auction_end_price => _518;
                                            debug auction_duration => _519;
                                            let _535: i64;
                                            let _537: i64;
                                            let _554: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _557: u8;
                                            let _559: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _562: i64;
                                            let _564: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _567: i64;
                                            let _569: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _572: i64;
                                            scope 110 {
                                                debug max_ts => _535;
                                                let _586: std::string::String;
                                                let _611: error::ErrorCode;
                                                let _636: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _639: ();
                                                let mut _640: u8;
                                                let mut _1026: &[&str; 3];
                                                let mut _1032: &state::user::MarketType;
                                                scope 128 {
                                                    debug res => _586;
                                                }
                                                scope 129 {
                                                    debug error_code => _611;
                                                    let _618: std::string::String;
                                                    let mut _1031: &[&str; 2];
                                                    scope 130 {
                                                        debug res => _618;
                                                    }
                                                }
                                                scope 131 {
                                                    debug residual => _636;
                                                    scope 132 {
                                                    }
                                                }
                                                scope 133 {
                                                    debug val => _639;
                                                    scope 134 {
                                                    }
                                                }
                                                scope 135 {
                                                    debug bit_flags => _640;
                                                    let _646: bool;
                                                    scope 136 {
                                                        debug reduce_only => _646;
                                                        let _654: state::user::Order;
                                                        let _662: u32;
                                                        let _681: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _684: u64;
                                                        let _699: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _702: u64;
                                                        let mut _1030: &state::order_params::PostOnlyParam;
                                                        scope 137 {
                                                            debug new_order => _654;
                                                            let _720: std::option::Option<i64>;
                                                            scope 147 {
                                                                debug valid_oracle_price => _720;
                                                                let _741: error::ErrorCode;
                                                                let _744: bool;
                                                                let _762: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _765: bool;
                                                                let mut _1027: &state::order_params::PostOnlyParam;
                                                                scope 148 {
                                                                    debug err => _741;
                                                                }
                                                                scope 149 {
                                                                    debug risk_increasing => _744;
                                                                    let _792: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _795: ();
                                                                    let _812: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _815: ();
                                                                    let _831: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _834: ();
                                                                    let _835: u128;
                                                                    scope 154 {
                                                                        debug residual => _792;
                                                                        scope 155 {
                                                                        }
                                                                    }
                                                                    scope 156 {
                                                                        debug val => _795;
                                                                        scope 157 {
                                                                        }
                                                                    }
                                                                    scope 158 {
                                                                        debug residual => _812;
                                                                        scope 159 {
                                                                        }
                                                                    }
                                                                    scope 160 {
                                                                        debug val => _815;
                                                                        scope 161 {
                                                                        }
                                                                    }
                                                                    scope 162 {
                                                                        debug residual => _831;
                                                                        scope 163 {
                                                                        }
                                                                    }
                                                                    scope 164 {
                                                                        debug val => _834;
                                                                        scope 165 {
                                                                        }
                                                                    }
                                                                    scope 166 {
                                                                        debug max_oi => _835;
                                                                        let _842: u128;
                                                                        let _855: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _858: i128;
                                                                        let _860: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _863: i128;
                                                                        let _875: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _878: i128;
                                                                        let _880: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _883: i128;
                                                                        let _939: std::option::Option<anchor_lang::prelude::Pubkey>;
                                                                        let _940: std::option::Option<state::user::Order>;
                                                                        let _941: std::option::Option<anchor_lang::prelude::Pubkey>;
                                                                        let _942: std::option::Option<state::user::Order>;
                                                                        scope 167 {
                                                                            debug oi_plus_order => _842;
                                                                            let _891: error::ErrorCode;
                                                                            let _935: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _938: ();
                                                                            scope 184 {
                                                                                debug error_code => _891;
                                                                                let _898: std::string::String;
                                                                                let _917: std::string::String;
                                                                                let mut _1028: &[&str; 2];
                                                                                let mut _1029: &[&str; 2];
                                                                                scope 185 {
                                                                                    debug res => _898;
                                                                                }
                                                                                scope 186 {
                                                                                    debug res => _917;
                                                                                }
                                                                            }
                                                                            scope 187 {
                                                                                debug residual => _935;
                                                                                scope 188 {
                                                                                }
                                                                            }
                                                                            scope 189 {
                                                                                debug val => _938;
                                                                                scope 190 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 168 {
                                                                            debug residual => _855;
                                                                            scope 169 {
                                                                            }
                                                                        }
                                                                        scope 170 {
                                                                            debug val => _858;
                                                                            scope 171 {
                                                                            }
                                                                        }
                                                                        scope 172 {
                                                                            debug residual => _860;
                                                                            scope 173 {
                                                                            }
                                                                        }
                                                                        scope 174 {
                                                                            debug val => _863;
                                                                            scope 175 {
                                                                            }
                                                                        }
                                                                        scope 176 {
                                                                            debug residual => _875;
                                                                            scope 177 {
                                                                            }
                                                                        }
                                                                        scope 178 {
                                                                            debug val => _878;
                                                                            scope 179 {
                                                                            }
                                                                        }
                                                                        scope 180 {
                                                                            debug residual => _880;
                                                                            scope 181 {
                                                                            }
                                                                        }
                                                                        scope 182 {
                                                                            debug val => _883;
                                                                            scope 183 {
                                                                            }
                                                                        }
                                                                        scope 191 {
                                                                            debug taker => _939;
                                                                            debug taker_order => _940;
                                                                            debug maker => _941;
                                                                            debug maker_order => _942;
                                                                            let _948: state::events::OrderActionRecord;
                                                                            let _981: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _984: &state::oracle::OraclePriceData;
                                                                            let _992: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _995: state::events::OrderActionRecord;
                                                                            scope 192 {
                                                                                debug order_action_record => _948;
                                                                                let _1001: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _1004: ();
                                                                                let _1005: state::events::OrderRecord;
                                                                                scope 201 {
                                                                                    debug residual => _1001;
                                                                                    scope 202 {
                                                                                    }
                                                                                }
                                                                                scope 203 {
                                                                                    debug val => _1004;
                                                                                    scope 204 {
                                                                                    }
                                                                                }
                                                                                scope 205 {
                                                                                    debug order_record => _1005;
                                                                                    let _1017: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _1020: ();
                                                                                    scope 206 {
                                                                                        debug residual => _1017;
                                                                                        scope 207 {
                                                                                        }
                                                                                    }
                                                                                    scope 208 {
                                                                                        debug val => _1020;
                                                                                        scope 209 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 193 {
                                                                                debug residual => _981;
                                                                                scope 194 {
                                                                                }
                                                                            }
                                                                            scope 195 {
                                                                                debug val => _984;
                                                                                scope 196 {
                                                                                }
                                                                            }
                                                                            scope 197 {
                                                                                debug residual => _992;
                                                                                scope 198 {
                                                                                }
                                                                            }
                                                                            scope 199 {
                                                                                debug val => _995;
                                                                                scope 200 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 150 {
                                                                    debug residual => _762;
                                                                    scope 151 {
                                                                    }
                                                                }
                                                                scope 152 {
                                                                    debug val => _765;
                                                                    scope 153 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 138 {
                                                            debug current_id => _662;
                                                        }
                                                        scope 139 {
                                                            debug residual => _681;
                                                            scope 140 {
                                                            }
                                                        }
                                                        scope 141 {
                                                            debug val => _684;
                                                            scope 142 {
                                                            }
                                                        }
                                                        scope 143 {
                                                            debug residual => _699;
                                                            scope 144 {
                                                            }
                                                        }
                                                        scope 145 {
                                                            debug val => _702;
                                                            scope 146 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 111 {
                                                debug max_ts => _537;
                                            }
                                            scope 112 {
                                                debug residual => _554;
                                                scope 113 {
                                                }
                                            }
                                            scope 114 {
                                                debug val => _557;
                                                scope 115 {
                                                }
                                            }
                                            scope 116 {
                                                debug residual => _559;
                                                scope 117 {
                                                }
                                            }
                                            scope 118 {
                                                debug val => _562;
                                                scope 119 {
                                                }
                                            }
                                            scope 120 {
                                                debug residual => _564;
                                                scope 121 {
                                                }
                                            }
                                            scope 122 {
                                                debug val => _567;
                                                scope 123 {
                                                }
                                            }
                                            scope 124 {
                                                debug residual => _569;
                                                scope 125 {
                                                }
                                            }
                                            scope 126 {
                                                debug val => _572;
                                                scope 127 {
                                                }
                                            }
                                        }
                                        scope 106 {
                                            debug residual => _531;
                                            scope 107 {
                                            }
                                        }
                                        scope 108 {
                                            debug val => _534;
                                            scope 109 {
                                            }
                                        }
                                    }
                                    scope 97 {
                                        debug residual => _495;
                                        scope 98 {
                                        }
                                    }
                                    scope 99 {
                                        debug val => _498;
                                        scope 100 {
                                        }
                                    }
                                }
                                scope 77 {
                                    debug error_code => _392;
                                    let _399: std::string::String;
                                    let _418: std::string::String;
                                    let mut _1033: &[&str; 2];
                                    let mut _1034: &[&str; 2];
                                    scope 78 {
                                        debug res => _399;
                                    }
                                    scope 79 {
                                        debug res => _418;
                                    }
                                }
                                scope 80 {
                                    debug residual => _438;
                                    scope 81 {
                                    }
                                }
                                scope 82 {
                                    debug val => _441;
                                    scope 83 {
                                    }
                                }
                                scope 84 {
                                    debug base_asset_amount => _442;
                                    let _473: controller::position::PositionDirection;
                                    let _476: &state::user::PerpPosition;
                                    scope 93 {
                                        debug existing_position_direction => _473;
                                    }
                                    scope 94 {
                                        debug existing_position_direction_override => _475;
                                        let _475: controller::position::PositionDirection;
                                    }
                                    scope 95 {
                                        debug market_position => _476;
                                    }
                                }
                                scope 85 {
                                    debug residual => _458;
                                    scope 86 {
                                    }
                                }
                                scope 87 {
                                    debug val => _461;
                                    scope 88 {
                                    }
                                }
                                scope 89 {
                                    debug residual => _469;
                                    scope 90 {
                                    }
                                }
                                scope 91 {
                                    debug val => _472;
                                    scope 92 {
                                    }
                                }
                            }
                            scope 72 {
                                debug residual => _376;
                                scope 73 {
                                }
                            }
                            scope 74 {
                                debug val => _379;
                                scope 75 {
                                }
                            }
                        }
                        scope 47 {
                            debug residual => _226;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _229;
                            scope 50 {
                            }
                        }
                    }
                    scope 42 {
                        debug residual => _215;
                        scope 43 {
                        }
                    }
                    scope 44 {
                        debug val => _218;
                        scope 45 {
                        }
                    }
                }
            }
            scope 34 {
                debug residual => _169;
                scope 35 {
                }
            }
            scope 36 {
                debug val => _172;
                scope 37 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_11);
        _11 = ((*_8).4: i64);
        StorageLive(_12);
        _12 = ((*_8).0: u64);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_10;
        _14 = PlaceOrderOptions::is_liquidation(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _14) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_15);
        _13 = const ();
        goto -> bb10;
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        StorageLive(_20);
        _20 = &(*_4);
        StorageLive(_21);
        _21 = &(*_5);
        StorageLive(_22);
        _22 = &mut (*_6);
        StorageLive(_23);
        _23 = ((*_1).11: u32);
        _18 = validate_user_not_being_liquidated(move _19, move _20, move _21, move _22, move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: ());
        _16 = _28;
        StorageDead(_28);
        StorageDead(_17);
        StorageDead(_16);
        _13 = const ();
        goto -> bb10;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_25);
        _25 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb485;
    }

    bb10: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(*_2);
        _32 = User::is_bankrupt(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _32) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_33);
        StorageLive(_35);
        _35 = error::ErrorCode::UserBankrupt;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _1041 = const _;
        _46 = &(*_1041);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_35;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _53) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        StorageLive(_34);
        _34 = ();
        _31 = std::result::Result::<(), error::ErrorCode>::Ok(move _34);
        StorageDead(_34);
        goto -> bb20;
    }

    bb14: {
        StorageDead(_53);
        _51 = [move _52];
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_43);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb17, unwind: bb502];
    }

    bb17: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb18, unwind: bb502];
    }

    bb18: {
        StorageDead(_37);
        drop(_41) -> [return: bb19, unwind: bb503];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_55);
        _55 = _35;
        _31 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        StorageDead(_35);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_32);
        _30 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _31) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_31);
        _56 = discriminant(_30);
        switchInt(move _56) -> [0: bb22, 1: bb23, otherwise: bb7];
    }

    bb22: {
        StorageLive(_60);
        _60 = ((_30 as Continue).0: ());
        _29 = _60;
        StorageDead(_60);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_9;
        _62 = order_params::OrderParams::is_update_high_leverage_mode(move _63) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb485;
    }

    bb25: {
        switchInt(move _62) -> [0: bb52, otherwise: bb26];
    }

    bb26: {
        StorageDead(_63);
        _64 = discriminant((*_7));
        switchInt(move _64) -> [1: bb27, otherwise: bb50];
    }

    bb27: {
        StorageLive(_65);
        _65 = &(((*_7) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_65);
        _69 = anchor_lang::prelude::AccountLoader::<'_, HighLeverageModeConfig>::load_mut(move _70) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_70);
        StorageLive(_71);
        _71 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _68 = std::result::Result::<RefMut<'_, HighLeverageModeConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _69, move _71) -> [return: bb29, unwind: bb503];
    }

    bb29: {
        StorageDead(_71);
        StorageDead(_69);
        _67 = <std::result::Result<RefMut<'_, HighLeverageModeConfig>, error::ErrorCode> as Try>::branch(move _68) -> [return: bb30, unwind: bb503];
    }

    bb30: {
        StorageDead(_68);
        _72 = discriminant(_67);
        switchInt(move _72) -> [0: bb31, 1: bb32, otherwise: bb7];
    }

    bb31: {
        StorageLive(_76);
        _76 = move ((_67 as Continue).0: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _66 = move _76;
        StorageDead(_76);
        _1044 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_66;
        _79 = <RefMut<'_, HighLeverageModeConfig> as Deref>::deref(move _80) -> [return: bb34, unwind: bb501];
    }

    bb32: {
        StorageLive(_73);
        _73 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb33, unwind: bb505];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_73);
        _1042 = discriminant(_67);
        StorageDead(_67);
        goto -> bb483;
    }

    bb34: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = HighLeverageModeConfig::is_full(move _78) -> [return: bb35, unwind: bb501];
    }

    bb35: {
        switchInt(move _77) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        StorageDead(_78);
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_9;
        _81 = order_params::OrderParams::is_max_leverage_order(move _82) -> [return: bb38, unwind: bb501];
    }

    bb37: {
        StorageDead(_78);
        StorageDead(_79);
        goto -> bb39;
    }

    bb38: {
        switchInt(move _81) -> [0: bb46, otherwise: bb39];
    }

    bb39: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &mut _66;
        _87 = <RefMut<'_, HighLeverageModeConfig> as DerefMut>::deref_mut(move _88) -> [return: bb40, unwind: bb501];
    }

    bb40: {
        _86 = &mut (*_87);
        StorageDead(_88);
        StorageLive(_89);
        _89 = &mut (*_2);
        _85 = HighLeverageModeConfig::enable_high_leverage(move _86, move _89) -> [return: bb41, unwind: bb501];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_86);
        _84 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _85) -> [return: bb42, unwind: bb501];
    }

    bb42: {
        StorageDead(_85);
        _90 = discriminant(_84);
        switchInt(move _90) -> [0: bb43, 1: bb44, otherwise: bb7];
    }

    bb43: {
        StorageLive(_94);
        _94 = ((_84 as Continue).0: ());
        _83 = _94;
        StorageDead(_94);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        _61 = const ();
        goto -> bb48;
    }

    bb44: {
        StorageLive(_91);
        _91 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb45, unwind: bb501];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        drop(_66) -> [return: bb483, unwind: bb503];
    }

    bb46: {
        StorageDead(_82);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const "high leverage mode config is full";
        _96 = &(*_97);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb47, unwind: bb501];
    }

    bb47: {
        StorageDead(_96);
        StorageDead(_97);
        StorageDead(_95);
        _61 = const ();
        goto -> bb48;
    }

    bb48: {
        StorageDead(_81);
        StorageDead(_77);
        drop(_66) -> [return: bb49, unwind: bb503];
    }

    bb49: {
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb53;
    }

    bb50: {
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = const "high leverage mode config not found";
        _100 = &(*_101);
        _99 = solana_program::log::sol_log(move _100) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_100);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_102);
        _102 = error::ErrorCode::InvalidOrder;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _102);
        StorageDead(_102);
        goto -> bb484;
    }

    bb52: {
        StorageDead(_63);
        _61 = const ();
        goto -> bb53;
    }

    bb53: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_103);
        StorageLive(_104);
        _104 = (_10.1: bool);
        switchInt(move _104) -> [0: bb60, otherwise: bb54];
    }

    bb54: {
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &mut (*_2);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_3;
        _109 = &(*_110);
        StorageLive(_111);
        _111 = &(*_4);
        StorageLive(_112);
        _112 = &(*_5);
        StorageLive(_113);
        _113 = &mut (*_6);
        StorageLive(_114);
        _114 = _11;
        StorageLive(_115);
        _115 = _12;
        _107 = expire_orders(move _108, move _109, move _111, move _112, move _113, move _114, move _115) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        _106 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _107) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_107);
        _116 = discriminant(_106);
        switchInt(move _116) -> [0: bb57, 1: bb58, otherwise: bb7];
    }

    bb57: {
        StorageLive(_120);
        _120 = ((_106 as Continue).0: ());
        _105 = _120;
        StorageDead(_120);
        StorageDead(_110);
        StorageDead(_106);
        StorageDead(_105);
        _103 = const ();
        goto -> bb61;
    }

    bb58: {
        StorageLive(_117);
        _117 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_110);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb485;
    }

    bb60: {
        _103 = const ();
        goto -> bb61;
    }

    bb61: {
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_2);
        _122 = User::is_reduce_only(move _123) -> [return: bb62, unwind continue];
    }

    bb62: {
        switchInt(move _122) -> [0: bb78, otherwise: bb63];
    }

    bb63: {
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = (_9.7: bool);
        switchInt(move _127) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageLive(_128);
        _128 = ();
        _126 = std::result::Result::<(), error::ErrorCode>::Ok(move _128);
        StorageDead(_128);
        goto -> bb73;
    }

    bb65: {
        StorageLive(_129);
        _129 = error::ErrorCode::UserReduceOnly;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _1040 = const _;
        _140 = &(*_1040);
        _139 = &(*_140);
        _138 = move _139 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_129;
        _147 = &(*_148);
        _146 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _147) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_147);
        _145 = [move _146];
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = move _143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_143);
        _137 = Arguments::<'_>::new_v1(move _138, move _142) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_142);
        StorageDead(_138);
        _136 = format(move _137) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_137);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_140);
        _135 = move _136;
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <String as Deref>::deref(move _133) -> [return: bb69, unwind: bb500];
    }

    bb69: {
        _131 = &(*_132);
        StorageDead(_133);
        _130 = solana_program::log::sol_log(move _131) -> [return: bb70, unwind: bb500];
    }

    bb70: {
        StorageDead(_131);
        drop(_135) -> [return: bb71, unwind: bb503];
    }

    bb71: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = const "order must be reduce only";
        _150 = &(*_151);
        _149 = solana_program::log::sol_log(move _150) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_150);
        StorageDead(_151);
        StorageDead(_149);
        StorageLive(_152);
        _152 = _129;
        _126 = std::result::Result::<(), error::ErrorCode>::Err(move _152);
        StorageDead(_152);
        StorageDead(_129);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_127);
        _125 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _126) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_126);
        _153 = discriminant(_125);
        switchInt(move _153) -> [0: bb75, 1: bb76, otherwise: bb7];
    }

    bb75: {
        StorageLive(_157);
        _157 = ((_125 as Continue).0: ());
        _124 = _157;
        StorageDead(_157);
        StorageDead(_125);
        StorageDead(_124);
        _121 = const ();
        goto -> bb79;
    }

    bb76: {
        StorageLive(_154);
        _154 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb485;
    }

    bb78: {
        StorageDead(_123);
        _121 = const ();
        goto -> bb79;
    }

    bb79: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &((*_2).5: [state::user::Order; 32]);
        _164 = move _165 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_165);
        _163 = core::slice::<impl [Order]>::iter(move _164) -> [return: bb80, unwind continue];
    }

    bb80: {
        _162 = &mut _163;
        StorageDead(_164);
        StorageLive(_166);
        _166 = {closure@programs/drift/src/controller/orders.rs:161:19: 161:26};
        _161 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:161:19: 161:26}>(move _162, move _166) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_166);
        StorageDead(_162);
        StorageLive(_167);
        _167 = error::ErrorCode::MaxNumberOfOrders;
        _160 = Option::<usize>::ok_or::<error::ErrorCode>(move _161, move _167) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_167);
        StorageDead(_161);
        _159 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _160) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_160);
        _168 = discriminant(_159);
        switchInt(move _168) -> [0: bb84, 1: bb85, otherwise: bb7];
    }

    bb84: {
        StorageLive(_172);
        _172 = ((_159 as Continue).0: usize);
        _158 = _172;
        StorageDead(_172);
        StorageDead(_163);
        StorageDead(_159);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = (_9.3: u8);
        _174 = Gt(move _175, const 0_u8);
        switchInt(move _174) -> [0: bb88, otherwise: bb87];
    }

    bb85: {
        StorageLive(_169);
        _169 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_163);
        StorageDead(_159);
        goto -> bb482;
    }

    bb87: {
        StorageDead(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &((*_2).5: [state::user::Order; 32]);
        _179 = move _180 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_180);
        _178 = core::slice::<impl [Order]>::iter(move _179) -> [return: bb89, unwind continue];
    }

    bb88: {
        StorageDead(_175);
        _173 = const ();
        goto -> bb100;
    }

    bb89: {
        _177 = &mut _178;
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_9;
        _181 = {closure@programs/drift/src/controller/orders.rs:168:23: 168:30} { params: move _182 };
        StorageDead(_182);
        _176 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:168:23: 168:30}>(move _177, move _181) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_181);
        StorageDead(_177);
        StorageDead(_178);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_176;
        _183 = Option::<usize>::is_some(move _184) -> [return: bb91, unwind continue];
    }

    bb91: {
        switchInt(move _183) -> [0: bb99, otherwise: bb92];
    }

    bb92: {
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _1025 = const _;
        _196 = &(*_1025);
        _195 = &(*_196);
        _194 = move _195 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_195);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &(_9.3: u8);
        _203 = &(*_204);
        _202 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _203) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_203);
        _201 = [move _202];
        StorageDead(_202);
        _200 = &_201;
        _199 = &(*_200);
        _198 = move _199 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_199);
        _193 = Arguments::<'_>::new_v1(move _194, move _198) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_198);
        StorageDead(_194);
        _192 = format(move _193) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_193);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_196);
        _191 = move _192;
        StorageDead(_192);
        _190 = &_191;
        _189 = &(*_190);
        _188 = <String as Deref>::deref(move _189) -> [return: bb96, unwind: bb499];
    }

    bb96: {
        _187 = &(*_188);
        StorageDead(_189);
        _186 = solana_program::log::sol_log(move _187) -> [return: bb97, unwind: bb499];
    }

    bb97: {
        StorageDead(_187);
        drop(_191) -> [return: bb98, unwind: bb503];
    }

    bb98: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_186);
        StorageLive(_205);
        _205 = error::ErrorCode::UserOrderIdAlreadyInUse;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _205);
        StorageDead(_205);
        StorageDead(_183);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb482;
    }

    bb99: {
        StorageDead(_184);
        _173 = const ();
        StorageDead(_183);
        StorageDead(_176);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_206);
        _206 = (_9.6: u16);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_4);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_206;
        _212 = &(*_213);
        _210 = PerpMarketMap::<'_>::get_ref(move _211, move _212) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_212);
        StorageDead(_211);
        _209 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _210) -> [return: bb102, unwind: bb503];
    }

    bb102: {
        StorageDead(_210);
        _214 = discriminant(_209);
        switchInt(move _214) -> [0: bb103, 1: bb104, otherwise: bb7];
    }

    bb103: {
        StorageLive(_218);
        _218 = move ((_209 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _208 = move _218;
        StorageDead(_218);
        _207 = &_208;
        _1048 = discriminant(_209);
        StorageDead(_213);
        StorageDead(_209);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &(*_207);
        _223 = <Ref<'_, PerpMarket> as Deref>::deref(move _224) -> [return: bb106, unwind: bb498];
    }

    bb104: {
        StorageLive(_215);
        _215 = ((_209 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_217);
        _217 = _215;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _217) -> [return: bb105, unwind: bb504];
    }

    bb105: {
        StorageDead(_217);
        StorageDead(_215);
        _1046 = discriminant(_209);
        StorageDead(_213);
        StorageDead(_209);
        goto -> bb481;
    }

    bb106: {
        _222 = &(*_223);
        StorageDead(_224);
        _221 = PerpMarket::is_reduce_only(move _222) -> [return: bb107, unwind: bb498];
    }

    bb107: {
        StorageDead(_222);
        _220 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _221) -> [return: bb108, unwind: bb498];
    }

    bb108: {
        StorageDead(_221);
        _225 = discriminant(_220);
        switchInt(move _225) -> [0: bb109, 1: bb110, otherwise: bb7];
    }

    bb109: {
        StorageLive(_229);
        _229 = ((_220 as Continue).0: bool);
        _219 = _229;
        StorageDead(_229);
        StorageDead(_223);
        StorageDead(_220);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &(*_207);
        _234 = <Ref<'_, PerpMarket> as Deref>::deref(move _235) -> [return: bb112, unwind: bb498];
    }

    bb110: {
        StorageLive(_226);
        _226 = ((_220 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb111, unwind: bb498];
    }

    bb111: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_220);
        goto -> bb480;
    }

    bb112: {
        StorageDead(_235);
        _236 = discriminant(((*_234).22: state::perp_market::MarketStatus));
        switchInt(move _236) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _233 = const false;
        goto -> bb115;
    }

    bb114: {
        _233 = const true;
        goto -> bb115;
    }

    bb115: {
        switchInt(move _233) -> [0: bb116, otherwise: bb117];
    }

    bb116: {
        StorageDead(_234);
        StorageLive(_237);
        _237 = ();
        _232 = std::result::Result::<(), error::ErrorCode>::Ok(move _237);
        StorageDead(_237);
        goto -> bb125;
    }

    bb117: {
        StorageDead(_234);
        StorageLive(_238);
        _238 = error::ErrorCode::MarketBeingInitialized;
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _1039 = const _;
        _249 = &(*_1039);
        _248 = &(*_249);
        _247 = move _248 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_248);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &_238;
        _256 = &(*_257);
        _255 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _256) -> [return: bb118, unwind: bb498];
    }

    bb118: {
        StorageDead(_256);
        _254 = [move _255];
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = move _252 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_252);
        _246 = Arguments::<'_>::new_v1(move _247, move _251) -> [return: bb119, unwind: bb498];
    }

    bb119: {
        StorageDead(_251);
        StorageDead(_247);
        _245 = format(move _246) -> [return: bb120, unwind: bb498];
    }

    bb120: {
        StorageDead(_246);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_249);
        _244 = move _245;
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        _241 = <String as Deref>::deref(move _242) -> [return: bb121, unwind: bb497];
    }

    bb121: {
        _240 = &(*_241);
        StorageDead(_242);
        _239 = solana_program::log::sol_log(move _240) -> [return: bb122, unwind: bb497];
    }

    bb122: {
        StorageDead(_240);
        drop(_244) -> [return: bb123, unwind: bb498];
    }

    bb123: {
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_239);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = const "Market is being initialized";
        _259 = &(*_260);
        _258 = solana_program::log::sol_log(move _259) -> [return: bb124, unwind: bb498];
    }

    bb124: {
        StorageDead(_259);
        StorageDead(_260);
        StorageDead(_258);
        StorageLive(_261);
        _261 = _238;
        _232 = std::result::Result::<(), error::ErrorCode>::Err(move _261);
        StorageDead(_261);
        StorageDead(_238);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_233);
        _231 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _232) -> [return: bb126, unwind: bb498];
    }

    bb126: {
        StorageDead(_232);
        _262 = discriminant(_231);
        switchInt(move _262) -> [0: bb127, 1: bb128, otherwise: bb7];
    }

    bb127: {
        StorageLive(_266);
        _266 = ((_231 as Continue).0: ());
        _230 = _266;
        StorageDead(_266);
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = ((*_2).27: u8);
        _270 = Eq(move _271, const 0_u8);
        switchInt(move _270) -> [0: bb131, otherwise: bb130];
    }

    bb128: {
        StorageLive(_263);
        _263 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb129, unwind: bb498];
    }

    bb129: {
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb480;
    }

    bb130: {
        StorageDead(_271);
        StorageLive(_272);
        _272 = ();
        _269 = std::result::Result::<(), error::ErrorCode>::Ok(move _272);
        StorageDead(_272);
        goto -> bb144;
    }

    bb131: {
        StorageDead(_271);
        StorageLive(_273);
        _273 = error::ErrorCode::InvalidPoolId;
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _1038 = const _;
        _284 = &(*_1038);
        _283 = &(*_284);
        _282 = move _283 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_283);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &_273;
        _291 = &(*_292);
        _290 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _291) -> [return: bb132, unwind: bb498];
    }

    bb132: {
        StorageDead(_291);
        _289 = [move _290];
        StorageDead(_290);
        _288 = &_289;
        _287 = &(*_288);
        _286 = move _287 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_287);
        _281 = Arguments::<'_>::new_v1(move _282, move _286) -> [return: bb133, unwind: bb498];
    }

    bb133: {
        StorageDead(_286);
        StorageDead(_282);
        _280 = format(move _281) -> [return: bb134, unwind: bb498];
    }

    bb134: {
        StorageDead(_281);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_284);
        _279 = move _280;
        StorageDead(_280);
        _278 = &_279;
        _277 = &(*_278);
        _276 = <String as Deref>::deref(move _277) -> [return: bb135, unwind: bb496];
    }

    bb135: {
        _275 = &(*_276);
        StorageDead(_277);
        _274 = solana_program::log::sol_log(move _275) -> [return: bb136, unwind: bb496];
    }

    bb136: {
        StorageDead(_275);
        drop(_279) -> [return: bb137, unwind: bb498];
    }

    bb137: {
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _1037 = const _;
        _303 = &(*_1037);
        _302 = &(*_303);
        _301 = move _302 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_302);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &((*_2).27: u8);
        _310 = &(*_311);
        _309 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _310) -> [return: bb138, unwind: bb498];
    }

    bb138: {
        StorageDead(_310);
        _308 = [move _309];
        StorageDead(_309);
        _307 = &_308;
        _306 = &(*_307);
        _305 = move _306 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_306);
        _300 = Arguments::<'_>::new_v1(move _301, move _305) -> [return: bb139, unwind: bb498];
    }

    bb139: {
        StorageDead(_305);
        StorageDead(_301);
        _299 = format(move _300) -> [return: bb140, unwind: bb498];
    }

    bb140: {
        StorageDead(_300);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_303);
        _298 = move _299;
        StorageDead(_299);
        _297 = &_298;
        _296 = &(*_297);
        _295 = <String as Deref>::deref(move _296) -> [return: bb141, unwind: bb495];
    }

    bb141: {
        _294 = &(*_295);
        StorageDead(_296);
        _293 = solana_program::log::sol_log(move _294) -> [return: bb142, unwind: bb495];
    }

    bb142: {
        StorageDead(_294);
        drop(_298) -> [return: bb143, unwind: bb498];
    }

    bb143: {
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageLive(_312);
        _312 = _273;
        _269 = std::result::Result::<(), error::ErrorCode>::Err(move _312);
        StorageDead(_312);
        StorageDead(_273);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_270);
        _268 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _269) -> [return: bb145, unwind: bb498];
    }

    bb145: {
        StorageDead(_269);
        _313 = discriminant(_268);
        switchInt(move _313) -> [0: bb146, 1: bb147, otherwise: bb7];
    }

    bb146: {
        StorageLive(_317);
        _317 = ((_268 as Continue).0: ());
        _267 = _317;
        StorageDead(_317);
        StorageDead(_268);
        StorageDead(_267);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &(*_207);
        _323 = <Ref<'_, PerpMarket> as Deref>::deref(move _324) -> [return: bb149, unwind: bb498];
    }

    bb147: {
        StorageLive(_314);
        _314 = ((_268 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_316);
        _316 = _314;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _316) -> [return: bb148, unwind: bb498];
    }

    bb148: {
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_268);
        StorageDead(_267);
        goto -> bb480;
    }

    bb149: {
        _322 = &(*_323);
        StorageDead(_324);
        StorageLive(_325);
        _325 = _11;
        _321 = PerpMarket::is_in_settlement(move _322, move _325) -> [return: bb150, unwind: bb498];
    }

    bb150: {
        switchInt(move _321) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        StorageDead(_325);
        StorageDead(_322);
        StorageDead(_323);
        StorageLive(_327);
        _327 = error::ErrorCode::MarketPlaceOrderPaused;
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _1036 = const _;
        _338 = &(*_1036);
        _337 = &(*_338);
        _336 = move _337 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_337);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &_327;
        _345 = &(*_346);
        _344 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _345) -> [return: bb153, unwind: bb498];
    }

    bb152: {
        StorageDead(_325);
        StorageDead(_322);
        StorageDead(_323);
        StorageLive(_326);
        _326 = ();
        _320 = std::result::Result::<(), error::ErrorCode>::Ok(move _326);
        StorageDead(_326);
        goto -> bb164;
    }

    bb153: {
        StorageDead(_345);
        _343 = [move _344];
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = move _341 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_341);
        _335 = Arguments::<'_>::new_v1(move _336, move _340) -> [return: bb154, unwind: bb498];
    }

    bb154: {
        StorageDead(_340);
        StorageDead(_336);
        _334 = format(move _335) -> [return: bb155, unwind: bb498];
    }

    bb155: {
        StorageDead(_335);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_338);
        _333 = move _334;
        StorageDead(_334);
        _332 = &_333;
        _331 = &(*_332);
        _330 = <String as Deref>::deref(move _331) -> [return: bb156, unwind: bb494];
    }

    bb156: {
        _329 = &(*_330);
        StorageDead(_331);
        _328 = solana_program::log::sol_log(move _329) -> [return: bb157, unwind: bb494];
    }

    bb157: {
        StorageDead(_329);
        drop(_333) -> [return: bb158, unwind: bb498];
    }

    bb158: {
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_328);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _1035 = const _;
        _357 = &(*_1035);
        _356 = &(*_357);
        _355 = move _356 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_356);
        _354 = Arguments::<'_>::new_const(move _355) -> [return: bb159, unwind: bb498];
    }

    bb159: {
        StorageDead(_355);
        _353 = format(move _354) -> [return: bb160, unwind: bb498];
    }

    bb160: {
        StorageDead(_354);
        StorageDead(_357);
        _352 = move _353;
        StorageDead(_353);
        _351 = &_352;
        _350 = &(*_351);
        _349 = <String as Deref>::deref(move _350) -> [return: bb161, unwind: bb493];
    }

    bb161: {
        _348 = &(*_349);
        StorageDead(_350);
        _347 = solana_program::log::sol_log(move _348) -> [return: bb162, unwind: bb493];
    }

    bb162: {
        StorageDead(_348);
        drop(_352) -> [return: bb163, unwind: bb498];
    }

    bb163: {
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_347);
        StorageLive(_359);
        _359 = _327;
        _320 = std::result::Result::<(), error::ErrorCode>::Err(move _359);
        StorageDead(_359);
        StorageDead(_327);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_321);
        _319 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _320) -> [return: bb165, unwind: bb498];
    }

    bb165: {
        StorageDead(_320);
        _360 = discriminant(_319);
        switchInt(move _360) -> [0: bb166, 1: bb167, otherwise: bb7];
    }

    bb166: {
        StorageLive(_364);
        _364 = ((_319 as Continue).0: ());
        _318 = _364;
        StorageDead(_364);
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &((*_2).4: [state::user::PerpPosition; 8]);
        _369 = &(*_370);
        StorageLive(_371);
        _371 = _206;
        _368 = get_position_index(move _369, move _371) -> [return: bb169, unwind: bb498];
    }

    bb167: {
        StorageLive(_361);
        _361 = ((_319 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_363);
        _363 = _361;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _363) -> [return: bb168, unwind: bb498];
    }

    bb168: {
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb480;
    }

    bb169: {
        StorageDead(_371);
        StorageDead(_369);
        StorageLive(_372);
        StorageLive(_373);
        _373 = &mut _2;
        StorageLive(_374);
        _374 = &_206;
        _372 = {closure@programs/drift/src/controller/orders.rs:200:18: 200:21} { user: move _373, market_index: move _374 };
        StorageDead(_374);
        StorageDead(_373);
        _367 = std::result::Result::<usize, error::ErrorCode>::or_else::<error::ErrorCode, {closure@programs/drift/src/controller/orders.rs:200:18: 200:21}>(move _368, move _372) -> [return: bb170, unwind: bb498];
    }

    bb170: {
        StorageDead(_372);
        StorageDead(_368);
        _366 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _367) -> [return: bb171, unwind: bb498];
    }

    bb171: {
        StorageDead(_367);
        _375 = discriminant(_366);
        switchInt(move _375) -> [0: bb172, 1: bb173, otherwise: bb7];
    }

    bb172: {
        StorageLive(_379);
        _379 = ((_366 as Continue).0: usize);
        _365 = _379;
        StorageDead(_379);
        StorageDead(_370);
        StorageDead(_366);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = (_9.4: u64);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = &(*_207);
        _389 = <Ref<'_, PerpMarket> as Deref>::deref(move _390) -> [return: bb175, unwind: bb498];
    }

    bb173: {
        StorageLive(_376);
        _376 = ((_366 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_378);
        _378 = _376;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _378) -> [return: bb174, unwind: bb498];
    }

    bb174: {
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_370);
        StorageDead(_366);
        goto -> bb479;
    }

    bb175: {
        StorageDead(_390);
        _388 = (((*_389).1: state::perp_market::AMM).52: u64);
        _386 = Ge(move _387, move _388);
        switchInt(move _386) -> [0: bb177, otherwise: bb176];
    }

    bb176: {
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_391);
        _391 = ();
        _385 = std::result::Result::<(), error::ErrorCode>::Ok(move _391);
        StorageDead(_391);
        goto -> bb192;
    }

    bb177: {
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_392);
        _392 = error::ErrorCode::OrderAmountTooSmall;
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _1034 = const _;
        _403 = &(*_1034);
        _402 = &(*_403);
        _401 = move _402 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_402);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &_392;
        _410 = &(*_411);
        _409 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _410) -> [return: bb178, unwind: bb498];
    }

    bb178: {
        StorageDead(_410);
        _408 = [move _409];
        StorageDead(_409);
        _407 = &_408;
        _406 = &(*_407);
        _405 = move _406 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_406);
        _400 = Arguments::<'_>::new_v1(move _401, move _405) -> [return: bb179, unwind: bb498];
    }

    bb179: {
        StorageDead(_405);
        StorageDead(_401);
        _399 = format(move _400) -> [return: bb180, unwind: bb498];
    }

    bb180: {
        StorageDead(_400);
        StorageDead(_411);
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_403);
        _398 = move _399;
        StorageDead(_399);
        _397 = &_398;
        _396 = &(*_397);
        _395 = <String as Deref>::deref(move _396) -> [return: bb181, unwind: bb492];
    }

    bb181: {
        _394 = &(*_395);
        StorageDead(_396);
        _393 = solana_program::log::sol_log(move _394) -> [return: bb182, unwind: bb492];
    }

    bb182: {
        StorageDead(_394);
        drop(_398) -> [return: bb183, unwind: bb498];
    }

    bb183: {
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_393);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _1033 = const _;
        _422 = &(*_1033);
        _421 = &(*_422);
        _420 = move _421 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_421);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &(_9.4: u64);
        _429 = &(*_430);
        _428 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _429) -> [return: bb184, unwind: bb498];
    }

    bb184: {
        StorageDead(_429);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _435 = &(*_207);
        _434 = <Ref<'_, PerpMarket> as Deref>::deref(move _435) -> [return: bb185, unwind: bb498];
    }

    bb185: {
        StorageDead(_435);
        _433 = &(((*_434).1: state::perp_market::AMM).52: u64);
        _432 = &(*_433);
        _431 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _432) -> [return: bb186, unwind: bb498];
    }

    bb186: {
        StorageDead(_432);
        _427 = [move _428, move _431];
        StorageDead(_431);
        StorageDead(_428);
        _426 = &_427;
        _425 = &(*_426);
        _424 = move _425 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_425);
        _419 = Arguments::<'_>::new_v1(move _420, move _424) -> [return: bb187, unwind: bb498];
    }

    bb187: {
        StorageDead(_424);
        StorageDead(_420);
        _418 = format(move _419) -> [return: bb188, unwind: bb498];
    }

    bb188: {
        StorageDead(_419);
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_422);
        _417 = move _418;
        StorageDead(_418);
        _416 = &_417;
        _415 = &(*_416);
        _414 = <String as Deref>::deref(move _415) -> [return: bb189, unwind: bb491];
    }

    bb189: {
        _413 = &(*_414);
        StorageDead(_415);
        _412 = solana_program::log::sol_log(move _413) -> [return: bb190, unwind: bb491];
    }

    bb190: {
        StorageDead(_413);
        drop(_417) -> [return: bb191, unwind: bb498];
    }

    bb191: {
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_414);
        StorageDead(_412);
        StorageLive(_436);
        _436 = _392;
        _385 = std::result::Result::<(), error::ErrorCode>::Err(move _436);
        StorageDead(_436);
        StorageDead(_392);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_386);
        _384 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _385) -> [return: bb193, unwind: bb498];
    }

    bb193: {
        StorageDead(_385);
        _437 = discriminant(_384);
        switchInt(move _437) -> [0: bb194, 1: bb195, otherwise: bb7];
    }

    bb194: {
        StorageLive(_441);
        _441 = ((_384 as Continue).0: ());
        _383 = _441;
        StorageDead(_441);
        StorageDead(_384);
        StorageDead(_383);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = (_9.4: u64);
        _443 = Eq(move _444, const _);
        switchInt(move _443) -> [0: bb198, otherwise: bb197];
    }

    bb195: {
        StorageLive(_438);
        _438 = ((_384 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_440);
        _440 = _438;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _440) -> [return: bb196, unwind: bb498];
    }

    bb196: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_384);
        StorageDead(_383);
        goto -> bb478;
    }

    bb197: {
        StorageDead(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &_9;
        _445 = order_params::OrderParams::is_trigger_order(move _446) -> [return: bb199, unwind: bb498];
    }

    bb198: {
        StorageDead(_444);
        goto -> bb208;
    }

    bb199: {
        switchInt(move _445) -> [0: bb201, otherwise: bb200];
    }

    bb200: {
        StorageDead(_446);
        StorageLive(_447);
        _447 = (_9.7: bool);
        switchInt(move _447) -> [0: bb202, otherwise: bb208];
    }

    bb201: {
        StorageDead(_446);
        goto -> bb202;
    }

    bb202: {
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _450 = &(*_2);
        StorageLive(_451);
        _451 = _365;
        StorageLive(_452);
        _452 = (_9.6: u16);
        StorageLive(_453);
        _453 = (_9.2: controller::position::PositionDirection);
        StorageLive(_454);
        _454 = &(*_4);
        StorageLive(_455);
        _455 = &(*_5);
        StorageLive(_456);
        _456 = &mut (*_6);
        _449 = math::orders::calculate_max_perp_order_size(move _450, move _451, move _452, move _453, move _454, move _455, move _456) -> [return: bb203, unwind: bb498];
    }

    bb203: {
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_452);
        StorageDead(_451);
        StorageDead(_450);
        _448 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _449) -> [return: bb204, unwind: bb498];
    }

    bb204: {
        StorageDead(_449);
        _457 = discriminant(_448);
        switchInt(move _457) -> [0: bb205, 1: bb206, otherwise: bb7];
    }

    bb205: {
        StorageLive(_461);
        _461 = ((_448 as Continue).0: u64);
        _442 = _461;
        StorageDead(_461);
        StorageDead(_448);
        goto -> bb215;
    }

    bb206: {
        StorageLive(_458);
        _458 = ((_448 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_460);
        _460 = _458;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _460) -> [return: bb207, unwind: bb498];
    }

    bb207: {
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_448);
        goto -> bb477;
    }

    bb208: {
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = (_9.4: u64);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &(*_207);
        _466 = <Ref<'_, PerpMarket> as Deref>::deref(move _467) -> [return: bb209, unwind: bb498];
    }

    bb209: {
        StorageDead(_467);
        _465 = (((*_466).1: state::perp_market::AMM).52: u64);
        _463 = math::orders::standardize_base_asset_amount(move _464, move _465) -> [return: bb210, unwind: bb498];
    }

    bb210: {
        StorageDead(_465);
        StorageDead(_464);
        _462 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _463) -> [return: bb211, unwind: bb498];
    }

    bb211: {
        StorageDead(_463);
        _468 = discriminant(_462);
        switchInt(move _468) -> [0: bb212, 1: bb213, otherwise: bb7];
    }

    bb212: {
        StorageLive(_472);
        _472 = ((_462 as Continue).0: u64);
        _442 = _472;
        StorageDead(_472);
        StorageDead(_466);
        StorageDead(_462);
        goto -> bb215;
    }

    bb213: {
        StorageLive(_469);
        _469 = ((_462 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_471);
        _471 = _469;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _471) -> [return: bb214, unwind: bb498];
    }

    bb214: {
        StorageDead(_471);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_462);
        goto -> bb477;
    }

    bb215: {
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_443);
        StorageLive(_473);
        _474 = discriminant((_10.5: std::option::Option<controller::position::PositionDirection>));
        switchInt(move _474) -> [1: bb216, otherwise: bb217];
    }

    bb216: {
        StorageLive(_475);
        _475 = (((_10.5: std::option::Option<controller::position::PositionDirection>) as Some).0: controller::position::PositionDirection);
        _473 = _475;
        StorageDead(_475);
        goto -> bb222;
    }

    bb217: {
        StorageLive(_476);
        StorageLive(_477);
        _477 = _365;
        _478 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _479 = Lt(_477, _478);
        assert(move _479, "index out of bounds: the length is {} but the index is {}", move _478, _477) -> [success: bb218, unwind: bb498];
    }

    bb218: {
        _476 = &((*_2).4: [state::user::PerpPosition; 8])[_477];
        StorageLive(_480);
        StorageLive(_481);
        _481 = ((*_476).1: i64);
        _480 = Ge(move _481, const 0_i64);
        switchInt(move _480) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        StorageDead(_481);
        _473 = controller::position::PositionDirection::Long;
        goto -> bb221;
    }

    bb220: {
        StorageDead(_481);
        _473 = controller::position::PositionDirection::Short;
        goto -> bb221;
    }

    bb221: {
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_476);
        goto -> bb222;
    }

    bb222: {
        StorageLive(_482);
        _482 = _473;
        StorageLive(_483);
        _483 = _442;
        _382 = (move _482, move _483);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_473);
        StorageDead(_442);
        StorageLive(_380);
        _380 = (_382.0: controller::position::PositionDirection);
        StorageLive(_381);
        _381 = (_382.1: u64);
        StorageDead(_382);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _487 = &mut (*_6);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &(*_207);
        _492 = <Ref<'_, PerpMarket> as Deref>::deref(move _493) -> [return: bb223, unwind: bb498];
    }

    bb223: {
        _491 = &(*_492);
        StorageDead(_493);
        _490 = PerpMarket::oracle_id(move _491) -> [return: bb224, unwind: bb498];
    }

    bb224: {
        StorageDead(_491);
        _489 = &_490;
        _488 = &(*_489);
        _486 = OracleMap::<'_>::get_price_data(move _487, move _488) -> [return: bb225, unwind: bb498];
    }

    bb225: {
        StorageDead(_488);
        StorageDead(_487);
        _485 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _486) -> [return: bb226, unwind: bb498];
    }

    bb226: {
        StorageDead(_486);
        _494 = discriminant(_485);
        switchInt(move _494) -> [0: bb227, 1: bb228, otherwise: bb7];
    }

    bb227: {
        StorageLive(_498);
        _498 = ((_485 as Continue).0: &state::oracle::OraclePriceData);
        _484 = _498;
        StorageDead(_498);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_485);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = &_10;
        _500 = PlaceOrderOptions::is_liquidation(move _501) -> [return: bb230, unwind: bb498];
    }

    bb228: {
        StorageLive(_495);
        _495 = ((_485 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_497);
        _497 = _495;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _497) -> [return: bb229, unwind: bb498];
    }

    bb229: {
        StorageDead(_497);
        StorageDead(_495);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_485);
        goto -> bb476;
    }

    bb230: {
        switchInt(move _500) -> [0: bb232, otherwise: bb231];
    }

    bb231: {
        StorageDead(_501);
        _499 = const ();
        goto -> bb240;
    }

    bb232: {
        StorageDead(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &mut _9;
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &(*_207);
        _507 = <Ref<'_, PerpMarket> as Deref>::deref(move _508) -> [return: bb233, unwind: bb498];
    }

    bb233: {
        _506 = &(*_507);
        StorageDead(_508);
        StorageLive(_509);
        _509 = ((*_484).0: i64);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_10;
        _510 = PlaceOrderOptions::is_signed_msg_order(move _511) -> [return: bb234, unwind: bb498];
    }

    bb234: {
        StorageDead(_511);
        _504 = order_params::OrderParams::update_perp_auction_params(move _505, move _506, move _509, move _510) -> [return: bb235, unwind: bb498];
    }

    bb235: {
        StorageDead(_510);
        StorageDead(_509);
        StorageDead(_506);
        StorageDead(_505);
        _503 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _504) -> [return: bb236, unwind: bb498];
    }

    bb236: {
        StorageDead(_504);
        _512 = discriminant(_503);
        switchInt(move _512) -> [0: bb237, 1: bb238, otherwise: bb7];
    }

    bb237: {
        StorageLive(_516);
        _516 = ((_503 as Continue).0: bool);
        _502 = _516;
        StorageDead(_516);
        StorageDead(_507);
        StorageDead(_503);
        StorageDead(_502);
        _499 = const ();
        goto -> bb240;
    }

    bb238: {
        StorageLive(_513);
        _513 = ((_503 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_515);
        _515 = _513;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _515) -> [return: bb239, unwind: bb498];
    }

    bb239: {
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_507);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_500);
        StorageDead(_499);
        goto -> bb476;
    }

    bb240: {
        StorageDead(_500);
        StorageDead(_499);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &_9;
        _523 = &(*_524);
        StorageLive(_525);
        _525 = &(*_484);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = &(*_207);
        _527 = <Ref<'_, PerpMarket> as Deref>::deref(move _528) -> [return: bb241, unwind: bb498];
    }

    bb241: {
        StorageDead(_528);
        _526 = (((*_527).1: state::perp_market::AMM).53: u64);
        StorageLive(_529);
        _529 = ((*_1).16: u8);
        _522 = get_auction_params(move _523, move _525, move _526, move _529) -> [return: bb242, unwind: bb498];
    }

    bb242: {
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_523);
        _521 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as Try>::branch(move _522) -> [return: bb243, unwind: bb498];
    }

    bb243: {
        StorageDead(_522);
        _530 = discriminant(_521);
        switchInt(move _530) -> [0: bb244, 1: bb245, otherwise: bb7];
    }

    bb244: {
        StorageLive(_534);
        _534 = ((_521 as Continue).0: (i64, i64, u8));
        _520 = _534;
        StorageDead(_534);
        StorageLive(_517);
        _517 = (_520.0: i64);
        StorageLive(_518);
        _518 = (_520.1: i64);
        StorageLive(_519);
        _519 = (_520.2: u8);
        StorageDead(_527);
        StorageDead(_524);
        StorageDead(_521);
        StorageDead(_520);
        StorageLive(_535);
        _536 = discriminant((_9.10: std::option::Option<i64>));
        switchInt(move _536) -> [0: bb247, 1: bb248, otherwise: bb7];
    }

    bb245: {
        StorageLive(_531);
        _531 = ((_521 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_533);
        _533 = _531;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _533) -> [return: bb246, unwind: bb498];
    }

    bb246: {
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_527);
        StorageDead(_524);
        StorageDead(_521);
        StorageDead(_520);
        goto -> bb476;
    }

    bb247: {
        _538 = discriminant((_9.0: state::user::OrderType));
        switchInt(move _538) -> [0: bb250, 4: bb250, otherwise: bb249];
    }

    bb248: {
        StorageLive(_537);
        _537 = (((_9.10: std::option::Option<i64>) as Some).0: i64);
        _535 = _537;
        StorageDead(_537);
        goto -> bb272;
    }

    bb249: {
        _535 = const 0_i64;
        goto -> bb272;
    }

    bb250: {
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = _11;
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _552 = _519;
        _551 = <u8 as SafeMath>::safe_div(move _552, const 2_u8) -> [return: bb251, unwind: bb498];
    }

    bb251: {
        StorageDead(_552);
        _550 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _551) -> [return: bb252, unwind: bb498];
    }

    bb252: {
        StorageDead(_551);
        _553 = discriminant(_550);
        switchInt(move _553) -> [0: bb253, 1: bb254, otherwise: bb7];
    }

    bb253: {
        StorageLive(_557);
        _557 = ((_550 as Continue).0: u8);
        _549 = _557;
        StorageDead(_557);
        _548 = <u8 as Cast>::cast::<i64>(move _549) -> [return: bb256, unwind: bb498];
    }

    bb254: {
        StorageLive(_554);
        _554 = ((_550 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_556);
        _556 = _554;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _556) -> [return: bb255, unwind: bb498];
    }

    bb255: {
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_549);
        StorageDead(_548);
        goto -> bb472;
    }

    bb256: {
        StorageDead(_549);
        _547 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _548) -> [return: bb257, unwind: bb498];
    }

    bb257: {
        StorageDead(_548);
        _558 = discriminant(_547);
        switchInt(move _558) -> [0: bb258, 1: bb259, otherwise: bb7];
    }

    bb258: {
        StorageLive(_562);
        _562 = ((_547 as Continue).0: i64);
        _546 = _562;
        StorageDead(_562);
        _545 = <i64 as SafeMath>::safe_add(move _546, const 10_i64) -> [return: bb261, unwind: bb498];
    }

    bb259: {
        StorageLive(_559);
        _559 = ((_547 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_561);
        _561 = _559;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _561) -> [return: bb260, unwind: bb498];
    }

    bb260: {
        StorageDead(_561);
        StorageDead(_559);
        goto -> bb472;
    }

    bb261: {
        StorageDead(_546);
        _544 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _545) -> [return: bb262, unwind: bb498];
    }

    bb262: {
        StorageDead(_545);
        _563 = discriminant(_544);
        switchInt(move _563) -> [0: bb263, 1: bb264, otherwise: bb7];
    }

    bb263: {
        StorageLive(_567);
        _567 = ((_544 as Continue).0: i64);
        _543 = _567;
        StorageDead(_567);
        _542 = <i64 as Ord>::max(const 30_i64, move _543) -> [return: bb266, unwind: bb498];
    }

    bb264: {
        StorageLive(_564);
        _564 = ((_544 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_566);
        _566 = _564;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _566) -> [return: bb265, unwind: bb498];
    }

    bb265: {
        StorageDead(_566);
        StorageDead(_564);
        goto -> bb473;
    }

    bb266: {
        StorageDead(_543);
        _540 = <i64 as SafeMath>::safe_add(move _541, move _542) -> [return: bb267, unwind: bb498];
    }

    bb267: {
        StorageDead(_542);
        StorageDead(_541);
        _539 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _540) -> [return: bb268, unwind: bb498];
    }

    bb268: {
        StorageDead(_540);
        _568 = discriminant(_539);
        switchInt(move _568) -> [0: bb269, 1: bb270, otherwise: bb7];
    }

    bb269: {
        StorageLive(_572);
        _572 = ((_539 as Continue).0: i64);
        _535 = _572;
        StorageDead(_572);
        StorageDead(_550);
        StorageDead(_547);
        StorageDead(_544);
        StorageDead(_539);
        goto -> bb272;
    }

    bb270: {
        StorageLive(_569);
        _569 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_571);
        _571 = _569;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _571) -> [return: bb271, unwind: bb498];
    }

    bb271: {
        StorageDead(_571);
        StorageDead(_569);
        goto -> bb474;
    }

    bb272: {
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = _535;
        _574 = Ne(move _575, const 0_i64);
        switchInt(move _574) -> [0: bb283, otherwise: bb273];
    }

    bb273: {
        StorageDead(_575);
        StorageLive(_576);
        StorageLive(_577);
        _577 = _535;
        StorageLive(_578);
        _578 = _11;
        _576 = Lt(move _577, move _578);
        switchInt(move _576) -> [0: bb282, otherwise: bb274];
    }

    bb274: {
        StorageDead(_578);
        StorageDead(_577);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        _1026 = const _;
        _590 = &(*_1026);
        _589 = &(*_590);
        _588 = move _589 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_589);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        _598 = &_535;
        _597 = &(*_598);
        _596 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _597) -> [return: bb275, unwind: bb498];
    }

    bb275: {
        StorageDead(_597);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        _601 = &_11;
        _600 = &(*_601);
        _599 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _600) -> [return: bb276, unwind: bb498];
    }

    bb276: {
        StorageDead(_600);
        _595 = [move _596, move _599];
        StorageDead(_599);
        StorageDead(_596);
        _594 = &_595;
        _593 = &(*_594);
        _592 = move _593 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_593);
        _587 = Arguments::<'_>::new_v1(move _588, move _592) -> [return: bb277, unwind: bb498];
    }

    bb277: {
        StorageDead(_592);
        StorageDead(_588);
        _586 = format(move _587) -> [return: bb278, unwind: bb498];
    }

    bb278: {
        StorageDead(_587);
        StorageDead(_601);
        StorageDead(_598);
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_590);
        _585 = move _586;
        StorageDead(_586);
        _584 = &_585;
        _583 = &(*_584);
        _582 = <String as Deref>::deref(move _583) -> [return: bb279, unwind: bb490];
    }

    bb279: {
        _581 = &(*_582);
        StorageDead(_583);
        _580 = solana_program::log::sol_log(move _581) -> [return: bb280, unwind: bb490];
    }

    bb280: {
        StorageDead(_581);
        drop(_585) -> [return: bb281, unwind: bb498];
    }

    bb281: {
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_582);
        StorageDead(_580);
        StorageLive(_602);
        _602 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _602);
        StorageDead(_602);
        StorageDead(_576);
        StorageDead(_574);
        StorageDead(_573);
        goto -> bb475;
    }

    bb282: {
        StorageDead(_578);
        StorageDead(_577);
        goto -> bb284;
    }

    bb283: {
        StorageDead(_575);
        goto -> bb284;
    }

    bb284: {
        _573 = const ();
        StorageDead(_576);
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        _607 = &(_9.1: state::user::MarketType);
        StorageLive(_608);
        _1032 = const _;
        _608 = &(*_1032);
        _606 = <state::user::MarketType as PartialEq>::eq(move _607, move _608) -> [return: bb285, unwind: bb498];
    }

    bb285: {
        switchInt(move _606) -> [0: bb287, otherwise: bb286];
    }

    bb286: {
        StorageDead(_608);
        StorageDead(_607);
        StorageLive(_610);
        _610 = ();
        _605 = std::result::Result::<(), error::ErrorCode>::Ok(move _610);
        StorageDead(_610);
        goto -> bb295;
    }

    bb287: {
        StorageDead(_608);
        StorageDead(_607);
        StorageLive(_611);
        _611 = error::ErrorCode::InvalidOrderMarketType;
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _1031 = const _;
        _622 = &(*_1031);
        _621 = &(*_622);
        _620 = move _621 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_621);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        _630 = &_611;
        _629 = &(*_630);
        _628 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _629) -> [return: bb288, unwind: bb498];
    }

    bb288: {
        StorageDead(_629);
        _627 = [move _628];
        StorageDead(_628);
        _626 = &_627;
        _625 = &(*_626);
        _624 = move _625 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_625);
        _619 = Arguments::<'_>::new_v1(move _620, move _624) -> [return: bb289, unwind: bb498];
    }

    bb289: {
        StorageDead(_624);
        StorageDead(_620);
        _618 = format(move _619) -> [return: bb290, unwind: bb498];
    }

    bb290: {
        StorageDead(_619);
        StorageDead(_630);
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_622);
        _617 = move _618;
        StorageDead(_618);
        _616 = &_617;
        _615 = &(*_616);
        _614 = <String as Deref>::deref(move _615) -> [return: bb291, unwind: bb489];
    }

    bb291: {
        _613 = &(*_614);
        StorageDead(_615);
        _612 = solana_program::log::sol_log(move _613) -> [return: bb292, unwind: bb489];
    }

    bb292: {
        StorageDead(_613);
        drop(_617) -> [return: bb293, unwind: bb498];
    }

    bb293: {
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_614);
        StorageDead(_612);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _633 = const "must be perp order";
        _632 = &(*_633);
        _631 = solana_program::log::sol_log(move _632) -> [return: bb294, unwind: bb498];
    }

    bb294: {
        StorageDead(_632);
        StorageDead(_633);
        StorageDead(_631);
        StorageLive(_634);
        _634 = _611;
        _605 = std::result::Result::<(), error::ErrorCode>::Err(move _634);
        StorageDead(_634);
        StorageDead(_611);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_606);
        _604 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _605) -> [return: bb296, unwind: bb498];
    }

    bb296: {
        StorageDead(_605);
        _635 = discriminant(_604);
        switchInt(move _635) -> [0: bb297, 1: bb298, otherwise: bb7];
    }

    bb297: {
        StorageLive(_639);
        _639 = ((_604 as Continue).0: ());
        _603 = _639;
        StorageDead(_639);
        StorageDead(_604);
        StorageDead(_603);
        StorageLive(_640);
        _640 = const 0_u8;
        StorageLive(_641);
        StorageLive(_642);
        _642 = _640;
        StorageLive(_643);
        StorageLive(_644);
        _644 = &_10;
        _643 = PlaceOrderOptions::is_signed_msg_order(move _644) -> [return: bb300, unwind: bb498];
    }

    bb298: {
        StorageLive(_636);
        _636 = ((_604 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_638);
        _638 = _636;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _638) -> [return: bb299, unwind: bb498];
    }

    bb299: {
        StorageDead(_638);
        StorageDead(_636);
        StorageDead(_604);
        StorageDead(_603);
        goto -> bb475;
    }

    bb300: {
        StorageDead(_644);
        StorageLive(_645);
        _645 = OrderBitFlag::SignedMessage;
        _641 = math::orders::set_order_bit_flag(move _642, move _643, move _645) -> [return: bb301, unwind: bb498];
    }

    bb301: {
        StorageDead(_645);
        StorageDead(_643);
        StorageDead(_642);
        _640 = move _641;
        StorageDead(_641);
        StorageLive(_646);
        StorageLive(_647);
        _647 = (_9.7: bool);
        switchInt(move _647) -> [0: bb303, otherwise: bb302];
    }

    bb302: {
        _646 = const true;
        goto -> bb304;
    }

    bb303: {
        _646 = _219;
        goto -> bb304;
    }

    bb304: {
        StorageDead(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = _640;
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _652 = &_9;
        _651 = order_params::OrderParams::is_trigger_order(move _652) -> [return: bb305, unwind: bb498];
    }

    bb305: {
        switchInt(move _651) -> [0: bb307, otherwise: bb306];
    }

    bb306: {
        StorageDead(_652);
        _650 = _646;
        goto -> bb308;
    }

    bb307: {
        StorageDead(_652);
        _650 = const false;
        goto -> bb308;
    }

    bb308: {
        StorageDead(_651);
        StorageLive(_653);
        _653 = OrderBitFlag::NewTriggerReduceOnly;
        _648 = math::orders::set_order_bit_flag(move _649, move _650, move _653) -> [return: bb309, unwind: bb498];
    }

    bb309: {
        StorageDead(_653);
        StorageDead(_650);
        StorageDead(_649);
        _640 = move _648;
        StorageDead(_648);
        StorageLive(_654);
        StorageLive(_655);
        _655 = OrderStatus::Open;
        StorageLive(_656);
        _656 = (_9.0: state::user::OrderType);
        StorageLive(_657);
        _657 = (_9.1: state::user::MarketType);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &_10;
        StorageLive(_660);
        _660 = _12;
        _658 = PlaceOrderOptions::get_order_slot(move _659, move _660) -> [return: bb310, unwind: bb498];
    }

    bb310: {
        StorageDead(_660);
        StorageDead(_659);
        StorageLive(_661);
        StorageLive(_662);
        _662 = ((*_2).15: u32);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = _662;
        _665 = core::num::<impl u32>::checked_add(move _666, const 1_u32) -> [return: bb311, unwind: bb498];
    }

    bb311: {
        StorageDead(_666);
        StorageLive(_667);
        _667 = Option::<u32>::Some(const 1_u32);
        _664 = Option::<u32>::or(move _665, move _667) -> [return: bb312, unwind: bb498];
    }

    bb312: {
        StorageDead(_667);
        StorageDead(_665);
        _663 = Option::<u32>::unwrap(move _664) -> [return: bb313, unwind: bb498];
    }

    bb313: {
        StorageDead(_664);
        ((*_2).15: u32) = move _663;
        StorageDead(_663);
        _661 = _662;
        StorageDead(_662);
        StorageLive(_668);
        _668 = (_9.3: u8);
        StorageLive(_669);
        _669 = (_9.6: u16);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        _673 = (_9.5: u64);
        StorageLive(_674);
        _674 = (_9.2: controller::position::PositionDirection);
        StorageLive(_675);
        _675 = (_9.8: state::order_params::PostOnlyParam);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _679 = &(*_207);
        _678 = <Ref<'_, PerpMarket> as Deref>::deref(move _679) -> [return: bb314, unwind: bb498];
    }

    bb314: {
        StorageDead(_679);
        _677 = &((*_678).1: state::perp_market::AMM);
        _676 = &(*_677);
        _672 = math::orders::get_price_for_perp_order(move _673, move _674, move _675, move _676) -> [return: bb315, unwind: bb498];
    }

    bb315: {
        StorageDead(_676);
        StorageDead(_675);
        StorageDead(_674);
        StorageDead(_673);
        _671 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _672) -> [return: bb316, unwind: bb498];
    }

    bb316: {
        StorageDead(_672);
        _680 = discriminant(_671);
        switchInt(move _680) -> [0: bb317, 1: bb318, otherwise: bb7];
    }

    bb317: {
        StorageLive(_684);
        _684 = ((_671 as Continue).0: u64);
        _670 = _684;
        StorageDead(_684);
        StorageLive(_685);
        _685 = _380;
        StorageLive(_686);
        _686 = _381;
        StorageLive(_687);
        _687 = (_9.2: controller::position::PositionDirection);
        StorageLive(_688);
        _688 = _646;
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        _693 = (_9.11: std::option::Option<u64>);
        _692 = Option::<u64>::unwrap_or(move _693, const 0_u64) -> [return: bb320, unwind: bb498];
    }

    bb318: {
        StorageLive(_681);
        _681 = ((_671 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_683);
        _683 = _681;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _683) -> [return: bb319, unwind: bb498];
    }

    bb319: {
        StorageDead(_683);
        StorageDead(_681);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_661);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_655);
        goto -> bb470;
    }

    bb320: {
        StorageDead(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        _696 = &(*_207);
        _695 = <Ref<'_, PerpMarket> as Deref>::deref(move _696) -> [return: bb321, unwind: bb498];
    }

    bb321: {
        StorageDead(_696);
        _694 = (((*_695).1: state::perp_market::AMM).53: u64);
        StorageLive(_697);
        _697 = (_9.2: controller::position::PositionDirection);
        _691 = math::orders::standardize_price(move _692, move _694, move _697) -> [return: bb322, unwind: bb498];
    }

    bb322: {
        StorageDead(_697);
        StorageDead(_694);
        StorageDead(_692);
        _690 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _691) -> [return: bb323, unwind: bb498];
    }

    bb323: {
        StorageDead(_691);
        _698 = discriminant(_690);
        switchInt(move _698) -> [0: bb324, 1: bb325, otherwise: bb7];
    }

    bb324: {
        StorageLive(_702);
        _702 = ((_690 as Continue).0: u64);
        _689 = _702;
        StorageDead(_702);
        StorageLive(_703);
        _703 = (_9.12: state::user::OrderTriggerCondition);
        StorageLive(_704);
        StorageLive(_705);
        _705 = &(_9.8: state::order_params::PostOnlyParam);
        StorageLive(_706);
        _1030 = const _;
        _706 = &(*_1030);
        _704 = <PostOnlyParam as PartialEq>::ne(move _705, move _706) -> [return: bb327, unwind: bb498];
    }

    bb325: {
        StorageLive(_699);
        _699 = ((_690 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_701);
        _701 = _699;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _701) -> [return: bb326, unwind: bb498];
    }

    bb326: {
        StorageDead(_701);
        StorageDead(_699);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_685);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_661);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_695);
        StorageDead(_690);
        goto -> bb470;
    }

    bb327: {
        StorageDead(_706);
        StorageDead(_705);
        StorageLive(_708);
        StorageLive(_709);
        _709 = (_9.13: std::option::Option<i32>);
        _708 = Option::<i32>::unwrap_or(move _709, const 0_i32) -> [return: bb328, unwind: bb498];
    }

    bb328: {
        StorageDead(_709);
        StorageLive(_710);
        StorageLive(_711);
        _711 = &_9;
        _710 = order_params::OrderParams::is_immediate_or_cancel(move _711) -> [return: bb329, unwind: bb498];
    }

    bb329: {
        StorageDead(_711);
        StorageLive(_712);
        _712 = _517;
        StorageLive(_713);
        _713 = _518;
        StorageLive(_714);
        _714 = _519;
        StorageLive(_715);
        _715 = _535;
        StorageLive(_716);
        StorageLive(_717);
        _717 = _12;
        _716 = math::orders::get_posted_slot_from_clock_slot(move _717) -> [return: bb330, unwind: bb498];
    }

    bb330: {
        StorageDead(_717);
        StorageLive(_718);
        _718 = _640;
        StorageLive(_719);
        _719 = [const 0_u8; 1];
        _654 = Order { slot: move _658, price: move _670, base_asset_amount: move _686, base_asset_amount_filled: const 0_u64, quote_asset_amount_filled: const 0_u64, trigger_price: move _689, auction_start_price: move _712, auction_end_price: move _713, max_ts: move _715, oracle_price_offset: move _708, order_id: move _661, market_index: move _669, status: move _655, order_type: move _656, market_type: move _657, user_order_id: move _668, existing_position_direction: move _685, direction: move _687, reduce_only: move _688, post_only: move _704, immediate_or_cancel: move _710, trigger_condition: move _703, auction_duration: move _714, posted_slot_tail: move _716, bit_flags: move _718, padding: move _719 };
        StorageDead(_719);
        StorageDead(_718);
        StorageDead(_716);
        StorageDead(_715);
        StorageDead(_714);
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_704);
        StorageDead(_703);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_685);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_661);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_695);
        StorageDead(_690);
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_671);
        StorageLive(_720);
        StorageLive(_721);
        _721 = ((*_484).0: i64);
        _720 = Option::<i64>::Some(move _721);
        StorageDead(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = &_654;
        _724 = &(*_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        _728 = &(*_207);
        _727 = <Ref<'_, PerpMarket> as Deref>::deref(move _728) -> [return: bb331, unwind: bb498];
    }

    bb331: {
        _726 = &(*_727);
        StorageDead(_728);
        StorageLive(_729);
        _729 = _720;
        StorageLive(_730);
        _730 = _12;
        _723 = validate_order(move _724, move _726, move _729, move _730) -> [return: bb332, unwind: bb498];
    }

    bb332: {
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_726);
        StorageDead(_724);
        _732 = discriminant(_723);
        switchInt(move _732) -> [0: bb335, 1: bb333, otherwise: bb7];
    }

    bb333: {
        _731 = discriminant(((_723 as Err).0: error::ErrorCode));
        switchInt(move _731) -> [57: bb336, otherwise: bb334];
    }

    bb334: {
        StorageLive(_741);
        _741 = ((_723 as Err).0: error::ErrorCode);
        StorageLive(_743);
        _743 = _741;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _743);
        StorageDead(_743);
        StorageDead(_741);
        goto -> bb468;
    }

    bb335: {
        _722 = const ();
        StorageDead(_727);
        StorageDead(_725);
        StorageDead(_723);
        StorageDead(_722);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        _748 = &_654;
        _747 = &(*_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = _365;
        _751 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _752 = Lt(_750, _751);
        assert(move _752, "index out of bounds: the length is {} but the index is {}", move _751, _750) -> [success: bb340, unwind: bb498];
    }

    bb336: {
        StorageLive(_735);
        StorageLive(_736);
        _736 = &(_9.8: state::order_params::PostOnlyParam);
        StorageLive(_737);
        _1027 = const _;
        _737 = &(*_1027);
        _735 = <PostOnlyParam as PartialEq>::eq(move _736, move _737) -> [return: bb337, unwind: bb498];
    }

    bb337: {
        switchInt(move _735) -> [0: bb339, otherwise: bb338];
    }

    bb338: {
        StorageDead(_737);
        StorageDead(_736);
        StorageDead(_735);
        StorageLive(_740);
        _740 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _740);
        StorageDead(_740);
        goto -> bb468;
    }

    bb339: {
        StorageDead(_737);
        StorageDead(_736);
        StorageDead(_735);
        goto -> bb334;
    }

    bb340: {
        _749 = (((*_2).4: [state::user::PerpPosition; 8])[_750].1: i64);
        StorageLive(_753);
        StorageLive(_754);
        _754 = _365;
        _755 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _756 = Lt(_754, _755);
        assert(move _756, "index out of bounds: the length is {} but the index is {}", move _755, _754) -> [success: bb341, unwind: bb498];
    }

    bb341: {
        _753 = (((*_2).4: [state::user::PerpPosition; 8])[_754].5: i64);
        StorageLive(_757);
        StorageLive(_758);
        _758 = _365;
        _759 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _760 = Lt(_758, _759);
        assert(move _760, "index out of bounds: the length is {} but the index is {}", move _759, _758) -> [success: bb342, unwind: bb498];
    }

    bb342: {
        _757 = (((*_2).4: [state::user::PerpPosition; 8])[_758].6: i64);
        _746 = math::orders::is_new_order_risk_increasing(move _747, move _749, move _753, move _757) -> [return: bb343, unwind: bb498];
    }

    bb343: {
        StorageDead(_757);
        StorageDead(_753);
        StorageDead(_749);
        StorageDead(_747);
        _745 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _746) -> [return: bb344, unwind: bb498];
    }

    bb344: {
        StorageDead(_746);
        _761 = discriminant(_745);
        switchInt(move _761) -> [0: bb345, 1: bb346, otherwise: bb7];
    }

    bb345: {
        StorageLive(_765);
        _765 = ((_745 as Continue).0: bool);
        _744 = _765;
        StorageDead(_765);
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_750);
        StorageDead(_748);
        StorageDead(_745);
        StorageLive(_766);
        StorageLive(_767);
        _767 = &mut (*_2);
        StorageLive(_768);
        StorageLive(_769);
        _769 = &_654;
        _768 = Order::has_auction(move _769) -> [return: bb348, unwind: bb498];
    }

    bb346: {
        StorageLive(_762);
        _762 = ((_745 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_764);
        _764 = _762;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _764) -> [return: bb347, unwind: bb498];
    }

    bb347: {
        StorageDead(_764);
        StorageDead(_762);
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_750);
        StorageDead(_748);
        StorageDead(_745);
        goto -> bb467;
    }

    bb348: {
        StorageDead(_769);
        _766 = User::increment_open_orders(move _767, move _768) -> [return: bb349, unwind: bb498];
    }

    bb349: {
        StorageDead(_768);
        StorageDead(_767);
        StorageDead(_766);
        StorageLive(_770);
        _770 = _654;
        StorageLive(_771);
        _771 = _158;
        _772 = Len(((*_2).5: [state::user::Order; 32]));
        _773 = Lt(_771, _772);
        assert(move _773, "index out of bounds: the length is {} but the index is {}", move _772, _771) -> [success: bb350, unwind: bb498];
    }

    bb350: {
        ((*_2).5: [state::user::Order; 32])[_771] = move _770;
        StorageDead(_770);
        StorageDead(_771);
        StorageLive(_774);
        _774 = _365;
        _775 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _776 = Lt(_774, _775);
        assert(move _776, "index out of bounds: the length is {} but the index is {}", move _775, _774) -> [success: bb351, unwind: bb498];
    }

    bb351: {
        _777 = CheckedAdd((((*_2).4: [state::user::PerpPosition; 8])[_774].14: u8), const 1_u8);
        assert(!move (_777.1: bool), "attempt to compute `{} + {}`, which would overflow", (((*_2).4: [state::user::PerpPosition; 8])[_774].14: u8), const 1_u8) -> [success: bb352, unwind: bb498];
    }

    bb352: {
        (((*_2).4: [state::user::PerpPosition; 8])[_774].14: u8) = move (_777.0: u8);
        StorageDead(_774);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        _783 = _365;
        _784 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _785 = Lt(_783, _784);
        assert(move _785, "index out of bounds: the length is {} but the index is {}", move _784, _783) -> [success: bb353, unwind: bb498];
    }

    bb353: {
        _782 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_783];
        _781 = &mut (*_782);
        StorageLive(_786);
        StorageLive(_787);
        _787 = &(_9.2: controller::position::PositionDirection);
        _786 = &(*_787);
        StorageLive(_788);
        _788 = _381;
        StorageLive(_789);
        StorageLive(_790);
        _790 = &_654;
        _789 = Order::update_open_bids_and_asks(move _790) -> [return: bb354, unwind: bb498];
    }

    bb354: {
        StorageDead(_790);
        _780 = increase_open_bids_and_asks(move _781, move _786, move _788, move _789) -> [return: bb355, unwind: bb498];
    }

    bb355: {
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_786);
        StorageDead(_781);
        _779 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _780) -> [return: bb356, unwind: bb498];
    }

    bb356: {
        StorageDead(_780);
        _791 = discriminant(_779);
        switchInt(move _791) -> [0: bb357, 1: bb358, otherwise: bb7];
    }

    bb357: {
        StorageLive(_795);
        _795 = ((_779 as Continue).0: ());
        _778 = _795;
        StorageDead(_795);
        StorageDead(_787);
        StorageDead(_783);
        StorageDead(_782);
        StorageDead(_779);
        StorageDead(_778);
        StorageLive(_796);
        StorageLive(_797);
        _797 = &mut _10;
        StorageLive(_798);
        _798 = _744;
        _796 = PlaceOrderOptions::update_risk_increasing(move _797, move _798) -> [return: bb360, unwind: bb498];
    }

    bb358: {
        StorageLive(_792);
        _792 = ((_779 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_794);
        _794 = _792;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _794) -> [return: bb359, unwind: bb498];
    }

    bb359: {
        StorageDead(_794);
        StorageDead(_792);
        StorageDead(_787);
        StorageDead(_783);
        StorageDead(_782);
        StorageDead(_779);
        StorageDead(_778);
        goto -> bb467;
    }

    bb360: {
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_796);
        StorageLive(_799);
        StorageLive(_800);
        _800 = (_10.2: bool);
        switchInt(move _800) -> [0: bb370, otherwise: bb361];
    }

    bb361: {
        StorageLive(_801);
        StorageLive(_802);
        _802 = &_10;
        _801 = PlaceOrderOptions::is_liquidation(move _802) -> [return: bb362, unwind: bb498];
    }

    bb362: {
        switchInt(move _801) -> [0: bb364, otherwise: bb363];
    }

    bb363: {
        StorageDead(_802);
        goto -> bb370;
    }

    bb364: {
        StorageDead(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        _806 = &(*_2);
        StorageLive(_807);
        _807 = &(*_4);
        StorageLive(_808);
        _808 = &(*_5);
        StorageLive(_809);
        _809 = &mut (*_6);
        StorageLive(_810);
        _810 = (_10.3: bool);
        _805 = math::margin::meets_place_order_margin_requirement(move _806, move _807, move _808, move _809, move _810) -> [return: bb365, unwind: bb498];
    }

    bb365: {
        StorageDead(_810);
        StorageDead(_809);
        StorageDead(_808);
        StorageDead(_807);
        StorageDead(_806);
        _804 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _805) -> [return: bb366, unwind: bb498];
    }

    bb366: {
        StorageDead(_805);
        _811 = discriminant(_804);
        switchInt(move _811) -> [0: bb367, 1: bb368, otherwise: bb7];
    }

    bb367: {
        StorageLive(_815);
        _815 = ((_804 as Continue).0: ());
        _803 = _815;
        StorageDead(_815);
        StorageDead(_804);
        StorageDead(_803);
        _799 = const ();
        goto -> bb371;
    }

    bb368: {
        StorageLive(_812);
        _812 = ((_804 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_814);
        _814 = _812;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _814) -> [return: bb369, unwind: bb498];
    }

    bb369: {
        StorageDead(_814);
        StorageDead(_812);
        StorageDead(_804);
        StorageDead(_803);
        StorageDead(_801);
        StorageDead(_800);
        StorageDead(_799);
        goto -> bb467;
    }

    bb370: {
        _799 = const ();
        goto -> bb371;
    }

    bb371: {
        StorageDead(_801);
        StorageDead(_800);
        StorageDead(_799);
        StorageLive(_816);
        StorageLive(_817);
        _817 = _219;
        switchInt(move _817) -> [0: bb380, otherwise: bb372];
    }

    bb372: {
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        _823 = _158;
        _824 = Len(((*_2).5: [state::user::Order; 32]));
        _825 = Lt(_823, _824);
        assert(move _825, "index out of bounds: the length is {} but the index is {}", move _824, _823) -> [success: bb373, unwind: bb498];
    }

    bb373: {
        _822 = &((*_2).5: [state::user::Order; 32])[_823];
        _821 = &(*_822);
        StorageLive(_826);
        StorageLive(_827);
        _827 = _365;
        _828 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _829 = Lt(_827, _828);
        assert(move _829, "index out of bounds: the length is {} but the index is {}", move _828, _827) -> [success: bb374, unwind: bb498];
    }

    bb374: {
        _826 = (((*_2).4: [state::user::PerpPosition; 8])[_827].1: i64);
        _820 = validate_order_for_force_reduce_only(move _821, move _826) -> [return: bb375, unwind: bb498];
    }

    bb375: {
        StorageDead(_826);
        StorageDead(_821);
        _819 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _820) -> [return: bb376, unwind: bb498];
    }

    bb376: {
        StorageDead(_820);
        _830 = discriminant(_819);
        switchInt(move _830) -> [0: bb377, 1: bb378, otherwise: bb7];
    }

    bb377: {
        StorageLive(_834);
        _834 = ((_819 as Continue).0: ());
        _818 = _834;
        StorageDead(_834);
        StorageDead(_827);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_819);
        StorageDead(_818);
        _816 = const ();
        goto -> bb381;
    }

    bb378: {
        StorageLive(_831);
        _831 = ((_819 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_833);
        _833 = _831;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _833) -> [return: bb379, unwind: bb498];
    }

    bb379: {
        StorageDead(_833);
        StorageDead(_831);
        StorageDead(_827);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_819);
        StorageDead(_818);
        StorageDead(_817);
        StorageDead(_816);
        goto -> bb467;
    }

    bb380: {
        _816 = const ();
        goto -> bb381;
    }

    bb381: {
        StorageDead(_817);
        StorageDead(_816);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        _837 = &(*_207);
        _836 = <Ref<'_, PerpMarket> as Deref>::deref(move _837) -> [return: bb382, unwind: bb498];
    }

    bb382: {
        StorageDead(_837);
        _835 = (((*_836).1: state::perp_market::AMM).17: u128);
        StorageDead(_836);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        _840 = _835;
        _839 = Ne(move _840, const 0_u128);
        switchInt(move _839) -> [0: bb432, otherwise: bb383];
    }

    bb383: {
        StorageDead(_840);
        StorageLive(_841);
        _841 = _744;
        switchInt(move _841) -> [0: bb433, otherwise: bb384];
    }

    bb384: {
        StorageLive(_842);
        _843 = discriminant((_9.2: controller::position::PositionDirection));
        switchInt(move _843) -> [0: bb386, 1: bb385, otherwise: bb7];
    }

    bb385: {
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        _869 = &(*_207);
        _868 = <Ref<'_, PerpMarket> as Deref>::deref(move _869) -> [return: bb399, unwind: bb498];
    }

    bb386: {
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        _849 = &(*_207);
        _848 = <Ref<'_, PerpMarket> as Deref>::deref(move _849) -> [return: bb387, unwind: bb498];
    }

    bb387: {
        StorageDead(_849);
        _847 = (((*_848).1: state::perp_market::AMM).13: i128);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        _853 = _381;
        _852 = <u64 as Cast>::cast::<i128>(move _853) -> [return: bb388, unwind: bb498];
    }

    bb388: {
        StorageDead(_853);
        _851 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _852) -> [return: bb389, unwind: bb498];
    }

    bb389: {
        StorageDead(_852);
        _854 = discriminant(_851);
        switchInt(move _854) -> [0: bb390, 1: bb391, otherwise: bb7];
    }

    bb390: {
        StorageLive(_858);
        _858 = ((_851 as Continue).0: i128);
        _850 = _858;
        StorageDead(_858);
        _846 = <i128 as SafeMath>::safe_add(move _847, move _850) -> [return: bb393, unwind: bb498];
    }

    bb391: {
        StorageLive(_855);
        _855 = ((_851 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_857);
        _857 = _855;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _857) -> [return: bb392, unwind: bb498];
    }

    bb392: {
        StorageDead(_857);
        StorageDead(_855);
        StorageDead(_850);
        StorageDead(_847);
        StorageDead(_846);
        goto -> bb464;
    }

    bb393: {
        StorageDead(_850);
        StorageDead(_847);
        _845 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _846) -> [return: bb394, unwind: bb498];
    }

    bb394: {
        StorageDead(_846);
        _859 = discriminant(_845);
        switchInt(move _859) -> [0: bb395, 1: bb396, otherwise: bb7];
    }

    bb395: {
        StorageLive(_863);
        _863 = ((_845 as Continue).0: i128);
        _844 = _863;
        StorageDead(_863);
        _842 = core::num::<impl i128>::unsigned_abs(move _844) -> [return: bb398, unwind: bb498];
    }

    bb396: {
        StorageLive(_860);
        _860 = ((_845 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_862);
        _862 = _860;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _862) -> [return: bb397, unwind: bb498];
    }

    bb397: {
        StorageDead(_862);
        StorageDead(_860);
        goto -> bb464;
    }

    bb398: {
        StorageDead(_851);
        StorageDead(_848);
        StorageDead(_845);
        StorageDead(_844);
        goto -> bb411;
    }

    bb399: {
        StorageDead(_869);
        _867 = (((*_868).1: state::perp_market::AMM).14: i128);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = _381;
        _872 = <u64 as Cast>::cast::<i128>(move _873) -> [return: bb400, unwind: bb498];
    }

    bb400: {
        StorageDead(_873);
        _871 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _872) -> [return: bb401, unwind: bb498];
    }

    bb401: {
        StorageDead(_872);
        _874 = discriminant(_871);
        switchInt(move _874) -> [0: bb402, 1: bb403, otherwise: bb7];
    }

    bb402: {
        StorageLive(_878);
        _878 = ((_871 as Continue).0: i128);
        _870 = _878;
        StorageDead(_878);
        _866 = <i128 as SafeMath>::safe_sub(move _867, move _870) -> [return: bb405, unwind: bb498];
    }

    bb403: {
        StorageLive(_875);
        _875 = ((_871 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_877);
        _877 = _875;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _877) -> [return: bb404, unwind: bb498];
    }

    bb404: {
        StorageDead(_877);
        StorageDead(_875);
        StorageDead(_870);
        StorageDead(_867);
        StorageDead(_866);
        goto -> bb463;
    }

    bb405: {
        StorageDead(_870);
        StorageDead(_867);
        _865 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _866) -> [return: bb406, unwind: bb498];
    }

    bb406: {
        StorageDead(_866);
        _879 = discriminant(_865);
        switchInt(move _879) -> [0: bb407, 1: bb408, otherwise: bb7];
    }

    bb407: {
        StorageLive(_883);
        _883 = ((_865 as Continue).0: i128);
        _864 = _883;
        StorageDead(_883);
        _842 = core::num::<impl i128>::unsigned_abs(move _864) -> [return: bb410, unwind: bb498];
    }

    bb408: {
        StorageLive(_880);
        _880 = ((_865 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_882);
        _882 = _880;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _882) -> [return: bb409, unwind: bb498];
    }

    bb409: {
        StorageDead(_882);
        StorageDead(_880);
        goto -> bb463;
    }

    bb410: {
        StorageDead(_871);
        StorageDead(_868);
        StorageDead(_865);
        StorageDead(_864);
        goto -> bb411;
    }

    bb411: {
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        _888 = _842;
        StorageLive(_889);
        _889 = _835;
        _887 = Le(move _888, move _889);
        switchInt(move _887) -> [0: bb413, otherwise: bb412];
    }

    bb412: {
        StorageDead(_889);
        StorageDead(_888);
        StorageLive(_890);
        _890 = ();
        _886 = std::result::Result::<(), error::ErrorCode>::Ok(move _890);
        StorageDead(_890);
        goto -> bb427;
    }

    bb413: {
        StorageDead(_889);
        StorageDead(_888);
        StorageLive(_891);
        _891 = error::ErrorCode::MaxOpenInterest;
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        _1029 = const _;
        _902 = &(*_1029);
        _901 = &(*_902);
        _900 = move _901 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_901);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        _910 = &_891;
        _909 = &(*_910);
        _908 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _909) -> [return: bb414, unwind: bb498];
    }

    bb414: {
        StorageDead(_909);
        _907 = [move _908];
        StorageDead(_908);
        _906 = &_907;
        _905 = &(*_906);
        _904 = move _905 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_905);
        _899 = Arguments::<'_>::new_v1(move _900, move _904) -> [return: bb415, unwind: bb498];
    }

    bb415: {
        StorageDead(_904);
        StorageDead(_900);
        _898 = format(move _899) -> [return: bb416, unwind: bb498];
    }

    bb416: {
        StorageDead(_899);
        StorageDead(_910);
        StorageDead(_907);
        StorageDead(_906);
        StorageDead(_902);
        _897 = move _898;
        StorageDead(_898);
        _896 = &_897;
        _895 = &(*_896);
        _894 = <String as Deref>::deref(move _895) -> [return: bb417, unwind: bb488];
    }

    bb417: {
        _893 = &(*_894);
        StorageDead(_895);
        _892 = solana_program::log::sol_log(move _893) -> [return: bb418, unwind: bb488];
    }

    bb418: {
        StorageDead(_893);
        drop(_897) -> [return: bb419, unwind: bb498];
    }

    bb419: {
        StorageDead(_897);
        StorageDead(_896);
        StorageDead(_894);
        StorageDead(_892);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        _1028 = const _;
        _921 = &(*_1028);
        _920 = &(*_921);
        _919 = move _920 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_920);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        _929 = &_381;
        _928 = &(*_929);
        _927 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _928) -> [return: bb420, unwind: bb498];
    }

    bb420: {
        StorageDead(_928);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        _932 = &(_9.6: u16);
        _931 = &(*_932);
        _930 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _931) -> [return: bb421, unwind: bb498];
    }

    bb421: {
        StorageDead(_931);
        _926 = [move _927, move _930];
        StorageDead(_930);
        StorageDead(_927);
        _925 = &_926;
        _924 = &(*_925);
        _923 = move _924 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_924);
        _918 = Arguments::<'_>::new_v1(move _919, move _923) -> [return: bb422, unwind: bb498];
    }

    bb422: {
        StorageDead(_923);
        StorageDead(_919);
        _917 = format(move _918) -> [return: bb423, unwind: bb498];
    }

    bb423: {
        StorageDead(_918);
        StorageDead(_932);
        StorageDead(_929);
        StorageDead(_926);
        StorageDead(_925);
        StorageDead(_921);
        _916 = move _917;
        StorageDead(_917);
        _915 = &_916;
        _914 = &(*_915);
        _913 = <String as Deref>::deref(move _914) -> [return: bb424, unwind: bb487];
    }

    bb424: {
        _912 = &(*_913);
        StorageDead(_914);
        _911 = solana_program::log::sol_log(move _912) -> [return: bb425, unwind: bb487];
    }

    bb425: {
        StorageDead(_912);
        drop(_916) -> [return: bb426, unwind: bb498];
    }

    bb426: {
        StorageDead(_916);
        StorageDead(_915);
        StorageDead(_913);
        StorageDead(_911);
        StorageLive(_933);
        _933 = _891;
        _886 = std::result::Result::<(), error::ErrorCode>::Err(move _933);
        StorageDead(_933);
        StorageDead(_891);
        goto -> bb427;
    }

    bb427: {
        StorageDead(_887);
        _885 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _886) -> [return: bb428, unwind: bb498];
    }

    bb428: {
        StorageDead(_886);
        _934 = discriminant(_885);
        switchInt(move _934) -> [0: bb429, 1: bb430, otherwise: bb7];
    }

    bb429: {
        StorageLive(_938);
        _938 = ((_885 as Continue).0: ());
        _884 = _938;
        StorageDead(_938);
        StorageDead(_885);
        StorageDead(_884);
        _838 = const ();
        StorageDead(_842);
        goto -> bb434;
    }

    bb430: {
        StorageLive(_935);
        _935 = ((_885 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_937);
        _937 = _935;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _937) -> [return: bb431, unwind: bb498];
    }

    bb431: {
        StorageDead(_937);
        StorageDead(_935);
        StorageDead(_885);
        StorageDead(_884);
        goto -> bb465;
    }

    bb432: {
        StorageDead(_840);
        goto -> bb433;
    }

    bb433: {
        _838 = const ();
        goto -> bb434;
    }

    bb434: {
        StorageDead(_841);
        StorageDead(_839);
        StorageDead(_838);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        _945 = &_3;
        _944 = &(*_945);
        StorageLive(_946);
        StorageLive(_947);
        _947 = &_654;
        _946 = &(*_947);
        _943 = get_taker_and_maker_for_order_record(move _944, move _946) -> [return: bb435, unwind: bb498];
    }

    bb435: {
        StorageDead(_946);
        StorageDead(_944);
        StorageLive(_939);
        _939 = (_943.0: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_940);
        _940 = (_943.1: std::option::Option<state::user::Order>);
        StorageLive(_941);
        _941 = (_943.2: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_942);
        _942 = (_943.3: std::option::Option<state::user::Order>);
        StorageDead(_947);
        StorageDead(_945);
        StorageDead(_943);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        _951 = _11;
        StorageLive(_952);
        _952 = OrderAction::Place;
        StorageLive(_953);
        _953 = (_10.4: state::events::OrderActionExplanation);
        StorageLive(_954);
        _954 = _206;
        StorageLive(_955);
        _955 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_956);
        _956 = Option::<u64>::None;
        StorageLive(_957);
        _957 = Option::<u64>::None;
        StorageLive(_958);
        _958 = Option::<u64>::None;
        StorageLive(_959);
        _959 = Option::<u64>::None;
        StorageLive(_960);
        _960 = Option::<u64>::None;
        StorageLive(_961);
        _961 = Option::<u64>::None;
        StorageLive(_962);
        _962 = Option::<u64>::None;
        StorageLive(_963);
        _963 = Option::<i64>::None;
        StorageLive(_964);
        _964 = Option::<u64>::None;
        StorageLive(_965);
        _965 = _939;
        StorageLive(_966);
        _966 = _940;
        StorageLive(_967);
        _967 = _941;
        StorageLive(_968);
        _968 = _942;
        StorageLive(_969);
        StorageLive(_970);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        _973 = &mut (*_6);
        StorageLive(_974);
        StorageLive(_975);
        StorageLive(_976);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        _979 = &(*_207);
        _978 = <Ref<'_, PerpMarket> as Deref>::deref(move _979) -> [return: bb436, unwind: bb498];
    }

    bb436: {
        _977 = &(*_978);
        StorageDead(_979);
        _976 = PerpMarket::oracle_id(move _977) -> [return: bb437, unwind: bb498];
    }

    bb437: {
        StorageDead(_977);
        _975 = &_976;
        _974 = &(*_975);
        _972 = OracleMap::<'_>::get_price_data(move _973, move _974) -> [return: bb438, unwind: bb498];
    }

    bb438: {
        StorageDead(_974);
        StorageDead(_973);
        _971 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _972) -> [return: bb439, unwind: bb498];
    }

    bb439: {
        StorageDead(_972);
        _980 = discriminant(_971);
        switchInt(move _980) -> [0: bb440, 1: bb441, otherwise: bb7];
    }

    bb440: {
        StorageLive(_984);
        _984 = ((_971 as Continue).0: &state::oracle::OraclePriceData);
        _970 = _984;
        StorageDead(_984);
        _969 = ((*_970).0: i64);
        StorageLive(_985);
        _985 = _640;
        StorageLive(_986);
        _986 = Option::<u64>::None;
        StorageLive(_987);
        _987 = Option::<u64>::None;
        StorageLive(_988);
        _988 = Option::<u64>::None;
        StorageLive(_989);
        _989 = Option::<u64>::None;
        StorageLive(_990);
        _990 = Option::<u64>::None;
        _950 = get_order_action_record(move _951, move _952, move _953, move _954, move _955, move _956, move _957, move _958, move _959, move _960, move _961, move _962, move _963, move _964, move _965, move _966, move _967, move _968, move _969, move _985, move _986, move _987, move _988, move _989, move _990) -> [return: bb443, unwind: bb498];
    }

    bb441: {
        StorageLive(_981);
        _981 = ((_971 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_983);
        _983 = _981;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _983) -> [return: bb442, unwind: bb498];
    }

    bb442: {
        StorageDead(_983);
        StorageDead(_981);
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_961);
        StorageDead(_960);
        StorageDead(_959);
        StorageDead(_958);
        StorageDead(_957);
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_954);
        StorageDead(_953);
        StorageDead(_952);
        StorageDead(_951);
        StorageDead(_950);
        goto -> bb461;
    }

    bb443: {
        StorageDead(_990);
        StorageDead(_989);
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_986);
        StorageDead(_985);
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_961);
        StorageDead(_960);
        StorageDead(_959);
        StorageDead(_958);
        StorageDead(_957);
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_954);
        StorageDead(_953);
        StorageDead(_952);
        StorageDead(_951);
        _949 = <std::result::Result<OrderActionRecord, error::ErrorCode> as Try>::branch(move _950) -> [return: bb444, unwind: bb498];
    }

    bb444: {
        StorageDead(_950);
        _991 = discriminant(_949);
        switchInt(move _991) -> [0: bb445, 1: bb446, otherwise: bb7];
    }

    bb445: {
        StorageLive(_995);
        _995 = move ((_949 as Continue).0: state::events::OrderActionRecord);
        _948 = move _995;
        StorageDead(_995);
        StorageDead(_978);
        StorageDead(_976);
        StorageDead(_975);
        StorageDead(_971);
        StorageDead(_970);
        StorageDead(_949);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        _999 = move _948;
        _998 = emit_stack::<OrderActionRecord, 464>(move _999) -> [return: bb448, unwind: bb498];
    }

    bb446: {
        StorageLive(_992);
        _992 = ((_949 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_994);
        _994 = _992;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _994) -> [return: bb447, unwind: bb498];
    }

    bb447: {
        StorageDead(_994);
        StorageDead(_992);
        goto -> bb461;
    }

    bb448: {
        StorageDead(_999);
        _997 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _998) -> [return: bb449, unwind: bb498];
    }

    bb449: {
        StorageDead(_998);
        _1000 = discriminant(_997);
        switchInt(move _1000) -> [0: bb450, 1: bb451, otherwise: bb7];
    }

    bb450: {
        StorageLive(_1004);
        _1004 = ((_997 as Continue).0: ());
        _996 = _1004;
        StorageDead(_1004);
        StorageDead(_997);
        StorageDead(_996);
        StorageLive(_1005);
        StorageLive(_1006);
        _1006 = _11;
        StorageLive(_1007);
        _1007 = _3;
        StorageLive(_1008);
        StorageLive(_1009);
        _1009 = _158;
        _1010 = Len(((*_2).5: [state::user::Order; 32]));
        _1011 = Lt(_1009, _1010);
        assert(move _1011, "index out of bounds: the length is {} but the index is {}", move _1010, _1009) -> [success: bb453, unwind: bb498];
    }

    bb451: {
        StorageLive(_1001);
        _1001 = ((_997 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1003);
        _1003 = _1001;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1003) -> [return: bb452, unwind: bb498];
    }

    bb452: {
        StorageDead(_1003);
        StorageDead(_1001);
        StorageDead(_997);
        StorageDead(_996);
        goto -> bb462;
    }

    bb453: {
        _1008 = ((*_2).5: [state::user::Order; 32])[_1009];
        _1005 = OrderRecord { ts: move _1006, user: move _1007, order: move _1008 };
        StorageDead(_1008);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1009);
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        _1015 = move _1005;
        _1014 = emit_stack::<OrderRecord, 192>(move _1015) -> [return: bb454, unwind: bb498];
    }

    bb454: {
        StorageDead(_1015);
        _1013 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1014) -> [return: bb455, unwind: bb498];
    }

    bb455: {
        StorageDead(_1014);
        _1016 = discriminant(_1013);
        switchInt(move _1016) -> [0: bb456, 1: bb457, otherwise: bb7];
    }

    bb456: {
        StorageLive(_1020);
        _1020 = ((_1013 as Continue).0: ());
        _1012 = _1020;
        StorageDead(_1020);
        StorageDead(_1013);
        StorageDead(_1012);
        StorageLive(_1021);
        StorageLive(_1022);
        _1022 = &mut (*_2);
        StorageLive(_1023);
        _1023 = _12;
        _1021 = User::update_last_active_slot(move _1022, move _1023) -> [return: bb459, unwind: bb498];
    }

    bb457: {
        StorageLive(_1017);
        _1017 = ((_1013 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1019);
        _1019 = _1017;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1019) -> [return: bb458, unwind: bb498];
    }

    bb458: {
        StorageDead(_1019);
        StorageDead(_1017);
        StorageDead(_1013);
        StorageDead(_1012);
        StorageDead(_1005);
        goto -> bb462;
    }

    bb459: {
        StorageDead(_1023);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageLive(_1024);
        _1024 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1024);
        StorageDead(_1024);
        StorageDead(_1005);
        StorageDead(_948);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_939);
        StorageDead(_835);
        StorageDead(_744);
        StorageDead(_720);
        StorageDead(_654);
        StorageDead(_646);
        StorageDead(_640);
        StorageDead(_535);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_484);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_365);
        StorageDead(_219);
        drop(_208) -> [return: bb460, unwind: bb503];
    }

    bb460: {
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_158);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb486;
    }

    bb461: {
        StorageDead(_978);
        StorageDead(_976);
        StorageDead(_975);
        StorageDead(_971);
        StorageDead(_970);
        StorageDead(_949);
        goto -> bb462;
    }

    bb462: {
        StorageDead(_948);
        StorageDead(_942);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_939);
        goto -> bb466;
    }

    bb463: {
        StorageDead(_871);
        StorageDead(_868);
        StorageDead(_865);
        StorageDead(_864);
        goto -> bb465;
    }

    bb464: {
        StorageDead(_851);
        StorageDead(_848);
        StorageDead(_845);
        StorageDead(_844);
        goto -> bb465;
    }

    bb465: {
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_839);
        StorageDead(_838);
        goto -> bb466;
    }

    bb466: {
        StorageDead(_835);
        goto -> bb467;
    }

    bb467: {
        StorageDead(_744);
        goto -> bb469;
    }

    bb468: {
        StorageDead(_727);
        StorageDead(_725);
        StorageDead(_723);
        StorageDead(_722);
        goto -> bb469;
    }

    bb469: {
        StorageDead(_720);
        goto -> bb471;
    }

    bb470: {
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_671);
        goto -> bb471;
    }

    bb471: {
        StorageDead(_654);
        StorageDead(_646);
        StorageDead(_640);
        goto -> bb475;
    }

    bb472: {
        StorageDead(_546);
        StorageDead(_545);
        goto -> bb473;
    }

    bb473: {
        StorageDead(_543);
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_540);
        goto -> bb474;
    }

    bb474: {
        StorageDead(_550);
        StorageDead(_547);
        StorageDead(_544);
        StorageDead(_539);
        goto -> bb475;
    }

    bb475: {
        StorageDead(_535);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_517);
        goto -> bb476;
    }

    bb476: {
        StorageDead(_484);
        StorageDead(_381);
        StorageDead(_380);
        goto -> bb479;
    }

    bb477: {
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_442);
        goto -> bb478;
    }

    bb478: {
        StorageDead(_382);
        goto -> bb479;
    }

    bb479: {
        StorageDead(_365);
        goto -> bb480;
    }

    bb480: {
        StorageDead(_219);
        drop(_208) -> [return: bb481, unwind: bb503];
    }

    bb481: {
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb482;
    }

    bb482: {
        StorageDead(_158);
        goto -> bb485;
    }

    bb483: {
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb484;
    }

    bb484: {
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb485;
    }

    bb485: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb486;
    }

    bb486: {
        return;
    }

    bb487 (cleanup): {
        drop(_916) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb488 (cleanup): {
        drop(_897) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb489 (cleanup): {
        drop(_617) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb490 (cleanup): {
        drop(_585) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb491 (cleanup): {
        drop(_417) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb492 (cleanup): {
        drop(_398) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb493 (cleanup): {
        drop(_352) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb494 (cleanup): {
        drop(_333) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb495 (cleanup): {
        drop(_298) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb496 (cleanup): {
        drop(_279) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb497 (cleanup): {
        drop(_244) -> [return: bb498, unwind terminate(cleanup)];
    }

    bb498 (cleanup): {
        drop(_208) -> [return: bb503, unwind terminate(cleanup)];
    }

    bb499 (cleanup): {
        drop(_191) -> [return: bb503, unwind terminate(cleanup)];
    }

    bb500 (cleanup): {
        drop(_135) -> [return: bb503, unwind terminate(cleanup)];
    }

    bb501 (cleanup): {
        drop(_66) -> [return: bb503, unwind terminate(cleanup)];
    }

    bb502 (cleanup): {
        drop(_41) -> [return: bb503, unwind terminate(cleanup)];
    }

    bb503 (cleanup): {
        resume;
    }

    bb504 (cleanup): {
        _1050 = discriminant(_209);
        goto -> bb503;
    }

    bb505 (cleanup): {
        _1051 = discriminant(_67);
        goto -> bb503;
    }
}
