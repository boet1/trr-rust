// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::as_u64` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::as_u64(_1: &U192) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let _2: &[u64; 3];
    let _3: ();
    let mut _4: bool;
    let mut _5: &math::bn::U192;
    let mut _6: !;
    let _7: !;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    scope 1 {
        debug arr => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).0: [u64; 3]);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = U192::fits_word(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_8);
        _8 = const 0_usize;
        _9 = Len((*_2));
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        StorageLive(_7);
        _7 = begin_panic::<&str>(const "Integer overflow when casting to u64") -> unwind continue;
    }

    bb4: {
        _0 = (*_2)[_8];
        StorageDead(_2);
        StorageDead(_8);
        return;
    }
}
