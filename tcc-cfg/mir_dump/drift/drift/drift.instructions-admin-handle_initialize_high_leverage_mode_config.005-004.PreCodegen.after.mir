// MIR for `admin::handle_initialize_high_leverage_mode_config` after PreCodegen

fn admin::handle_initialize_high_leverage_mode_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializeHighLeverageModeConfig<'_>>, _2: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_users => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _12: u32;
    let mut _13: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _14: &mut std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let _19: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _20: &std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: ();
    let mut _27: &mut instructions::admin::InitializeHighLeverageModeConfig<'_>;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    scope 1 {
        debug config => _3;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: ();
        scope 6 {
            debug residual => _22;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _25;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _27 = deref_copy (_1.1: &mut instructions::admin::InitializeHighLeverageModeConfig<'_>);
        _6 = &((*_27).1: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, HighLeverageModeConfig>::load_init(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, HighLeverageModeConfig>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _3 = move _11;
        StorageDead(_11);
        _28 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        _12 = _2;
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _3;
        _13 = <RefMut<'_, HighLeverageModeConfig> as DerefMut>::deref_mut(move _14) -> [return: bb7, unwind: bb17];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _30 = discriminant(_4);
        StorageDead(_4);
        goto -> bb15;
    }

    bb7: {
        StorageDead(_14);
        ((*_13).0: u32) = move _12;
        StorageDead(_12);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_3;
        _19 = <RefMut<'_, HighLeverageModeConfig> as Deref>::deref(move _20) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = HighLeverageModeConfig::validate(move _18) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_16 as Continue).0: ());
        _15 = _25;
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_26);
        _26 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _26);
        StorageDead(_26);
        drop(_3) -> [return: bb14, unwind: bb18];
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        drop(_3) -> [return: bb15, unwind: bb18];
    }

    bb14: {
        StorageDead(_3);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_3);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _32 = discriminant(_4);
        goto -> bb18;
    }
}
