// MIR for `controller::insurance::resolve_perp_pnl_deficit` after PreCodegen

fn controller::insurance::resolve_perp_pnl_deficit(_1: u64, _2: u64, _3: &mut SpotMarket, _4: &mut PerpMarket, _5: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug vault_amount => _1;
    debug insurance_vault_amount => _2;
    debug spot_market => _3;
    debug market => _4;
    debug now => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: bool;
    let mut _10: i128;
    let mut _11: ();
    let _12: error::ErrorCode;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 2];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &error::ErrorCode;
    let _31: &error::ErrorCode;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &i128;
    let _50: &i128;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: ();
    let _57: u128;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _59: std::result::Result<u128, error::ErrorCode>;
    let mut _60: u128;
    let mut _61: &state::spot_market::SpotMarket;
    let mut _62: &state::spot_market::SpotBalanceType;
    let _63: &state::spot_market::SpotBalanceType;
    let _64: state::spot_market::SpotBalanceType;
    let mut _65: isize;
    let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _69: u128;
    let _70: ();
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _72: std::result::Result<(), error::ErrorCode>;
    let mut _73: bool;
    let mut _74: u128;
    let mut _75: ();
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: &std::string::String;
    let _81: &std::string::String;
    let _82: std::string::String;
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[&str; 2];
    let _87: &[&str; 2];
    let _88: [&str; 2];
    let mut _89: &[core::fmt::rt::Argument<'_>];
    let mut _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: &[core::fmt::rt::Argument<'_>; 1];
    let _92: [core::fmt::rt::Argument<'_>; 1];
    let mut _93: core::fmt::rt::Argument<'_>;
    let mut _94: &error::ErrorCode;
    let _95: &error::ErrorCode;
    let _96: ();
    let mut _97: &str;
    let _98: &str;
    let mut _99: &std::string::String;
    let _100: &std::string::String;
    let _101: std::string::String;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let mut _105: &[&str; 2];
    let _106: &[&str; 2];
    let _107: [&str; 2];
    let mut _108: &[core::fmt::rt::Argument<'_>];
    let mut _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: &[core::fmt::rt::Argument<'_>; 1];
    let _111: [core::fmt::rt::Argument<'_>; 1];
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &u128;
    let _114: &u128;
    let mut _115: error::ErrorCode;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _123: std::result::Result<(), error::ErrorCode>;
    let mut _124: &mut state::spot_market::SpotMarket;
    let mut _125: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _126: i64;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _134: bool;
    let mut _135: u64;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _138: std::result::Result<i128, error::ErrorCode>;
    let mut _139: &state::perp_market::AMM;
    let _140: &state::perp_market::AMM;
    let mut _141: i64;
    let mut _142: isize;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _148: std::result::Result<i128, error::ErrorCode>;
    let mut _149: i128;
    let mut _150: i128;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _152: std::result::Result<i128, error::ErrorCode>;
    let mut _153: u64;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _164: ();
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _166: std::result::Result<(), error::ErrorCode>;
    let mut _167: bool;
    let mut _168: i128;
    let mut _169: ();
    let _171: ();
    let mut _172: &str;
    let _173: &str;
    let mut _174: &std::string::String;
    let _175: &std::string::String;
    let _176: std::string::String;
    let mut _178: std::fmt::Arguments<'_>;
    let mut _179: &[&str];
    let mut _180: &[&str; 2];
    let _181: &[&str; 2];
    let _182: [&str; 2];
    let mut _183: &[core::fmt::rt::Argument<'_>];
    let mut _184: &[core::fmt::rt::Argument<'_>; 1];
    let _185: &[core::fmt::rt::Argument<'_>; 1];
    let _186: [core::fmt::rt::Argument<'_>; 1];
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &error::ErrorCode;
    let _189: &error::ErrorCode;
    let _190: ();
    let mut _191: &str;
    let _192: &str;
    let mut _193: &std::string::String;
    let _194: &std::string::String;
    let _195: std::string::String;
    let mut _197: std::fmt::Arguments<'_>;
    let mut _198: &[&str];
    let mut _199: &[&str; 2];
    let _200: &[&str; 2];
    let _201: [&str; 2];
    let mut _202: &[core::fmt::rt::Argument<'_>];
    let mut _203: &[core::fmt::rt::Argument<'_>; 1];
    let _204: &[core::fmt::rt::Argument<'_>; 1];
    let _205: [core::fmt::rt::Argument<'_>; 1];
    let mut _206: core::fmt::rt::Argument<'_>;
    let mut _207: &i128;
    let _208: &i128;
    let mut _209: error::ErrorCode;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _217: std::result::Result<i128, error::ErrorCode>;
    let mut _218: i128;
    let mut _219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _220: std::result::Result<i128, error::ErrorCode>;
    let mut _221: i128;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _223: std::result::Result<i128, error::ErrorCode>;
    let mut _224: u64;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _230: i128;
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _232: std::result::Result<i128, error::ErrorCode>;
    let mut _233: i64;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _249: ();
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _251: std::result::Result<(), error::ErrorCode>;
    let mut _252: bool;
    let mut _253: i128;
    let mut _254: ();
    let _256: ();
    let mut _257: &str;
    let _258: &str;
    let mut _259: &std::string::String;
    let _260: &std::string::String;
    let _261: std::string::String;
    let mut _263: std::fmt::Arguments<'_>;
    let mut _264: &[&str];
    let mut _265: &[&str; 2];
    let _266: &[&str; 2];
    let _267: [&str; 2];
    let mut _268: &[core::fmt::rt::Argument<'_>];
    let mut _269: &[core::fmt::rt::Argument<'_>; 1];
    let _270: &[core::fmt::rt::Argument<'_>; 1];
    let _271: [core::fmt::rt::Argument<'_>; 1];
    let mut _272: core::fmt::rt::Argument<'_>;
    let mut _273: &error::ErrorCode;
    let _274: &error::ErrorCode;
    let _275: ();
    let mut _276: &str;
    let _277: &str;
    let mut _278: &std::string::String;
    let _279: &std::string::String;
    let _280: std::string::String;
    let mut _282: std::fmt::Arguments<'_>;
    let mut _283: &[&str];
    let mut _284: &[&str; 2];
    let _285: &[&str; 2];
    let _286: [&str; 2];
    let mut _287: &[core::fmt::rt::Argument<'_>];
    let mut _288: &[core::fmt::rt::Argument<'_>; 1];
    let _289: &[core::fmt::rt::Argument<'_>; 1];
    let _290: [core::fmt::rt::Argument<'_>; 1];
    let mut _291: core::fmt::rt::Argument<'_>;
    let mut _292: &i128;
    let _293: &i128;
    let mut _294: error::ErrorCode;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _302: std::result::Result<i128, error::ErrorCode>;
    let mut _303: u64;
    let mut _304: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _305: std::result::Result<u64, error::ErrorCode>;
    let mut _306: u64;
    let mut _307: u64;
    let mut _308: isize;
    let mut _310: !;
    let mut _311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _313: isize;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _318: ();
    let mut _319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _320: std::result::Result<(), error::ErrorCode>;
    let mut _321: bool;
    let mut _322: i128;
    let mut _323: ();
    let _325: ();
    let mut _326: &str;
    let _327: &str;
    let mut _328: &std::string::String;
    let _329: &std::string::String;
    let _330: std::string::String;
    let mut _332: std::fmt::Arguments<'_>;
    let mut _333: &[&str];
    let mut _334: &[&str; 2];
    let _335: &[&str; 2];
    let _336: [&str; 2];
    let mut _337: &[core::fmt::rt::Argument<'_>];
    let mut _338: &[core::fmt::rt::Argument<'_>; 1];
    let _339: &[core::fmt::rt::Argument<'_>; 1];
    let _340: [core::fmt::rt::Argument<'_>; 1];
    let mut _341: core::fmt::rt::Argument<'_>;
    let mut _342: &error::ErrorCode;
    let _343: &error::ErrorCode;
    let _344: ();
    let mut _345: &str;
    let _346: &str;
    let mut _347: &std::string::String;
    let _348: &std::string::String;
    let _349: std::string::String;
    let mut _351: std::fmt::Arguments<'_>;
    let mut _352: &[&str];
    let mut _353: &[&str; 3];
    let _354: &[&str; 3];
    let _355: [&str; 3];
    let mut _356: &[core::fmt::rt::Argument<'_>];
    let mut _357: &[core::fmt::rt::Argument<'_>; 2];
    let _358: &[core::fmt::rt::Argument<'_>; 2];
    let _359: [core::fmt::rt::Argument<'_>; 2];
    let mut _360: core::fmt::rt::Argument<'_>;
    let mut _361: &u64;
    let _362: &u64;
    let mut _363: core::fmt::rt::Argument<'_>;
    let mut _364: &u64;
    let _365: &u64;
    let mut _366: error::ErrorCode;
    let mut _367: isize;
    let mut _369: !;
    let mut _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _373: i128;
    let mut _374: i128;
    let mut _375: i128;
    let mut _376: i128;
    let mut _377: i128;
    let mut _378: i128;
    let mut _379: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _380: std::result::Result<i128, error::ErrorCode>;
    let mut _381: u64;
    let mut _382: u64;
    let mut _383: isize;
    let mut _385: !;
    let mut _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _388: ();
    let mut _389: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _390: std::result::Result<(), error::ErrorCode>;
    let mut _391: bool;
    let mut _392: i128;
    let mut _393: ();
    let _395: ();
    let mut _396: &str;
    let _397: &str;
    let mut _398: &std::string::String;
    let _399: &std::string::String;
    let _400: std::string::String;
    let mut _402: std::fmt::Arguments<'_>;
    let mut _403: &[&str];
    let mut _404: &[&str; 2];
    let _405: &[&str; 2];
    let _406: [&str; 2];
    let mut _407: &[core::fmt::rt::Argument<'_>];
    let mut _408: &[core::fmt::rt::Argument<'_>; 1];
    let _409: &[core::fmt::rt::Argument<'_>; 1];
    let _410: [core::fmt::rt::Argument<'_>; 1];
    let mut _411: core::fmt::rt::Argument<'_>;
    let mut _412: &error::ErrorCode;
    let _413: &error::ErrorCode;
    let _414: ();
    let mut _415: &str;
    let _416: &str;
    let mut _417: &std::string::String;
    let _418: &std::string::String;
    let _419: std::string::String;
    let mut _421: std::fmt::Arguments<'_>;
    let mut _422: &[&str];
    let mut _423: &[&str; 2];
    let _424: &[&str; 2];
    let _425: [&str; 2];
    let mut _426: &[core::fmt::rt::Argument<'_>];
    let mut _427: &[core::fmt::rt::Argument<'_>; 2];
    let _428: &[core::fmt::rt::Argument<'_>; 2];
    let _429: [core::fmt::rt::Argument<'_>; 2];
    let mut _430: core::fmt::rt::Argument<'_>;
    let mut _431: &i128;
    let _432: &i128;
    let mut _433: core::fmt::rt::Argument<'_>;
    let mut _434: &i128;
    let _435: &i128;
    let mut _436: error::ErrorCode;
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _442: i128;
    let mut _443: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _444: std::result::Result<i128, error::ErrorCode>;
    let mut _445: i128;
    let mut _446: i128;
    let mut _447: isize;
    let mut _449: !;
    let mut _450: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _452: i64;
    let mut _453: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _454: std::result::Result<i64, error::ErrorCode>;
    let mut _455: i64;
    let mut _456: i64;
    let mut _457: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _458: std::result::Result<i64, error::ErrorCode>;
    let mut _459: i128;
    let mut _460: isize;
    let mut _462: !;
    let mut _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _465: isize;
    let mut _467: !;
    let mut _468: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _470: u64;
    let mut _471: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _472: std::result::Result<u64, error::ErrorCode>;
    let mut _473: u64;
    let mut _474: u64;
    let mut _475: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _476: std::result::Result<u64, error::ErrorCode>;
    let mut _477: i128;
    let mut _478: isize;
    let mut _480: !;
    let mut _481: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _483: isize;
    let mut _485: !;
    let mut _486: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _488: ();
    let mut _489: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _490: std::result::Result<(), error::ErrorCode>;
    let mut _491: bool;
    let mut _492: u64;
    let mut _493: u64;
    let mut _494: ();
    let _496: ();
    let mut _497: &str;
    let _498: &str;
    let mut _499: &std::string::String;
    let _500: &std::string::String;
    let _501: std::string::String;
    let mut _503: std::fmt::Arguments<'_>;
    let mut _504: &[&str];
    let mut _505: &[&str; 2];
    let _506: &[&str; 2];
    let _507: [&str; 2];
    let mut _508: &[core::fmt::rt::Argument<'_>];
    let mut _509: &[core::fmt::rt::Argument<'_>; 1];
    let _510: &[core::fmt::rt::Argument<'_>; 1];
    let _511: [core::fmt::rt::Argument<'_>; 1];
    let mut _512: core::fmt::rt::Argument<'_>;
    let mut _513: &error::ErrorCode;
    let _514: &error::ErrorCode;
    let _515: ();
    let mut _516: &str;
    let _517: &str;
    let mut _518: &std::string::String;
    let _519: &std::string::String;
    let _520: std::string::String;
    let mut _522: std::fmt::Arguments<'_>;
    let mut _523: &[&str];
    let mut _524: &[&str; 2];
    let _525: &[&str; 2];
    let _526: [&str; 2];
    let mut _527: &[core::fmt::rt::Argument<'_>];
    let mut _528: &[core::fmt::rt::Argument<'_>; 2];
    let _529: &[core::fmt::rt::Argument<'_>; 2];
    let _530: [core::fmt::rt::Argument<'_>; 2];
    let mut _531: core::fmt::rt::Argument<'_>;
    let mut _532: &u64;
    let _533: &u64;
    let mut _534: core::fmt::rt::Argument<'_>;
    let mut _535: &u64;
    let _536: &u64;
    let mut _537: error::ErrorCode;
    let mut _538: isize;
    let mut _540: !;
    let mut _541: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _543: i64;
    let _544: ();
    let mut _545: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _546: std::result::Result<(), error::ErrorCode>;
    let mut _547: u128;
    let mut _548: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _549: std::result::Result<u128, error::ErrorCode>;
    let mut _550: i128;
    let mut _551: isize;
    let mut _553: !;
    let mut _554: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _556: &state::spot_market::SpotBalanceType;
    let _557: &state::spot_market::SpotBalanceType;
    let _558: state::spot_market::SpotBalanceType;
    let mut _559: &mut state::spot_market::SpotMarket;
    let mut _560: &mut dyn state::spot_market::SpotBalance;
    let mut _561: &mut state::perp_market::PoolBalance;
    let mut _562: &mut state::perp_market::PoolBalance;
    let mut _563: isize;
    let mut _565: !;
    let mut _566: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _568: ();
    let _569: ();
    let mut _570: &[&[u8]];
    let mut _571: &[&[u8]; 1];
    let _572: &[&[u8]; 1];
    let _573: [&[u8]; 1];
    let mut _574: &[u8];
    let _575: &[u8];
    let mut _576: &std::vec::Vec<u8>;
    let _577: &std::vec::Vec<u8>;
    let _578: std::vec::Vec<u8>;
    let mut _579: &state::events::InsuranceFundRecord;
    let _580: &state::events::InsuranceFundRecord;
    let _581: state::events::InsuranceFundRecord;
    let mut _582: i64;
    let mut _583: u16;
    let mut _584: u16;
    let mut _585: i64;
    let mut _586: i64;
    let mut _587: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _588: std::result::Result<i64, error::ErrorCode>;
    let mut _589: i128;
    let mut _590: isize;
    let mut _592: !;
    let mut _593: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _595: bool;
    let mut _596: u32;
    let mut _597: u32;
    let mut _598: u64;
    let mut _599: u64;
    let mut _600: u128;
    let mut _601: u128;
    let mut _602: i128;
    let mut _616: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug error_code => _12;
        let _19: std::string::String;
        let _38: std::string::String;
        let mut _617: &[&str; 2];
        let mut _618: &[&str; 2];
        scope 2 {
            debug res => _19;
        }
        scope 3 {
            debug res => _38;
        }
    }
    scope 4 {
        debug residual => _53;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _56;
        scope 7 {
        }
    }
    scope 8 {
        debug pnl_pool_token_amount => _57;
        let _76: error::ErrorCode;
        let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _120: ();
        let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _131: ();
        let _132: u128;
        scope 13 {
            debug error_code => _76;
            let _83: std::string::String;
            let _102: std::string::String;
            let mut _614: &[&str; 2];
            let mut _615: &[&str; 2];
            scope 14 {
                debug res => _83;
            }
            scope 15 {
                debug res => _102;
            }
        }
        scope 16 {
            debug residual => _117;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _120;
            scope 19 {
            }
        }
        scope 20 {
            debug residual => _128;
            scope 21 {
            }
        }
        scope 22 {
            debug val => _131;
            scope 23 {
            }
        }
        scope 24 {
            debug total_if_shares_before => _132;
            let _133: i128;
            let _136: i128;
            let _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _146: i128;
            scope 25 {
                debug excess_user_pnl_imbalance => _133;
                let _170: error::ErrorCode;
                let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _214: ();
                let _215: i128;
                let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _229: i128;
                let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _238: i128;
                let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _243: i128;
                let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _248: i128;
                scope 39 {
                    debug error_code => _170;
                    let _177: std::string::String;
                    let _196: std::string::String;
                    let mut _612: &[&str; 2];
                    let mut _613: &[&str; 2];
                    scope 40 {
                        debug res => _177;
                    }
                    scope 41 {
                        debug res => _196;
                    }
                }
                scope 42 {
                    debug residual => _211;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug val => _214;
                    scope 45 {
                    }
                }
                scope 46 {
                    debug max_revenue_withdraw_per_period => _215;
                    let _255: error::ErrorCode;
                    let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _299: ();
                    let _300: i128;
                    let _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _312: u64;
                    let _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _317: i128;
                    scope 63 {
                        debug error_code => _255;
                        let _262: std::string::String;
                        let _281: std::string::String;
                        let mut _610: &[&str; 2];
                        let mut _611: &[&str; 2];
                        scope 64 {
                            debug res => _262;
                        }
                        scope 65 {
                            debug res => _281;
                        }
                    }
                    scope 66 {
                        debug residual => _296;
                        scope 67 {
                        }
                    }
                    scope 68 {
                        debug val => _299;
                        scope 69 {
                        }
                    }
                    scope 70 {
                        debug max_insurance_withdraw => _300;
                        let _324: error::ErrorCode;
                        let _368: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _371: ();
                        let _372: i128;
                        let _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _387: i128;
                        scope 79 {
                            debug error_code => _324;
                            let _331: std::string::String;
                            let _350: std::string::String;
                            let mut _608: &[&str; 3];
                            let mut _609: &[&str; 2];
                            scope 80 {
                                debug res => _331;
                            }
                            scope 81 {
                                debug res => _350;
                            }
                        }
                        scope 82 {
                            debug residual => _368;
                            scope 83 {
                            }
                        }
                        scope 84 {
                            debug val => _371;
                            scope 85 {
                            }
                        }
                        scope 86 {
                            debug insurance_withdraw => _372;
                            let _394: error::ErrorCode;
                            let _438: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _441: ();
                            let _448: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _451: i128;
                            let _461: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _464: i64;
                            let _466: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _469: i64;
                            let _479: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _482: u64;
                            let _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _487: u64;
                            let _495: error::ErrorCode;
                            let _539: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _542: ();
                            let _552: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _555: u128;
                            let _564: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _567: ();
                            let _591: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _594: i64;
                            let mut _603: &state::spot_market::SpotBalanceType;
                            scope 91 {
                                debug error_code => _394;
                                let _401: std::string::String;
                                let _420: std::string::String;
                                let mut _606: &[&str; 2];
                                let mut _607: &[&str; 2];
                                scope 92 {
                                    debug res => _401;
                                }
                                scope 93 {
                                    debug res => _420;
                                }
                            }
                            scope 94 {
                                debug residual => _438;
                                scope 95 {
                                }
                            }
                            scope 96 {
                                debug val => _441;
                                scope 97 {
                                }
                            }
                            scope 98 {
                                debug residual => _448;
                                scope 99 {
                                }
                            }
                            scope 100 {
                                debug val => _451;
                                scope 101 {
                                }
                            }
                            scope 102 {
                                debug residual => _461;
                                scope 103 {
                                }
                            }
                            scope 104 {
                                debug val => _464;
                                scope 105 {
                                }
                            }
                            scope 106 {
                                debug residual => _466;
                                scope 107 {
                                }
                            }
                            scope 108 {
                                debug val => _469;
                                scope 109 {
                                }
                            }
                            scope 110 {
                                debug residual => _479;
                                scope 111 {
                                }
                            }
                            scope 112 {
                                debug val => _482;
                                scope 113 {
                                }
                            }
                            scope 114 {
                                debug residual => _484;
                                scope 115 {
                                }
                            }
                            scope 116 {
                                debug val => _487;
                                scope 117 {
                                }
                            }
                            scope 118 {
                                debug error_code => _495;
                                let _502: std::string::String;
                                let _521: std::string::String;
                                let mut _604: &[&str; 2];
                                let mut _605: &[&str; 2];
                                scope 119 {
                                    debug res => _502;
                                }
                                scope 120 {
                                    debug res => _521;
                                }
                            }
                            scope 121 {
                                debug residual => _539;
                                scope 122 {
                                }
                            }
                            scope 123 {
                                debug val => _542;
                                scope 124 {
                                }
                            }
                            scope 125 {
                                debug residual => _552;
                                scope 126 {
                                }
                            }
                            scope 127 {
                                debug val => _555;
                                scope 128 {
                                }
                            }
                            scope 129 {
                                debug residual => _564;
                                scope 130 {
                                }
                            }
                            scope 131 {
                                debug val => _567;
                                scope 132 {
                                }
                            }
                            scope 133 {
                                debug residual => _591;
                                scope 134 {
                                }
                            }
                            scope 135 {
                                debug val => _594;
                                scope 136 {
                                }
                            }
                        }
                        scope 87 {
                            debug residual => _384;
                            scope 88 {
                            }
                        }
                        scope 89 {
                            debug val => _387;
                            scope 90 {
                            }
                        }
                    }
                    scope 71 {
                        debug residual => _309;
                        scope 72 {
                        }
                    }
                    scope 73 {
                        debug val => _312;
                        scope 74 {
                        }
                    }
                    scope 75 {
                        debug residual => _314;
                        scope 76 {
                        }
                    }
                    scope 77 {
                        debug val => _317;
                        scope 78 {
                        }
                    }
                }
                scope 47 {
                    debug residual => _226;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug val => _229;
                    scope 50 {
                    }
                }
                scope 51 {
                    debug residual => _235;
                    scope 52 {
                    }
                }
                scope 53 {
                    debug val => _238;
                    scope 54 {
                    }
                }
                scope 55 {
                    debug residual => _240;
                    scope 56 {
                    }
                }
                scope 57 {
                    debug val => _243;
                    scope 58 {
                    }
                }
                scope 59 {
                    debug residual => _245;
                    scope 60 {
                    }
                }
                scope 61 {
                    debug val => _248;
                    scope 62 {
                    }
                }
            }
            scope 26 {
                debug net_unsettled_pnl => _136;
                let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _158: i128;
                let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _163: i128;
                scope 31 {
                    debug residual => _155;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug val => _158;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug residual => _160;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _163;
                    scope 38 {
                    }
                }
            }
            scope 27 {
                debug residual => _143;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _146;
                scope 30 {
                }
            }
        }
    }
    scope 9 {
        debug residual => _66;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _69;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = (((*_4).1: state::perp_market::AMM).31: i128);
        _9 = Lt(move _10, const 0_i128);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        _11 = ();
        _8 = std::result::Result::<(), error::ErrorCode>::Ok(move _11);
        StorageDead(_11);
        goto -> bb15;
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_12);
        _12 = error::ErrorCode::NoAmmPerpPnlDeficit;
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _618 = const _;
        _23 = &(*_618);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_12;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _30) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_30);
        _28 = [move _29];
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_20);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <String as Deref>::deref(move _16) -> [return: bb6, unwind: bb280];
    }

    bb6: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb7, unwind: bb280];
    }

    bb7: {
        StorageDead(_14);
        drop(_18) -> [return: bb8, unwind: bb281];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _617 = const _;
        _42 = &(*_617);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(((*_4).1: state::perp_market::AMM).31: i128);
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _49) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_49);
        _47 = [move _48];
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb12, unwind: bb279];
    }

    bb12: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb13, unwind: bb279];
    }

    bb13: {
        StorageDead(_33);
        drop(_37) -> [return: bb14, unwind: bb281];
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_51);
        _51 = _12;
        _8 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_12);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_8);
        _52 = discriminant(_7);
        switchInt(move _52) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_56);
        _56 = ((_7 as Continue).0: ());
        _6 = _56;
        StorageDead(_56);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = (((*_4).2: state::perp_market::PoolBalance).0: u128);
        StorageLive(_61);
        _61 = &(*_3);
        StorageLive(_62);
        StorageLive(_63);
        _616 = const _;
        _63 = &(*_616);
        _62 = &(*_63);
        _59 = get_token_amount(move _60, move _61, move _62) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_53);
        _53 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb265;
    }

    bb21: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_59);
        _65 = discriminant(_58);
        switchInt(move _65) -> [0: bb23, 1: bb24, otherwise: bb18];
    }

    bb23: {
        StorageLive(_69);
        _69 = ((_58 as Continue).0: u128);
        _57 = _69;
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_58);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _57;
        _73 = Eq(move _74, const 0_u128);
        switchInt(move _73) -> [0: bb27, otherwise: bb26];
    }

    bb24: {
        StorageLive(_66);
        _66 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_58);
        goto -> bb264;
    }

    bb26: {
        StorageDead(_74);
        StorageLive(_75);
        _75 = ();
        _72 = std::result::Result::<(), error::ErrorCode>::Ok(move _75);
        StorageDead(_75);
        goto -> bb40;
    }

    bb27: {
        StorageDead(_74);
        StorageLive(_76);
        _76 = error::ErrorCode::SufficientPerpPnlPool;
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _615 = const _;
        _87 = &(*_615);
        _86 = &(*_87);
        _85 = move _86 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_86);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_76;
        _94 = &(*_95);
        _93 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _94) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_94);
        _92 = [move _93];
        StorageDead(_93);
        _91 = &_92;
        _90 = &(*_91);
        _89 = move _90 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_90);
        _84 = Arguments::<'_>::new_v1(move _85, move _89) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_89);
        StorageDead(_85);
        _83 = format(move _84) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_84);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_87);
        _82 = move _83;
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = <String as Deref>::deref(move _80) -> [return: bb31, unwind: bb278];
    }

    bb31: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb32, unwind: bb278];
    }

    bb32: {
        StorageDead(_78);
        drop(_82) -> [return: bb33, unwind: bb281];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _614 = const _;
        _106 = &(*_614);
        _105 = &(*_106);
        _104 = move _105 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_57;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _113) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_113);
        _111 = [move _112];
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = move _109 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_109);
        _103 = Arguments::<'_>::new_v1(move _104, move _108) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_108);
        StorageDead(_104);
        _102 = format(move _103) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_103);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_106);
        _101 = move _102;
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = <String as Deref>::deref(move _99) -> [return: bb37, unwind: bb277];
    }

    bb37: {
        _97 = &(*_98);
        StorageDead(_99);
        _96 = solana_program::log::sol_log(move _97) -> [return: bb38, unwind: bb277];
    }

    bb38: {
        StorageDead(_97);
        drop(_101) -> [return: bb39, unwind: bb281];
    }

    bb39: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageLive(_115);
        _115 = _76;
        _72 = std::result::Result::<(), error::ErrorCode>::Err(move _115);
        StorageDead(_115);
        StorageDead(_76);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_73);
        _71 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _72) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_72);
        _116 = discriminant(_71);
        switchInt(move _116) -> [0: bb42, 1: bb43, otherwise: bb18];
    }

    bb42: {
        StorageLive(_120);
        _120 = ((_71 as Continue).0: ());
        _70 = _120;
        StorageDead(_120);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &mut (*_3);
        StorageLive(_125);
        _125 = Option::<&OraclePriceData>::None;
        StorageLive(_126);
        _126 = _5;
        _123 = controller::spot_balance::update_spot_market_cumulative_interest(move _124, move _125, move _126) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_117);
        _117 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb264;
    }

    bb45: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        _122 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _123) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_123);
        _127 = discriminant(_122);
        switchInt(move _127) -> [0: bb47, 1: bb48, otherwise: bb18];
    }

    bb47: {
        StorageLive(_131);
        _131 = ((_122 as Continue).0: ());
        _121 = _131;
        StorageDead(_131);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_132);
        _132 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = ((*_4).5: u64);
        _134 = Gt(move _135, const 0_u64);
        switchInt(move _134) -> [0: bb51, otherwise: bb50];
    }

    bb48: {
        StorageLive(_128);
        _128 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb264;
    }

    bb50: {
        StorageDead(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &((*_4).1: state::perp_market::AMM);
        _139 = &(*_140);
        StorageLive(_141);
        _141 = ((((*_4).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).0: i64);
        _138 = calculate_net_user_pnl(move _139, move _141) -> [return: bb52, unwind continue];
    }

    bb51: {
        StorageDead(_135);
        _133 = const 0_i128;
        goto -> bb67;
    }

    bb52: {
        StorageDead(_141);
        StorageDead(_139);
        _137 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _138) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_138);
        _142 = discriminant(_137);
        switchInt(move _142) -> [0: bb54, 1: bb55, otherwise: bb18];
    }

    bb54: {
        StorageLive(_146);
        _146 = ((_137 as Continue).0: i128);
        _136 = _146;
        StorageDead(_146);
        StorageDead(_140);
        StorageDead(_137);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = _136;
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = ((*_4).5: u64);
        _152 = <u64 as Cast>::cast::<i128>(move _153) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_143);
        _143 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_145);
        _145 = _143;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _145) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb262;
    }

    bb57: {
        StorageDead(_153);
        _151 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _152) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_152);
        _154 = discriminant(_151);
        switchInt(move _154) -> [0: bb59, 1: bb60, otherwise: bb18];
    }

    bb59: {
        StorageLive(_158);
        _158 = ((_151 as Continue).0: i128);
        _150 = _158;
        StorageDead(_158);
        _148 = <i128 as SafeMath>::safe_sub(move _149, move _150) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_155);
        _155 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb261;
    }

    bb62: {
        StorageDead(_150);
        StorageDead(_149);
        _147 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _148) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_148);
        _159 = discriminant(_147);
        switchInt(move _159) -> [0: bb64, 1: bb65, otherwise: bb18];
    }

    bb64: {
        StorageLive(_163);
        _163 = ((_147 as Continue).0: i128);
        _133 = _163;
        StorageDead(_163);
        StorageDead(_136);
        StorageDead(_151);
        StorageDead(_147);
        goto -> bb67;
    }

    bb65: {
        StorageLive(_160);
        _160 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_162);
        StorageDead(_160);
        goto -> bb261;
    }

    bb67: {
        StorageDead(_134);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = _133;
        _167 = Gt(move _168, const 0_i128);
        switchInt(move _167) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        StorageDead(_168);
        StorageLive(_169);
        _169 = ();
        _166 = std::result::Result::<(), error::ErrorCode>::Ok(move _169);
        StorageDead(_169);
        goto -> bb82;
    }

    bb69: {
        StorageDead(_168);
        StorageLive(_170);
        _170 = error::ErrorCode::PerpPnlDeficitBelowThreshold;
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _613 = const _;
        _181 = &(*_613);
        _180 = &(*_181);
        _179 = move _180 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_180);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_170;
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _188) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_188);
        _186 = [move _187];
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = move _184 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_184);
        _178 = Arguments::<'_>::new_v1(move _179, move _183) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_183);
        StorageDead(_179);
        _177 = format(move _178) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_178);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        _176 = move _177;
        StorageDead(_177);
        _175 = &_176;
        _174 = &(*_175);
        _173 = <String as Deref>::deref(move _174) -> [return: bb73, unwind: bb276];
    }

    bb73: {
        _172 = &(*_173);
        StorageDead(_174);
        _171 = solana_program::log::sol_log(move _172) -> [return: bb74, unwind: bb276];
    }

    bb74: {
        StorageDead(_172);
        drop(_176) -> [return: bb75, unwind: bb281];
    }

    bb75: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_171);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _612 = const _;
        _200 = &(*_612);
        _199 = &(*_200);
        _198 = move _199 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_199);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &_133;
        _207 = &(*_208);
        _206 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _207) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_207);
        _205 = [move _206];
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _202 = move _203 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_203);
        _197 = Arguments::<'_>::new_v1(move _198, move _202) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_202);
        StorageDead(_198);
        _196 = format(move _197) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_197);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_200);
        _195 = move _196;
        StorageDead(_196);
        _194 = &_195;
        _193 = &(*_194);
        _192 = <String as Deref>::deref(move _193) -> [return: bb79, unwind: bb275];
    }

    bb79: {
        _191 = &(*_192);
        StorageDead(_193);
        _190 = solana_program::log::sol_log(move _191) -> [return: bb80, unwind: bb275];
    }

    bb80: {
        StorageDead(_191);
        drop(_195) -> [return: bb81, unwind: bb281];
    }

    bb81: {
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageLive(_209);
        _209 = _170;
        _166 = std::result::Result::<(), error::ErrorCode>::Err(move _209);
        StorageDead(_209);
        StorageDead(_170);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_167);
        _165 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _166) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_166);
        _210 = discriminant(_165);
        switchInt(move _210) -> [0: bb84, 1: bb85, otherwise: bb18];
    }

    bb84: {
        StorageLive(_214);
        _214 = ((_165 as Continue).0: ());
        _164 = _214;
        StorageDead(_214);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = (((*_4).4: state::perp_market::InsuranceClaim).1: u64);
        _223 = <u64 as Cast>::cast::<i128>(move _224) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_211);
        _211 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb263;
    }

    bb87: {
        StorageDead(_224);
        _222 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _223) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_223);
        _225 = discriminant(_222);
        switchInt(move _225) -> [0: bb89, 1: bb90, otherwise: bb18];
    }

    bb89: {
        StorageLive(_229);
        _229 = ((_222 as Continue).0: i128);
        _221 = _229;
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = (((*_4).4: state::perp_market::InsuranceClaim).0: i64);
        _232 = <i64 as Cast>::cast::<i128>(move _233) -> [return: bb92, unwind continue];
    }

    bb90: {
        StorageLive(_226);
        _226 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb259;
    }

    bb92: {
        StorageDead(_233);
        _231 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _232) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_232);
        _234 = discriminant(_231);
        switchInt(move _234) -> [0: bb94, 1: bb95, otherwise: bb18];
    }

    bb94: {
        StorageLive(_238);
        _238 = ((_231 as Continue).0: i128);
        _230 = _238;
        StorageDead(_238);
        _220 = <i128 as SafeMath>::safe_sub(move _221, move _230) -> [return: bb97, unwind continue];
    }

    bb95: {
        StorageLive(_235);
        _235 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_230);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb257;
    }

    bb97: {
        StorageDead(_230);
        StorageDead(_221);
        _219 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _220) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_220);
        _239 = discriminant(_219);
        switchInt(move _239) -> [0: bb99, 1: bb100, otherwise: bb18];
    }

    bb99: {
        StorageLive(_243);
        _243 = ((_219 as Continue).0: i128);
        _218 = _243;
        StorageDead(_243);
        _217 = <i128 as Cast>::cast::<i128>(move _218) -> [return: bb102, unwind continue];
    }

    bb100: {
        StorageLive(_240);
        _240 = ((_219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_242);
        StorageDead(_240);
        goto -> bb257;
    }

    bb102: {
        StorageDead(_218);
        _216 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _217) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_217);
        _244 = discriminant(_216);
        switchInt(move _244) -> [0: bb104, 1: bb105, otherwise: bb18];
    }

    bb104: {
        StorageLive(_248);
        _248 = ((_216 as Continue).0: i128);
        _215 = _248;
        StorageDead(_248);
        StorageDead(_231);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_216);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = _215;
        _252 = Gt(move _253, const 0_i128);
        switchInt(move _252) -> [0: bb108, otherwise: bb107];
    }

    bb105: {
        StorageLive(_245);
        _245 = ((_216 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_247);
        StorageDead(_245);
        goto -> bb258;
    }

    bb107: {
        StorageDead(_253);
        StorageLive(_254);
        _254 = ();
        _251 = std::result::Result::<(), error::ErrorCode>::Ok(move _254);
        StorageDead(_254);
        goto -> bb121;
    }

    bb108: {
        StorageDead(_253);
        StorageLive(_255);
        _255 = error::ErrorCode::MaxRevenueWithdrawPerPeriodReached;
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _611 = const _;
        _266 = &(*_611);
        _265 = &(*_266);
        _264 = move _265 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_265);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_255;
        _273 = &(*_274);
        _272 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _273) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_273);
        _271 = [move _272];
        StorageDead(_272);
        _270 = &_271;
        _269 = &(*_270);
        _268 = move _269 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_269);
        _263 = Arguments::<'_>::new_v1(move _264, move _268) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_268);
        StorageDead(_264);
        _262 = format(move _263) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_263);
        StorageDead(_274);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_266);
        _261 = move _262;
        StorageDead(_262);
        _260 = &_261;
        _259 = &(*_260);
        _258 = <String as Deref>::deref(move _259) -> [return: bb112, unwind: bb274];
    }

    bb112: {
        _257 = &(*_258);
        StorageDead(_259);
        _256 = solana_program::log::sol_log(move _257) -> [return: bb113, unwind: bb274];
    }

    bb113: {
        StorageDead(_257);
        drop(_261) -> [return: bb114, unwind: bb281];
    }

    bb114: {
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_256);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _610 = const _;
        _285 = &(*_610);
        _284 = &(*_285);
        _283 = move _284 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_284);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_215;
        _292 = &(*_293);
        _291 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _292) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_292);
        _290 = [move _291];
        StorageDead(_291);
        _289 = &_290;
        _288 = &(*_289);
        _287 = move _288 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_288);
        _282 = Arguments::<'_>::new_v1(move _283, move _287) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_287);
        StorageDead(_283);
        _281 = format(move _282) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_282);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_285);
        _280 = move _281;
        StorageDead(_281);
        _279 = &_280;
        _278 = &(*_279);
        _277 = <String as Deref>::deref(move _278) -> [return: bb118, unwind: bb273];
    }

    bb118: {
        _276 = &(*_277);
        StorageDead(_278);
        _275 = solana_program::log::sol_log(move _276) -> [return: bb119, unwind: bb273];
    }

    bb119: {
        StorageDead(_276);
        drop(_280) -> [return: bb120, unwind: bb281];
    }

    bb120: {
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_275);
        StorageLive(_294);
        _294 = _255;
        _251 = std::result::Result::<(), error::ErrorCode>::Err(move _294);
        StorageDead(_294);
        StorageDead(_255);
        goto -> bb121;
    }

    bb121: {
        StorageDead(_252);
        _250 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _251) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_251);
        _295 = discriminant(_250);
        switchInt(move _295) -> [0: bb123, 1: bb124, otherwise: bb18];
    }

    bb123: {
        StorageLive(_299);
        _299 = ((_250 as Continue).0: ());
        _249 = _299;
        StorageDead(_299);
        StorageDead(_250);
        StorageDead(_249);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = (((*_4).4: state::perp_market::InsuranceClaim).2: u64);
        StorageLive(_307);
        _307 = (((*_4).4: state::perp_market::InsuranceClaim).3: u64);
        _305 = <u64 as SafeMath>::safe_sub(move _306, move _307) -> [return: bb126, unwind continue];
    }

    bb124: {
        StorageLive(_296);
        _296 = ((_250 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb260;
    }

    bb126: {
        StorageDead(_307);
        StorageDead(_306);
        _304 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _305) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_305);
        _308 = discriminant(_304);
        switchInt(move _308) -> [0: bb128, 1: bb129, otherwise: bb18];
    }

    bb128: {
        StorageLive(_312);
        _312 = ((_304 as Continue).0: u64);
        _303 = _312;
        StorageDead(_312);
        _302 = <u64 as Cast>::cast::<i128>(move _303) -> [return: bb131, unwind continue];
    }

    bb129: {
        StorageLive(_309);
        _309 = ((_304 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_311);
        _311 = _309;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _311) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_303);
        StorageDead(_302);
        goto -> bb255;
    }

    bb131: {
        StorageDead(_303);
        _301 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _302) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_302);
        _313 = discriminant(_301);
        switchInt(move _313) -> [0: bb133, 1: bb134, otherwise: bb18];
    }

    bb133: {
        StorageLive(_317);
        _317 = ((_301 as Continue).0: i128);
        _300 = _317;
        StorageDead(_317);
        StorageDead(_304);
        StorageDead(_301);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = _300;
        _321 = Gt(move _322, const 0_i128);
        switchInt(move _321) -> [0: bb137, otherwise: bb136];
    }

    bb134: {
        StorageLive(_314);
        _314 = ((_301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_316);
        _316 = _314;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _316) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_316);
        StorageDead(_314);
        goto -> bb255;
    }

    bb136: {
        StorageDead(_322);
        StorageLive(_323);
        _323 = ();
        _320 = std::result::Result::<(), error::ErrorCode>::Ok(move _323);
        StorageDead(_323);
        goto -> bb151;
    }

    bb137: {
        StorageDead(_322);
        StorageLive(_324);
        _324 = error::ErrorCode::MaxIFWithdrawReached;
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _609 = const _;
        _335 = &(*_609);
        _334 = &(*_335);
        _333 = move _334 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_334);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &_324;
        _342 = &(*_343);
        _341 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _342) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_342);
        _340 = [move _341];
        StorageDead(_341);
        _339 = &_340;
        _338 = &(*_339);
        _337 = move _338 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_338);
        _332 = Arguments::<'_>::new_v1(move _333, move _337) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_337);
        StorageDead(_333);
        _331 = format(move _332) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_332);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_335);
        _330 = move _331;
        StorageDead(_331);
        _329 = &_330;
        _328 = &(*_329);
        _327 = <String as Deref>::deref(move _328) -> [return: bb141, unwind: bb272];
    }

    bb141: {
        _326 = &(*_327);
        StorageDead(_328);
        _325 = solana_program::log::sol_log(move _326) -> [return: bb142, unwind: bb272];
    }

    bb142: {
        StorageDead(_326);
        drop(_330) -> [return: bb143, unwind: bb281];
    }

    bb143: {
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_325);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _608 = const _;
        _354 = &(*_608);
        _353 = &(*_354);
        _352 = move _353 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &(((*_4).4: state::perp_market::InsuranceClaim).3: u64);
        _361 = &(*_362);
        _360 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _361) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_361);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &(((*_4).4: state::perp_market::InsuranceClaim).2: u64);
        _364 = &(*_365);
        _363 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _364) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_364);
        _359 = [move _360, move _363];
        StorageDead(_363);
        StorageDead(_360);
        _358 = &_359;
        _357 = &(*_358);
        _356 = move _357 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_357);
        _351 = Arguments::<'_>::new_v1(move _352, move _356) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_356);
        StorageDead(_352);
        _350 = format(move _351) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_351);
        StorageDead(_365);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_354);
        _349 = move _350;
        StorageDead(_350);
        _348 = &_349;
        _347 = &(*_348);
        _346 = <String as Deref>::deref(move _347) -> [return: bb148, unwind: bb271];
    }

    bb148: {
        _345 = &(*_346);
        StorageDead(_347);
        _344 = solana_program::log::sol_log(move _345) -> [return: bb149, unwind: bb271];
    }

    bb149: {
        StorageDead(_345);
        drop(_349) -> [return: bb150, unwind: bb281];
    }

    bb150: {
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_344);
        StorageLive(_366);
        _366 = _324;
        _320 = std::result::Result::<(), error::ErrorCode>::Err(move _366);
        StorageDead(_366);
        StorageDead(_324);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_321);
        _319 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _320) -> [return: bb152, unwind continue];
    }

    bb152: {
        StorageDead(_320);
        _367 = discriminant(_319);
        switchInt(move _367) -> [0: bb153, 1: bb154, otherwise: bb18];
    }

    bb153: {
        StorageLive(_371);
        _371 = ((_319 as Continue).0: ());
        _318 = _371;
        StorageDead(_371);
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = _133;
        StorageLive(_376);
        _376 = _215;
        _374 = <i128 as Ord>::min(move _375, move _376) -> [return: bb156, unwind continue];
    }

    bb154: {
        StorageLive(_368);
        _368 = ((_319 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_370);
        _370 = _368;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _370) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb256;
    }

    bb156: {
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_377);
        _377 = _300;
        _373 = <i128 as Ord>::min(move _374, move _377) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_377);
        StorageDead(_374);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = _2;
        _381 = core::num::<impl u64>::saturating_sub(move _382, const 1_u64) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_382);
        _380 = <u64 as Cast>::cast::<i128>(move _381) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_381);
        _379 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _380) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_380);
        _383 = discriminant(_379);
        switchInt(move _383) -> [0: bb161, 1: bb162, otherwise: bb18];
    }

    bb161: {
        StorageLive(_387);
        _387 = ((_379 as Continue).0: i128);
        _378 = _387;
        StorageDead(_387);
        _372 = <i128 as Ord>::min(move _373, move _378) -> [return: bb164, unwind continue];
    }

    bb162: {
        StorageLive(_384);
        _384 = ((_379 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_386);
        _386 = _384;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _386) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_378);
        StorageDead(_373);
        StorageDead(_379);
        goto -> bb254;
    }

    bb164: {
        StorageDead(_378);
        StorageDead(_373);
        StorageDead(_379);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = _372;
        _391 = Gt(move _392, const 0_i128);
        switchInt(move _391) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        StorageDead(_392);
        StorageLive(_393);
        _393 = ();
        _390 = std::result::Result::<(), error::ErrorCode>::Ok(move _393);
        StorageDead(_393);
        goto -> bb180;
    }

    bb166: {
        StorageDead(_392);
        StorageLive(_394);
        _394 = error::ErrorCode::NoIFWithdrawAvailable;
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _607 = const _;
        _405 = &(*_607);
        _404 = &(*_405);
        _403 = move _404 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_404);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &_394;
        _412 = &(*_413);
        _411 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _412) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_412);
        _410 = [move _411];
        StorageDead(_411);
        _409 = &_410;
        _408 = &(*_409);
        _407 = move _408 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_408);
        _402 = Arguments::<'_>::new_v1(move _403, move _407) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_407);
        StorageDead(_403);
        _401 = format(move _402) -> [return: bb169, unwind continue];
    }

    bb169: {
        StorageDead(_402);
        StorageDead(_413);
        StorageDead(_410);
        StorageDead(_409);
        StorageDead(_405);
        _400 = move _401;
        StorageDead(_401);
        _399 = &_400;
        _398 = &(*_399);
        _397 = <String as Deref>::deref(move _398) -> [return: bb170, unwind: bb270];
    }

    bb170: {
        _396 = &(*_397);
        StorageDead(_398);
        _395 = solana_program::log::sol_log(move _396) -> [return: bb171, unwind: bb270];
    }

    bb171: {
        StorageDead(_396);
        drop(_400) -> [return: bb172, unwind: bb281];
    }

    bb172: {
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_395);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _606 = const _;
        _424 = &(*_606);
        _423 = &(*_424);
        _422 = move _423 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_423);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_372;
        _431 = &(*_432);
        _430 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _431) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_431);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _435 = &_133;
        _434 = &(*_435);
        _433 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _434) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_434);
        _429 = [move _430, move _433];
        StorageDead(_433);
        StorageDead(_430);
        _428 = &_429;
        _427 = &(*_428);
        _426 = move _427 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_427);
        _421 = Arguments::<'_>::new_v1(move _422, move _426) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_426);
        StorageDead(_422);
        _420 = format(move _421) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_421);
        StorageDead(_435);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_424);
        _419 = move _420;
        StorageDead(_420);
        _418 = &_419;
        _417 = &(*_418);
        _416 = <String as Deref>::deref(move _417) -> [return: bb177, unwind: bb269];
    }

    bb177: {
        _415 = &(*_416);
        StorageDead(_417);
        _414 = solana_program::log::sol_log(move _415) -> [return: bb178, unwind: bb269];
    }

    bb178: {
        StorageDead(_415);
        drop(_419) -> [return: bb179, unwind: bb281];
    }

    bb179: {
        StorageDead(_419);
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_414);
        StorageLive(_436);
        _436 = _394;
        _390 = std::result::Result::<(), error::ErrorCode>::Err(move _436);
        StorageDead(_436);
        StorageDead(_394);
        goto -> bb180;
    }

    bb180: {
        StorageDead(_391);
        _389 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _390) -> [return: bb181, unwind continue];
    }

    bb181: {
        StorageDead(_390);
        _437 = discriminant(_389);
        switchInt(move _437) -> [0: bb182, 1: bb183, otherwise: bb18];
    }

    bb182: {
        StorageLive(_441);
        _441 = ((_389 as Continue).0: ());
        _388 = _441;
        StorageDead(_441);
        StorageDead(_389);
        StorageDead(_388);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = (((*_4).1: state::perp_market::AMM).31: i128);
        StorageLive(_446);
        _446 = _372;
        _444 = <i128 as SafeMath>::safe_add(move _445, move _446) -> [return: bb185, unwind continue];
    }

    bb183: {
        StorageLive(_438);
        _438 = ((_389 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_440);
        _440 = _438;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _440) -> [return: bb184, unwind continue];
    }

    bb184: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_389);
        StorageDead(_388);
        goto -> bb254;
    }

    bb185: {
        StorageDead(_446);
        StorageDead(_445);
        _443 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _444) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_444);
        _447 = discriminant(_443);
        switchInt(move _447) -> [0: bb187, 1: bb188, otherwise: bb18];
    }

    bb187: {
        StorageLive(_451);
        _451 = ((_443 as Continue).0: i128);
        _442 = _451;
        StorageDead(_451);
        (((*_4).1: state::perp_market::AMM).31: i128) = move _442;
        StorageDead(_442);
        StorageDead(_443);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = (((*_4).4: state::perp_market::InsuranceClaim).0: i64);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        _459 = _372;
        _458 = <i128 as Cast>::cast::<i64>(move _459) -> [return: bb190, unwind continue];
    }

    bb188: {
        StorageLive(_448);
        _448 = ((_443 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_450);
        _450 = _448;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _450) -> [return: bb189, unwind continue];
    }

    bb189: {
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_442);
        StorageDead(_443);
        goto -> bb254;
    }

    bb190: {
        StorageDead(_459);
        _457 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _458) -> [return: bb191, unwind continue];
    }

    bb191: {
        StorageDead(_458);
        _460 = discriminant(_457);
        switchInt(move _460) -> [0: bb192, 1: bb193, otherwise: bb18];
    }

    bb192: {
        StorageLive(_464);
        _464 = ((_457 as Continue).0: i64);
        _456 = _464;
        StorageDead(_464);
        _454 = <i64 as SafeMath>::safe_add(move _455, move _456) -> [return: bb195, unwind continue];
    }

    bb193: {
        StorageLive(_461);
        _461 = ((_457 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_463);
        _463 = _461;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _463) -> [return: bb194, unwind continue];
    }

    bb194: {
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_454);
        goto -> bb253;
    }

    bb195: {
        StorageDead(_456);
        StorageDead(_455);
        _453 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _454) -> [return: bb196, unwind continue];
    }

    bb196: {
        StorageDead(_454);
        _465 = discriminant(_453);
        switchInt(move _465) -> [0: bb197, 1: bb198, otherwise: bb18];
    }

    bb197: {
        StorageLive(_469);
        _469 = ((_453 as Continue).0: i64);
        _452 = _469;
        StorageDead(_469);
        (((*_4).4: state::perp_market::InsuranceClaim).0: i64) = move _452;
        StorageDead(_452);
        StorageDead(_457);
        StorageDead(_453);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = (((*_4).4: state::perp_market::InsuranceClaim).3: u64);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = _372;
        _476 = <i128 as Cast>::cast::<u64>(move _477) -> [return: bb200, unwind continue];
    }

    bb198: {
        StorageLive(_466);
        _466 = ((_453 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_468);
        _468 = _466;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _468) -> [return: bb199, unwind continue];
    }

    bb199: {
        StorageDead(_468);
        StorageDead(_466);
        goto -> bb253;
    }

    bb200: {
        StorageDead(_477);
        _475 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _476) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_476);
        _478 = discriminant(_475);
        switchInt(move _478) -> [0: bb202, 1: bb203, otherwise: bb18];
    }

    bb202: {
        StorageLive(_482);
        _482 = ((_475 as Continue).0: u64);
        _474 = _482;
        StorageDead(_482);
        _472 = <u64 as SafeMath>::safe_add(move _473, move _474) -> [return: bb205, unwind continue];
    }

    bb203: {
        StorageLive(_479);
        _479 = ((_475 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_481);
        _481 = _479;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _481) -> [return: bb204, unwind continue];
    }

    bb204: {
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        goto -> bb252;
    }

    bb205: {
        StorageDead(_474);
        StorageDead(_473);
        _471 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _472) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_472);
        _483 = discriminant(_471);
        switchInt(move _483) -> [0: bb207, 1: bb208, otherwise: bb18];
    }

    bb207: {
        StorageLive(_487);
        _487 = ((_471 as Continue).0: u64);
        _470 = _487;
        StorageDead(_487);
        (((*_4).4: state::perp_market::InsuranceClaim).3: u64) = move _470;
        StorageDead(_470);
        StorageDead(_475);
        StorageDead(_471);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = (((*_4).4: state::perp_market::InsuranceClaim).3: u64);
        StorageLive(_493);
        _493 = (((*_4).4: state::perp_market::InsuranceClaim).2: u64);
        _491 = Le(move _492, move _493);
        switchInt(move _491) -> [0: bb211, otherwise: bb210];
    }

    bb208: {
        StorageLive(_484);
        _484 = ((_471 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_486);
        _486 = _484;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _486) -> [return: bb209, unwind continue];
    }

    bb209: {
        StorageDead(_486);
        StorageDead(_484);
        goto -> bb252;
    }

    bb210: {
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_494);
        _494 = ();
        _490 = std::result::Result::<(), error::ErrorCode>::Ok(move _494);
        StorageDead(_494);
        goto -> bb225;
    }

    bb211: {
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_495);
        _495 = error::ErrorCode::MaxIFWithdrawReached;
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        _605 = const _;
        _506 = &(*_605);
        _505 = &(*_506);
        _504 = move _505 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_505);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = &_495;
        _513 = &(*_514);
        _512 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _513) -> [return: bb212, unwind continue];
    }

    bb212: {
        StorageDead(_513);
        _511 = [move _512];
        StorageDead(_512);
        _510 = &_511;
        _509 = &(*_510);
        _508 = move _509 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_509);
        _503 = Arguments::<'_>::new_v1(move _504, move _508) -> [return: bb213, unwind continue];
    }

    bb213: {
        StorageDead(_508);
        StorageDead(_504);
        _502 = format(move _503) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_503);
        StorageDead(_514);
        StorageDead(_511);
        StorageDead(_510);
        StorageDead(_506);
        _501 = move _502;
        StorageDead(_502);
        _500 = &_501;
        _499 = &(*_500);
        _498 = <String as Deref>::deref(move _499) -> [return: bb215, unwind: bb268];
    }

    bb215: {
        _497 = &(*_498);
        StorageDead(_499);
        _496 = solana_program::log::sol_log(move _497) -> [return: bb216, unwind: bb268];
    }

    bb216: {
        StorageDead(_497);
        drop(_501) -> [return: bb217, unwind: bb281];
    }

    bb217: {
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_496);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _604 = const _;
        _525 = &(*_604);
        _524 = &(*_525);
        _523 = move _524 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_524);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &(((*_4).4: state::perp_market::InsuranceClaim).3: u64);
        _532 = &(*_533);
        _531 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _532) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_532);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &(((*_4).4: state::perp_market::InsuranceClaim).2: u64);
        _535 = &(*_536);
        _534 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _535) -> [return: bb219, unwind continue];
    }

    bb219: {
        StorageDead(_535);
        _530 = [move _531, move _534];
        StorageDead(_534);
        StorageDead(_531);
        _529 = &_530;
        _528 = &(*_529);
        _527 = move _528 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_528);
        _522 = Arguments::<'_>::new_v1(move _523, move _527) -> [return: bb220, unwind continue];
    }

    bb220: {
        StorageDead(_527);
        StorageDead(_523);
        _521 = format(move _522) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_522);
        StorageDead(_536);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_525);
        _520 = move _521;
        StorageDead(_521);
        _519 = &_520;
        _518 = &(*_519);
        _517 = <String as Deref>::deref(move _518) -> [return: bb222, unwind: bb267];
    }

    bb222: {
        _516 = &(*_517);
        StorageDead(_518);
        _515 = solana_program::log::sol_log(move _516) -> [return: bb223, unwind: bb267];
    }

    bb223: {
        StorageDead(_516);
        drop(_520) -> [return: bb224, unwind: bb281];
    }

    bb224: {
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_515);
        StorageLive(_537);
        _537 = _495;
        _490 = std::result::Result::<(), error::ErrorCode>::Err(move _537);
        StorageDead(_537);
        StorageDead(_495);
        goto -> bb225;
    }

    bb225: {
        StorageDead(_491);
        _489 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _490) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_490);
        _538 = discriminant(_489);
        switchInt(move _538) -> [0: bb227, 1: bb228, otherwise: bb18];
    }

    bb227: {
        StorageLive(_542);
        _542 = ((_489 as Continue).0: ());
        _488 = _542;
        StorageDead(_542);
        StorageDead(_489);
        StorageDead(_488);
        StorageLive(_543);
        _543 = _5;
        (((*_4).4: state::perp_market::InsuranceClaim).4: i64) = move _543;
        StorageDead(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        _550 = _372;
        _549 = <i128 as Cast>::cast::<u128>(move _550) -> [return: bb230, unwind continue];
    }

    bb228: {
        StorageLive(_539);
        _539 = ((_489 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_541);
        _541 = _539;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _541) -> [return: bb229, unwind continue];
    }

    bb229: {
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_489);
        StorageDead(_488);
        goto -> bb254;
    }

    bb230: {
        StorageDead(_550);
        _548 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _549) -> [return: bb231, unwind continue];
    }

    bb231: {
        StorageDead(_549);
        _551 = discriminant(_548);
        switchInt(move _551) -> [0: bb232, 1: bb233, otherwise: bb18];
    }

    bb232: {
        StorageLive(_555);
        _555 = ((_548 as Continue).0: u128);
        _547 = _555;
        StorageDead(_555);
        StorageLive(_556);
        StorageLive(_557);
        _603 = const _;
        _557 = &(*_603);
        _556 = &(*_557);
        StorageLive(_559);
        _559 = &mut (*_3);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        _562 = &mut ((*_4).2: state::perp_market::PoolBalance);
        _561 = &mut (*_562);
        _560 = move _561 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_561);
        _546 = update_spot_balances(move _547, move _556, move _559, move _560, const false) -> [return: bb235, unwind continue];
    }

    bb233: {
        StorageLive(_552);
        _552 = ((_548 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_554);
        _554 = _552;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _554) -> [return: bb234, unwind continue];
    }

    bb234: {
        StorageDead(_554);
        StorageDead(_552);
        StorageDead(_547);
        StorageDead(_546);
        goto -> bb251;
    }

    bb235: {
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_556);
        StorageDead(_547);
        _545 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _546) -> [return: bb236, unwind continue];
    }

    bb236: {
        StorageDead(_546);
        _563 = discriminant(_545);
        switchInt(move _563) -> [0: bb237, 1: bb238, otherwise: bb18];
    }

    bb237: {
        StorageLive(_567);
        _567 = ((_545 as Continue).0: ());
        _544 = _567;
        StorageDead(_567);
        StorageDead(_562);
        StorageDead(_557);
        StorageDead(_548);
        StorageDead(_545);
        StorageDead(_544);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = _5;
        StorageLive(_583);
        _583 = ((*_3).42: u16);
        StorageLive(_584);
        _584 = ((*_4).21: u16);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        _589 = _372;
        _588 = <i128 as Cast>::cast::<i64>(move _589) -> [return: bb240, unwind continue];
    }

    bb238: {
        StorageLive(_564);
        _564 = ((_545 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_566);
        _566 = _564;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _566) -> [return: bb239, unwind continue];
    }

    bb239: {
        StorageDead(_566);
        StorageDead(_564);
        StorageDead(_562);
        StorageDead(_557);
        goto -> bb251;
    }

    bb240: {
        StorageDead(_589);
        _587 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _588) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_588);
        _590 = discriminant(_587);
        switchInt(move _590) -> [0: bb242, 1: bb243, otherwise: bb18];
    }

    bb242: {
        StorageLive(_594);
        _594 = ((_587 as Continue).0: i64);
        _586 = _594;
        StorageDead(_594);
        _595 = Eq(_586, const i64::MIN);
        assert(!move _595, "attempt to negate `{}`, which would overflow", _586) -> [success: bb245, unwind continue];
    }

    bb243: {
        StorageLive(_591);
        _591 = ((_587 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_593);
        _593 = _591;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _593) -> [return: bb244, unwind continue];
    }

    bb244: {
        StorageDead(_593);
        StorageDead(_591);
        StorageDead(_586);
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_579);
        StorageDead(_576);
        StorageDead(_574);
        StorageDead(_571);
        StorageDead(_570);
        StorageDead(_587);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_575);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_568);
        goto -> bb254;
    }

    bb245: {
        _585 = Neg(move _586);
        StorageDead(_586);
        StorageLive(_596);
        _596 = (((*_3).9: state::spot_market::InsuranceFund).8: u32);
        StorageLive(_597);
        _597 = (((*_3).9: state::spot_market::InsuranceFund).7: u32);
        StorageLive(_598);
        _598 = _1;
        StorageLive(_599);
        _599 = _2;
        StorageLive(_600);
        _600 = _132;
        StorageLive(_601);
        _601 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        _581 = InsuranceFundRecord { ts: move _582, spot_market_index: move _583, perp_market_index: move _584, user_if_factor: move _596, total_if_factor: move _597, vault_amount_before: move _598, insurance_vault_amount_before: move _599, total_if_shares_before: move _600, total_if_shares_after: move _601, amount: move _585 };
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_598);
        StorageDead(_597);
        StorageDead(_596);
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        _580 = &_581;
        _579 = &(*_580);
        _578 = <InsuranceFundRecord as anchor_lang::Event>::data(move _579) -> [return: bb246, unwind continue];
    }

    bb246: {
        StorageDead(_579);
        _577 = &_578;
        _576 = &(*_577);
        _575 = <Vec<u8> as Deref>::deref(move _576) -> [return: bb247, unwind: bb266];
    }

    bb247: {
        _574 = &(*_575);
        StorageDead(_576);
        _573 = [move _574];
        StorageDead(_574);
        _572 = &_573;
        _571 = &(*_572);
        _570 = move _571 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_571);
        _569 = solana_program::log::sol_log_data(move _570) -> [return: bb248, unwind: bb266];
    }

    bb248: {
        StorageDead(_570);
        drop(_578) -> [return: bb249, unwind: bb281];
    }

    bb249: {
        StorageDead(_587);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_575);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_569);
        _568 = const ();
        StorageDead(_568);
        StorageLive(_602);
        _602 = _372;
        _0 = <i128 as Cast>::cast::<u64>(move _602) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_602);
        StorageDead(_372);
        StorageDead(_300);
        StorageDead(_215);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_57);
        goto -> bb265;
    }

    bb251: {
        StorageDead(_548);
        StorageDead(_545);
        StorageDead(_544);
        goto -> bb254;
    }

    bb252: {
        StorageDead(_470);
        StorageDead(_475);
        StorageDead(_471);
        goto -> bb254;
    }

    bb253: {
        StorageDead(_452);
        StorageDead(_457);
        StorageDead(_453);
        goto -> bb254;
    }

    bb254: {
        StorageDead(_372);
        goto -> bb256;
    }

    bb255: {
        StorageDead(_304);
        StorageDead(_301);
        goto -> bb256;
    }

    bb256: {
        StorageDead(_300);
        goto -> bb260;
    }

    bb257: {
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb258;
    }

    bb258: {
        StorageDead(_231);
        goto -> bb259;
    }

    bb259: {
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_216);
        goto -> bb260;
    }

    bb260: {
        StorageDead(_215);
        goto -> bb263;
    }

    bb261: {
        StorageDead(_136);
        StorageDead(_151);
        StorageDead(_147);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_134);
        goto -> bb263;
    }

    bb263: {
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb264;
    }

    bb264: {
        StorageDead(_57);
        goto -> bb265;
    }

    bb265: {
        return;
    }

    bb266 (cleanup): {
        drop(_578) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_520) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_501) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_419) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_400) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_349) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_330) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_280) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_261) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_195) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_176) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_101) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        drop(_82) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        drop(_37) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        drop(_18) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        resume;
    }
}
