digraph Mir_0_3129 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn phoenix_price_in_ticks_to_taker_price(_1: u64, _2: u64, _3: &amp;ReErased phoenix::program::MarketHeader) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _9: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _16: u64;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: &amp;ReErased phoenix::quantities::QuoteAtomsPerQuoteLot;<br align="left"/>let _19: phoenix::quantities::QuoteAtomsPerQuoteLot;<br align="left"/>let mut _20: &amp;ReErased phoenix::program::MarketHeader;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: u64;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: u32;<br align="left"/>debug price_in_ticks =&gt; _1;<br align="left"/>debug tick_size =&gt; _2;<br align="left"/>debug header =&gt; _3;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>>;
    bb0__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _1<br/>StorageLive(_11)<br/>_11 = _2<br/></td></tr><tr><td align="left">_9 = &lt;u64 as SafeMath&gt;::safe_mul(move _10, move _11)</td></tr></table>>];
    bb1__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_12 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb3__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_8 as Continue).0: u64)<br/>_7 = _16<br/>StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_3)<br/></td></tr><tr><td align="left">_19 = MarketHeader::get_quote_lot_size(move _20)</td></tr></table>>];
    bb4__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_15)<br/>_15 = _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb6__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_18 = &amp;_19<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_17 = &lt;QuoteAtomsPerQuoteLot as phoenix::quantities::WrapperU64&gt;::as_u64(move _18)</td></tr></table>>];
    bb8__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">_6 = &lt;u64 as SafeMath&gt;::safe_mul(move _7, move _17)</td></tr></table>>];
    bb9__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb10__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_21 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb11__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_5 as Continue).0: u64)<br/>_4 = _25<br/>StorageDead(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = ((*_3).12: u32)<br/>_26 = move _27 as u64 (IntToInt)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_0 = &lt;u64 as SafeMath&gt;::safe_div(move _4, move _26)</td></tr></table>>];
    bb12__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb13__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_4)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_4)<br/>StorageDead(_19)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_3129 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3129 -> bb1__0_3129 [label="return"];
    bb1__0_3129 -> bb2__0_3129 [label="return"];
    bb2__0_3129 -> bb3__0_3129 [label="0"];
    bb2__0_3129 -> bb5__0_3129 [label="1"];
    bb2__0_3129 -> bb4__0_3129 [label="otherwise"];
    bb3__0_3129 -> bb7__0_3129 [label="return"];
    bb5__0_3129 -> bb6__0_3129 [label="return"];
    bb6__0_3129 -> bb15__0_3129 [label=""];
    bb7__0_3129 -> bb8__0_3129 [label="return"];
    bb8__0_3129 -> bb9__0_3129 [label="return"];
    bb9__0_3129 -> bb10__0_3129 [label="return"];
    bb10__0_3129 -> bb11__0_3129 [label="0"];
    bb10__0_3129 -> bb12__0_3129 [label="1"];
    bb10__0_3129 -> bb4__0_3129 [label="otherwise"];
    bb11__0_3129 -> bb14__0_3129 [label="return"];
    bb12__0_3129 -> bb13__0_3129 [label="return"];
    bb13__0_3129 -> bb15__0_3129 [label=""];
    bb14__0_3129 -> bb16__0_3129 [label=""];
    bb15__0_3129 -> bb16__0_3129 [label=""];
}
