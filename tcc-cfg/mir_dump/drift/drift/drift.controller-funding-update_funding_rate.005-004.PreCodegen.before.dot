digraph Mir_0_134 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::funding::update_funding_rate(_1: u16, _2: &amp;ReErased mut state::perp_market::PerpMarket, _3: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _4: i64, _5: u64, _6: &amp;ReErased state::state::OracleGuardRails, _7: bool, _8: std::option::Option&lt;u64&gt;) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _9: u64;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: u64;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _14: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: u64;<br align="left"/>let _20: bool;<br align="left"/>let mut _21: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _22: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _23: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _24: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _25: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _27: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _28: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _29: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _30: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _31: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _32: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _33: isize;<br align="left"/>let _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _35: !;<br align="left"/>let mut _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _37: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _38: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: isize;<br align="left"/>let _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _43: !;<br align="left"/>let mut _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _45: bool;<br align="left"/>let _46: i64;<br align="left"/>let mut _47: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _48: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _49: i64;<br align="left"/>let mut _50: i64;<br align="left"/>let mut _51: i64;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _56: i64;<br align="left"/>let _57: bool;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: bool;<br align="left"/>let mut _60: i64;<br align="left"/>let _61: ();<br align="left"/>let mut _62: bool;<br align="left"/>let _63: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _65: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _66: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _67: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _68: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _69: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _70: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _71: isize;<br align="left"/>let _72: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _73: !;<br align="left"/>let mut _74: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _75: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _76: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _77: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;i64&gt;&gt;;<br align="left"/>let mut _78: std::result::Result&lt;std::option::Option&lt;i64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _79: state::perp_market::PerpMarket;<br align="left"/>let mut _80: isize;<br align="left"/>let _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _82: !;<br align="left"/>let mut _83: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _84: std::option::Option&lt;i64&gt;;<br align="left"/>let _85: state::oracle::MMOraclePriceData;<br align="left"/>let mut _86: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::oracle::MMOraclePriceData&gt;;<br align="left"/>let mut _87: std::result::Result&lt;state::oracle::MMOraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _88: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _89: state::oracle::OraclePriceData;<br align="left"/>let mut _90: u64;<br align="left"/>let mut _91: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _92: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _93: isize;<br align="left"/>let _94: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _95: !;<br align="left"/>let mut _96: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _97: state::oracle::MMOraclePriceData;<br align="left"/>let _98: i64;<br align="left"/>let mut _99: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _100: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _101: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _102: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _103: i64;<br align="left"/>let mut _104: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let _105: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _106: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _107: u64;<br align="left"/>let mut _108: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _109: isize;<br align="left"/>let _110: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _111: !;<br align="left"/>let mut _112: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _113: i64;<br align="left"/>let _114: u64;<br align="left"/>let _115: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _116: (u64, std::option::Option&lt;controller::position::PositionDirection&gt;);<br align="left"/>let mut _117: bool;<br align="left"/>let mut _118: u32;<br align="left"/>let mut _119: u32;<br align="left"/>let mut _120: u64;<br align="left"/>let mut _121: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _122: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _123: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _124: u64;<br align="left"/>let mut _125: isize;<br align="left"/>let _126: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _127: !;<br align="left"/>let mut _128: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _129: u64;<br align="left"/>let mut _130: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _131: controller::position::PositionDirection;<br align="left"/>let mut _132: bool;<br align="left"/>let mut _133: u32;<br align="left"/>let mut _134: u32;<br align="left"/>let mut _135: u64;<br align="left"/>let mut _136: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _137: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _138: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _139: u64;<br align="left"/>let mut _140: isize;<br align="left"/>let _141: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _142: !;<br align="left"/>let mut _143: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _144: u64;<br align="left"/>let mut _145: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _146: controller::position::PositionDirection;<br align="left"/>let mut _147: u64;<br align="left"/>let mut _148: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let _149: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _150: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;i64&gt;&gt;;<br align="left"/>let mut _151: std::result::Result&lt;std::option::Option&lt;i64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _152: state::perp_market::PerpMarket;<br align="left"/>let mut _153: isize;<br align="left"/>let _154: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _155: !;<br align="left"/>let mut _156: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _157: std::option::Option&lt;i64&gt;;<br align="left"/>let _158: u64;<br align="left"/>let mut _159: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _160: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _161: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _162: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _163: i64;<br align="left"/>let mut _164: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _165: u64;<br align="left"/>let mut _166: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _167: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _168: isize;<br align="left"/>let _169: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _170: !;<br align="left"/>let mut _171: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _172: u64;<br align="left"/>let _173: i128;<br align="left"/>let mut _174: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _175: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _176: i128;<br align="left"/>let mut _177: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _178: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _179: isize;<br align="left"/>let _180: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _181: !;<br align="left"/>let mut _182: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _183: i128;<br align="left"/>let mut _184: i128;<br align="left"/>let mut _185: i128;<br align="left"/>let mut _186: i64;<br align="left"/>let mut _187: isize;<br align="left"/>let _188: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _189: !;<br align="left"/>let mut _190: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _191: i128;<br align="left"/>let _192: i64;<br align="left"/>let mut _193: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _194: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _195: i64;<br align="left"/>let mut _196: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _197: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _198: u64;<br align="left"/>let mut _199: isize;<br align="left"/>let _200: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _201: !;<br align="left"/>let mut _202: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _203: i64;<br align="left"/>let mut _204: i64;<br align="left"/>let mut _205: isize;<br align="left"/>let _206: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _207: !;<br align="left"/>let mut _208: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _209: i64;<br align="left"/>let _210: i64;<br align="left"/>let mut _211: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _212: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _213: i64;<br align="left"/>let mut _214: i64;<br align="left"/>let mut _215: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _216: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _217: i64;<br align="left"/>let mut _218: i64;<br align="left"/>let mut _219: isize;<br align="left"/>let _220: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _221: !;<br align="left"/>let mut _222: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _223: i64;<br align="left"/>let mut _224: isize;<br align="left"/>let _225: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _226: !;<br align="left"/>let mut _227: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _228: i64;<br align="left"/>let _229: i64;<br align="left"/>let mut _230: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _231: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _232: state::perp_market::PerpMarket;<br align="left"/>let mut _233: i64;<br align="left"/>let mut _234: isize;<br align="left"/>let _235: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _236: !;<br align="left"/>let mut _237: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _238: i64;<br align="left"/>let _239: i64;<br align="left"/>let mut _240: i64;<br align="left"/>let mut _241: i64;<br align="left"/>let mut _242: i64;<br align="left"/>let mut _243: bool;<br align="left"/>let mut _244: i64;<br align="left"/>let _245: i64;<br align="left"/>let mut _246: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _247: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _248: i128;<br align="left"/>let mut _249: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _250: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _251: i128;<br align="left"/>let mut _252: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _253: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _254: i128;<br align="left"/>let mut _255: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _256: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _257: i64;<br align="left"/>let mut _258: isize;<br align="left"/>let _259: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _260: !;<br align="left"/>let mut _261: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _262: i128;<br align="left"/>let mut _263: i128;<br align="left"/>let mut _264: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _265: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _266: isize;<br align="left"/>let _267: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _268: !;<br align="left"/>let mut _269: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _270: i128;<br align="left"/>let mut _271: isize;<br align="left"/>let _272: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _273: !;<br align="left"/>let mut _274: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _275: i128;<br align="left"/>let mut _276: i128;<br align="left"/>let mut _277: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _278: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _279: i128;<br align="left"/>let mut _280: isize;<br align="left"/>let _281: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _282: !;<br align="left"/>let mut _283: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _284: i128;<br align="left"/>let mut _285: isize;<br align="left"/>let _286: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _287: !;<br align="left"/>let mut _288: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _289: i128;<br align="left"/>let mut _290: isize;<br align="left"/>let _291: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _292: !;<br align="left"/>let mut _293: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _294: i64;<br align="left"/>let _295: i128;<br align="left"/>let _296: i128;<br align="left"/>let _297: i128;<br align="left"/>let mut _298: (i128, i128, i128);<br align="left"/>let mut _299: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i128, i128, i128)&gt;;<br align="left"/>let mut _300: std::result::Result&lt;(i128, i128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _301: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _302: i128;<br align="left"/>let mut _303: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _304: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _305: i64;<br align="left"/>let mut _306: isize;<br align="left"/>let _307: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _308: !;<br align="left"/>let mut _309: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _310: i128;<br align="left"/>let mut _311: isize;<br align="left"/>let _312: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _313: !;<br align="left"/>let mut _314: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _315: (i128, i128, i128);<br align="left"/>let _316: ();<br align="left"/>let mut _317: bool;<br align="left"/>let mut _318: u8;<br align="left"/>let _319: i128;<br align="left"/>let mut _320: i128;<br align="left"/>let mut _321: bool;<br align="left"/>let _322: ();<br align="left"/>let mut _323: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _324: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _325: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _326: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _327: i128;<br align="left"/>let mut _328: i64;<br align="left"/>let mut _329: isize;<br align="left"/>let _330: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _331: !;<br align="left"/>let mut _332: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _333: ();<br align="left"/>let mut _334: i128;<br align="left"/>let mut _335: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _336: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _337: i128;<br align="left"/>let mut _338: i128;<br align="left"/>let mut _339: isize;<br align="left"/>let _340: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _341: !;<br align="left"/>let mut _342: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _343: i128;<br align="left"/>let mut _344: i128;<br align="left"/>let mut _345: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _346: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _347: i128;<br align="left"/>let mut _348: i128;<br align="left"/>let mut _349: isize;<br align="left"/>let _350: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _351: !;<br align="left"/>let mut _352: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _353: i128;<br align="left"/>let mut _354: i64;<br align="left"/>let mut _355: i64;<br align="left"/>let mut _356: i64;<br align="left"/>let mut _357: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _358: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _359: i128;<br align="left"/>let mut _360: isize;<br align="left"/>let _361: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _362: !;<br align="left"/>let mut _363: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _364: i64;<br align="left"/>let mut _365: i64;<br align="left"/>let mut _366: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _367: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _368: i128;<br align="left"/>let mut _369: isize;<br align="left"/>let _370: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _371: !;<br align="left"/>let mut _372: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _373: i64;<br align="left"/>let mut _374: i64;<br align="left"/>let mut _375: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _376: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _377: i64;<br align="left"/>let mut _378: i64;<br align="left"/>let mut _379: i64;<br align="left"/>let mut _380: i64;<br align="left"/>let mut _381: isize;<br align="left"/>let _382: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _383: !;<br align="left"/>let mut _384: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _385: i64;<br align="left"/>let mut _386: i64;<br align="left"/>let mut _387: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _388: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _389: i64;<br align="left"/>let mut _390: i64;<br align="left"/>let mut _391: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _392: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _393: i128;<br align="left"/>let mut _394: isize;<br align="left"/>let _395: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _396: !;<br align="left"/>let mut _397: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _398: i64;<br align="left"/>let mut _399: isize;<br align="left"/>let _400: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _401: !;<br align="left"/>let mut _402: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _403: i64;<br align="left"/>let mut _404: i64;<br align="left"/>let _405: ();<br align="left"/>let _406: ();<br align="left"/>let mut _407: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _408: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _409: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _410: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _411: &amp;ReErased [u8];<br align="left"/>let _412: &amp;ReErased [u8];<br align="left"/>let mut _413: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _414: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _415: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _416: &amp;ReErased state::events::FundingRateRecord;<br align="left"/>let _417: &amp;ReErased state::events::FundingRateRecord;<br align="left"/>let _418: state::events::FundingRateRecord;<br align="left"/>let mut _419: i64;<br align="left"/>let mut _420: u64;<br align="left"/>let _421: u64;<br align="left"/>let mut _422: u64;<br align="left"/>let mut _423: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _424: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _425: u64;<br align="left"/>let mut _426: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _427: u16;<br align="left"/>let mut _428: i64;<br align="left"/>let mut _429: i128;<br align="left"/>let mut _430: i128;<br align="left"/>let mut _431: i128;<br align="left"/>let mut _432: i128;<br align="left"/>let mut _433: u64;<br align="left"/>let mut _434: i64;<br align="left"/>let mut _435: i64;<br align="left"/>let mut _436: i128;<br align="left"/>let mut _437: i128;<br align="left"/>let mut _438: !;<br align="left"/>debug market_index =&gt; _1;<br align="left"/>debug market =&gt; _2;<br align="left"/>debug oracle_map =&gt; _3;<br align="left"/>debug now =&gt; _4;<br align="left"/>debug slot =&gt; _5;<br align="left"/>debug guard_rails =&gt; _6;<br align="left"/>debug funding_paused =&gt; _7;<br align="left"/>debug precomputed_reserve_price =&gt; _8;<br align="left"/>debug reserve_price =&gt; _9;<br align="left"/>debug reserve_price =&gt; _11;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug block_funding_rate_update =&gt; _20;<br align="left"/>debug residual =&gt; _34;<br align="left"/>debug val =&gt; _37;<br align="left"/>debug residual =&gt; _42;<br align="left"/>debug val =&gt; _45;<br align="left"/>debug time_until_next_update =&gt; _46;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug valid_funding_update =&gt; _57;<br align="left"/>debug oracle_price_data =&gt; _63;<br align="left"/>debug residual =&gt; _72;<br align="left"/>debug val =&gt; _75;<br align="left"/>debug sanitize_clamp_denominator =&gt; _76;<br align="left"/>debug residual =&gt; _81;<br align="left"/>debug val =&gt; _84;<br align="left"/>debug mm_oracle_price_data =&gt; _85;<br align="left"/>debug residual =&gt; _94;<br align="left"/>debug val =&gt; _97;<br align="left"/>debug oracle_price_twap =&gt; _98;<br align="left"/>debug residual =&gt; _110;<br align="left"/>debug val =&gt; _113;<br align="left"/>debug execution_premium_price =&gt; _114;<br align="left"/>debug execution_premium_direction =&gt; _115;<br align="left"/>debug residual =&gt; _126;<br align="left"/>debug val =&gt; _129;<br align="left"/>debug residual =&gt; _141;<br align="left"/>debug val =&gt; _144;<br align="left"/>debug sanitize_clamp_denominator =&gt; _149;<br align="left"/>debug residual =&gt; _154;<br align="left"/>debug val =&gt; _157;<br align="left"/>debug mid_price_twap =&gt; _158;<br align="left"/>debug residual =&gt; _169;<br align="left"/>debug val =&gt; _172;<br align="left"/>debug period_adjustment =&gt; _173;<br align="left"/>debug residual =&gt; _180;<br align="left"/>debug val =&gt; _183;<br align="left"/>debug residual =&gt; _188;<br align="left"/>debug val =&gt; _191;<br align="left"/>debug price_spread =&gt; _192;<br align="left"/>debug residual =&gt; _200;<br align="left"/>debug val =&gt; _203;<br align="left"/>debug residual =&gt; _206;<br align="left"/>debug val =&gt; _209;<br align="left"/>debug price_spread_with_offset =&gt; _210;<br align="left"/>debug residual =&gt; _220;<br align="left"/>debug val =&gt; _223;<br align="left"/>debug residual =&gt; _225;<br align="left"/>debug val =&gt; _228;<br align="left"/>debug max_price_spread =&gt; _229;<br align="left"/>debug residual =&gt; _235;<br align="left"/>debug val =&gt; _238;<br align="left"/>debug clamped_price_spread =&gt; _239;<br align="left"/>debug funding_rate =&gt; _245;<br align="left"/>debug residual =&gt; _259;<br align="left"/>debug val =&gt; _262;<br align="left"/>debug residual =&gt; _267;<br align="left"/>debug val =&gt; _270;<br align="left"/>debug residual =&gt; _272;<br align="left"/>debug val =&gt; _275;<br align="left"/>debug residual =&gt; _281;<br align="left"/>debug val =&gt; _284;<br align="left"/>debug residual =&gt; _286;<br align="left"/>debug val =&gt; _289;<br align="left"/>debug residual =&gt; _291;<br align="left"/>debug val =&gt; _294;<br align="left"/>debug funding_rate_long =&gt; _295;<br align="left"/>debug funding_rate_short =&gt; _296;<br align="left"/>debug funding_imbalance_revenue =&gt; _297;<br align="left"/>debug residual =&gt; _307;<br align="left"/>debug val =&gt; _310;<br align="left"/>debug residual =&gt; _312;<br align="left"/>debug val =&gt; _315;<br align="left"/>debug funding_imbalance_cost =&gt; _319;<br align="left"/>debug residual =&gt; _330;<br align="left"/>debug val =&gt; _333;<br align="left"/>debug residual =&gt; _340;<br align="left"/>debug val =&gt; _343;<br align="left"/>debug residual =&gt; _350;<br align="left"/>debug val =&gt; _353;<br align="left"/>debug residual =&gt; _361;<br align="left"/>debug val =&gt; _364;<br align="left"/>debug residual =&gt; _370;<br align="left"/>debug val =&gt; _373;<br align="left"/>debug residual =&gt; _382;<br align="left"/>debug val =&gt; _385;<br align="left"/>debug residual =&gt; _395;<br align="left"/>debug val =&gt; _398;<br align="left"/>debug residual =&gt; _400;<br align="left"/>debug val =&gt; _403;<br align="left"/>debug current_id =&gt; _421;<br align="left"/>>;
    bb0__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_10 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb1__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;((*_2).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_13 = AMM::reserve_price(move _14)</td></tr></table>>];
    bb2__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_8 as Some).0: u64)<br/>_9 = _11<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb5__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_15 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb6__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_12 as Continue).0: u64)<br/>_9 = _19<br/>StorageDead(_19)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb8__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;(*_2)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;mut (*_3)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_2)<br/></td></tr><tr><td align="left">_31 = PerpMarket::oracle_id(move _32)</td></tr></table>>];
    bb10__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_30 = &amp;_31<br/>_29 = &amp;(*_30)<br/></td></tr><tr><td align="left">_27 = OracleMap::&lt;'_&gt;::get_price_data(move _28, move _29)</td></tr></table>>];
    bb11__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb12__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_33 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb13__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_26 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_25 = &amp;(*_37)<br/>StorageDead(_37)<br/>_24 = &amp;(*_25)<br/>StorageLive(_38)<br/>_38 = &amp;(*_6)<br/>StorageLive(_39)<br/>_39 = _9<br/>StorageLive(_40)<br/>_40 = _5<br/></td></tr><tr><td align="left">_22 = block_operation(move _23, move _24, move _38, move _39, move _40)</td></tr></table>>];
    bb14__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_36)<br/>_36 = _34<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _36)</td></tr></table>>];
    bb15__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _22)</td></tr></table>>];
    bb17__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_41 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb18__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_21 as Continue).0: bool)<br/>_20 = _45<br/>StorageDead(_45)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_21)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _4<br/>StorageLive(_50)<br/>_50 = (((*_2).1: state::perp_market::AMM).50: i64)<br/>StorageLive(_51)<br/>_51 = (((*_2).1: state::perp_market::AMM).51: i64)<br/></td></tr><tr><td align="left">_48 = on_the_hour_update(move _49, move _50, move _51)</td></tr></table>>];
    bb19__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_21 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_44)<br/>_44 = _42<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _44)</td></tr></table>>];
    bb20__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _48)</td></tr></table>>];
    bb22__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_52 = discriminant(_47)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb23__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_47 as Continue).0: i64)<br/>_46 = _56<br/>StorageDead(_56)<br/>StorageDead(_47)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = _7<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb24__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_47 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_55)<br/>_55 = _53<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb25__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = _20<br/></td></tr><tr><td align="left">switchInt(move _59)</td></tr></table>>];
    bb27__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = _46<br/>_57 = Eq(move _60, const 0_i64)<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_57 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_58)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = _57<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb30__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = &amp;mut (*_3)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = &amp;(*_2)<br/></td></tr><tr><td align="left">_69 = PerpMarket::oracle_id(move _70)</td></tr></table>>];
    bb31__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_68 = &amp;_69<br/>_67 = &amp;(*_68)<br/></td></tr><tr><td align="left">_65 = OracleMap::&lt;'_&gt;::get_price_data(move _66, move _67)</td></tr></table>>];
    bb32__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb33__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_71 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _71)</td></tr></table>>];
    bb34__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>_75 = ((_64 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_63 = _75<br/>StorageDead(_75)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_64)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = (*_2)<br/></td></tr><tr><td align="left">_78 = PerpMarket::get_sanitize_clamp_denominator(move _79)</td></tr></table>>];
    bb35__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/>_72 = ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_74)<br/>_74 = _72<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _74)</td></tr></table>>];
    bb36__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/></td></tr><tr><td align="left">_77 = &lt;std::result::Result&lt;Option&lt;i64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _78)</td></tr></table>>];
    bb38__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>_80 = discriminant(_77)<br/></td></tr><tr><td align="left">switchInt(move _80)</td></tr></table>>];
    bb39__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_84)<br/>_84 = ((_77 as Continue).0: std::option::Option&lt;i64&gt;)<br/>_76 = _84<br/>StorageDead(_84)<br/>StorageDead(_77)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_88 = &amp;(*_2)<br/>StorageLive(_89)<br/>_89 = (*_63)<br/>StorageLive(_90)<br/>_90 = _5<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>_92 = &amp;((*_6).1: state::state::ValidityGuardRails)<br/>_91 = &amp;(*_92)<br/></td></tr><tr><td align="left">_87 = PerpMarket::get_mm_oracle_price_data(move _88, move _89, move _90, move _91)</td></tr></table>>];
    bb40__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_81)<br/>_81 = ((_77 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_83)<br/>_83 = _81<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _83)</td></tr></table>>];
    bb41__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_81)<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/></td></tr><tr><td align="left">_86 = &lt;std::result::Result&lt;MMOraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _87)</td></tr></table>>];
    bb43__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>_93 = discriminant(_86)<br/></td></tr><tr><td align="left">switchInt(move _93)</td></tr></table>>];
    bb44__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_97)<br/>_97 = ((_86 as Continue).0: state::oracle::MMOraclePriceData)<br/>_85 = _97<br/>StorageDead(_97)<br/>StorageDead(_92)<br/>StorageDead(_86)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>_102 = &amp;mut ((*_2).1: state::perp_market::AMM)<br/>_101 = &amp;mut (*_102)<br/>StorageLive(_103)<br/>_103 = _4<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>_105 = &amp;_85<br/>_104 = &amp;(*_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>_107 = _9<br/>_106 = Option::&lt;u64&gt;::Some(move _107)<br/>StorageDead(_107)<br/>StorageLive(_108)<br/>_108 = _76<br/></td></tr><tr><td align="left">_100 = update_oracle_price_twap(move _101, move _103, move _104, move _106, move _108)</td></tr></table>>];
    bb45__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_94)<br/>_94 = ((_86 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_96)<br/>_96 = _94<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _96)</td></tr></table>>];
    bb46__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/>StorageDead(_94)<br/>StorageDead(_92)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_106)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/>StorageDead(_101)<br/></td></tr><tr><td align="left">_99 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _100)</td></tr></table>>];
    bb48__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>_109 = discriminant(_99)<br/></td></tr><tr><td align="left">switchInt(move _109)</td></tr></table>>];
    bb49__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_113)<br/>_113 = ((_99 as Continue).0: i64)<br/>_98 = _113<br/>StorageDead(_113)<br/>StorageDead(_105)<br/>StorageDead(_102)<br/>StorageDead(_99)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>_118 = (((*_2).1: state::perp_market::AMM).65: u32)<br/>StorageLive(_119)<br/>_119 = (((*_2).1: state::perp_market::AMM).66: u32)<br/>_117 = Gt(move _118, move _119)<br/></td></tr><tr><td align="left">switchInt(move _117)</td></tr></table>>];
    bb50__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_110)<br/>_110 = ((_99 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_112)<br/>_112 = _110<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _112)</td></tr></table>>];
    bb51__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_110)<br/>StorageDead(_105)<br/>StorageDead(_102)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_118)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = &amp;((*_2).1: state::perp_market::AMM)<br/>StorageLive(_124)<br/>_124 = _9<br/></td></tr><tr><td align="left">_122 = AMM::ask_price(move _123, move _124)</td></tr></table>>];
    bb53__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_118)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>_133 = (((*_2).1: state::perp_market::AMM).65: u32)<br/>StorageLive(_134)<br/>_134 = (((*_2).1: state::perp_market::AMM).66: u32)<br/>_132 = Lt(move _133, move _134)<br/></td></tr><tr><td align="left">switchInt(move _132)</td></tr></table>>];
    bb54__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_123)<br/></td></tr><tr><td align="left">_121 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _122)</td></tr></table>>];
    bb55__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_122)<br/>_125 = discriminant(_121)<br/></td></tr><tr><td align="left">switchInt(move _125)</td></tr></table>>];
    bb56__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageLive(_129)<br/>_129 = ((_121 as Continue).0: u64)<br/>_120 = _129<br/>StorageDead(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>_131 = controller::position::PositionDirection::Long<br/>_130 = Option::&lt;controller::position::PositionDirection&gt;::Some(move _131)<br/>StorageDead(_131)<br/>_116 = (move _120, move _130)<br/>StorageDead(_130)<br/>StorageDead(_120)<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageLive(_126)<br/>_126 = ((_121 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_128)<br/>_128 = _126<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _128)</td></tr></table>>];
    bb58__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_126)<br/>StorageDead(_120)<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_133)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>_138 = &amp;((*_2).1: state::perp_market::AMM)<br/>StorageLive(_139)<br/>_139 = _9<br/></td></tr><tr><td align="left">_137 = AMM::bid_price(move _138, move _139)</td></tr></table>>];
    bb60__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_133)<br/>StorageLive(_147)<br/>_147 = _9<br/>StorageLive(_148)<br/>_148 = Option::&lt;controller::position::PositionDirection&gt;::None<br/>_116 = (move _147, move _148)<br/>StorageDead(_148)<br/>StorageDead(_147)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/>StorageDead(_138)<br/></td></tr><tr><td align="left">_136 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _137)</td></tr></table>>];
    bb62__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_137)<br/>_140 = discriminant(_136)<br/></td></tr><tr><td align="left">switchInt(move _140)</td></tr></table>>];
    bb63__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_144)<br/>_144 = ((_136 as Continue).0: u64)<br/>_135 = _144<br/>StorageDead(_144)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>_146 = controller::position::PositionDirection::Short<br/>_145 = Option::&lt;controller::position::PositionDirection&gt;::Some(move _146)<br/>StorageDead(_146)<br/>_116 = (move _135, move _145)<br/>StorageDead(_145)<br/>StorageDead(_135)<br/>StorageDead(_136)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_141)<br/>_141 = ((_136 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_143)<br/>_143 = _141<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _143)</td></tr></table>>];
    bb65__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>StorageDead(_141)<br/>StorageDead(_135)<br/>StorageDead(_136)<br/>StorageDead(_132)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_132)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>StorageLive(_114)<br/>_114 = (_116.0: u64)<br/>StorageLive(_115)<br/>_115 = (_116.1: std::option::Option&lt;controller::position::PositionDirection&gt;)<br/>StorageDead(_116)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>_152 = (*_2)<br/></td></tr><tr><td align="left">_151 = PerpMarket::get_sanitize_clamp_denominator(move _152)</td></tr></table>>];
    bb68__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/></td></tr><tr><td align="left">_150 = &lt;std::result::Result&lt;Option&lt;i64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _151)</td></tr></table>>];
    bb69__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_151)<br/>_153 = discriminant(_150)<br/></td></tr><tr><td align="left">switchInt(move _153)</td></tr></table>>];
    bb70__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>_157 = ((_150 as Continue).0: std::option::Option&lt;i64&gt;)<br/>_149 = _157<br/>StorageDead(_157)<br/>StorageDead(_150)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>_162 = &amp;mut ((*_2).1: state::perp_market::AMM)<br/>_161 = &amp;mut (*_162)<br/>StorageLive(_163)<br/>_163 = _4<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = _114<br/>_164 = Option::&lt;u64&gt;::Some(move _165)<br/>StorageDead(_165)<br/>StorageLive(_166)<br/>_166 = _115<br/>StorageLive(_167)<br/>_167 = _149<br/></td></tr><tr><td align="left">_160 = update_mark_twap_from_estimates(move _161, move _163, move _164, move _166, move _167)</td></tr></table>>];
    bb71__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_154)<br/>_154 = ((_150 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_156)<br/>_156 = _154<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _156)</td></tr></table>>];
    bb72__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_156)<br/>StorageDead(_154)<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/>StorageDead(_166)<br/>StorageDead(_164)<br/>StorageDead(_163)<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">_159 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _160)</td></tr></table>>];
    bb74__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_160)<br/>_168 = discriminant(_159)<br/></td></tr><tr><td align="left">switchInt(move _168)</td></tr></table>>];
    bb75__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageLive(_172)<br/>_172 = ((_159 as Continue).0: u64)<br/>_158 = _172<br/>StorageDead(_172)<br/>StorageDead(_162)<br/>StorageDead(_159)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>StorageLive(_178)<br/></td></tr><tr><td align="left">_178 = &lt;i128 as SafeMath&gt;::safe_mul(const 24_i128, const _)</td></tr></table>>];
    bb76__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_169)<br/>_169 = ((_159 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_171)<br/>_171 = _169<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _171)</td></tr></table>>];
    bb77__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/>StorageDead(_169)<br/>StorageDead(_162)<br/>StorageDead(_159)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left">_177 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _178)</td></tr></table>>];
    bb79__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_178)<br/>_179 = discriminant(_177)<br/></td></tr><tr><td align="left">switchInt(move _179)</td></tr></table>>];
    bb80__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_183)<br/>_183 = ((_177 as Continue).0: i128)<br/>_176 = _183<br/>StorageDead(_183)<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>_186 = (((*_2).1: state::perp_market::AMM).51: i64)<br/>_185 = move _186 as i128 (IntToInt)<br/>StorageDead(_186)<br/></td></tr><tr><td align="left">_184 = std::cmp::max::&lt;i128&gt;(const _, move _185)</td></tr></table>>];
    bb81__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_180)<br/>_180 = ((_177 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_182)<br/>_182 = _180<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _182)</td></tr></table>>];
    bb82__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_182)<br/>StorageDead(_180)<br/>StorageDead(_176)<br/>StorageDead(_175)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_185)<br/></td></tr><tr><td align="left">_175 = &lt;i128 as SafeMath&gt;::safe_div(move _176, move _184)</td></tr></table>>];
    bb84__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>StorageDead(_176)<br/></td></tr><tr><td align="left">_174 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _175)</td></tr></table>>];
    bb85__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_175)<br/>_187 = discriminant(_174)<br/></td></tr><tr><td align="left">switchInt(move _187)</td></tr></table>>];
    bb86__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageLive(_191)<br/>_191 = ((_174 as Continue).0: i128)<br/>_173 = _191<br/>StorageDead(_191)<br/>StorageDead(_177)<br/>StorageDead(_174)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>_198 = _158<br/></td></tr><tr><td align="left">_197 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _198)</td></tr></table>>];
    bb87__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageLive(_188)<br/>_188 = ((_174 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_190)<br/>_190 = _188<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _190)</td></tr></table>>];
    bb88__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_190)<br/>StorageDead(_188)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb89__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/></td></tr><tr><td align="left">_196 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _197)</td></tr></table>>];
    bb90__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_197)<br/>_199 = discriminant(_196)<br/></td></tr><tr><td align="left">switchInt(move _199)</td></tr></table>>];
    bb91__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_203)<br/>_203 = ((_196 as Continue).0: i64)<br/>_195 = _203<br/>StorageDead(_203)<br/>StorageLive(_204)<br/>_204 = _98<br/></td></tr><tr><td align="left">_194 = &lt;i64 as SafeMath&gt;::safe_sub(move _195, move _204)</td></tr></table>>];
    bb92__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageLive(_200)<br/>_200 = ((_196 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_202)<br/>_202 = _200<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _202)</td></tr></table>>];
    bb93__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_202)<br/>StorageDead(_200)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb94__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_204)<br/>StorageDead(_195)<br/></td></tr><tr><td align="left">_193 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _194)</td></tr></table>>];
    bb95__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_194)<br/>_205 = discriminant(_193)<br/></td></tr><tr><td align="left">switchInt(move _205)</td></tr></table>>];
    bb96__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageLive(_209)<br/>_209 = ((_193 as Continue).0: i64)<br/>_192 = _209<br/>StorageDead(_209)<br/>StorageDead(_196)<br/>StorageDead(_193)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>_213 = _192<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>StorageLive(_218)<br/>_218 = _98<br/></td></tr><tr><td align="left">_217 = core::num::&lt;impl i64&gt;::abs(move _218)</td></tr></table>>];
    bb97__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageLive(_206)<br/>_206 = ((_193 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_208)<br/>_208 = _206<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _208)</td></tr></table>>];
    bb98__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_208)<br/>StorageDead(_206)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb99__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_218)<br/></td></tr><tr><td align="left">_216 = &lt;i64 as SafeMath&gt;::safe_div(move _217, const _)</td></tr></table>>];
    bb100__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_217)<br/></td></tr><tr><td align="left">_215 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _216)</td></tr></table>>];
    bb101__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_216)<br/>_219 = discriminant(_215)<br/></td></tr><tr><td align="left">switchInt(move _219)</td></tr></table>>];
    bb102__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageLive(_223)<br/>_223 = ((_215 as Continue).0: i64)<br/>_214 = _223<br/>StorageDead(_223)<br/></td></tr><tr><td align="left">_212 = &lt;i64 as SafeMath&gt;::safe_add(move _213, move _214)</td></tr></table>>];
    bb103__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageLive(_220)<br/>_220 = ((_215 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_222)<br/>_222 = _220<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _222)</td></tr></table>>];
    bb104__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_222)<br/>StorageDead(_220)<br/>StorageDead(_214)<br/>StorageDead(_213)<br/>StorageDead(_212)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb105__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_214)<br/>StorageDead(_213)<br/></td></tr><tr><td align="left">_211 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _212)</td></tr></table>>];
    bb106__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_212)<br/>_224 = discriminant(_211)<br/></td></tr><tr><td align="left">switchInt(move _224)</td></tr></table>>];
    bb107__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageLive(_228)<br/>_228 = ((_211 as Continue).0: i64)<br/>_210 = _228<br/>StorageDead(_228)<br/>StorageDead(_215)<br/>StorageDead(_211)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>StorageLive(_231)<br/>StorageLive(_232)<br/>_232 = (*_2)<br/>StorageLive(_233)<br/>_233 = _98<br/></td></tr><tr><td align="left">_231 = PerpMarket::get_max_price_divergence_for_funding_rate(move _232, move _233)</td></tr></table>>];
    bb108__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageLive(_225)<br/>_225 = ((_211 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_227)<br/>_227 = _225<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _227)</td></tr></table>>];
    bb109__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_227)<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb110__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>StorageDead(_232)<br/></td></tr><tr><td align="left">_230 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _231)</td></tr></table>>];
    bb111__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_231)<br/>_234 = discriminant(_230)<br/></td></tr><tr><td align="left">switchInt(move _234)</td></tr></table>>];
    bb112__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageLive(_238)<br/>_238 = ((_230 as Continue).0: i64)<br/>_229 = _238<br/>StorageDead(_238)<br/>StorageDead(_230)<br/>StorageLive(_239)<br/>StorageLive(_240)<br/>_240 = _210<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>_242 = _229<br/>_243 = Eq(_242, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _243, &quot;attempt to negate `{}`, which would overflow&quot;, _242)</td></tr></table>>];
    bb113__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageLive(_235)<br/>_235 = ((_230 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_237)<br/>_237 = _235<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _237)</td></tr></table>>];
    bb114__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_237)<br/>StorageDead(_235)<br/>StorageDead(_230)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">_241 = Neg(move _242)<br/>StorageDead(_242)<br/>StorageLive(_244)<br/>_244 = _229<br/></td></tr><tr><td align="left">_239 = &lt;i64 as Ord&gt;::clamp(move _240, move _241, move _244)</td></tr></table>>];
    bb116__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_244)<br/>StorageDead(_241)<br/>StorageDead(_240)<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>StorageLive(_247)<br/>StorageLive(_248)<br/>StorageLive(_249)<br/>StorageLive(_250)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>StorageLive(_255)<br/>StorageLive(_256)<br/>StorageLive(_257)<br/>_257 = _239<br/></td></tr><tr><td align="left">_256 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _257)</td></tr></table>>];
    bb117__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_257)<br/></td></tr><tr><td align="left">_255 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _256)</td></tr></table>>];
    bb118__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_256)<br/>_258 = discriminant(_255)<br/></td></tr><tr><td align="left">switchInt(move _258)</td></tr></table>>];
    bb119__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageLive(_262)<br/>_262 = ((_255 as Continue).0: i128)<br/>_254 = _262<br/>StorageDead(_262)<br/>StorageLive(_263)<br/>StorageLive(_264)<br/>StorageLive(_265)<br/></td></tr><tr><td align="left">_265 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(const _)</td></tr></table>>];
    bb120__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageLive(_259)<br/>_259 = ((_255 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_261)<br/>_261 = _259<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _261)</td></tr></table>>];
    bb121__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_261)<br/>StorageDead(_259)<br/>StorageDead(_254)<br/>StorageDead(_253)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/>StorageDead(_248)<br/>StorageDead(_247)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left">_264 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _265)</td></tr></table>>];
    bb123__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_265)<br/>_266 = discriminant(_264)<br/></td></tr><tr><td align="left">switchInt(move _266)</td></tr></table>>];
    bb124__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_270)<br/>_270 = ((_264 as Continue).0: i128)<br/>_263 = _270<br/>StorageDead(_270)<br/></td></tr><tr><td align="left">_253 = &lt;i128 as SafeMath&gt;::safe_mul(move _254, move _263)</td></tr></table>>];
    bb125__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageLive(_267)<br/>_267 = ((_264 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_269)<br/>_269 = _267<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _269)</td></tr></table>>];
    bb126__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_269)<br/>StorageDead(_267)<br/>StorageDead(_263)<br/>StorageDead(_254)<br/>StorageDead(_253)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb127__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_263)<br/>StorageDead(_254)<br/></td></tr><tr><td align="left">_252 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _253)</td></tr></table>>];
    bb128__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_253)<br/>_271 = discriminant(_252)<br/></td></tr><tr><td align="left">switchInt(move _271)</td></tr></table>>];
    bb129__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageLive(_275)<br/>_275 = ((_252 as Continue).0: i128)<br/>_251 = _275<br/>StorageDead(_275)<br/>StorageLive(_276)<br/>StorageLive(_277)<br/>StorageLive(_278)<br/>StorageLive(_279)<br/>_279 = _173<br/></td></tr><tr><td align="left">_278 = &lt;i128 as Cast&gt;::cast::&lt;i128&gt;(move _279)</td></tr></table>>];
    bb130__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageLive(_272)<br/>_272 = ((_252 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_274)<br/>_274 = _272<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _274)</td></tr></table>>];
    bb131__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_274)<br/>StorageDead(_272)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb132__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_279)<br/></td></tr><tr><td align="left">_277 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _278)</td></tr></table>>];
    bb133__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_278)<br/>_280 = discriminant(_277)<br/></td></tr><tr><td align="left">switchInt(move _280)</td></tr></table>>];
    bb134__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageLive(_284)<br/>_284 = ((_277 as Continue).0: i128)<br/>_276 = _284<br/>StorageDead(_284)<br/></td></tr><tr><td align="left">_250 = &lt;i128 as SafeMath&gt;::safe_div(move _251, move _276)</td></tr></table>>];
    bb135__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageLive(_281)<br/>_281 = ((_277 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_283)<br/>_283 = _281<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _283)</td></tr></table>>];
    bb136__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_283)<br/>StorageDead(_281)<br/>StorageDead(_276)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb137__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_276)<br/>StorageDead(_251)<br/></td></tr><tr><td align="left">_249 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _250)</td></tr></table>>];
    bb138__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_250)<br/>_285 = discriminant(_249)<br/></td></tr><tr><td align="left">switchInt(move _285)</td></tr></table>>];
    bb139__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_289)<br/>_289 = ((_249 as Continue).0: i128)<br/>_248 = _289<br/>StorageDead(_289)<br/></td></tr><tr><td align="left">_247 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _248)</td></tr></table>>];
    bb140__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageLive(_286)<br/>_286 = ((_249 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_288)<br/>_288 = _286<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _288)</td></tr></table>>];
    bb141__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_288)<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageDead(_248)<br/></td></tr><tr><td align="left">_246 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _247)</td></tr></table>>];
    bb143__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>_290 = discriminant(_246)<br/></td></tr><tr><td align="left">switchInt(move _290)</td></tr></table>>];
    bb144__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageLive(_294)<br/>_294 = ((_246 as Continue).0: i64)<br/>_245 = _294<br/>StorageDead(_294)<br/>StorageDead(_277)<br/>StorageDead(_264)<br/>StorageDead(_255)<br/>StorageDead(_252)<br/>StorageDead(_249)<br/>StorageDead(_246)<br/>StorageLive(_298)<br/>StorageLive(_299)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>_301 = &amp;mut (*_2)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>StorageLive(_305)<br/>_305 = _245<br/></td></tr><tr><td align="left">_304 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _305)</td></tr></table>>];
    bb145__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageLive(_291)<br/>_291 = ((_246 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_293)<br/>_293 = _291<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _293)</td></tr></table>>];
    bb146__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_293)<br/>StorageDead(_291)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb147__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_305)<br/></td></tr><tr><td align="left">_303 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _304)</td></tr></table>>];
    bb148__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageDead(_304)<br/>_306 = discriminant(_303)<br/></td></tr><tr><td align="left">switchInt(move _306)</td></tr></table>>];
    bb149__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageLive(_310)<br/>_310 = ((_303 as Continue).0: i128)<br/>_302 = _310<br/>StorageDead(_310)<br/></td></tr><tr><td align="left">_300 = calculate_funding_rate_long_short(move _301, move _302)</td></tr></table>>];
    bb150__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageLive(_307)<br/>_307 = ((_303 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_309)<br/>_309 = _307<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _309)</td></tr></table>>];
    bb151__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_309)<br/>StorageDead(_307)<br/>StorageDead(_302)<br/>StorageDead(_301)<br/>StorageDead(_300)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb152__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_302)<br/>StorageDead(_301)<br/></td></tr><tr><td align="left">_299 = &lt;std::result::Result&lt;(i128, i128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _300)</td></tr></table>>];
    bb153__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageDead(_300)<br/>_311 = discriminant(_299)<br/></td></tr><tr><td align="left">switchInt(move _311)</td></tr></table>>];
    bb154__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageLive(_315)<br/>_315 = ((_299 as Continue).0: (i128, i128, i128))<br/>_298 = _315<br/>StorageDead(_315)<br/>StorageLive(_295)<br/>_295 = (_298.0: i128)<br/>StorageLive(_296)<br/>_296 = (_298.1: i128)<br/>StorageLive(_297)<br/>_297 = (_298.2: i128)<br/>StorageDead(_303)<br/>StorageDead(_299)<br/>StorageDead(_298)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>StorageLive(_318)<br/>_318 = (((*_2).1: state::perp_market::AMM).70: u8)<br/>_317 = Gt(move _318, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _317)</td></tr></table>>];
    bb155__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageLive(_312)<br/>_312 = ((_299 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_314)<br/>_314 = _312<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _314)</td></tr></table>>];
    bb156__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/>StorageDead(_312)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb157__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_318)<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>_320 = _297<br/>_321 = Eq(_320, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _321, &quot;attempt to negate `{}`, which would overflow&quot;, _320)</td></tr></table>>];
    bb158__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_318)<br/>_316 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb159__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">_319 = Neg(move _320)<br/>StorageDead(_320)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>StorageLive(_325)<br/>_325 = &amp;mut (*_2)<br/>StorageLive(_326)<br/>_326 = &amp;(*_63)<br/>StorageLive(_327)<br/>_327 = _319<br/>StorageLive(_328)<br/>_328 = _4<br/></td></tr><tr><td align="left">_324 = formulaic_update_k(move _325, move _326, move _327, move _328)</td></tr></table>>];
    bb160__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageDead(_328)<br/>StorageDead(_327)<br/>StorageDead(_326)<br/>StorageDead(_325)<br/></td></tr><tr><td align="left">_323 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _324)</td></tr></table>>];
    bb161__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_324)<br/>_329 = discriminant(_323)<br/></td></tr><tr><td align="left">switchInt(move _329)</td></tr></table>>];
    bb162__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageLive(_333)<br/>_333 = ((_323 as Continue).0: ())<br/>_322 = _333<br/>StorageDead(_333)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>_316 = const ()<br/>StorageDead(_319)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb163__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageLive(_330)<br/>_330 = ((_323 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_332)<br/>_332 = _330<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _332)</td></tr></table>>];
    bb164__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_332)<br/>StorageDead(_330)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>StorageDead(_319)<br/>StorageDead(_317)<br/>StorageDead(_316)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb165__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_317)<br/>StorageDead(_316)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>_337 = (((*_2).1: state::perp_market::AMM).34: i128)<br/>StorageLive(_338)<br/>_338 = _295<br/></td></tr><tr><td align="left">_336 = &lt;i128 as SafeMath&gt;::safe_add(move _337, move _338)</td></tr></table>>];
    bb166__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_338)<br/>StorageDead(_337)<br/></td></tr><tr><td align="left">_335 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _336)</td></tr></table>>];
    bb167__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_336)<br/>_339 = discriminant(_335)<br/></td></tr><tr><td align="left">switchInt(move _339)</td></tr></table>>];
    bb168__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageLive(_343)<br/>_343 = ((_335 as Continue).0: i128)<br/>_334 = _343<br/>StorageDead(_343)<br/>(((*_2).1: state::perp_market::AMM).34: i128) = move _334<br/>StorageDead(_334)<br/>StorageDead(_335)<br/>StorageLive(_344)<br/>StorageLive(_345)<br/>StorageLive(_346)<br/>StorageLive(_347)<br/>_347 = (((*_2).1: state::perp_market::AMM).35: i128)<br/>StorageLive(_348)<br/>_348 = _296<br/></td></tr><tr><td align="left">_346 = &lt;i128 as SafeMath&gt;::safe_add(move _347, move _348)</td></tr></table>>];
    bb169__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageLive(_340)<br/>_340 = ((_335 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_342)<br/>_342 = _340<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _342)</td></tr></table>>];
    bb170__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_342)<br/>StorageDead(_340)<br/>StorageDead(_334)<br/>StorageDead(_335)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb171__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_348)<br/>StorageDead(_347)<br/></td></tr><tr><td align="left">_345 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _346)</td></tr></table>>];
    bb172__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_346)<br/>_349 = discriminant(_345)<br/></td></tr><tr><td align="left">switchInt(move _349)</td></tr></table>>];
    bb173__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageLive(_353)<br/>_353 = ((_345 as Continue).0: i128)<br/>_344 = _353<br/>StorageDead(_353)<br/>(((*_2).1: state::perp_market::AMM).35: i128) = move _344<br/>StorageDead(_344)<br/>StorageDead(_345)<br/>StorageLive(_354)<br/>_354 = _245<br/>(((*_2).1: state::perp_market::AMM).24: i64) = move _354<br/>StorageDead(_354)<br/>StorageLive(_355)<br/>_355 = _98<br/>(((*_2).1: state::perp_market::AMM).85: i64) = move _355<br/>StorageDead(_355)<br/>StorageLive(_356)<br/>StorageLive(_357)<br/>StorageLive(_358)<br/>StorageLive(_359)<br/>_359 = _295<br/></td></tr><tr><td align="left">_358 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _359)</td></tr></table>>];
    bb174__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageLive(_350)<br/>_350 = ((_345 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_352)<br/>_352 = _350<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _352)</td></tr></table>>];
    bb175__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageDead(_352)<br/>StorageDead(_350)<br/>StorageDead(_344)<br/>StorageDead(_345)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb176__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_359)<br/></td></tr><tr><td align="left">_357 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _358)</td></tr></table>>];
    bb177__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageDead(_358)<br/>_360 = discriminant(_357)<br/></td></tr><tr><td align="left">switchInt(move _360)</td></tr></table>>];
    bb178__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageLive(_364)<br/>_364 = ((_357 as Continue).0: i64)<br/>_356 = _364<br/>StorageDead(_364)<br/>(((*_2).1: state::perp_market::AMM).25: i64) = move _356<br/>StorageDead(_356)<br/>StorageDead(_357)<br/>StorageLive(_365)<br/>StorageLive(_366)<br/>StorageLive(_367)<br/>StorageLive(_368)<br/>_368 = _296<br/></td></tr><tr><td align="left">_367 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _368)</td></tr></table>>];
    bb179__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageLive(_361)<br/>_361 = ((_357 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_363)<br/>_363 = _361<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _363)</td></tr></table>>];
    bb180__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_363)<br/>StorageDead(_361)<br/>StorageDead(_356)<br/>StorageDead(_357)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb181__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_368)<br/></td></tr><tr><td align="left">_366 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _367)</td></tr></table>>];
    bb182__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageDead(_367)<br/>_369 = discriminant(_366)<br/></td></tr><tr><td align="left">switchInt(move _369)</td></tr></table>>];
    bb183__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageLive(_373)<br/>_373 = ((_366 as Continue).0: i64)<br/>_365 = _373<br/>StorageDead(_373)<br/>(((*_2).1: state::perp_market::AMM).26: i64) = move _365<br/>StorageDead(_365)<br/>StorageDead(_366)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>StorageLive(_376)<br/>StorageLive(_377)<br/>_377 = _245<br/>StorageLive(_378)<br/>_378 = _4<br/>StorageLive(_379)<br/>_379 = (((*_2).1: state::perp_market::AMM).27: i64)<br/>StorageLive(_380)<br/>_380 = (((*_2).1: state::perp_market::AMM).50: i64)<br/></td></tr><tr><td align="left">_376 = calculate_new_twap(move _377, move _378, move _379, move _380, const _)</td></tr></table>>];
    bb184__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageLive(_370)<br/>_370 = ((_366 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_372)<br/>_372 = _370<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _372)</td></tr></table>>];
    bb185__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_372)<br/>StorageDead(_370)<br/>StorageDead(_365)<br/>StorageDead(_366)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb186__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_380)<br/>StorageDead(_379)<br/>StorageDead(_378)<br/>StorageDead(_377)<br/></td></tr><tr><td align="left">_375 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _376)</td></tr></table>>];
    bb187__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageDead(_376)<br/>_381 = discriminant(_375)<br/></td></tr><tr><td align="left">switchInt(move _381)</td></tr></table>>];
    bb188__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageLive(_385)<br/>_385 = ((_375 as Continue).0: i64)<br/>_374 = _385<br/>StorageDead(_385)<br/>(((*_2).1: state::perp_market::AMM).27: i64) = move _374<br/>StorageDead(_374)<br/>StorageDead(_375)<br/>StorageLive(_386)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>_389 = (((*_2).1: state::perp_market::AMM).80: i64)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>StorageLive(_392)<br/>StorageLive(_393)<br/>_393 = _297<br/></td></tr><tr><td align="left">_392 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _393)</td></tr></table>>];
    bb189__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageLive(_382)<br/>_382 = ((_375 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_384)<br/>_384 = _382<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _384)</td></tr></table>>];
    bb190__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_384)<br/>StorageDead(_382)<br/>StorageDead(_374)<br/>StorageDead(_375)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb191__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_393)<br/></td></tr><tr><td align="left">_391 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _392)</td></tr></table>>];
    bb192__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>_394 = discriminant(_391)<br/></td></tr><tr><td align="left">switchInt(move _394)</td></tr></table>>];
    bb193__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageLive(_398)<br/>_398 = ((_391 as Continue).0: i64)<br/>_390 = _398<br/>StorageDead(_398)<br/></td></tr><tr><td align="left">_388 = &lt;i64 as SafeMath&gt;::safe_sub(move _389, move _390)</td></tr></table>>];
    bb194__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageLive(_395)<br/>_395 = ((_391 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_397)<br/>_397 = _395<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _397)</td></tr></table>>];
    bb195__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_397)<br/>StorageDead(_395)<br/>StorageDead(_390)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb196__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_390)<br/>StorageDead(_389)<br/></td></tr><tr><td align="left">_387 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _388)</td></tr></table>>];
    bb197__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_388)<br/>_399 = discriminant(_387)<br/></td></tr><tr><td align="left">switchInt(move _399)</td></tr></table>>];
    bb198__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageLive(_403)<br/>_403 = ((_387 as Continue).0: i64)<br/>_386 = _403<br/>StorageDead(_403)<br/>(((*_2).1: state::perp_market::AMM).80: i64) = move _386<br/>StorageDead(_386)<br/>StorageDead(_391)<br/>StorageDead(_387)<br/>StorageLive(_404)<br/>_404 = _4<br/>(((*_2).1: state::perp_market::AMM).50: i64) = move _404<br/>StorageDead(_404)<br/>StorageLive(_405)<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>StorageLive(_409)<br/>StorageLive(_410)<br/>StorageLive(_411)<br/>StorageLive(_412)<br/>StorageLive(_413)<br/>StorageLive(_414)<br/>StorageLive(_415)<br/>StorageLive(_416)<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>StorageLive(_419)<br/>_419 = _4<br/>StorageLive(_420)<br/>StorageLive(_421)<br/>_421 = ((*_2).9: u64)<br/>StorageLive(_422)<br/>StorageLive(_423)<br/>StorageLive(_424)<br/>StorageLive(_425)<br/>_425 = _421<br/></td></tr><tr><td align="left">_424 = core::num::&lt;impl u64&gt;::checked_add(move _425, const 1_u64)</td></tr></table>>];
    bb199__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageLive(_400)<br/>_400 = ((_387 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_402)<br/>_402 = _400<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _402)</td></tr></table>>];
    bb200__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_402)<br/>StorageDead(_400)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb201__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_425)<br/>StorageLive(_426)<br/>_426 = Option::&lt;u64&gt;::Some(const 1_u64)<br/></td></tr><tr><td align="left">_423 = Option::&lt;u64&gt;::or(move _424, move _426)</td></tr></table>>];
    bb202__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_426)<br/>StorageDead(_424)<br/></td></tr><tr><td align="left">_422 = Option::&lt;u64&gt;::unwrap(move _423)</td></tr></table>>];
    bb203__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_423)<br/>((*_2).9: u64) = move _422<br/>StorageDead(_422)<br/>_420 = _421<br/>StorageDead(_421)<br/>StorageLive(_427)<br/>_427 = _1<br/>StorageLive(_428)<br/>_428 = _245<br/>StorageLive(_429)<br/>_429 = _295<br/>StorageLive(_430)<br/>_430 = _296<br/>StorageLive(_431)<br/>_431 = (((*_2).1: state::perp_market::AMM).34: i128)<br/>StorageLive(_432)<br/>_432 = (((*_2).1: state::perp_market::AMM).35: i128)<br/>StorageLive(_433)<br/>_433 = _158<br/>StorageLive(_434)<br/>_434 = _98<br/>StorageLive(_435)<br/>_435 = (((*_2).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_436)<br/>_436 = (((*_2).1: state::perp_market::AMM).15: i128)<br/>StorageLive(_437)<br/>_437 = (((*_2).1: state::perp_market::AMM).16: i128)<br/>_418 = FundingRateRecord { ts: move _419, record_id: move _420, market_index: move _427, funding_rate: move _428, funding_rate_long: move _429, funding_rate_short: move _430, cumulative_funding_rate_long: move _431, cumulative_funding_rate_short: move _432, oracle_price_twap: move _434, mark_price_twap: move _433, period_revenue: move _435, base_asset_amount_with_amm: move _436, base_asset_amount_with_unsettled_lp: move _437 }<br/>StorageDead(_437)<br/>StorageDead(_436)<br/>StorageDead(_435)<br/>StorageDead(_434)<br/>StorageDead(_433)<br/>StorageDead(_432)<br/>StorageDead(_431)<br/>StorageDead(_430)<br/>StorageDead(_429)<br/>StorageDead(_428)<br/>StorageDead(_427)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/>_417 = &amp;_418<br/>_416 = &amp;(*_417)<br/></td></tr><tr><td align="left">_415 = &lt;FundingRateRecord as anchor_lang::Event&gt;::data(move _416)</td></tr></table>>];
    bb204__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageDead(_416)<br/>_414 = &amp;_415<br/>_413 = &amp;(*_414)<br/></td></tr><tr><td align="left">_412 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _413)</td></tr></table>>];
    bb205__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">_411 = &amp;(*_412)<br/>StorageDead(_413)<br/>_410 = [move _411]<br/>StorageDead(_411)<br/>_409 = &amp;_410<br/>_408 = &amp;(*_409)<br/>_407 = move _408 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_408)<br/></td></tr><tr><td align="left">_406 = solana_program::log::sol_log_data(move _407)</td></tr></table>>];
    bb206__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_407)<br/></td></tr><tr><td align="left">drop(_415)</td></tr></table>>];
    bb207__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_418)<br/>StorageDead(_417)<br/>StorageDead(_415)<br/>StorageDead(_414)<br/>StorageDead(_412)<br/>StorageDead(_410)<br/>StorageDead(_409)<br/>StorageDead(_406)<br/>_405 = const ()<br/>StorageDead(_405)<br/>(((*_2).1: state::perp_market::AMM).49: i64) = const 0_i64<br/>_61 = const ()<br/>StorageDead(_297)<br/>StorageDead(_296)<br/>StorageDead(_295)<br/>StorageDead(_245)<br/>StorageDead(_239)<br/>StorageDead(_229)<br/>StorageDead(_210)<br/>StorageDead(_192)<br/>StorageDead(_173)<br/>StorageDead(_158)<br/>StorageDead(_149)<br/>StorageDead(_115)<br/>StorageDead(_114)<br/>StorageDead(_98)<br/>StorageDead(_85)<br/>StorageDead(_76)<br/>StorageDead(_63)<br/>StorageDead(_62)<br/>StorageDead(_61)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_57)<br/>StorageDead(_46)<br/>StorageDead(_20)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb208__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const false)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb209__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_386)<br/>StorageDead(_391)<br/>StorageDead(_387)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb210__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageDead(_297)<br/>StorageDead(_296)<br/>StorageDead(_295)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb211__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageDead(_303)<br/>StorageDead(_299)<br/>StorageDead(_298)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb212__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_248)<br/>StorageDead(_247)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_277)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb214__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageDead(_251)<br/>StorageDead(_250)<br/>StorageDead(_248)<br/>StorageDead(_247)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb215__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageDead(_264)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb216__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/>StorageDead(_252)<br/>StorageDead(_249)<br/>StorageDead(_246)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb217__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/>StorageDead(_239)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb218__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageDead(_229)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb219__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_215)<br/>StorageDead(_211)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb220__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_210)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb221__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_196)<br/>StorageDead(_193)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb222__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageDead(_192)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb223__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/>StorageDead(_174)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb224__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb225__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageDead(_158)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb226__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_115)<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb227__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>StorageDead(_116)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb228__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb229__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb230__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb231__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb232__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_61)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb233__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb234__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb235__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb236__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb237__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left">return</td></tr></table>>];
    bb238__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">238 (cleanup)</td></tr><tr><td align="left">drop(_415)</td></tr></table>>];
    bb239__0_134 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">239 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_134 -> bb1__0_134 [label="0"];
    bb0__0_134 -> bb3__0_134 [label="1"];
    bb0__0_134 -> bb2__0_134 [label="otherwise"];
    bb1__0_134 -> bb4__0_134 [label="return"];
    bb3__0_134 -> bb9__0_134 [label=""];
    bb4__0_134 -> bb5__0_134 [label="return"];
    bb5__0_134 -> bb6__0_134 [label="0"];
    bb5__0_134 -> bb7__0_134 [label="1"];
    bb5__0_134 -> bb2__0_134 [label="otherwise"];
    bb6__0_134 -> bb9__0_134 [label=""];
    bb7__0_134 -> bb8__0_134 [label="return"];
    bb8__0_134 -> bb236__0_134 [label=""];
    bb9__0_134 -> bb10__0_134 [label="return"];
    bb10__0_134 -> bb11__0_134 [label="return"];
    bb11__0_134 -> bb12__0_134 [label="return"];
    bb12__0_134 -> bb13__0_134 [label="0"];
    bb12__0_134 -> bb14__0_134 [label="1"];
    bb12__0_134 -> bb2__0_134 [label="otherwise"];
    bb13__0_134 -> bb16__0_134 [label="return"];
    bb14__0_134 -> bb15__0_134 [label="return"];
    bb15__0_134 -> bb234__0_134 [label=""];
    bb16__0_134 -> bb17__0_134 [label="return"];
    bb17__0_134 -> bb18__0_134 [label="0"];
    bb17__0_134 -> bb19__0_134 [label="1"];
    bb17__0_134 -> bb2__0_134 [label="otherwise"];
    bb18__0_134 -> bb21__0_134 [label="return"];
    bb19__0_134 -> bb20__0_134 [label="return"];
    bb20__0_134 -> bb234__0_134 [label=""];
    bb21__0_134 -> bb22__0_134 [label="return"];
    bb22__0_134 -> bb23__0_134 [label="0"];
    bb22__0_134 -> bb24__0_134 [label="1"];
    bb22__0_134 -> bb2__0_134 [label="otherwise"];
    bb23__0_134 -> bb26__0_134 [label="0"];
    bb23__0_134 -> bb28__0_134 [label="otherwise"];
    bb24__0_134 -> bb25__0_134 [label="return"];
    bb25__0_134 -> bb233__0_134 [label=""];
    bb26__0_134 -> bb27__0_134 [label="0"];
    bb26__0_134 -> bb28__0_134 [label="otherwise"];
    bb27__0_134 -> bb29__0_134 [label=""];
    bb28__0_134 -> bb29__0_134 [label=""];
    bb29__0_134 -> bb208__0_134 [label="0"];
    bb29__0_134 -> bb30__0_134 [label="otherwise"];
    bb30__0_134 -> bb31__0_134 [label="return"];
    bb31__0_134 -> bb32__0_134 [label="return"];
    bb32__0_134 -> bb33__0_134 [label="return"];
    bb33__0_134 -> bb34__0_134 [label="0"];
    bb33__0_134 -> bb35__0_134 [label="1"];
    bb33__0_134 -> bb2__0_134 [label="otherwise"];
    bb34__0_134 -> bb37__0_134 [label="return"];
    bb35__0_134 -> bb36__0_134 [label="return"];
    bb36__0_134 -> bb231__0_134 [label=""];
    bb37__0_134 -> bb38__0_134 [label="return"];
    bb38__0_134 -> bb39__0_134 [label="0"];
    bb38__0_134 -> bb40__0_134 [label="1"];
    bb38__0_134 -> bb2__0_134 [label="otherwise"];
    bb39__0_134 -> bb42__0_134 [label="return"];
    bb40__0_134 -> bb41__0_134 [label="return"];
    bb41__0_134 -> bb230__0_134 [label=""];
    bb42__0_134 -> bb43__0_134 [label="return"];
    bb43__0_134 -> bb44__0_134 [label="0"];
    bb43__0_134 -> bb45__0_134 [label="1"];
    bb43__0_134 -> bb2__0_134 [label="otherwise"];
    bb44__0_134 -> bb47__0_134 [label="return"];
    bb45__0_134 -> bb46__0_134 [label="return"];
    bb46__0_134 -> bb229__0_134 [label=""];
    bb47__0_134 -> bb48__0_134 [label="return"];
    bb48__0_134 -> bb49__0_134 [label="0"];
    bb48__0_134 -> bb50__0_134 [label="1"];
    bb48__0_134 -> bb2__0_134 [label="otherwise"];
    bb49__0_134 -> bb53__0_134 [label="0"];
    bb49__0_134 -> bb52__0_134 [label="otherwise"];
    bb50__0_134 -> bb51__0_134 [label="return"];
    bb51__0_134 -> bb228__0_134 [label=""];
    bb52__0_134 -> bb54__0_134 [label="return"];
    bb53__0_134 -> bb60__0_134 [label="0"];
    bb53__0_134 -> bb59__0_134 [label="otherwise"];
    bb54__0_134 -> bb55__0_134 [label="return"];
    bb55__0_134 -> bb56__0_134 [label="0"];
    bb55__0_134 -> bb57__0_134 [label="1"];
    bb55__0_134 -> bb2__0_134 [label="otherwise"];
    bb56__0_134 -> bb67__0_134 [label=""];
    bb57__0_134 -> bb58__0_134 [label="return"];
    bb58__0_134 -> bb227__0_134 [label=""];
    bb59__0_134 -> bb61__0_134 [label="return"];
    bb60__0_134 -> bb66__0_134 [label=""];
    bb61__0_134 -> bb62__0_134 [label="return"];
    bb62__0_134 -> bb63__0_134 [label="0"];
    bb62__0_134 -> bb64__0_134 [label="1"];
    bb62__0_134 -> bb2__0_134 [label="otherwise"];
    bb63__0_134 -> bb66__0_134 [label=""];
    bb64__0_134 -> bb65__0_134 [label="return"];
    bb65__0_134 -> bb227__0_134 [label=""];
    bb66__0_134 -> bb67__0_134 [label=""];
    bb67__0_134 -> bb68__0_134 [label="return"];
    bb68__0_134 -> bb69__0_134 [label="return"];
    bb69__0_134 -> bb70__0_134 [label="0"];
    bb69__0_134 -> bb71__0_134 [label="1"];
    bb69__0_134 -> bb2__0_134 [label="otherwise"];
    bb70__0_134 -> bb73__0_134 [label="return"];
    bb71__0_134 -> bb72__0_134 [label="return"];
    bb72__0_134 -> bb226__0_134 [label=""];
    bb73__0_134 -> bb74__0_134 [label="return"];
    bb74__0_134 -> bb75__0_134 [label="0"];
    bb74__0_134 -> bb76__0_134 [label="1"];
    bb74__0_134 -> bb2__0_134 [label="otherwise"];
    bb75__0_134 -> bb78__0_134 [label="return"];
    bb76__0_134 -> bb77__0_134 [label="return"];
    bb77__0_134 -> bb225__0_134 [label=""];
    bb78__0_134 -> bb79__0_134 [label="return"];
    bb79__0_134 -> bb80__0_134 [label="0"];
    bb79__0_134 -> bb81__0_134 [label="1"];
    bb79__0_134 -> bb2__0_134 [label="otherwise"];
    bb80__0_134 -> bb83__0_134 [label="return"];
    bb81__0_134 -> bb82__0_134 [label="return"];
    bb82__0_134 -> bb223__0_134 [label=""];
    bb83__0_134 -> bb84__0_134 [label="return"];
    bb84__0_134 -> bb85__0_134 [label="return"];
    bb85__0_134 -> bb86__0_134 [label="0"];
    bb85__0_134 -> bb87__0_134 [label="1"];
    bb85__0_134 -> bb2__0_134 [label="otherwise"];
    bb86__0_134 -> bb89__0_134 [label="return"];
    bb87__0_134 -> bb88__0_134 [label="return"];
    bb88__0_134 -> bb223__0_134 [label=""];
    bb89__0_134 -> bb90__0_134 [label="return"];
    bb90__0_134 -> bb91__0_134 [label="0"];
    bb90__0_134 -> bb92__0_134 [label="1"];
    bb90__0_134 -> bb2__0_134 [label="otherwise"];
    bb91__0_134 -> bb94__0_134 [label="return"];
    bb92__0_134 -> bb93__0_134 [label="return"];
    bb93__0_134 -> bb221__0_134 [label=""];
    bb94__0_134 -> bb95__0_134 [label="return"];
    bb95__0_134 -> bb96__0_134 [label="0"];
    bb95__0_134 -> bb97__0_134 [label="1"];
    bb95__0_134 -> bb2__0_134 [label="otherwise"];
    bb96__0_134 -> bb99__0_134 [label="return"];
    bb97__0_134 -> bb98__0_134 [label="return"];
    bb98__0_134 -> bb221__0_134 [label=""];
    bb99__0_134 -> bb100__0_134 [label="return"];
    bb100__0_134 -> bb101__0_134 [label="return"];
    bb101__0_134 -> bb102__0_134 [label="0"];
    bb101__0_134 -> bb103__0_134 [label="1"];
    bb101__0_134 -> bb2__0_134 [label="otherwise"];
    bb102__0_134 -> bb105__0_134 [label="return"];
    bb103__0_134 -> bb104__0_134 [label="return"];
    bb104__0_134 -> bb219__0_134 [label=""];
    bb105__0_134 -> bb106__0_134 [label="return"];
    bb106__0_134 -> bb107__0_134 [label="0"];
    bb106__0_134 -> bb108__0_134 [label="1"];
    bb106__0_134 -> bb2__0_134 [label="otherwise"];
    bb107__0_134 -> bb110__0_134 [label="return"];
    bb108__0_134 -> bb109__0_134 [label="return"];
    bb109__0_134 -> bb219__0_134 [label=""];
    bb110__0_134 -> bb111__0_134 [label="return"];
    bb111__0_134 -> bb112__0_134 [label="0"];
    bb111__0_134 -> bb113__0_134 [label="1"];
    bb111__0_134 -> bb2__0_134 [label="otherwise"];
    bb112__0_134 -> bb115__0_134 [label="success"];
    bb113__0_134 -> bb114__0_134 [label="return"];
    bb114__0_134 -> bb218__0_134 [label=""];
    bb115__0_134 -> bb116__0_134 [label="return"];
    bb116__0_134 -> bb117__0_134 [label="return"];
    bb117__0_134 -> bb118__0_134 [label="return"];
    bb118__0_134 -> bb119__0_134 [label="0"];
    bb118__0_134 -> bb120__0_134 [label="1"];
    bb118__0_134 -> bb2__0_134 [label="otherwise"];
    bb119__0_134 -> bb122__0_134 [label="return"];
    bb120__0_134 -> bb121__0_134 [label="return"];
    bb121__0_134 -> bb216__0_134 [label=""];
    bb122__0_134 -> bb123__0_134 [label="return"];
    bb123__0_134 -> bb124__0_134 [label="0"];
    bb123__0_134 -> bb125__0_134 [label="1"];
    bb123__0_134 -> bb2__0_134 [label="otherwise"];
    bb124__0_134 -> bb127__0_134 [label="return"];
    bb125__0_134 -> bb126__0_134 [label="return"];
    bb126__0_134 -> bb214__0_134 [label=""];
    bb127__0_134 -> bb128__0_134 [label="return"];
    bb128__0_134 -> bb129__0_134 [label="0"];
    bb128__0_134 -> bb130__0_134 [label="1"];
    bb128__0_134 -> bb2__0_134 [label="otherwise"];
    bb129__0_134 -> bb132__0_134 [label="return"];
    bb130__0_134 -> bb131__0_134 [label="return"];
    bb131__0_134 -> bb214__0_134 [label=""];
    bb132__0_134 -> bb133__0_134 [label="return"];
    bb133__0_134 -> bb134__0_134 [label="0"];
    bb133__0_134 -> bb135__0_134 [label="1"];
    bb133__0_134 -> bb2__0_134 [label="otherwise"];
    bb134__0_134 -> bb137__0_134 [label="return"];
    bb135__0_134 -> bb136__0_134 [label="return"];
    bb136__0_134 -> bb212__0_134 [label=""];
    bb137__0_134 -> bb138__0_134 [label="return"];
    bb138__0_134 -> bb139__0_134 [label="0"];
    bb138__0_134 -> bb140__0_134 [label="1"];
    bb138__0_134 -> bb2__0_134 [label="otherwise"];
    bb139__0_134 -> bb142__0_134 [label="return"];
    bb140__0_134 -> bb141__0_134 [label="return"];
    bb141__0_134 -> bb212__0_134 [label=""];
    bb142__0_134 -> bb143__0_134 [label="return"];
    bb143__0_134 -> bb144__0_134 [label="0"];
    bb143__0_134 -> bb145__0_134 [label="1"];
    bb143__0_134 -> bb2__0_134 [label="otherwise"];
    bb144__0_134 -> bb147__0_134 [label="return"];
    bb145__0_134 -> bb146__0_134 [label="return"];
    bb146__0_134 -> bb213__0_134 [label=""];
    bb147__0_134 -> bb148__0_134 [label="return"];
    bb148__0_134 -> bb149__0_134 [label="0"];
    bb148__0_134 -> bb150__0_134 [label="1"];
    bb148__0_134 -> bb2__0_134 [label="otherwise"];
    bb149__0_134 -> bb152__0_134 [label="return"];
    bb150__0_134 -> bb151__0_134 [label="return"];
    bb151__0_134 -> bb211__0_134 [label=""];
    bb152__0_134 -> bb153__0_134 [label="return"];
    bb153__0_134 -> bb154__0_134 [label="0"];
    bb153__0_134 -> bb155__0_134 [label="1"];
    bb153__0_134 -> bb2__0_134 [label="otherwise"];
    bb154__0_134 -> bb158__0_134 [label="0"];
    bb154__0_134 -> bb157__0_134 [label="otherwise"];
    bb155__0_134 -> bb156__0_134 [label="return"];
    bb156__0_134 -> bb211__0_134 [label=""];
    bb157__0_134 -> bb159__0_134 [label="success"];
    bb158__0_134 -> bb165__0_134 [label=""];
    bb159__0_134 -> bb160__0_134 [label="return"];
    bb160__0_134 -> bb161__0_134 [label="return"];
    bb161__0_134 -> bb162__0_134 [label="0"];
    bb161__0_134 -> bb163__0_134 [label="1"];
    bb161__0_134 -> bb2__0_134 [label="otherwise"];
    bb162__0_134 -> bb165__0_134 [label=""];
    bb163__0_134 -> bb164__0_134 [label="return"];
    bb164__0_134 -> bb210__0_134 [label=""];
    bb165__0_134 -> bb166__0_134 [label="return"];
    bb166__0_134 -> bb167__0_134 [label="return"];
    bb167__0_134 -> bb168__0_134 [label="0"];
    bb167__0_134 -> bb169__0_134 [label="1"];
    bb167__0_134 -> bb2__0_134 [label="otherwise"];
    bb168__0_134 -> bb171__0_134 [label="return"];
    bb169__0_134 -> bb170__0_134 [label="return"];
    bb170__0_134 -> bb210__0_134 [label=""];
    bb171__0_134 -> bb172__0_134 [label="return"];
    bb172__0_134 -> bb173__0_134 [label="0"];
    bb172__0_134 -> bb174__0_134 [label="1"];
    bb172__0_134 -> bb2__0_134 [label="otherwise"];
    bb173__0_134 -> bb176__0_134 [label="return"];
    bb174__0_134 -> bb175__0_134 [label="return"];
    bb175__0_134 -> bb210__0_134 [label=""];
    bb176__0_134 -> bb177__0_134 [label="return"];
    bb177__0_134 -> bb178__0_134 [label="0"];
    bb177__0_134 -> bb179__0_134 [label="1"];
    bb177__0_134 -> bb2__0_134 [label="otherwise"];
    bb178__0_134 -> bb181__0_134 [label="return"];
    bb179__0_134 -> bb180__0_134 [label="return"];
    bb180__0_134 -> bb210__0_134 [label=""];
    bb181__0_134 -> bb182__0_134 [label="return"];
    bb182__0_134 -> bb183__0_134 [label="0"];
    bb182__0_134 -> bb184__0_134 [label="1"];
    bb182__0_134 -> bb2__0_134 [label="otherwise"];
    bb183__0_134 -> bb186__0_134 [label="return"];
    bb184__0_134 -> bb185__0_134 [label="return"];
    bb185__0_134 -> bb210__0_134 [label=""];
    bb186__0_134 -> bb187__0_134 [label="return"];
    bb187__0_134 -> bb188__0_134 [label="0"];
    bb187__0_134 -> bb189__0_134 [label="1"];
    bb187__0_134 -> bb2__0_134 [label="otherwise"];
    bb188__0_134 -> bb191__0_134 [label="return"];
    bb189__0_134 -> bb190__0_134 [label="return"];
    bb190__0_134 -> bb210__0_134 [label=""];
    bb191__0_134 -> bb192__0_134 [label="return"];
    bb192__0_134 -> bb193__0_134 [label="0"];
    bb192__0_134 -> bb194__0_134 [label="1"];
    bb192__0_134 -> bb2__0_134 [label="otherwise"];
    bb193__0_134 -> bb196__0_134 [label="return"];
    bb194__0_134 -> bb195__0_134 [label="return"];
    bb195__0_134 -> bb209__0_134 [label=""];
    bb196__0_134 -> bb197__0_134 [label="return"];
    bb197__0_134 -> bb198__0_134 [label="0"];
    bb197__0_134 -> bb199__0_134 [label="1"];
    bb197__0_134 -> bb2__0_134 [label="otherwise"];
    bb198__0_134 -> bb201__0_134 [label="return"];
    bb199__0_134 -> bb200__0_134 [label="return"];
    bb200__0_134 -> bb209__0_134 [label=""];
    bb201__0_134 -> bb202__0_134 [label="return"];
    bb202__0_134 -> bb203__0_134 [label="return"];
    bb203__0_134 -> bb204__0_134 [label="return"];
    bb204__0_134 -> bb205__0_134 [label="return"];
    bb204__0_134 -> bb238__0_134 [label="unwind"];
    bb205__0_134 -> bb206__0_134 [label="return"];
    bb205__0_134 -> bb238__0_134 [label="unwind"];
    bb206__0_134 -> bb207__0_134 [label="return"];
    bb206__0_134 -> bb239__0_134 [label="unwind"];
    bb207__0_134 -> bb237__0_134 [label=""];
    bb208__0_134 -> bb232__0_134 [label=""];
    bb209__0_134 -> bb210__0_134 [label=""];
    bb210__0_134 -> bb217__0_134 [label=""];
    bb211__0_134 -> bb217__0_134 [label=""];
    bb212__0_134 -> bb213__0_134 [label=""];
    bb213__0_134 -> bb215__0_134 [label=""];
    bb214__0_134 -> bb215__0_134 [label=""];
    bb215__0_134 -> bb216__0_134 [label=""];
    bb216__0_134 -> bb217__0_134 [label=""];
    bb217__0_134 -> bb218__0_134 [label=""];
    bb218__0_134 -> bb220__0_134 [label=""];
    bb219__0_134 -> bb220__0_134 [label=""];
    bb220__0_134 -> bb222__0_134 [label=""];
    bb221__0_134 -> bb222__0_134 [label=""];
    bb222__0_134 -> bb224__0_134 [label=""];
    bb223__0_134 -> bb224__0_134 [label=""];
    bb224__0_134 -> bb225__0_134 [label=""];
    bb225__0_134 -> bb226__0_134 [label=""];
    bb226__0_134 -> bb228__0_134 [label=""];
    bb227__0_134 -> bb228__0_134 [label=""];
    bb228__0_134 -> bb229__0_134 [label=""];
    bb229__0_134 -> bb230__0_134 [label=""];
    bb230__0_134 -> bb231__0_134 [label=""];
    bb231__0_134 -> bb232__0_134 [label=""];
    bb232__0_134 -> bb233__0_134 [label=""];
    bb233__0_134 -> bb235__0_134 [label=""];
    bb234__0_134 -> bb235__0_134 [label=""];
    bb235__0_134 -> bb236__0_134 [label=""];
    bb236__0_134 -> bb237__0_134 [label=""];
    bb238__0_134 -> bb239__0_134 [label="return"];
}
