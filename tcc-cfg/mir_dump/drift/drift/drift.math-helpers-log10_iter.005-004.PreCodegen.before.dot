digraph Mir_0_2319 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn log10_iter(_1: u128) -&gt; u128<br align="left"/>let mut _2: u128;<br align="left"/>let mut _3: u128;<br align="left"/>let _4: ();<br align="left"/>let mut _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: (u128, bool);<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: !;<br align="left"/>let _11: ();<br align="left"/>let mut _12: !;<br align="left"/>debug n =&gt; _1;<br align="left"/>debug result =&gt; _2;<br align="left"/>debug n_copy =&gt; _3;<br align="left"/>>;
    bb0__0_2319 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = const 0_u128<br/>StorageLive(_3)<br/>_3 = _1<br/>StorageLive(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb1__0_2319 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _3<br/>_6 = Ge(move _7, const 10_u128)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_2319 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_8 = CheckedAdd(_2, const 1_u128)<br/></td></tr><tr><td align="left">assert(!move (_8.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_u128)</td></tr></table>>];
    bb3__0_2319 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_2 = move (_8.0: u128)<br/>_9 = Eq(const 10_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _9, &quot;attempt to divide `{}` by zero&quot;, _3)</td></tr></table>>];
    bb4__0_2319 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_3 = Div(_3, const 10_u128)<br/>_5 = const ()<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2319 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_11)<br/>_4 = const ()<br/>StorageDead(_11)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>_0 = _2<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2319 -> bb1__0_2319 [label=""];
    bb1__0_2319 -> bb5__0_2319 [label="0"];
    bb1__0_2319 -> bb2__0_2319 [label="otherwise"];
    bb2__0_2319 -> bb3__0_2319 [label="success"];
    bb3__0_2319 -> bb4__0_2319 [label="success"];
    bb4__0_2319 -> bb1__0_2319 [label=""];
}
