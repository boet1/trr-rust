// MIR for `get_pyth_price` after PreCodegen

fn get_pyth_price(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: u64, _3: &state::oracle::OracleSource) -> std::result::Result<OraclePriceData, error::ErrorCode> {
    debug price_oracle => _1;
    debug clock_slot => _2;
    debug oracle_source => _3;
    let mut _0: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let _4: u128;
    let mut _5: &state::oracle::OracleSource;
    let _7: &&mut [u8];
    let mut _8: &std::cell::Ref<'_, &mut [u8]>;
    let _9: &std::cell::Ref<'_, &mut [u8]>;
    let _10: std::cell::Ref<'_, &mut [u8]>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _12: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _13: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _16: error::ErrorCode;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: ();
    let mut _29: bool;
    let mut _30: &state::oracle::OracleSource;
    let mut _32: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, anchor_lang::error::Error>;
    let mut _33: &mut &[u8];
    let mut _34: &mut &[u8];
    let mut _35: i64;
    let mut _36: u64;
    let mut _37: u128;
    let mut _38: u32;
    let mut _39: i32;
    let mut _40: u64;
    let mut _41: std::option::Option<u64>;
    let mut _42: u64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _44: std::result::Result<u64, error::ErrorCode>;
    let mut _45: i64;
    let mut _46: i64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: bool;
    let mut _53: &state::oracle::OracleSource;
    let mut _55: &[u8];
    let mut _56: i64;
    let mut _57: u64;
    let mut _59: u32;
    let _61: ();
    let mut _62: u32;
    let mut _63: u32;
    let mut _64: u128;
    let mut _65: u32;
    let mut _66: i32;
    let mut _67: u64;
    let mut _68: std::option::Option<u64>;
    let mut _70: std::result::Result<state::pyth_lazer_oracle::PythLazerOracle, anchor_lang::error::Error>;
    let mut _71: &mut &[u8];
    let mut _72: &mut &[u8];
    let mut _73: i64;
    let mut _74: u64;
    let mut _75: u128;
    let mut _76: u32;
    let mut _77: i32;
    let mut _78: u64;
    let mut _79: std::option::Option<u64>;
    let mut _80: u64;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _82: std::result::Result<u64, error::ErrorCode>;
    let mut _83: u64;
    let mut _84: u64;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _90: ();
    let mut _91: bool;
    let mut _92: u128;
    let mut _93: u128;
    let mut _94: !;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: error::ErrorCode;
    let mut _99: u128;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _101: std::result::Result<u128, error::ErrorCode>;
    let mut _102: u128;
    let mut _103: u128;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _111: ();
    let mut _112: bool;
    let mut _113: u128;
    let mut _114: u128;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _116: std::result::Result<u128, error::ErrorCode>;
    let mut _117: u128;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _123: u128;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _125: std::result::Result<u128, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _134: std::result::Result<i64, error::ErrorCode>;
    let mut _135: i128;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _137: std::result::Result<i128, error::ErrorCode>;
    let mut _138: i128;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _140: std::result::Result<i128, error::ErrorCode>;
    let mut _141: i128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _143: std::result::Result<i128, error::ErrorCode>;
    let mut _144: i64;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _150: i128;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _152: std::result::Result<i128, error::ErrorCode>;
    let mut _153: u128;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: i128;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _166: std::result::Result<i128, error::ErrorCode>;
    let mut _167: u128;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _178: isize;
    let mut _180: !;
    let mut _181: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _185: std::result::Result<u64, error::ErrorCode>;
    let mut _186: u128;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _188: std::result::Result<u128, error::ErrorCode>;
    let mut _189: u128;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _191: std::result::Result<u128, error::ErrorCode>;
    let mut _192: u128;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _194: std::result::Result<u128, error::ErrorCode>;
    let mut _195: u64;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: u128;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _207: u128;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _220: std::result::Result<i64, error::ErrorCode>;
    let mut _221: i64;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _223: std::result::Result<i64, error::ErrorCode>;
    let mut _224: u64;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _230: i64;
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _232: std::result::Result<i64, error::ErrorCode>;
    let mut _233: u64;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _244: state::oracle::OraclePriceData;
    let mut _245: i64;
    let mut _246: u64;
    let mut _247: i64;
    let mut _248: bool;
    let mut _249: std::option::Option<u64>;
    let mut _250: &mut [u8];
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    scope 1 {
        debug multiple => _4;
        let mut _6: &[u8];
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: std::cell::Ref<'_, &mut [u8]>;
        scope 2 {
            debug pyth_price_data => _6;
            let _22: i64;
            scope 7 {
                debug oracle_price => _22;
                let _23: u64;
                scope 8 {
                    debug oracle_conf => _23;
                    let mut _24: bool;
                    scope 9 {
                        debug has_sufficient_number_of_data_points => _24;
                        let mut _25: u128;
                        scope 10 {
                            debug oracle_precision => _25;
                            let _26: u64;
                            scope 11 {
                                debug published_slot => _26;
                                let _27: std::option::Option<u64>;
                                scope 12 {
                                    debug sequence_id => _27;
                                    let _31: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                                    let _54: &pyth_client::Price;
                                    let _69: state::pyth_lazer_oracle::PythLazerOracle;
                                    let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _108: u128;
                                    let mut _109: u128;
                                    scope 13 {
                                        debug price_message => _31;
                                        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _51: u64;
                                        scope 14 {
                                            debug residual => _48;
                                            scope 15 {
                                            }
                                        }
                                        scope 16 {
                                            debug val => _51;
                                            scope 17 {
                                            }
                                        }
                                    }
                                    scope 18 {
                                        debug price_data => _54;
                                        let _58: u32;
                                        scope 19 {
                                            debug min_publishers => _58;
                                            let _60: u32;
                                            scope 20 {
                                                debug publisher_count => _60;
                                            }
                                        }
                                    }
                                    scope 21 {
                                        debug price_data => _69;
                                        let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _89: u64;
                                        scope 22 {
                                            debug residual => _86;
                                            scope 23 {
                                            }
                                        }
                                        scope 24 {
                                            debug val => _89;
                                            scope 25 {
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _105;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _108;
                                        scope 29 {
                                        }
                                    }
                                    scope 30 {
                                        debug oracle_scale_mult => _109;
                                        let mut _110: u128;
                                        scope 31 {
                                            debug oracle_scale_div => _110;
                                            let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _122: u128;
                                            let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _131: u128;
                                            let _132: i64;
                                            let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _149: i128;
                                            let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _158: i128;
                                            let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _163: i128;
                                            let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _172: i128;
                                            let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _177: i128;
                                            let _179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _182: i64;
                                            scope 32 {
                                                debug residual => _119;
                                                scope 33 {
                                                }
                                            }
                                            scope 34 {
                                                debug val => _122;
                                                scope 35 {
                                                }
                                            }
                                            scope 36 {
                                                debug residual => _128;
                                                scope 37 {
                                                }
                                            }
                                            scope 38 {
                                                debug val => _131;
                                                scope 39 {
                                                }
                                            }
                                            scope 40 {
                                                debug oracle_price_scaled => _132;
                                                let _183: u64;
                                                let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _200: u128;
                                                let _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _206: u128;
                                                let _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _212: u128;
                                                let _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _217: u64;
                                                scope 65 {
                                                    debug oracle_conf_scaled => _183;
                                                    let _218: i64;
                                                    let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _229: i64;
                                                    let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _238: i64;
                                                    let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _243: i64;
                                                    scope 82 {
                                                        debug oracle_delay => _218;
                                                    }
                                                    scope 83 {
                                                        debug residual => _226;
                                                        scope 84 {
                                                        }
                                                    }
                                                    scope 85 {
                                                        debug val => _229;
                                                        scope 86 {
                                                        }
                                                    }
                                                    scope 87 {
                                                        debug residual => _235;
                                                        scope 88 {
                                                        }
                                                    }
                                                    scope 89 {
                                                        debug val => _238;
                                                        scope 90 {
                                                        }
                                                    }
                                                    scope 91 {
                                                        debug residual => _240;
                                                        scope 92 {
                                                        }
                                                    }
                                                    scope 93 {
                                                        debug val => _243;
                                                        scope 94 {
                                                        }
                                                    }
                                                }
                                                scope 66 {
                                                    debug residual => _197;
                                                    scope 67 {
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _200;
                                                    scope 69 {
                                                    }
                                                }
                                                scope 70 {
                                                    debug residual => _203;
                                                    scope 71 {
                                                    }
                                                }
                                                scope 72 {
                                                    debug val => _206;
                                                    scope 73 {
                                                    }
                                                }
                                                scope 74 {
                                                    debug residual => _209;
                                                    scope 75 {
                                                    }
                                                }
                                                scope 76 {
                                                    debug val => _212;
                                                    scope 77 {
                                                    }
                                                }
                                                scope 78 {
                                                    debug residual => _214;
                                                    scope 79 {
                                                    }
                                                }
                                                scope 80 {
                                                    debug val => _217;
                                                    scope 81 {
                                                    }
                                                }
                                            }
                                            scope 41 {
                                                debug residual => _146;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug val => _149;
                                                scope 44 {
                                                }
                                            }
                                            scope 45 {
                                                debug residual => _155;
                                                scope 46 {
                                                }
                                            }
                                            scope 47 {
                                                debug val => _158;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug residual => _160;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug val => _163;
                                                scope 52 {
                                                }
                                            }
                                            scope 53 {
                                                debug residual => _169;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug val => _172;
                                                scope 56 {
                                                }
                                            }
                                            scope 57 {
                                                debug residual => _174;
                                                scope 58 {
                                                }
                                            }
                                            scope 59 {
                                                debug val => _177;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug residual => _179;
                                                scope 62 {
                                                }
                                            }
                                            scope 63 {
                                                debug val => _182;
                                                scope 64 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_3);
        _4 = state::oracle::OracleSource::get_pyth_multiple(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_1);
        _13 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = error::ErrorCode::UnableToLoadOracle;
        _15 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _16);
        StorageDead(_16);
        _12 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _13, move _15) -> [return: bb3, unwind: bb149];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_13);
        _11 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _12) -> [return: bb4, unwind: bb149];
    }

    bb4: {
        StorageDead(_12);
        _17 = discriminant(_11);
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_21);
        _21 = move ((_11 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _10 = move _21;
        StorageDead(_21);
        _9 = &_10;
        _8 = &(*_9);
        _7 = <Ref<'_, &mut [u8]> as Deref>::deref(move _8) -> [return: bb9, unwind: bb147];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_18);
        _18 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb8, unwind: bb150];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_8);
        _251 = discriminant(_11);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb145;
    }

    bb9: {
        _250 = deref_copy (*_7);
        _6 = &(*_250);
        StorageDead(_8);
        _253 = discriminant(_11);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const true;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_3);
        _29 = state::oracle::OracleSource::is_pyth_pull_oracle(move _30) -> [return: bb10, unwind: bb148];
    }

    bb10: {
        switchInt(move _29) -> [0: bb22, otherwise: bb11];
    }

    bb11: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _6;
        _33 = &mut (*_34);
        _32 = <PriceUpdateV2 as anchor_lang::AccountDeserialize>::try_deserialize(move _33) -> [return: bb12, unwind: bb148];
    }

    bb12: {
        StorageDead(_33);
        _31 = std::result::Result::<PriceUpdateV2, anchor_lang::error::Error>::unwrap(move _32) -> [return: bb13, unwind: bb148];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_34);
        StorageLive(_35);
        _35 = ((_31.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).1: i64);
        _22 = move _35;
        StorageDead(_35);
        StorageLive(_36);
        _36 = ((_31.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).2: u64);
        _23 = move _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((_31.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).3: i32);
        _38 = core::num::<impl i32>::unsigned_abs(move _39) -> [return: bb14, unwind: bb148];
    }

    bb14: {
        StorageDead(_39);
        _37 = core::num::<impl u128>::pow(const 10_u128, move _38) -> [return: bb15, unwind: bb148];
    }

    bb15: {
        StorageDead(_38);
        _25 = move _37;
        StorageDead(_37);
        StorageLive(_40);
        _40 = (_31.3: u64);
        _26 = move _40;
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = ((_31.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).4: i64);
        _45 = <i64 as Ord>::max(move _46, const 0_i64) -> [return: bb16, unwind: bb148];
    }

    bb16: {
        StorageDead(_46);
        _44 = <i64 as Cast>::cast::<u64>(move _45) -> [return: bb17, unwind: bb148];
    }

    bb17: {
        StorageDead(_45);
        _43 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb18, unwind: bb148];
    }

    bb18: {
        StorageDead(_44);
        _47 = discriminant(_43);
        switchInt(move _47) -> [0: bb19, 1: bb20, otherwise: bb6];
    }

    bb19: {
        StorageLive(_51);
        _51 = ((_43 as Continue).0: u64);
        _42 = _51;
        StorageDead(_51);
        _41 = Option::<u64>::Some(move _42);
        StorageDead(_42);
        _27 = move _41;
        StorageDead(_41);
        StorageDead(_43);
        _28 = const ();
        StorageDead(_31);
        goto -> bb41;
    }

    bb20: {
        StorageLive(_48);
        _48 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb21, unwind: bb148];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_43);
        StorageDead(_31);
        goto -> bb143;
    }

    bb22: {
        StorageDead(_30);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_3);
        _52 = state::oracle::OracleSource::is_pyth_push_oracle(move _53) -> [return: bb23, unwind: bb148];
    }

    bb23: {
        switchInt(move _52) -> [0: bb29, otherwise: bb24];
    }

    bb24: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_6);
        _54 = pyth_client::cast::<pyth_client::Price>(move _55) -> [return: bb25, unwind: bb148];
    }

    bb25: {
        StorageDead(_55);
        StorageLive(_56);
        _56 = (((*_54).20: pyth_client::PriceInfo).0: i64);
        _22 = move _56;
        StorageDead(_56);
        StorageLive(_57);
        _57 = (((*_54).20: pyth_client::PriceInfo).1: u64);
        _23 = move _57;
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = ((*_54).6: u32);
        _58 = <u32 as Ord>::min(move _59, const 3_u32) -> [return: bb26, unwind: bb148];
    }

    bb26: {
        StorageDead(_59);
        StorageLive(_60);
        _60 = ((*_54).7: u32);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _60;
        StorageLive(_63);
        _63 = _58;
        _24 = Ge(move _62, move _63);
        StorageDead(_63);
        StorageDead(_62);
        _61 = const ();
        StorageDead(_61);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = ((*_54).5: i32);
        _65 = core::num::<impl i32>::unsigned_abs(move _66) -> [return: bb27, unwind: bb148];
    }

    bb27: {
        StorageDead(_66);
        _64 = core::num::<impl u128>::pow(const 10_u128, move _65) -> [return: bb28, unwind: bb148];
    }

    bb28: {
        StorageDead(_65);
        _25 = move _64;
        StorageDead(_64);
        StorageLive(_67);
        _67 = ((*_54).9: u64);
        _26 = move _67;
        StorageDead(_67);
        StorageLive(_68);
        _68 = Option::<u64>::None;
        _27 = move _68;
        StorageDead(_68);
        _28 = const ();
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        goto -> bb40;
    }

    bb29: {
        StorageDead(_53);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &mut _6;
        _71 = &mut (*_72);
        _70 = <PythLazerOracle as anchor_lang::AccountDeserialize>::try_deserialize(move _71) -> [return: bb30, unwind: bb148];
    }

    bb30: {
        StorageDead(_71);
        _69 = std::result::Result::<PythLazerOracle, anchor_lang::error::Error>::unwrap(move _70) -> [return: bb31, unwind: bb148];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_72);
        StorageLive(_73);
        _73 = (_69.0: i64);
        _22 = move _73;
        StorageDead(_73);
        StorageLive(_74);
        _74 = (_69.5: u64);
        _23 = move _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = (_69.3: i32);
        _76 = core::num::<impl i32>::unsigned_abs(move _77) -> [return: bb32, unwind: bb148];
    }

    bb32: {
        StorageDead(_77);
        _75 = core::num::<impl u128>::pow(const 10_u128, move _76) -> [return: bb33, unwind: bb148];
    }

    bb33: {
        StorageDead(_76);
        _25 = move _75;
        StorageDead(_75);
        StorageLive(_78);
        _78 = (_69.2: u64);
        _26 = move _78;
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = (_69.1: u64);
        _83 = <u64 as Ord>::max(move _84, const 0_u64) -> [return: bb34, unwind: bb148];
    }

    bb34: {
        StorageDead(_84);
        _82 = <u64 as Cast>::cast::<u64>(move _83) -> [return: bb35, unwind: bb148];
    }

    bb35: {
        StorageDead(_83);
        _81 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb36, unwind: bb148];
    }

    bb36: {
        StorageDead(_82);
        _85 = discriminant(_81);
        switchInt(move _85) -> [0: bb37, 1: bb38, otherwise: bb6];
    }

    bb37: {
        StorageLive(_89);
        _89 = ((_81 as Continue).0: u64);
        _80 = _89;
        StorageDead(_89);
        _79 = Option::<u64>::Some(move _80);
        StorageDead(_80);
        _27 = move _79;
        StorageDead(_79);
        StorageDead(_81);
        _28 = const ();
        StorageDead(_69);
        goto -> bb40;
    }

    bb38: {
        StorageLive(_86);
        _86 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb39, unwind: bb148];
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_81);
        StorageDead(_69);
        StorageDead(_52);
        goto -> bb143;
    }

    bb40: {
        StorageDead(_52);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _25;
        StorageLive(_93);
        _93 = _4;
        _91 = Le(move _92, move _93);
        switchInt(move _91) -> [0: bb44, otherwise: bb42];
    }

    bb42: {
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const "Multiple larger than oracle precision";
        _96 = &(*_97);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb43, unwind: bb148];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_98);
        _98 = error::ErrorCode::InvalidOracle;
        _0 = std::result::Result::<OraclePriceData, error::ErrorCode>::Err(move _98);
        StorageDead(_98);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb144;
    }

    bb44: {
        StorageDead(_93);
        StorageDead(_92);
        _90 = const ();
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _25;
        StorageLive(_103);
        _103 = _4;
        _101 = <u128 as SafeMath>::safe_div(move _102, move _103) -> [return: bb45, unwind: bb148];
    }

    bb45: {
        StorageDead(_103);
        StorageDead(_102);
        _100 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _101) -> [return: bb46, unwind: bb148];
    }

    bb46: {
        StorageDead(_101);
        _104 = discriminant(_100);
        switchInt(move _104) -> [0: bb47, 1: bb48, otherwise: bb6];
    }

    bb47: {
        StorageLive(_108);
        _108 = ((_100 as Continue).0: u128);
        _99 = _108;
        StorageDead(_108);
        _25 = move _99;
        StorageDead(_99);
        StorageDead(_100);
        StorageLive(_109);
        _109 = const 1_u128;
        StorageLive(_110);
        _110 = const 1_u128;
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _25;
        _112 = Gt(move _113, const _);
        switchInt(move _112) -> [0: bb51, otherwise: bb50];
    }

    bb48: {
        StorageLive(_105);
        _105 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb49, unwind: bb148];
    }

    bb49: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_99);
        StorageDead(_100);
        goto -> bb144;
    }

    bb50: {
        StorageDead(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _25;
        _116 = <u128 as SafeMath>::safe_div(move _117, const _) -> [return: bb52, unwind: bb148];
    }

    bb51: {
        StorageDead(_113);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _25;
        _125 = <u128 as SafeMath>::safe_div(const _, move _126) -> [return: bb57, unwind: bb148];
    }

    bb52: {
        StorageDead(_117);
        _115 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _116) -> [return: bb53, unwind: bb148];
    }

    bb53: {
        StorageDead(_116);
        _118 = discriminant(_115);
        switchInt(move _118) -> [0: bb54, 1: bb55, otherwise: bb6];
    }

    bb54: {
        StorageLive(_122);
        _122 = ((_115 as Continue).0: u128);
        _114 = _122;
        StorageDead(_122);
        _110 = move _114;
        StorageDead(_114);
        StorageDead(_115);
        _111 = const ();
        goto -> bb62;
    }

    bb55: {
        StorageLive(_119);
        _119 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb56, unwind: bb148];
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_114);
        StorageDead(_115);
        goto -> bb141;
    }

    bb57: {
        StorageDead(_126);
        _124 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _125) -> [return: bb58, unwind: bb148];
    }

    bb58: {
        StorageDead(_125);
        _127 = discriminant(_124);
        switchInt(move _127) -> [0: bb59, 1: bb60, otherwise: bb6];
    }

    bb59: {
        StorageLive(_131);
        _131 = ((_124 as Continue).0: u128);
        _123 = _131;
        StorageDead(_131);
        _109 = move _123;
        StorageDead(_123);
        StorageDead(_124);
        _111 = const ();
        goto -> bb62;
    }

    bb60: {
        StorageLive(_128);
        _128 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb61, unwind: bb148];
    }

    bb61: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_123);
        StorageDead(_124);
        goto -> bb141;
    }

    bb62: {
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _22;
        _143 = <i64 as Cast>::cast::<i128>(move _144) -> [return: bb63, unwind: bb148];
    }

    bb63: {
        StorageDead(_144);
        _142 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb64, unwind: bb148];
    }

    bb64: {
        StorageDead(_143);
        _145 = discriminant(_142);
        switchInt(move _145) -> [0: bb65, 1: bb66, otherwise: bb6];
    }

    bb65: {
        StorageLive(_149);
        _149 = ((_142 as Continue).0: i128);
        _141 = _149;
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _109;
        _152 = <u128 as Cast>::cast::<i128>(move _153) -> [return: bb68, unwind: bb148];
    }

    bb66: {
        StorageLive(_146);
        _146 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb67, unwind: bb148];
    }

    bb67: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb139;
    }

    bb68: {
        StorageDead(_153);
        _151 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _152) -> [return: bb69, unwind: bb148];
    }

    bb69: {
        StorageDead(_152);
        _154 = discriminant(_151);
        switchInt(move _154) -> [0: bb70, 1: bb71, otherwise: bb6];
    }

    bb70: {
        StorageLive(_158);
        _158 = ((_151 as Continue).0: i128);
        _150 = _158;
        StorageDead(_158);
        _140 = <i128 as SafeMath>::safe_mul(move _141, move _150) -> [return: bb73, unwind: bb148];
    }

    bb71: {
        StorageLive(_155);
        _155 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb72, unwind: bb148];
    }

    bb72: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_150);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb137;
    }

    bb73: {
        StorageDead(_150);
        StorageDead(_141);
        _139 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _140) -> [return: bb74, unwind: bb148];
    }

    bb74: {
        StorageDead(_140);
        _159 = discriminant(_139);
        switchInt(move _159) -> [0: bb75, 1: bb76, otherwise: bb6];
    }

    bb75: {
        StorageLive(_163);
        _163 = ((_139 as Continue).0: i128);
        _138 = _163;
        StorageDead(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = _110;
        _166 = <u128 as Cast>::cast::<i128>(move _167) -> [return: bb78, unwind: bb148];
    }

    bb76: {
        StorageLive(_160);
        _160 = ((_139 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb77, unwind: bb148];
    }

    bb77: {
        StorageDead(_162);
        StorageDead(_160);
        goto -> bb137;
    }

    bb78: {
        StorageDead(_167);
        _165 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _166) -> [return: bb79, unwind: bb148];
    }

    bb79: {
        StorageDead(_166);
        _168 = discriminant(_165);
        switchInt(move _168) -> [0: bb80, 1: bb81, otherwise: bb6];
    }

    bb80: {
        StorageLive(_172);
        _172 = ((_165 as Continue).0: i128);
        _164 = _172;
        StorageDead(_172);
        _137 = <i128 as SafeMath>::safe_div(move _138, move _164) -> [return: bb83, unwind: bb148];
    }

    bb81: {
        StorageLive(_169);
        _169 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb82, unwind: bb148];
    }

    bb82: {
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_164);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb135;
    }

    bb83: {
        StorageDead(_164);
        StorageDead(_138);
        _136 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _137) -> [return: bb84, unwind: bb148];
    }

    bb84: {
        StorageDead(_137);
        _173 = discriminant(_136);
        switchInt(move _173) -> [0: bb85, 1: bb86, otherwise: bb6];
    }

    bb85: {
        StorageLive(_177);
        _177 = ((_136 as Continue).0: i128);
        _135 = _177;
        StorageDead(_177);
        _134 = <i128 as Cast>::cast::<i64>(move _135) -> [return: bb88, unwind: bb148];
    }

    bb86: {
        StorageLive(_174);
        _174 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb87, unwind: bb148];
    }

    bb87: {
        StorageDead(_176);
        StorageDead(_174);
        goto -> bb135;
    }

    bb88: {
        StorageDead(_135);
        _133 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _134) -> [return: bb89, unwind: bb148];
    }

    bb89: {
        StorageDead(_134);
        _178 = discriminant(_133);
        switchInt(move _178) -> [0: bb90, 1: bb91, otherwise: bb6];
    }

    bb90: {
        StorageLive(_182);
        _182 = ((_133 as Continue).0: i64);
        _132 = _182;
        StorageDead(_182);
        StorageDead(_165);
        StorageDead(_151);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = _23;
        _194 = <u64 as Cast>::cast::<u128>(move _195) -> [return: bb93, unwind: bb148];
    }

    bb91: {
        StorageLive(_179);
        _179 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_181);
        _181 = _179;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _181) -> [return: bb92, unwind: bb148];
    }

    bb92: {
        StorageDead(_181);
        StorageDead(_179);
        goto -> bb136;
    }

    bb93: {
        StorageDead(_195);
        _193 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _194) -> [return: bb94, unwind: bb148];
    }

    bb94: {
        StorageDead(_194);
        _196 = discriminant(_193);
        switchInt(move _196) -> [0: bb95, 1: bb96, otherwise: bb6];
    }

    bb95: {
        StorageLive(_200);
        _200 = ((_193 as Continue).0: u128);
        _192 = _200;
        StorageDead(_200);
        StorageLive(_201);
        _201 = _109;
        _191 = <u128 as SafeMath>::safe_mul(move _192, move _201) -> [return: bb98, unwind: bb148];
    }

    bb96: {
        StorageLive(_197);
        _197 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb97, unwind: bb148];
    }

    bb97: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb131;
    }

    bb98: {
        StorageDead(_201);
        StorageDead(_192);
        _190 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _191) -> [return: bb99, unwind: bb148];
    }

    bb99: {
        StorageDead(_191);
        _202 = discriminant(_190);
        switchInt(move _202) -> [0: bb100, 1: bb101, otherwise: bb6];
    }

    bb100: {
        StorageLive(_206);
        _206 = ((_190 as Continue).0: u128);
        _189 = _206;
        StorageDead(_206);
        StorageLive(_207);
        _207 = _110;
        _188 = <u128 as SafeMath>::safe_div(move _189, move _207) -> [return: bb103, unwind: bb148];
    }

    bb101: {
        StorageLive(_203);
        _203 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_205);
        _205 = _203;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _205) -> [return: bb102, unwind: bb148];
    }

    bb102: {
        StorageDead(_205);
        StorageDead(_203);
        goto -> bb131;
    }

    bb103: {
        StorageDead(_207);
        StorageDead(_189);
        _187 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _188) -> [return: bb104, unwind: bb148];
    }

    bb104: {
        StorageDead(_188);
        _208 = discriminant(_187);
        switchInt(move _208) -> [0: bb105, 1: bb106, otherwise: bb6];
    }

    bb105: {
        StorageLive(_212);
        _212 = ((_187 as Continue).0: u128);
        _186 = _212;
        StorageDead(_212);
        _185 = <u128 as Cast>::cast::<u64>(move _186) -> [return: bb108, unwind: bb148];
    }

    bb106: {
        StorageLive(_209);
        _209 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_211);
        _211 = _209;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _211) -> [return: bb107, unwind: bb148];
    }

    bb107: {
        StorageDead(_211);
        StorageDead(_209);
        goto -> bb132;
    }

    bb108: {
        StorageDead(_186);
        _184 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _185) -> [return: bb109, unwind: bb148];
    }

    bb109: {
        StorageDead(_185);
        _213 = discriminant(_184);
        switchInt(move _213) -> [0: bb110, 1: bb111, otherwise: bb6];
    }

    bb110: {
        StorageLive(_217);
        _217 = ((_184 as Continue).0: u64);
        _183 = _217;
        StorageDead(_217);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_184);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = _2;
        _223 = <u64 as Cast>::cast::<i64>(move _224) -> [return: bb113, unwind: bb148];
    }

    bb111: {
        StorageLive(_214);
        _214 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_216);
        _216 = _214;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _216) -> [return: bb112, unwind: bb148];
    }

    bb112: {
        StorageDead(_216);
        StorageDead(_214);
        goto -> bb133;
    }

    bb113: {
        StorageDead(_224);
        _222 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _223) -> [return: bb114, unwind: bb148];
    }

    bb114: {
        StorageDead(_223);
        _225 = discriminant(_222);
        switchInt(move _225) -> [0: bb115, 1: bb116, otherwise: bb6];
    }

    bb115: {
        StorageLive(_229);
        _229 = ((_222 as Continue).0: i64);
        _221 = _229;
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = _26;
        _232 = <u64 as Cast>::cast::<i64>(move _233) -> [return: bb118, unwind: bb148];
    }

    bb116: {
        StorageLive(_226);
        _226 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb117, unwind: bb148];
    }

    bb117: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb130;
    }

    bb118: {
        StorageDead(_233);
        _231 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _232) -> [return: bb119, unwind: bb148];
    }

    bb119: {
        StorageDead(_232);
        _234 = discriminant(_231);
        switchInt(move _234) -> [0: bb120, 1: bb121, otherwise: bb6];
    }

    bb120: {
        StorageLive(_238);
        _238 = ((_231 as Continue).0: i64);
        _230 = _238;
        StorageDead(_238);
        _220 = <i64 as SafeMath>::safe_sub(move _221, move _230) -> [return: bb123, unwind: bb148];
    }

    bb121: {
        StorageLive(_235);
        _235 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb122, unwind: bb148];
    }

    bb122: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_230);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb129;
    }

    bb123: {
        StorageDead(_230);
        StorageDead(_221);
        _219 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _220) -> [return: bb124, unwind: bb148];
    }

    bb124: {
        StorageDead(_220);
        _239 = discriminant(_219);
        switchInt(move _239) -> [0: bb125, 1: bb126, otherwise: bb6];
    }

    bb125: {
        StorageLive(_243);
        _243 = ((_219 as Continue).0: i64);
        _218 = _243;
        StorageDead(_243);
        StorageDead(_231);
        StorageDead(_222);
        StorageDead(_219);
        StorageLive(_244);
        StorageLive(_245);
        _245 = _132;
        StorageLive(_246);
        _246 = _183;
        StorageLive(_247);
        _247 = _218;
        StorageLive(_248);
        _248 = _24;
        StorageLive(_249);
        _249 = _27;
        _244 = OraclePriceData { price: move _245, confidence: move _246, delay: move _247, has_sufficient_number_of_data_points: move _248, sequence_id: move _249 };
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_245);
        _0 = std::result::Result::<OraclePriceData, error::ErrorCode>::Ok(move _244);
        StorageDead(_244);
        StorageDead(_218);
        StorageDead(_183);
        StorageDead(_132);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb128, unwind: bb149];
    }

    bb126: {
        StorageLive(_240);
        _240 = ((_219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb127, unwind: bb148];
    }

    bb127: {
        StorageDead(_242);
        StorageDead(_240);
        goto -> bb129;
    }

    bb128: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb146;
    }

    bb129: {
        StorageDead(_231);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        goto -> bb134;
    }

    bb131: {
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_186);
        StorageDead(_185);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_184);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_183);
        goto -> bb140;
    }

    bb135: {
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_165);
        goto -> bb138;
    }

    bb137: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_151);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_132);
        goto -> bb142;
    }

    bb141: {
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb145, unwind: bb149];
    }

    bb145: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb146;
    }

    bb146: {
        return;
    }

    bb147 (cleanup): {
        _255 = discriminant(_11);
        goto -> bb148;
    }

    bb148 (cleanup): {
        drop(_10) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        resume;
    }

    bb150 (cleanup): {
        _256 = discriminant(_11);
        goto -> bb149;
    }
}
