digraph Mir_0_133 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn settle_funding_payments(_1: &amp;ReErased mut state::user::User, _2: &amp;ReErased anchor_lang::prelude::Pubkey, _3: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _4: i64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _5: ();<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: &amp;ReErased [state::user::PerpPosition];<br align="left"/>let mut _10: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _11: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: ();<br align="left"/>let _13: ();<br align="left"/>let mut _14: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _15: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _16: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: !;<br align="left"/>let _19: usize;<br align="left"/>let _20: ();<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: i64;<br align="left"/>let _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: !;<br align="left"/>let _27: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _28: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _30: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _31: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _32: &amp;ReErased u16;<br align="left"/>let _33: &amp;ReErased u16;<br align="left"/>let _34: usize;<br align="left"/>let mut _35: usize;<br align="left"/>let mut _36: bool;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _41: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _42: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _43: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _44: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _45: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _46: i128;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: i64;<br align="left"/>let _49: usize;<br align="left"/>let mut _50: usize;<br align="left"/>let mut _51: bool;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: i128;<br align="left"/>let mut _54: i128;<br align="left"/>let mut _55: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _56: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _57: i64;<br align="left"/>let _58: usize;<br align="left"/>let mut _59: usize;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: isize;<br align="left"/>let _62: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _63: !;<br align="left"/>let mut _64: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _65: i128;<br align="left"/>let _66: i64;<br align="left"/>let mut _67: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _68: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _69: i128;<br align="left"/>let mut _70: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _71: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _72: usize;<br align="left"/>let mut _73: usize;<br align="left"/>let mut _74: bool;<br align="left"/>let mut _75: isize;<br align="left"/>let _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _77: !;<br align="left"/>let mut _78: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _79: i64;<br align="left"/>let _80: ();<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _82: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _83: &amp;ReErased mut state::user::User;<br align="left"/>let mut _84: i64;<br align="left"/>let mut _85: isize;<br align="left"/>let _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _87: !;<br align="left"/>let mut _88: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _89: ();<br align="left"/>let _90: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _91: usize;<br align="left"/>let mut _92: usize;<br align="left"/>let mut _93: bool;<br align="left"/>let _94: ();<br align="left"/>let _95: ();<br align="left"/>let mut _96: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _97: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _98: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _99: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _100: &amp;ReErased [u8];<br align="left"/>let _101: &amp;ReErased [u8];<br align="left"/>let mut _102: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _103: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _104: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _105: &amp;ReErased state::events::FundingPaymentRecord;<br align="left"/>let _106: &amp;ReErased state::events::FundingPaymentRecord;<br align="left"/>let _107: state::events::FundingPaymentRecord;<br align="left"/>let mut _108: i64;<br align="left"/>let mut _109: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _110: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _111: u16;<br align="left"/>let mut _112: i64;<br align="left"/>let mut _113: i64;<br align="left"/>let mut _114: i128;<br align="left"/>let mut _115: i128;<br align="left"/>let mut _116: i64;<br align="left"/>let mut _117: i64;<br align="left"/>let mut _118: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _119: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _120: i128;<br align="left"/>let mut _121: isize;<br align="left"/>let _122: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _123: !;<br align="left"/>let mut _124: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _125: i64;<br align="left"/>let _126: ();<br align="left"/>let mut _127: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _128: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _129: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _130: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _131: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _132: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _133: i64;<br align="left"/>let mut _134: isize;<br align="left"/>let _135: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _136: !;<br align="left"/>let mut _137: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _138: ();<br align="left"/>let mut _139: i64;<br align="left"/>let mut _140: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _141: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _142: i64;<br align="left"/>let mut _143: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _144: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _145: i64;<br align="left"/>let mut _146: isize;<br align="left"/>let _147: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _148: !;<br align="left"/>let mut _149: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _150: i64;<br align="left"/>let mut _151: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _152: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _153: ();<br align="left"/>let mut _154: isize;<br align="left"/>let mut _155: isize;<br align="left"/>let mut _156: isize;<br align="left"/>let mut _157: isize;<br align="left"/>let mut _158: isize;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_key =&gt; _2;<br align="left"/>debug perp_market_map =&gt; _3;<br align="left"/>debug now =&gt; _4;<br align="left"/>debug iter =&gt; _11;<br align="left"/>debug position_index =&gt; _19;<br align="left"/>debug market =&gt; _27;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>debug amm =&gt; _42;<br align="left"/>debug amm_cumulative_funding_rate =&gt; _46;<br align="left"/>debug residual =&gt; _62;<br align="left"/>debug val =&gt; _65;<br align="left"/>debug market_funding_payment =&gt; _66;<br align="left"/>debug residual =&gt; _76;<br align="left"/>debug val =&gt; _79;<br align="left"/>debug residual =&gt; _86;<br align="left"/>debug val =&gt; _89;<br align="left"/>debug market_position =&gt; _90;<br align="left"/>debug residual =&gt; _122;<br align="left"/>debug val =&gt; _125;<br align="left"/>debug residual =&gt; _135;<br align="left"/>debug val =&gt; _138;<br align="left"/>debug residual =&gt; _147;<br align="left"/>debug val =&gt; _150;<br align="left"/>>;
    bb0__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_9 = move _10 as &amp;[state::user::PerpPosition] (PointerCoercion(Unsize))<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = core::slice::&lt;impl [PerpPosition]&gt;::len(move _9)</td></tr></table>>];
    bb1__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_7 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: move _8 }<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _7)</td></tr></table>>];
    bb2__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_11)<br/>_11 = move _6<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;mut _11<br/>_15 = &amp;mut (*_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _15)</td></tr></table>>];
    bb4__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_17 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb5__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_14 as Some).0: usize)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _19<br/>_24 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_25 = Lt(_23, _24)<br/></td></tr><tr><td align="left">assert(move _25, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _24, _23)</td></tr></table>>];
    bb6__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_5 = const ()<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_153)<br/>_153 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _153)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_22 = (((*_1).4: [state::user::PerpPosition; 8])[_23].1: i64)<br/>_21 = Eq(move _22, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb9__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>_20 = const ()<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = &amp;(*_3)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _19<br/>_35 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_36 = Lt(_34, _35)<br/></td></tr><tr><td align="left">assert(move _36, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _35, _34)</td></tr></table>>];
    bb11__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_33 = &amp;(((*_1).4: [state::user::PerpPosition; 8])[_34].13: u16)<br/>_32 = &amp;(*_33)<br/></td></tr><tr><td align="left">_30 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _31, move _32)</td></tr></table>>];
    bb12__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb13__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_37 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb14__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = move ((_29 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_28 = move _41<br/>StorageDead(_41)<br/>_27 = &amp;mut _28<br/>_156 = discriminant(_29)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_29)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;(*_27)<br/></td></tr><tr><td align="left">_44 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _45)</td></tr></table>>];
    bb15__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb16__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>_154 = discriminant(_29)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>_43 = &amp;((*_44).1: state::perp_market::AMM)<br/>_42 = &amp;(*_43)<br/>StorageDead(_43)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _19<br/>_50 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_51 = Lt(_49, _50)<br/></td></tr><tr><td align="left">assert(move _51, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _50, _49)</td></tr></table>>];
    bb18__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_48 = (((*_1).4: [state::user::PerpPosition; 8])[_49].1: i64)<br/>_47 = Gt(move _48, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb19__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/>_46 = ((*_42).34: i128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/>_46 = ((*_42).35: i128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = _46<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = _19<br/>_59 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_60 = Lt(_58, _59)<br/></td></tr><tr><td align="left">assert(move _60, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _59, _58)</td></tr></table>>];
    bb22__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_57 = (((*_1).4: [state::user::PerpPosition; 8])[_58].0: i64)<br/></td></tr><tr><td align="left">_56 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _57)</td></tr></table>>];
    bb23__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/></td></tr><tr><td align="left">_55 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _56)</td></tr></table>>];
    bb24__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>_61 = discriminant(_55)<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb25__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = ((_55 as Continue).0: i128)<br/>_54 = _65<br/>StorageDead(_65)<br/>_52 = Ne(move _53, move _54)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb26__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_55 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_64)<br/>_64 = _62<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _64)</td></tr></table>>];
    bb27__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_62)<br/>StorageDead(_58)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = _46<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = _19<br/>_73 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_74 = Lt(_72, _73)<br/></td></tr><tr><td align="left">assert(move _74, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _73, _72)</td></tr></table>>];
    bb29__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>_13 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_71 = &amp;((*_1).4: [state::user::PerpPosition; 8])[_72]<br/>_70 = &amp;(*_71)<br/></td></tr><tr><td align="left">_68 = calculate_funding_payment(move _69, move _70)</td></tr></table>>];
    bb31__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">_67 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _68)</td></tr></table>>];
    bb32__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>_75 = discriminant(_67)<br/></td></tr><tr><td align="left">switchInt(move _75)</td></tr></table>>];
    bb33__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_67 as Continue).0: i64)<br/>_66 = _79<br/>StorageDead(_79)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/>StorageDead(_67)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = &amp;mut (*_1)<br/>StorageLive(_84)<br/>_84 = _66<br/></td></tr><tr><td align="left">_82 = User::update_cumulative_perp_funding(move _83, move _84)</td></tr></table>>];
    bb34__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = ((_67 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_78)<br/>_78 = _76<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _78)</td></tr></table>>];
    bb35__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_76)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb37__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>_85 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _85)</td></tr></table>>];
    bb38__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_81 as Continue).0: ())<br/>_80 = _89<br/>StorageDead(_89)<br/>StorageDead(_81)<br/>StorageDead(_80)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = _19<br/>_92 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_93 = Lt(_91, _92)<br/></td></tr><tr><td align="left">assert(move _93, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _92, _91)</td></tr></table>>];
    bb39__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_86)<br/>_86 = ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_88)<br/>_88 = _86<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _88)</td></tr></table>>];
    bb40__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_86)<br/>StorageDead(_81)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_90 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_91]<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = _4<br/>StorageLive(_109)<br/>_109 = ((*_1).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_110)<br/>_110 = (*_2)<br/>StorageLive(_111)<br/>_111 = ((*_90).13: u16)<br/>StorageLive(_112)<br/>_112 = _66<br/>StorageLive(_113)<br/>_113 = ((*_90).0: i64)<br/>StorageLive(_114)<br/>_114 = ((*_42).34: i128)<br/>StorageLive(_115)<br/>_115 = ((*_42).35: i128)<br/>StorageLive(_116)<br/>_116 = ((*_90).1: i64)<br/>_107 = FundingPaymentRecord { ts: move _108, user_authority: move _109, user: move _110, market_index: move _111, funding_payment: move _112, base_asset_amount: move _116, user_last_cumulative_funding: move _113, amm_cumulative_funding_long: move _114, amm_cumulative_funding_short: move _115 }<br/>StorageDead(_116)<br/>StorageDead(_115)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/>StorageDead(_112)<br/>StorageDead(_111)<br/>StorageDead(_110)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>_106 = &amp;_107<br/>_105 = &amp;(*_106)<br/></td></tr><tr><td align="left">_104 = &lt;FundingPaymentRecord as anchor_lang::Event&gt;::data(move _105)</td></tr></table>>];
    bb42__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>_103 = &amp;_104<br/>_102 = &amp;(*_103)<br/></td></tr><tr><td align="left">_101 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _102)</td></tr></table>>];
    bb43__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">_100 = &amp;(*_101)<br/>StorageDead(_102)<br/>_99 = [move _100]<br/>StorageDead(_100)<br/>_98 = &amp;_99<br/>_97 = &amp;(*_98)<br/>_96 = move _97 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">_95 = solana_program::log::sol_log_data(move _96)</td></tr></table>>];
    bb44__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/></td></tr><tr><td align="left">drop(_104)</td></tr></table>>];
    bb45__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/>StorageDead(_101)<br/>StorageDead(_99)<br/>StorageDead(_98)<br/>StorageDead(_95)<br/>_94 = const ()<br/>StorageDead(_94)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>_120 = _46<br/></td></tr><tr><td align="left">_119 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _120)</td></tr></table>>];
    bb46__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/></td></tr><tr><td align="left">_118 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _119)</td></tr></table>>];
    bb47__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>_121 = discriminant(_118)<br/></td></tr><tr><td align="left">switchInt(move _121)</td></tr></table>>];
    bb48__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_125)<br/>_125 = ((_118 as Continue).0: i64)<br/>_117 = _125<br/>StorageDead(_125)<br/>((*_90).0: i64) = move _117<br/>StorageDead(_117)<br/>StorageDead(_118)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = &amp;mut (*_90)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_132 = &amp;mut (*_27)<br/></td></tr><tr><td align="left">_131 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _132)</td></tr></table>>];
    bb49__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = ((_118 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_124)<br/>_124 = _122<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _124)</td></tr></table>>];
    bb50__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_117)<br/>StorageDead(_118)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_130 = &amp;mut (*_131)<br/>StorageDead(_132)<br/>StorageLive(_133)<br/>_133 = _66<br/></td></tr><tr><td align="left">_128 = update_quote_asset_and_break_even_amount(move _129, move _130, move _133)</td></tr></table>>];
    bb52__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>StorageDead(_130)<br/>StorageDead(_129)<br/></td></tr><tr><td align="left">_127 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _128)</td></tr></table>>];
    bb53__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>_134 = discriminant(_127)<br/></td></tr><tr><td align="left">switchInt(move _134)</td></tr></table>>];
    bb54__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_138)<br/>_138 = ((_127 as Continue).0: ())<br/>_126 = _138<br/>StorageDead(_138)<br/>StorageDead(_131)<br/>StorageDead(_127)<br/>StorageDead(_126)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = &amp;(*_27)<br/></td></tr><tr><td align="left">_143 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _144)</td></tr></table>>];
    bb55__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_135)<br/>_135 = ((_127 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_137)<br/>_137 = _135<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _137)</td></tr></table>>];
    bb56__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_137)<br/>StorageDead(_135)<br/>StorageDead(_131)<br/>StorageDead(_127)<br/>StorageDead(_126)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>_142 = (((*_143).1: state::perp_market::AMM).80: i64)<br/>StorageLive(_145)<br/>_145 = _66<br/></td></tr><tr><td align="left">_141 = &lt;i64 as SafeMath&gt;::safe_sub(move _142, move _145)</td></tr></table>>];
    bb58__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_145)<br/>StorageDead(_142)<br/></td></tr><tr><td align="left">_140 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _141)</td></tr></table>>];
    bb59__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_141)<br/>_146 = discriminant(_140)<br/></td></tr><tr><td align="left">switchInt(move _146)</td></tr></table>>];
    bb60__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageLive(_150)<br/>_150 = ((_140 as Continue).0: i64)<br/>_139 = _150<br/>StorageDead(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>_152 = &amp;mut (*_27)<br/></td></tr><tr><td align="left">_151 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _152)</td></tr></table>>];
    bb61__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageLive(_147)<br/>_147 = ((_140 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_149)<br/>_149 = _147<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _149)</td></tr></table>>];
    bb62__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_147)<br/>StorageDead(_139)<br/>StorageDead(_143)<br/>StorageDead(_140)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>(((*_151).1: state::perp_market::AMM).80: i64) = move _139<br/>StorageDead(_139)<br/>StorageDead(_151)<br/>StorageDead(_143)<br/>StorageDead(_140)<br/>_13 = const ()<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">drop(_28)</td></tr></table>>];
    bb65__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>_12 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">drop(_28)</td></tr></table>>];
    bb69__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left">return</td></tr></table>>];
    bb71__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">71 (cleanup)</td></tr><tr><td align="left">drop(_104)</td></tr></table>>];
    bb72__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">72 (cleanup)</td></tr><tr><td align="left">drop(_28)</td></tr></table>>];
    bb73__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">73 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb74__0_133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">74 (cleanup)</td></tr><tr><td align="left" balign="left">_158 = discriminant(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_133 -> bb1__0_133 [label="return"];
    bb1__0_133 -> bb2__0_133 [label="return"];
    bb2__0_133 -> bb3__0_133 [label=""];
    bb3__0_133 -> bb4__0_133 [label="return"];
    bb4__0_133 -> bb7__0_133 [label="0"];
    bb4__0_133 -> bb5__0_133 [label="1"];
    bb4__0_133 -> bb6__0_133 [label="otherwise"];
    bb5__0_133 -> bb8__0_133 [label="success"];
    bb7__0_133 -> bb70__0_133 [label=""];
    bb8__0_133 -> bb10__0_133 [label="0"];
    bb8__0_133 -> bb9__0_133 [label="otherwise"];
    bb9__0_133 -> bb3__0_133 [label=""];
    bb10__0_133 -> bb11__0_133 [label="success"];
    bb11__0_133 -> bb12__0_133 [label="return"];
    bb12__0_133 -> bb13__0_133 [label="return"];
    bb12__0_133 -> bb73__0_133 [label="unwind"];
    bb13__0_133 -> bb14__0_133 [label="0"];
    bb13__0_133 -> bb15__0_133 [label="1"];
    bb13__0_133 -> bb6__0_133 [label="otherwise"];
    bb14__0_133 -> bb17__0_133 [label="return"];
    bb14__0_133 -> bb72__0_133 [label="unwind"];
    bb15__0_133 -> bb16__0_133 [label="return"];
    bb15__0_133 -> bb74__0_133 [label="unwind"];
    bb16__0_133 -> bb69__0_133 [label=""];
    bb17__0_133 -> bb18__0_133 [label="success"];
    bb17__0_133 -> bb72__0_133 [label="unwind"];
    bb18__0_133 -> bb20__0_133 [label="0"];
    bb18__0_133 -> bb19__0_133 [label="otherwise"];
    bb19__0_133 -> bb21__0_133 [label=""];
    bb20__0_133 -> bb21__0_133 [label=""];
    bb21__0_133 -> bb22__0_133 [label="success"];
    bb21__0_133 -> bb72__0_133 [label="unwind"];
    bb22__0_133 -> bb23__0_133 [label="return"];
    bb22__0_133 -> bb72__0_133 [label="unwind"];
    bb23__0_133 -> bb24__0_133 [label="return"];
    bb23__0_133 -> bb72__0_133 [label="unwind"];
    bb24__0_133 -> bb25__0_133 [label="0"];
    bb24__0_133 -> bb26__0_133 [label="1"];
    bb24__0_133 -> bb6__0_133 [label="otherwise"];
    bb25__0_133 -> bb29__0_133 [label="0"];
    bb25__0_133 -> bb28__0_133 [label="otherwise"];
    bb26__0_133 -> bb27__0_133 [label="return"];
    bb26__0_133 -> bb72__0_133 [label="unwind"];
    bb27__0_133 -> bb68__0_133 [label=""];
    bb28__0_133 -> bb30__0_133 [label="success"];
    bb28__0_133 -> bb72__0_133 [label="unwind"];
    bb29__0_133 -> bb64__0_133 [label=""];
    bb30__0_133 -> bb31__0_133 [label="return"];
    bb30__0_133 -> bb72__0_133 [label="unwind"];
    bb31__0_133 -> bb32__0_133 [label="return"];
    bb31__0_133 -> bb72__0_133 [label="unwind"];
    bb32__0_133 -> bb33__0_133 [label="0"];
    bb32__0_133 -> bb34__0_133 [label="1"];
    bb32__0_133 -> bb6__0_133 [label="otherwise"];
    bb33__0_133 -> bb36__0_133 [label="return"];
    bb33__0_133 -> bb72__0_133 [label="unwind"];
    bb34__0_133 -> bb35__0_133 [label="return"];
    bb34__0_133 -> bb72__0_133 [label="unwind"];
    bb35__0_133 -> bb67__0_133 [label=""];
    bb36__0_133 -> bb37__0_133 [label="return"];
    bb36__0_133 -> bb72__0_133 [label="unwind"];
    bb37__0_133 -> bb38__0_133 [label="0"];
    bb37__0_133 -> bb39__0_133 [label="1"];
    bb37__0_133 -> bb6__0_133 [label="otherwise"];
    bb38__0_133 -> bb41__0_133 [label="success"];
    bb38__0_133 -> bb72__0_133 [label="unwind"];
    bb39__0_133 -> bb40__0_133 [label="return"];
    bb39__0_133 -> bb72__0_133 [label="unwind"];
    bb40__0_133 -> bb67__0_133 [label=""];
    bb41__0_133 -> bb42__0_133 [label="return"];
    bb41__0_133 -> bb72__0_133 [label="unwind"];
    bb42__0_133 -> bb43__0_133 [label="return"];
    bb42__0_133 -> bb71__0_133 [label="unwind"];
    bb43__0_133 -> bb44__0_133 [label="return"];
    bb43__0_133 -> bb71__0_133 [label="unwind"];
    bb44__0_133 -> bb45__0_133 [label="return"];
    bb44__0_133 -> bb72__0_133 [label="unwind"];
    bb45__0_133 -> bb46__0_133 [label="return"];
    bb45__0_133 -> bb72__0_133 [label="unwind"];
    bb46__0_133 -> bb47__0_133 [label="return"];
    bb46__0_133 -> bb72__0_133 [label="unwind"];
    bb47__0_133 -> bb48__0_133 [label="0"];
    bb47__0_133 -> bb49__0_133 [label="1"];
    bb47__0_133 -> bb6__0_133 [label="otherwise"];
    bb48__0_133 -> bb51__0_133 [label="return"];
    bb48__0_133 -> bb72__0_133 [label="unwind"];
    bb49__0_133 -> bb50__0_133 [label="return"];
    bb49__0_133 -> bb72__0_133 [label="unwind"];
    bb50__0_133 -> bb66__0_133 [label=""];
    bb51__0_133 -> bb52__0_133 [label="return"];
    bb51__0_133 -> bb72__0_133 [label="unwind"];
    bb52__0_133 -> bb53__0_133 [label="return"];
    bb52__0_133 -> bb72__0_133 [label="unwind"];
    bb53__0_133 -> bb54__0_133 [label="0"];
    bb53__0_133 -> bb55__0_133 [label="1"];
    bb53__0_133 -> bb6__0_133 [label="otherwise"];
    bb54__0_133 -> bb57__0_133 [label="return"];
    bb54__0_133 -> bb72__0_133 [label="unwind"];
    bb55__0_133 -> bb56__0_133 [label="return"];
    bb55__0_133 -> bb72__0_133 [label="unwind"];
    bb56__0_133 -> bb66__0_133 [label=""];
    bb57__0_133 -> bb58__0_133 [label="return"];
    bb57__0_133 -> bb72__0_133 [label="unwind"];
    bb58__0_133 -> bb59__0_133 [label="return"];
    bb58__0_133 -> bb72__0_133 [label="unwind"];
    bb59__0_133 -> bb60__0_133 [label="0"];
    bb59__0_133 -> bb61__0_133 [label="1"];
    bb59__0_133 -> bb6__0_133 [label="otherwise"];
    bb60__0_133 -> bb63__0_133 [label="return"];
    bb60__0_133 -> bb72__0_133 [label="unwind"];
    bb61__0_133 -> bb62__0_133 [label="return"];
    bb61__0_133 -> bb72__0_133 [label="unwind"];
    bb62__0_133 -> bb66__0_133 [label=""];
    bb63__0_133 -> bb64__0_133 [label=""];
    bb64__0_133 -> bb65__0_133 [label="return"];
    bb64__0_133 -> bb73__0_133 [label="unwind"];
    bb65__0_133 -> bb3__0_133 [label=""];
    bb66__0_133 -> bb67__0_133 [label=""];
    bb67__0_133 -> bb68__0_133 [label=""];
    bb68__0_133 -> bb69__0_133 [label="return"];
    bb68__0_133 -> bb73__0_133 [label="unwind"];
    bb69__0_133 -> bb70__0_133 [label=""];
    bb71__0_133 -> bb72__0_133 [label="return"];
    bb72__0_133 -> bb73__0_133 [label="return"];
    bb74__0_133 -> bb73__0_133 [label=""];
}
