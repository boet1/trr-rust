// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4018:10: 4018:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4018:10: 4018:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeSignedMsgWsDelegatesBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _20: ();
    let mut _21: bool;
    let mut _22: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _23: !;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::ErrorCode;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: std::ops::RangeFrom<usize>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _37: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::user::InitializeSignedMsgWsDelegatesBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _52: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::user::InitializeSignedMsgWsDelegatesBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::user::InitializeSignedMsgWsDelegatesBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _82: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _90: (anchor_lang::prelude::Pubkey, u8);
    let mut _91: &[&[u8]];
    let mut _92: &[&[u8]; 2];
    let _93: &[&[u8]; 2];
    let _94: [&[u8]; 2];
    let mut _95: &[u8];
    let _96: &[u8];
    let mut _97: &str;
    let _98: &str;
    let mut _99: &[u8];
    let _100: &[u8];
    let mut _101: &anchor_lang::prelude::Pubkey;
    let _102: anchor_lang::prelude::Pubkey;
    let mut _103: &anchor_lang::prelude::Signer<'_>;
    let mut _104: &anchor_lang::prelude::Pubkey;
    let mut _105: u8;
    let _106: ();
    let mut _107: bool;
    let mut _108: &anchor_lang::prelude::Pubkey;
    let _109: anchor_lang::prelude::Pubkey;
    let mut _110: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: &anchor_lang::prelude::Pubkey;
    let mut _112: !;
    let mut _113: anchor_lang::error::Error;
    let mut _114: anchor_lang::error::Error;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::ErrorCode;
    let mut _117: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _118: anchor_lang::prelude::Pubkey;
    let mut _119: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: anchor_lang::prelude::Pubkey;
    let mut _123: &&anchor_lang::prelude::AccountInfo<'_>;
    let _124: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _127: usize;
    let mut _128: (usize, bool);
    let mut _129: usize;
    let mut _130: usize;
    let mut _131: &std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _132: (usize, bool);
    let mut _133: (usize, bool);
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: &&anchor_lang::prelude::Pubkey;
    let mut _138: &&anchor_lang::prelude::Pubkey;
    let _139: &anchor_lang::prelude::Pubkey;
    let _140: anchor_lang::prelude::Pubkey;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let _143: ();
    let mut _144: bool;
    let mut _145: u64;
    let mut _148: &anchor_lang::prelude::Rent;
    let mut _149: usize;
    let mut _151: anchor_lang::prelude::AccountInfo<'_>;
    let mut _152: &anchor_lang::prelude::Signer<'_>;
    let mut _153: anchor_lang::prelude::AccountInfo<'_>;
    let mut _154: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _156: anchor_lang::prelude::AccountInfo<'_>;
    let mut _157: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _158: anchor_lang::system_program::CreateAccount<'_>;
    let _159: ();
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _161: std::result::Result<(), anchor_lang::error::Error>;
    let mut _162: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _163: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _164: &[&[&[u8]]];
    let mut _165: &[&[&[u8]]; 1];
    let _166: &[&[&[u8]]; 1];
    let _167: [&[&[u8]]; 1];
    let mut _168: &[&[u8]];
    let _169: &[&[u8]];
    let _170: &[&[u8]];
    let mut _171: &[&[u8]; 3];
    let _172: [&[u8]; 3];
    let mut _173: &[u8];
    let mut _174: &str;
    let _175: &str;
    let mut _176: &[u8];
    let _177: &[u8];
    let mut _178: &anchor_lang::prelude::Pubkey;
    let _179: anchor_lang::prelude::Pubkey;
    let mut _180: &anchor_lang::prelude::Signer<'_>;
    let mut _181: &[u8];
    let _182: &[u8];
    let _183: &[u8];
    let mut _184: &[u8; 1];
    let _185: [u8; 1];
    let mut _186: u8;
    let mut _187: std::ops::RangeFull;
    let mut _188: std::ops::RangeFull;
    let mut _189: u64;
    let mut _190: u64;
    let mut _191: usize;
    let mut _192: &anchor_lang::prelude::Pubkey;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _198: ();
    let mut _199: bool;
    let mut _200: &anchor_lang::prelude::Pubkey;
    let _201: anchor_lang::prelude::Pubkey;
    let mut _202: &anchor_lang::prelude::Signer<'_>;
    let mut _203: &anchor_lang::prelude::Pubkey;
    let _204: anchor_lang::prelude::Pubkey;
    let mut _205: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _206: !;
    let mut _207: anchor_lang::error::Error;
    let mut _208: anchor_lang::error::Error;
    let mut _209: anchor_lang::error::AnchorError;
    let mut _210: std::string::String;
    let mut _211: &anchor_lang::error::ErrorCode;
    let _212: anchor_lang::error::ErrorCode;
    let mut _213: u32;
    let mut _214: anchor_lang::error::ErrorCode;
    let mut _215: std::string::String;
    let mut _216: &anchor_lang::error::ErrorCode;
    let _217: anchor_lang::error::ErrorCode;
    let mut _218: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _219: anchor_lang::error::ErrorOrigin;
    let mut _220: anchor_lang::error::Source;
    let mut _221: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _222: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _223: anchor_lang::prelude::Pubkey;
    let mut _224: &anchor_lang::prelude::Signer<'_>;
    let mut _225: anchor_lang::prelude::Pubkey;
    let mut _226: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _228: u64;
    let mut _229: u64;
    let mut _230: &anchor_lang::prelude::Rent;
    let mut _231: usize;
    let mut _232: u64;
    let _233: ();
    let mut _234: bool;
    let mut _235: u64;
    let mut _237: anchor_lang::prelude::AccountInfo<'_>;
    let mut _238: &anchor_lang::prelude::Signer<'_>;
    let mut _239: anchor_lang::prelude::AccountInfo<'_>;
    let mut _240: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _242: anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _244: anchor_lang::system_program::Transfer<'_>;
    let _245: ();
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _247: std::result::Result<(), anchor_lang::error::Error>;
    let mut _248: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _249: u64;
    let mut _250: isize;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _256: anchor_lang::prelude::AccountInfo<'_>;
    let mut _257: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _259: anchor_lang::prelude::AccountInfo<'_>;
    let mut _260: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _261: anchor_lang::system_program::Allocate<'_>;
    let _262: ();
    let mut _263: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _264: std::result::Result<(), anchor_lang::error::Error>;
    let mut _265: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _266: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _267: &[&[&[u8]]];
    let mut _268: &[&[&[u8]]; 1];
    let _269: &[&[&[u8]]; 1];
    let _270: [&[&[u8]]; 1];
    let mut _271: &[&[u8]];
    let _272: &[&[u8]];
    let _273: &[&[u8]];
    let mut _274: &[&[u8]; 3];
    let _275: [&[u8]; 3];
    let mut _276: &[u8];
    let mut _277: &str;
    let _278: &str;
    let mut _279: &[u8];
    let _280: &[u8];
    let mut _281: &anchor_lang::prelude::Pubkey;
    let _282: anchor_lang::prelude::Pubkey;
    let mut _283: &anchor_lang::prelude::Signer<'_>;
    let mut _284: &[u8];
    let _285: &[u8];
    let _286: &[u8];
    let mut _287: &[u8; 1];
    let _288: [u8; 1];
    let mut _289: u8;
    let mut _290: std::ops::RangeFull;
    let mut _291: std::ops::RangeFull;
    let mut _292: u64;
    let mut _293: usize;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _300: anchor_lang::prelude::AccountInfo<'_>;
    let mut _301: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: anchor_lang::prelude::AccountInfo<'_>;
    let mut _304: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _305: anchor_lang::system_program::Assign<'_>;
    let _306: ();
    let mut _307: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _308: std::result::Result<(), anchor_lang::error::Error>;
    let mut _309: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _310: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _311: &[&[&[u8]]];
    let mut _312: &[&[&[u8]]; 1];
    let _313: &[&[&[u8]]; 1];
    let _314: [&[&[u8]]; 1];
    let mut _315: &[&[u8]];
    let _316: &[&[u8]];
    let _317: &[&[u8]];
    let mut _318: &[&[u8]; 3];
    let _319: [&[u8]; 3];
    let mut _320: &[u8];
    let mut _321: &str;
    let _322: &str;
    let mut _323: &[u8];
    let _324: &[u8];
    let mut _325: &anchor_lang::prelude::Pubkey;
    let _326: anchor_lang::prelude::Pubkey;
    let mut _327: &anchor_lang::prelude::Signer<'_>;
    let mut _328: &[u8];
    let _329: &[u8];
    let _330: &[u8];
    let mut _331: &[u8; 1];
    let _332: [u8; 1];
    let mut _333: u8;
    let mut _334: std::ops::RangeFull;
    let mut _335: std::ops::RangeFull;
    let mut _336: &anchor_lang::prelude::Pubkey;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _342: std::result::Result<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>, anchor_lang::error::Error>;
    let mut _343: &anchor_lang::prelude::AccountInfo<'_>;
    let _344: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _345: isize;
    let mut _348: !;
    let mut _349: anchor_lang::error::Error;
    let mut _350: anchor_lang::error::Error;
    let mut _351: std::result::Result<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>, anchor_lang::error::Error>;
    let mut _352: &anchor_lang::prelude::AccountInfo<'_>;
    let _353: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: isize;
    let mut _357: !;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::Error;
    let _360: ();
    let mut _361: bool;
    let _362: ();
    let mut _363: bool;
    let mut _364: usize;
    let mut _365: usize;
    let mut _366: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _367: !;
    let mut _368: anchor_lang::error::Error;
    let mut _369: anchor_lang::error::Error;
    let mut _370: anchor_lang::error::Error;
    let mut _371: anchor_lang::error::ErrorCode;
    let mut _372: (usize, usize);
    let mut _373: usize;
    let mut _374: usize;
    let mut _375: &anchor_lang::prelude::AccountInfo<'_>;
    let _376: ();
    let mut _377: bool;
    let mut _378: &&anchor_lang::prelude::Pubkey;
    let mut _379: &&anchor_lang::prelude::Pubkey;
    let mut _380: !;
    let mut _381: anchor_lang::error::Error;
    let mut _382: anchor_lang::error::Error;
    let mut _383: anchor_lang::error::Error;
    let mut _384: anchor_lang::error::ErrorCode;
    let mut _385: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _386: anchor_lang::prelude::Pubkey;
    let mut _387: anchor_lang::prelude::Pubkey;
    let mut _389: &anchor_lang::prelude::Rent;
    let mut _390: usize;
    let mut _391: bool;
    let mut _392: u64;
    let mut _393: &anchor_lang::prelude::AccountInfo<'_>;
    let _394: anchor_lang::prelude::AccountInfo<'_>;
    let mut _395: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _396: u64;
    let mut _397: !;
    let mut _398: anchor_lang::error::Error;
    let mut _399: anchor_lang::error::Error;
    let mut _400: anchor_lang::error::ErrorCode;
    let _401: ();
    let mut _402: bool;
    let mut _403: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _404: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let _405: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _406: !;
    let mut _407: anchor_lang::error::Error;
    let mut _408: anchor_lang::error::Error;
    let mut _409: anchor_lang::error::ErrorCode;
    let _410: ();
    let mut _411: bool;
    let mut _412: &anchor_lang::prelude::Rent;
    let mut _413: u64;
    let mut _414: &anchor_lang::prelude::AccountInfo<'_>;
    let _415: anchor_lang::prelude::AccountInfo<'_>;
    let mut _416: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _417: usize;
    let mut _418: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _419: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _420: &anchor_lang::prelude::AccountInfo<'_>;
    let _421: anchor_lang::prelude::AccountInfo<'_>;
    let mut _422: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _428: !;
    let mut _429: anchor_lang::error::Error;
    let mut _430: anchor_lang::error::Error;
    let mut _431: anchor_lang::error::ErrorCode;
    let _432: ();
    let mut _433: bool;
    let mut _434: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _435: &anchor_lang::prelude::Signer<'_>;
    let _436: &anchor_lang::prelude::Signer<'_>;
    let mut _437: !;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::Error;
    let mut _440: anchor_lang::error::ErrorCode;
    let mut _441: instructions::user::InitializeSignedMsgWsDelegates<'_>;
    let mut _442: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _443: anchor_lang::prelude::Signer<'_>;
    let mut _444: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _445: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _449: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _450: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _451: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _452: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _453: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _454: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _455: bool;
    let mut _456: bool;
    let mut _457: bool;
    let mut _458: bool;
    let mut _459: bool;
    let mut _460: bool;
    let mut _461: bool;
    let mut _462: bool;
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: bool;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: std::vec::Vec<anchor_lang::prelude::Pubkey>;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args;
        scope 2 {
            debug delegates => _7;
            let _26: &anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug signed_msg_ws_delegates => _26;
                let _35: anchor_lang::prelude::Signer<'_>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::Signer<'_>;
                scope 8 {
                    debug authority => _35;
                    let _50: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 13 {
                        debug rent => _50;
                        let _65: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        scope 18 {
                            debug system_program => _65;
                            let _80: anchor_lang::prelude::Rent;
                            let _84: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _87: anchor_lang::prelude::Rent;
                            scope 23 {
                                debug __anchor_rent => _80;
                                let _88: anchor_lang::prelude::Pubkey;
                                let _89: u8;
                                scope 28 {
                                    debug __pda_address => _88;
                                    debug __bump => _89;
                                    let _121: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
                                    let _122: &anchor_lang::prelude::AccountInfo<'_>;
                                    scope 29 {
                                        debug signed_msg_ws_delegates => _121;
                                        let _424: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _427: usize;
                                        scope 67 {
                                            debug residual => _424;
                                            scope 68 {
                                            }
                                        }
                                        scope 69 {
                                            debug val => _427;
                                            scope 70 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug actual_field => _122;
                                        let _125: &anchor_lang::prelude::Pubkey;
                                        scope 31 {
                                            debug actual_owner => _125;
                                            let _126: usize;
                                            scope 32 {
                                                debug space => _126;
                                                let _134: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
                                                let _141: u64;
                                                let _355: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
                                                let _356: anchor_lang::error::Error;
                                                let mut _448: &&anchor_lang::prelude::Pubkey;
                                                scope 33 {
                                                    debug pa => _134;
                                                    let _388: u64;
                                                    scope 66 {
                                                        debug required_lamports => _388;
                                                    }
                                                }
                                                scope 34 {
                                                    debug __current_lamports => _141;
                                                    let _146: usize;
                                                    let _227: u64;
                                                    let _346: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
                                                    let _347: anchor_lang::error::Error;
                                                    let mut _446: &anchor_lang::error::ErrorCode;
                                                    let mut _447: &anchor_lang::error::ErrorCode;
                                                    scope 35 {
                                                        debug space => _146;
                                                        let _147: u64;
                                                        scope 36 {
                                                            debug lamports => _147;
                                                            let _150: anchor_lang::system_program::CreateAccount<'_>;
                                                            scope 37 {
                                                                debug cpi_accounts => _150;
                                                                let _155: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                scope 38 {
                                                                    debug cpi_context => _155;
                                                                    let _194: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _197: ();
                                                                    scope 39 {
                                                                        debug residual => _194;
                                                                        scope 40 {
                                                                        }
                                                                    }
                                                                    scope 41 {
                                                                        debug val => _197;
                                                                        scope 42 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 43 {
                                                        debug required_lamports => _227;
                                                        let _236: anchor_lang::system_program::Transfer<'_>;
                                                        let _255: anchor_lang::system_program::Allocate<'_>;
                                                        scope 44 {
                                                            debug cpi_accounts => _236;
                                                            let _241: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                            scope 45 {
                                                                debug cpi_context => _241;
                                                                let _251: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _254: ();
                                                                scope 46 {
                                                                    debug residual => _251;
                                                                    scope 47 {
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug val => _254;
                                                                    scope 49 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 50 {
                                                            debug cpi_accounts => _255;
                                                            let _258: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                            scope 51 {
                                                                debug cpi_context => _258;
                                                                let _295: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _298: ();
                                                                let _299: anchor_lang::system_program::Assign<'_>;
                                                                scope 52 {
                                                                    debug residual => _295;
                                                                    scope 53 {
                                                                    }
                                                                }
                                                                scope 54 {
                                                                    debug val => _298;
                                                                    scope 55 {
                                                                    }
                                                                }
                                                                scope 56 {
                                                                    debug cpi_accounts => _299;
                                                                    let _302: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                    scope 57 {
                                                                        debug cpi_context => _302;
                                                                        let _338: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _341: ();
                                                                        scope 58 {
                                                                            debug residual => _338;
                                                                            scope 59 {
                                                                            }
                                                                        }
                                                                        scope 60 {
                                                                            debug val => _341;
                                                                            scope 61 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 62 {
                                                        debug val => _346;
                                                    }
                                                    scope 63 {
                                                        debug e => _347;
                                                    }
                                                }
                                                scope 64 {
                                                    debug val => _355;
                                                }
                                                scope 65 {
                                                    debug e => _356;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _84;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _87;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _46;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _49;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _465 = const false;
        _464 = const false;
        _463 = const false;
        _462 = const false;
        _461 = const false;
        _460 = const false;
        _459 = const false;
        _458 = const false;
        _457 = const false;
        _456 = const false;
        _455 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
        _10 = std::result::Result::<<instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18}>(move _11, move _14) -> [return: bb2, unwind: bb224];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind: bb224];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::user::InitializeSignedMsgWsDelegates<'info> as anchor_lang::Accounts<'info, instructions::user::InitializeSignedMsgWsDelegatesBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = move (_8.0: std::vec::Vec<anchor_lang::prelude::Pubkey>);
        _468 = discriminant(_9);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _449 = deref_copy (*_2);
        _22 = &(*_449);
        _21 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _22) -> [return: bb8, unwind: bb223];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind: bb256];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        _466 = discriminant(_9);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb213;
    }

    bb8: {
        switchInt(move _21) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = AccountNotEnoughKeys;
        _24 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _25) -> [return: bb10, unwind: bb223];
    }

    bb10: {
        StorageDead(_25);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb211;
    }

    bb11: {
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const 0_usize;
        _450 = deref_copy (*_2);
        _28 = Len((*_450));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb12, unwind: bb223];
    }

    bb12: {
        _451 = deref_copy (*_2);
        _26 = &(*_451)[_27];
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _452 = deref_copy (*_2);
        _33 = &(*_452);
        StorageLive(_34);
        _34 = RangeFrom::<usize> { start: const 1_usize };
        _32 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _33, move _34) -> [return: bb13, unwind: bb223];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = &(*_32);
        _30 = &(*_31);
        (*_2) = move _30;
        StorageDead(_30);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeSignedMsgWsDelegatesBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind: bb223];
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
        _37 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18}>(move _38, move _44) -> [return: bb15, unwind: bb223];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb223];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _35 = move _49;
        StorageDead(_49);
        _470 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeSignedMsgWsDelegatesBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind: bb223];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb255];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _514 = discriminant(_36);
        StorageDead(_36);
        goto -> bb210;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
        _52 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18}>(move _53, move _59) -> [return: bb21, unwind: bb223];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb223];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _50 = move _64;
        StorageDead(_64);
        _472 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeSignedMsgWsDelegatesBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb223];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb254];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _512 = discriminant(_51);
        StorageDead(_51);
        goto -> bb209;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18};
        _67 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4018:10: 4018:18}>(move _68, move _74) -> [return: bb27, unwind: bb223];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb223];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _65 = move _79;
        StorageDead(_79);
        _474 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb32, unwind: bb223];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb253];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _510 = discriminant(_66);
        StorageDead(_66);
        goto -> bb208;
    }

    bb32: {
        _81 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _82) -> [return: bb33, unwind: bb223];
    }

    bb33: {
        StorageDead(_82);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_87);
        _87 = ((_81 as Continue).0: anchor_lang::prelude::Rent);
        _80 = _87;
        StorageDead(_87);
        _476 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = const _;
        _97 = &(*_98);
        _96 = <str as AsRef<[u8]>>::as_ref(move _97) -> [return: bb37, unwind: bb223];
    }

    bb35: {
        StorageLive(_84);
        _84 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _86) -> [return: bb36, unwind: bb252];
    }

    bb36: {
        StorageDead(_86);
        StorageDead(_84);
        _508 = discriminant(_81);
        StorageDead(_81);
        goto -> bb207;
    }

    bb37: {
        _95 = &(*_96);
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_35;
        _102 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _103) -> [return: bb38, unwind: bb223];
    }

    bb38: {
        _101 = &_102;
        StorageDead(_103);
        _100 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _101) -> [return: bb39, unwind: bb223];
    }

    bb39: {
        _99 = &(*_100);
        StorageDead(_101);
        _94 = [move _95, move _99];
        StorageDead(_99);
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = move _92 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_92);
        StorageLive(_104);
        _104 = &(*_1);
        _90 = anchor_lang::prelude::Pubkey::find_program_address(move _91, move _104) -> [return: bb40, unwind: bb223];
    }

    bb40: {
        StorageDead(_104);
        StorageDead(_91);
        StorageLive(_88);
        _88 = (_90.0: anchor_lang::prelude::Pubkey);
        StorageLive(_89);
        _89 = (_90.1: u8);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        StorageLive(_105);
        _105 = _89;
        ((*_4).0: u8) = move _105;
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_26);
        _109 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _110) -> [return: bb41, unwind: bb223];
    }

    bb41: {
        _108 = &_109;
        StorageDead(_110);
        StorageLive(_111);
        _111 = &_88;
        _107 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _108, move _111) -> [return: bb42, unwind: bb223];
    }

    bb42: {
        switchInt(move _107) -> [0: bb48, otherwise: bb43];
    }

    bb43: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = ConstraintSeeds;
        _115 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _116) -> [return: bb44, unwind: bb223];
    }

    bb44: {
        StorageDead(_116);
        _114 = anchor_lang::error::Error::with_account_name::<&str>(move _115, const "signed_msg_ws_delegates") -> [return: bb45, unwind: bb223];
    }

    bb45: {
        _465 = const true;
        StorageDead(_115);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_26);
        _118 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _119) -> [return: bb46, unwind: bb251];
    }

    bb46: {
        StorageDead(_119);
        StorageLive(_120);
        _120 = _88;
        _117 = (move _118, move _120);
        StorageDead(_120);
        StorageDead(_118);
        _465 = const false;
        _113 = anchor_lang::error::Error::with_pubkeys(move _114, move _117) -> [return: bb47, unwind: bb251];
    }

    bb47: {
        StorageDead(_117);
        _465 = const false;
        StorageDead(_114);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _113);
        StorageDead(_113);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb206;
    }

    bb48: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        _106 = const ();
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_26;
        _123 = &(*_124);
        _122 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _123) -> [return: bb49, unwind: bb223];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_124);
        StorageLive(_125);
        _125 = ((*_122).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_126);
        StorageLive(_127);
        _128 = CheckedAdd(const 8_usize, const 4_usize);
        assert(!move (_128.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_usize, const 4_usize) -> [success: bb50, unwind: bb223];
    }

    bb50: {
        _127 = move (_128.0: usize);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_7;
        _130 = Vec::<anchor_lang::prelude::Pubkey>::len(move _131) -> [return: bb51, unwind: bb223];
    }

    bb51: {
        StorageDead(_131);
        _132 = CheckedMul(_130, const 32_usize);
        assert(!move (_132.1: bool), "attempt to compute `{} * {}`, which would overflow", move _130, const 32_usize) -> [success: bb52, unwind: bb223];
    }

    bb52: {
        _129 = move (_132.0: usize);
        StorageDead(_130);
        _133 = CheckedAdd(_127, _129);
        assert(!move (_133.1: bool), "attempt to compute `{} + {}`, which would overflow", move _127, move _129) -> [success: bb53, unwind: bb223];
    }

    bb53: {
        _126 = move (_133.0: usize);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_134);
        StorageLive(_135);
        _135 = const false;
        switchInt(move _135) -> [0: bb56, otherwise: bb54];
    }

    bb54: {
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_125;
        StorageLive(_138);
        _448 = const _;
        _138 = &(*_448);
        _136 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _137, move _138) -> [return: bb55, unwind: bb223];
    }

    bb55: {
        switchInt(move _136) -> [0: bb136, otherwise: bb56];
    }

    bb56: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_26);
        _141 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _142) -> [return: bb57, unwind: bb223];
    }

    bb57: {
        StorageDead(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _141;
        _144 = Eq(move _145, const 0_u64);
        switchInt(move _144) -> [0: bb75, otherwise: bb58];
    }

    bb58: {
        StorageDead(_145);
        StorageLive(_146);
        _146 = _126;
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_80;
        StorageLive(_149);
        _149 = _146;
        _147 = anchor_lang::prelude::Rent::minimum_balance(move _148, move _149) -> [return: bb59, unwind: bb223];
    }

    bb59: {
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_35;
        _151 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _152) -> [return: bb60, unwind: bb223];
    }

    bb60: {
        StorageDead(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(*_26);
        _153 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _154) -> [return: bb61, unwind: bb222];
    }

    bb61: {
        StorageDead(_154);
        _464 = const true;
        _150 = anchor_lang::system_program::CreateAccount::<'_> { from: move _151, to: move _153 };
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_65;
        _156 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _157) -> [return: bb62, unwind: bb249];
    }

    bb62: {
        StorageDead(_157);
        StorageLive(_158);
        _464 = const false;
        _158 = move _150;
        _155 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _156, move _158) -> [return: bb63, unwind: bb249];
    }

    bb63: {
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _463 = const true;
        _163 = move _155;
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = const _;
        _174 = &(*_175);
        _173 = <str as AsRef<[u8]>>::as_ref(move _174) -> [return: bb64, unwind: bb247];
    }

    bb64: {
        StorageDead(_174);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_35;
        _179 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _180) -> [return: bb65, unwind: bb247];
    }

    bb65: {
        _178 = &_179;
        StorageDead(_180);
        _177 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _178) -> [return: bb66, unwind: bb247];
    }

    bb66: {
        _176 = &(*_177);
        StorageDead(_178);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = _89;
        _185 = [move _186];
        _184 = &_185;
        StorageDead(_186);
        StorageLive(_187);
        _187 = RangeFull;
        _183 = <[u8; 1] as Index<RangeFull>>::index(move _184, move _187) -> [return: bb67, unwind: bb247];
    }

    bb67: {
        StorageDead(_187);
        StorageDead(_184);
        _182 = &(*_183);
        _181 = &(*_182);
        _172 = [move _173, move _176, move _181];
        _171 = &_172;
        StorageDead(_181);
        StorageDead(_176);
        StorageDead(_173);
        StorageLive(_188);
        _188 = RangeFull;
        _170 = <[&[u8]; 3] as Index<RangeFull>>::index(move _171, move _188) -> [return: bb68, unwind: bb247];
    }

    bb68: {
        StorageDead(_188);
        StorageDead(_171);
        _169 = &(*_170);
        _168 = &(*_169);
        _167 = [move _168];
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = move _165 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_165);
        _463 = const false;
        _162 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _163, move _164) -> [return: bb69, unwind: bb247];
    }

    bb69: {
        StorageDead(_164);
        _463 = const false;
        StorageDead(_163);
        StorageLive(_189);
        _189 = _147;
        StorageLive(_190);
        StorageLive(_191);
        _191 = _146;
        _190 = move _191 as u64 (IntToInt);
        StorageDead(_191);
        StorageLive(_192);
        _192 = &(*_1);
        _161 = anchor_lang::system_program::create_account(move _162, move _189, move _190, move _192) -> [return: bb70, unwind: bb249];
    }

    bb70: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_162);
        _160 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _161) -> [return: bb71, unwind: bb249];
    }

    bb71: {
        StorageDead(_161);
        _193 = discriminant(_160);
        switchInt(move _193) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        StorageLive(_197);
        _197 = ((_160 as Continue).0: ());
        _159 = _197;
        StorageDead(_197);
        _478 = discriminant(_160);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_160);
        StorageDead(_159);
        _143 = const ();
        StorageDead(_155);
        _464 = const false;
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb131;
    }

    bb73: {
        StorageLive(_194);
        _194 = move ((_160 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_196);
        _196 = move _194;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _196) -> [return: bb74, unwind: bb245];
    }

    bb74: {
        StorageDead(_196);
        StorageDead(_194);
        _506 = discriminant(_160);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_155);
        _464 = const false;
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb202;
    }

    bb75: {
        StorageDead(_145);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_35;
        _201 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _202) -> [return: bb76, unwind: bb223];
    }

    bb76: {
        _200 = &_201;
        StorageDead(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_26);
        _204 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _205) -> [return: bb77, unwind: bb223];
    }

    bb77: {
        _203 = &_204;
        StorageDead(_205);
        _199 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _200, move _203) -> [return: bb78, unwind: bb223];
    }

    bb78: {
        switchInt(move _199) -> [0: bb87, otherwise: bb79];
    }

    bb79: {
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _447 = const _;
        _211 = &(*_447);
        _210 = anchor_lang::error::ErrorCode::name(move _211) -> [return: bb80, unwind: bb223];
    }

    bb80: {
        StorageDead(_211);
        StorageLive(_213);
        StorageLive(_214);
        _214 = TryingToInitPayerAsProgramAccount;
        _213 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _214) -> [return: bb81, unwind: bb221];
    }

    bb81: {
        StorageDead(_214);
        StorageLive(_215);
        StorageLive(_216);
        _446 = const _;
        _216 = &(*_446);
        _215 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _216) -> [return: bb82, unwind: bb221];
    }

    bb82: {
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/user.rs", line: const 4018_u32 };
        _219 = anchor_lang::error::ErrorOrigin::Source(move _220);
        StorageDead(_220);
        _218 = Option::<ErrorOrigin>::Some(move _219);
        StorageDead(_219);
        StorageLive(_221);
        _221 = Option::<ComparedValues>::None;
        _209 = anchor_lang::error::AnchorError { error_name: move _210, error_code_number: move _213, error_msg: move _215, error_origin: move _218, compared_values: move _221 };
        StorageDead(_221);
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_210);
        _208 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _209) -> [return: bb83, unwind: bb223];
    }

    bb83: {
        _462 = const true;
        StorageDead(_209);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_35;
        _223 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _224) -> [return: bb84, unwind: bb244];
    }

    bb84: {
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(*_26);
        _225 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _226) -> [return: bb85, unwind: bb244];
    }

    bb85: {
        StorageDead(_226);
        _222 = (move _223, move _225);
        StorageDead(_225);
        StorageDead(_223);
        _462 = const false;
        _207 = anchor_lang::error::Error::with_pubkeys(move _208, move _222) -> [return: bb86, unwind: bb244];
    }

    bb86: {
        StorageDead(_222);
        _462 = const false;
        StorageDead(_208);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _207);
        StorageDead(_207);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb202;
    }

    bb87: {
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        _198 = const ();
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &_80;
        StorageLive(_231);
        _231 = _126;
        _229 = anchor_lang::prelude::Rent::minimum_balance(move _230, move _231) -> [return: bb88, unwind: bb223];
    }

    bb88: {
        StorageDead(_231);
        StorageDead(_230);
        _228 = <u64 as Ord>::max(move _229, const 1_u64) -> [return: bb89, unwind: bb223];
    }

    bb89: {
        StorageDead(_229);
        StorageLive(_232);
        _232 = _141;
        _227 = core::num::<impl u64>::saturating_sub(move _228, move _232) -> [return: bb90, unwind: bb223];
    }

    bb90: {
        StorageDead(_232);
        StorageDead(_228);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _227;
        _234 = Gt(move _235, const 0_u64);
        switchInt(move _234) -> [0: bb101, otherwise: bb91];
    }

    bb91: {
        StorageDead(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_35;
        _237 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _238) -> [return: bb92, unwind: bb223];
    }

    bb92: {
        StorageDead(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &(*_26);
        _239 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _240) -> [return: bb93, unwind: bb220];
    }

    bb93: {
        StorageDead(_240);
        _461 = const true;
        _236 = anchor_lang::system_program::Transfer::<'_> { from: move _237, to: move _239 };
        StorageDead(_239);
        StorageDead(_237);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_65;
        _242 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _243) -> [return: bb94, unwind: bb242];
    }

    bb94: {
        StorageDead(_243);
        StorageLive(_244);
        _461 = const false;
        _244 = move _236;
        _241 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _242, move _244) -> [return: bb95, unwind: bb242];
    }

    bb95: {
        StorageDead(_244);
        StorageDead(_242);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = move _241;
        StorageLive(_249);
        _249 = _227;
        _247 = anchor_lang::system_program::transfer(move _248, move _249) -> [return: bb96, unwind: bb242];
    }

    bb96: {
        StorageDead(_249);
        StorageDead(_248);
        _246 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _247) -> [return: bb97, unwind: bb242];
    }

    bb97: {
        StorageDead(_247);
        _250 = discriminant(_246);
        switchInt(move _250) -> [0: bb98, 1: bb99, otherwise: bb5];
    }

    bb98: {
        StorageLive(_254);
        _254 = ((_246 as Continue).0: ());
        _245 = _254;
        StorageDead(_254);
        _480 = discriminant(_246);
        StorageDead(_246);
        StorageDead(_245);
        _233 = const ();
        StorageDead(_241);
        _461 = const false;
        StorageDead(_236);
        goto -> bb102;
    }

    bb99: {
        StorageLive(_251);
        _251 = move ((_246 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_253);
        _253 = move _251;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _253) -> [return: bb100, unwind: bb240];
    }

    bb100: {
        StorageDead(_253);
        StorageDead(_251);
        _504 = discriminant(_246);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_241);
        _461 = const false;
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb201;
    }

    bb101: {
        StorageDead(_235);
        _233 = const ();
        goto -> bb102;
    }

    bb102: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &(*_26);
        _256 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _257) -> [return: bb103, unwind: bb223];
    }

    bb103: {
        StorageDead(_257);
        _460 = const true;
        _255 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _256 };
        StorageDead(_256);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &_65;
        _259 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _260) -> [return: bb104, unwind: bb239];
    }

    bb104: {
        StorageDead(_260);
        StorageLive(_261);
        _460 = const false;
        _261 = move _255;
        _258 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _259, move _261) -> [return: bb105, unwind: bb239];
    }

    bb105: {
        StorageDead(_261);
        StorageDead(_259);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _459 = const true;
        _266 = move _258;
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = const _;
        _277 = &(*_278);
        _276 = <str as AsRef<[u8]>>::as_ref(move _277) -> [return: bb106, unwind: bb237];
    }

    bb106: {
        StorageDead(_277);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_35;
        _282 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _283) -> [return: bb107, unwind: bb237];
    }

    bb107: {
        _281 = &_282;
        StorageDead(_283);
        _280 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _281) -> [return: bb108, unwind: bb237];
    }

    bb108: {
        _279 = &(*_280);
        StorageDead(_281);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _89;
        _288 = [move _289];
        _287 = &_288;
        StorageDead(_289);
        StorageLive(_290);
        _290 = RangeFull;
        _286 = <[u8; 1] as Index<RangeFull>>::index(move _287, move _290) -> [return: bb109, unwind: bb237];
    }

    bb109: {
        StorageDead(_290);
        StorageDead(_287);
        _285 = &(*_286);
        _284 = &(*_285);
        _275 = [move _276, move _279, move _284];
        _274 = &_275;
        StorageDead(_284);
        StorageDead(_279);
        StorageDead(_276);
        StorageLive(_291);
        _291 = RangeFull;
        _273 = <[&[u8]; 3] as Index<RangeFull>>::index(move _274, move _291) -> [return: bb110, unwind: bb237];
    }

    bb110: {
        StorageDead(_291);
        StorageDead(_274);
        _272 = &(*_273);
        _271 = &(*_272);
        _270 = [move _271];
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = move _268 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_268);
        _459 = const false;
        _265 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _266, move _267) -> [return: bb111, unwind: bb237];
    }

    bb111: {
        StorageDead(_267);
        _459 = const false;
        StorageDead(_266);
        StorageLive(_292);
        StorageLive(_293);
        _293 = _126;
        _292 = move _293 as u64 (IntToInt);
        StorageDead(_293);
        _264 = anchor_lang::system_program::allocate(move _265, move _292) -> [return: bb112, unwind: bb239];
    }

    bb112: {
        StorageDead(_292);
        StorageDead(_265);
        _263 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _264) -> [return: bb113, unwind: bb239];
    }

    bb113: {
        StorageDead(_264);
        _294 = discriminant(_263);
        switchInt(move _294) -> [0: bb114, 1: bb115, otherwise: bb5];
    }

    bb114: {
        StorageLive(_298);
        _298 = ((_263 as Continue).0: ());
        _262 = _298;
        StorageDead(_298);
        _482 = discriminant(_263);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_263);
        StorageDead(_262);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &(*_26);
        _300 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _301) -> [return: bb117, unwind: bb239];
    }

    bb115: {
        StorageLive(_295);
        _295 = move ((_263 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_297);
        _297 = move _295;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _297) -> [return: bb116, unwind: bb235];
    }

    bb116: {
        StorageDead(_297);
        StorageDead(_295);
        _502 = discriminant(_263);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_263);
        StorageDead(_262);
        goto -> bb200;
    }

    bb117: {
        StorageDead(_301);
        _458 = const true;
        _299 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _300 };
        StorageDead(_300);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_65;
        _303 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _304) -> [return: bb118, unwind: bb234];
    }

    bb118: {
        StorageDead(_304);
        StorageLive(_305);
        _458 = const false;
        _305 = move _299;
        _302 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _303, move _305) -> [return: bb119, unwind: bb234];
    }

    bb119: {
        StorageDead(_305);
        StorageDead(_303);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _457 = const true;
        _310 = move _302;
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = const _;
        _321 = &(*_322);
        _320 = <str as AsRef<[u8]>>::as_ref(move _321) -> [return: bb120, unwind: bb232];
    }

    bb120: {
        StorageDead(_321);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &_35;
        _326 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _327) -> [return: bb121, unwind: bb232];
    }

    bb121: {
        _325 = &_326;
        StorageDead(_327);
        _324 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _325) -> [return: bb122, unwind: bb232];
    }

    bb122: {
        _323 = &(*_324);
        StorageDead(_325);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = _89;
        _332 = [move _333];
        _331 = &_332;
        StorageDead(_333);
        StorageLive(_334);
        _334 = RangeFull;
        _330 = <[u8; 1] as Index<RangeFull>>::index(move _331, move _334) -> [return: bb123, unwind: bb232];
    }

    bb123: {
        StorageDead(_334);
        StorageDead(_331);
        _329 = &(*_330);
        _328 = &(*_329);
        _319 = [move _320, move _323, move _328];
        _318 = &_319;
        StorageDead(_328);
        StorageDead(_323);
        StorageDead(_320);
        StorageLive(_335);
        _335 = RangeFull;
        _317 = <[&[u8]; 3] as Index<RangeFull>>::index(move _318, move _335) -> [return: bb124, unwind: bb232];
    }

    bb124: {
        StorageDead(_335);
        StorageDead(_318);
        _316 = &(*_317);
        _315 = &(*_316);
        _314 = [move _315];
        StorageDead(_315);
        _313 = &_314;
        _312 = &(*_313);
        _311 = move _312 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_312);
        _457 = const false;
        _309 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _310, move _311) -> [return: bb125, unwind: bb232];
    }

    bb125: {
        StorageDead(_311);
        _457 = const false;
        StorageDead(_310);
        StorageLive(_336);
        _336 = &(*_1);
        _308 = anchor_lang::system_program::assign(move _309, move _336) -> [return: bb126, unwind: bb234];
    }

    bb126: {
        StorageDead(_336);
        StorageDead(_309);
        _307 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _308) -> [return: bb127, unwind: bb234];
    }

    bb127: {
        StorageDead(_308);
        _337 = discriminant(_307);
        switchInt(move _337) -> [0: bb128, 1: bb129, otherwise: bb5];
    }

    bb128: {
        StorageLive(_341);
        _341 = ((_307 as Continue).0: ());
        _306 = _341;
        StorageDead(_341);
        _484 = discriminant(_307);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_307);
        StorageDead(_306);
        _143 = const ();
        StorageDead(_302);
        _458 = const false;
        StorageDead(_299);
        StorageDead(_258);
        _460 = const false;
        StorageDead(_255);
        StorageDead(_227);
        goto -> bb131;
    }

    bb129: {
        StorageLive(_338);
        _338 = move ((_307 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_340);
        _340 = move _338;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _340) -> [return: bb130, unwind: bb230];
    }

    bb130: {
        StorageDead(_340);
        StorageDead(_338);
        _500 = discriminant(_307);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_302);
        _458 = const false;
        StorageDead(_299);
        goto -> bb200;
    }

    bb131: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = &_26;
        _453 = deref_copy (*_344);
        _343 = &(*_453);
        _342 = anchor_lang::prelude::Account::<'_, SignedMsgWsDelegates>::try_from_unchecked(move _343) -> [return: bb132, unwind: bb223];
    }

    bb132: {
        StorageDead(_343);
        _345 = discriminant(_342);
        switchInt(move _345) -> [0: bb134, 1: bb133, otherwise: bb5];
    }

    bb133: {
        StorageLive(_347);
        _347 = move ((_342 as Err).0: anchor_lang::error::Error);
        StorageLive(_349);
        StorageLive(_350);
        _350 = move _347;
        _349 = anchor_lang::error::Error::with_account_name::<&str>(move _350, const "signed_msg_ws_delegates") -> [return: bb135, unwind: bb229];
    }

    bb134: {
        StorageLive(_346);
        _346 = move ((_342 as Ok).0: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>);
        _134 = move _346;
        StorageDead(_346);
        StorageDead(_141);
        _486 = discriminant(_342);
        StorageDead(_344);
        StorageDead(_342);
        goto -> bb141;
    }

    bb135: {
        StorageDead(_350);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _349);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_141);
        _498 = discriminant(_342);
        StorageDead(_344);
        StorageDead(_342);
        goto -> bb203;
    }

    bb136: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_26;
        _454 = deref_copy (*_353);
        _352 = &(*_454);
        _351 = anchor_lang::prelude::Account::<'_, SignedMsgWsDelegates>::try_from(move _352) -> [return: bb137, unwind: bb223];
    }

    bb137: {
        StorageDead(_352);
        _354 = discriminant(_351);
        switchInt(move _354) -> [0: bb139, 1: bb138, otherwise: bb5];
    }

    bb138: {
        StorageLive(_356);
        _356 = move ((_351 as Err).0: anchor_lang::error::Error);
        StorageLive(_358);
        StorageLive(_359);
        _359 = move _356;
        _358 = anchor_lang::error::Error::with_account_name::<&str>(move _359, const "signed_msg_ws_delegates") -> [return: bb140, unwind: bb228];
    }

    bb139: {
        StorageLive(_355);
        _355 = move ((_351 as Ok).0: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>);
        _134 = move _355;
        StorageDead(_355);
        _488 = discriminant(_351);
        StorageDead(_353);
        StorageDead(_351);
        goto -> bb141;
    }

    bb140: {
        StorageDead(_359);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _358);
        StorageDead(_358);
        StorageDead(_356);
        _496 = discriminant(_351);
        StorageDead(_353);
        StorageDead(_351);
        goto -> bb203;
    }

    bb141: {
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_360);
        StorageLive(_361);
        _361 = const false;
        switchInt(move _361) -> [0: bb165, otherwise: bb142];
    }

    bb142: {
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = _126;
        StorageLive(_365);
        StorageLive(_366);
        _366 = &(*_122);
        _365 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _366) -> [return: bb143, unwind: bb219];
    }

    bb143: {
        StorageDead(_366);
        _363 = Ne(move _364, move _365);
        switchInt(move _363) -> [0: bb149, otherwise: bb144];
    }

    bb144: {
        StorageDead(_365);
        StorageDead(_364);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = ConstraintSpace;
        _370 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _371) -> [return: bb145, unwind: bb219];
    }

    bb145: {
        StorageDead(_371);
        _369 = anchor_lang::error::Error::with_account_name::<&str>(move _370, const "signed_msg_ws_delegates") -> [return: bb146, unwind: bb219];
    }

    bb146: {
        _456 = const true;
        StorageDead(_370);
        StorageLive(_372);
        StorageLive(_373);
        _373 = _126;
        StorageLive(_374);
        StorageLive(_375);
        _375 = &(*_122);
        _374 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _375) -> [return: bb147, unwind: bb227];
    }

    bb147: {
        StorageDead(_375);
        _372 = (move _373, move _374);
        StorageDead(_374);
        StorageDead(_373);
        _456 = const false;
        _368 = anchor_lang::error::Error::with_values::<usize, usize>(move _369, move _372) -> [return: bb148, unwind: bb227];
    }

    bb148: {
        StorageDead(_372);
        _456 = const false;
        StorageDead(_369);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _368);
        StorageDead(_368);
        StorageDead(_363);
        StorageDead(_362);
        goto -> bb199;
    }

    bb149: {
        StorageDead(_365);
        StorageDead(_364);
        _362 = const ();
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_125;
        StorageLive(_379);
        _379 = &_1;
        _377 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _378, move _379) -> [return: bb150, unwind: bb219];
    }

    bb150: {
        switchInt(move _377) -> [0: bb155, otherwise: bb151];
    }

    bb151: {
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = ConstraintOwner;
        _383 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _384) -> [return: bb152, unwind: bb219];
    }

    bb152: {
        StorageDead(_384);
        _382 = anchor_lang::error::Error::with_account_name::<&str>(move _383, const "signed_msg_ws_delegates") -> [return: bb153, unwind: bb219];
    }

    bb153: {
        StorageDead(_383);
        StorageLive(_385);
        StorageLive(_386);
        _386 = (*_125);
        StorageLive(_387);
        _387 = (*_1);
        _385 = (move _386, move _387);
        StorageDead(_387);
        StorageDead(_386);
        _381 = anchor_lang::error::Error::with_pubkeys(move _382, move _385) -> [return: bb154, unwind: bb219];
    }

    bb154: {
        StorageDead(_385);
        StorageDead(_382);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _381);
        StorageDead(_381);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb199;
    }

    bb155: {
        StorageDead(_379);
        StorageDead(_378);
        _376 = const ();
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &_80;
        StorageLive(_390);
        _390 = _126;
        _388 = anchor_lang::prelude::Rent::minimum_balance(move _389, move _390) -> [return: bb156, unwind: bb219];
    }

    bb156: {
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &_134;
        _394 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _395) -> [return: bb157, unwind: bb219];
    }

    bb157: {
        _393 = &_394;
        StorageDead(_395);
        _392 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _393) -> [return: bb158, unwind: bb218];
    }

    bb158: {
        StorageDead(_393);
        StorageLive(_396);
        _396 = _388;
        _391 = Lt(move _392, move _396);
        switchInt(move _391) -> [0: bb163, otherwise: bb159];
    }

    bb159: {
        StorageDead(_396);
        drop(_394) -> [return: bb160, unwind: bb219];
    }

    bb160: {
        StorageDead(_394);
        StorageDead(_392);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = ConstraintRentExempt;
        _399 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _400) -> [return: bb161, unwind: bb219];
    }

    bb161: {
        StorageDead(_400);
        _398 = anchor_lang::error::Error::with_account_name::<&str>(move _399, const "signed_msg_ws_delegates") -> [return: bb162, unwind: bb219];
    }

    bb162: {
        StorageDead(_399);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _398);
        StorageDead(_398);
        StorageDead(_391);
        StorageDead(_388);
        goto -> bb199;
    }

    bb163: {
        StorageDead(_396);
        drop(_394) -> [return: bb164, unwind: bb219];
    }

    bb164: {
        StorageDead(_394);
        StorageDead(_392);
        _360 = const ();
        StorageDead(_391);
        StorageDead(_388);
        goto -> bb166;
    }

    bb165: {
        _360 = const ();
        goto -> bb166;
    }

    bb166: {
        StorageDead(_361);
        StorageDead(_360);
        _121 = move _134;
        StorageDead(_134);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_122);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_121;
        _404 = &(*_405);
        _403 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _404) -> [return: bb167, unwind: bb217];
    }

    bb167: {
        StorageDead(_404);
        _402 = ((*_403).6: bool);
        switchInt(move _402) -> [0: bb168, otherwise: bb171];
    }

    bb168: {
        StorageDead(_405);
        StorageDead(_403);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = ConstraintMut;
        _408 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _409) -> [return: bb169, unwind: bb217];
    }

    bb169: {
        StorageDead(_409);
        _407 = anchor_lang::error::Error::with_account_name::<&str>(move _408, const "signed_msg_ws_delegates") -> [return: bb170, unwind: bb217];
    }

    bb170: {
        StorageDead(_408);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _407);
        StorageDead(_407);
        StorageDead(_402);
        StorageDead(_401);
        goto -> bb198;
    }

    bb171: {
        StorageDead(_405);
        StorageDead(_403);
        _401 = const ();
        StorageDead(_402);
        StorageDead(_401);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = &_80;
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &_121;
        _415 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _416) -> [return: bb172, unwind: bb217];
    }

    bb172: {
        _414 = &_415;
        StorageDead(_416);
        _413 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _414) -> [return: bb173, unwind: bb216];
    }

    bb173: {
        StorageDead(_414);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_121;
        _421 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _422) -> [return: bb174, unwind: bb216];
    }

    bb174: {
        _420 = &_421;
        StorageDead(_422);
        _419 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _420) -> [return: bb175, unwind: bb215];
    }

    bb175: {
        StorageDead(_420);
        _418 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _419) -> [return: bb176, unwind: bb215];
    }

    bb176: {
        _455 = const true;
        StorageDead(_419);
        _423 = discriminant(_418);
        switchInt(move _423) -> [0: bb177, 1: bb178, otherwise: bb5];
    }

    bb177: {
        StorageLive(_427);
        _427 = ((_418 as Continue).0: usize);
        _417 = _427;
        StorageDead(_427);
        _411 = anchor_lang::prelude::Rent::is_exempt(move _412, move _413, move _417) -> [return: bb180, unwind: bb225];
    }

    bb178: {
        StorageLive(_424);
        _424 = move ((_418 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_426);
        _426 = move _424;
        _0 = <std::result::Result<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _426) -> [return: bb179, unwind: bb225];
    }

    bb179: {
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        _494 = discriminant(_418);
        drop(_421) -> [return: bb195, unwind: bb216];
    }

    bb180: {
        switchInt(move _411) -> [0: bb182, otherwise: bb181];
    }

    bb181: {
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        _490 = discriminant(_418);
        drop(_421) -> [return: bb187, unwind: bb216];
    }

    bb182: {
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        _492 = discriminant(_418);
        drop(_421) -> [return: bb183, unwind: bb216];
    }

    bb183: {
        StorageDead(_421);
        _455 = const false;
        StorageDead(_418);
        drop(_415) -> [return: bb184, unwind: bb217];
    }

    bb184: {
        StorageDead(_415);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = ConstraintRentExempt;
        _430 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _431) -> [return: bb185, unwind: bb217];
    }

    bb185: {
        StorageDead(_431);
        _429 = anchor_lang::error::Error::with_account_name::<&str>(move _430, const "signed_msg_ws_delegates") -> [return: bb186, unwind: bb217];
    }

    bb186: {
        StorageDead(_430);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _429);
        StorageDead(_429);
        goto -> bb197;
    }

    bb187: {
        StorageDead(_421);
        _455 = const false;
        StorageDead(_418);
        drop(_415) -> [return: bb188, unwind: bb217];
    }

    bb188: {
        StorageDead(_415);
        _410 = const ();
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_35;
        _435 = &(*_436);
        _434 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _435) -> [return: bb189, unwind: bb217];
    }

    bb189: {
        StorageDead(_435);
        _433 = ((*_434).6: bool);
        switchInt(move _433) -> [0: bb190, otherwise: bb193];
    }

    bb190: {
        StorageDead(_436);
        StorageDead(_434);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = ConstraintMut;
        _439 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _440) -> [return: bb191, unwind: bb217];
    }

    bb191: {
        StorageDead(_440);
        _438 = anchor_lang::error::Error::with_account_name::<&str>(move _439, const "authority") -> [return: bb192, unwind: bb217];
    }

    bb192: {
        StorageDead(_439);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Err(move _438);
        StorageDead(_438);
        StorageDead(_433);
        StorageDead(_432);
        goto -> bb198;
    }

    bb193: {
        StorageDead(_436);
        StorageDead(_434);
        _432 = const ();
        StorageDead(_433);
        StorageDead(_432);
        StorageLive(_441);
        StorageLive(_442);
        _442 = move _121;
        StorageLive(_443);
        _443 = move _35;
        StorageLive(_444);
        _444 = move _50;
        StorageLive(_445);
        _445 = move _65;
        _441 = instructions::user::InitializeSignedMsgWsDelegates::<'_> { signed_msg_ws_delegates: move _442, authority: move _443, rent: move _444, system_program: move _445 };
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_442);
        _0 = std::result::Result::<instructions::user::InitializeSignedMsgWsDelegates<'_>, anchor_lang::error::Error>::Ok(move _441);
        StorageDead(_441);
        StorageDead(_121);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        drop(_7) -> [return: bb194, unwind: bb224];
    }

    bb194: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb214;
    }

    bb195: {
        StorageDead(_421);
        _455 = const false;
        StorageDead(_418);
        drop(_415) -> [return: bb196, unwind: bb217];
    }

    bb196: {
        StorageDead(_415);
        goto -> bb197;
    }

    bb197: {
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb198;
    }

    bb198: {
        drop(_121) -> [return: bb205, unwind: bb223];
    }

    bb199: {
        StorageDead(_361);
        StorageDead(_360);
        drop(_134) -> [return: bb204, unwind: bb223];
    }

    bb200: {
        StorageDead(_258);
        _460 = const false;
        StorageDead(_255);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_227);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_141);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_134);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_122);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_121);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_80);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_65);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_50);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb211;
    }

    bb211: {
        drop(_7) -> [return: bb212, unwind: bb224];
    }

    bb212: {
        StorageDead(_7);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_6);
        goto -> bb214;
    }

    bb214: {
        return;
    }

    bb215 (cleanup): {
        drop(_421) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        drop(_415) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_121) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_394) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_134) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_237) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_210) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_151) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_7) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        resume;
    }

    bb225 (cleanup): {
        _516 = discriminant(_418);
        goto -> bb215;
    }

    bb226 (cleanup): {
        drop(_369) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        switchInt(_456) -> [0: bb219, otherwise: bb226];
    }

    bb228 (cleanup): {
        _517 = discriminant(_351);
        goto -> bb223;
    }

    bb229 (cleanup): {
        _518 = discriminant(_342);
        goto -> bb223;
    }

    bb230 (cleanup): {
        _519 = discriminant(_307);
        goto -> bb234;
    }

    bb231 (cleanup): {
        drop(_310) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        switchInt(_457) -> [0: bb234, otherwise: bb231];
    }

    bb233 (cleanup): {
        drop(_299) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        switchInt(_458) -> [0: bb239, otherwise: bb233];
    }

    bb235 (cleanup): {
        _520 = discriminant(_263);
        goto -> bb239;
    }

    bb236 (cleanup): {
        drop(_266) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        switchInt(_459) -> [0: bb239, otherwise: bb236];
    }

    bb238 (cleanup): {
        drop(_255) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        switchInt(_460) -> [0: bb223, otherwise: bb238];
    }

    bb240 (cleanup): {
        _521 = discriminant(_246);
        goto -> bb242;
    }

    bb241 (cleanup): {
        drop(_236) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        switchInt(_461) -> [0: bb223, otherwise: bb241];
    }

    bb243 (cleanup): {
        drop(_208) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        switchInt(_462) -> [0: bb223, otherwise: bb243];
    }

    bb245 (cleanup): {
        _522 = discriminant(_160);
        goto -> bb249;
    }

    bb246 (cleanup): {
        drop(_163) -> [return: bb249, unwind terminate(cleanup)];
    }

    bb247 (cleanup): {
        switchInt(_463) -> [0: bb249, otherwise: bb246];
    }

    bb248 (cleanup): {
        drop(_150) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        switchInt(_464) -> [0: bb223, otherwise: bb248];
    }

    bb250 (cleanup): {
        drop(_114) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        switchInt(_465) -> [0: bb223, otherwise: bb250];
    }

    bb252 (cleanup): {
        _523 = discriminant(_81);
        goto -> bb223;
    }

    bb253 (cleanup): {
        _524 = discriminant(_66);
        goto -> bb223;
    }

    bb254 (cleanup): {
        _525 = discriminant(_51);
        goto -> bb223;
    }

    bb255 (cleanup): {
        _526 = discriminant(_36);
        goto -> bb223;
    }

    bb256 (cleanup): {
        _528 = discriminant(_9);
        goto -> bb224;
    }
}
