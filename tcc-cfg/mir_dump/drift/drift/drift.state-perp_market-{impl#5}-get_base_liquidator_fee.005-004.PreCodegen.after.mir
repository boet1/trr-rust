// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_base_liquidator_fee` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_base_liquidator_fee(_1: &PerpMarket, _2: bool) -> u32 {
    debug self => _1;
    debug user_high_leverage_mode => _2;
    let mut _0: u32;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &state::perp_market::PerpMarket;
    let _6: u32;
    let mut _7: u32;
    let mut _8: u16;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: u32;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: bool;
    scope 1 {
        debug margin_ratio => _6;
    }

    bb0: {
        StorageLive(_3);
        _3 = _2;
        switchInt(move _3) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = PerpMarket::is_high_leverage_mode_enabled(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _4) -> [0: bb8, otherwise: bb3];
    }

    bb3: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).33: u16);
        _7 = move _8 as u32 (IntToInt);
        StorageDead(_8);
        _6 = core::num::<impl u32>::saturating_mul(move _7, const _) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = ((*_1).13: u32);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        StorageLive(_12);
        StorageLive(_13);
        _13 = _6;
        _14 = Eq(const 5_u32, const 0_u32);
        assert(!move _14, "attempt to divide `{}` by zero", _13) -> [success: bb5, unwind continue];
    }

    bb5: {
        _12 = Div(move _13, const 5_u32);
        StorageDead(_13);
        _10 = core::num::<impl u32>::saturating_sub(move _11, move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_11);
        _0 = <u32 as Ord>::min(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb10;
    }

    bb8: {
        StorageDead(_5);
        goto -> bb9;
    }

    bb9: {
        _0 = ((*_1).13: u32);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
