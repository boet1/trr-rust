// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:4918:10: 4918:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:4918:10: 4918:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut admin::InitializeBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::Initialize<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::InitializeBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let _21: ();
    let mut _22: bool;
    let mut _23: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _24: !;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::ErrorCode;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _38: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::admin::InitializeBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::InitializeBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::InitializeBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::admin::InitializeBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _98: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut instructions::admin::InitializeBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _113: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _121: (anchor_lang::prelude::Pubkey, u8);
    let mut _122: &[&[u8]];
    let mut _123: &[&[u8]; 1];
    let _124: &[&[u8]; 1];
    let _125: [&[u8]; 1];
    let mut _126: &[u8];
    let _127: &[u8];
    let mut _128: &[u8; 11];
    let _129: &[u8; 11];
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: u8;
    let _132: ();
    let mut _133: bool;
    let mut _134: &anchor_lang::prelude::Pubkey;
    let _135: anchor_lang::prelude::Pubkey;
    let mut _136: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _137: &anchor_lang::prelude::Pubkey;
    let mut _138: !;
    let mut _139: anchor_lang::error::Error;
    let mut _140: anchor_lang::error::Error;
    let mut _141: anchor_lang::error::Error;
    let mut _142: anchor_lang::error::ErrorCode;
    let mut _143: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _144: anchor_lang::prelude::Pubkey;
    let mut _145: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _146: anchor_lang::prelude::Pubkey;
    let mut _149: &anchor_lang::prelude::AccountInfo<'_>;
    let _150: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _151: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: &&anchor_lang::prelude::Pubkey;
    let mut _158: &&anchor_lang::prelude::Pubkey;
    let _159: &anchor_lang::prelude::Pubkey;
    let _160: anchor_lang::prelude::Pubkey;
    let mut _162: &anchor_lang::prelude::AccountInfo<'_>;
    let _163: ();
    let mut _164: bool;
    let mut _165: u64;
    let mut _168: &anchor_lang::prelude::Rent;
    let mut _169: usize;
    let mut _171: anchor_lang::prelude::AccountInfo<'_>;
    let mut _172: &anchor_lang::prelude::Signer<'_>;
    let mut _173: anchor_lang::prelude::AccountInfo<'_>;
    let mut _174: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: anchor_lang::prelude::AccountInfo<'_>;
    let mut _177: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _178: anchor_lang::system_program::CreateAccount<'_>;
    let _179: ();
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _181: std::result::Result<(), anchor_lang::error::Error>;
    let mut _182: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _183: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _184: &[&[&[u8]]];
    let mut _185: &[&[&[u8]]; 1];
    let _186: &[&[&[u8]]; 1];
    let _187: [&[&[u8]]; 1];
    let mut _188: &[&[u8]];
    let _189: &[&[u8]];
    let _190: &[&[u8]];
    let mut _191: &[&[u8]; 2];
    let _192: [&[u8]; 2];
    let mut _193: &[u8];
    let mut _194: &[u8; 11];
    let _195: &[u8; 11];
    let mut _196: &[u8];
    let _197: &[u8];
    let _198: &[u8];
    let mut _199: &[u8; 1];
    let _200: [u8; 1];
    let mut _201: u8;
    let mut _202: std::ops::RangeFull;
    let mut _203: std::ops::RangeFull;
    let mut _204: u64;
    let mut _205: u64;
    let mut _206: usize;
    let mut _207: &anchor_lang::prelude::Pubkey;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _213: ();
    let mut _214: bool;
    let mut _215: &anchor_lang::prelude::Pubkey;
    let _216: anchor_lang::prelude::Pubkey;
    let mut _217: &anchor_lang::prelude::Signer<'_>;
    let mut _218: &anchor_lang::prelude::Pubkey;
    let _219: anchor_lang::prelude::Pubkey;
    let mut _220: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _221: !;
    let mut _222: anchor_lang::error::Error;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::AnchorError;
    let mut _225: std::string::String;
    let mut _226: &anchor_lang::error::ErrorCode;
    let _227: anchor_lang::error::ErrorCode;
    let mut _228: u32;
    let mut _229: anchor_lang::error::ErrorCode;
    let mut _230: std::string::String;
    let mut _231: &anchor_lang::error::ErrorCode;
    let _232: anchor_lang::error::ErrorCode;
    let mut _233: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _234: anchor_lang::error::ErrorOrigin;
    let mut _235: anchor_lang::error::Source;
    let mut _236: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _237: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _238: anchor_lang::prelude::Pubkey;
    let mut _239: &anchor_lang::prelude::Signer<'_>;
    let mut _240: anchor_lang::prelude::Pubkey;
    let mut _241: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: u64;
    let mut _244: u64;
    let mut _245: &anchor_lang::prelude::Rent;
    let mut _246: usize;
    let mut _247: u64;
    let _248: ();
    let mut _249: bool;
    let mut _250: u64;
    let mut _252: anchor_lang::prelude::AccountInfo<'_>;
    let mut _253: &anchor_lang::prelude::Signer<'_>;
    let mut _254: anchor_lang::prelude::AccountInfo<'_>;
    let mut _255: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _257: anchor_lang::prelude::AccountInfo<'_>;
    let mut _258: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _259: anchor_lang::system_program::Transfer<'_>;
    let _260: ();
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _262: std::result::Result<(), anchor_lang::error::Error>;
    let mut _263: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _264: u64;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _271: anchor_lang::prelude::AccountInfo<'_>;
    let mut _272: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _274: anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _276: anchor_lang::system_program::Allocate<'_>;
    let _277: ();
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _279: std::result::Result<(), anchor_lang::error::Error>;
    let mut _280: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _281: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _282: &[&[&[u8]]];
    let mut _283: &[&[&[u8]]; 1];
    let _284: &[&[&[u8]]; 1];
    let _285: [&[&[u8]]; 1];
    let mut _286: &[&[u8]];
    let _287: &[&[u8]];
    let _288: &[&[u8]];
    let mut _289: &[&[u8]; 2];
    let _290: [&[u8]; 2];
    let mut _291: &[u8];
    let mut _292: &[u8; 11];
    let _293: &[u8; 11];
    let mut _294: &[u8];
    let _295: &[u8];
    let _296: &[u8];
    let mut _297: &[u8; 1];
    let _298: [u8; 1];
    let mut _299: u8;
    let mut _300: std::ops::RangeFull;
    let mut _301: std::ops::RangeFull;
    let mut _302: u64;
    let mut _303: usize;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _310: anchor_lang::prelude::AccountInfo<'_>;
    let mut _311: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _313: anchor_lang::prelude::AccountInfo<'_>;
    let mut _314: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _315: anchor_lang::system_program::Assign<'_>;
    let _316: ();
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _318: std::result::Result<(), anchor_lang::error::Error>;
    let mut _319: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _320: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _321: &[&[&[u8]]];
    let mut _322: &[&[&[u8]]; 1];
    let _323: &[&[&[u8]]; 1];
    let _324: [&[&[u8]]; 1];
    let mut _325: &[&[u8]];
    let _326: &[&[u8]];
    let _327: &[&[u8]];
    let mut _328: &[&[u8]; 2];
    let _329: [&[u8]; 2];
    let mut _330: &[u8];
    let mut _331: &[u8; 11];
    let _332: &[u8; 11];
    let mut _333: &[u8];
    let _334: &[u8];
    let _335: &[u8];
    let mut _336: &[u8; 1];
    let _337: [u8; 1];
    let mut _338: u8;
    let mut _339: std::ops::RangeFull;
    let mut _340: std::ops::RangeFull;
    let mut _341: &anchor_lang::prelude::Pubkey;
    let mut _342: isize;
    let mut _344: !;
    let mut _345: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _347: anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _348: std::result::Result<anchor_lang::prelude::Account<'_, state::state::State>, anchor_lang::error::Error>;
    let mut _349: &anchor_lang::prelude::AccountInfo<'_>;
    let _350: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _351: isize;
    let mut _354: !;
    let mut _355: anchor_lang::error::Error;
    let mut _356: anchor_lang::error::Error;
    let mut _357: anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _358: std::result::Result<anchor_lang::prelude::Account<'_, state::state::State>, anchor_lang::error::Error>;
    let mut _359: &anchor_lang::prelude::AccountInfo<'_>;
    let _360: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _361: isize;
    let mut _364: !;
    let mut _365: anchor_lang::error::Error;
    let mut _366: anchor_lang::error::Error;
    let _367: ();
    let mut _368: bool;
    let _369: ();
    let mut _370: bool;
    let mut _371: usize;
    let mut _372: usize;
    let mut _373: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _374: !;
    let mut _375: anchor_lang::error::Error;
    let mut _376: anchor_lang::error::Error;
    let mut _377: anchor_lang::error::Error;
    let mut _378: anchor_lang::error::ErrorCode;
    let mut _379: (usize, usize);
    let mut _380: usize;
    let mut _381: usize;
    let mut _382: &anchor_lang::prelude::AccountInfo<'_>;
    let _383: ();
    let mut _384: bool;
    let mut _385: &&anchor_lang::prelude::Pubkey;
    let mut _386: &&anchor_lang::prelude::Pubkey;
    let mut _387: !;
    let mut _388: anchor_lang::error::Error;
    let mut _389: anchor_lang::error::Error;
    let mut _390: anchor_lang::error::Error;
    let mut _391: anchor_lang::error::ErrorCode;
    let mut _392: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _393: anchor_lang::prelude::Pubkey;
    let mut _394: anchor_lang::prelude::Pubkey;
    let mut _396: &anchor_lang::prelude::Rent;
    let mut _397: usize;
    let mut _398: bool;
    let mut _399: u64;
    let mut _400: &anchor_lang::prelude::AccountInfo<'_>;
    let _401: anchor_lang::prelude::AccountInfo<'_>;
    let mut _402: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _403: u64;
    let mut _404: !;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::Error;
    let mut _407: anchor_lang::error::ErrorCode;
    let _408: ();
    let mut _409: bool;
    let mut _410: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _411: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _412: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _413: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _414: !;
    let mut _415: anchor_lang::error::Error;
    let mut _416: anchor_lang::error::Error;
    let mut _417: anchor_lang::error::ErrorCode;
    let _418: ();
    let mut _419: bool;
    let mut _420: &anchor_lang::prelude::Rent;
    let mut _421: u64;
    let mut _422: &anchor_lang::prelude::AccountInfo<'_>;
    let _423: anchor_lang::prelude::AccountInfo<'_>;
    let mut _424: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _425: usize;
    let mut _426: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _427: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _428: &anchor_lang::prelude::AccountInfo<'_>;
    let _429: anchor_lang::prelude::AccountInfo<'_>;
    let mut _430: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _431: isize;
    let mut _433: !;
    let mut _434: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _436: !;
    let mut _437: anchor_lang::error::Error;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::ErrorCode;
    let _440: ();
    let mut _441: bool;
    let mut _442: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _443: &anchor_lang::prelude::Signer<'_>;
    let _444: &anchor_lang::prelude::Signer<'_>;
    let mut _445: !;
    let mut _446: anchor_lang::error::Error;
    let mut _447: anchor_lang::error::Error;
    let mut _448: anchor_lang::error::ErrorCode;
    let mut _449: instructions::admin::Initialize<'_>;
    let mut _450: anchor_lang::prelude::Signer<'_>;
    let mut _451: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _452: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _453: anchor_lang::prelude::AccountInfo<'_>;
    let mut _454: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _455: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _456: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _460: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _461: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _462: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _463: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _464: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _465: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _466: bool;
    let mut _467: bool;
    let mut _468: bool;
    let mut _469: bool;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: bool;
    let mut _473: bool;
    let mut _474: bool;
    let mut _475: bool;
    let mut _476: bool;
    let mut _477: bool;
    let mut _478: bool;
    let mut _479: bool;
    let mut _480: bool;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _554: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _555: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug admin => _6;
        let _27: &anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug state => _27;
            let _36: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
            scope 7 {
                debug quote_asset_mint => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug drift_signer => _51;
                    let _66: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 17 {
                        debug rent => _66;
                        let _81: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        scope 22 {
                            debug system_program => _81;
                            let _96: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                            scope 27 {
                                debug token_program => _96;
                                let _111: anchor_lang::prelude::Rent;
                                let _115: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _118: anchor_lang::prelude::Rent;
                                scope 32 {
                                    debug __anchor_rent => _111;
                                    let _119: anchor_lang::prelude::Pubkey;
                                    let _120: u8;
                                    scope 37 {
                                        debug __pda_address => _119;
                                        debug __bump => _120;
                                        let _147: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                                        let _148: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 38 {
                                            debug state => _147;
                                            let _432: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _435: usize;
                                            scope 76 {
                                                debug residual => _432;
                                                scope 77 {
                                                }
                                            }
                                            scope 78 {
                                                debug val => _435;
                                                scope 79 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug actual_field => _148;
                                            let _152: &anchor_lang::prelude::Pubkey;
                                            scope 40 {
                                                debug actual_owner => _152;
                                                let _153: usize;
                                                scope 41 {
                                                    debug space => _153;
                                                    let _154: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                                                    let _161: u64;
                                                    let _362: anchor_lang::prelude::Account<'_, state::state::State>;
                                                    let _363: anchor_lang::error::Error;
                                                    let mut _459: &&anchor_lang::prelude::Pubkey;
                                                    scope 42 {
                                                        debug pa => _154;
                                                        let _395: u64;
                                                        scope 75 {
                                                            debug required_lamports => _395;
                                                        }
                                                    }
                                                    scope 43 {
                                                        debug __current_lamports => _161;
                                                        let _166: usize;
                                                        let _242: u64;
                                                        let _352: anchor_lang::prelude::Account<'_, state::state::State>;
                                                        let _353: anchor_lang::error::Error;
                                                        let mut _457: &anchor_lang::error::ErrorCode;
                                                        let mut _458: &anchor_lang::error::ErrorCode;
                                                        scope 44 {
                                                            debug space => _166;
                                                            let _167: u64;
                                                            scope 45 {
                                                                debug lamports => _167;
                                                                let _170: anchor_lang::system_program::CreateAccount<'_>;
                                                                scope 46 {
                                                                    debug cpi_accounts => _170;
                                                                    let _175: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                    scope 47 {
                                                                        debug cpi_context => _175;
                                                                        let _209: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _212: ();
                                                                        scope 48 {
                                                                            debug residual => _209;
                                                                            scope 49 {
                                                                            }
                                                                        }
                                                                        scope 50 {
                                                                            debug val => _212;
                                                                            scope 51 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug required_lamports => _242;
                                                            let _251: anchor_lang::system_program::Transfer<'_>;
                                                            let _270: anchor_lang::system_program::Allocate<'_>;
                                                            scope 53 {
                                                                debug cpi_accounts => _251;
                                                                let _256: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                scope 54 {
                                                                    debug cpi_context => _256;
                                                                    let _266: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _269: ();
                                                                    scope 55 {
                                                                        debug residual => _266;
                                                                        scope 56 {
                                                                        }
                                                                    }
                                                                    scope 57 {
                                                                        debug val => _269;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 59 {
                                                                debug cpi_accounts => _270;
                                                                let _273: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                scope 60 {
                                                                    debug cpi_context => _273;
                                                                    let _305: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _308: ();
                                                                    let _309: anchor_lang::system_program::Assign<'_>;
                                                                    scope 61 {
                                                                        debug residual => _305;
                                                                        scope 62 {
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug val => _308;
                                                                        scope 64 {
                                                                        }
                                                                    }
                                                                    scope 65 {
                                                                        debug cpi_accounts => _309;
                                                                        let _312: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                        scope 66 {
                                                                            debug cpi_context => _312;
                                                                            let _343: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _346: ();
                                                                            scope 67 {
                                                                                debug residual => _343;
                                                                                scope 68 {
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug val => _346;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug val => _352;
                                                        }
                                                        scope 72 {
                                                            debug e => _353;
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug val => _362;
                                                    }
                                                    scope 74 {
                                                        debug e => _363;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _115;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _118;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _107;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _110;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _92;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _95;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _47;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _50;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _480 = const false;
        _479 = const false;
        _478 = const false;
        _477 = const false;
        _476 = const false;
        _475 = const false;
        _474 = const false;
        _473 = const false;
        _472 = const false;
        _467 = const false;
        _471 = const false;
        _470 = const false;
        _469 = const false;
        _468 = const false;
        _466 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, admin::InitializeBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18}>(move _9, move _15) -> [return: bb2, unwind: bb228];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb228];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _481 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _460 = deref_copy (*_2);
        _23 = &(*_460);
        _22 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _23) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb262];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _537 = discriminant(_7);
        StorageDead(_7);
        goto -> bb216;
    }

    bb8: {
        switchInt(move _22) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = AccountNotEnoughKeys;
        _25 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb216;
    }

    bb11: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _461 = deref_copy (*_2);
        _29 = Len((*_461));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb12, unwind continue];
    }

    bb12: {
        _462 = deref_copy (*_2);
        _27 = &(*_462)[_28];
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _463 = deref_copy (*_2);
        _34 = &(*_463);
        StorageLive(_35);
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _33 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _34, move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = &(*_33);
        _31 = &(*_32);
        (*_2) = move _31;
        StorageDead(_31);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, admin::InitializeBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
        _38 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18}>(move _39, move _45) -> [return: bb15, unwind: bb228];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb228];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _36 = move _50;
        StorageDead(_50);
        _483 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, admin::InitializeBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb227];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb261];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _535 = discriminant(_37);
        StorageDead(_37);
        goto -> bb215;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18}>(move _54, move _60) -> [return: bb21, unwind: bb227];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb227];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _485 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, admin::InitializeBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb226];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb260];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _533 = discriminant(_52);
        StorageDead(_52);
        goto -> bb214;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
        _68 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18}>(move _69, move _75) -> [return: bb27, unwind: bb226];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb226];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _66 = move _80;
        StorageDead(_80);
        _487 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, admin::InitializeBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb226];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb259];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _531 = discriminant(_67);
        StorageDead(_67);
        goto -> bb213;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
        _83 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18}>(move _84, move _90) -> [return: bb33, unwind: bb226];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb226];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _81 = move _95;
        StorageDead(_95);
        _489 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, admin::InitializeBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb226];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb258];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _529 = discriminant(_82);
        StorageDead(_82);
        goto -> bb212;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18};
        _98 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4918:10: 4918:18}>(move _99, move _105) -> [return: bb39, unwind: bb226];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb226];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _96 = move _110;
        StorageDead(_110);
        _491 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb44, unwind: bb226];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb257];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _527 = discriminant(_97);
        StorageDead(_97);
        goto -> bb211;
    }

    bb44: {
        _112 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _113) -> [return: bb45, unwind: bb226];
    }

    bb45: {
        StorageDead(_113);
        _114 = discriminant(_112);
        switchInt(move _114) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_118);
        _118 = ((_112 as Continue).0: anchor_lang::prelude::Rent);
        _111 = _118;
        StorageDead(_118);
        _493 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = const b"drift_state";
        _128 = &(*_129);
        _127 = <[u8; 11] as AsRef<[u8]>>::as_ref(move _128) -> [return: bb49, unwind: bb226];
    }

    bb47: {
        StorageLive(_115);
        _115 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_117);
        _117 = move _115;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _117) -> [return: bb48, unwind: bb256];
    }

    bb48: {
        StorageDead(_117);
        StorageDead(_115);
        _525 = discriminant(_112);
        StorageDead(_112);
        goto -> bb210;
    }

    bb49: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = [move _126];
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = move _123 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_130);
        _130 = &(*_1);
        _121 = anchor_lang::prelude::Pubkey::find_program_address(move _122, move _130) -> [return: bb50, unwind: bb226];
    }

    bb50: {
        StorageDead(_130);
        StorageDead(_122);
        StorageLive(_119);
        _119 = (_121.0: anchor_lang::prelude::Pubkey);
        StorageLive(_120);
        _120 = (_121.1: u8);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_121);
        StorageLive(_131);
        _131 = _120;
        ((*_4).0: u8) = move _131;
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &(*_27);
        _135 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _136) -> [return: bb51, unwind: bb226];
    }

    bb51: {
        _134 = &_135;
        StorageDead(_136);
        StorageLive(_137);
        _137 = &_119;
        _133 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _134, move _137) -> [return: bb52, unwind: bb226];
    }

    bb52: {
        switchInt(move _133) -> [0: bb58, otherwise: bb53];
    }

    bb53: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = ConstraintSeeds;
        _141 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _142) -> [return: bb54, unwind: bb226];
    }

    bb54: {
        StorageDead(_142);
        _140 = anchor_lang::error::Error::with_account_name::<&str>(move _141, const "state") -> [return: bb55, unwind: bb226];
    }

    bb55: {
        _480 = const true;
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_27);
        _144 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _145) -> [return: bb56, unwind: bb255];
    }

    bb56: {
        StorageDead(_145);
        StorageLive(_146);
        _146 = _119;
        _143 = (move _144, move _146);
        StorageDead(_146);
        StorageDead(_144);
        _480 = const false;
        _139 = anchor_lang::error::Error::with_pubkeys(move _140, move _143) -> [return: bb57, unwind: bb255];
    }

    bb57: {
        StorageDead(_143);
        _480 = const false;
        StorageDead(_140);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _139);
        StorageDead(_139);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb209;
    }

    bb58: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &(*_27);
        _150 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _151) -> [return: bb59, unwind: bb226];
    }

    bb59: {
        _149 = &(*_150);
        StorageDead(_151);
        _148 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _149) -> [return: bb60, unwind: bb226];
    }

    bb60: {
        StorageDead(_149);
        StorageDead(_150);
        StorageLive(_152);
        _152 = ((*_148).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_153);
        _153 = const _;
        StorageLive(_154);
        StorageLive(_155);
        _155 = const false;
        switchInt(move _155) -> [0: bb63, otherwise: bb61];
    }

    bb61: {
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_152;
        StorageLive(_158);
        _459 = const _;
        _158 = &(*_459);
        _156 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _157, move _158) -> [return: bb62, unwind: bb226];
    }

    bb62: {
        switchInt(move _156) -> [0: bb138, otherwise: bb63];
    }

    bb63: {
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_27);
        _161 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _162) -> [return: bb64, unwind: bb226];
    }

    bb64: {
        StorageDead(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = _161;
        _164 = Eq(move _165, const 0_u64);
        switchInt(move _164) -> [0: bb80, otherwise: bb65];
    }

    bb65: {
        StorageDead(_165);
        StorageLive(_166);
        _166 = _153;
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_111;
        StorageLive(_169);
        _169 = _166;
        _167 = anchor_lang::prelude::Rent::minimum_balance(move _168, move _169) -> [return: bb66, unwind: bb226];
    }

    bb66: {
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_6;
        _171 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _172) -> [return: bb67, unwind: bb226];
    }

    bb67: {
        StorageDead(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &(*_27);
        _173 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _174) -> [return: bb68, unwind: bb225];
    }

    bb68: {
        StorageDead(_174);
        _479 = const true;
        _170 = anchor_lang::system_program::CreateAccount::<'_> { from: move _171, to: move _173 };
        StorageDead(_173);
        StorageDead(_171);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_81;
        _176 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _177) -> [return: bb69, unwind: bb253];
    }

    bb69: {
        StorageDead(_177);
        StorageLive(_178);
        _479 = const false;
        _178 = move _170;
        _175 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _176, move _178) -> [return: bb70, unwind: bb253];
    }

    bb70: {
        StorageDead(_178);
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _478 = const true;
        _183 = move _175;
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = const b"drift_state";
        _194 = &(*_195);
        _193 = <[u8; 11] as AsRef<[u8]>>::as_ref(move _194) -> [return: bb71, unwind: bb251];
    }

    bb71: {
        StorageDead(_194);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = _120;
        _200 = [move _201];
        _199 = &_200;
        StorageDead(_201);
        StorageLive(_202);
        _202 = RangeFull;
        _198 = <[u8; 1] as Index<RangeFull>>::index(move _199, move _202) -> [return: bb72, unwind: bb251];
    }

    bb72: {
        StorageDead(_202);
        StorageDead(_199);
        _197 = &(*_198);
        _196 = &(*_197);
        _192 = [move _193, move _196];
        _191 = &_192;
        StorageDead(_196);
        StorageDead(_193);
        StorageLive(_203);
        _203 = RangeFull;
        _190 = <[&[u8]; 2] as Index<RangeFull>>::index(move _191, move _203) -> [return: bb73, unwind: bb251];
    }

    bb73: {
        StorageDead(_203);
        StorageDead(_191);
        _189 = &(*_190);
        _188 = &(*_189);
        _187 = [move _188];
        StorageDead(_188);
        _186 = &_187;
        _185 = &(*_186);
        _184 = move _185 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_185);
        _478 = const false;
        _182 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _183, move _184) -> [return: bb74, unwind: bb251];
    }

    bb74: {
        StorageDead(_184);
        _478 = const false;
        StorageDead(_183);
        StorageLive(_204);
        _204 = _167;
        StorageLive(_205);
        StorageLive(_206);
        _206 = _166;
        _205 = move _206 as u64 (IntToInt);
        StorageDead(_206);
        StorageLive(_207);
        _207 = &(*_1);
        _181 = anchor_lang::system_program::create_account(move _182, move _204, move _205, move _207) -> [return: bb75, unwind: bb253];
    }

    bb75: {
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_182);
        _180 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _181) -> [return: bb76, unwind: bb253];
    }

    bb76: {
        StorageDead(_181);
        _208 = discriminant(_180);
        switchInt(move _208) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_212);
        _212 = ((_180 as Continue).0: ());
        _179 = _212;
        StorageDead(_212);
        _495 = discriminant(_180);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_180);
        StorageDead(_179);
        _163 = const ();
        StorageDead(_175);
        _479 = const false;
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        goto -> bb132;
    }

    bb78: {
        StorageLive(_209);
        _209 = move ((_180 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_211);
        _211 = move _209;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _211) -> [return: bb79, unwind: bb249];
    }

    bb79: {
        StorageDead(_211);
        StorageDead(_209);
        _523 = discriminant(_180);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_175);
        _479 = const false;
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        goto -> bb205;
    }

    bb80: {
        StorageDead(_165);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &_6;
        _216 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _217) -> [return: bb81, unwind: bb226];
    }

    bb81: {
        _215 = &_216;
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &(*_27);
        _219 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _220) -> [return: bb82, unwind: bb226];
    }

    bb82: {
        _218 = &_219;
        StorageDead(_220);
        _214 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _215, move _218) -> [return: bb83, unwind: bb226];
    }

    bb83: {
        switchInt(move _214) -> [0: bb92, otherwise: bb84];
    }

    bb84: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _458 = const _;
        _226 = &(*_458);
        _225 = anchor_lang::error::ErrorCode::name(move _226) -> [return: bb85, unwind: bb226];
    }

    bb85: {
        StorageDead(_226);
        StorageLive(_228);
        StorageLive(_229);
        _229 = TryingToInitPayerAsProgramAccount;
        _228 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _229) -> [return: bb86, unwind: bb224];
    }

    bb86: {
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        _457 = const _;
        _231 = &(*_457);
        _230 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _231) -> [return: bb87, unwind: bb224];
    }

    bb87: {
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 4918_u32 };
        _234 = anchor_lang::error::ErrorOrigin::Source(move _235);
        StorageDead(_235);
        _233 = Option::<ErrorOrigin>::Some(move _234);
        StorageDead(_234);
        StorageLive(_236);
        _236 = Option::<ComparedValues>::None;
        _224 = anchor_lang::error::AnchorError { error_name: move _225, error_code_number: move _228, error_msg: move _230, error_origin: move _233, compared_values: move _236 };
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_225);
        _223 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _224) -> [return: bb88, unwind: bb226];
    }

    bb88: {
        _477 = const true;
        StorageDead(_224);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &_6;
        _238 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _239) -> [return: bb89, unwind: bb248];
    }

    bb89: {
        StorageDead(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &(*_27);
        _240 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _241) -> [return: bb90, unwind: bb248];
    }

    bb90: {
        StorageDead(_241);
        _237 = (move _238, move _240);
        StorageDead(_240);
        StorageDead(_238);
        _477 = const false;
        _222 = anchor_lang::error::Error::with_pubkeys(move _223, move _237) -> [return: bb91, unwind: bb248];
    }

    bb91: {
        StorageDead(_237);
        _477 = const false;
        StorageDead(_223);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _222);
        StorageDead(_222);
        StorageDead(_214);
        StorageDead(_213);
        goto -> bb205;
    }

    bb92: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_215);
        _213 = const ();
        StorageDead(_214);
        StorageDead(_213);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_111;
        StorageLive(_246);
        _246 = _153;
        _244 = anchor_lang::prelude::Rent::minimum_balance(move _245, move _246) -> [return: bb93, unwind: bb226];
    }

    bb93: {
        StorageDead(_246);
        StorageDead(_245);
        _243 = <u64 as Ord>::max(move _244, const 1_u64) -> [return: bb94, unwind: bb226];
    }

    bb94: {
        StorageDead(_244);
        StorageLive(_247);
        _247 = _161;
        _242 = core::num::<impl u64>::saturating_sub(move _243, move _247) -> [return: bb95, unwind: bb226];
    }

    bb95: {
        StorageDead(_247);
        StorageDead(_243);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = _242;
        _249 = Gt(move _250, const 0_u64);
        switchInt(move _249) -> [0: bb106, otherwise: bb96];
    }

    bb96: {
        StorageDead(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_6;
        _252 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _253) -> [return: bb97, unwind: bb226];
    }

    bb97: {
        StorageDead(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &(*_27);
        _254 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _255) -> [return: bb98, unwind: bb223];
    }

    bb98: {
        StorageDead(_255);
        _476 = const true;
        _251 = anchor_lang::system_program::Transfer::<'_> { from: move _252, to: move _254 };
        StorageDead(_254);
        StorageDead(_252);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &_81;
        _257 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _258) -> [return: bb99, unwind: bb246];
    }

    bb99: {
        StorageDead(_258);
        StorageLive(_259);
        _476 = const false;
        _259 = move _251;
        _256 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _257, move _259) -> [return: bb100, unwind: bb246];
    }

    bb100: {
        StorageDead(_259);
        StorageDead(_257);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = move _256;
        StorageLive(_264);
        _264 = _242;
        _262 = anchor_lang::system_program::transfer(move _263, move _264) -> [return: bb101, unwind: bb246];
    }

    bb101: {
        StorageDead(_264);
        StorageDead(_263);
        _261 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _262) -> [return: bb102, unwind: bb246];
    }

    bb102: {
        StorageDead(_262);
        _265 = discriminant(_261);
        switchInt(move _265) -> [0: bb103, 1: bb104, otherwise: bb5];
    }

    bb103: {
        StorageLive(_269);
        _269 = ((_261 as Continue).0: ());
        _260 = _269;
        StorageDead(_269);
        _497 = discriminant(_261);
        StorageDead(_261);
        StorageDead(_260);
        _248 = const ();
        StorageDead(_256);
        _476 = const false;
        StorageDead(_251);
        goto -> bb107;
    }

    bb104: {
        StorageLive(_266);
        _266 = move ((_261 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_268);
        _268 = move _266;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _268) -> [return: bb105, unwind: bb244];
    }

    bb105: {
        StorageDead(_268);
        StorageDead(_266);
        _521 = discriminant(_261);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_256);
        _476 = const false;
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_248);
        goto -> bb204;
    }

    bb106: {
        StorageDead(_250);
        _248 = const ();
        goto -> bb107;
    }

    bb107: {
        StorageDead(_249);
        StorageDead(_248);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &(*_27);
        _271 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _272) -> [return: bb108, unwind: bb226];
    }

    bb108: {
        StorageDead(_272);
        _475 = const true;
        _270 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _271 };
        StorageDead(_271);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_81;
        _274 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _275) -> [return: bb109, unwind: bb243];
    }

    bb109: {
        StorageDead(_275);
        StorageLive(_276);
        _475 = const false;
        _276 = move _270;
        _273 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _274, move _276) -> [return: bb110, unwind: bb243];
    }

    bb110: {
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _474 = const true;
        _281 = move _273;
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = const b"drift_state";
        _292 = &(*_293);
        _291 = <[u8; 11] as AsRef<[u8]>>::as_ref(move _292) -> [return: bb111, unwind: bb241];
    }

    bb111: {
        StorageDead(_292);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = _120;
        _298 = [move _299];
        _297 = &_298;
        StorageDead(_299);
        StorageLive(_300);
        _300 = RangeFull;
        _296 = <[u8; 1] as Index<RangeFull>>::index(move _297, move _300) -> [return: bb112, unwind: bb241];
    }

    bb112: {
        StorageDead(_300);
        StorageDead(_297);
        _295 = &(*_296);
        _294 = &(*_295);
        _290 = [move _291, move _294];
        _289 = &_290;
        StorageDead(_294);
        StorageDead(_291);
        StorageLive(_301);
        _301 = RangeFull;
        _288 = <[&[u8]; 2] as Index<RangeFull>>::index(move _289, move _301) -> [return: bb113, unwind: bb241];
    }

    bb113: {
        StorageDead(_301);
        StorageDead(_289);
        _287 = &(*_288);
        _286 = &(*_287);
        _285 = [move _286];
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _282 = move _283 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_283);
        _474 = const false;
        _280 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _281, move _282) -> [return: bb114, unwind: bb241];
    }

    bb114: {
        StorageDead(_282);
        _474 = const false;
        StorageDead(_281);
        StorageLive(_302);
        StorageLive(_303);
        _303 = _153;
        _302 = move _303 as u64 (IntToInt);
        StorageDead(_303);
        _279 = anchor_lang::system_program::allocate(move _280, move _302) -> [return: bb115, unwind: bb243];
    }

    bb115: {
        StorageDead(_302);
        StorageDead(_280);
        _278 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _279) -> [return: bb116, unwind: bb243];
    }

    bb116: {
        StorageDead(_279);
        _304 = discriminant(_278);
        switchInt(move _304) -> [0: bb117, 1: bb118, otherwise: bb5];
    }

    bb117: {
        StorageLive(_308);
        _308 = ((_278 as Continue).0: ());
        _277 = _308;
        StorageDead(_308);
        _499 = discriminant(_278);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_278);
        StorageDead(_277);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &(*_27);
        _310 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _311) -> [return: bb120, unwind: bb243];
    }

    bb118: {
        StorageLive(_305);
        _305 = move ((_278 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_307);
        _307 = move _305;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _307) -> [return: bb119, unwind: bb239];
    }

    bb119: {
        StorageDead(_307);
        StorageDead(_305);
        _519 = discriminant(_278);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_278);
        StorageDead(_277);
        goto -> bb203;
    }

    bb120: {
        StorageDead(_311);
        _473 = const true;
        _309 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _310 };
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &_81;
        _313 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _314) -> [return: bb121, unwind: bb238];
    }

    bb121: {
        StorageDead(_314);
        StorageLive(_315);
        _473 = const false;
        _315 = move _309;
        _312 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _313, move _315) -> [return: bb122, unwind: bb238];
    }

    bb122: {
        StorageDead(_315);
        StorageDead(_313);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _472 = const true;
        _320 = move _312;
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = const b"drift_state";
        _331 = &(*_332);
        _330 = <[u8; 11] as AsRef<[u8]>>::as_ref(move _331) -> [return: bb123, unwind: bb236];
    }

    bb123: {
        StorageDead(_331);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = _120;
        _337 = [move _338];
        _336 = &_337;
        StorageDead(_338);
        StorageLive(_339);
        _339 = RangeFull;
        _335 = <[u8; 1] as Index<RangeFull>>::index(move _336, move _339) -> [return: bb124, unwind: bb236];
    }

    bb124: {
        StorageDead(_339);
        StorageDead(_336);
        _334 = &(*_335);
        _333 = &(*_334);
        _329 = [move _330, move _333];
        _328 = &_329;
        StorageDead(_333);
        StorageDead(_330);
        StorageLive(_340);
        _340 = RangeFull;
        _327 = <[&[u8]; 2] as Index<RangeFull>>::index(move _328, move _340) -> [return: bb125, unwind: bb236];
    }

    bb125: {
        StorageDead(_340);
        StorageDead(_328);
        _326 = &(*_327);
        _325 = &(*_326);
        _324 = [move _325];
        StorageDead(_325);
        _323 = &_324;
        _322 = &(*_323);
        _321 = move _322 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_322);
        _472 = const false;
        _319 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _320, move _321) -> [return: bb126, unwind: bb236];
    }

    bb126: {
        StorageDead(_321);
        _472 = const false;
        StorageDead(_320);
        StorageLive(_341);
        _341 = &(*_1);
        _318 = anchor_lang::system_program::assign(move _319, move _341) -> [return: bb127, unwind: bb238];
    }

    bb127: {
        StorageDead(_341);
        StorageDead(_319);
        _317 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _318) -> [return: bb128, unwind: bb238];
    }

    bb128: {
        StorageDead(_318);
        _342 = discriminant(_317);
        switchInt(move _342) -> [0: bb129, 1: bb130, otherwise: bb5];
    }

    bb129: {
        StorageLive(_346);
        _346 = ((_317 as Continue).0: ());
        _316 = _346;
        StorageDead(_346);
        _501 = discriminant(_317);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_317);
        StorageDead(_316);
        _163 = const ();
        StorageDead(_312);
        _473 = const false;
        StorageDead(_309);
        StorageDead(_273);
        _475 = const false;
        StorageDead(_270);
        StorageDead(_242);
        goto -> bb132;
    }

    bb130: {
        StorageLive(_343);
        _343 = move ((_317 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_345);
        _345 = move _343;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _345) -> [return: bb131, unwind: bb234];
    }

    bb131: {
        StorageDead(_345);
        StorageDead(_343);
        _517 = discriminant(_317);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_312);
        _473 = const false;
        StorageDead(_309);
        goto -> bb203;
    }

    bb132: {
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = &_27;
        _464 = deref_copy (*_350);
        _349 = &(*_464);
        _348 = anchor_lang::prelude::Account::<'_, state::state::State>::try_from_unchecked(move _349) -> [return: bb133, unwind: bb226];
    }

    bb133: {
        _470 = const true;
        _471 = const true;
        StorageDead(_349);
        _351 = discriminant(_348);
        switchInt(move _351) -> [0: bb135, 1: bb134, otherwise: bb5];
    }

    bb134: {
        StorageLive(_353);
        _353 = move ((_348 as Err).0: anchor_lang::error::Error);
        StorageLive(_355);
        StorageLive(_356);
        _356 = move _353;
        _355 = anchor_lang::error::Error::with_account_name::<&str>(move _356, const "state") -> [return: bb136, unwind: bb233];
    }

    bb135: {
        StorageLive(_352);
        _352 = move ((_348 as Ok).0: anchor_lang::prelude::Account<'_, state::state::State>);
        _347 = move _352;
        StorageDead(_352);
        _154 = Box::<anchor_lang::prelude::Account<'_, state::state::State>>::new(move _347) -> [return: bb137, unwind: bb233];
    }

    bb136: {
        StorageDead(_356);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _355);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_347);
        StorageDead(_161);
        _515 = discriminant(_348);
        StorageDead(_350);
        _470 = const false;
        _471 = const false;
        StorageDead(_348);
        goto -> bb206;
    }

    bb137: {
        StorageDead(_347);
        StorageDead(_161);
        _503 = discriminant(_348);
        StorageDead(_350);
        _470 = const false;
        _471 = const false;
        StorageDead(_348);
        goto -> bb144;
    }

    bb138: {
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = &_27;
        _465 = deref_copy (*_360);
        _359 = &(*_465);
        _358 = anchor_lang::prelude::Account::<'_, state::state::State>::try_from(move _359) -> [return: bb139, unwind: bb226];
    }

    bb139: {
        _468 = const true;
        _469 = const true;
        StorageDead(_359);
        _361 = discriminant(_358);
        switchInt(move _361) -> [0: bb141, 1: bb140, otherwise: bb5];
    }

    bb140: {
        StorageLive(_363);
        _363 = move ((_358 as Err).0: anchor_lang::error::Error);
        StorageLive(_365);
        StorageLive(_366);
        _366 = move _363;
        _365 = anchor_lang::error::Error::with_account_name::<&str>(move _366, const "state") -> [return: bb142, unwind: bb232];
    }

    bb141: {
        StorageLive(_362);
        _362 = move ((_358 as Ok).0: anchor_lang::prelude::Account<'_, state::state::State>);
        _357 = move _362;
        StorageDead(_362);
        _154 = Box::<anchor_lang::prelude::Account<'_, state::state::State>>::new(move _357) -> [return: bb143, unwind: bb232];
    }

    bb142: {
        StorageDead(_366);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _365);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_357);
        _513 = discriminant(_358);
        StorageDead(_360);
        _468 = const false;
        _469 = const false;
        StorageDead(_358);
        goto -> bb206;
    }

    bb143: {
        StorageDead(_357);
        _505 = discriminant(_358);
        StorageDead(_360);
        _468 = const false;
        _469 = const false;
        StorageDead(_358);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_367);
        StorageLive(_368);
        _368 = const false;
        switchInt(move _368) -> [0: bb168, otherwise: bb145];
    }

    bb145: {
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = _153;
        StorageLive(_372);
        StorageLive(_373);
        _373 = &(*_148);
        _372 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _373) -> [return: bb146, unwind: bb222];
    }

    bb146: {
        StorageDead(_373);
        _370 = Ne(move _371, move _372);
        switchInt(move _370) -> [0: bb152, otherwise: bb147];
    }

    bb147: {
        StorageDead(_372);
        StorageDead(_371);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = ConstraintSpace;
        _377 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _378) -> [return: bb148, unwind: bb222];
    }

    bb148: {
        StorageDead(_378);
        _376 = anchor_lang::error::Error::with_account_name::<&str>(move _377, const "state") -> [return: bb149, unwind: bb222];
    }

    bb149: {
        _467 = const true;
        StorageDead(_377);
        StorageLive(_379);
        StorageLive(_380);
        _380 = _153;
        StorageLive(_381);
        StorageLive(_382);
        _382 = &(*_148);
        _381 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _382) -> [return: bb150, unwind: bb231];
    }

    bb150: {
        StorageDead(_382);
        _379 = (move _380, move _381);
        StorageDead(_381);
        StorageDead(_380);
        _467 = const false;
        _375 = anchor_lang::error::Error::with_values::<usize, usize>(move _376, move _379) -> [return: bb151, unwind: bb231];
    }

    bb151: {
        StorageDead(_379);
        _467 = const false;
        StorageDead(_376);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _375);
        StorageDead(_375);
        StorageDead(_370);
        StorageDead(_369);
        goto -> bb202;
    }

    bb152: {
        StorageDead(_372);
        StorageDead(_371);
        _369 = const ();
        StorageDead(_370);
        StorageDead(_369);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = &_152;
        StorageLive(_386);
        _386 = &_1;
        _384 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _385, move _386) -> [return: bb153, unwind: bb222];
    }

    bb153: {
        switchInt(move _384) -> [0: bb158, otherwise: bb154];
    }

    bb154: {
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = ConstraintOwner;
        _390 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _391) -> [return: bb155, unwind: bb222];
    }

    bb155: {
        StorageDead(_391);
        _389 = anchor_lang::error::Error::with_account_name::<&str>(move _390, const "state") -> [return: bb156, unwind: bb222];
    }

    bb156: {
        StorageDead(_390);
        StorageLive(_392);
        StorageLive(_393);
        _393 = (*_152);
        StorageLive(_394);
        _394 = (*_1);
        _392 = (move _393, move _394);
        StorageDead(_394);
        StorageDead(_393);
        _388 = anchor_lang::error::Error::with_pubkeys(move _389, move _392) -> [return: bb157, unwind: bb222];
    }

    bb157: {
        StorageDead(_392);
        StorageDead(_389);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _388);
        StorageDead(_388);
        StorageDead(_384);
        StorageDead(_383);
        goto -> bb202;
    }

    bb158: {
        StorageDead(_386);
        StorageDead(_385);
        _383 = const ();
        StorageDead(_384);
        StorageDead(_383);
        StorageLive(_395);
        StorageLive(_396);
        _396 = &_111;
        StorageLive(_397);
        _397 = _153;
        _395 = anchor_lang::prelude::Rent::minimum_balance(move _396, move _397) -> [return: bb159, unwind: bb222];
    }

    bb159: {
        StorageDead(_397);
        StorageDead(_396);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _553 = (((_154.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _402 = &(*_553);
        _401 = <anchor_lang::prelude::Account<'_, state::state::State> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _402) -> [return: bb160, unwind: bb222];
    }

    bb160: {
        _400 = &_401;
        StorageDead(_402);
        _399 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _400) -> [return: bb161, unwind: bb221];
    }

    bb161: {
        StorageDead(_400);
        StorageLive(_403);
        _403 = _395;
        _398 = Lt(move _399, move _403);
        switchInt(move _398) -> [0: bb166, otherwise: bb162];
    }

    bb162: {
        StorageDead(_403);
        drop(_401) -> [return: bb163, unwind: bb222];
    }

    bb163: {
        StorageDead(_401);
        StorageDead(_399);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = ConstraintRentExempt;
        _406 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _407) -> [return: bb164, unwind: bb222];
    }

    bb164: {
        StorageDead(_407);
        _405 = anchor_lang::error::Error::with_account_name::<&str>(move _406, const "state") -> [return: bb165, unwind: bb222];
    }

    bb165: {
        StorageDead(_406);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _405);
        StorageDead(_405);
        StorageDead(_398);
        StorageDead(_395);
        goto -> bb202;
    }

    bb166: {
        StorageDead(_403);
        drop(_401) -> [return: bb167, unwind: bb222];
    }

    bb167: {
        StorageDead(_401);
        StorageDead(_399);
        _367 = const ();
        StorageDead(_398);
        StorageDead(_395);
        goto -> bb169;
    }

    bb168: {
        _367 = const ();
        goto -> bb169;
    }

    bb169: {
        StorageDead(_368);
        StorageDead(_367);
        _147 = move _154;
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &_147;
        _412 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _413) -> [return: bb170, unwind: bb220];
    }

    bb170: {
        _411 = &(*_412);
        StorageDead(_413);
        _410 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _411) -> [return: bb171, unwind: bb220];
    }

    bb171: {
        StorageDead(_411);
        _409 = ((*_410).6: bool);
        switchInt(move _409) -> [0: bb172, otherwise: bb175];
    }

    bb172: {
        StorageDead(_412);
        StorageDead(_410);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = ConstraintMut;
        _416 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _417) -> [return: bb173, unwind: bb220];
    }

    bb173: {
        StorageDead(_417);
        _415 = anchor_lang::error::Error::with_account_name::<&str>(move _416, const "state") -> [return: bb174, unwind: bb220];
    }

    bb174: {
        StorageDead(_416);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _415);
        StorageDead(_415);
        StorageDead(_409);
        StorageDead(_408);
        goto -> bb201;
    }

    bb175: {
        StorageDead(_412);
        StorageDead(_410);
        _408 = const ();
        StorageDead(_409);
        StorageDead(_408);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &_111;
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _554 = (((_147.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _424 = &(*_554);
        _423 = <anchor_lang::prelude::Account<'_, state::state::State> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _424) -> [return: bb176, unwind: bb220];
    }

    bb176: {
        _422 = &_423;
        StorageDead(_424);
        _421 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _422) -> [return: bb177, unwind: bb219];
    }

    bb177: {
        StorageDead(_422);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _555 = (((_147.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _430 = &(*_555);
        _429 = <anchor_lang::prelude::Account<'_, state::state::State> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _430) -> [return: bb178, unwind: bb219];
    }

    bb178: {
        _428 = &_429;
        StorageDead(_430);
        _427 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _428) -> [return: bb179, unwind: bb218];
    }

    bb179: {
        StorageDead(_428);
        _426 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _427) -> [return: bb180, unwind: bb218];
    }

    bb180: {
        _466 = const true;
        StorageDead(_427);
        _431 = discriminant(_426);
        switchInt(move _431) -> [0: bb181, 1: bb182, otherwise: bb5];
    }

    bb181: {
        StorageLive(_435);
        _435 = ((_426 as Continue).0: usize);
        _425 = _435;
        StorageDead(_435);
        _419 = anchor_lang::prelude::Rent::is_exempt(move _420, move _421, move _425) -> [return: bb184, unwind: bb229];
    }

    bb182: {
        StorageLive(_432);
        _432 = move ((_426 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_434);
        _434 = move _432;
        _0 = <std::result::Result<admin::Initialize<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _434) -> [return: bb183, unwind: bb229];
    }

    bb183: {
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_425);
        StorageDead(_421);
        StorageDead(_420);
        _511 = discriminant(_426);
        drop(_429) -> [return: bb198, unwind: bb219];
    }

    bb184: {
        switchInt(move _419) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        StorageDead(_425);
        StorageDead(_421);
        StorageDead(_420);
        _507 = discriminant(_426);
        drop(_429) -> [return: bb191, unwind: bb219];
    }

    bb186: {
        StorageDead(_425);
        StorageDead(_421);
        StorageDead(_420);
        _509 = discriminant(_426);
        drop(_429) -> [return: bb187, unwind: bb219];
    }

    bb187: {
        StorageDead(_429);
        _466 = const false;
        StorageDead(_426);
        drop(_423) -> [return: bb188, unwind: bb220];
    }

    bb188: {
        StorageDead(_423);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = ConstraintRentExempt;
        _438 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _439) -> [return: bb189, unwind: bb220];
    }

    bb189: {
        StorageDead(_439);
        _437 = anchor_lang::error::Error::with_account_name::<&str>(move _438, const "state") -> [return: bb190, unwind: bb220];
    }

    bb190: {
        StorageDead(_438);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _437);
        StorageDead(_437);
        goto -> bb200;
    }

    bb191: {
        StorageDead(_429);
        _466 = const false;
        StorageDead(_426);
        drop(_423) -> [return: bb192, unwind: bb220];
    }

    bb192: {
        StorageDead(_423);
        _418 = const ();
        StorageDead(_419);
        StorageDead(_418);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &_6;
        _443 = &(*_444);
        _442 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _443) -> [return: bb193, unwind: bb220];
    }

    bb193: {
        StorageDead(_443);
        _441 = ((*_442).6: bool);
        switchInt(move _441) -> [0: bb194, otherwise: bb197];
    }

    bb194: {
        StorageDead(_444);
        StorageDead(_442);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = ConstraintMut;
        _447 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _448) -> [return: bb195, unwind: bb220];
    }

    bb195: {
        StorageDead(_448);
        _446 = anchor_lang::error::Error::with_account_name::<&str>(move _447, const "admin") -> [return: bb196, unwind: bb220];
    }

    bb196: {
        StorageDead(_447);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Err(move _446);
        StorageDead(_446);
        StorageDead(_441);
        StorageDead(_440);
        goto -> bb201;
    }

    bb197: {
        StorageDead(_444);
        StorageDead(_442);
        _440 = const ();
        StorageDead(_441);
        StorageDead(_440);
        StorageLive(_449);
        StorageLive(_450);
        _450 = move _6;
        StorageLive(_451);
        _451 = move _147;
        StorageLive(_452);
        _452 = move _36;
        StorageLive(_453);
        _453 = move _51;
        StorageLive(_454);
        _454 = move _66;
        StorageLive(_455);
        _455 = move _81;
        StorageLive(_456);
        _456 = move _96;
        _449 = admin::Initialize::<'_> { admin: move _450, state: move _451, quote_asset_mint: move _452, drift_signer: move _453, rent: move _454, system_program: move _455, token_program: move _456 };
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_452);
        StorageDead(_451);
        StorageDead(_450);
        _0 = std::result::Result::<admin::Initialize<'_>, anchor_lang::error::Error>::Ok(move _449);
        StorageDead(_449);
        StorageDead(_147);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_6);
        goto -> bb217;
    }

    bb198: {
        StorageDead(_429);
        _466 = const false;
        StorageDead(_426);
        drop(_423) -> [return: bb199, unwind: bb220];
    }

    bb199: {
        StorageDead(_423);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_419);
        StorageDead(_418);
        goto -> bb201;
    }

    bb201: {
        drop(_147) -> [return: bb208, unwind: bb226];
    }

    bb202: {
        StorageDead(_368);
        StorageDead(_367);
        drop(_154) -> [return: bb207, unwind: bb226];
    }

    bb203: {
        StorageDead(_273);
        _475 = const false;
        StorageDead(_270);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_242);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_156);
        StorageDead(_155);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_147);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_111);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_96);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_81);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_66);
        drop(_51) -> [return: bb214, unwind: bb227];
    }

    bb214: {
        StorageDead(_51);
        drop(_36) -> [return: bb215, unwind: bb228];
    }

    bb215: {
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_6);
        goto -> bb217;
    }

    bb217: {
        return;
    }

    bb218 (cleanup): {
        drop(_429) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_423) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_147) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_401) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_154) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_252) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_225) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_171) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        drop(_51) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        drop(_36) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        resume;
    }

    bb229 (cleanup): {
        _539 = discriminant(_426);
        goto -> bb218;
    }

    bb230 (cleanup): {
        drop(_376) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        switchInt(_467) -> [0: bb222, otherwise: bb230];
    }

    bb232 (cleanup): {
        _540 = discriminant(_358);
        goto -> bb226;
    }

    bb233 (cleanup): {
        _541 = discriminant(_348);
        goto -> bb226;
    }

    bb234 (cleanup): {
        _542 = discriminant(_317);
        goto -> bb238;
    }

    bb235 (cleanup): {
        drop(_320) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        switchInt(_472) -> [0: bb238, otherwise: bb235];
    }

    bb237 (cleanup): {
        drop(_309) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        switchInt(_473) -> [0: bb243, otherwise: bb237];
    }

    bb239 (cleanup): {
        _543 = discriminant(_278);
        goto -> bb243;
    }

    bb240 (cleanup): {
        drop(_281) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_474) -> [0: bb243, otherwise: bb240];
    }

    bb242 (cleanup): {
        drop(_270) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        switchInt(_475) -> [0: bb226, otherwise: bb242];
    }

    bb244 (cleanup): {
        _544 = discriminant(_261);
        goto -> bb246;
    }

    bb245 (cleanup): {
        drop(_251) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        switchInt(_476) -> [0: bb226, otherwise: bb245];
    }

    bb247 (cleanup): {
        drop(_223) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        switchInt(_477) -> [0: bb226, otherwise: bb247];
    }

    bb249 (cleanup): {
        _545 = discriminant(_180);
        goto -> bb253;
    }

    bb250 (cleanup): {
        drop(_183) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        switchInt(_478) -> [0: bb253, otherwise: bb250];
    }

    bb252 (cleanup): {
        drop(_170) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        switchInt(_479) -> [0: bb226, otherwise: bb252];
    }

    bb254 (cleanup): {
        drop(_140) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        switchInt(_480) -> [0: bb226, otherwise: bb254];
    }

    bb256 (cleanup): {
        _546 = discriminant(_112);
        goto -> bb226;
    }

    bb257 (cleanup): {
        _547 = discriminant(_97);
        goto -> bb226;
    }

    bb258 (cleanup): {
        _548 = discriminant(_82);
        goto -> bb226;
    }

    bb259 (cleanup): {
        _549 = discriminant(_67);
        goto -> bb226;
    }

    bb260 (cleanup): {
        _550 = discriminant(_52);
        goto -> bb227;
    }

    bb261 (cleanup): {
        _551 = discriminant(_37);
        goto -> bb228;
    }

    bb262 (cleanup): {
        _552 = discriminant(_7);
        goto -> bb228;
    }
}

alloc176 (size: 11, align: 1) {
    64 72 69 66 74 5f 73 74 61 74 65                │ drift_state
}

alloc175 (size: 11, align: 1) {
    64 72 69 66 74 5f 73 74 61 74 65                │ drift_state
}

alloc174 (size: 11, align: 1) {
    64 72 69 66 74 5f 73 74 61 74 65                │ drift_state
}

alloc173 (size: 11, align: 1) {
    64 72 69 66 74 5f 73 74 61 74 65                │ drift_state
}
