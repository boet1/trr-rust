// MIR for `update_quote_asset_and_break_even_amount` after PreCodegen

fn update_quote_asset_and_break_even_amount(_1: &mut PerpPosition, _2: &mut PerpMarket, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug position => _1;
    debug market => _2;
    debug delta => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &mut state::user::PerpPosition;
    let mut _8: &mut state::perp_market::PerpMarket;
    let mut _9: i64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: ();
    let mut _15: &mut state::user::PerpPosition;
    let mut _16: &mut state::perp_market::PerpMarket;
    let mut _17: i64;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        StorageLive(_8);
        _8 = &mut (*_2);
        StorageLive(_9);
        _9 = _3;
        _6 = update_quote_asset_amount(move _7, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_5 as Continue).0: ());
        _4 = _14;
        StorageDead(_14);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_15);
        _15 = &mut (*_1);
        StorageLive(_16);
        _16 = &mut (*_2);
        StorageLive(_17);
        _17 = _3;
        _0 = update_quote_break_even_amount(move _15, move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
