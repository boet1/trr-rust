// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:114:1: 114:49>::new::{closure#0}` after PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:114:1: 114:49>::new::{closure#0}(_1: &mut {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26}, _2: &&&anchor_lang::prelude::AccountInfo<'_>) -> bool {
    debug acc => _2;
    let mut _0: bool;
    let mut _3: &[u8];
    let _4: &&mut [u8];
    let mut _5: &std::cell::Ref<'_, &mut [u8]>;
    let _6: std::cell::Ref<'_, &mut [u8]>;
    let mut _7: &std::cell::RefCell<&mut [u8]>;
    let _8: &std::cell::RefCell<&mut [u8]>;
    let mut _9: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _10: &[u8];
    let mut _11: &[u8; 8];
    let _12: &[u8; 8];
    let _13: [u8; 8];
    let mut _14: &[u8; 8];
    let mut _15: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &mut [u8];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _15 = deref_copy (*_2);
        _16 = deref_copy (*_15);
        _9 = &((*_16).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _8 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = RefCell::<&mut [u8]>::borrow(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_6;
        _4 = <Ref<'_, &mut [u8]> as Deref>::deref(move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _17 = deref_copy (*_4);
        _3 = &(*_17);
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _14 = const _;
        _12 = &(*_14);
        _11 = &(*_12);
        _10 = move _11 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_11);
        _0 = core::slice::<impl [u8]>::starts_with(move _3, move _10) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_3);
        StorageDead(_12);
        drop(_6) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        return;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}
