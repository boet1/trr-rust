// MIR for `admin::handle_initialize_phoenix_fulfillment_config` after PreCodegen

fn admin::handle_initialize_phoenix_fulfillment_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializePhoenixFulfillmentConfig<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u16;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: error::ErrorCode;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let _38: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _40: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _43: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _44: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _52: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _53: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _55: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _56: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _63: ();
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _65: std::result::Result<(), error::ErrorCode>;
    let mut _66: bool;
    let mut _67: &anchor_lang::prelude::Pubkey;
    let _68: anchor_lang::prelude::Pubkey;
    let mut _69: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: ();
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &error::ErrorCode;
    let _91: &error::ErrorCode;
    let mut _92: error::ErrorCode;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>>;
    let mut _100: std::result::Result<state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>, error::ErrorCode>;
    let mut _101: &anchor_lang::prelude::AccountInfo<'_>;
    let _102: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _108: ();
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _110: std::result::Result<(), error::ErrorCode>;
    let mut _111: bool;
    let mut _112: &anchor_lang::prelude::Pubkey;
    let mut _113: &anchor_lang::prelude::Pubkey;
    let _114: &state::spot_market::SpotMarket;
    let mut _115: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _116: ();
    let _118: ();
    let mut _119: &str;
    let _120: &str;
    let mut _121: &std::string::String;
    let _122: &std::string::String;
    let _123: std::string::String;
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let mut _127: &[&str; 2];
    let _128: &[&str; 2];
    let _129: [&str; 2];
    let mut _130: &[core::fmt::rt::Argument<'_>];
    let mut _131: &[core::fmt::rt::Argument<'_>; 1];
    let _132: &[core::fmt::rt::Argument<'_>; 1];
    let _133: [core::fmt::rt::Argument<'_>; 1];
    let mut _134: core::fmt::rt::Argument<'_>;
    let mut _135: &error::ErrorCode;
    let _136: &error::ErrorCode;
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: error::ErrorCode;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _146: ();
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _148: std::result::Result<(), error::ErrorCode>;
    let mut _149: bool;
    let mut _150: &anchor_lang::prelude::Pubkey;
    let mut _151: &anchor_lang::prelude::Pubkey;
    let _152: &state::spot_market::SpotMarket;
    let mut _153: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _154: ();
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 1];
    let _170: &[core::fmt::rt::Argument<'_>; 1];
    let _171: [core::fmt::rt::Argument<'_>; 1];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &error::ErrorCode;
    let _174: &error::ErrorCode;
    let _175: ();
    let mut _176: &str;
    let _177: &str;
    let mut _178: error::ErrorCode;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _185: &phoenix::quantities::BaseAtomsPerBaseLot;
    let _186: phoenix::quantities::BaseAtomsPerBaseLot;
    let mut _187: &phoenix::program::MarketHeader;
    let mut _189: bool;
    let mut _190: u64;
    let mut _191: &state::spot_market::SpotMarket;
    let mut _192: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _193: u64;
    let mut _194: u64;
    let mut _195: u64;
    let mut _196: &state::spot_market::SpotMarket;
    let mut _197: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _198: u64;
    let _199: ();
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _201: std::result::Result<(), error::ErrorCode>;
    let mut _202: bool;
    let mut _203: ();
    let _205: ();
    let mut _206: &str;
    let _207: &str;
    let mut _208: &std::string::String;
    let _209: &std::string::String;
    let _210: std::string::String;
    let mut _212: std::fmt::Arguments<'_>;
    let mut _213: &[&str];
    let mut _214: &[&str; 2];
    let _215: &[&str; 2];
    let _216: [&str; 2];
    let mut _217: &[core::fmt::rt::Argument<'_>];
    let mut _218: &[core::fmt::rt::Argument<'_>; 1];
    let _219: &[core::fmt::rt::Argument<'_>; 1];
    let _220: [core::fmt::rt::Argument<'_>; 1];
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &error::ErrorCode;
    let _223: &error::ErrorCode;
    let _224: ();
    let mut _225: &str;
    let _226: &str;
    let mut _227: &std::string::String;
    let _228: &std::string::String;
    let _229: std::string::String;
    let mut _231: std::fmt::Arguments<'_>;
    let mut _232: &[&str];
    let mut _233: &[&str; 3];
    let _234: &[&str; 3];
    let _235: [&str; 3];
    let mut _236: &[core::fmt::rt::Argument<'_>];
    let mut _237: &[core::fmt::rt::Argument<'_>; 2];
    let _238: &[core::fmt::rt::Argument<'_>; 2];
    let _239: [core::fmt::rt::Argument<'_>; 2];
    let mut _240: core::fmt::rt::Argument<'_>;
    let mut _241: &u64;
    let _242: &u64;
    let _243: &state::spot_market::SpotMarket;
    let mut _244: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _245: core::fmt::rt::Argument<'_>;
    let mut _246: &u64;
    let _247: &u64;
    let mut _248: error::ErrorCode;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _255: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>>;
    let mut _258: std::result::Result<std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _259: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _260: isize;
    let mut _262: !;
    let mut _263: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _265: state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _266: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _267: &anchor_lang::prelude::Pubkey;
    let _268: &anchor_lang::prelude::Pubkey;
    let mut _269: u16;
    let mut _270: &mut state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _271: &mut std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _272: ();
    let mut _279: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>;
    let mut _280: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>;
    let mut _281: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>;
    let mut _282: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>;
    let mut _283: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>;
    let mut _284: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let mut _278: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
    }
    scope 3 {
        debug residual => _34;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _37;
        scope 6 {
        }
    }
    scope 7 {
        debug base_spot_market => _38;
        let _50: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        scope 12 {
            debug quote_spot_market => _50;
            let _62: anchor_lang::prelude::Pubkey;
            scope 17 {
                debug phoenix_program_id => _62;
                let _72: error::ErrorCode;
                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _97: ();
                let _98: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
                let _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _107: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
                scope 18 {
                    debug error_code => _72;
                    let _79: std::string::String;
                    let mut _277: &[&str; 2];
                    scope 19 {
                        debug res => _79;
                    }
                }
                scope 20 {
                    debug residual => _94;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _97;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug phoenix_market_context => _98;
                    let _117: error::ErrorCode;
                    let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _145: ();
                    let _155: error::ErrorCode;
                    let _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _183: ();
                    let _184: u64;
                    scope 29 {
                        debug error_code => _117;
                        let _124: std::string::String;
                        let mut _276: &[&str; 2];
                        scope 30 {
                            debug res => _124;
                        }
                    }
                    scope 31 {
                        debug residual => _142;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _145;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug error_code => _155;
                        let _162: std::string::String;
                        let mut _275: &[&str; 2];
                        scope 36 {
                            debug res => _162;
                        }
                    }
                    scope 37 {
                        debug residual => _180;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _183;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug market_step_size => _184;
                        let _188: bool;
                        scope 42 {
                            debug valid_step_size => _188;
                            let _204: error::ErrorCode;
                            let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _253: ();
                            let _254: anchor_lang::prelude::Pubkey;
                            scope 43 {
                                debug error_code => _204;
                                let _211: std::string::String;
                                let _230: std::string::String;
                                let mut _273: &[&str; 3];
                                let mut _274: &[&str; 2];
                                scope 44 {
                                    debug res => _211;
                                }
                                scope 45 {
                                    debug res => _230;
                                }
                            }
                            scope 46 {
                                debug residual => _250;
                                scope 47 {
                                }
                            }
                            scope 48 {
                                debug val => _253;
                                scope 49 {
                                }
                            }
                            scope 50 {
                                debug phoenix_fulfillment_config_key => _254;
                                let mut _256: std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
                                let _261: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _264: std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
                                scope 51 {
                                    debug phoenix_fulfillment_config => _256;
                                }
                                scope 52 {
                                    debug residual => _261;
                                    scope 53 {
                                    }
                                }
                                scope 54 {
                                    debug val => _264;
                                    scope 55 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 25 {
                    debug residual => _104;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _107;
                    scope 28 {
                    }
                }
            }
        }
        scope 13 {
            debug residual => _58;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _61;
            scope 16 {
            }
        }
    }
    scope 8 {
        debug residual => _46;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _49;
        scope 11 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Ne(move _7, const _);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb10;
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidSpotMarketAccount;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _278 = const _;
        _20 = &(*_278);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb135];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb135];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb136];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "Cannot add phoenix market to quote asset";
        _30 = &(*_31);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        _32 = _9;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _32);
        StorageDead(_32);
        StorageDead(_9);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_5);
        _33 = discriminant(_4);
        switchInt(move _33) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_37);
        _37 = ((_4 as Continue).0: ());
        _3 = _37;
        StorageDead(_37);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _279 = deref_copy (_1.1: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>);
        _43 = &((*_279).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _42 = &(*_43);
        _41 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _42) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb126;
    }

    bb16: {
        StorageDead(_42);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _40 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _41, move _44) -> [return: bb17, unwind: bb136];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_41);
        _39 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _40) -> [return: bb18, unwind: bb136];
    }

    bb18: {
        StorageDead(_40);
        _45 = discriminant(_39);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_39 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _38 = move _49;
        StorageDead(_49);
        _287 = discriminant(_39);
        StorageDead(_43);
        StorageDead(_39);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _280 = deref_copy (_1.1: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>);
        _55 = &((*_280).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _54 = &(*_55);
        _53 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _54) -> [return: bb22, unwind: bb134];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb139];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _285 = discriminant(_39);
        StorageDead(_43);
        StorageDead(_39);
        goto -> bb125;
    }

    bb22: {
        StorageDead(_54);
        StorageLive(_56);
        _56 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _52 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _53, move _56) -> [return: bb23, unwind: bb134];
    }

    bb23: {
        StorageDead(_56);
        StorageDead(_53);
        _51 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb24, unwind: bb134];
    }

    bb24: {
        StorageDead(_52);
        _57 = discriminant(_51);
        switchInt(move _57) -> [0: bb25, 1: bb26, otherwise: bb13];
    }

    bb25: {
        StorageLive(_61);
        _61 = move ((_51 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _50 = move _61;
        StorageDead(_61);
        _291 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_62);
        _62 = phoenix::id() -> [return: bb28, unwind: bb133];
    }

    bb26: {
        StorageLive(_58);
        _58 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb27, unwind: bb138];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_58);
        _289 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        goto -> bb124;
    }

    bb28: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _281 = deref_copy (_1.1: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>);
        _69 = &((*_281).3: anchor_lang::prelude::AccountInfo<'_>);
        _68 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _69) -> [return: bb29, unwind: bb133];
    }

    bb29: {
        _67 = &_68;
        StorageDead(_69);
        StorageLive(_70);
        _70 = &_62;
        _66 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _67, move _70) -> [return: bb30, unwind: bb133];
    }

    bb30: {
        switchInt(move _66) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_71);
        _71 = ();
        _65 = std::result::Result::<(), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb39;
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_72);
        _72 = error::ErrorCode::InvalidPhoenixProgram;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _277 = const _;
        _83 = &(*_277);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_72;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _90) -> [return: bb33, unwind: bb133];
    }

    bb33: {
        StorageDead(_90);
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb34, unwind: bb133];
    }

    bb34: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb35, unwind: bb133];
    }

    bb35: {
        StorageDead(_80);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb36, unwind: bb132];
    }

    bb36: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb37, unwind: bb132];
    }

    bb37: {
        StorageDead(_74);
        drop(_78) -> [return: bb38, unwind: bb133];
    }

    bb38: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_92);
        _92 = _72;
        _65 = std::result::Result::<(), error::ErrorCode>::Err(move _92);
        StorageDead(_92);
        StorageDead(_72);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_66);
        _64 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _65) -> [return: bb40, unwind: bb133];
    }

    bb40: {
        StorageDead(_65);
        _93 = discriminant(_64);
        switchInt(move _93) -> [0: bb41, 1: bb42, otherwise: bb13];
    }

    bb41: {
        StorageLive(_97);
        _97 = ((_64 as Continue).0: ());
        _63 = _97;
        StorageDead(_97);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _282 = deref_copy (_1.1: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>);
        _102 = &((*_282).4: anchor_lang::prelude::AccountInfo<'_>);
        _101 = &(*_102);
        _100 = PhoenixMarketContext::<'_, '_>::new(move _101) -> [return: bb44, unwind: bb133];
    }

    bb42: {
        StorageLive(_94);
        _94 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb43, unwind: bb133];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb123;
    }

    bb44: {
        StorageDead(_101);
        _99 = <std::result::Result<PhoenixMarketContext<'_, '_>, error::ErrorCode> as Try>::branch(move _100) -> [return: bb45, unwind: bb133];
    }

    bb45: {
        StorageDead(_100);
        _103 = discriminant(_99);
        switchInt(move _103) -> [0: bb46, 1: bb47, otherwise: bb13];
    }

    bb46: {
        StorageLive(_107);
        _107 = move ((_99 as Continue).0: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _98 = move _107;
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_99);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(((_98.1: phoenix::program::MarketHeader).3: phoenix::program::TokenParams).2: anchor_lang::prelude::Pubkey);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_38;
        _114 = <Ref<'_, SpotMarket> as Deref>::deref(move _115) -> [return: bb49, unwind: bb133];
    }

    bb47: {
        StorageLive(_104);
        _104 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_106);
        _106 = _104;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _106) -> [return: bb48, unwind: bb133];
    }

    bb48: {
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_99);
        goto -> bb122;
    }

    bb49: {
        StorageDead(_115);
        _113 = &((*_114).2: anchor_lang::prelude::Pubkey);
        _111 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _112, move _113) -> [return: bb50, unwind: bb133];
    }

    bb50: {
        switchInt(move _111) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_116);
        _116 = ();
        _110 = std::result::Result::<(), error::ErrorCode>::Ok(move _116);
        StorageDead(_116);
        goto -> bb60;
    }

    bb52: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_117);
        _117 = error::ErrorCode::InvalidPhoenixMarket;
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _276 = const _;
        _128 = &(*_276);
        _127 = &(*_128);
        _126 = move _127 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_117;
        _135 = &(*_136);
        _134 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _135) -> [return: bb53, unwind: bb133];
    }

    bb53: {
        StorageDead(_135);
        _133 = [move _134];
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = move _131 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_131);
        _125 = Arguments::<'_>::new_v1(move _126, move _130) -> [return: bb54, unwind: bb133];
    }

    bb54: {
        StorageDead(_130);
        StorageDead(_126);
        _124 = format(move _125) -> [return: bb55, unwind: bb133];
    }

    bb55: {
        StorageDead(_125);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        _123 = move _124;
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = <String as Deref>::deref(move _121) -> [return: bb56, unwind: bb131];
    }

    bb56: {
        _119 = &(*_120);
        StorageDead(_121);
        _118 = solana_program::log::sol_log(move _119) -> [return: bb57, unwind: bb131];
    }

    bb57: {
        StorageDead(_119);
        drop(_123) -> [return: bb58, unwind: bb133];
    }

    bb58: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = const "Invalid base mint";
        _138 = &(*_139);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb59, unwind: bb133];
    }

    bb59: {
        StorageDead(_138);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_140);
        _140 = _117;
        _110 = std::result::Result::<(), error::ErrorCode>::Err(move _140);
        StorageDead(_140);
        StorageDead(_117);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_111);
        _109 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _110) -> [return: bb61, unwind: bb133];
    }

    bb61: {
        StorageDead(_110);
        _141 = discriminant(_109);
        switchInt(move _141) -> [0: bb62, 1: bb63, otherwise: bb13];
    }

    bb62: {
        StorageLive(_145);
        _145 = ((_109 as Continue).0: ());
        _108 = _145;
        StorageDead(_145);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(((_98.1: phoenix::program::MarketHeader).5: phoenix::program::TokenParams).2: anchor_lang::prelude::Pubkey);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_50;
        _152 = <Ref<'_, SpotMarket> as Deref>::deref(move _153) -> [return: bb65, unwind: bb133];
    }

    bb63: {
        StorageLive(_142);
        _142 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb64, unwind: bb133];
    }

    bb64: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb122;
    }

    bb65: {
        StorageDead(_153);
        _151 = &((*_152).2: anchor_lang::prelude::Pubkey);
        _149 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _150, move _151) -> [return: bb66, unwind: bb133];
    }

    bb66: {
        switchInt(move _149) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_154);
        _154 = ();
        _148 = std::result::Result::<(), error::ErrorCode>::Ok(move _154);
        StorageDead(_154);
        goto -> bb76;
    }

    bb68: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_155);
        _155 = error::ErrorCode::InvalidPhoenixMarket;
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _275 = const _;
        _166 = &(*_275);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_155;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _173) -> [return: bb69, unwind: bb133];
    }

    bb69: {
        StorageDead(_173);
        _171 = [move _172];
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb70, unwind: bb133];
    }

    bb70: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb71, unwind: bb133];
    }

    bb71: {
        StorageDead(_163);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb72, unwind: bb130];
    }

    bb72: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb73, unwind: bb130];
    }

    bb73: {
        StorageDead(_157);
        drop(_161) -> [return: bb74, unwind: bb133];
    }

    bb74: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = const "Invalid quote mint";
        _176 = &(*_177);
        _175 = solana_program::log::sol_log(move _176) -> [return: bb75, unwind: bb133];
    }

    bb75: {
        StorageDead(_176);
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_178);
        _178 = _155;
        _148 = std::result::Result::<(), error::ErrorCode>::Err(move _178);
        StorageDead(_178);
        StorageDead(_155);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_149);
        _147 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _148) -> [return: bb77, unwind: bb133];
    }

    bb77: {
        StorageDead(_148);
        _179 = discriminant(_147);
        switchInt(move _179) -> [0: bb78, 1: bb79, otherwise: bb13];
    }

    bb78: {
        StorageLive(_183);
        _183 = ((_147 as Continue).0: ());
        _146 = _183;
        StorageDead(_183);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &(_98.1: phoenix::program::MarketHeader);
        _186 = MarketHeader::get_base_lot_size(move _187) -> [return: bb81, unwind: bb133];
    }

    bb79: {
        StorageLive(_180);
        _180 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_182);
        _182 = _180;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _182) -> [return: bb80, unwind: bb133];
    }

    bb80: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb122;
    }

    bb81: {
        _185 = &_186;
        StorageDead(_187);
        _184 = <BaseAtomsPerBaseLot as phoenix::quantities::WrapperU64>::as_u64(move _185) -> [return: bb82, unwind: bb133];
    }

    bb82: {
        StorageDead(_185);
        StorageDead(_186);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &_38;
        _191 = <Ref<'_, SpotMarket> as Deref>::deref(move _192) -> [return: bb83, unwind: bb133];
    }

    bb83: {
        StorageDead(_192);
        _190 = ((*_191).25: u64);
        StorageLive(_193);
        _193 = _184;
        _189 = Ge(move _190, move _193);
        switchInt(move _189) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &_38;
        _196 = <Ref<'_, SpotMarket> as Deref>::deref(move _197) -> [return: bb86, unwind: bb133];
    }

    bb85: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_190);
        _188 = const false;
        goto -> bb88;
    }

    bb86: {
        StorageDead(_197);
        _195 = ((*_196).25: u64);
        StorageLive(_198);
        _198 = _184;
        _194 = core::num::<impl u64>::rem_euclid(move _195, move _198) -> [return: bb87, unwind: bb133];
    }

    bb87: {
        StorageDead(_198);
        StorageDead(_195);
        _188 = Eq(move _194, const 0_u64);
        StorageDead(_196);
        StorageDead(_194);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_189);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _188;
        switchInt(move _202) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        StorageLive(_203);
        _203 = ();
        _201 = std::result::Result::<(), error::ErrorCode>::Ok(move _203);
        StorageDead(_203);
        goto -> bb105;
    }

    bb90: {
        StorageLive(_204);
        _204 = error::ErrorCode::InvalidPhoenixMarket;
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _274 = const _;
        _215 = &(*_274);
        _214 = &(*_215);
        _213 = move _214 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_214);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_204;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _222) -> [return: bb91, unwind: bb133];
    }

    bb91: {
        StorageDead(_222);
        _220 = [move _221];
        StorageDead(_221);
        _219 = &_220;
        _218 = &(*_219);
        _217 = move _218 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_218);
        _212 = Arguments::<'_>::new_v1(move _213, move _217) -> [return: bb92, unwind: bb133];
    }

    bb92: {
        StorageDead(_217);
        StorageDead(_213);
        _211 = format(move _212) -> [return: bb93, unwind: bb133];
    }

    bb93: {
        StorageDead(_212);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        _210 = move _211;
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = <String as Deref>::deref(move _208) -> [return: bb94, unwind: bb129];
    }

    bb94: {
        _206 = &(*_207);
        StorageDead(_208);
        _205 = solana_program::log::sol_log(move _206) -> [return: bb95, unwind: bb129];
    }

    bb95: {
        StorageDead(_206);
        drop(_210) -> [return: bb96, unwind: bb133];
    }

    bb96: {
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_205);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _273 = const _;
        _234 = &(*_273);
        _233 = &(*_234);
        _232 = move _233 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_38;
        _243 = <Ref<'_, SpotMarket> as Deref>::deref(move _244) -> [return: bb97, unwind: bb133];
    }

    bb97: {
        StorageDead(_244);
        _242 = &((*_243).25: u64);
        _241 = &(*_242);
        _240 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _241) -> [return: bb98, unwind: bb133];
    }

    bb98: {
        StorageDead(_241);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_184;
        _246 = &(*_247);
        _245 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _246) -> [return: bb99, unwind: bb133];
    }

    bb99: {
        StorageDead(_246);
        _239 = [move _240, move _245];
        StorageDead(_245);
        StorageDead(_240);
        _238 = &_239;
        _237 = &(*_238);
        _236 = move _237 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_237);
        _231 = Arguments::<'_>::new_v1(move _232, move _236) -> [return: bb100, unwind: bb133];
    }

    bb100: {
        StorageDead(_236);
        StorageDead(_232);
        _230 = format(move _231) -> [return: bb101, unwind: bb133];
    }

    bb101: {
        StorageDead(_231);
        StorageDead(_247);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_234);
        _229 = move _230;
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = <String as Deref>::deref(move _227) -> [return: bb102, unwind: bb128];
    }

    bb102: {
        _225 = &(*_226);
        StorageDead(_227);
        _224 = solana_program::log::sol_log(move _225) -> [return: bb103, unwind: bb128];
    }

    bb103: {
        StorageDead(_225);
        drop(_229) -> [return: bb104, unwind: bb133];
    }

    bb104: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_248);
        _248 = _204;
        _201 = std::result::Result::<(), error::ErrorCode>::Err(move _248);
        StorageDead(_248);
        StorageDead(_204);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_202);
        _200 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _201) -> [return: bb106, unwind: bb133];
    }

    bb106: {
        StorageDead(_201);
        _249 = discriminant(_200);
        switchInt(move _249) -> [0: bb107, 1: bb108, otherwise: bb13];
    }

    bb107: {
        StorageLive(_253);
        _253 = ((_200 as Continue).0: ());
        _199 = _253;
        StorageDead(_253);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_254);
        StorageLive(_255);
        _283 = deref_copy (_1.1: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>);
        _255 = &((*_283).6: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _254 = <anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig> as anchor_lang::Key>::key(move _255) -> [return: bb110, unwind: bb133];
    }

    bb108: {
        StorageLive(_250);
        _250 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb109, unwind: bb133];
    }

    bb109: {
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb121;
    }

    bb110: {
        StorageDead(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _284 = deref_copy (_1.1: &mut instructions::admin::InitializePhoenixFulfillmentConfig<'_>);
        _259 = &((*_284).6: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _258 = anchor_lang::prelude::AccountLoader::<'_, PhoenixV1FulfillmentConfig>::load_init(move _259) -> [return: bb111, unwind: bb133];
    }

    bb111: {
        StorageDead(_259);
        _257 = <std::result::Result<RefMut<'_, PhoenixV1FulfillmentConfig>, anchor_lang::error::Error> as Try>::branch(move _258) -> [return: bb112, unwind: bb133];
    }

    bb112: {
        StorageDead(_258);
        _260 = discriminant(_257);
        switchInt(move _260) -> [0: bb113, 1: bb114, otherwise: bb13];
    }

    bb113: {
        StorageLive(_264);
        _264 = move ((_257 as Continue).0: std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _256 = move _264;
        StorageDead(_264);
        _293 = discriminant(_257);
        StorageDead(_257);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &_98;
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_254;
        _267 = &(*_268);
        StorageLive(_269);
        _269 = _2;
        _265 = PhoenixMarketContext::<'_, '_>::to_phoenix_v1_fulfillment_config(move _266, move _267, move _269) -> [return: bb116, unwind: bb127];
    }

    bb114: {
        StorageLive(_261);
        _261 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_263);
        _263 = move _261;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _263) -> [return: bb115, unwind: bb137];
    }

    bb115: {
        StorageDead(_263);
        StorageDead(_261);
        _295 = discriminant(_257);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        goto -> bb121;
    }

    bb116: {
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &mut _256;
        _270 = <RefMut<'_, PhoenixV1FulfillmentConfig> as DerefMut>::deref_mut(move _271) -> [return: bb117, unwind: bb127];
    }

    bb117: {
        StorageDead(_271);
        (*_270) = move _265;
        StorageDead(_265);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_272);
        _272 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _272);
        StorageDead(_272);
        drop(_256) -> [return: bb118, unwind: bb133];
    }

    bb118: {
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_188);
        StorageDead(_184);
        StorageDead(_98);
        StorageDead(_62);
        drop(_50) -> [return: bb119, unwind: bb134];
    }

    bb119: {
        StorageDead(_50);
        drop(_38) -> [return: bb120, unwind: bb136];
    }

    bb120: {
        StorageDead(_38);
        goto -> bb126;
    }

    bb121: {
        StorageDead(_188);
        StorageDead(_184);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_98);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_62);
        drop(_50) -> [return: bb124, unwind: bb134];
    }

    bb124: {
        StorageDead(_50);
        drop(_38) -> [return: bb125, unwind: bb136];
    }

    bb125: {
        StorageDead(_38);
        goto -> bb126;
    }

    bb126: {
        return;
    }

    bb127 (cleanup): {
        drop(_256) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_229) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_210) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_161) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_123) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_78) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_50) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_38) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_15) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        resume;
    }

    bb137 (cleanup): {
        _297 = discriminant(_257);
        goto -> bb133;
    }

    bb138 (cleanup): {
        _298 = discriminant(_51);
        goto -> bb134;
    }

    bb139 (cleanup): {
        _299 = discriminant(_39);
        goto -> bb136;
    }
}
