// MIR for `oracle_validity` before PreCodegen

fn oracle_validity(_1: state::user::MarketType, _2: u16, _3: i64, _4: &OraclePriceData, _5: &ValidityGuardRails, _6: u64, _7: &state::oracle::OracleSource, _8: LogMode, _9: i8) -> std::result::Result<OracleValidity, error::ErrorCode> {
    debug market_type => _1;
    debug market_index => _2;
    debug last_oracle_twap => _3;
    debug oracle_price_data => _4;
    debug valid_oracle_guard_rails => _5;
    debug max_confidence_interval_multiplier => _6;
    debug oracle_source => _7;
    debug log_mode => _8;
    debug slots_before_stale_for_amm_override => _9;
    let mut _0: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let _10: i64;
    let _11: u64;
    let _12: i64;
    let _13: bool;
    let mut _15: i64;
    let mut _17: &i64;
    let _18: i64;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _20: std::result::Result<i64, error::ErrorCode>;
    let mut _21: i64;
    let mut _22: i64;
    let mut _23: i64;
    let mut _24: i64;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: &i64;
    let _34: &i64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _37: std::result::Result<u64, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _40: std::result::Result<u64, error::ErrorCode>;
    let mut _41: u64;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: i64;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: &u64;
    let mut _63: &u64;
    let _64: &u64;
    let _65: u64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _67: std::result::Result<u64, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: bool;
    let mut _77: i8;
    let mut _78: &i64;
    let mut _79: &i64;
    let _80: &i64;
    let _81: i64;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _83: std::result::Result<i64, error::ErrorCode>;
    let mut _84: i8;
    let mut _85: i8;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: &i64;
    let mut _92: &i64;
    let _93: &i64;
    let mut _95: bool;
    let mut _96: isize;
    let mut _97: &i64;
    let mut _98: &i64;
    let _99: &i64;
    let _100: i64;
    let mut _101: i64;
    let mut _102: &i64;
    let mut _103: &i64;
    let _104: &i64;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let _112: ();
    let mut _113: bool;
    let mut _114: &math::oracle::LogMode;
    let mut _115: &math::oracle::LogMode;
    let _116: math::oracle::LogMode;
    let mut _118: bool;
    let mut _119: &math::oracle::LogMode;
    let mut _120: &math::oracle::LogMode;
    let _121: math::oracle::LogMode;
    let _122: &str;
    let mut _123: bool;
    let mut _124: &math::oracle::LogMode;
    let mut _125: &math::oracle::LogMode;
    let _126: math::oracle::LogMode;
    let _127: &str;
    let _128: ();
    let mut _129: bool;
    let _130: ();
    let mut _131: &str;
    let _132: &str;
    let mut _133: &std::string::String;
    let _134: &std::string::String;
    let _135: std::string::String;
    let mut _137: std::fmt::Arguments<'_>;
    let mut _138: &[&str];
    let mut _139: &[&str; 4];
    let _140: &[&str; 4];
    let _141: [&str; 4];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let mut _143: &[core::fmt::rt::Argument<'_>; 3];
    let _144: &[core::fmt::rt::Argument<'_>; 3];
    let _145: [core::fmt::rt::Argument<'_>; 3];
    let mut _146: core::fmt::rt::Argument<'_>;
    let mut _147: &state::user::MarketType;
    let _148: &state::user::MarketType;
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &u16;
    let _151: &u16;
    let mut _152: core::fmt::rt::Argument<'_>;
    let mut _153: &&str;
    let _154: &&str;
    let _155: ();
    let mut _156: bool;
    let _157: ();
    let mut _158: &str;
    let _159: &str;
    let mut _160: &std::string::String;
    let _161: &std::string::String;
    let _162: std::string::String;
    let mut _164: std::fmt::Arguments<'_>;
    let mut _165: &[&str];
    let mut _166: &[&str; 4];
    let _167: &[&str; 4];
    let _168: [&str; 4];
    let mut _169: &[core::fmt::rt::Argument<'_>];
    let mut _170: &[core::fmt::rt::Argument<'_>; 3];
    let _171: &[core::fmt::rt::Argument<'_>; 3];
    let _172: [core::fmt::rt::Argument<'_>; 3];
    let mut _173: core::fmt::rt::Argument<'_>;
    let mut _174: &state::user::MarketType;
    let _175: &state::user::MarketType;
    let mut _176: core::fmt::rt::Argument<'_>;
    let mut _177: &u16;
    let _178: &u16;
    let mut _179: core::fmt::rt::Argument<'_>;
    let mut _180: &&str;
    let _181: &&str;
    let _182: ();
    let mut _183: bool;
    let _184: ();
    let mut _185: &str;
    let _186: &str;
    let mut _187: &std::string::String;
    let _188: &std::string::String;
    let _189: std::string::String;
    let mut _191: std::fmt::Arguments<'_>;
    let mut _192: &[&str];
    let mut _193: &[&str; 6];
    let _194: &[&str; 6];
    let _195: [&str; 6];
    let mut _196: &[core::fmt::rt::Argument<'_>];
    let mut _197: &[core::fmt::rt::Argument<'_>; 5];
    let _198: &[core::fmt::rt::Argument<'_>; 5];
    let _199: [core::fmt::rt::Argument<'_>; 5];
    let mut _200: core::fmt::rt::Argument<'_>;
    let mut _201: &state::user::MarketType;
    let _202: &state::user::MarketType;
    let mut _203: core::fmt::rt::Argument<'_>;
    let mut _204: &u16;
    let _205: &u16;
    let mut _206: core::fmt::rt::Argument<'_>;
    let mut _207: &&str;
    let _208: &&str;
    let mut _209: core::fmt::rt::Argument<'_>;
    let mut _210: &i64;
    let _211: &i64;
    let mut _212: core::fmt::rt::Argument<'_>;
    let mut _213: &i64;
    let _214: &i64;
    let _215: ();
    let mut _216: bool;
    let _217: ();
    let mut _218: &str;
    let _219: &str;
    let mut _220: &std::string::String;
    let _221: &std::string::String;
    let _222: std::string::String;
    let mut _224: std::fmt::Arguments<'_>;
    let mut _225: &[&str];
    let mut _226: &[&str; 5];
    let _227: &[&str; 5];
    let _228: [&str; 5];
    let mut _229: &[core::fmt::rt::Argument<'_>];
    let mut _230: &[core::fmt::rt::Argument<'_>; 4];
    let _231: &[core::fmt::rt::Argument<'_>; 4];
    let _232: [core::fmt::rt::Argument<'_>; 4];
    let mut _233: core::fmt::rt::Argument<'_>;
    let mut _234: &state::user::MarketType;
    let _235: &state::user::MarketType;
    let mut _236: core::fmt::rt::Argument<'_>;
    let mut _237: &u16;
    let _238: &u16;
    let mut _239: core::fmt::rt::Argument<'_>;
    let mut _240: &&str;
    let _241: &&str;
    let mut _242: core::fmt::rt::Argument<'_>;
    let mut _243: &u64;
    let _244: &u64;
    let mut _245: bool;
    let mut _246: bool;
    let _247: ();
    let mut _248: &str;
    let _249: &str;
    let mut _250: &std::string::String;
    let _251: &std::string::String;
    let _252: std::string::String;
    let mut _254: std::fmt::Arguments<'_>;
    let mut _255: &[&str];
    let mut _256: &[&str; 5];
    let _257: &[&str; 5];
    let _258: [&str; 5];
    let mut _259: &[core::fmt::rt::Argument<'_>];
    let mut _260: &[core::fmt::rt::Argument<'_>; 4];
    let _261: &[core::fmt::rt::Argument<'_>; 4];
    let _262: [core::fmt::rt::Argument<'_>; 4];
    let mut _263: core::fmt::rt::Argument<'_>;
    let mut _264: &state::user::MarketType;
    let _265: &state::user::MarketType;
    let mut _266: core::fmt::rt::Argument<'_>;
    let mut _267: &u16;
    let _268: &u16;
    let mut _269: core::fmt::rt::Argument<'_>;
    let mut _270: &&str;
    let _271: &&str;
    let mut _272: core::fmt::rt::Argument<'_>;
    let mut _273: &i64;
    let _274: &i64;
    let mut _275: math::oracle::OracleValidity;
    scope 1 {
        debug oracle_price => _10;
        debug oracle_conf => _11;
        debug oracle_delay => _12;
        debug has_sufficient_number_of_data_points => _13;
        let _14: bool;
        scope 2 {
            debug is_oracle_price_nonpositive => _14;
            let _16: bool;
            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _32: i64;
            scope 3 {
                debug is_oracle_price_too_volatile => _16;
                let _35: u64;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: u64;
                let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _55: u64;
                let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _60: u64;
                scope 8 {
                    debug conf_pct_of_price => _35;
                    let _61: bool;
                    let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _74: u64;
                    scope 21 {
                        debug is_conf_too_large => _61;
                        let _75: bool;
                        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _90: i64;
                        scope 26 {
                            debug is_stale_for_amm => _75;
                            let _94: bool;
                            scope 31 {
                                debug is_stale_for_margin => _94;
                                let _105: math::oracle::OracleValidity;
                                scope 32 {
                                    debug oracle_validity => _105;
                                    let _117: &str;
                                    let mut _281: &math::oracle::LogMode;
                                    let mut _282: &math::oracle::LogMode;
                                    let mut _283: &math::oracle::LogMode;
                                    scope 33 {
                                        debug oracle_type => _117;
                                        let _136: std::string::String;
                                        let _163: std::string::String;
                                        let _190: std::string::String;
                                        let _223: std::string::String;
                                        let _253: std::string::String;
                                        let mut _276: &[&str; 5];
                                        let mut _277: &[&str; 5];
                                        let mut _278: &[&str; 6];
                                        let mut _279: &[&str; 4];
                                        let mut _280: &[&str; 4];
                                        scope 34 {
                                            debug res => _136;
                                        }
                                        scope 35 {
                                            debug res => _163;
                                        }
                                        scope 36 {
                                            debug res => _190;
                                        }
                                        scope 37 {
                                            debug res => _223;
                                        }
                                        scope 38 {
                                            debug res => _253;
                                        }
                                    }
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _87;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _90;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _71;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _74;
                        scope 25 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _43;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _46;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug residual => _52;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _55;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug residual => _57;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _60;
                    scope 20 {
                    }
                }
            }
            scope 4 {
                debug residual => _29;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _32;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_10);
        _10 = ((*_4).0: i64);
        StorageLive(_11);
        _11 = ((*_4).1: u64);
        StorageLive(_12);
        _12 = ((*_4).2: i64);
        StorageLive(_13);
        _13 = ((*_4).3: bool);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _10;
        _14 = Le(move _15, const 0_i64);
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _10;
        StorageLive(_23);
        _23 = _3;
        _21 = <i64 as Ord>::max(move _22, move _23) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _3;
        StorageLive(_27);
        _27 = _10;
        _25 = <i64 as Ord>::min(move _26, move _27) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <i64 as Ord>::max(move _25, const 1_i64) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_25);
        _20 = <i64 as SafeMath>::safe_div(move _21, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        StorageDead(_21);
        _19 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_20);
        _28 = discriminant(_19);
        switchInt(move _28) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_32);
        _32 = ((_19 as Continue).0: i64);
        _18 = _32;
        StorageDead(_32);
        _17 = &_18;
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_5).3: i64);
        _33 = &(*_34);
        _16 = <i64 as PartialOrd>::gt(move _17, move _33) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_29);
        _29 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<OracleValidity, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_17);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb146;
    }

    bb10: {
        StorageDead(_33);
        StorageDead(_17);
        StorageDead(_34);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _11;
        _40 = <u64 as SafeMath>::safe_mul(move _41, const _) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_41);
        _39 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _40) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_40);
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_46);
        _46 = ((_39 as Continue).0: u64);
        _38 = _46;
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _10;
        _49 = <i64 as Cast>::cast::<u64>(move _50) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_43);
        _43 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<OracleValidity, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb144;
    }

    bb16: {
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb18, 1: bb19, otherwise: bb7];
    }

    bb18: {
        StorageLive(_55);
        _55 = ((_48 as Continue).0: u64);
        _47 = _55;
        StorageDead(_55);
        _37 = <u64 as SafeMath>::safe_div(move _38, move _47) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<OracleValidity, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_47);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb143;
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_38);
        _36 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_37);
        _56 = discriminant(_36);
        switchInt(move _56) -> [0: bb23, 1: bb24, otherwise: bb7];
    }

    bb23: {
        StorageLive(_60);
        _60 = ((_36 as Continue).0: u64);
        _35 = _60;
        StorageDead(_60);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_36);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_35;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = ((*_5).2: u64);
        StorageLive(_69);
        _69 = _6;
        _67 = <u64 as SafeMath>::safe_mul(move _68, move _69) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<OracleValidity, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb143;
    }

    bb26: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_67);
        _70 = discriminant(_66);
        switchInt(move _70) -> [0: bb28, 1: bb29, otherwise: bb7];
    }

    bb28: {
        StorageLive(_74);
        _74 = ((_66 as Continue).0: u64);
        _65 = _74;
        StorageDead(_74);
        _64 = &_65;
        _63 = &(*_64);
        _61 = <u64 as PartialOrd>::gt(move _62, move _63) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_71);
        _71 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<OracleValidity, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb142;
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _9;
        _76 = Ne(move _77, const 0_i8);
        switchInt(move _76) -> [0: bb40, otherwise: bb32];
    }

    bb32: {
        StorageDead(_77);
        StorageLive(_78);
        _78 = &_12;
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _9;
        _84 = <i8 as Ord>::max(move _85, const 0_i8) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_85);
        _83 = <i8 as Cast>::cast::<i64>(move _84) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_84);
        _82 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _83) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_83);
        _86 = discriminant(_82);
        switchInt(move _86) -> [0: bb36, 1: bb37, otherwise: bb7];
    }

    bb36: {
        StorageLive(_90);
        _90 = ((_82 as Continue).0: i64);
        _81 = _90;
        StorageDead(_90);
        _80 = &_81;
        _79 = &(*_80);
        _75 = <i64 as PartialOrd>::gt(move _78, move _79) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_87);
        _87 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<OracleValidity, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb142;
    }

    bb39: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb42;
    }

    bb40: {
        StorageDead(_77);
        StorageLive(_91);
        _91 = &_12;
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_5).0: i64);
        _92 = &(*_93);
        _75 = <i64 as PartialOrd>::gt(move _91, move _92) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_93);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_76);
        StorageLive(_94);
        StorageLive(_95);
        _96 = discriminant((*_7));
        switchInt(move _96) -> [5: bb44, 10: bb44, otherwise: bb43];
    }

    bb43: {
        _95 = const false;
        goto -> bb45;
    }

    bb44: {
        _95 = const true;
        goto -> bb45;
    }

    bb45: {
        switchInt(move _95) -> [0: bb49, otherwise: bb46];
    }

    bb46: {
        StorageLive(_97);
        _97 = &_12;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = ((*_5).1: i64);
        _100 = core::num::<impl i64>::saturating_mul(move _101, const 3_i64) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _94 = <i64 as PartialOrd>::gt(move _97, move _98) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb51;
    }

    bb49: {
        StorageLive(_102);
        _102 = &_12;
        StorageLive(_103);
        StorageLive(_104);
        _104 = &((*_5).1: i64);
        _103 = &(*_104);
        _94 = <i64 as PartialOrd>::gt(move _102, move _103) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_104);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_95);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _14;
        switchInt(move _106) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _105 = OracleValidity::NonPositive;
        goto -> bb69;
    }

    bb53: {
        StorageLive(_107);
        _107 = _16;
        switchInt(move _107) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _105 = OracleValidity::TooVolatile;
        goto -> bb68;
    }

    bb55: {
        StorageLive(_108);
        _108 = _61;
        switchInt(move _108) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _105 = OracleValidity::TooUncertain;
        goto -> bb67;
    }

    bb57: {
        StorageLive(_109);
        _109 = _94;
        switchInt(move _109) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _105 = OracleValidity::StaleForMargin;
        goto -> bb66;
    }

    bb59: {
        StorageLive(_110);
        _110 = _13;
        switchInt(move _110) -> [0: bb60, otherwise: bb61];
    }

    bb60: {
        _105 = OracleValidity::InsufficientDataPoints;
        goto -> bb65;
    }

    bb61: {
        StorageLive(_111);
        _111 = _75;
        switchInt(move _111) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _105 = OracleValidity::StaleForAMM;
        goto -> bb64;
    }

    bb63: {
        _105 = OracleValidity::Valid;
        goto -> bb64;
    }

    bb64: {
        StorageDead(_111);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_110);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_109);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_108);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_107);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_106);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_8;
        StorageLive(_115);
        _283 = const _;
        _115 = &(*_283);
        _113 = <LogMode as PartialEq>::ne(move _114, move _115) -> [return: bb70, unwind continue];
    }

    bb70: {
        switchInt(move _113) -> [0: bb140, otherwise: bb71];
    }

    bb71: {
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_8;
        StorageLive(_120);
        _282 = const _;
        _120 = &(*_282);
        _118 = <LogMode as PartialEq>::eq(move _119, move _120) -> [return: bb72, unwind continue];
    }

    bb72: {
        switchInt(move _118) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        StorageDead(_120);
        StorageDead(_119);
        _117 = const "Exchange";
        goto -> bb79;
    }

    bb74: {
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_8;
        StorageLive(_125);
        _281 = const _;
        _125 = &(*_281);
        _123 = <LogMode as PartialEq>::eq(move _124, move _125) -> [return: bb75, unwind continue];
    }

    bb75: {
        switchInt(move _123) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = const "SafeMM";
        goto -> bb78;
    }

    bb77: {
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_127);
        _127 = const "MM";
        _122 = &(*_127);
        StorageDead(_127);
        goto -> bb78;
    }

    bb78: {
        _117 = &(*_122);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_118);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _13;
        switchInt(move _129) -> [0: bb80, otherwise: bb89];
    }

    bb80: {
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _280 = const _;
        _140 = &(*_280);
        _139 = &(*_140);
        _138 = move _139 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_1;
        _147 = &(*_148);
        _146 = core::fmt::rt::Argument::<'_>::new_display::<state::user::MarketType>(move _147) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_2;
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _150) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_150);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &_117;
        _153 = &(*_154);
        _152 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _153) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_153);
        _145 = [move _146, move _149, move _152];
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = move _143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_143);
        _137 = Arguments::<'_>::new_v1(move _138, move _142) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_142);
        StorageDead(_138);
        _136 = format(move _137) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_137);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_140);
        _135 = move _136;
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <String as Deref>::deref(move _133) -> [return: bb86, unwind: bb152];
    }

    bb86: {
        _131 = &(*_132);
        StorageDead(_133);
        _130 = solana_program::log::sol_log(move _131) -> [return: bb87, unwind: bb152];
    }

    bb87: {
        StorageDead(_131);
        drop(_135) -> [return: bb88, unwind: bb153];
    }

    bb88: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_130);
        _128 = const ();
        goto -> bb90;
    }

    bb89: {
        _128 = const ();
        goto -> bb90;
    }

    bb90: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _14;
        switchInt(move _156) -> [0: bb100, otherwise: bb91];
    }

    bb91: {
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _279 = const _;
        _167 = &(*_279);
        _166 = &(*_167);
        _165 = move _166 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_166);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &_1;
        _174 = &(*_175);
        _173 = core::fmt::rt::Argument::<'_>::new_display::<state::user::MarketType>(move _174) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_174);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_2;
        _177 = &(*_178);
        _176 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _177) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_177);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &_117;
        _180 = &(*_181);
        _179 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _180) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_180);
        _172 = [move _173, move _176, move _179];
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        _171 = &_172;
        _170 = &(*_171);
        _169 = move _170 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_170);
        _164 = Arguments::<'_>::new_v1(move _165, move _169) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_169);
        StorageDead(_165);
        _163 = format(move _164) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_164);
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_167);
        _162 = move _163;
        StorageDead(_163);
        _161 = &_162;
        _160 = &(*_161);
        _159 = <String as Deref>::deref(move _160) -> [return: bb97, unwind: bb151];
    }

    bb97: {
        _158 = &(*_159);
        StorageDead(_160);
        _157 = solana_program::log::sol_log(move _158) -> [return: bb98, unwind: bb151];
    }

    bb98: {
        StorageDead(_158);
        drop(_162) -> [return: bb99, unwind: bb153];
    }

    bb99: {
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_157);
        _155 = const ();
        goto -> bb101;
    }

    bb100: {
        _155 = const ();
        goto -> bb101;
    }

    bb101: {
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _16;
        switchInt(move _183) -> [0: bb113, otherwise: bb102];
    }

    bb102: {
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _278 = const _;
        _194 = &(*_278);
        _193 = &(*_194);
        _192 = move _193 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_193);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_1;
        _201 = &(*_202);
        _200 = core::fmt::rt::Argument::<'_>::new_display::<state::user::MarketType>(move _201) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_201);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_2;
        _204 = &(*_205);
        _203 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _204) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_204);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &_117;
        _207 = &(*_208);
        _206 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _207) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_207);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_3;
        _210 = &(*_211);
        _209 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _210) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_210);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_10;
        _213 = &(*_214);
        _212 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _213) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_213);
        _199 = [move _200, move _203, move _206, move _209, move _212];
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        _198 = &_199;
        _197 = &(*_198);
        _196 = move _197 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_197);
        _191 = Arguments::<'_>::new_v1(move _192, move _196) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_196);
        StorageDead(_192);
        _190 = format(move _191) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_191);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_194);
        _189 = move _190;
        StorageDead(_190);
        _188 = &_189;
        _187 = &(*_188);
        _186 = <String as Deref>::deref(move _187) -> [return: bb110, unwind: bb150];
    }

    bb110: {
        _185 = &(*_186);
        StorageDead(_187);
        _184 = solana_program::log::sol_log(move _185) -> [return: bb111, unwind: bb150];
    }

    bb111: {
        StorageDead(_185);
        drop(_189) -> [return: bb112, unwind: bb153];
    }

    bb112: {
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        _182 = const ();
        goto -> bb114;
    }

    bb113: {
        _182 = const ();
        goto -> bb114;
    }

    bb114: {
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_215);
        StorageLive(_216);
        _216 = _61;
        switchInt(move _216) -> [0: bb125, otherwise: bb115];
    }

    bb115: {
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _277 = const _;
        _227 = &(*_277);
        _226 = &(*_227);
        _225 = move _226 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_1;
        _234 = &(*_235);
        _233 = core::fmt::rt::Argument::<'_>::new_display::<state::user::MarketType>(move _234) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_234);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_2;
        _237 = &(*_238);
        _236 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _237) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_237);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_117;
        _240 = &(*_241);
        _239 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _240) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_240);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_35;
        _243 = &(*_244);
        _242 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _243) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_243);
        _232 = [move _233, move _236, move _239, move _242];
        StorageDead(_242);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_233);
        _231 = &_232;
        _230 = &(*_231);
        _229 = move _230 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_230);
        _224 = Arguments::<'_>::new_v1(move _225, move _229) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_229);
        StorageDead(_225);
        _223 = format(move _224) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_224);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_227);
        _222 = move _223;
        StorageDead(_223);
        _221 = &_222;
        _220 = &(*_221);
        _219 = <String as Deref>::deref(move _220) -> [return: bb122, unwind: bb149];
    }

    bb122: {
        _218 = &(*_219);
        StorageDead(_220);
        _217 = solana_program::log::sol_log(move _218) -> [return: bb123, unwind: bb149];
    }

    bb123: {
        StorageDead(_218);
        drop(_222) -> [return: bb124, unwind: bb153];
    }

    bb124: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        _215 = const ();
        goto -> bb126;
    }

    bb125: {
        _215 = const ();
        goto -> bb126;
    }

    bb126: {
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_245);
        _245 = _75;
        switchInt(move _245) -> [0: bb127, otherwise: bb128];
    }

    bb127: {
        StorageLive(_246);
        _246 = _94;
        switchInt(move _246) -> [0: bb138, otherwise: bb128];
    }

    bb128: {
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _276 = const _;
        _257 = &(*_276);
        _256 = &(*_257);
        _255 = move _256 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_256);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &_1;
        _264 = &(*_265);
        _263 = core::fmt::rt::Argument::<'_>::new_display::<state::user::MarketType>(move _264) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_264);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_2;
        _267 = &(*_268);
        _266 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _267) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_267);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &_117;
        _270 = &(*_271);
        _269 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _270) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_270);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_12;
        _273 = &(*_274);
        _272 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _273) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_273);
        _262 = [move _263, move _266, move _269, move _272];
        StorageDead(_272);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_263);
        _261 = &_262;
        _260 = &(*_261);
        _259 = move _260 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_260);
        _254 = Arguments::<'_>::new_v1(move _255, move _259) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_259);
        StorageDead(_255);
        _253 = format(move _254) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_254);
        StorageDead(_274);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_257);
        _252 = move _253;
        StorageDead(_253);
        _251 = &_252;
        _250 = &(*_251);
        _249 = <String as Deref>::deref(move _250) -> [return: bb135, unwind: bb148];
    }

    bb135: {
        _248 = &(*_249);
        StorageDead(_250);
        _247 = solana_program::log::sol_log(move _248) -> [return: bb136, unwind: bb148];
    }

    bb136: {
        StorageDead(_248);
        drop(_252) -> [return: bb137, unwind: bb153];
    }

    bb137: {
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_247);
        _112 = const ();
        goto -> bb139;
    }

    bb138: {
        _112 = const ();
        goto -> bb139;
    }

    bb139: {
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_117);
        goto -> bb141;
    }

    bb140: {
        StorageDead(_115);
        StorageDead(_114);
        _112 = const ();
        goto -> bb141;
    }

    bb141: {
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_275);
        _275 = _105;
        _0 = std::result::Result::<OracleValidity, error::ErrorCode>::Ok(move _275);
        StorageDead(_275);
        StorageDead(_105);
        StorageDead(_94);
        StorageDead(_75);
        StorageDead(_61);
        StorageDead(_35);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb147;
    }

    bb142: {
        StorageDead(_61);
        goto -> bb145;
    }

    bb143: {
        StorageDead(_48);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_35);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb147;
    }

    bb147: {
        return;
    }

    bb148 (cleanup): {
        drop(_252) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_222) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_189) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_162) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_135) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        resume;
    }
}
