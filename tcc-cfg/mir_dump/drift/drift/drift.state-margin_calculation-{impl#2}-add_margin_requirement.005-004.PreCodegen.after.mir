// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::add_margin_requirement` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::add_margin_requirement(_1: &mut MarginCalculation, _2: u128, _3: u128, _4: MarketIdentifier) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug margin_requirement => _2;
    debug liability_value => _3;
    debug market_identifier => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u128;
    let _15: ();
    let mut _16: bool;
    let mut _17: u128;
    let mut _18: u128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _20: std::result::Result<u128, error::ErrorCode>;
    let mut _21: u128;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: u128;
    let mut _27: u128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: u128;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: u128;
    let mut _37: bool;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: u128;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: u128;
    let _48: ();
    let mut _49: std::option::Option<state::margin_calculation::MarketIdentifier>;
    let mut _50: &state::margin_calculation::MarginCalculation;
    let mut _51: isize;
    let mut _53: bool;
    let mut _54: &state::margin_calculation::MarketIdentifier;
    let mut _55: &state::margin_calculation::MarketIdentifier;
    let mut _56: u128;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _58: std::result::Result<u128, error::ErrorCode>;
    let mut _59: u128;
    let mut _60: u128;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: ();
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _33;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _36;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _39;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _42;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _44;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _47;
        scope 16 {
        }
    }
    scope 17 {
        debug market_to_track => _52;
        let _52: state::margin_calculation::MarketIdentifier;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: u128;
        scope 18 {
            debug residual => _62;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _65;
            scope 21 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).3: u128);
        StorageLive(_9);
        _9 = _2;
        _7 = <u128 as SafeMath>::safe_add(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: u128);
        _5 = _14;
        StorageDead(_14);
        ((*_1).3: u128) = move _5;
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (((*_1).0: state::margin_calculation::MarginContext).4: u128);
        _16 = Gt(move _17, const 0_u128);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_6);
        goto -> bb41;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).4: u128);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        StorageLive(_31);
        _31 = (((*_1).0: state::margin_calculation::MarginContext).4: u128);
        _29 = <u128 as SafeMath>::safe_mul(move _30, move _31) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _15 = const ();
        goto -> bb25;
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: u128);
        _27 = _36;
        StorageDead(_36);
        _37 = Eq(const _, const 0_u128);
        assert(!move _37, "attempt to divide `{}` by zero", _27) -> [success: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_33);
        _33 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb39;
    }

    bb14: {
        _26 = Div(move _27, const _);
        StorageDead(_27);
        _24 = <u128 as SafeMath>::safe_add(move _25, move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_24);
        _38 = discriminant(_23);
        switchInt(move _38) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_42);
        _42 = ((_23 as Continue).0: u128);
        _22 = _42;
        StorageDead(_42);
        _20 = <u128 as SafeMath>::safe_add(move _21, move _22) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_39);
        _39 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb39;
    }

    bb20: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_20);
        _43 = discriminant(_19);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_19 as Continue).0: u128);
        _18 = _47;
        StorageDead(_47);
        ((*_1).4: u128) = move _18;
        StorageDead(_18);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_19);
        _15 = const ();
        goto -> bb25;
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb40;
    }

    bb25: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_1);
        _49 = MarginCalculation::market_to_track_margin_requirement(move _50) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_50);
        _51 = discriminant(_49);
        switchInt(move _51) -> [1: bb27, otherwise: bb37];
    }

    bb27: {
        StorageLive(_52);
        _52 = ((_49 as Some).0: state::margin_calculation::MarketIdentifier);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_52;
        StorageLive(_55);
        _55 = &_4;
        _53 = <MarketIdentifier as PartialEq>::eq(move _54, move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        switchInt(move _53) -> [0: bb35, otherwise: bb29];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = ((*_1).16: u128);
        StorageLive(_60);
        _60 = _2;
        _58 = <u128 as SafeMath>::safe_add(move _59, move _60) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_60);
        StorageDead(_59);
        _57 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _58) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_58);
        _61 = discriminant(_57);
        switchInt(move _61) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_65);
        _65 = ((_57 as Continue).0: u128);
        _56 = _65;
        StorageDead(_65);
        ((*_1).16: u128) = move _56;
        StorageDead(_56);
        StorageDead(_57);
        _48 = const ();
        goto -> bb36;
    }

    bb33: {
        StorageLive(_62);
        _62 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_56);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb41;
    }

    bb35: {
        StorageDead(_55);
        StorageDead(_54);
        _48 = const ();
        goto -> bb36;
    }

    bb36: {
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb38;
    }

    bb37: {
        _48 = const ();
        goto -> bb38;
    }

    bb38: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_66);
        _66 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb41;
    }

    bb39: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_18);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb41;
    }

    bb41: {
        return;
    }
}
