digraph Mir_0_2459 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_size_premium_liability_weight(_1: u128, _2: u32, _3: u32, _4: u128) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: u32;<br align="left"/>let _10: u128;<br align="left"/>let mut _11: &amp;ReErased u128;<br align="left"/>let _12: u128;<br align="left"/>let mut _13: u128;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: (u128, bool);<br align="left"/>let mut _16: (u128, bool);<br align="left"/>let _17: u128;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _19: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _20: u32;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: u128;<br align="left"/>let _26: u128;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _28: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _29: u32;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: u128;<br align="left"/>let _35: u128;<br align="left"/>let mut _36: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _37: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _38: u128;<br align="left"/>let mut _39: u128;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _41: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _42: u128;<br align="left"/>let mut _43: isize;<br align="left"/>let _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _45: !;<br align="left"/>let mut _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _47: u128;<br align="left"/>let mut _48: isize;<br align="left"/>let _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _50: !;<br align="left"/>let mut _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _52: u128;<br align="left"/>let _53: u32;<br align="left"/>let mut _54: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _55: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _56: u128;<br align="left"/>let mut _57: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _58: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _59: u128;<br align="left"/>let mut _60: u128;<br align="left"/>let mut _61: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _62: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _63: u128;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _65: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _66: u128;<br align="left"/>let mut _67: u128;<br align="left"/>let mut _68: isize;<br align="left"/>let _69: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _70: !;<br align="left"/>let mut _71: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _72: u128;<br align="left"/>let mut _73: u128;<br align="left"/>let mut _74: u128;<br align="left"/>let mut _75: (u128, bool);<br align="left"/>let mut _76: u128;<br align="left"/>let mut _77: bool;<br align="left"/>let mut _78: isize;<br align="left"/>let _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _82: u128;<br align="left"/>let mut _83: isize;<br align="left"/>let _84: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _85: !;<br align="left"/>let mut _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _87: u128;<br align="left"/>let mut _88: isize;<br align="left"/>let _89: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _90: !;<br align="left"/>let mut _91: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _92: u32;<br align="left"/>let _93: u32;<br align="left"/>let mut _94: u32;<br align="left"/>let mut _95: u32;<br align="left"/>let mut _96: u32;<br align="left"/>debug size =&gt; _1;<br align="left"/>debug imf_factor =&gt; _2;<br align="left"/>debug liability_weight =&gt; _3;<br align="left"/>debug precision =&gt; _4;<br align="left"/>debug size_sqrt =&gt; _10;<br align="left"/>debug imf_factor_u128 =&gt; _17;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug liability_weight_u128 =&gt; _26;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug liability_weight_numerator =&gt; _35;<br align="left"/>debug residual =&gt; _44;<br align="left"/>debug val =&gt; _47;<br align="left"/>debug residual =&gt; _49;<br align="left"/>debug val =&gt; _52;<br align="left"/>debug size_premium_liability_weight =&gt; _53;<br align="left"/>debug residual =&gt; _69;<br align="left"/>debug val =&gt; _72;<br align="left"/>debug residual =&gt; _79;<br align="left"/>debug val =&gt; _82;<br align="left"/>debug residual =&gt; _84;<br align="left"/>debug val =&gt; _87;<br align="left"/>debug residual =&gt; _89;<br align="left"/>debug val =&gt; _92;<br align="left"/>debug max_liability_weight =&gt; _93;<br align="left"/>>;
    bb0__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>_6 = Eq(move _7, const 0_u32)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_9)<br/>_9 = _3<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _9)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _1<br/>_15 = CheckedMul(_14, const 10_u128)<br/></td></tr><tr><td align="left">assert(!move (_15.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _14, const 10_u128)</td></tr></table>>];
    bb3__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_13 = move (_15.0: u128)<br/>StorageDead(_14)<br/>_16 = CheckedAdd(_13, const 1_u128)<br/></td></tr><tr><td align="left">assert(!move (_16.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _13, const 1_u128)</td></tr></table>>];
    bb4__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_12 = move (_16.0: u128)<br/>_11 = &amp;_12<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_10 = &lt;u128 as Roots&gt;::nth_root(move _11, const 2_u32)</td></tr></table>>];
    bb5__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_12)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _2<br/></td></tr><tr><td align="left">_19 = &lt;u32 as Cast&gt;::cast::&lt;u128&gt;(move _20)</td></tr></table>>];
    bb6__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb7__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_21 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb8__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_18 as Continue).0: u128)<br/>_17 = _25<br/>StorageDead(_25)<br/>StorageDead(_18)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _3<br/></td></tr><tr><td align="left">_28 = &lt;u32 as Cast&gt;::cast::&lt;u128&gt;(move _29)</td></tr></table>>];
    bb9__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb11__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb13__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_30 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb14__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Continue).0: u128)<br/>_26 = _34<br/>StorageDead(_34)<br/>StorageDead(_27)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = _26<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = _26<br/></td></tr><tr><td align="left">_41 = &lt;u128 as SafeMath&gt;::safe_div(move _42, const 5_u128)</td></tr></table>>];
    bb15__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb16__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb18__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_43 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb19__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_40 as Continue).0: u128)<br/>_39 = _47<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">_37 = &lt;u128 as SafeMath&gt;::safe_sub(move _38, move _39)</td></tr></table>>];
    bb20__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_46)<br/>_46 = _44<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _46)</td></tr></table>>];
    bb21__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _37)</td></tr></table>>];
    bb23__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_48 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb24__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_36 as Continue).0: u128)<br/>_35 = _52<br/>StorageDead(_52)<br/>StorageDead(_40)<br/>StorageDead(_36)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = _35<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = _10<br/>StorageLive(_67)<br/>_67 = _17<br/></td></tr><tr><td align="left">_65 = &lt;u128 as SafeMath&gt;::safe_mul(move _66, move _67)</td></tr></table>>];
    bb25__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_36 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_51)<br/>_51 = _49<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _51)</td></tr></table>>];
    bb26__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb28__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_68 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _68)</td></tr></table>>];
    bb29__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/>_72 = ((_64 as Continue).0: u128)<br/>_63 = _72<br/>StorageDead(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_75 = CheckedMul(const 100000_u128, const _)<br/></td></tr><tr><td align="left">assert(!move (_75.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 100000_u128, const _)</td></tr></table>>];
    bb30__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_69)<br/>_69 = ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_71)<br/>_71 = _69<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _71)</td></tr></table>>];
    bb31__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_69)<br/>StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_74 = move (_75.0: u128)<br/>StorageLive(_76)<br/>_76 = _4<br/>_77 = Eq(_76, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _77, &quot;attempt to divide `{}` by zero&quot;, _74)</td></tr></table>>];
    bb33__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_73 = Div(move _74, move _76)<br/>StorageDead(_76)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">_62 = &lt;u128 as SafeMath&gt;::safe_div(move _63, move _73)</td></tr></table>>];
    bb34__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">_61 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _62)</td></tr></table>>];
    bb35__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>_78 = discriminant(_61)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb36__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_61 as Continue).0: u128)<br/>_60 = _82<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">_58 = &lt;u128 as SafeMath&gt;::safe_add(move _59, move _60)</td></tr></table>>];
    bb37__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_61 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_81)<br/>_81 = _79<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _81)</td></tr></table>>];
    bb38__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">_57 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _58)</td></tr></table>>];
    bb40__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>_83 = discriminant(_57)<br/></td></tr><tr><td align="left">switchInt(move _83)</td></tr></table>>];
    bb41__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_87)<br/>_87 = ((_57 as Continue).0: u128)<br/>_56 = _87<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">_55 = &lt;u128 as Cast&gt;::cast::&lt;u32&gt;(move _56)</td></tr></table>>];
    bb42__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_84)<br/>_84 = ((_57 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_86)<br/>_86 = _84<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _86)</td></tr></table>>];
    bb43__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/></td></tr><tr><td align="left">_54 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _55)</td></tr></table>>];
    bb45__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>_88 = discriminant(_54)<br/></td></tr><tr><td align="left">switchInt(move _88)</td></tr></table>>];
    bb46__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_92)<br/>_92 = ((_54 as Continue).0: u32)<br/>_53 = _92<br/>StorageDead(_92)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/>StorageDead(_57)<br/>StorageDead(_54)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = _3<br/>StorageLive(_95)<br/>_95 = _53<br/></td></tr><tr><td align="left">_93 = std::cmp::max::&lt;u32&gt;(move _94, move _95)</td></tr></table>>];
    bb47__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_54 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_91)<br/>_91 = _89<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _91)</td></tr></table>>];
    bb48__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_94)<br/>StorageLive(_96)<br/>_96 = _93<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _96)<br/>StorageDead(_96)<br/>StorageDead(_93)<br/>StorageDead(_53)<br/>StorageDead(_35)<br/>StorageDead(_26)<br/>StorageDead(_17)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_59)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_61)<br/>StorageDead(_57)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_2459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2459 -> bb2__0_2459 [label="0"];
    bb0__0_2459 -> bb1__0_2459 [label="otherwise"];
    bb1__0_2459 -> bb57__0_2459 [label=""];
    bb2__0_2459 -> bb3__0_2459 [label="success"];
    bb3__0_2459 -> bb4__0_2459 [label="success"];
    bb4__0_2459 -> bb5__0_2459 [label="return"];
    bb5__0_2459 -> bb6__0_2459 [label="return"];
    bb6__0_2459 -> bb7__0_2459 [label="return"];
    bb7__0_2459 -> bb8__0_2459 [label="0"];
    bb7__0_2459 -> bb10__0_2459 [label="1"];
    bb7__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb8__0_2459 -> bb12__0_2459 [label="return"];
    bb10__0_2459 -> bb11__0_2459 [label="return"];
    bb11__0_2459 -> bb56__0_2459 [label=""];
    bb12__0_2459 -> bb13__0_2459 [label="return"];
    bb13__0_2459 -> bb14__0_2459 [label="0"];
    bb13__0_2459 -> bb15__0_2459 [label="1"];
    bb13__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb14__0_2459 -> bb17__0_2459 [label="return"];
    bb15__0_2459 -> bb16__0_2459 [label="return"];
    bb16__0_2459 -> bb55__0_2459 [label=""];
    bb17__0_2459 -> bb18__0_2459 [label="return"];
    bb18__0_2459 -> bb19__0_2459 [label="0"];
    bb18__0_2459 -> bb20__0_2459 [label="1"];
    bb18__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb19__0_2459 -> bb22__0_2459 [label="return"];
    bb20__0_2459 -> bb21__0_2459 [label="return"];
    bb21__0_2459 -> bb53__0_2459 [label=""];
    bb22__0_2459 -> bb23__0_2459 [label="return"];
    bb23__0_2459 -> bb24__0_2459 [label="0"];
    bb23__0_2459 -> bb25__0_2459 [label="1"];
    bb23__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb24__0_2459 -> bb27__0_2459 [label="return"];
    bb25__0_2459 -> bb26__0_2459 [label="return"];
    bb26__0_2459 -> bb53__0_2459 [label=""];
    bb27__0_2459 -> bb28__0_2459 [label="return"];
    bb28__0_2459 -> bb29__0_2459 [label="0"];
    bb28__0_2459 -> bb30__0_2459 [label="1"];
    bb28__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb29__0_2459 -> bb32__0_2459 [label="success"];
    bb30__0_2459 -> bb31__0_2459 [label="return"];
    bb31__0_2459 -> bb50__0_2459 [label=""];
    bb32__0_2459 -> bb33__0_2459 [label="success"];
    bb33__0_2459 -> bb34__0_2459 [label="return"];
    bb34__0_2459 -> bb35__0_2459 [label="return"];
    bb35__0_2459 -> bb36__0_2459 [label="0"];
    bb35__0_2459 -> bb37__0_2459 [label="1"];
    bb35__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb36__0_2459 -> bb39__0_2459 [label="return"];
    bb37__0_2459 -> bb38__0_2459 [label="return"];
    bb38__0_2459 -> bb50__0_2459 [label=""];
    bb39__0_2459 -> bb40__0_2459 [label="return"];
    bb40__0_2459 -> bb41__0_2459 [label="0"];
    bb40__0_2459 -> bb42__0_2459 [label="1"];
    bb40__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb41__0_2459 -> bb44__0_2459 [label="return"];
    bb42__0_2459 -> bb43__0_2459 [label="return"];
    bb43__0_2459 -> bb51__0_2459 [label=""];
    bb44__0_2459 -> bb45__0_2459 [label="return"];
    bb45__0_2459 -> bb46__0_2459 [label="0"];
    bb45__0_2459 -> bb47__0_2459 [label="1"];
    bb45__0_2459 -> bb9__0_2459 [label="otherwise"];
    bb46__0_2459 -> bb49__0_2459 [label="return"];
    bb47__0_2459 -> bb48__0_2459 [label="return"];
    bb48__0_2459 -> bb52__0_2459 [label=""];
    bb49__0_2459 -> bb57__0_2459 [label=""];
    bb50__0_2459 -> bb51__0_2459 [label=""];
    bb51__0_2459 -> bb52__0_2459 [label=""];
    bb52__0_2459 -> bb54__0_2459 [label=""];
    bb53__0_2459 -> bb54__0_2459 [label=""];
    bb54__0_2459 -> bb55__0_2459 [label=""];
    bb55__0_2459 -> bb56__0_2459 [label=""];
    bb56__0_2459 -> bb57__0_2459 [label=""];
}
