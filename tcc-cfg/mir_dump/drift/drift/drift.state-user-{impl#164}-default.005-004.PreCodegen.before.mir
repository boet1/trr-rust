// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1616:10: 1616:17>::default` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1616:10: 1616:17>::default() -> UserStats {
    let mut _0: state::user::UserStats;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: state::user::UserFees;
    let mut _4: i64;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: i64;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: u64;
    let mut _12: u16;
    let mut _13: u16;
    let mut _14: u8;
    let mut _15: bool;
    let mut _16: [u8; 1];
    let mut _17: u8;
    let mut _18: u32;
    let mut _19: u32;
    let mut _20: u32;
    let mut _21: u32;
    let mut _22: u32;
    let mut _23: u32;
    let mut _24: u64;
    let mut _25: u32;
    let mut _26: [u8; 12];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <UserFees as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <i64 as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <u64 as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <u64 as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <u64 as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <i64 as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <i64 as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <i64 as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <u64 as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_12);
        _12 = <u16 as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_13);
        _13 = <u16 as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageLive(_14);
        _14 = <u8 as Default>::default() -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageLive(_15);
        _15 = <bool as Default>::default() -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageLive(_16);
        _16 = <[u8; 1] as Default>::default() -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageLive(_17);
        _17 = <u8 as Default>::default() -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageLive(_18);
        _18 = <u32 as Default>::default() -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageLive(_19);
        _19 = <u32 as Default>::default() -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageLive(_20);
        _20 = <u32 as Default>::default() -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageLive(_21);
        _21 = <u32 as Default>::default() -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageLive(_22);
        _22 = <u32 as Default>::default() -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageLive(_23);
        _23 = <u32 as Default>::default() -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageLive(_24);
        _24 = <u64 as Default>::default() -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageLive(_25);
        _25 = <u32 as Default>::default() -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageLive(_26);
        _26 = <[u8; 12] as Default>::default() -> [return: bb26, unwind continue];
    }

    bb26: {
        _0 = UserStats { authority: move _1, referrer: move _2, fees: move _3, next_epoch_ts: move _4, maker_volume_30d: move _5, taker_volume_30d: move _6, filler_volume_30d: move _7, last_maker_volume_30d_ts: move _8, last_taker_volume_30d_ts: move _9, last_filler_volume_30d_ts: move _10, if_staked_quote_asset_amount: move _11, number_of_sub_accounts: move _12, number_of_sub_accounts_created: move _13, referrer_status: move _14, disable_update_perp_bid_ask_twap: move _15, padding1: move _16, fuel_overflow_status: move _17, fuel_insurance: move _18, fuel_deposits: move _19, fuel_borrows: move _20, fuel_positions: move _21, fuel_taker: move _22, fuel_maker: move _23, if_staked_gov_token_amount: move _24, last_fuel_if_bonus_update_ts: move _25, padding: move _26 };
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
