// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:4986:10: 4986:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:4986:10: 4986:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut DeleteInitializedSpotMarketBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, instructions::admin::DeleteInitializedSpotMarketBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, instructions::admin::DeleteInitializedSpotMarketBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, instructions::admin::DeleteInitializedSpotMarketBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, instructions::admin::DeleteInitializedSpotMarketBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _37: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _67: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _82: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _112: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::admin::DeleteInitializedSpotMarketBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _125: ();
    let mut _126: bool;
    let mut _127: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _128: &anchor_lang::prelude::Signer<'_>;
    let _129: &anchor_lang::prelude::Signer<'_>;
    let mut _130: !;
    let mut _131: anchor_lang::error::Error;
    let mut _132: anchor_lang::error::Error;
    let mut _133: anchor_lang::error::ErrorCode;
    let _134: ();
    let mut _135: bool;
    let mut _136: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _137: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _138: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _139: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _140: !;
    let mut _141: anchor_lang::error::Error;
    let mut _142: anchor_lang::error::Error;
    let mut _143: anchor_lang::error::ErrorCode;
    let _144: ();
    let mut _146: &state::state::State;
    let mut _147: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _149: &anchor_lang::prelude::Signer<'_>;
    let mut _150: bool;
    let mut _151: &anchor_lang::prelude::Pubkey;
    let mut _152: &anchor_lang::prelude::Pubkey;
    let mut _153: !;
    let mut _154: anchor_lang::error::Error;
    let mut _155: anchor_lang::error::Error;
    let mut _156: anchor_lang::error::Error;
    let mut _157: anchor_lang::error::ErrorCode;
    let mut _158: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _159: anchor_lang::prelude::Pubkey;
    let mut _160: anchor_lang::prelude::Pubkey;
    let _161: ();
    let mut _162: bool;
    let mut _163: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _164: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _165: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _166: !;
    let mut _167: anchor_lang::error::Error;
    let mut _168: anchor_lang::error::Error;
    let mut _169: anchor_lang::error::ErrorCode;
    let _170: ();
    let mut _171: bool;
    let mut _172: &anchor_lang::prelude::Pubkey;
    let _173: anchor_lang::prelude::Pubkey;
    let mut _174: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let _176: anchor_lang::prelude::Pubkey;
    let mut _177: &anchor_lang::prelude::Signer<'_>;
    let mut _178: !;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::Error;
    let mut _181: anchor_lang::error::ErrorCode;
    let mut _184: (anchor_lang::prelude::Pubkey, u8);
    let mut _185: &[&[u8]];
    let mut _186: &[&[u8]; 2];
    let _187: &[&[u8]; 2];
    let _188: [&[u8]; 2];
    let mut _189: &[u8];
    let _190: &[u8];
    let mut _191: &[u8; 17];
    let _192: &[u8; 17];
    let mut _193: &[u8];
    let _194: &[u8];
    let mut _195: &[u8; 2];
    let _196: [u8; 2];
    let mut _197: u16;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let _199: &&anchor_lang::prelude::Pubkey;
    let mut _200: u8;
    let _201: ();
    let mut _202: bool;
    let mut _203: &anchor_lang::prelude::Pubkey;
    let _204: anchor_lang::prelude::Pubkey;
    let mut _205: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _206: &anchor_lang::prelude::Pubkey;
    let mut _207: !;
    let mut _208: anchor_lang::error::Error;
    let mut _209: anchor_lang::error::Error;
    let mut _210: anchor_lang::error::Error;
    let mut _211: anchor_lang::error::ErrorCode;
    let mut _212: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _213: anchor_lang::prelude::Pubkey;
    let mut _214: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _215: anchor_lang::prelude::Pubkey;
    let _216: ();
    let mut _217: bool;
    let mut _218: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _219: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _220: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _221: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _222: !;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::Error;
    let mut _225: anchor_lang::error::ErrorCode;
    let mut _228: (anchor_lang::prelude::Pubkey, u8);
    let mut _229: &[&[u8]];
    let mut _230: &[&[u8]; 2];
    let _231: &[&[u8]; 2];
    let _232: [&[u8]; 2];
    let mut _233: &[u8];
    let _234: &[u8];
    let mut _235: &[u8; 20];
    let _236: &[u8; 20];
    let mut _237: &[u8];
    let _238: &[u8];
    let mut _239: &[u8; 2];
    let _240: [u8; 2];
    let mut _241: u16;
    let mut _242: &anchor_lang::prelude::Pubkey;
    let _243: &&anchor_lang::prelude::Pubkey;
    let mut _244: u8;
    let _245: ();
    let mut _246: bool;
    let mut _247: &anchor_lang::prelude::Pubkey;
    let _248: anchor_lang::prelude::Pubkey;
    let mut _249: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _250: &anchor_lang::prelude::Pubkey;
    let mut _251: !;
    let mut _252: anchor_lang::error::Error;
    let mut _253: anchor_lang::error::Error;
    let mut _254: anchor_lang::error::Error;
    let mut _255: anchor_lang::error::ErrorCode;
    let mut _256: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _257: anchor_lang::prelude::Pubkey;
    let mut _258: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _259: anchor_lang::prelude::Pubkey;
    let _260: ();
    let mut _261: bool;
    let mut _262: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _263: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _264: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _265: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _266: !;
    let mut _267: anchor_lang::error::Error;
    let mut _268: anchor_lang::error::Error;
    let mut _269: anchor_lang::error::ErrorCode;
    let mut _270: instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _271: anchor_lang::prelude::Signer<'_>;
    let mut _272: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _273: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _274: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _275: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _276: anchor_lang::prelude::AccountInfo<'_>;
    let mut _277: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _278: &anchor_lang::prelude::Pubkey;
    let mut _279: &anchor_lang::prelude::Pubkey;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _318: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _319: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _320: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _321: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, instructions::admin::DeleteInitializedSpotMarketBumps>>::try_accounts::__Args;
        scope 2 {
            debug market_index => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug admin => _20;
                let _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                scope 12 {
                    debug state => _35;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                    scope 17 {
                        debug spot_market => _50;
                        let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        scope 22 {
                            debug spot_market_vault => _65;
                            let _80: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 27 {
                                debug insurance_fund_vault => _80;
                                let _95: anchor_lang::prelude::AccountInfo<'_>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::AccountInfo<'_>;
                                scope 32 {
                                    debug drift_signer => _95;
                                    let _110: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                    scope 37 {
                                        debug token_program => _110;
                                        let _145: anchor_lang::prelude::Pubkey;
                                        let _182: anchor_lang::prelude::Pubkey;
                                        let _183: u8;
                                        scope 42 {
                                            debug my_key => _145;
                                            let _148: anchor_lang::prelude::Pubkey;
                                            scope 43 {
                                                debug target_key => _148;
                                            }
                                        }
                                        scope 44 {
                                            debug __pda_address => _182;
                                            debug __bump => _183;
                                            let _226: anchor_lang::prelude::Pubkey;
                                            let _227: u8;
                                            scope 45 {
                                                debug __pda_address => _226;
                                                debug __bump => _227;
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _121;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _124;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _106;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _109;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _281 = const false;
        _280 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, DeleteInitializedSpotMarketBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _10 = std::result::Result::<<admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, DeleteInitializedSpotMarketBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _11, move _14) -> [return: bb2, unwind: bb132];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, DeleteInitializedSpotMarketBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::DeleteInitializedSpotMarket<'info> as anchor_lang::Accounts<'info, instructions::admin::DeleteInitializedSpotMarketBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb126;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _23, move _29) -> [return: bb9, unwind: bb132];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb132];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _282 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb143];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _308 = discriminant(_21);
        StorageDead(_21);
        goto -> bb125;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _37 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _38, move _44) -> [return: bb15, unwind: bb132];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb132];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _35 = move _49;
        StorageDead(_49);
        _284 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind: bb131];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb142];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _306 = discriminant(_36);
        StorageDead(_36);
        goto -> bb124;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _53, move _59) -> [return: bb21, unwind: bb131];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb131];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _50 = move _64;
        StorageDead(_64);
        _286 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb131];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb141];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _304 = discriminant(_51);
        StorageDead(_51);
        goto -> bb123;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _67 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _68, move _74) -> [return: bb27, unwind: bb131];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb131];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _65 = move _79;
        StorageDead(_79);
        _288 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb130];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb140];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _302 = discriminant(_66);
        StorageDead(_66);
        goto -> bb122;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _82 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _83, move _89) -> [return: bb33, unwind: bb130];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb130];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _80 = move _94;
        StorageDead(_94);
        _290 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb129];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb139];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _300 = discriminant(_81);
        StorageDead(_81);
        goto -> bb121;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _97 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _98, move _104) -> [return: bb39, unwind: bb129];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb129];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _95 = move _109;
        StorageDead(_109);
        _292 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, DeleteInitializedSpotMarketBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb128];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb138];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _298 = discriminant(_96);
        StorageDead(_96);
        goto -> bb120;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18};
        _112 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4986:10: 4986:18}>(move _113, move _119) -> [return: bb45, unwind: bb128];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb128];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _110 = move _124;
        StorageDead(_124);
        _294 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_20;
        _128 = &(*_129);
        _127 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _128) -> [return: bb50, unwind: bb128];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb137];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _296 = discriminant(_111);
        StorageDead(_111);
        goto -> bb119;
    }

    bb50: {
        StorageDead(_128);
        _126 = ((*_127).6: bool);
        switchInt(move _126) -> [0: bb51, otherwise: bb54];
    }

    bb51: {
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = ConstraintMut;
        _132 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _133) -> [return: bb52, unwind: bb128];
    }

    bb52: {
        StorageDead(_133);
        _131 = anchor_lang::error::Error::with_account_name::<&str>(move _132, const "admin") -> [return: bb53, unwind: bb128];
    }

    bb53: {
        StorageDead(_132);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _131);
        StorageDead(_131);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb119;
    }

    bb54: {
        StorageDead(_129);
        StorageDead(_127);
        _125 = const ();
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_35;
        _138 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _139) -> [return: bb55, unwind: bb128];
    }

    bb55: {
        _137 = &(*_138);
        StorageDead(_139);
        _136 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _137) -> [return: bb56, unwind: bb128];
    }

    bb56: {
        StorageDead(_137);
        _135 = ((*_136).6: bool);
        switchInt(move _135) -> [0: bb57, otherwise: bb60];
    }

    bb57: {
        StorageDead(_138);
        StorageDead(_136);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = ConstraintMut;
        _142 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _143) -> [return: bb58, unwind: bb128];
    }

    bb58: {
        StorageDead(_143);
        _141 = anchor_lang::error::Error::with_account_name::<&str>(move _142, const "state") -> [return: bb59, unwind: bb128];
    }

    bb59: {
        StorageDead(_142);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _141);
        StorageDead(_141);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb119;
    }

    bb60: {
        StorageDead(_138);
        StorageDead(_136);
        _134 = const ();
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _317 = (((_35.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _147 = &(*_317);
        _146 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _147) -> [return: bb61, unwind: bb128];
    }

    bb61: {
        StorageDead(_147);
        _145 = ((*_146).0: anchor_lang::prelude::Pubkey);
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_20;
        _148 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _149) -> [return: bb62, unwind: bb128];
    }

    bb62: {
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_145;
        StorageLive(_152);
        _152 = &_148;
        _150 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _151, move _152) -> [return: bb63, unwind: bb128];
    }

    bb63: {
        switchInt(move _150) -> [0: bb68, otherwise: bb64];
    }

    bb64: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = ConstraintHasOne;
        _156 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _157) -> [return: bb65, unwind: bb128];
    }

    bb65: {
        StorageDead(_157);
        _155 = anchor_lang::error::Error::with_account_name::<&str>(move _156, const "state") -> [return: bb66, unwind: bb128];
    }

    bb66: {
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        _159 = _145;
        StorageLive(_160);
        _160 = _148;
        _158 = (move _159, move _160);
        StorageDead(_160);
        StorageDead(_159);
        _154 = anchor_lang::error::Error::with_pubkeys(move _155, move _158) -> [return: bb67, unwind: bb128];
    }

    bb67: {
        StorageDead(_158);
        StorageDead(_155);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _154);
        StorageDead(_154);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb119;
    }

    bb68: {
        StorageDead(_152);
        StorageDead(_151);
        _144 = const ();
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_50;
        _164 = &(*_165);
        _163 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _164) -> [return: bb69, unwind: bb128];
    }

    bb69: {
        StorageDead(_164);
        _162 = ((*_163).6: bool);
        switchInt(move _162) -> [0: bb70, otherwise: bb73];
    }

    bb70: {
        StorageDead(_165);
        StorageDead(_163);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = ConstraintMut;
        _168 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _169) -> [return: bb71, unwind: bb128];
    }

    bb71: {
        StorageDead(_169);
        _167 = anchor_lang::error::Error::with_account_name::<&str>(move _168, const "spot_market") -> [return: bb72, unwind: bb128];
    }

    bb72: {
        StorageDead(_168);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _167);
        StorageDead(_167);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb119;
    }

    bb73: {
        StorageDead(_165);
        StorageDead(_163);
        _161 = const ();
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_50;
        _173 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _174) -> [return: bb74, unwind: bb128];
    }

    bb74: {
        _172 = &_173;
        StorageDead(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_20;
        _176 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _177) -> [return: bb75, unwind: bb128];
    }

    bb75: {
        _175 = &_176;
        StorageDead(_177);
        _171 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _172, move _175) -> [return: bb76, unwind: bb128];
    }

    bb76: {
        switchInt(move _171) -> [0: bb80, otherwise: bb77];
    }

    bb77: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = ConstraintClose;
        _180 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _181) -> [return: bb78, unwind: bb128];
    }

    bb78: {
        StorageDead(_181);
        _179 = anchor_lang::error::Error::with_account_name::<&str>(move _180, const "spot_market") -> [return: bb79, unwind: bb128];
    }

    bb79: {
        StorageDead(_180);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _179);
        StorageDead(_179);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb119;
    }

    bb80: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_172);
        _170 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = const b"spot_market_vault";
        _191 = &(*_192);
        _190 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _191) -> [return: bb81, unwind: bb128];
    }

    bb81: {
        _189 = &(*_190);
        StorageDead(_191);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = _7;
        _196 = core::num::<impl u16>::to_le_bytes(move _197) -> [return: bb82, unwind: bb128];
    }

    bb82: {
        _195 = &_196;
        StorageDead(_197);
        _194 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _195) -> [return: bb83, unwind: bb128];
    }

    bb83: {
        _193 = &(*_194);
        StorageDead(_195);
        _188 = [move _189, move _193];
        StorageDead(_193);
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = move _186 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_186);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_1;
        _278 = deref_copy (*_199);
        _198 = &(*_278);
        _184 = anchor_lang::prelude::Pubkey::find_program_address(move _185, move _198) -> [return: bb84, unwind: bb128];
    }

    bb84: {
        StorageDead(_198);
        StorageDead(_185);
        StorageLive(_182);
        _182 = (_184.0: anchor_lang::prelude::Pubkey);
        StorageLive(_183);
        _183 = (_184.1: u8);
        StorageDead(_199);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_184);
        StorageLive(_200);
        _200 = _183;
        ((*_4).0: u8) = move _200;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _318 = (((_65.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _205 = &(*_318);
        _204 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _205) -> [return: bb85, unwind: bb128];
    }

    bb85: {
        _203 = &_204;
        StorageDead(_205);
        StorageLive(_206);
        _206 = &_182;
        _202 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _203, move _206) -> [return: bb86, unwind: bb128];
    }

    bb86: {
        switchInt(move _202) -> [0: bb92, otherwise: bb87];
    }

    bb87: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = ConstraintSeeds;
        _210 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _211) -> [return: bb88, unwind: bb128];
    }

    bb88: {
        StorageDead(_211);
        _209 = anchor_lang::error::Error::with_account_name::<&str>(move _210, const "spot_market_vault") -> [return: bb89, unwind: bb128];
    }

    bb89: {
        _281 = const true;
        StorageDead(_210);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _319 = (((_65.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _214 = &(*_319);
        _213 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _214) -> [return: bb90, unwind: bb136];
    }

    bb90: {
        StorageDead(_214);
        StorageLive(_215);
        _215 = _182;
        _212 = (move _213, move _215);
        StorageDead(_215);
        StorageDead(_213);
        _281 = const false;
        _208 = anchor_lang::error::Error::with_pubkeys(move _209, move _212) -> [return: bb91, unwind: bb136];
    }

    bb91: {
        StorageDead(_212);
        _281 = const false;
        StorageDead(_209);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _208);
        StorageDead(_208);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb118;
    }

    bb92: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        _201 = const ();
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &_65;
        _220 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _221) -> [return: bb93, unwind: bb128];
    }

    bb93: {
        _219 = &(*_220);
        StorageDead(_221);
        _218 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _219) -> [return: bb94, unwind: bb128];
    }

    bb94: {
        StorageDead(_219);
        _217 = ((*_218).6: bool);
        switchInt(move _217) -> [0: bb95, otherwise: bb98];
    }

    bb95: {
        StorageDead(_220);
        StorageDead(_218);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = ConstraintMut;
        _224 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _225) -> [return: bb96, unwind: bb128];
    }

    bb96: {
        StorageDead(_225);
        _223 = anchor_lang::error::Error::with_account_name::<&str>(move _224, const "spot_market_vault") -> [return: bb97, unwind: bb128];
    }

    bb97: {
        StorageDead(_224);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _223);
        StorageDead(_223);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb118;
    }

    bb98: {
        StorageDead(_220);
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = const b"insurance_fund_vault";
        _235 = &(*_236);
        _234 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _235) -> [return: bb99, unwind: bb128];
    }

    bb99: {
        _233 = &(*_234);
        StorageDead(_235);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _7;
        _240 = core::num::<impl u16>::to_le_bytes(move _241) -> [return: bb100, unwind: bb128];
    }

    bb100: {
        _239 = &_240;
        StorageDead(_241);
        _238 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _239) -> [return: bb101, unwind: bb128];
    }

    bb101: {
        _237 = &(*_238);
        StorageDead(_239);
        _232 = [move _233, move _237];
        StorageDead(_237);
        StorageDead(_233);
        _231 = &_232;
        _230 = &(*_231);
        _229 = move _230 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_230);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_1;
        _279 = deref_copy (*_243);
        _242 = &(*_279);
        _228 = anchor_lang::prelude::Pubkey::find_program_address(move _229, move _242) -> [return: bb102, unwind: bb128];
    }

    bb102: {
        StorageDead(_242);
        StorageDead(_229);
        StorageLive(_226);
        _226 = (_228.0: anchor_lang::prelude::Pubkey);
        StorageLive(_227);
        _227 = (_228.1: u8);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_228);
        StorageLive(_244);
        _244 = _227;
        ((*_4).1: u8) = move _244;
        StorageDead(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _320 = (((_80.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _249 = &(*_320);
        _248 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _249) -> [return: bb103, unwind: bb128];
    }

    bb103: {
        _247 = &_248;
        StorageDead(_249);
        StorageLive(_250);
        _250 = &_226;
        _246 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _247, move _250) -> [return: bb104, unwind: bb128];
    }

    bb104: {
        switchInt(move _246) -> [0: bb110, otherwise: bb105];
    }

    bb105: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = ConstraintSeeds;
        _254 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _255) -> [return: bb106, unwind: bb128];
    }

    bb106: {
        StorageDead(_255);
        _253 = anchor_lang::error::Error::with_account_name::<&str>(move _254, const "insurance_fund_vault") -> [return: bb107, unwind: bb128];
    }

    bb107: {
        _280 = const true;
        StorageDead(_254);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _321 = (((_80.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _258 = &(*_321);
        _257 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _258) -> [return: bb108, unwind: bb134];
    }

    bb108: {
        StorageDead(_258);
        StorageLive(_259);
        _259 = _226;
        _256 = (move _257, move _259);
        StorageDead(_259);
        StorageDead(_257);
        _280 = const false;
        _252 = anchor_lang::error::Error::with_pubkeys(move _253, move _256) -> [return: bb109, unwind: bb134];
    }

    bb109: {
        StorageDead(_256);
        _280 = const false;
        StorageDead(_253);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _252);
        StorageDead(_252);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb117;
    }

    bb110: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        _245 = const ();
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &_80;
        _264 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _265) -> [return: bb111, unwind: bb128];
    }

    bb111: {
        _263 = &(*_264);
        StorageDead(_265);
        _262 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _263) -> [return: bb112, unwind: bb128];
    }

    bb112: {
        StorageDead(_263);
        _261 = ((*_262).6: bool);
        switchInt(move _261) -> [0: bb113, otherwise: bb116];
    }

    bb113: {
        StorageDead(_264);
        StorageDead(_262);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = ConstraintMut;
        _268 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _269) -> [return: bb114, unwind: bb128];
    }

    bb114: {
        StorageDead(_269);
        _267 = anchor_lang::error::Error::with_account_name::<&str>(move _268, const "insurance_fund_vault") -> [return: bb115, unwind: bb128];
    }

    bb115: {
        StorageDead(_268);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Err(move _267);
        StorageDead(_267);
        StorageDead(_261);
        StorageDead(_260);
        goto -> bb117;
    }

    bb116: {
        StorageDead(_264);
        StorageDead(_262);
        _260 = const ();
        StorageDead(_261);
        StorageDead(_260);
        StorageLive(_270);
        StorageLive(_271);
        _271 = move _20;
        StorageLive(_272);
        _272 = move _35;
        StorageLive(_273);
        _273 = move _50;
        StorageLive(_274);
        _274 = move _65;
        StorageLive(_275);
        _275 = move _80;
        StorageLive(_276);
        _276 = move _95;
        StorageLive(_277);
        _277 = move _110;
        _270 = admin::DeleteInitializedSpotMarket::<'_> { admin: move _271, state: move _272, spot_market: move _273, spot_market_vault: move _274, insurance_fund_vault: move _275, drift_signer: move _276, token_program: move _277 };
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_271);
        _0 = std::result::Result::<admin::DeleteInitializedSpotMarket<'_>, anchor_lang::error::Error>::Ok(move _270);
        StorageDead(_270);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb127;
    }

    bb117: {
        StorageDead(_227);
        StorageDead(_226);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_110);
        drop(_95) -> [return: bb120, unwind: bb129];
    }

    bb120: {
        StorageDead(_95);
        drop(_80) -> [return: bb121, unwind: bb130];
    }

    bb121: {
        StorageDead(_80);
        drop(_65) -> [return: bb122, unwind: bb131];
    }

    bb122: {
        StorageDead(_65);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_50);
        drop(_35) -> [return: bb124, unwind: bb132];
    }

    bb124: {
        StorageDead(_35);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_6);
        goto -> bb127;
    }

    bb127: {
        return;
    }

    bb128 (cleanup): {
        drop(_95) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_80) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_65) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_35) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        resume;
    }

    bb133 (cleanup): {
        drop(_253) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        switchInt(_280) -> [0: bb128, otherwise: bb133];
    }

    bb135 (cleanup): {
        drop(_209) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        switchInt(_281) -> [0: bb128, otherwise: bb135];
    }

    bb137 (cleanup): {
        _310 = discriminant(_111);
        goto -> bb128;
    }

    bb138 (cleanup): {
        _311 = discriminant(_96);
        goto -> bb129;
    }

    bb139 (cleanup): {
        _312 = discriminant(_81);
        goto -> bb130;
    }

    bb140 (cleanup): {
        _313 = discriminant(_66);
        goto -> bb131;
    }

    bb141 (cleanup): {
        _314 = discriminant(_51);
        goto -> bb131;
    }

    bb142 (cleanup): {
        _315 = discriminant(_36);
        goto -> bb132;
    }

    bb143 (cleanup): {
        _316 = discriminant(_21);
        goto -> bb132;
    }
}

alloc190 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc189 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}
