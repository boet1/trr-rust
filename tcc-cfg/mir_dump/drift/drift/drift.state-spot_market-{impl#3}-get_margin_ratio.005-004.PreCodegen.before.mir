// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_margin_ratio` before PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_margin_ratio(_1: &SpotMarket, _2: &math::margin::MarginRequirementType) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    debug margin_requirement_type => _2;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _3: u32;
    let mut _4: isize;
    let mut _5: !;
    let mut _6: error::ErrorCode;
    let mut _7: u32;
    scope 1 {
        debug liability_weight => _3;
    }

    bb0: {
        StorageLive(_3);
        _4 = discriminant((*_2));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = ((*_1).34: u32);
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = ((*_1).33: u32);
        goto -> bb5;
    }

    bb4: {
        StorageLive(_6);
        _6 = error::ErrorCode::DefaultError;
        _0 = std::result::Result::<u32, error::ErrorCode>::Err(move _6);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb7;
    }

    bb5: {
        StorageLive(_7);
        _7 = _3;
        _0 = <u32 as SafeMath>::safe_sub(move _7, const _) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
