digraph Mir_0_12834 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;&lt;instructions::user::TransferDeposit&lt;'info&gt; as anchor_lang::Accounts&lt;'info, TransferDepositBumps&gt;&gt;::try_accounts::__Args as BorshSerialize&gt;::serialize(_1: &amp;ReErased &lt;instructions::user::TransferDeposit&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::user::TransferDepositBumps&gt;&gt;::try_accounts::__Args, _2: &amp;ReErased mut W/#0) -&gt; std::result::Result&lt;(), std::io::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;, ()&gt;;<br align="left"/>let mut _5: std::result::Result&lt;(), std::io::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased u16;<br align="left"/>let _7: &amp;ReErased u16;<br align="left"/>let mut _8: &amp;ReErased mut W/#0;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let _13: ();<br align="left"/>let mut _14: ();<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: isize;<br align="left"/>let mut _19: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug writer =&gt; _2;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>>;
    bb0__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;((*_1).0: u16)<br/>_6 = &amp;(*_7)<br/>StorageLive(_8)<br/>_8 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_5 = &lt;u16 as BorshSerialize&gt;::serialize::&lt;W&gt;(move _6, move _8)</td></tr></table>>];
    bb1__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;(), std::io::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_9 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_4 as Continue).0: ())<br/>_3 = _13<br/>StorageDead(_13)<br/>_15 = discriminant(_4)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_14)<br/>_14 = ()<br/>_0 = std::result::Result::&lt;(), std::io::Error&gt;::Ok(move _14)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;)<br/>StorageLive(_12)<br/>_12 = move _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), std::io::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, std::io::Error&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>_17 = discriminant(_4)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb8__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">8 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb9__0_12834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left" balign="left">_19 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_12834 -> bb1__0_12834 [label="return"];
    bb1__0_12834 -> bb2__0_12834 [label="return"];
    bb1__0_12834 -> bb8__0_12834 [label="unwind"];
    bb2__0_12834 -> bb3__0_12834 [label="0"];
    bb2__0_12834 -> bb5__0_12834 [label="1"];
    bb2__0_12834 -> bb4__0_12834 [label="otherwise"];
    bb3__0_12834 -> bb7__0_12834 [label=""];
    bb5__0_12834 -> bb6__0_12834 [label="return"];
    bb5__0_12834 -> bb9__0_12834 [label="unwind"];
    bb6__0_12834 -> bb7__0_12834 [label=""];
    bb9__0_12834 -> bb8__0_12834 [label=""];
}
