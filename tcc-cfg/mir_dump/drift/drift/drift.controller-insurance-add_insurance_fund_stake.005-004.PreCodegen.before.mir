// MIR for `controller::insurance::add_insurance_fund_stake` before PreCodegen

fn controller::insurance::add_insurance_fund_stake(_1: u64, _2: u64, _3: &mut InsuranceFundStake, _4: &mut UserStats, _5: &mut SpotMarket, _6: i64) -> std::result::Result<(), error::ErrorCode> {
    debug amount => _1;
    debug insurance_vault_amount => _2;
    debug insurance_fund_stake => _3;
    debug user_stats => _4;
    debug spot_market => _5;
    debug now => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: bool;
    let mut _13: u128;
    let mut _14: ();
    let _15: error::ErrorCode;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 2];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &error::ErrorCode;
    let _34: &error::ErrorCode;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: error::ErrorCode;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: ();
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _46: std::result::Result<(), error::ErrorCode>;
    let mut _47: u64;
    let mut _48: &mut state::spot_market::SpotMarket;
    let mut _49: isize;
    let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: ();
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _56: std::result::Result<(), error::ErrorCode>;
    let mut _57: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _58: &mut state::spot_market::SpotMarket;
    let mut _59: isize;
    let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _63: ();
    let _64: u128;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _66: std::result::Result<u128, error::ErrorCode>;
    let mut _67: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _68: &state::spot_market::SpotMarket;
    let mut _69: isize;
    let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _73: u128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _78: std::result::Result<u128, error::ErrorCode>;
    let mut _79: u64;
    let mut _80: u128;
    let mut _81: u64;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: i64;
    let mut _88: bool;
    let mut _89: u128;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _91: std::result::Result<i64, error::ErrorCode>;
    let mut _92: u64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _99: std::result::Result<i64, error::ErrorCode>;
    let mut _100: i64;
    let mut _101: i64;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _103: std::result::Result<i64, error::ErrorCode>;
    let mut _104: u64;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _115: ();
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _117: std::result::Result<(), error::ErrorCode>;
    let mut _118: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _119: u128;
    let mut _120: &state::spot_market::SpotMarket;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _128: std::result::Result<u128, error::ErrorCode>;
    let mut _129: u128;
    let mut _130: u128;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: u128;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _138: std::result::Result<u128, error::ErrorCode>;
    let mut _139: u128;
    let mut _140: u128;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _146: ();
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _148: std::result::Result<(), error::ErrorCode>;
    let mut _149: i64;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _151: std::result::Result<i64, error::ErrorCode>;
    let mut _152: u64;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: u64;
    let mut _159: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _160: &mut state::user::UserStats;
    let mut _161: &mut state::spot_market::SpotMarket;
    let mut _162: i64;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _170: std::result::Result<u128, error::ErrorCode>;
    let mut _171: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _172: &state::spot_market::SpotMarket;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _178: ();
    let _179: ();
    let mut _180: &[&[u8]];
    let mut _181: &[&[u8]; 1];
    let _182: &[&[u8]; 1];
    let _183: [&[u8]; 1];
    let mut _184: &[u8];
    let _185: &[u8];
    let mut _186: &std::vec::Vec<u8>;
    let _187: &std::vec::Vec<u8>;
    let _188: std::vec::Vec<u8>;
    let mut _189: &state::events::InsuranceFundStakeRecord;
    let _190: &state::events::InsuranceFundStakeRecord;
    let _191: state::events::InsuranceFundStakeRecord;
    let mut _192: i64;
    let mut _193: anchor_lang::prelude::Pubkey;
    let mut _194: state::events::StakeAction;
    let mut _195: u64;
    let mut _196: u16;
    let mut _197: u64;
    let mut _198: u128;
    let mut _199: u128;
    let mut _200: u128;
    let mut _201: u128;
    let mut _202: u128;
    let mut _203: u128;
    let mut _204: ();
    scope 1 {
        debug error_code => _15;
        let _22: std::string::String;
        let mut _205: &[&str; 2];
        scope 2 {
            debug res => _22;
        }
    }
    scope 3 {
        debug residual => _40;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _43;
        scope 6 {
        }
    }
    scope 7 {
        debug residual => _50;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _53;
        scope 10 {
        }
    }
    scope 11 {
        debug residual => _60;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _63;
        scope 14 {
        }
    }
    scope 15 {
        debug if_shares_before => _64;
        let _74: u128;
        scope 20 {
            debug total_if_shares_before => _74;
            let _75: u128;
            scope 21 {
                debug user_if_shares_before => _75;
                let _76: u128;
                let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _86: u128;
                scope 22 {
                    debug n_shares => _76;
                    let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _97: i64;
                    let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _109: i64;
                    let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _114: i64;
                    let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _125: ();
                    let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _135: u128;
                    let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _145: u128;
                    let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _157: i64;
                    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _167: ();
                    let _168: u128;
                    let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _177: u128;
                    scope 27 {
                        debug residual => _94;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug val => _97;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug residual => _106;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _109;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug residual => _111;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug val => _114;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug residual => _122;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug val => _125;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug residual => _132;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug val => _135;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug residual => _142;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug val => _145;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug residual => _154;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug val => _157;
                        scope 54 {
                        }
                    }
                    scope 55 {
                        debug residual => _164;
                        scope 56 {
                        }
                    }
                    scope 57 {
                        debug val => _167;
                        scope 58 {
                        }
                    }
                    scope 59 {
                        debug if_shares_after => _168;
                    }
                    scope 60 {
                        debug residual => _174;
                        scope 61 {
                        }
                    }
                    scope 62 {
                        debug val => _177;
                        scope 63 {
                        }
                    }
                }
                scope 23 {
                    debug residual => _83;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug val => _86;
                    scope 26 {
                    }
                }
            }
        }
    }
    scope 16 {
        debug residual => _70;
        scope 17 {
        }
    }
    scope 18 {
        debug val => _73;
        scope 19 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        _10 = Eq(move _11, const 0_u64);
        switchInt(move _10) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        _12 = Ne(move _13, const 0_u128);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = error::ErrorCode::InvalidIFForNewStakes;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _205 = const _;
        _26 = &(*_205);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_15;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _33) -> [return: bb6, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_11);
        goto -> bb5;
    }

    bb5: {
        StorageLive(_14);
        _14 = ();
        _9 = std::result::Result::<(), error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        goto -> bb13;
    }

    bb6: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb9, unwind: bb98];
    }

    bb9: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb10, unwind: bb98];
    }

    bb10: {
        StorageDead(_17);
        drop(_21) -> [return: bb11, unwind: bb99];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = const "Insurance Fund balance should be non-zero for new stakers to enter";
        _36 = &(*_37);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_38);
        _38 = _15;
        _9 = std::result::Result::<(), error::ErrorCode>::Err(move _38);
        StorageDead(_38);
        StorageDead(_15);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_12);
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_9);
        _39 = discriminant(_8);
        switchInt(move _39) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_43);
        _43 = ((_8 as Continue).0: ());
        _7 = _43;
        StorageDead(_43);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _2;
        StorageLive(_48);
        _48 = &mut (*_5);
        _46 = apply_rebase_to_insurance_fund(move _47, move _48) -> [return: bb19, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb96;
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _46) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb21, 1: bb22, otherwise: bb16];
    }

    bb21: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: ());
        _44 = _53;
        StorageDead(_53);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &mut (*_3);
        StorageLive(_58);
        _58 = &mut (*_5);
        _56 = apply_rebase_to_insurance_fund_stake(move _57, move _58) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_50);
        _50 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb96;
    }

    bb24: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _56) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb26, 1: bb27, otherwise: bb16];
    }

    bb26: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: ());
        _54 = _63;
        StorageDead(_63);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_3);
        StorageLive(_68);
        _68 = &(*_5);
        _66 = InsuranceFundStake::checked_if_shares(move _67, move _68) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb96;
    }

    bb29: {
        StorageDead(_68);
        StorageDead(_67);
        _65 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _66) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_66);
        _69 = discriminant(_65);
        switchInt(move _69) -> [0: bb31, 1: bb32, otherwise: bb16];
    }

    bb31: {
        StorageLive(_73);
        _73 = ((_65 as Continue).0: u128);
        _64 = _73;
        StorageDead(_73);
        StorageDead(_65);
        StorageLive(_74);
        _74 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_75);
        _75 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _1;
        StorageLive(_80);
        _80 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_81);
        _81 = _2;
        _78 = vault_amount_to_if_shares(move _79, move _80, move _81) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_70);
        _70 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        goto -> bb95;
    }

    bb34: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        _77 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_78);
        _82 = discriminant(_77);
        switchInt(move _82) -> [0: bb36, 1: bb37, otherwise: bb16];
    }

    bb36: {
        StorageLive(_86);
        _86 = ((_77 as Continue).0: u128);
        _76 = _86;
        StorageDead(_86);
        StorageDead(_77);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _64;
        _88 = Eq(move _89, const 0_u128);
        switchInt(move _88) -> [0: bb40, otherwise: bb39];
    }

    bb37: {
        StorageLive(_83);
        _83 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_77);
        goto -> bb94;
    }

    bb39: {
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _1;
        _91 = <u64 as Cast>::cast::<i64>(move _92) -> [return: bb41, unwind continue];
    }

    bb40: {
        StorageDead(_89);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = ((*_3).7: i64);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _1;
        _103 = <u64 as Cast>::cast::<i64>(move _104) -> [return: bb46, unwind continue];
    }

    bb41: {
        StorageDead(_92);
        _90 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _91) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_91);
        _93 = discriminant(_90);
        switchInt(move _93) -> [0: bb43, 1: bb44, otherwise: bb16];
    }

    bb43: {
        StorageLive(_97);
        _97 = ((_90 as Continue).0: i64);
        _87 = _97;
        StorageDead(_97);
        StorageDead(_90);
        goto -> bb56;
    }

    bb44: {
        StorageLive(_94);
        _94 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_90);
        goto -> bb93;
    }

    bb46: {
        StorageDead(_104);
        _102 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _103) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_103);
        _105 = discriminant(_102);
        switchInt(move _105) -> [0: bb48, 1: bb49, otherwise: bb16];
    }

    bb48: {
        StorageLive(_109);
        _109 = ((_102 as Continue).0: i64);
        _101 = _109;
        StorageDead(_109);
        _99 = <i64 as SafeMath>::safe_add(move _100, move _101) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_106);
        _106 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb92;
    }

    bb51: {
        StorageDead(_101);
        StorageDead(_100);
        _98 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _99) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_99);
        _110 = discriminant(_98);
        switchInt(move _110) -> [0: bb53, 1: bb54, otherwise: bb16];
    }

    bb53: {
        StorageLive(_114);
        _114 = ((_98 as Continue).0: i64);
        _87 = _114;
        StorageDead(_114);
        StorageDead(_102);
        StorageDead(_98);
        goto -> bb56;
    }

    bb54: {
        StorageLive(_111);
        _111 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_113);
        StorageDead(_111);
        goto -> bb92;
    }

    bb56: {
        StorageDead(_88);
        ((*_3).7: i64) = move _87;
        StorageDead(_87);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut (*_3);
        StorageLive(_119);
        _119 = _76;
        StorageLive(_120);
        _120 = &(*_5);
        _117 = InsuranceFundStake::increase_if_shares(move _118, move _119, move _120) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        _116 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _117) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_117);
        _121 = discriminant(_116);
        switchInt(move _121) -> [0: bb59, 1: bb60, otherwise: bb16];
    }

    bb59: {
        StorageLive(_125);
        _125 = ((_116 as Continue).0: ());
        _115 = _125;
        StorageDead(_125);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_130);
        _130 = _76;
        _128 = <u128 as SafeMath>::safe_add(move _129, move _130) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_122);
        _122 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb94;
    }

    bb62: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_128);
        _131 = discriminant(_127);
        switchInt(move _131) -> [0: bb64, 1: bb65, otherwise: bb16];
    }

    bb64: {
        StorageLive(_135);
        _135 = ((_127 as Continue).0: u128);
        _126 = _135;
        StorageDead(_135);
        (((*_5).9: state::spot_market::InsuranceFund).1: u128) = move _126;
        StorageDead(_126);
        StorageDead(_127);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_140);
        _140 = _76;
        _138 = <u128 as SafeMath>::safe_add(move _139, move _140) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_132);
        _132 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_126);
        StorageDead(_127);
        goto -> bb94;
    }

    bb67: {
        StorageDead(_140);
        StorageDead(_139);
        _137 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _138) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_138);
        _141 = discriminant(_137);
        switchInt(move _141) -> [0: bb69, 1: bb70, otherwise: bb16];
    }

    bb69: {
        StorageLive(_145);
        _145 = ((_137 as Continue).0: u128);
        _136 = _145;
        StorageDead(_145);
        (((*_5).9: state::spot_market::InsuranceFund).2: u128) = move _136;
        StorageDead(_136);
        StorageDead(_137);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _1;
        _151 = <u64 as Cast>::cast::<i64>(move _152) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_142);
        _142 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_136);
        StorageDead(_137);
        goto -> bb94;
    }

    bb72: {
        StorageDead(_152);
        _150 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _151) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb74, 1: bb75, otherwise: bb16];
    }

    bb74: {
        StorageLive(_157);
        _157 = ((_150 as Continue).0: i64);
        _149 = _157;
        StorageDead(_157);
        StorageLive(_158);
        _158 = _2;
        StorageLive(_159);
        _159 = &mut (*_3);
        StorageLive(_160);
        _160 = &mut (*_4);
        StorageLive(_161);
        _161 = &mut (*_5);
        StorageLive(_162);
        _162 = _6;
        _148 = update_user_stats_if_stake_amount(move _149, move _158, move _159, move _160, move _161, move _162) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_154);
        _154 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb91;
    }

    bb77: {
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_149);
        _147 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _148) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_148);
        _163 = discriminant(_147);
        switchInt(move _163) -> [0: bb79, 1: bb80, otherwise: bb16];
    }

    bb79: {
        StorageLive(_167);
        _167 = ((_147 as Continue).0: ());
        _146 = _167;
        StorageDead(_167);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &(*_3);
        StorageLive(_172);
        _172 = &(*_5);
        _170 = InsuranceFundStake::checked_if_shares(move _171, move _172) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_164);
        _164 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_166);
        StorageDead(_164);
        goto -> bb91;
    }

    bb82: {
        StorageDead(_172);
        StorageDead(_171);
        _169 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _170) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_170);
        _173 = discriminant(_169);
        switchInt(move _173) -> [0: bb84, 1: bb85, otherwise: bb16];
    }

    bb84: {
        StorageLive(_177);
        _177 = ((_169 as Continue).0: u128);
        _168 = _177;
        StorageDead(_177);
        StorageDead(_169);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = _6;
        StorageLive(_193);
        _193 = ((*_4).0: anchor_lang::prelude::Pubkey);
        StorageLive(_194);
        _194 = StakeAction::Stake;
        StorageLive(_195);
        _195 = _1;
        StorageLive(_196);
        _196 = ((*_5).42: u16);
        StorageLive(_197);
        _197 = _2;
        StorageLive(_198);
        _198 = _64;
        StorageLive(_199);
        _199 = _75;
        StorageLive(_200);
        _200 = _74;
        StorageLive(_201);
        _201 = _168;
        StorageLive(_202);
        _202 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_203);
        _203 = (((*_5).9: state::spot_market::InsuranceFund).2: u128);
        _191 = InsuranceFundStakeRecord { ts: move _192, user_authority: move _193, action: move _194, amount: move _195, market_index: move _196, insurance_vault_amount_before: move _197, if_shares_before: move _198, user_if_shares_before: move _199, total_if_shares_before: move _200, if_shares_after: move _201, user_if_shares_after: move _203, total_if_shares_after: move _202 };
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        _190 = &_191;
        _189 = &(*_190);
        _188 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _189) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_174);
        _174 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb94;
    }

    bb87: {
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = <Vec<u8> as Deref>::deref(move _186) -> [return: bb88, unwind: bb97];
    }

    bb88: {
        _184 = &(*_185);
        StorageDead(_186);
        _183 = [move _184];
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = move _181 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_181);
        _179 = solana_program::log::sol_log_data(move _180) -> [return: bb89, unwind: bb97];
    }

    bb89: {
        StorageDead(_180);
        drop(_188) -> [return: bb90, unwind: bb99];
    }

    bb90: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_179);
        _178 = const ();
        StorageDead(_178);
        StorageLive(_204);
        _204 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _204);
        StorageDead(_204);
        StorageDead(_168);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_64);
        goto -> bb96;
    }

    bb91: {
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb94;
    }

    bb92: {
        StorageDead(_102);
        StorageDead(_98);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_64);
        goto -> bb96;
    }

    bb96: {
        return;
    }

    bb97 (cleanup): {
        drop(_188) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_21) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }
}
