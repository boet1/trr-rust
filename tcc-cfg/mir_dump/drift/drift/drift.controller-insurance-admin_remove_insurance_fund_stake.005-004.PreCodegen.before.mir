// MIR for `admin_remove_insurance_fund_stake` before PreCodegen

fn admin_remove_insurance_fund_stake(_1: u64, _2: u128, _3: &mut SpotMarket, _4: i64, _5: anchor_lang::prelude::Pubkey) -> std::result::Result<u64, error::ErrorCode> {
    debug insurance_vault_amount => _1;
    debug n_shares => _2;
    debug spot_market => _3;
    debug now => _4;
    debug admin_pubkey => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: u64;
    let mut _10: &mut state::spot_market::SpotMarket;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: u128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _20: std::result::Result<u128, error::ErrorCode>;
    let mut _21: u128;
    let mut _22: u128;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: ();
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _30: std::result::Result<(), error::ErrorCode>;
    let mut _31: bool;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: ();
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 2];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &error::ErrorCode;
    let _54: &error::ErrorCode;
    let _55: ();
    let mut _56: &str;
    let _57: &str;
    let mut _58: &std::string::String;
    let _59: &std::string::String;
    let _60: std::string::String;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[&str; 2];
    let _65: &[&str; 2];
    let _66: [&str; 2];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let mut _68: &[core::fmt::rt::Argument<'_>; 2];
    let _69: &[core::fmt::rt::Argument<'_>; 2];
    let _70: [core::fmt::rt::Argument<'_>; 2];
    let mut _71: core::fmt::rt::Argument<'_>;
    let mut _72: &u128;
    let _73: &u128;
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &u128;
    let _76: &u128;
    let mut _77: error::ErrorCode;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _85: std::result::Result<u64, error::ErrorCode>;
    let mut _86: u128;
    let mut _87: u128;
    let mut _88: u64;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: u128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _96: std::result::Result<u128, error::ErrorCode>;
    let mut _97: u128;
    let mut _98: u128;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _106: std::result::Result<u128, error::ErrorCode>;
    let mut _107: u128;
    let mut _108: u128;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _114: ();
    let _115: ();
    let mut _116: &[&[u8]];
    let mut _117: &[&[u8]; 1];
    let _118: &[&[u8]; 1];
    let _119: [&[u8]; 1];
    let mut _120: &[u8];
    let _121: &[u8];
    let mut _122: &std::vec::Vec<u8>;
    let _123: &std::vec::Vec<u8>;
    let _124: std::vec::Vec<u8>;
    let mut _125: &state::events::InsuranceFundStakeRecord;
    let _126: &state::events::InsuranceFundStakeRecord;
    let _127: state::events::InsuranceFundStakeRecord;
    let mut _128: i64;
    let mut _129: anchor_lang::prelude::Pubkey;
    let mut _130: state::events::StakeAction;
    let mut _131: u64;
    let mut _132: u16;
    let mut _133: u64;
    let mut _134: u128;
    let mut _135: u128;
    let mut _136: u128;
    let mut _137: u128;
    let mut _138: u128;
    let mut _139: u128;
    let mut _140: u64;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug total_if_shares_before => _16;
        let _17: u128;
        scope 6 {
            debug user_if_shares_before => _17;
            let _18: u128;
            let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _27: u128;
            scope 7 {
                debug if_shares_before => _18;
                let _35: error::ErrorCode;
                let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _82: ();
                let _83: u64;
                let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _93: u64;
                scope 12 {
                    debug error_code => _35;
                    let _42: std::string::String;
                    let _61: std::string::String;
                    let mut _141: &[&str; 2];
                    let mut _142: &[&str; 2];
                    scope 13 {
                        debug res => _42;
                    }
                    scope 14 {
                        debug res => _61;
                    }
                }
                scope 15 {
                    debug residual => _79;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug val => _82;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug withdraw_amount => _83;
                    let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _103: u128;
                    let _104: u128;
                    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _113: u128;
                    scope 24 {
                        debug residual => _100;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _103;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug if_shares_after => _104;
                    }
                    scope 29 {
                        debug residual => _110;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _113;
                        scope 32 {
                        }
                    }
                }
                scope 20 {
                    debug residual => _90;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _93;
                    scope 23 {
                    }
                }
            }
            scope 8 {
                debug residual => _24;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _27;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        _10 = &mut (*_3);
        _8 = apply_rebase_to_insurance_fund(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: ());
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        _16 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_17);
        _17 = (((*_3).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _16;
        StorageLive(_22);
        _22 = _17;
        _20 = <u128 as SafeMath>::safe_sub(move _21, move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb53;
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: u128);
        _18 = _27;
        StorageDead(_27);
        StorageDead(_19);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _18;
        StorageLive(_33);
        _33 = _2;
        _31 = Ge(move _32, move _33);
        switchInt(move _31) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_19);
        goto -> bb52;
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_34);
        _34 = ();
        _30 = std::result::Result::<(), error::ErrorCode>::Ok(move _34);
        StorageDead(_34);
        goto -> bb27;
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_35);
        _35 = error::ErrorCode::InsufficientIFShares;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _142 = const _;
        _46 = &(*_142);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_35;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _53) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_53);
        _51 = [move _52];
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_43);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb17, unwind: bb56];
    }

    bb17: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb18, unwind: bb56];
    }

    bb18: {
        StorageDead(_37);
        drop(_41) -> [return: bb19, unwind: bb57];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _141 = const _;
        _65 = &(*_141);
        _64 = &(*_65);
        _63 = move _64 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_18;
        _72 = &(*_73);
        _71 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _72) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_72);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_2;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _75) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_75);
        _70 = [move _71, move _74];
        StorageDead(_74);
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = move _68 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_68);
        _62 = Arguments::<'_>::new_v1(move _63, move _67) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_67);
        StorageDead(_63);
        _61 = format(move _62) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_62);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        _60 = move _61;
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = <String as Deref>::deref(move _58) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = solana_program::log::sol_log(move _56) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        StorageDead(_56);
        drop(_60) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageLive(_77);
        _77 = _35;
        _30 = std::result::Result::<(), error::ErrorCode>::Err(move _77);
        StorageDead(_77);
        StorageDead(_35);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_31);
        _29 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _30) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_30);
        _78 = discriminant(_29);
        switchInt(move _78) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_82);
        _82 = ((_29 as Continue).0: ());
        _28 = _82;
        StorageDead(_82);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _2;
        StorageLive(_87);
        _87 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_88);
        _88 = _1;
        _85 = if_shares_to_vault_amount(move _86, move _87, move _88) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_79);
        _79 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb52;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        _84 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_85);
        _89 = discriminant(_84);
        switchInt(move _89) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_93);
        _93 = ((_84 as Continue).0: u64);
        _83 = _93;
        StorageDead(_93);
        StorageDead(_84);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_98);
        _98 = _2;
        _96 = <u128 as SafeMath>::safe_sub(move _97, move _98) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_90);
        _90 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_84);
        goto -> bb51;
    }

    bb37: {
        StorageDead(_98);
        StorageDead(_97);
        _95 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_96);
        _99 = discriminant(_95);
        switchInt(move _99) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_103);
        _103 = ((_95 as Continue).0: u128);
        _94 = _103;
        StorageDead(_103);
        (((*_3).9: state::spot_market::InsuranceFund).1: u128) = move _94;
        StorageDead(_94);
        StorageDead(_95);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_108);
        _108 = _17;
        _106 = <u128 as SafeMath>::safe_sub(move _107, move _108) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_100);
        _100 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_94);
        StorageDead(_95);
        goto -> bb51;
    }

    bb42: {
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _106) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_106);
        _109 = discriminant(_105);
        switchInt(move _109) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_113);
        _113 = ((_105 as Continue).0: u128);
        _104 = _113;
        StorageDead(_113);
        StorageDead(_105);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _4;
        StorageLive(_129);
        _129 = _5;
        StorageLive(_130);
        _130 = StakeAction::Unstake;
        StorageLive(_131);
        _131 = _83;
        StorageLive(_132);
        _132 = ((*_3).42: u16);
        StorageLive(_133);
        _133 = _1;
        StorageLive(_134);
        _134 = _18;
        StorageLive(_135);
        _135 = _17;
        StorageLive(_136);
        _136 = _16;
        StorageLive(_137);
        _137 = _104;
        StorageLive(_138);
        _138 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_139);
        _139 = (((*_3).9: state::spot_market::InsuranceFund).2: u128);
        _127 = InsuranceFundStakeRecord { ts: move _128, user_authority: move _129, action: move _130, amount: move _131, market_index: move _132, insurance_vault_amount_before: move _133, if_shares_before: move _134, user_if_shares_before: move _135, total_if_shares_before: move _136, if_shares_after: move _137, user_if_shares_after: move _139, total_if_shares_after: move _138 };
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _125) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_110);
        _110 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb51;
    }

    bb47: {
        StorageDead(_125);
        _123 = &_124;
        _122 = &(*_123);
        _121 = <Vec<u8> as Deref>::deref(move _122) -> [return: bb48, unwind: bb54];
    }

    bb48: {
        _120 = &(*_121);
        StorageDead(_122);
        _119 = [move _120];
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = move _117 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_117);
        _115 = solana_program::log::sol_log_data(move _116) -> [return: bb49, unwind: bb54];
    }

    bb49: {
        StorageDead(_116);
        drop(_124) -> [return: bb50, unwind: bb57];
    }

    bb50: {
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_115);
        _114 = const ();
        StorageDead(_114);
        StorageLive(_140);
        _140 = _83;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _140);
        StorageDead(_140);
        StorageDead(_104);
        StorageDead(_83);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb53;
    }

    bb51: {
        StorageDead(_83);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb53;
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_124) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_60) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_41) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }
}
