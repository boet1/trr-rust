// MIR for `parse_optional_params` before PreCodegen

fn parse_optional_params(_1: Option<u32>) -> (u8, u8) {
    debug optional_params => _1;
    let mut _0: (u8, u8);
    let mut _2: isize;
    let _3: u32;
    let mut _4: u8;
    let mut _5: u32;
    let mut _6: u32;
    let mut _7: u8;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: u32;
    let mut _12: bool;
    scope 1 {
        debug optional_params => _3;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _0 = (const 0_u8, const 100_u8);
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_3);
        _3 = ((_1 as Some).0: u32);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = BitAnd(move _6, const 255_u32);
        StorageDead(_6);
        _4 = move _5 as u8 (IntToInt);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _11 = const 8_i32 as u32 (IntToInt);
        _12 = Lt(move _11, const 32_u32);
        assert(move _12, "attempt to shift right by `{}`, which would overflow", const 8_i32) -> [success: bb4, unwind continue];
    }

    bb4: {
        _9 = Shr(move _10, const 8_i32);
        StorageDead(_10);
        _8 = BitAnd(move _9, const 255_u32);
        StorageDead(_9);
        _7 = move _8 as u8 (IntToInt);
        StorageDead(_8);
        _0 = (move _4, move _7);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}
