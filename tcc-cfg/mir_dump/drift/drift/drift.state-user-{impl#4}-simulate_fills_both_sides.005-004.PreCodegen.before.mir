// MIR for `state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::simulate_fills_both_sides` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::simulate_fills_both_sides(_1: &SpotPosition, _2: &SpotMarket, _3: &StrictOraclePrice, _4: Option<i128>, _5: math::margin::MarginRequirementType) -> std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    debug strict_oracle_price => _3;
    debug token_amount => _4;
    debug margin_type => _5;
    let mut _0: std::result::Result<[state::user::OrderFillSimulation; 2], error::ErrorCode>;
    let _6: i128;
    let mut _7: isize;
    let _8: i128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _10: std::result::Result<i128, error::ErrorCode>;
    let mut _11: &state::user::SpotPosition;
    let mut _12: &state::spot_market::SpotMarket;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: i128;
    let mut _22: u32;
    let mut _23: &state::oracle::StrictOraclePrice;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: &&state::spot_market::SpotMarket;
    let mut _31: &&state::oracle::StrictOraclePrice;
    let mut _32: &math::margin::MarginRequirementType;
    let _33: ();
    let mut _34: bool;
    let mut _35: i64;
    let mut _36: bool;
    let mut _37: i64;
    let mut _38: !;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _41: std::result::Result<i128, error::ErrorCode>;
    let mut _42: &{closure@programs/drift/src/state/user.rs:862:46: 862:85};
    let mut _43: (i128, i128);
    let mut _44: i128;
    let mut _45: i128;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: i128;
    let mut _53: i128;
    let mut _54: i128;
    let mut _55: i128;
    let mut _56: [state::user::OrderFillSimulation; 2];
    let mut _57: state::user::OrderFillSimulation;
    let mut _58: state::user::OrderFillSimulation;
    let mut _60: &&state::spot_market::SpotMarket;
    let mut _61: &i128;
    let mut _62: &{closure@programs/drift/src/state/user.rs:862:46: 862:85};
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::user::OrderFillSimulation>;
    let mut _65: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let mut _66: &{closure@programs/drift/src/state/user.rs:899:29: 901:48};
    let mut _67: (&state::oracle::StrictOraclePrice, i128, i128);
    let mut _68: &state::oracle::StrictOraclePrice;
    let mut _69: i128;
    let mut _70: i128;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _72: std::result::Result<i128, error::ErrorCode>;
    let mut _73: i64;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::user::OrderFillSimulation>;
    let mut _86: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let mut _87: &{closure@programs/drift/src/state/user.rs:899:29: 901:48};
    let mut _88: (&state::oracle::StrictOraclePrice, i128, i128);
    let mut _89: &state::oracle::StrictOraclePrice;
    let mut _90: i128;
    let mut _91: i128;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _93: std::result::Result<i128, error::ErrorCode>;
    let mut _94: i64;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: [state::user::OrderFillSimulation; 2];
    let mut _106: state::user::OrderFillSimulation;
    let mut _107: state::user::OrderFillSimulation;
    scope 1 {
        debug token_amount => _6;
        let _18: i128;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: i128;
        scope 7 {
            debug token_value => _18;
            let _29: {closure@programs/drift/src/state/user.rs:862:46: 862:85};
            scope 12 {
                debug calculate_weighted_token_value => _29;
                let _39: i128;
                let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _50: i128;
                let _59: {closure@programs/drift/src/state/user.rs:899:29: 901:48};
                scope 13 {
                    debug weighted_token_value => _39;
                    let _51: state::user::OrderFillSimulation;
                    scope 18 {
                        debug calculation => _51;
                    }
                }
                scope 14 {
                    debug residual => _47;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _50;
                    scope 17 {
                    }
                }
                scope 19 {
                    debug simulate_side => _59;
                    let _63: state::user::OrderFillSimulation;
                    let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _78: i128;
                    let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _83: state::user::OrderFillSimulation;
                    scope 20 {
                        debug bid_simulation => _63;
                        let _84: state::user::OrderFillSimulation;
                        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _99: i128;
                        let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _104: state::user::OrderFillSimulation;
                        scope 29 {
                            debug ask_simulation => _84;
                        }
                        scope 30 {
                            debug residual => _96;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _99;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _101;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _104;
                            scope 37 {
                            }
                        }
                    }
                    scope 21 {
                        debug residual => _75;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _78;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug residual => _80;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _83;
                        scope 28 {
                        }
                    }
                }
            }
        }
        scope 8 {
            debug residual => _25;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _28;
            scope 11 {
            }
        }
    }
    scope 2 {
        debug token_amount => _8;
    }
    scope 3 {
        debug residual => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _17;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_6);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        StorageLive(_12);
        _12 = &(*_2);
        _10 = SpotPosition::get_signed_token_amount(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_8);
        _8 = ((_4 as Some).0: i128);
        _6 = _8;
        StorageDead(_8);
        goto -> bb9;
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: i128);
        _6 = _17;
        StorageDead(_17);
        StorageDead(_9);
        goto -> bb9;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb51;
    }

    bb9: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _6;
        StorageLive(_22);
        _22 = ((*_2).41: u32);
        StorageLive(_23);
        _23 = &(*_3);
        _20 = get_strict_token_value(move _21, move _22, move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_19 as Continue).0: i128);
        _18 = _28;
        StorageDead(_28);
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_2;
        StorageLive(_31);
        _31 = &_3;
        StorageLive(_32);
        _32 = &_5;
        _29 = {closure@programs/drift/src/state/user.rs:862:46: 862:85} { spot_market: move _30, strict_oracle_price: move _31, margin_type: move _32 };
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_1).1: i64);
        _34 = Eq(move _35, const 0_i64);
        switchInt(move _34) -> [0: bb16, otherwise: bb15];
    }

    bb13: {
        StorageLive(_25);
        _25 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_19);
        goto -> bb50;
    }

    bb15: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = ((*_1).2: i64);
        _36 = Eq(move _37, const 0_i64);
        switchInt(move _36) -> [0: bb23, otherwise: bb17];
    }

    bb16: {
        StorageDead(_35);
        goto -> bb24;
    }

    bb17: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_29;
        StorageLive(_43);
        StorageLive(_44);
        _44 = _6;
        StorageLive(_45);
        _45 = _18;
        _43 = (move _44, move _45);
        _41 = <{closure@programs/drift/src/state/user.rs:862:46: 862:85} as Fn<(i128, i128)>>::call(move _42, move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        _46 = discriminant(_40);
        switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb2];
    }

    bb20: {
        StorageLive(_50);
        _50 = ((_40 as Continue).0: i128);
        _39 = _50;
        StorageDead(_50);
        StorageDead(_40);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _6;
        StorageLive(_53);
        _53 = _18;
        StorageLive(_54);
        _54 = _39;
        StorageLive(_55);
        _55 = _39;
        _51 = OrderFillSimulation { token_amount: move _52, orders_value: const 0_i128, token_value: move _53, weighted_token_value: move _54, free_collateral_contribution: move _55 };
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _51;
        StorageLive(_58);
        _58 = _51;
        _56 = [move _57, move _58];
        StorageDead(_58);
        StorageDead(_57);
        _0 = std::result::Result::<[OrderFillSimulation; 2], error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        StorageDead(_51);
        goto -> bb48;
    }

    bb21: {
        StorageLive(_47);
        _47 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_40);
        goto -> bb48;
    }

    bb23: {
        StorageDead(_37);
        goto -> bb24;
    }

    bb24: {
        _33 = const ();
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_2;
        StorageLive(_61);
        _61 = &_18;
        StorageLive(_62);
        _62 = &_29;
        _59 = {closure@programs/drift/src/state/user.rs:899:29: 901:48} { spot_market: move _60, token_value: move _61, calculate_weighted_token_value: move _62 };
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_59;
        StorageLive(_67);
        StorageLive(_68);
        _68 = &(*_3);
        StorageLive(_69);
        _69 = _6;
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = ((*_1).1: i64);
        _72 = <i64 as Cast>::cast::<i128>(move _73) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_73);
        _71 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _72) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_72);
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb27, 1: bb28, otherwise: bb2];
    }

    bb27: {
        StorageLive(_78);
        _78 = ((_71 as Continue).0: i128);
        _70 = _78;
        StorageDead(_78);
        _67 = (move _68, move _69, move _70);
        _65 = <{closure@programs/drift/src/state/user.rs:899:29: 901:48} as Fn<(&StrictOraclePrice, i128, i128)>>::call(move _66, move _67) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_75);
        _75 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb46;
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as Try>::branch(move _65) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_65);
        _79 = discriminant(_64);
        switchInt(move _79) -> [0: bb32, 1: bb33, otherwise: bb2];
    }

    bb32: {
        StorageLive(_83);
        _83 = ((_64 as Continue).0: state::user::OrderFillSimulation);
        _63 = _83;
        StorageDead(_83);
        StorageDead(_71);
        StorageDead(_64);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_59;
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_3);
        StorageLive(_90);
        _90 = _6;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ((*_1).2: i64);
        _93 = <i64 as Cast>::cast::<i128>(move _94) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_80);
        _80 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_82);
        StorageDead(_80);
        goto -> bb46;
    }

    bb35: {
        StorageDead(_94);
        _92 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _93) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_93);
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb37, 1: bb38, otherwise: bb2];
    }

    bb37: {
        StorageLive(_99);
        _99 = ((_92 as Continue).0: i128);
        _91 = _99;
        StorageDead(_99);
        _88 = (move _89, move _90, move _91);
        _86 = <{closure@programs/drift/src/state/user.rs:899:29: 901:48} as Fn<(&StrictOraclePrice, i128, i128)>>::call(move _87, move _88) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_96);
        _96 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb45;
    }

    bb40: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _85 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as Try>::branch(move _86) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_86);
        _100 = discriminant(_85);
        switchInt(move _100) -> [0: bb42, 1: bb43, otherwise: bb2];
    }

    bb42: {
        StorageLive(_104);
        _104 = ((_85 as Continue).0: state::user::OrderFillSimulation);
        _84 = _104;
        StorageDead(_104);
        StorageDead(_92);
        StorageDead(_85);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _63;
        StorageLive(_107);
        _107 = _84;
        _105 = [move _106, move _107];
        StorageDead(_107);
        StorageDead(_106);
        _0 = std::result::Result::<[OrderFillSimulation; 2], error::ErrorCode>::Ok(move _105);
        StorageDead(_105);
        StorageDead(_84);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_29);
        StorageDead(_18);
        StorageDead(_6);
        goto -> bb52;
    }

    bb43: {
        StorageLive(_101);
        _101 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_103);
        StorageDead(_101);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_92);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_71);
        StorageDead(_64);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_63);
        StorageDead(_59);
        goto -> bb49;
    }

    bb48: {
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_29);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_18);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_6);
        goto -> bb52;
    }

    bb52: {
        return;
    }
}
