// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::full_shr` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::full_shr(_1: [u64; 4], _2: u32) -> U192 {
    debug u => _1;
    debug shift => _2;
    let mut _0: math::bn::U192;
    let _3: ();
    let mut _4: bool;
    let _5: ();
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: !;
    let mut _10: math::bn::U192;
    let _11: ();
    let mut _12: std::ops::Range<usize>;
    let mut _13: std::ops::Range<usize>;
    let mut _15: ();
    let _16: ();
    let mut _17: std::option::Option<usize>;
    let mut _18: &mut std::ops::Range<usize>;
    let mut _19: &mut std::ops::Range<usize>;
    let mut _20: isize;
    let mut _21: !;
    let mut _23: u64;
    let _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: u32;
    let mut _28: bool;
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let _32: ();
    let mut _33: bool;
    let mut _34: u32;
    let mut _35: std::ops::RangeInclusive<usize>;
    let mut _36: std::ops::RangeInclusive<usize>;
    let _38: ();
    let mut _39: std::option::Option<usize>;
    let mut _40: &mut std::ops::RangeInclusive<usize>;
    let mut _41: &mut std::ops::RangeInclusive<usize>;
    let mut _42: isize;
    let mut _43: !;
    let mut _45: u64;
    let mut _46: u64;
    let _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: u32;
    let mut _51: u32;
    let mut _52: u32;
    let mut _53: (u32, bool);
    let mut _54: bool;
    let _55: usize;
    let mut _56: usize;
    let mut _57: (usize, bool);
    let mut _58: usize;
    let mut _59: bool;
    scope 1 {
        debug res => _10;
        let mut _14: std::ops::Range<usize>;
        let mut _37: std::ops::RangeInclusive<usize>;
        scope 2 {
            debug iter => _14;
            let _22: usize;
            scope 3 {
                debug i => _22;
            }
        }
        scope 4 {
            debug iter => _37;
            let _44: usize;
            scope 5 {
                debug i => _44;
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const true;
        switchInt(move _4) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        StorageLive(_8);
        _8 = const _ as u32 (IntToInt);
        _6 = Lt(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        goto -> bb5;
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = panic(const "assertion failed: shift < Self::WORD_BITS as u32") -> unwind continue;
    }

    bb4: {
        _3 = const ();
        goto -> bb5;
    }

    bb5: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_10);
        _10 = U192::zero() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = std::ops::Range::<usize> { start: const 0_usize, end: const 3_usize };
        _12 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_13);
        StorageLive(_14);
        _14 = move _12;
        goto -> bb8;
    }

    bb8: {
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _14;
        _18 = &mut (*_19);
        _17 = <std::ops::Range<usize> as Iterator>::next(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_17 as Some).0: usize);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _22;
        _25 = Len(_1);
        _26 = Lt(_24, _25);
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> [success: bb13, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _11 = const ();
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _2;
        _33 = Gt(move _34, const 0_u32);
        switchInt(move _33) -> [0: bb17, otherwise: bb16];
    }

    bb13: {
        _23 = _1[_24];
        StorageLive(_27);
        _27 = _2;
        _28 = Lt(_27, const 64_u32);
        assert(move _28, "attempt to shift right by `{}`, which would overflow", _27) -> [success: bb14, unwind continue];
    }

    bb14: {
        StorageLive(_29);
        _29 = _22;
        _30 = Len((_10.0: [u64; 3]));
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> [success: bb15, unwind continue];
    }

    bb15: {
        (_10.0: [u64; 3])[_29] = Shr(move _23, move _27);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_29);
        StorageDead(_24);
        _16 = const ();
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        _15 = const ();
        goto -> bb8;
    }

    bb16: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = RangeInclusive::<usize>::new(const 1_usize, const 3_usize) -> [return: bb18, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        _32 = const ();
        goto -> bb29;
    }

    bb18: {
        _35 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _36) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_36);
        StorageLive(_37);
        _37 = move _35;
        goto -> bb20;
    }

    bb20: {
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _37;
        _40 = &mut (*_41);
        _39 = <RangeInclusive<usize> as Iterator>::next(move _40) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_40);
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb23, 1: bb22, otherwise: bb11];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_39 as Some).0: usize);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _44;
        _48 = Len(_1);
        _49 = Lt(_47, _48);
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> [success: bb24, unwind continue];
    }

    bb23: {
        _32 = const ();
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb29;
    }

    bb24: {
        _46 = _1[_47];
        StorageLive(_50);
        StorageLive(_51);
        _51 = const _ as u32 (IntToInt);
        StorageLive(_52);
        _52 = _2;
        _53 = CheckedSub(_51, _52);
        assert(!move (_53.1: bool), "attempt to compute `{} - {}`, which would overflow", move _51, move _52) -> [success: bb25, unwind continue];
    }

    bb25: {
        _50 = move (_53.0: u32);
        StorageDead(_52);
        StorageDead(_51);
        _54 = Lt(_50, const 64_u32);
        assert(move _54, "attempt to shift left by `{}`, which would overflow", _50) -> [success: bb26, unwind continue];
    }

    bb26: {
        _45 = Shl(move _46, move _50);
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _44;
        _57 = CheckedSub(_56, const 1_usize);
        assert(!move (_57.1: bool), "attempt to compute `{} - {}`, which would overflow", move _56, const 1_usize) -> [success: bb27, unwind continue];
    }

    bb27: {
        _55 = move (_57.0: usize);
        StorageDead(_56);
        _58 = Len((_10.0: [u64; 3]));
        _59 = Lt(_55, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _55) -> [success: bb28, unwind continue];
    }

    bb28: {
        (_10.0: [u64; 3])[_55] = BitOr((_10.0: [u64; 3])[_55], move _45);
        StorageDead(_45);
        StorageDead(_55);
        StorageDead(_47);
        _38 = const ();
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        _15 = const ();
        goto -> bb20;
    }

    bb29: {
        StorageDead(_33);
        StorageDead(_32);
        _0 = _10;
        StorageDead(_10);
        return;
    }
}
