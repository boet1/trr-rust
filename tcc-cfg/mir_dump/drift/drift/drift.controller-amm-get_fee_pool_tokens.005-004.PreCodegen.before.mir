// MIR for `get_fee_pool_tokens` before PreCodegen

fn get_fee_pool_tokens(_1: &mut PerpMarket, _2: &mut SpotMarket) -> std::result::Result<i128, error::ErrorCode> {
    debug perp_market => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: &state::perp_market::PoolBalance;
    let mut _8: &state::spot_market::SpotMarket;
    let mut _9: &state::spot_market::SpotBalanceType;
    let _10: &state::spot_market::SpotBalanceType;
    let mut _11: &state::perp_market::PoolBalance;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u128;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(((*_1).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _6 = <PoolBalance as SpotBalance>::balance(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = &(*_2);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(((*_1).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _10 = <PoolBalance as SpotBalance>::balance_type(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &(*_10);
        StorageDead(_11);
        _5 = get_token_amount(move _6, move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        _12 = discriminant(_4);
        switchInt(move _12) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_4 as Continue).0: u128);
        _3 = _16;
        StorageDead(_16);
        _0 = <u128 as Cast>::cast::<i128>(move _3) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_13);
        _13 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_10);
        StorageDead(_4);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_3);
        StorageDead(_10);
        StorageDead(_4);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}
