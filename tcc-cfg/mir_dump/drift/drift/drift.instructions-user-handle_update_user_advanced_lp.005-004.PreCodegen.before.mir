// MIR for `instructions::user::handle_update_user_advanced_lp` before PreCodegen

fn instructions::user::handle_update_user_advanced_lp(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::UpdateUser<'_>>, _2: u16, _3: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _sub_account_id => _2;
    debug advanced_lp => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: std::cell::RefMut<'_, state::user::User>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _9: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: std::cell::RefMut<'_, state::user::User>;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: bool;
    let mut _19: &state::user::User;
    let _20: &state::user::User;
    let mut _21: &std::cell::RefMut<'_, state::user::User>;
    let mut _22: ();
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let mut _43: error::ErrorCode;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: &mut state::user::User;
    let mut _53: &mut state::user::User;
    let mut _54: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _55: bool;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: ();
    let mut _63: &mut instructions::user::UpdateUser<'_>;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    scope 1 {
        debug user => _4;
        let _23: error::ErrorCode;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: ();
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: ();
        scope 6 {
            debug error_code => _23;
            let _30: std::string::String;
            let mut _62: &[&str; 2];
            scope 7 {
                debug res => _30;
            }
        }
        scope 8 {
            debug residual => _45;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _48;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _57;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _60;
            scope 15 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _63 = deref_copy (_1.1: &mut instructions::user::UpdateUser<'_>);
        _8 = &((*_63).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _6 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _7, move _9) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _4 = move _14;
        StorageDead(_14);
        _66 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_4;
        _20 = <RefMut<'_, User> as Deref>::deref(move _21) -> [return: bb8, unwind: bb34];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _64 = discriminant(_5);
        StorageDead(_5);
        goto -> bb31;
    }

    bb8: {
        _19 = &(*_20);
        StorageDead(_21);
        _18 = User::is_being_liquidated(move _19) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        switchInt(move _18) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_23);
        _23 = error::ErrorCode::LiquidationsOngoing;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _62 = const _;
        _34 = &(*_62);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb12, unwind: bb34];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_22);
        _22 = ();
        _17 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb18;
    }

    bb12: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        StorageDead(_25);
        drop(_29) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        _43 = _23;
        _17 = std::result::Result::<(), error::ErrorCode>::Err(move _43);
        StorageDead(_43);
        StorageDead(_23);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb19, unwind: bb34];
    }

    bb19: {
        StorageDead(_17);
        _44 = discriminant(_16);
        switchInt(move _44) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_48);
        _48 = ((_16 as Continue).0: ());
        _15 = _48;
        StorageDead(_48);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut _4;
        _53 = <RefMut<'_, User> as DerefMut>::deref_mut(move _54) -> [return: bb23, unwind: bb34];
    }

    bb21: {
        StorageLive(_45);
        _45 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb30;
    }

    bb23: {
        _52 = &mut (*_53);
        StorageDead(_54);
        StorageLive(_55);
        _55 = _3;
        _51 = User::update_advanced_lp_status(move _52, move _55) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        StorageDead(_55);
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        StorageDead(_51);
        _56 = discriminant(_50);
        switchInt(move _56) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        StorageLive(_60);
        _60 = ((_50 as Continue).0: ());
        _49 = _60;
        StorageDead(_60);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_61);
        _61 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _61);
        StorageDead(_61);
        drop(_4) -> [return: bb29, unwind: bb35];
    }

    bb27: {
        StorageLive(_57);
        _57 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb30;
    }

    bb29: {
        StorageDead(_4);
        goto -> bb32;
    }

    bb30: {
        drop(_4) -> [return: bb31, unwind: bb35];
    }

    bb31: {
        StorageDead(_4);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_29) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_4) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36 (cleanup): {
        _68 = discriminant(_5);
        goto -> bb35;
    }
}
