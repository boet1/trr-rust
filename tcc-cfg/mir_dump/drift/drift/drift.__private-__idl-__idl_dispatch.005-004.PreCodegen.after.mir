// MIR for `__idl_dispatch` after PreCodegen

fn __idl_dispatch(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug idl_ix_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, anchor_lang::idl::IdlInstruction>;
    let mut _8: std::result::Result<anchor_lang::idl::IdlInstruction, anchor_lang::error::ErrorCode>;
    let mut _9: std::result::Result<anchor_lang::idl::IdlInstruction, std::io::Error>;
    let mut _10: &mut &[u8];
    let mut _11: &mut &[u8];
    let mut _12: {closure@programs/drift/src/lib.rs:69:1: 69:11};
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _18: ();
    let mut _19: isize;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlCreateAccounts<'_>>;
    let mut _25: std::result::Result<__private::__idl::IdlCreateAccounts<'_>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _28: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _29: &[u8];
    let mut _30: &[u8; 0];
    let _31: &[u8; 0];
    let _32: [u8; 0];
    let mut _33: &mut __private::__idl::IdlCreateAccountsBumps;
    let mut _34: &mut __private::__idl::IdlCreateAccountsBumps;
    let mut _35: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _36: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _42: ();
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _44: std::result::Result<(), anchor_lang::error::Error>;
    let mut _45: &anchor_lang::prelude::Pubkey;
    let mut _46: &mut __private::__idl::IdlCreateAccounts<'_>;
    let mut _47: &mut __private::__idl::IdlCreateAccounts<'_>;
    let mut _48: u64;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _56: std::result::Result<(), anchor_lang::error::Error>;
    let mut _57: &__private::__idl::IdlCreateAccounts<'_>;
    let mut _58: &anchor_lang::prelude::Pubkey;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlResizeAccount<'_>>;
    let mut _69: std::result::Result<__private::__idl::IdlResizeAccount<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _73: &[u8];
    let mut _74: &[u8; 0];
    let _75: &[u8; 0];
    let _76: [u8; 0];
    let mut _77: &mut __private::__idl::IdlResizeAccountBumps;
    let mut _78: &mut __private::__idl::IdlResizeAccountBumps;
    let mut _79: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _80: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _88: std::result::Result<(), anchor_lang::error::Error>;
    let mut _89: &anchor_lang::prelude::Pubkey;
    let mut _90: &mut __private::__idl::IdlResizeAccount<'_>;
    let mut _91: &mut __private::__idl::IdlResizeAccount<'_>;
    let mut _92: u64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _98: ();
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _100: std::result::Result<(), anchor_lang::error::Error>;
    let mut _101: &__private::__idl::IdlResizeAccount<'_>;
    let mut _102: &anchor_lang::prelude::Pubkey;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlCloseAccount<'_>>;
    let mut _112: std::result::Result<__private::__idl::IdlCloseAccount<'_>, anchor_lang::error::Error>;
    let mut _113: &anchor_lang::prelude::Pubkey;
    let mut _114: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &[u8; 0];
    let _118: &[u8; 0];
    let _119: [u8; 0];
    let mut _120: &mut __private::__idl::IdlCloseAccountBumps;
    let mut _121: &mut __private::__idl::IdlCloseAccountBumps;
    let mut _122: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _123: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _129: ();
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _131: std::result::Result<(), anchor_lang::error::Error>;
    let mut _132: &anchor_lang::prelude::Pubkey;
    let mut _133: &mut __private::__idl::IdlCloseAccount<'_>;
    let mut _134: &mut __private::__idl::IdlCloseAccount<'_>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _140: ();
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _142: std::result::Result<(), anchor_lang::error::Error>;
    let mut _143: &__private::__idl::IdlCloseAccount<'_>;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlCreateBuffer<'_>>;
    let mut _154: std::result::Result<__private::__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>;
    let mut _155: &anchor_lang::prelude::Pubkey;
    let mut _156: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _157: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _158: &[u8];
    let mut _159: &[u8; 0];
    let _160: &[u8; 0];
    let _161: [u8; 0];
    let mut _162: &mut __private::__idl::IdlCreateBufferBumps;
    let mut _163: &mut __private::__idl::IdlCreateBufferBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _171: ();
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _173: std::result::Result<(), anchor_lang::error::Error>;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let mut _175: &mut __private::__idl::IdlCreateBuffer<'_>;
    let mut _176: &mut __private::__idl::IdlCreateBuffer<'_>;
    let mut _177: isize;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _182: ();
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _184: std::result::Result<(), anchor_lang::error::Error>;
    let mut _185: &__private::__idl::IdlCreateBuffer<'_>;
    let mut _186: &anchor_lang::prelude::Pubkey;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlAccounts<'_>>;
    let mut _197: std::result::Result<__private::__idl::IdlAccounts<'_>, anchor_lang::error::Error>;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let mut _199: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _200: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _201: &[u8];
    let mut _202: &[u8; 0];
    let _203: &[u8; 0];
    let _204: [u8; 0];
    let mut _205: &mut __private::__idl::IdlAccountsBumps;
    let mut _206: &mut __private::__idl::IdlAccountsBumps;
    let mut _207: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _208: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _214: ();
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _216: std::result::Result<(), anchor_lang::error::Error>;
    let mut _217: &anchor_lang::prelude::Pubkey;
    let mut _218: &mut __private::__idl::IdlAccounts<'_>;
    let mut _219: &mut __private::__idl::IdlAccounts<'_>;
    let mut _220: std::vec::Vec<u8>;
    let mut _221: isize;
    let mut _223: !;
    let mut _224: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _226: ();
    let mut _227: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _228: std::result::Result<(), anchor_lang::error::Error>;
    let mut _229: &__private::__idl::IdlAccounts<'_>;
    let mut _230: &anchor_lang::prelude::Pubkey;
    let mut _231: isize;
    let mut _233: !;
    let mut _234: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlAccounts<'_>>;
    let mut _241: std::result::Result<__private::__idl::IdlAccounts<'_>, anchor_lang::error::Error>;
    let mut _242: &anchor_lang::prelude::Pubkey;
    let mut _243: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _244: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _245: &[u8];
    let mut _246: &[u8; 0];
    let _247: &[u8; 0];
    let _248: [u8; 0];
    let mut _249: &mut __private::__idl::IdlAccountsBumps;
    let mut _250: &mut __private::__idl::IdlAccountsBumps;
    let mut _251: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _252: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _258: ();
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _260: std::result::Result<(), anchor_lang::error::Error>;
    let mut _261: &anchor_lang::prelude::Pubkey;
    let mut _262: &mut __private::__idl::IdlAccounts<'_>;
    let mut _263: &mut __private::__idl::IdlAccounts<'_>;
    let mut _264: anchor_lang::prelude::Pubkey;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _270: ();
    let mut _271: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _272: std::result::Result<(), anchor_lang::error::Error>;
    let mut _273: &__private::__idl::IdlAccounts<'_>;
    let mut _274: &anchor_lang::prelude::Pubkey;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlSetBuffer<'_>>;
    let mut _284: std::result::Result<__private::__idl::IdlSetBuffer<'_>, anchor_lang::error::Error>;
    let mut _285: &anchor_lang::prelude::Pubkey;
    let mut _286: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _287: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _288: &[u8];
    let mut _289: &[u8; 0];
    let _290: &[u8; 0];
    let _291: [u8; 0];
    let mut _292: &mut __private::__idl::IdlSetBufferBumps;
    let mut _293: &mut __private::__idl::IdlSetBufferBumps;
    let mut _294: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _295: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _301: ();
    let mut _302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _303: std::result::Result<(), anchor_lang::error::Error>;
    let mut _304: &anchor_lang::prelude::Pubkey;
    let mut _305: &mut __private::__idl::IdlSetBuffer<'_>;
    let mut _306: &mut __private::__idl::IdlSetBuffer<'_>;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _312: ();
    let mut _313: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _314: std::result::Result<(), anchor_lang::error::Error>;
    let mut _315: &__private::__idl::IdlSetBuffer<'_>;
    let mut _316: &anchor_lang::prelude::Pubkey;
    let mut _317: isize;
    let mut _319: !;
    let mut _320: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _322: ();
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    scope 1 {
        debug accounts => _4;
        let mut _5: &[u8];
        scope 2 {
            debug data => _5;
            let _6: anchor_lang::idl::IdlInstruction;
            let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
            let _17: anchor_lang::idl::IdlInstruction;
            scope 3 {
                debug ix => _6;
                let _20: u64;
                let _64: u64;
                let mut _108: __private::__idl::IdlCloseAccountBumps;
                let mut _150: __private::__idl::IdlCreateBufferBumps;
                let _192: std::vec::Vec<u8>;
                let _236: anchor_lang::prelude::Pubkey;
                let mut _280: __private::__idl::IdlSetBufferBumps;
                scope 8 {
                    debug data_len => _20;
                    let mut _21: __private::__idl::IdlCreateAccountsBumps;
                    scope 9 {
                        debug bumps => _21;
                        let mut _22: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                        scope 10 {
                            debug reallocs => _22;
                            let mut _23: __private::__idl::IdlCreateAccounts<'_>;
                            let _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _41: __private::__idl::IdlCreateAccounts<'_>;
                            let mut _329: &[u8; 0];
                            scope 11 {
                                debug accounts => _23;
                                let _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _53: ();
                                let _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _63: ();
                                scope 16 {
                                    debug residual => _50;
                                    scope 17 {
                                    }
                                }
                                scope 18 {
                                    debug val => _53;
                                    scope 19 {
                                    }
                                }
                                scope 20 {
                                    debug residual => _60;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _63;
                                    scope 23 {
                                    }
                                }
                            }
                            scope 12 {
                                debug residual => _38;
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug val => _41;
                                scope 15 {
                                }
                            }
                        }
                    }
                }
                scope 24 {
                    debug data_len => _64;
                    let mut _65: __private::__idl::IdlResizeAccountBumps;
                    scope 25 {
                        debug bumps => _65;
                        let mut _66: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                        scope 26 {
                            debug reallocs => _66;
                            let mut _67: __private::__idl::IdlResizeAccount<'_>;
                            let _82: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _85: __private::__idl::IdlResizeAccount<'_>;
                            let mut _328: &[u8; 0];
                            scope 27 {
                                debug accounts => _67;
                                let _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _97: ();
                                let _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _107: ();
                                scope 32 {
                                    debug residual => _94;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => _97;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug residual => _104;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _107;
                                    scope 39 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _82;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _85;
                                scope 31 {
                                }
                            }
                        }
                    }
                }
                scope 40 {
                    debug bumps => _108;
                    let mut _109: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                    scope 41 {
                        debug reallocs => _109;
                        let mut _110: __private::__idl::IdlCloseAccount<'_>;
                        let _125: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _128: __private::__idl::IdlCloseAccount<'_>;
                        let mut _327: &[u8; 0];
                        scope 42 {
                            debug accounts => _110;
                            let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _139: ();
                            let _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _149: ();
                            scope 47 {
                                debug residual => _136;
                                scope 48 {
                                }
                            }
                            scope 49 {
                                debug val => _139;
                                scope 50 {
                                }
                            }
                            scope 51 {
                                debug residual => _146;
                                scope 52 {
                                }
                            }
                            scope 53 {
                                debug val => _149;
                                scope 54 {
                                }
                            }
                        }
                        scope 43 {
                            debug residual => _125;
                            scope 44 {
                            }
                        }
                        scope 45 {
                            debug val => _128;
                            scope 46 {
                            }
                        }
                    }
                }
                scope 55 {
                    debug bumps => _150;
                    let mut _151: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                    scope 56 {
                        debug reallocs => _151;
                        let mut _152: __private::__idl::IdlCreateBuffer<'_>;
                        let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _170: __private::__idl::IdlCreateBuffer<'_>;
                        let mut _326: &[u8; 0];
                        scope 57 {
                            debug accounts => _152;
                            let _178: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _181: ();
                            let _188: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _191: ();
                            scope 62 {
                                debug residual => _178;
                                scope 63 {
                                }
                            }
                            scope 64 {
                                debug val => _181;
                                scope 65 {
                                }
                            }
                            scope 66 {
                                debug residual => _188;
                                scope 67 {
                                }
                            }
                            scope 68 {
                                debug val => _191;
                                scope 69 {
                                }
                            }
                        }
                        scope 58 {
                            debug residual => _167;
                            scope 59 {
                            }
                        }
                        scope 60 {
                            debug val => _170;
                            scope 61 {
                            }
                        }
                    }
                }
                scope 70 {
                    debug data => _192;
                    let mut _193: __private::__idl::IdlAccountsBumps;
                    scope 71 {
                        debug bumps => _193;
                        let mut _194: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                        scope 72 {
                            debug reallocs => _194;
                            let mut _195: __private::__idl::IdlAccounts<'_>;
                            let _210: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _213: __private::__idl::IdlAccounts<'_>;
                            let mut _325: &[u8; 0];
                            scope 73 {
                                debug accounts => _195;
                                let _222: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _225: ();
                                let _232: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _235: ();
                                scope 78 {
                                    debug residual => _222;
                                    scope 79 {
                                    }
                                }
                                scope 80 {
                                    debug val => _225;
                                    scope 81 {
                                    }
                                }
                                scope 82 {
                                    debug residual => _232;
                                    scope 83 {
                                    }
                                }
                                scope 84 {
                                    debug val => _235;
                                    scope 85 {
                                    }
                                }
                            }
                            scope 74 {
                                debug residual => _210;
                                scope 75 {
                                }
                            }
                            scope 76 {
                                debug val => _213;
                                scope 77 {
                                }
                            }
                        }
                    }
                }
                scope 86 {
                    debug new_authority => _236;
                    let mut _237: __private::__idl::IdlAccountsBumps;
                    scope 87 {
                        debug bumps => _237;
                        let mut _238: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                        scope 88 {
                            debug reallocs => _238;
                            let mut _239: __private::__idl::IdlAccounts<'_>;
                            let _254: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _257: __private::__idl::IdlAccounts<'_>;
                            let mut _324: &[u8; 0];
                            scope 89 {
                                debug accounts => _239;
                                let _266: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _269: ();
                                let _276: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _279: ();
                                scope 94 {
                                    debug residual => _266;
                                    scope 95 {
                                    }
                                }
                                scope 96 {
                                    debug val => _269;
                                    scope 97 {
                                    }
                                }
                                scope 98 {
                                    debug residual => _276;
                                    scope 99 {
                                    }
                                }
                                scope 100 {
                                    debug val => _279;
                                    scope 101 {
                                    }
                                }
                            }
                            scope 90 {
                                debug residual => _254;
                                scope 91 {
                                }
                            }
                            scope 92 {
                                debug val => _257;
                                scope 93 {
                                }
                            }
                        }
                    }
                }
                scope 102 {
                    debug bumps => _280;
                    let mut _281: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                    scope 103 {
                        debug reallocs => _281;
                        let mut _282: __private::__idl::IdlSetBuffer<'_>;
                        let _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _300: __private::__idl::IdlSetBuffer<'_>;
                        let mut _323: &[u8; 0];
                        scope 104 {
                            debug accounts => _282;
                            let _308: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _311: ();
                            let _318: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _321: ();
                            scope 109 {
                                debug residual => _308;
                                scope 110 {
                                }
                            }
                            scope 111 {
                                debug val => _311;
                                scope 112 {
                                }
                            }
                            scope 113 {
                                debug residual => _318;
                                scope 114 {
                                }
                            }
                            scope 115 {
                                debug val => _321;
                                scope 116 {
                                }
                            }
                        }
                        scope 105 {
                            debug residual => _297;
                            scope 106 {
                            }
                        }
                        scope 107 {
                            debug val => _300;
                            scope 108 {
                            }
                        }
                    }
                }
            }
            scope 4 {
                debug residual => _14;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _17;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _331 = const false;
        _330 = const false;
        _332 = const false;
        StorageLive(_4);
        _4 = _2;
        StorageLive(_5);
        _5 = &(*_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _5;
        _10 = &mut (*_11);
        _9 = <IdlInstruction as BorshDeserialize>::deserialize(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_12);
        _12 = {closure@programs/drift/src/lib.rs:69:1: 69:11};
        _8 = std::result::Result::<IdlInstruction, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/lib.rs:69:1: 69:11}>(move _9, move _12) -> [return: bb2, unwind: bb173];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_9);
        _7 = <std::result::Result<IdlInstruction, anchor_lang::error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind: bb173];
    }

    bb3: {
        StorageDead(_8);
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = move ((_7 as Continue).0: anchor_lang::idl::IdlInstruction);
        _330 = const true;
        _332 = const true;
        _6 = move _17;
        StorageDead(_17);
        _335 = discriminant(_7);
        StorageDead(_11);
        StorageDead(_7);
        StorageLive(_18);
        _19 = discriminant(_6);
        switchInt(move _19) -> [0: bb9, 1: bb68, 2: bb87, 3: bb8, 4: bb106, 5: bb48, 6: bb29, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _16) -> [return: bb7, unwind: bb201];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        _333 = discriminant(_7);
        StorageDead(_11);
        StorageDead(_7);
        goto -> bb162;
    }

    bb8: {
        StorageLive(_280);
        _280 = <IdlSetBufferBumps as Default>::default() -> [return: bb125, unwind: bb200];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_6 as Create).0: u64);
        StorageLive(_21);
        _21 = <IdlCreateAccountsBumps as Default>::default() -> [return: bb10, unwind: bb200];
    }

    bb10: {
        StorageLive(_22);
        _22 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb11, unwind: bb200];
    }

    bb11: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _4;
        _27 = &mut (*_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _329 = const _;
        _31 = &(*_329);
        _30 = &(*_31);
        _29 = move _30 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _21;
        _33 = &mut (*_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &mut _22;
        _35 = &mut (*_36);
        _25 = <__idl::IdlCreateAccounts<'_> as anchor_lang::Accounts<'_, IdlCreateAccountsBumps>>::try_accounts(move _26, move _27, move _29, move _33, move _35) -> [return: bb12, unwind: bb172];
    }

    bb12: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<__idl::IdlCreateAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb13, unwind: bb172];
    }

    bb13: {
        StorageDead(_25);
        _37 = discriminant(_24);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        StorageLive(_41);
        _41 = move ((_24 as Continue).0: __private::__idl::IdlCreateAccounts<'_>);
        _23 = move _41;
        StorageDead(_41);
        _337 = discriminant(_24);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_24);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_1);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut _23;
        _46 = &mut (*_47);
        StorageLive(_48);
        _48 = _20;
        _44 = __idl_create_account(move _45, move _46, move _48) -> [return: bb17, unwind: bb171];
    }

    bb15: {
        StorageLive(_38);
        _38 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _40) -> [return: bb16, unwind: bb197];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        _421 = discriminant(_24);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_24);
        goto -> bb159;
    }

    bb17: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        _43 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _44) -> [return: bb18, unwind: bb171];
    }

    bb18: {
        StorageDead(_44);
        _49 = discriminant(_43);
        switchInt(move _49) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_53);
        _53 = ((_43 as Continue).0: ());
        _42 = _53;
        StorageDead(_53);
        _339 = discriminant(_43);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_23;
        StorageLive(_58);
        _58 = &(*_1);
        _56 = <__idl::IdlCreateAccounts<'_> as anchor_lang::AccountsExit<'_>>::exit(move _57, move _58) -> [return: bb22, unwind: bb171];
    }

    bb20: {
        StorageLive(_50);
        _50 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _52) -> [return: bb21, unwind: bb196];
    }

    bb21: {
        StorageDead(_52);
        StorageDead(_50);
        _419 = discriminant(_43);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb158;
    }

    bb22: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _56) -> [return: bb23, unwind: bb171];
    }

    bb23: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: ());
        _54 = _63;
        StorageDead(_63);
        _341 = discriminant(_55);
        StorageDead(_55);
        StorageDead(_54);
        _18 = const ();
        drop(_23) -> [return: bb27, unwind: bb172];
    }

    bb25: {
        StorageLive(_60);
        _60 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _62) -> [return: bb26, unwind: bb195];
    }

    bb26: {
        StorageDead(_62);
        StorageDead(_60);
        _417 = discriminant(_55);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb158;
    }

    bb27: {
        StorageDead(_23);
        drop(_22) -> [return: bb28, unwind: bb200];
    }

    bb28: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb143;
    }

    bb29: {
        StorageLive(_64);
        _64 = ((_6 as Resize).0: u64);
        StorageLive(_65);
        _65 = <IdlResizeAccountBumps as Default>::default() -> [return: bb30, unwind: bb200];
    }

    bb30: {
        StorageLive(_66);
        _66 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb31, unwind: bb200];
    }

    bb31: {
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &mut _4;
        _71 = &mut (*_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _328 = const _;
        _75 = &(*_328);
        _74 = &(*_75);
        _73 = move _74 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut _65;
        _77 = &mut (*_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut _66;
        _79 = &mut (*_80);
        _69 = <__idl::IdlResizeAccount<'_> as anchor_lang::Accounts<'_, IdlResizeAccountBumps>>::try_accounts(move _70, move _71, move _73, move _77, move _79) -> [return: bb32, unwind: bb170];
    }

    bb32: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<__idl::IdlResizeAccount<'_>, anchor_lang::error::Error> as Try>::branch(move _69) -> [return: bb33, unwind: bb170];
    }

    bb33: {
        StorageDead(_69);
        _81 = discriminant(_68);
        switchInt(move _81) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_85);
        _85 = move ((_68 as Continue).0: __private::__idl::IdlResizeAccount<'_>);
        _67 = move _85;
        StorageDead(_85);
        _343 = discriminant(_68);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_68);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_1);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &mut _67;
        _90 = &mut (*_91);
        StorageLive(_92);
        _92 = _64;
        _88 = __idl_resize_account(move _89, move _90, move _92) -> [return: bb37, unwind: bb170];
    }

    bb35: {
        StorageLive(_82);
        _82 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_84);
        _84 = move _82;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _84) -> [return: bb36, unwind: bb194];
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_82);
        _415 = discriminant(_68);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_68);
        goto -> bb156;
    }

    bb37: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_89);
        _87 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _88) -> [return: bb38, unwind: bb170];
    }

    bb38: {
        StorageDead(_88);
        _93 = discriminant(_87);
        switchInt(move _93) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_97);
        _97 = ((_87 as Continue).0: ());
        _86 = _97;
        StorageDead(_97);
        _345 = discriminant(_87);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_67;
        StorageLive(_102);
        _102 = &(*_1);
        _100 = <__idl::IdlResizeAccount<'_> as anchor_lang::AccountsExit<'_>>::exit(move _101, move _102) -> [return: bb42, unwind: bb170];
    }

    bb40: {
        StorageLive(_94);
        _94 = move ((_87 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _96) -> [return: bb41, unwind: bb193];
    }

    bb41: {
        StorageDead(_96);
        StorageDead(_94);
        _413 = discriminant(_87);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb156;
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _100) -> [return: bb43, unwind: bb170];
    }

    bb43: {
        StorageDead(_100);
        _103 = discriminant(_99);
        switchInt(move _103) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_107);
        _107 = ((_99 as Continue).0: ());
        _98 = _107;
        StorageDead(_107);
        _347 = discriminant(_99);
        StorageDead(_99);
        StorageDead(_98);
        _18 = const ();
        StorageDead(_67);
        drop(_66) -> [return: bb47, unwind: bb200];
    }

    bb45: {
        StorageLive(_104);
        _104 = move ((_99 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _106) -> [return: bb46, unwind: bb192];
    }

    bb46: {
        StorageDead(_106);
        StorageDead(_104);
        _411 = discriminant(_99);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb156;
    }

    bb47: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb143;
    }

    bb48: {
        StorageLive(_108);
        _108 = <IdlCloseAccountBumps as Default>::default() -> [return: bb49, unwind: bb200];
    }

    bb49: {
        StorageLive(_109);
        _109 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb50, unwind: bb200];
    }

    bb50: {
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_1);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &mut _4;
        _114 = &mut (*_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _327 = const _;
        _118 = &(*_327);
        _117 = &(*_118);
        _116 = move _117 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &mut _108;
        _120 = &mut (*_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut _109;
        _122 = &mut (*_123);
        _112 = <__idl::IdlCloseAccount<'_> as anchor_lang::Accounts<'_, IdlCloseAccountBumps>>::try_accounts(move _113, move _114, move _116, move _120, move _122) -> [return: bb51, unwind: bb169];
    }

    bb51: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_113);
        _111 = <std::result::Result<__idl::IdlCloseAccount<'_>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb52, unwind: bb169];
    }

    bb52: {
        StorageDead(_112);
        _124 = discriminant(_111);
        switchInt(move _124) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_128);
        _128 = move ((_111 as Continue).0: __private::__idl::IdlCloseAccount<'_>);
        _110 = move _128;
        StorageDead(_128);
        _349 = discriminant(_111);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_111);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_1);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &mut _110;
        _133 = &mut (*_134);
        _131 = __idl_close_account(move _132, move _133) -> [return: bb56, unwind: bb168];
    }

    bb54: {
        StorageLive(_125);
        _125 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _127) -> [return: bb55, unwind: bb191];
    }

    bb55: {
        StorageDead(_127);
        StorageDead(_125);
        _409 = discriminant(_111);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_111);
        goto -> bb154;
    }

    bb56: {
        StorageDead(_133);
        StorageDead(_132);
        _130 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _131) -> [return: bb57, unwind: bb168];
    }

    bb57: {
        StorageDead(_131);
        _135 = discriminant(_130);
        switchInt(move _135) -> [0: bb58, 1: bb59, otherwise: bb5];
    }

    bb58: {
        StorageLive(_139);
        _139 = ((_130 as Continue).0: ());
        _129 = _139;
        StorageDead(_139);
        _351 = discriminant(_130);
        StorageDead(_134);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_110;
        StorageLive(_144);
        _144 = &(*_1);
        _142 = <__idl::IdlCloseAccount<'_> as anchor_lang::AccountsExit<'_>>::exit(move _143, move _144) -> [return: bb61, unwind: bb168];
    }

    bb59: {
        StorageLive(_136);
        _136 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb60, unwind: bb190];
    }

    bb60: {
        StorageDead(_138);
        StorageDead(_136);
        _407 = discriminant(_130);
        StorageDead(_134);
        StorageDead(_130);
        StorageDead(_129);
        goto -> bb153;
    }

    bb61: {
        StorageDead(_144);
        StorageDead(_143);
        _141 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb62, unwind: bb168];
    }

    bb62: {
        StorageDead(_142);
        _145 = discriminant(_141);
        switchInt(move _145) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_149);
        _149 = ((_141 as Continue).0: ());
        _140 = _149;
        StorageDead(_149);
        _353 = discriminant(_141);
        StorageDead(_141);
        StorageDead(_140);
        _18 = const ();
        drop(_110) -> [return: bb66, unwind: bb169];
    }

    bb64: {
        StorageLive(_146);
        _146 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_148);
        _148 = move _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _148) -> [return: bb65, unwind: bb189];
    }

    bb65: {
        StorageDead(_148);
        StorageDead(_146);
        _405 = discriminant(_141);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb153;
    }

    bb66: {
        StorageDead(_110);
        drop(_109) -> [return: bb67, unwind: bb200];
    }

    bb67: {
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb143;
    }

    bb68: {
        StorageLive(_150);
        _150 = <IdlCreateBufferBumps as Default>::default() -> [return: bb69, unwind: bb200];
    }

    bb69: {
        StorageLive(_151);
        _151 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb70, unwind: bb200];
    }

    bb70: {
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &(*_1);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &mut _4;
        _156 = &mut (*_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _326 = const _;
        _160 = &(*_326);
        _159 = &(*_160);
        _158 = move _159 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &mut _150;
        _162 = &mut (*_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &mut _151;
        _164 = &mut (*_165);
        _154 = <__idl::IdlCreateBuffer<'_> as anchor_lang::Accounts<'_, IdlCreateBufferBumps>>::try_accounts(move _155, move _156, move _158, move _162, move _164) -> [return: bb71, unwind: bb167];
    }

    bb71: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        _153 = <std::result::Result<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error> as Try>::branch(move _154) -> [return: bb72, unwind: bb167];
    }

    bb72: {
        StorageDead(_154);
        _166 = discriminant(_153);
        switchInt(move _166) -> [0: bb73, 1: bb74, otherwise: bb5];
    }

    bb73: {
        StorageLive(_170);
        _170 = move ((_153 as Continue).0: __private::__idl::IdlCreateBuffer<'_>);
        _152 = move _170;
        StorageDead(_170);
        _355 = discriminant(_153);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_153);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &(*_1);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &mut _152;
        _175 = &mut (*_176);
        _173 = __idl_create_buffer(move _174, move _175) -> [return: bb76, unwind: bb167];
    }

    bb74: {
        StorageLive(_167);
        _167 = move ((_153 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb75, unwind: bb188];
    }

    bb75: {
        StorageDead(_169);
        StorageDead(_167);
        _403 = discriminant(_153);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_153);
        goto -> bb151;
    }

    bb76: {
        StorageDead(_175);
        StorageDead(_174);
        _172 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb77, unwind: bb167];
    }

    bb77: {
        StorageDead(_173);
        _177 = discriminant(_172);
        switchInt(move _177) -> [0: bb78, 1: bb79, otherwise: bb5];
    }

    bb78: {
        StorageLive(_181);
        _181 = ((_172 as Continue).0: ());
        _171 = _181;
        StorageDead(_181);
        _357 = discriminant(_172);
        StorageDead(_176);
        StorageDead(_172);
        StorageDead(_171);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_152;
        StorageLive(_186);
        _186 = &(*_1);
        _184 = <__idl::IdlCreateBuffer<'_> as anchor_lang::AccountsExit<'_>>::exit(move _185, move _186) -> [return: bb81, unwind: bb167];
    }

    bb79: {
        StorageLive(_178);
        _178 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_180);
        _180 = move _178;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _180) -> [return: bb80, unwind: bb187];
    }

    bb80: {
        StorageDead(_180);
        StorageDead(_178);
        _401 = discriminant(_172);
        StorageDead(_176);
        StorageDead(_172);
        StorageDead(_171);
        goto -> bb151;
    }

    bb81: {
        StorageDead(_186);
        StorageDead(_185);
        _183 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _184) -> [return: bb82, unwind: bb167];
    }

    bb82: {
        StorageDead(_184);
        _187 = discriminant(_183);
        switchInt(move _187) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_191);
        _191 = ((_183 as Continue).0: ());
        _182 = _191;
        StorageDead(_191);
        _359 = discriminant(_183);
        StorageDead(_183);
        StorageDead(_182);
        _18 = const ();
        StorageDead(_152);
        drop(_151) -> [return: bb86, unwind: bb200];
    }

    bb84: {
        StorageLive(_188);
        _188 = move ((_183 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_190);
        _190 = move _188;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _190) -> [return: bb85, unwind: bb186];
    }

    bb85: {
        StorageDead(_190);
        StorageDead(_188);
        _399 = discriminant(_183);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb151;
    }

    bb86: {
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb143;
    }

    bb87: {
        StorageLive(_192);
        _332 = const false;
        _331 = const true;
        _192 = move ((_6 as Write).0: std::vec::Vec<u8>);
        StorageLive(_193);
        _193 = <IdlAccountsBumps as Default>::default() -> [return: bb88, unwind: bb185];
    }

    bb88: {
        StorageLive(_194);
        _194 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb89, unwind: bb185];
    }

    bb89: {
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &(*_1);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &mut _4;
        _199 = &mut (*_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _325 = const _;
        _203 = &(*_325);
        _202 = &(*_203);
        _201 = move _202 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_202);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &mut _193;
        _205 = &mut (*_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &mut _194;
        _207 = &mut (*_208);
        _197 = <__idl::IdlAccounts<'_> as anchor_lang::Accounts<'_, IdlAccountsBumps>>::try_accounts(move _198, move _199, move _201, move _205, move _207) -> [return: bb90, unwind: bb166];
    }

    bb90: {
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        _196 = <std::result::Result<__idl::IdlAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _197) -> [return: bb91, unwind: bb166];
    }

    bb91: {
        StorageDead(_197);
        _209 = discriminant(_196);
        switchInt(move _209) -> [0: bb92, 1: bb93, otherwise: bb5];
    }

    bb92: {
        StorageLive(_213);
        _213 = move ((_196 as Continue).0: __private::__idl::IdlAccounts<'_>);
        _195 = move _213;
        StorageDead(_213);
        _361 = discriminant(_196);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_196);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(*_1);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &mut _195;
        _218 = &mut (*_219);
        StorageLive(_220);
        _331 = const false;
        _220 = move _192;
        _216 = __idl_write(move _217, move _218, move _220) -> [return: bb95, unwind: bb166];
    }

    bb93: {
        StorageLive(_210);
        _210 = move ((_196 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_212);
        _212 = move _210;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _212) -> [return: bb94, unwind: bb183];
    }

    bb94: {
        StorageDead(_212);
        StorageDead(_210);
        _397 = discriminant(_196);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_196);
        goto -> bb148;
    }

    bb95: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_217);
        _215 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _216) -> [return: bb96, unwind: bb166];
    }

    bb96: {
        StorageDead(_216);
        _221 = discriminant(_215);
        switchInt(move _221) -> [0: bb97, 1: bb98, otherwise: bb5];
    }

    bb97: {
        StorageLive(_225);
        _225 = ((_215 as Continue).0: ());
        _214 = _225;
        StorageDead(_225);
        _363 = discriminant(_215);
        StorageDead(_219);
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_195;
        StorageLive(_230);
        _230 = &(*_1);
        _228 = <__idl::IdlAccounts<'_> as anchor_lang::AccountsExit<'_>>::exit(move _229, move _230) -> [return: bb100, unwind: bb166];
    }

    bb98: {
        StorageLive(_222);
        _222 = move ((_215 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_224);
        _224 = move _222;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _224) -> [return: bb99, unwind: bb182];
    }

    bb99: {
        StorageDead(_224);
        StorageDead(_222);
        _395 = discriminant(_215);
        StorageDead(_219);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb148;
    }

    bb100: {
        StorageDead(_230);
        StorageDead(_229);
        _227 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _228) -> [return: bb101, unwind: bb166];
    }

    bb101: {
        StorageDead(_228);
        _231 = discriminant(_227);
        switchInt(move _231) -> [0: bb102, 1: bb103, otherwise: bb5];
    }

    bb102: {
        StorageLive(_235);
        _235 = ((_227 as Continue).0: ());
        _226 = _235;
        StorageDead(_235);
        _365 = discriminant(_227);
        StorageDead(_227);
        StorageDead(_226);
        _18 = const ();
        StorageDead(_195);
        drop(_194) -> [return: bb105, unwind: bb185];
    }

    bb103: {
        StorageLive(_232);
        _232 = move ((_227 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_234);
        _234 = move _232;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _234) -> [return: bb104, unwind: bb181];
    }

    bb104: {
        StorageDead(_234);
        StorageDead(_232);
        _393 = discriminant(_227);
        StorageDead(_227);
        StorageDead(_226);
        goto -> bb148;
    }

    bb105: {
        StorageDead(_194);
        StorageDead(_193);
        _331 = const false;
        StorageDead(_192);
        goto -> bb143;
    }

    bb106: {
        StorageLive(_236);
        _236 = ((_6 as SetAuthority).0: anchor_lang::prelude::Pubkey);
        StorageLive(_237);
        _237 = <IdlAccountsBumps as Default>::default() -> [return: bb107, unwind: bb200];
    }

    bb107: {
        StorageLive(_238);
        _238 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb108, unwind: bb200];
    }

    bb108: {
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &(*_1);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &mut _4;
        _243 = &mut (*_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _324 = const _;
        _247 = &(*_324);
        _246 = &(*_247);
        _245 = move _246 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &mut _237;
        _249 = &mut (*_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &mut _238;
        _251 = &mut (*_252);
        _241 = <__idl::IdlAccounts<'_> as anchor_lang::Accounts<'_, IdlAccountsBumps>>::try_accounts(move _242, move _243, move _245, move _249, move _251) -> [return: bb109, unwind: bb165];
    }

    bb109: {
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_242);
        _240 = <std::result::Result<__idl::IdlAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _241) -> [return: bb110, unwind: bb165];
    }

    bb110: {
        StorageDead(_241);
        _253 = discriminant(_240);
        switchInt(move _253) -> [0: bb111, 1: bb112, otherwise: bb5];
    }

    bb111: {
        StorageLive(_257);
        _257 = move ((_240 as Continue).0: __private::__idl::IdlAccounts<'_>);
        _239 = move _257;
        StorageDead(_257);
        _367 = discriminant(_240);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_240);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &(*_1);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &mut _239;
        _262 = &mut (*_263);
        StorageLive(_264);
        _264 = _236;
        _260 = __idl_set_authority(move _261, move _262, move _264) -> [return: bb114, unwind: bb165];
    }

    bb112: {
        StorageLive(_254);
        _254 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_256);
        _256 = move _254;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _256) -> [return: bb113, unwind: bb180];
    }

    bb113: {
        StorageDead(_256);
        StorageDead(_254);
        _391 = discriminant(_240);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_240);
        goto -> bb146;
    }

    bb114: {
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        _259 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _260) -> [return: bb115, unwind: bb165];
    }

    bb115: {
        StorageDead(_260);
        _265 = discriminant(_259);
        switchInt(move _265) -> [0: bb116, 1: bb117, otherwise: bb5];
    }

    bb116: {
        StorageLive(_269);
        _269 = ((_259 as Continue).0: ());
        _258 = _269;
        StorageDead(_269);
        _369 = discriminant(_259);
        StorageDead(_263);
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_239;
        StorageLive(_274);
        _274 = &(*_1);
        _272 = <__idl::IdlAccounts<'_> as anchor_lang::AccountsExit<'_>>::exit(move _273, move _274) -> [return: bb119, unwind: bb165];
    }

    bb117: {
        StorageLive(_266);
        _266 = move ((_259 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_268);
        _268 = move _266;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _268) -> [return: bb118, unwind: bb179];
    }

    bb118: {
        StorageDead(_268);
        StorageDead(_266);
        _389 = discriminant(_259);
        StorageDead(_263);
        StorageDead(_259);
        StorageDead(_258);
        goto -> bb146;
    }

    bb119: {
        StorageDead(_274);
        StorageDead(_273);
        _271 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _272) -> [return: bb120, unwind: bb165];
    }

    bb120: {
        StorageDead(_272);
        _275 = discriminant(_271);
        switchInt(move _275) -> [0: bb121, 1: bb122, otherwise: bb5];
    }

    bb121: {
        StorageLive(_279);
        _279 = ((_271 as Continue).0: ());
        _270 = _279;
        StorageDead(_279);
        _371 = discriminant(_271);
        StorageDead(_271);
        StorageDead(_270);
        _18 = const ();
        StorageDead(_239);
        drop(_238) -> [return: bb124, unwind: bb200];
    }

    bb122: {
        StorageLive(_276);
        _276 = move ((_271 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_278);
        _278 = move _276;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _278) -> [return: bb123, unwind: bb178];
    }

    bb123: {
        StorageDead(_278);
        StorageDead(_276);
        _387 = discriminant(_271);
        StorageDead(_271);
        StorageDead(_270);
        goto -> bb146;
    }

    bb124: {
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb143;
    }

    bb125: {
        StorageLive(_281);
        _281 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb126, unwind: bb200];
    }

    bb126: {
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &(*_1);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &mut _4;
        _286 = &mut (*_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _323 = const _;
        _290 = &(*_323);
        _289 = &(*_290);
        _288 = move _289 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_289);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &mut _280;
        _292 = &mut (*_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &mut _281;
        _294 = &mut (*_295);
        _284 = <__idl::IdlSetBuffer<'_> as anchor_lang::Accounts<'_, IdlSetBufferBumps>>::try_accounts(move _285, move _286, move _288, move _292, move _294) -> [return: bb127, unwind: bb164];
    }

    bb127: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        _283 = <std::result::Result<__idl::IdlSetBuffer<'_>, anchor_lang::error::Error> as Try>::branch(move _284) -> [return: bb128, unwind: bb164];
    }

    bb128: {
        StorageDead(_284);
        _296 = discriminant(_283);
        switchInt(move _296) -> [0: bb129, 1: bb130, otherwise: bb5];
    }

    bb129: {
        StorageLive(_300);
        _300 = move ((_283 as Continue).0: __private::__idl::IdlSetBuffer<'_>);
        _282 = move _300;
        StorageDead(_300);
        _373 = discriminant(_283);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_283);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &(*_1);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &mut _282;
        _305 = &mut (*_306);
        _303 = __idl_set_buffer(move _304, move _305) -> [return: bb132, unwind: bb164];
    }

    bb130: {
        StorageLive(_297);
        _297 = move ((_283 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_299);
        _299 = move _297;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _299) -> [return: bb131, unwind: bb177];
    }

    bb131: {
        StorageDead(_299);
        StorageDead(_297);
        _385 = discriminant(_283);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_283);
        goto -> bb144;
    }

    bb132: {
        StorageDead(_305);
        StorageDead(_304);
        _302 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _303) -> [return: bb133, unwind: bb164];
    }

    bb133: {
        StorageDead(_303);
        _307 = discriminant(_302);
        switchInt(move _307) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_311);
        _311 = ((_302 as Continue).0: ());
        _301 = _311;
        StorageDead(_311);
        _375 = discriminant(_302);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_282;
        StorageLive(_316);
        _316 = &(*_1);
        _314 = <__idl::IdlSetBuffer<'_> as anchor_lang::AccountsExit<'_>>::exit(move _315, move _316) -> [return: bb137, unwind: bb164];
    }

    bb135: {
        StorageLive(_308);
        _308 = move ((_302 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_310);
        _310 = move _308;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _310) -> [return: bb136, unwind: bb176];
    }

    bb136: {
        StorageDead(_310);
        StorageDead(_308);
        _383 = discriminant(_302);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb144;
    }

    bb137: {
        StorageDead(_316);
        StorageDead(_315);
        _313 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _314) -> [return: bb138, unwind: bb164];
    }

    bb138: {
        StorageDead(_314);
        _317 = discriminant(_313);
        switchInt(move _317) -> [0: bb139, 1: bb140, otherwise: bb5];
    }

    bb139: {
        StorageLive(_321);
        _321 = ((_313 as Continue).0: ());
        _312 = _321;
        StorageDead(_321);
        _377 = discriminant(_313);
        StorageDead(_313);
        StorageDead(_312);
        _18 = const ();
        StorageDead(_282);
        drop(_281) -> [return: bb142, unwind: bb200];
    }

    bb140: {
        StorageLive(_318);
        _318 = move ((_313 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_320);
        _320 = move _318;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _320) -> [return: bb141, unwind: bb175];
    }

    bb141: {
        StorageDead(_320);
        StorageDead(_318);
        _381 = discriminant(_313);
        StorageDead(_313);
        StorageDead(_312);
        goto -> bb144;
    }

    bb142: {
        StorageDead(_281);
        StorageDead(_280);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_18);
        StorageLive(_322);
        _322 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _322);
        StorageDead(_322);
        _379 = discriminant(_6);
        _330 = const false;
        _332 = const false;
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb163;
    }

    bb144: {
        StorageDead(_282);
        drop(_281) -> [return: bb145, unwind: bb200];
    }

    bb145: {
        StorageDead(_281);
        StorageDead(_280);
        goto -> bb161;
    }

    bb146: {
        StorageDead(_239);
        drop(_238) -> [return: bb147, unwind: bb200];
    }

    bb147: {
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb161;
    }

    bb148: {
        StorageDead(_195);
        drop(_194) -> [return: bb149, unwind: bb185];
    }

    bb149: {
        StorageDead(_194);
        StorageDead(_193);
        switchInt(_331) -> [0: bb150, otherwise: bb174];
    }

    bb150: {
        _331 = const false;
        StorageDead(_192);
        goto -> bb161;
    }

    bb151: {
        StorageDead(_152);
        drop(_151) -> [return: bb152, unwind: bb200];
    }

    bb152: {
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb161;
    }

    bb153: {
        drop(_110) -> [return: bb154, unwind: bb169];
    }

    bb154: {
        StorageDead(_110);
        drop(_109) -> [return: bb155, unwind: bb200];
    }

    bb155: {
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb161;
    }

    bb156: {
        StorageDead(_67);
        drop(_66) -> [return: bb157, unwind: bb200];
    }

    bb157: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb161;
    }

    bb158: {
        drop(_23) -> [return: bb159, unwind: bb172];
    }

    bb159: {
        StorageDead(_23);
        drop(_22) -> [return: bb160, unwind: bb200];
    }

    bb160: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_18);
        _423 = discriminant(_6);
        goto -> bb162;
    }

    bb162: {
        _330 = const false;
        _332 = const false;
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb163;
    }

    bb163: {
        return;
    }

    bb164 (cleanup): {
        drop(_281) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_238) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_194) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_151) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_110) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_109) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_66) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_23) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_22) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        resume;
    }

    bb174: {
        drop(_192) -> [return: bb150, unwind: bb200];
    }

    bb175 (cleanup): {
        _425 = discriminant(_313);
        goto -> bb164;
    }

    bb176 (cleanup): {
        _426 = discriminant(_302);
        goto -> bb164;
    }

    bb177 (cleanup): {
        _427 = discriminant(_283);
        goto -> bb164;
    }

    bb178 (cleanup): {
        _428 = discriminant(_271);
        goto -> bb165;
    }

    bb179 (cleanup): {
        _429 = discriminant(_259);
        goto -> bb165;
    }

    bb180 (cleanup): {
        _430 = discriminant(_240);
        goto -> bb165;
    }

    bb181 (cleanup): {
        _431 = discriminant(_227);
        goto -> bb166;
    }

    bb182 (cleanup): {
        _432 = discriminant(_215);
        goto -> bb166;
    }

    bb183 (cleanup): {
        _433 = discriminant(_196);
        goto -> bb166;
    }

    bb184 (cleanup): {
        drop(_192) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        switchInt(_331) -> [0: bb200, otherwise: bb184];
    }

    bb186 (cleanup): {
        _434 = discriminant(_183);
        goto -> bb167;
    }

    bb187 (cleanup): {
        _435 = discriminant(_172);
        goto -> bb167;
    }

    bb188 (cleanup): {
        _436 = discriminant(_153);
        goto -> bb167;
    }

    bb189 (cleanup): {
        _437 = discriminant(_141);
        goto -> bb168;
    }

    bb190 (cleanup): {
        _438 = discriminant(_130);
        goto -> bb168;
    }

    bb191 (cleanup): {
        _439 = discriminant(_111);
        goto -> bb169;
    }

    bb192 (cleanup): {
        _440 = discriminant(_99);
        goto -> bb170;
    }

    bb193 (cleanup): {
        _441 = discriminant(_87);
        goto -> bb170;
    }

    bb194 (cleanup): {
        _442 = discriminant(_68);
        goto -> bb170;
    }

    bb195 (cleanup): {
        _443 = discriminant(_55);
        goto -> bb171;
    }

    bb196 (cleanup): {
        _444 = discriminant(_43);
        goto -> bb171;
    }

    bb197 (cleanup): {
        _445 = discriminant(_24);
        goto -> bb172;
    }

    bb198 (cleanup): {
        switchInt(_332) -> [0: bb173, otherwise: bb199];
    }

    bb199 (cleanup): {
        drop(((_6 as Write).0: std::vec::Vec<u8>)) -> [return: bb173, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        _446 = discriminant(_6);
        switchInt(move _446) -> [2: bb198, otherwise: bb173];
    }

    bb201 (cleanup): {
        _447 = discriminant(_7);
        goto -> bb173;
    }
}
