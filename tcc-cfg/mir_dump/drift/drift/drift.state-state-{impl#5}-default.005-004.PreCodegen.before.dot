digraph Mir_0_4179 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;PriceDivergenceGuardRails as Default&gt;::default() -&gt; state::state::PriceDivergenceGuardRails<br align="left"/>let mut _1: u64;<br align="left"/>let mut _2: bool;<br align="left"/>let mut _3: u64;<br align="left"/>let mut _4: bool;<br align="left"/>>;
    bb0__0_4179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_1)<br/>_2 = Eq(const 10_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _2, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb1__0_4179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_1 = Div(const _, const 10_u64)<br/>StorageLive(_3)<br/>_4 = Eq(const 2_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _4, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb2__0_4179 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = Div(const _, const 2_u64)<br/>_0 = PriceDivergenceGuardRails { mark_oracle_percent_divergence: move _1, oracle_twap_5min_percent_divergence: move _3 }<br/>StorageDead(_3)<br/>StorageDead(_1)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4179 -> bb1__0_4179 [label="success"];
    bb1__0_4179 -> bb2__0_4179 [label="success"];
}
