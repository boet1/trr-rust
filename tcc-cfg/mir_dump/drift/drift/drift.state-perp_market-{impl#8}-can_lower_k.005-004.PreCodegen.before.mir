// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::can_lower_k` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::can_lower_k(_1: &AMM) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _2: i128;
    let _3: i128;
    let mut _4: (i128, i128);
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _6: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _7: &state::perp_market::AMM;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: (i128, i128);
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _15: std::result::Result<u128, error::ErrorCode>;
    let mut _16: u64;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: bool;
    let mut _24: u128;
    let mut _25: i128;
    let mut _26: u128;
    let mut _27: u128;
    let mut _28: i128;
    let mut _29: u128;
    let mut _30: i128;
    let mut _31: bool;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: i128;
    let mut _35: u128;
    let mut _36: u128;
    let mut _37: u128;
    let mut _38: u128;
    let mut _39: u128;
    let mut _40: i128;
    let mut _41: u128;
    let mut _42: i128;
    let mut _43: bool;
    scope 1 {
        debug max_bids => _2;
        debug max_asks => _3;
        let _13: u128;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: u128;
        scope 6 {
            debug min_order_size_u128 => _13;
            let _22: bool;
            scope 11 {
                debug can_lower => _22;
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = calculate_market_open_bids_asks(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: (i128, i128));
        _4 = _12;
        StorageDead(_12);
        StorageLive(_2);
        _2 = (_4.0: i128);
        StorageLive(_3);
        _3 = (_4.1: i128);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).54: u64);
        _15 = <u64 as Cast>::cast::<u128>(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb27;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: u128);
        _13 = _21;
        StorageDead(_21);
        StorageDead(_14);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).15: i128);
        _24 = core::num::<impl i128>::unsigned_abs(move _25) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb27;
    }

    bb12: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _2;
        _27 = core::num::<impl i128>::unsigned_abs(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        _29 = core::num::<impl i128>::unsigned_abs(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        _26 = <u128 as Ord>::min(move _27, move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_27);
        _23 = Lt(move _24, move _26);
        switchInt(move _23) -> [0: bb21, otherwise: bb16];
    }

    bb16: {
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = ((*_1).15: i128);
        _33 = core::num::<impl i128>::unsigned_abs(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        StorageLive(_35);
        _35 = _13;
        _32 = <u128 as Ord>::max(move _33, move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = ((*_1).10: u128);
        _31 = Lt(move _32, move _36);
        switchInt(move _31) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_32);
        StorageLive(_37);
        _37 = _13;
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _2;
        _39 = core::num::<impl i128>::unsigned_abs(move _40) -> [return: bb23, unwind continue];
    }

    bb20: {
        StorageDead(_36);
        StorageDead(_32);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_26);
        StorageDead(_24);
        goto -> bb22;
    }

    bb22: {
        _22 = const false;
        goto -> bb26;
    }

    bb23: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        _41 = core::num::<impl i128>::unsigned_abs(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        _38 = <u128 as Ord>::max(move _39, move _41) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_41);
        StorageDead(_39);
        _22 = Lt(move _37, move _38);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_31);
        StorageDead(_23);
        StorageLive(_43);
        _43 = _22;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _43);
        StorageDead(_43);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}
