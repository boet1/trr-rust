// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::to_serum_v3_fulfillment_config` before PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::to_serum_v3_fulfillment_config(_1: &SerumContext<'_, '_>, _2: &anchor_lang::prelude::Pubkey, _3: u16) -> std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> {
    debug self => _1;
    debug serum_fulfillment_config_key => _2;
    debug market_index => _3;
    let mut _0: std::result::Result<state::fulfillment_params::serum::SerumV3FulfillmentConfig, error::ErrorCode>;
    let _4: serum_dex::state::Market<'_>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, serum_dex::state::Market<'_>>;
    let mut _6: std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode>;
    let mut _7: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: serum_dex::state::Market<'_>;
    let mut _14: &serum_dex::state::MarketState;
    let mut _15: &serum_dex::state::Market<'_>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _18: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _19: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _20: &[u8];
    let _21: &[u8];
    let mut _22: &[u64];
    let mut _23: &[u64; 4];
    let _24: &[u64; 4];
    let mut _25: {closure@programs/drift/src/state/fulfillment_params/serum.rs:139:26: 139:29};
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: &serum_dex::state::MarketState;
    let mut _33: &serum_dex::state::Market<'_>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _36: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _37: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _38: &[u8];
    let _39: &[u8];
    let mut _40: &[u64];
    let mut _41: &[u64; 4];
    let _42: &[u64; 4];
    let mut _43: {closure@programs/drift/src/state/fulfillment_params/serum.rs:144:26: 144:29};
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: &serum_dex::state::MarketState;
    let mut _51: &serum_dex::state::Market<'_>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _54: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _55: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _56: &[u8];
    let _57: &[u8];
    let mut _58: &[u64];
    let mut _59: &[u64; 4];
    let _60: &[u64; 4];
    let mut _61: {closure@programs/drift/src/state/fulfillment_params/serum.rs:148:22: 148:25};
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: &serum_dex::state::MarketState;
    let mut _69: &serum_dex::state::Market<'_>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _72: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _73: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _74: &[u8];
    let _75: &[u8];
    let mut _76: &[u64];
    let mut _77: &[u64; 4];
    let _78: &[u64; 4];
    let mut _79: {closure@programs/drift/src/state/fulfillment_params/serum.rs:152:22: 152:25};
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: &serum_dex::state::MarketState;
    let mut _87: &serum_dex::state::Market<'_>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _90: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _91: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _92: &[u8];
    let _93: &[u8];
    let mut _94: &[u64];
    let mut _95: &[u64; 4];
    let _96: &[u64; 4];
    let mut _97: {closure@programs/drift/src/state/fulfillment_params/serum.rs:157:26: 157:29};
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: &serum_dex::state::MarketState;
    let mut _105: &serum_dex::state::Market<'_>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Pubkey>;
    let mut _108: std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode>;
    let mut _109: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _110: &[u8];
    let _111: &[u8];
    let mut _112: &[u64];
    let mut _113: &[u64; 4];
    let _114: &[u64; 4];
    let mut _115: {closure@programs/drift/src/state/fulfillment_params/serum.rs:162:26: 162:29};
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: &serum_dex::state::MarketState;
    let mut _123: &serum_dex::state::Market<'_>;
    let mut _124: state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _125: anchor_lang::prelude::Pubkey;
    let mut _126: anchor_lang::prelude::Pubkey;
    let mut _127: anchor_lang::prelude::Pubkey;
    let mut _128: anchor_lang::prelude::Pubkey;
    let mut _129: anchor_lang::prelude::Pubkey;
    let mut _130: anchor_lang::prelude::Pubkey;
    let mut _131: anchor_lang::prelude::Pubkey;
    let mut _132: anchor_lang::prelude::Pubkey;
    let mut _133: anchor_lang::prelude::Pubkey;
    let mut _134: anchor_lang::prelude::Pubkey;
    let mut _135: u64;
    let mut _136: u16;
    let mut _137: instructions::keeper::SpotFulfillmentType;
    let mut _138: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _139: [u8; 4];
    let mut _140: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _141: &anchor_lang::prelude::Pubkey;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: &anchor_lang::prelude::Pubkey;
    let mut _144: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    scope 1 {
        debug market_state => _4;
        let _13: [u64; 4];
        scope 6 {
            debug market_state_event_queue => _13;
            let _16: anchor_lang::prelude::Pubkey;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: anchor_lang::prelude::Pubkey;
            scope 7 {
                debug serum_event_queue => _16;
                let _31: [u64; 4];
                scope 12 {
                    debug market_state_request_queue => _31;
                    let _34: anchor_lang::prelude::Pubkey;
                    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _48: anchor_lang::prelude::Pubkey;
                    scope 13 {
                        debug serum_request_queue => _34;
                        let _49: [u64; 4];
                        scope 18 {
                            debug market_state_bids => _49;
                            let _52: anchor_lang::prelude::Pubkey;
                            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _66: anchor_lang::prelude::Pubkey;
                            scope 19 {
                                debug serum_bids => _52;
                                let _67: [u64; 4];
                                scope 24 {
                                    debug market_state_asks => _67;
                                    let _70: anchor_lang::prelude::Pubkey;
                                    let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _84: anchor_lang::prelude::Pubkey;
                                    scope 25 {
                                        debug serum_asks => _70;
                                        let _85: [u64; 4];
                                        scope 30 {
                                            debug market_state_coin_vault => _85;
                                            let _88: anchor_lang::prelude::Pubkey;
                                            let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _102: anchor_lang::prelude::Pubkey;
                                            scope 31 {
                                                debug serum_base_vault => _88;
                                                let _103: [u64; 4];
                                                scope 36 {
                                                    debug market_state_pc_vault => _103;
                                                    let _106: anchor_lang::prelude::Pubkey;
                                                    let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _120: anchor_lang::prelude::Pubkey;
                                                    scope 37 {
                                                        debug serum_quote_vault => _106;
                                                        let _121: u64;
                                                        scope 42 {
                                                            debug serum_signer_nonce => _121;
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug residual => _117;
                                                        scope 39 {
                                                        }
                                                    }
                                                    scope 40 {
                                                        debug val => _120;
                                                        scope 41 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 32 {
                                                debug residual => _99;
                                                scope 33 {
                                                }
                                            }
                                            scope 34 {
                                                debug val => _102;
                                                scope 35 {
                                                }
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _81;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _84;
                                        scope 29 {
                                        }
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _63;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _66;
                                scope 23 {
                                }
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _45;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _48;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _27;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _30;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = SerumContext::<'_, '_>::load_serum_market(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind: bb65];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: serum_dex::state::Market<'_>);
        _4 = move _12;
        StorageDead(_12);
        _148 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_4;
        _14 = <serum_dex::state::Market<'_> as Deref>::deref(move _15) -> [return: bb7, unwind: bb64];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind: bb66];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _146 = discriminant(_5);
        StorageDead(_5);
        goto -> bb62;
    }

    bb7: {
        StorageDead(_15);
        _13 = ((*_14).13: [u64; 4]);
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_13;
        _23 = &(*_24);
        _22 = move _23 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_23);
        _21 = bytemuck::cast_slice::<u64, u8>(move _22) -> [return: bb8, unwind: bb64];
    }

    bb8: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _20) -> [return: bb9, unwind: bb64];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_25);
        _25 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:139:26: 139:29};
        _18 = std::result::Result::<anchor_lang::prelude::Pubkey, std::io::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:139:26: 139:29}>(move _19, move _25) -> [return: bb10, unwind: bb64];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_19);
        _17 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _18) -> [return: bb11, unwind: bb64];
    }

    bb11: {
        StorageDead(_18);
        _26 = discriminant(_17);
        switchInt(move _26) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_17 as Continue).0: anchor_lang::prelude::Pubkey);
        _16 = _30;
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_17);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_4;
        _32 = <serum_dex::state::Market<'_> as Deref>::deref(move _33) -> [return: bb15, unwind: bb64];
    }

    bb13: {
        StorageLive(_27);
        _27 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb14, unwind: bb64];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_17);
        goto -> bb61;
    }

    bb15: {
        StorageDead(_33);
        _31 = ((*_32).12: [u64; 4]);
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_31;
        _41 = &(*_42);
        _40 = move _41 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_41);
        _39 = bytemuck::cast_slice::<u64, u8>(move _40) -> [return: bb16, unwind: bb64];
    }

    bb16: {
        _38 = &(*_39);
        StorageDead(_40);
        _37 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _38) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        StorageDead(_38);
        StorageLive(_43);
        _43 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:144:26: 144:29};
        _36 = std::result::Result::<anchor_lang::prelude::Pubkey, std::io::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:144:26: 144:29}>(move _37, move _43) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_37);
        _35 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _36) -> [return: bb19, unwind: bb64];
    }

    bb19: {
        StorageDead(_36);
        _44 = discriminant(_35);
        switchInt(move _44) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_48);
        _48 = ((_35 as Continue).0: anchor_lang::prelude::Pubkey);
        _34 = _48;
        StorageDead(_48);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_35);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_4;
        _50 = <serum_dex::state::Market<'_> as Deref>::deref(move _51) -> [return: bb23, unwind: bb64];
    }

    bb21: {
        StorageLive(_45);
        _45 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb22, unwind: bb64];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_35);
        goto -> bb60;
    }

    bb23: {
        StorageDead(_51);
        _49 = ((*_50).14: [u64; 4]);
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_49;
        _59 = &(*_60);
        _58 = move _59 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_59);
        _57 = bytemuck::cast_slice::<u64, u8>(move _58) -> [return: bb24, unwind: bb64];
    }

    bb24: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _56) -> [return: bb25, unwind: bb64];
    }

    bb25: {
        StorageDead(_56);
        StorageLive(_61);
        _61 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:148:22: 148:25};
        _54 = std::result::Result::<anchor_lang::prelude::Pubkey, std::io::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:148:22: 148:25}>(move _55, move _61) -> [return: bb26, unwind: bb64];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_55);
        _53 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _54) -> [return: bb27, unwind: bb64];
    }

    bb27: {
        StorageDead(_54);
        _62 = discriminant(_53);
        switchInt(move _62) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_66);
        _66 = ((_53 as Continue).0: anchor_lang::prelude::Pubkey);
        _52 = _66;
        StorageDead(_66);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_53);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_4;
        _68 = <serum_dex::state::Market<'_> as Deref>::deref(move _69) -> [return: bb31, unwind: bb64];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb30, unwind: bb64];
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_53);
        goto -> bb59;
    }

    bb31: {
        StorageDead(_69);
        _67 = ((*_68).15: [u64; 4]);
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_67;
        _77 = &(*_78);
        _76 = move _77 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_77);
        _75 = bytemuck::cast_slice::<u64, u8>(move _76) -> [return: bb32, unwind: bb64];
    }

    bb32: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _74) -> [return: bb33, unwind: bb64];
    }

    bb33: {
        StorageDead(_74);
        StorageLive(_79);
        _79 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:152:22: 152:25};
        _72 = std::result::Result::<anchor_lang::prelude::Pubkey, std::io::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:152:22: 152:25}>(move _73, move _79) -> [return: bb34, unwind: bb64];
    }

    bb34: {
        StorageDead(_79);
        StorageDead(_73);
        _71 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _72) -> [return: bb35, unwind: bb64];
    }

    bb35: {
        StorageDead(_72);
        _80 = discriminant(_71);
        switchInt(move _80) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_84);
        _84 = ((_71 as Continue).0: anchor_lang::prelude::Pubkey);
        _70 = _84;
        StorageDead(_84);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_71);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_4;
        _86 = <serum_dex::state::Market<'_> as Deref>::deref(move _87) -> [return: bb39, unwind: bb64];
    }

    bb37: {
        StorageLive(_81);
        _81 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb38, unwind: bb64];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_71);
        goto -> bb58;
    }

    bb39: {
        StorageDead(_87);
        _85 = ((*_86).5: [u64; 4]);
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_85;
        _95 = &(*_96);
        _94 = move _95 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_95);
        _93 = bytemuck::cast_slice::<u64, u8>(move _94) -> [return: bb40, unwind: bb64];
    }

    bb40: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _92) -> [return: bb41, unwind: bb64];
    }

    bb41: {
        StorageDead(_92);
        StorageLive(_97);
        _97 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:157:26: 157:29};
        _90 = std::result::Result::<anchor_lang::prelude::Pubkey, std::io::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:157:26: 157:29}>(move _91, move _97) -> [return: bb42, unwind: bb64];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_91);
        _89 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _90) -> [return: bb43, unwind: bb64];
    }

    bb43: {
        StorageDead(_90);
        _98 = discriminant(_89);
        switchInt(move _98) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_102);
        _102 = ((_89 as Continue).0: anchor_lang::prelude::Pubkey);
        _88 = _102;
        StorageDead(_102);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_89);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_4;
        _104 = <serum_dex::state::Market<'_> as Deref>::deref(move _105) -> [return: bb47, unwind: bb64];
    }

    bb45: {
        StorageLive(_99);
        _99 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb46, unwind: bb64];
    }

    bb46: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb57;
    }

    bb47: {
        StorageDead(_105);
        _103 = ((*_104).8: [u64; 4]);
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_103;
        _113 = &(*_114);
        _112 = move _113 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_113);
        _111 = bytemuck::cast_slice::<u64, u8>(move _112) -> [return: bb48, unwind: bb64];
    }

    bb48: {
        _110 = &(*_111);
        StorageDead(_112);
        _109 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _110) -> [return: bb49, unwind: bb64];
    }

    bb49: {
        StorageDead(_110);
        StorageLive(_115);
        _115 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:162:26: 162:29};
        _108 = std::result::Result::<anchor_lang::prelude::Pubkey, std::io::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:162:26: 162:29}>(move _109, move _115) -> [return: bb50, unwind: bb64];
    }

    bb50: {
        StorageDead(_115);
        StorageDead(_109);
        _107 = <std::result::Result<anchor_lang::prelude::Pubkey, error::ErrorCode> as Try>::branch(move _108) -> [return: bb51, unwind: bb64];
    }

    bb51: {
        StorageDead(_108);
        _116 = discriminant(_107);
        switchInt(move _116) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_120);
        _120 = ((_107 as Continue).0: anchor_lang::prelude::Pubkey);
        _106 = _120;
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_107);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_4;
        _122 = <serum_dex::state::Market<'_> as Deref>::deref(move _123) -> [return: bb55, unwind: bb64];
    }

    bb53: {
        StorageLive(_117);
        _117 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<SerumV3FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb54, unwind: bb64];
    }

    bb54: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_103);
        goto -> bb57;
    }

    bb55: {
        StorageDead(_123);
        _121 = ((*_122).2: u64);
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        _125 = (*_2);
        StorageLive(_126);
        _140 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _141 = deref_copy ((*_140).0: &anchor_lang::prelude::Pubkey);
        _126 = (*_141);
        StorageLive(_127);
        _142 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _143 = deref_copy ((*_142).0: &anchor_lang::prelude::Pubkey);
        _127 = (*_143);
        StorageLive(_128);
        _128 = _34;
        StorageLive(_129);
        _129 = _16;
        StorageLive(_130);
        _130 = _52;
        StorageLive(_131);
        _131 = _70;
        StorageLive(_132);
        _132 = _88;
        StorageLive(_133);
        _133 = _106;
        StorageLive(_134);
        _144 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _145 = deref_copy ((*_144).0: &anchor_lang::prelude::Pubkey);
        _134 = (*_145);
        StorageLive(_135);
        _135 = _121;
        StorageLive(_136);
        _136 = _3;
        StorageLive(_137);
        _137 = keeper::SpotFulfillmentType::SerumV3;
        StorageLive(_138);
        _138 = state::spot_market::SpotFulfillmentConfigStatus::Enabled;
        StorageLive(_139);
        _139 = [const 0_u8; 4];
        _124 = SerumV3FulfillmentConfig { pubkey: move _125, serum_program_id: move _126, serum_market: move _127, serum_request_queue: move _128, serum_event_queue: move _129, serum_bids: move _130, serum_asks: move _131, serum_base_vault: move _132, serum_quote_vault: move _133, serum_open_orders: move _134, serum_signer_nonce: move _135, market_index: move _136, fulfillment_type: move _137, status: move _138, padding: move _139 };
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        _0 = std::result::Result::<SerumV3FulfillmentConfig, error::ErrorCode>::Ok(move _124);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_16);
        StorageDead(_13);
        drop(_4) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        StorageDead(_4);
        goto -> bb63;
    }

    bb57: {
        StorageDead(_88);
        StorageDead(_85);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_70);
        StorageDead(_67);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_52);
        StorageDead(_49);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_34);
        StorageDead(_31);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_16);
        StorageDead(_13);
        drop(_4) -> [return: bb62, unwind: bb65];
    }

    bb62: {
        StorageDead(_4);
        goto -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_4) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        resume;
    }

    bb66 (cleanup): {
        _150 = discriminant(_5);
        goto -> bb65;
    }
}
