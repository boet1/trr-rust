digraph Mir_0_2612 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_max_fill_amounts_for_market(_1: &amp;ReErased state::user::User, _2: &amp;ReErased state::spot_market::SpotMarket, _3: bool) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _6: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::user::User;<br align="left"/>let mut _8: u16;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: usize;<br align="left"/>let _14: i128;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _16: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _17: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: i128;<br align="left"/>let mut _27: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _28: i128;<br align="left"/>let mut _29: bool;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug market =&gt; _2;<br align="left"/>debug is_leaving_drift =&gt; _3;<br align="left"/>debug position_index =&gt; _4;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug token_amount =&gt; _14;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/>StorageLive(_8)<br/>_8 = ((*_2).42: u16)<br/></td></tr><tr><td align="left">_6 = User::get_spot_position_index(move _7, move _8)</td></tr></table>>];
    bb1__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_5 as Continue).0: usize)<br/>_4 = _13<br/>StorageDead(_13)<br/>StorageDead(_5)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _4<br/>_19 = Len(((*_1).3: [state::user::SpotPosition; 8]))<br/>_20 = Lt(_18, _19)<br/></td></tr><tr><td align="left">assert(move _20, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _19, _18)</td></tr></table>>];
    bb4__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = &amp;((*_1).3: [state::user::SpotPosition; 8])[_18]<br/>StorageLive(_21)<br/>_21 = &amp;(*_2)<br/></td></tr><tr><td align="left">_16 = SpotPosition::get_signed_token_amount(move _17, move _21)</td></tr></table>>];
    bb8__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb9__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_22 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb10__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_15 as Continue).0: i128)<br/>_14 = _26<br/>StorageDead(_26)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageLive(_27)<br/>_27 = &amp;(*_2)<br/>StorageLive(_28)<br/>_28 = _14<br/>StorageLive(_29)<br/>_29 = _3<br/></td></tr><tr><td align="left">_0 = get_max_withdraw_for_market_with_token_amount(move _27, move _28, move _29)</td></tr></table>>];
    bb11__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb12__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_14)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2612 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2612 -> bb1__0_2612 [label="return"];
    bb1__0_2612 -> bb2__0_2612 [label="return"];
    bb2__0_2612 -> bb3__0_2612 [label="0"];
    bb2__0_2612 -> bb5__0_2612 [label="1"];
    bb2__0_2612 -> bb4__0_2612 [label="otherwise"];
    bb3__0_2612 -> bb7__0_2612 [label="success"];
    bb5__0_2612 -> bb6__0_2612 [label="return"];
    bb6__0_2612 -> bb14__0_2612 [label=""];
    bb7__0_2612 -> bb8__0_2612 [label="return"];
    bb8__0_2612 -> bb9__0_2612 [label="return"];
    bb9__0_2612 -> bb10__0_2612 [label="0"];
    bb9__0_2612 -> bb11__0_2612 [label="1"];
    bb9__0_2612 -> bb4__0_2612 [label="otherwise"];
    bb10__0_2612 -> bb13__0_2612 [label="return"];
    bb11__0_2612 -> bb12__0_2612 [label="return"];
    bb12__0_2612 -> bb14__0_2612 [label=""];
    bb13__0_2612 -> bb15__0_2612 [label=""];
    bb14__0_2612 -> bb15__0_2612 [label=""];
}
