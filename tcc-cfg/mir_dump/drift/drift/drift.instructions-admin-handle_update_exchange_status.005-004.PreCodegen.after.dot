digraph Mir_0_1105 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_update_exchange_status(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::AdminUpdateState&lt;ReErased&gt;&gt;, _2: u8) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: &amp;ReErased str;<br align="left"/>let _5: &amp;ReErased str;<br align="left"/>let mut _6: &amp;ReErased std::string::String;<br align="left"/>let _7: &amp;ReErased std::string::String;<br align="left"/>let _8: std::string::String;<br align="left"/>let _9: std::string::String;<br align="left"/>let mut _10: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _11: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _12: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _13: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _14: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _15: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _16: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _17: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _18: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _19: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _20: &amp;ReErased u8;<br align="left"/>let _21: &amp;ReErased u8;<br align="left"/>let _22: &amp;ReErased state::state::State;<br align="left"/>let mut _23: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _24: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _25: &amp;ReErased u8;<br align="left"/>let _26: &amp;ReErased u8;<br align="left"/>let mut _27: u8;<br align="left"/>let mut _28: &amp;ReErased mut state::state::State;<br align="left"/>let mut _29: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _30: ();<br align="left"/>let mut _31: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _32: &amp;ReErased mut instructions::admin::AdminUpdateState&lt;ReErased&gt;;<br align="left"/>let mut _33: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _34: &amp;ReErased mut instructions::admin::AdminUpdateState&lt;ReErased&gt;;<br align="left"/>let mut _35: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _36: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _37: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug exchange_status =&gt; _2;<br align="left"/>debug res =&gt; _9;<br align="left"/>>;
    bb0__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_31 = const _<br/>_13 = &amp;(*_31)<br/>_12 = &amp;(*_13)<br/>_11 = move _12 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_12)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_32 = deref_copy (_1.1: &amp;mut instructions::admin::AdminUpdateState&lt;'_&gt;)<br/>_33 = deref_copy ((*_32).1: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_36 = (((_33.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_23 = &amp;(*_36)<br/></td></tr><tr><td align="left">_22 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _23)</td></tr></table>>];
    bb1__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_21 = &amp;((*_22).19: u8)<br/>_20 = &amp;(*_21)<br/></td></tr><tr><td align="left">_19 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;u8&gt;(move _20)</td></tr></table>>];
    bb2__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;_2<br/>_25 = &amp;(*_26)<br/></td></tr><tr><td align="left">_24 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;u8&gt;(move _25)</td></tr></table>>];
    bb3__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_18 = [move _19, move _24]<br/>StorageDead(_24)<br/>StorageDead(_19)<br/>_17 = &amp;_18<br/>_16 = &amp;(*_17)<br/>_15 = move _16 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_10 = Arguments::&lt;'_&gt;::new_v1(move _11, move _15)</td></tr></table>>];
    bb4__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = format(move _10)</td></tr></table>>];
    bb5__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_13)<br/>_8 = move _9<br/>StorageDead(_9)<br/>_7 = &amp;_8<br/>_6 = &amp;(*_7)<br/></td></tr><tr><td align="left">_5 = &lt;String as Deref&gt;::deref(move _6)</td></tr></table>>];
    bb6__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_4 = &amp;(*_5)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_3 = solana_program::log::sol_log(move _4)</td></tr></table>>];
    bb7__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">drop(_8)</td></tr></table>>];
    bb8__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/>StorageLive(_27)<br/>_27 = _2<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_34 = deref_copy (_1.1: &amp;mut instructions::admin::AdminUpdateState&lt;'_&gt;)<br/>_35 = deref_copy ((*_34).1: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_37 = (((_35.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_29 = &amp;mut (*_37)<br/></td></tr><tr><td align="left">_28 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as DerefMut&gt;::deref_mut(move _29)</td></tr></table>>];
    bb9__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>((*_28).19: u8) = move _27<br/>StorageDead(_27)<br/>StorageDead(_28)<br/>StorageLive(_30)<br/>_30 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _30)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_8)</td></tr></table>>];
    bb11__0_1105 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1105 -> bb1__0_1105 [label="return"];
    bb1__0_1105 -> bb2__0_1105 [label="return"];
    bb2__0_1105 -> bb3__0_1105 [label="return"];
    bb3__0_1105 -> bb4__0_1105 [label="return"];
    bb4__0_1105 -> bb5__0_1105 [label="return"];
    bb5__0_1105 -> bb6__0_1105 [label="return"];
    bb5__0_1105 -> bb10__0_1105 [label="unwind"];
    bb6__0_1105 -> bb7__0_1105 [label="return"];
    bb6__0_1105 -> bb10__0_1105 [label="unwind"];
    bb7__0_1105 -> bb8__0_1105 [label="return"];
    bb7__0_1105 -> bb11__0_1105 [label="unwind"];
    bb8__0_1105 -> bb9__0_1105 [label="return"];
    bb10__0_1105 -> bb11__0_1105 [label="return"];
}
