// MIR for `state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::margin_requirement_for_open_orders` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::margin_requirement_for_open_orders(_1: &PerpPosition) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let mut _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u8;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _10: u128;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).14: u8);
        _4 = <u8 as Cast>::cast::<u128>(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: u128);
        _2 = _10;
        StorageDead(_10);
        _0 = <u128 as SafeMath>::safe_mul(move _2, const _) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_9);
        _9 = _7;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_2);
        StorageDead(_3);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_2);
        StorageDead(_3);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
