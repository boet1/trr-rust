// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::last_bid_discount` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::last_bid_discount(_1: &AMM) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _2: u64;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _4: std::result::Result<u64, error::ErrorCode>;
    let mut _5: &state::perp_market::AMM;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _10: u64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _13: std::result::Result<i64, error::ErrorCode>;
    let mut _14: u64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _16: std::result::Result<u64, error::ErrorCode>;
    let mut _17: &state::perp_market::AMM;
    let mut _18: u64;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: i64;
    let mut _30: i64;
    scope 1 {
        debug reserve_price => _2;
        let _11: i64;
        let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _23: u64;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: i64;
        scope 6 {
            debug bid_price => _11;
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _25;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _28;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = AMM::reserve_price(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: u64);
        _2 = _10;
        StorageDead(_10);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_1);
        StorageLive(_18);
        _18 = _2;
        _16 = AMM::bid_price(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_9);
        _9 = _7;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb19;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: u64);
        _14 = _23;
        StorageDead(_23);
        _13 = <u64 as Cast>::cast::<i64>(move _14) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb18;
    }

    bb12: {
        StorageDead(_14);
        _12 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_13);
        _24 = discriminant(_12);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_28);
        _28 = ((_12 as Continue).0: i64);
        _11 = _28;
        StorageDead(_28);
        StorageDead(_15);
        StorageDead(_12);
        StorageLive(_29);
        _29 = (((*_1).1: state::oracle::HistoricalOracleData).0: i64);
        StorageLive(_30);
        _30 = _11;
        _0 = <i64 as SafeMath>::safe_sub(move _29, move _30) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_25);
        _25 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb20;
    }

    bb18: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_2);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
