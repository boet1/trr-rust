// MIR for `get_token_value` before PreCodegen

fn get_token_value(_1: i128, _2: u32, _3: i64) -> std::result::Result<i128, error::ErrorCode> {
    debug token_amount => _1;
    debug spot_decimals => _2;
    debug oracle_price => _3;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i128;
    let mut _7: !;
    let _8: i128;
    let mut _9: u32;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _12: std::result::Result<i128, error::ErrorCode>;
    let mut _13: i128;
    let mut _14: i128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _16: std::result::Result<i128, error::ErrorCode>;
    let mut _17: i64;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: bool;
    let mut _29: i128;
    let mut _30: i128;
    let mut _31: i128;
    let mut _32: i128;
    let mut _33: i128;
    let mut _34: i128;
    scope 1 {
        debug precision_decrease => _8;
        let _10: i128;
        let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _22: i128;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: i128;
        scope 2 {
            debug token_with_oracle => _10;
        }
        scope 3 {
            debug residual => _19;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _22;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = Eq(move _6, const 0_i128);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb22;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = core::num::<impl i128>::pow(const 10_i128, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _1;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        _16 = <i64 as Cast>::cast::<i128>(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_17);
        _15 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: i128);
        _14 = _22;
        StorageDead(_22);
        _12 = <i128 as SafeMath>::safe_mul(move _13, move _14) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb21;
    }

    bb10: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_12);
        _23 = discriminant(_11);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_11 as Continue).0: i128);
        _10 = _27;
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_11);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _10;
        _28 = Lt(move _29, const 0_i128);
        switchInt(move _28) -> [0: bb16, otherwise: bb15];
    }

    bb13: {
        StorageLive(_24);
        _24 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_24);
        goto -> bb21;
    }

    bb15: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = _10;
        StorageLive(_31);
        StorageLive(_32);
        _32 = _8;
        _31 = core::num::<impl i128>::abs(move _32) -> [return: bb17, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        StorageLive(_33);
        _33 = _10;
        StorageLive(_34);
        _34 = _8;
        _0 = <i128 as SafeMath>::safe_div(move _33, move _34) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageDead(_32);
        _0 = <i128 as SafeDivFloor>::safe_div_floor(move _30, move _31) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_28);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb22;
    }

    bb22: {
        return;
    }
}
